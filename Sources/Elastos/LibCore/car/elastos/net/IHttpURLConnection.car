
module
{
    interface Elastos.IO.IInputStream;

    namespace Elastos {
    namespace Net {

    /**
     * An URLConnection for HTTP (RFC 2616) used to send and receive data
     * over the web. Data may be of any type and length. This class may be
     * used to send and receive streaming data whose length is not known in
     * advance.
     *
     * @sa URLConnection
     * @sa RFC 2616
     *
     * Uses of this class follow a pattern:
     * <p>
     * 1.Obtain a new HttpURLConnection by calling URL.openConnection() and casting the result to HttpURLConnection.
     *
     * @sa URL.openConnection()
     * <p>
     * 2.Prepare the request. The primary property of a request is its URI. Request headers may also include metadata such as credentials, preferred content types, and session cookies.
     * <p>
     * 3.Optionally upload a request body. Instances must be configured with setDoOutput(true) if they include a request body. Transmit data by writing to the stream returned by getOutputStream().
     *
     * @sa setDoOutput(true)
     * @sa getOutputStream()
     * <p>
     * 4.Read the response. Response headers typically include metadata such as the response body's content type and length, modified dates and session cookies. The response body may be read from the stream returned by getInputStream(). If the response has no body, that method returns an empty stream.
     *
     * @sa getInputStream()
     * <p>
     * 5.Disconnect. Once the response body has been read, the HttpURLConnection should be closed by calling disconnect(). Disconnecting releases the resources held by a connection so they may be closed or reused.
     *
     * @sa disconnect()
     * <p>
     * For example, to retrieve the webpage at http://www.android.com/:</p>
     * <pre>
     *   URL url = new URL("http://www.android.com/");
     *   HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
     *   try {
     *     InputStream in = new BufferedInputStream(urlConnection.getInputStream());
     *     readStream(in);
     *     finally {
     *        urlConnection.disconnect();
     *           }
     *      }
     * </pre>
     *
     * <strong>Secure Communication with HTTPS</strong>
     * <p>
     * Calling openConnection() on a URL with the "https" scheme will return
     * an HttpsURLConnection, which allows for overriding the default
     * HostnameVerifier and SSLSocketFactory. An application-supplied
     * SSLSocketFactory created from an SSLContext can provide a custom
     * X509TrustManager for verifying certificate chains and a custom
     * X509KeyManager for supplying client certificates.
     * See HttpsURLConnection for more details.</p>
     *
     * @sa openConnection()
     * @sa HostnameVerifier
     * @sa SSLSocketFactory
     * @sa SSLContext
     * @sa X509TrustManager
     * @sa X509KeyManager
     * @sa HttpsURLConnection
     *
     * <strong>Response Handling</strong>
     * <p>
     * HttpURLConnection will follow up to five HTTP redirects. It will
     * follow redirects from one origin server to another. This
     * implementation doesn't follow redirects from HTTPS to HTTP or vice versa.
     * If the HTTP response indicates that an error occurred, getInputStream()
     * will throw an IOException. Use getErrorStream() to read the error
     * response. The headers can be read in the normal way using getHeaderFields(),
     *
     * @sa getInputStream()
     * @sa IOException
     * @sa getErrorStream()
     * @sa getHeaderFields()
     *
     * <p>
     * <strong>Posting Content</strong>
     * <p>
     * To upload data to a web server, configure the connection for output
     * using setDoOutput(true).
     * For best performance, you should call either
     * setFixedLengthStreamingMode(int) when the body length is known in
     * advance, or setChunkedStreamingMode(int) when it is not. Otherwise
     * HttpURLConnection will be forced to buffer the complete request body
     * in memory before it is transmitted, wasting (and possibly exhausting) heap and increasing latency.
     *
     * @sa setDoOutput(true)
     * @sa setFixedLengthStreamingMode(int)
     * @sa setChunkedStreamingMode(int)
     *
     * <p>
     * For example, to perform an upload:</p>
     * <pre>
     *   HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
     *      try {
     *           urlConnection.setDoOutput(true);
     *           urlConnection.setChunkedStreamingMode(0);
     *           OutputStream out = new BufferedOutputStream(urlConnection.getOutputStream());
     *           writeStream(out);
     *           InputStream in = new BufferedInputStream(urlConnection.getInputStream());
     *           readStream(in);
     *           finally {
     *            urlConnection.disconnect();
     *             }
     *         }
     * </pre>
     * <p>
     * <strong>Performance</strong>
     * <p>
     * The input and output streams returned by this class are not <strong>buffered</strong>.
     * Most callers should wrap the returned streams with BufferedInputStream
     * or BufferedOutputStream. Callers that do only bulk reads or writes may
     * omit buffering.
     * When transferring large amounts of data to or from a server, use
     * streams to limit how much data is in memory at once. Unless you need
     * the entire body to be in memory at once, process it as a stream
     * (rather than storing the complete body as a single byte array or string).
     *
     * @sa BufferedInputStream
     * @sa BufferedOutputStream
     *
     * <p>
     * To reduce latency, this class may reuse the same underlying Socket for
     * multiple request/response pairs. As a result, HTTP connections may be
     * held open longer than necessary. Calls to disconnect() may return the
     * socket to a pool of connected sockets. This behavior can be disabled
     * by setting the http.keepAlive system property to false before issuing
     * any HTTP requests. The http.maxConnections property may be used to
     * control how many idle connections to each server will be held.
     *
     * @sa disconnect()
     * <p>
     * By default, this implementation of HttpURLConnection requests that
     * servers use gzip compression. Since getContentLength() returns the
     * number of bytes transmitted, you cannot use that method to predict how
     * many bytes can be read from getInputStream(). Instead, read that
     * stream until it is exhausted: when read() returns -1. Gzip compression
     * can be disabled by setting the acceptable encodings in the request
     * header:
     * <pre>urlConnection.setRequestProperty("Accept-Encoding", "identity");</pre>
     *
     * @sa getContentLength()
     * @sa read()
     *
     * <p>
     * <strong>Handling Network Sign-On</strong>
     * <p>
     * Some Wi-Fi networks block Internet access until the user clicks
     * through a sign-on page. Such sign-on pages are typically presented by
     * using HTTP redirects. You can use getURL() to test if your connection
     * has been unexpectedly redirected. This check is not valid until <strong>after</strong>
     * the response headers have been received, which you can trigger by
     * calling getHeaderFields() or getInputStream(). For example, to check
     * that a response was not redirected to an unexpected host:</p>
     *
     * @sa getURL()
     * @sa getHeaderFields()
     * @sa getInputStream()
     *
     * <pre>
     *     HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
     *     try {
     *     InputStream in = new BufferedInputStream(urlConnection.getInputStream());
     *      if (!url.getHost().equals(urlConnection.getURL().getHost())) {
     *  // we were redirected! Kick the user out to the browser to sign on?
     *        ...
     *    } finally {
     *        urlConnection.disconnect();
     *          }
     *       }
     * </pre>
     * <p>
     * <strong>HTTP Authentication</strong>
     * <p>
     * HttpURLConnection supports HTTP basic authentication. Use Authenticator to set the VM-wide authentication handler:</p>
     *
     * @sa  HTTP basic authentication
     * @sa Authenticator
     *
     * <pre>
     *  Authenticator.setDefault(new Authenticator() {
     *  protected PasswordAuthentication getPasswordAuthentication() {
     *  return new PasswordAuthentication(username, password.toCharArray());
     *      });
     *   }
     * </pre>
     * <p>
     * Unless paired with HTTPS, this is <strong>not</strong> a secure mechanism for user
     * authentication. In particular, the username, password, request and
     * response are all transmitted over the network without encryption.</p>
     * <p>
     * <strong>Sessions with Cookies</strong>
     * <p>
     * To establish and maintain a potentially long-lived session between
     * client and server, HttpURLConnection includes an extensible cookie
     * manager. Enable VM-wide cookie management using CookieHandler and
     * CookieManager:</p>
     *
     * @sa CookieHandler
     * @sa CookieManager
     *
     * <pre>
     *   CookieManager cookieManager = new CookieManager();
     *   CookieHandler.setDefault(cookieManager);
     * </pre>
     * <p>
     * By default, CookieManager accepts cookies from the origin server only.
     * Two other policies are included: ACCEPT_ALL and ACCEPT_NONE. Implement
     * CookiePolicy to define a custom policy.
     *
     * @sa origin server
     * @sa ACCEPT_ALL
     * @sa ACCEPT_NONE
     * @sa CookiePolicy
     *
     * <p>
     * The default CookieManager keeps all accepted cookies in memory.
     * It will forget these cookies when the VM exits. Implement CookieStore to define a custom cookie store.
     *
     * @sa CookieStore
     * <p>
     * In addition to the cookies set by HTTP responses, you may set cookies
     * programmatically. To be included in HTTP request headers, cookies must
     * have the domain and path properties set.
     * <p>
     * By default, new instances of HttpCookie work only with servers that support
     * RFC 2965 cookies. Many web servers support only the older specification,
     * RFC 2109. For compatibility with the most web servers, set the cookie version to 0.
     *
     * @sa RFC 2965
     * @sa RFC 2109
     *
     * For example, to receive www.twitter.com in French:
     * <pre>
     *   HttpCookie cookie = new HttpCookie("lang", "fr");
     *   cookie.setDomain("twitter.com");
     *    cookie.setPath("/");
     *    cookie.setVersion(0);
     *    cookieManager.getCookieStore().add(new URI("http://twitter.com/"), cookie);
     * </pre>
     *
     * <strong>HTTP Methods</strong>
     * <p>
     * HttpURLConnection uses the GET method by default. It will use POST if
     * setDoOutput(true) has been called. Other HTTP methods
     * (OPTIONS, HEAD, PUT, DELETE and TRACE) can be used with setRequestMethod(String).
     *
     * @sa setDoOutput(true)
     * @sa setRequestMethod(String)
     *
     *
     * <strong>Proxies</strong>
     * <p>
     * By default, this class will connect directly to the origin server.
     * It can also connect via an HTTP or SOCKS proxy. To use a proxy, use
     * URL.openConnection(Proxy) when creating the connection.</p>
     *
     * @sa origin server
     * @sa URL.openConnection(Proxy)
     * @sa HTTP
     * @sa SOCKS
     *
     * <strong>IPv6 Support</strong>
     * <p>
     * This class includes transparent support for IPv6. For hosts with both
     * IPv4 and IPv6 addresses, it will attempt to connect to each of a
     * host's addresses until a connection is established.</p>
     *
     * <strong>Response Caching</strong>
     * <p>
     * Android 4.0 (Ice Cream Sandwich) includes a response cache. See
     * android.net.http.HttpResponseCache for instructions on enabling HTTP
     * caching in your application.</p>
     *
     * <strong>Avoiding Bugs In Earlier Releases</strong>
     * <p>
     * Prior to Android 2.2 (Froyo), this class had some frustrating bugs.
     * In particular, calling close() on a readable InputStream could poison
     * the connection pool. Work around this by disabling connection pooling:
     *
     * @sa poison the connection pool
     * <pre>
     *   private void disableConnectionReuseIfNecessary() {
     *     // Work around pre-Froyo bugs in HTTP connection reuse.
     *    if (Integer.parseInt(Build.VERSION.SDK) < Build.VERSION_CODES.FROYO)
     *       {
     *      System.setProperty("http.keepAlive", "false");
     *        }
     *      }
     * </pre></p>
     * <p>
     * Each instance of HttpURLConnection may be used for one request/response pair. Instances of this class are not thread safe.</p>
     *
     * @implements Elastos.Net.IURLConnection
     *
     * @Involve
     * interface IURLConnection;
     */
    interface IHttpURLConnection {
        // 2XX: generally "OK"
        // 3XX: relocation/redirect
        // 4XX: client error
        // 5XX: server error
        /**
         * Numeric status code, 202: Accepted
         */
        const Int32 HTTP_ACCEPTED = 202;

        /**
         * Numeric status code, 502: Bad Gateway
         */
        const Int32 HTTP_BAD_GATEWAY = 502;

        /**
         * Numeric status code, 405: Bad Method
         */
        const Int32 HTTP_BAD_METHOD = 405;

        /**
         * Numeric status code, 400: Bad Request
         */
        const Int32 HTTP_BAD_REQUEST = 400;

        /**
         * Numeric status code, 408: Client Timeout
         */
        const Int32 HTTP_CLIENT_TIMEOUT = 408;

        /**
         * Numeric status code, 409: Conflict
         */
        const Int32 HTTP_CONFLICT = 409;

        /**
         * Numeric status code, 201: Created
         */
        const Int32 HTTP_CREATED = 201;

        /**
         * Numeric status code, 413: Entity too large
         */
        const Int32 HTTP_ENTITY_TOO_LARGE = 413;

        /**
         * Numeric status code, 403: Forbidden
         */
        const Int32 HTTP_FORBIDDEN = 403;

        /**
         * Numeric status code, 504: Gateway timeout
         */
        const Int32 HTTP_GATEWAY_TIMEOUT = 504;

        /**
         * Numeric status code, 410: Gone
         */
        const Int32 HTTP_GONE = 410;

        /**
         * Numeric status code, 500: Internal error
         */
        const Int32 HTTP_INTERNAL_ERROR = 500;

        /**
         * Numeric status code, 411: Length required
         */
        const Int32 HTTP_LENGTH_REQUIRED = 411;

        /**
         * Numeric status code, 301 Moved permanently
         */
        const Int32 HTTP_MOVED_PERM = 301;

        /**
         * Numeric status code, 302: Moved temporarily
         */
        const Int32 HTTP_MOVED_TEMP = 302;

        /**
         * Numeric status code, 300: Multiple choices
         */
        const Int32 HTTP_MULT_CHOICE = 300;

        /**
         * Numeric status code, 204: No content
         */
        const Int32 HTTP_NO_CONTENT = 204;

        /**
         * Numeric status code, 406: Not acceptable
         */
        const Int32 HTTP_NOT_ACCEPTABLE = 406;

        /**
         * Numeric status code, 203: Not authoritative
         */
        const Int32 HTTP_NOT_AUTHORITATIVE = 203;

        /**
         * Numeric status code, 404: Not found
         */
        const Int32 HTTP_NOT_FOUND = 404;

        /**
         * Numeric status code, 501: Not implemented
         */
        const Int32 HTTP_NOT_IMPLEMENTED = 501;

        /**
         * Numeric status code, 304: Not modified
         */
        const Int32 HTTP_NOT_MODIFIED = 304;

        /**
         * Numeric status code, 200: OK
         */
        const Int32 HTTP_OK = 200;

        /**
         * Numeric status code, 206: Partial
         */
        const Int32 HTTP_PARTIAL = 206;

        /**
         * Numeric status code, 402: Payment required
         */
        const Int32 HTTP_PAYMENT_REQUIRED = 402;

        /**
         * Numeric status code, 412: Precondition failed
         */
        const Int32 HTTP_PRECON_FAILED = 412;

        /**
         * Numeric status code, 407: Proxy authentication required
         */
        const Int32 HTTP_PROXY_AUTH = 407;

        /**
         * Numeric status code, 414: Request too long
         */
        const Int32 HTTP_REQ_TOO_LONG = 414;

        /**
         * Numeric status code, 205: Reset
         */
        const Int32 HTTP_RESET = 205;

        /**
         * Numeric status code, 303: See other
         */
        const Int32 HTTP_SEE_OTHER = 303;

        /**
         * Numeric status code, 500: Internal error
         *
         * @deprecated Use HTTP_INTERNAL_ERROR
         *
         * @sa #HTTP_INTERNAL_ERROR
         */
        const Int32 HTTP_SERVER_ERROR = 500;

        /**
         * Numeric status code, 305: Use proxy.
         *
         * <p>Like Firefox and Chrome, this class doesn't honor this response code.
         * Other implementations respond to this status code by retrying the request
         * using the HTTP proxy named by the response's Location header field.
         */
        const Int32 HTTP_USE_PROXY = 305;

        /**
         * Numeric status code, 401: Unauthorized
         */
        const Int32 HTTP_UNAUTHORIZED = 401;

        /**
         * Numeric status code, 415: Unsupported type
         */
        const Int32 HTTP_UNSUPPORTED_TYPE = 415;

        /**
         * Numeric status code, 503: Unavailable
         */
        const Int32 HTTP_UNAVAILABLE = 503;

        /**
         * Numeric status code, 505: Version not supported
         */
        const Int32 HTTP_VERSION = 505;

        /**
         * Releases this connection so that its resources may be either reused or
         * closed.
         *
         * <p>Unlike other Java implementations, this will not necessarily close
         * socket connections that can be reused. You can disable all connection
         * reuse by setting the {http.keepAlive} system property to
         * {false} before issuing any HTTP requests.
         */
        Disconnect();

        /**
         * Returns an input stream from the server in the case of an error such as
         * the requested file has not been found on the remote server. This stream
         * can be used to read the data the server will send back.
         *
         * @return the error input stream returned by the server.
         */
        GetErrorStream(
            [out] IInputStream** stream);

        /**
         * Returns the request method which will be used to make the request to the
         * remote HTTP server. All possible methods of this HTTP implementation is
         * listed in the class definition.
         *
         * @return the request method string.
         * @see #method
         * @see #setRequestMethod
         */
        GetRequestMethod(
            [out] String* method);

        /**
         * Returns the response code returned by the remote HTTP server.
         *
         * @return the response code, -1 if no valid response code
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if there is an IO error during the retrieval.
         * @see #getResponseMessage
         */
        GetResponseCode(
            [out] Int32* responseCode);

        /**
         * Returns the response message returned by the remote HTTP server.
         *
         * @return the response message. {null} if no such response exists.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if there is an error during the retrieval.
         * @see #getResponseCode()
         */
        GetResponseMessage(
            [out] String* message);

        /**
         * Sets the request command which will be sent to the remote HTTP server.
         * This method can only be called before the connection is made.
         *
         * @param method
         *            the string representing the method to be used.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * ProtocolException | if this is called after connected, or the method is not supported by this HTTP implementation.
         * @see #getRequestMethod()
         * @see #method
         */
        SetRequestMethod(
            [in] String method);

        /**
         * Returns whether this connection uses a proxy server or not.
         *
         * @return {true} if this connection passes a proxy server, false
         *         otherwise.
         */
        UsingProxy(
            [out] Boolean* usingProxy);

        /**
         * Returns whether this connection follows redirects.
         *
         * @return {true} if this connection follows redirects, false
         *         otherwise.
         */
        GetInstanceFollowRedirects(
            [out] Boolean* followRedirects);

        /**
         * Sets whether this connection follows redirects.
         *
         * @param followRedirects
         *            {true} if this connection will follows redirects, false
         *            otherwise.
         */
        SetInstanceFollowRedirects(
            [in] Boolean followRedirects);

        /**
         * Configures this connection to stream the request body with the known
         * fixed byte count of {@code contentLength}.
         *
         * @see #setChunkedStreamingMode
         * @param contentLength
         *            the fixed length of the HTTP request body.
         * @throws IllegalStateException
         *             if already connected or another mode already set.
         * @throws IllegalArgumentException
         *             if {@code contentLength} is less than zero.
         * @since 1.7
         */
        SetFixedLengthStreamingMode(
            [in] Int64 contentLength);

        /**
         * Equivalent to {@code setFixedLengthStreamingMode((long) contentLength)},
         * but available on earlier versions of Android and limited to 2 GiB.
         */
        SetFixedLengthStreamingMode(
            [in] Int32 contentLength);

        /**
         * Stream a request body whose length is not known in advance. Old HTTP/1.0
         * only servers may not support this mode.
         *
         * <p>When HTTP chunked encoding is used, the stream is divided into
         * chunks, each prefixed with a header containing the chunk's size. Setting
         * a large chunk length requires a large internal buffer, potentially
         * wasting memory. Setting a small chunk length increases the number of
         * bytes that must be transmitted because of the header on every chunk.
         * Most caller should use {0} to get the system default.
         *
         * @see #setFixedLengthStreamingMode
         * @param chunkLength the length to use, or {0} for the default chunk
         *     length.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalStateException | if already connected or another mode already set.
         */
        SetChunkedStreamingMode(
            [in] Int32 chunkLength);
    }

    interface IHttpURLConnectionHelper {
        /**
         * Returns the value of {followRedirects} which indicates if this
         * connection follows a different URL redirected by the server. It is
         * enabled by default.
         *
         * @return the value of the flag.
         * @see #setFollowRedirects
         */
        GetFollowRedirects(
            [out] Boolean* result);

        /**
         * Sets the flag of whether this connection will follow redirects returned
         * by the remote server.
         *
         * @param auto
         *            the value to enable or disable this option.
         */
        SetFollowRedirects(
            [in] Boolean autoValue);
    }

    } // namespace Net
    } // namespace Elastos
}
