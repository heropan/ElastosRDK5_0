
module
{
    interface Elastos.Net.INetworkInterface;

    namespace Elastos {
    namespace Net {

     /**
     * An Internet Protocol (IP) address. This can be either an IPv4 address or an IPv6
     * address, and in practice you'll have an instance of either Inet4Address or
     * Inet6Address (this class cannot be instantiated directly). Most code does not
     * need to distinguish between the two families, and should use InetAddress.
     * <p>
     * An InetAddress may have a hostname (accessible via getHostName), but may not,
     * depending on how the InetAddress was created.

     * <strong>IPv4 numeric address formats</strong>
     * <p>
     * The getAllByName method accepts IPv4 addresses in the "decimal-dotted-quad" form only:
     * <li> "1.2.3.4" - 1.2.3.4</li>
     * <strong>IPv6 numeric address formats</strong>
     * <p>
     * The getAllByName method accepts IPv6 addresses in the following forms
     * (this text comes from RFC 2373, which you should consult for full details of IPv6 addressing):
     * <p>
     * <li>The preferred form is x:x:x:x:x:x:x:x, where the 'x's are the
     * hexadecimal values of the eight 16-bit pieces of the address. Note that it
     * is not necessary to write the leading zeros in an individual field, but
     * there must be at least one numeral in every field (except for the case
     * described in the next bullet). Examples:</li>
     * <pre>
     * FEDC:BA98:7654:3210:FEDC:BA98:7654:3210
     * 1080:0:0:0:8:800:200C:417A
     * </pre>
     * <p>
     * <li>Due to some methods of allocating certain styles of IPv6 addresses, it
     * will be common for addresses to contain long strings of zero bits. In order
     * to make writing addresses containing zero bits easier a special syntax is
     * available to compress the zeros. The use of "::" indicates multiple groups
     * of 16-bits of zeros. The "::" can only appear once in an address. The "::"
     * can also be used to compress the leading and/or trailing zeros in an address. For example the following addresses:</li>
     * <pre>
     *  1080:0:0:0:8:800:200C:417A  a unicast address
     *  FF01:0:0:0:0:0:0:101        a multicast address
     *  0:0:0:0:0:0:0:1             the loopback address
     *  0:0:0:0:0:0:0:0             the unspecified addresses
     * </pre>
     * may be represented as:
     * <pre>
     * 1080::8:800:200C:417A       a unicast address
     * FF01::101                   a multicast address
     * ::1                         the loopback address
     * ::                          the unspecified addresses
     * </pre>
     * <p>
     * <li>An alternative form that is sometimes more convenient when dealing with
     * a mixed environment of IPv4 and IPv6 nodes is x:x:x:x:x:x:d.d.d.d, where
     * the 'x's are the hexadecimal values of the six high-order 16-bit pieces of
     * the address, and the 'd's are the decimal values of the four low-order
     * 8-bit pieces of the address (standard IPv4 representation). Examples:</li>
     * <pre>
     * 0:0:0:0:0:0:13.1.68.3
     * 0:0:0:0:0:FFFF:129.144.52.38
     * </pre>
     * or in compressed form:
     * <pre>
     * ::13.1.68.3
     * ::FFFF:129.144.52.38
     * </pre>
     * <p>
     * Scopes are given using a trailing % followed by the scope id, as in
     * 1080::8:800:200C:417A%2 or 1080::8:800:200C:417A%en0. See RFC 4007 for more
     * on IPv6's scoped address architecture.
     *
     * @sa RFC 4007
     * <p>
     * Additionally, for backwards compatibility, IPv6 addresses may be surrounded by square brackets.
     * <p>
     * <strong>DNS caching</strong>
     * <p>
     * In Android 4.0 (Ice Cream Sandwich) and earlier, DNS caching was performed
     * both by InetAddress and by the C library, which meant that DNS TTLs could
     * not be honored correctly. In later releases, caching is done solely by the
     * C library and DNS TTLs are honored.
     *
     * @sa Inet4Address
     * @sa Inet6Address
     *
     * @Involve
     * interface Elastos.IO.ISerializable;
     */
    interface IInetAddress {
        /**
         * Returns the IP address represented by this {@code InetAddress} instance
         * as a byte array. The elements are in network order (the highest order
         * address byte is in the zeroth element).
         *
         * @return the address in form of a byte array.
         */
        GetAddress(
            [out, callee] ArrayOf<Byte>* address);

        /**
         * Returns the numeric representation of this IP address (such as "127.0.0.1").
         */
        GetHostAddress(
            [out] String* hostAddress);

        /**
         * Returns the host name corresponding to this IP address. This may or may not be a
         * fully-qualified name. If the IP address could not be resolved, the numeric representation
         * is returned instead (see {@link #getHostAddress}).
         */
        GetHostName(
            [out] String* hostName);

        /**
         * Returns the fully qualified hostname corresponding to this IP address.
         */
        GetCanonicalHostName(
            [out] String* hostName);

        GetFamily(
            [out] Int32* family);

        /**
         * Returns whether this is the IPv6 unspecified wildcard address {@code ::}
         * or the IPv4 "any" address, {@code 0.0.0.0}.
         */
        IsAnyLocalAddress(
            [out] Boolean* isAnyLocalAddress);

        /**
         * Returns whether this address is a link-local address or not.
         *
         * <p>Valid IPv6 link-local addresses have the prefix {@code fe80::/10}.
         *
         * <p><a href="http://www.ietf.org/rfc/rfc3484.txt">RFC 3484</a>
         * "Default Address Selection for Internet Protocol Version 6 (IPv6)" states
         * that both IPv4 auto-configuration addresses (prefix {@code 169.254/16}) and
         * IPv4 loopback addresses (prefix {@code 127/8}) have link-local scope, but
         * {@link Inet4Address} only considers the auto-configuration addresses
         * to have link-local scope. That is: the IPv4 loopback address returns false.
         */
        IsLinkLocalAddress(
            [out] Boolean* isLinkLocalAddress);

        /**
         * Returns whether this address is a loopback address or not.
         *
         * <p>Valid IPv4 loopback addresses have the prefix {@code 127/8}.
         *
         * <p>The only valid IPv6 loopback address is {@code ::1}.
         */
        IsLoopbackAddress(
            [out] Boolean* isLoopbackAddress);

        /**
         * Returns whether this address is a global multicast address or not.
         *
         * <p>Valid IPv6 global multicast addresses have the prefix {@code ffxe::/16},
         * where {@code x} is a set of flags and the additional 112 bits make
         * up the global multicast address space.
         *
         * <p>Valid IPv4 global multicast addresses are the range of addresses
         * from {@code 224.0.1.0} to {@code 238.255.255.255}.
         */
        IsMCGlobal(
            [out] Boolean* isMCGlobal);

        /**
         * Returns whether this address is a link-local multicast address or not.
         *
         * <p>Valid IPv6 link-local multicast addresses have the prefix {@code ffx2::/16},
         * where x is a set of flags and the additional 112 bits make up the link-local multicast
         * address space.
         *
         * <p>Valid IPv4 link-local multicast addresses have the prefix {@code 224.0.0/24}.
         */
        IsMCLinkLocal(
            [out] Boolean* isMCLinkLocal);

        /**
         * Returns whether this address is a node-local multicast address or not.
         *
         * <p>Valid IPv6 node-local multicast addresses have the prefix {@code ffx1::/16},
         * where x is a set of flags and the additional 112 bits make up the link-local multicast
         * address space.
         *
         * <p>There are no valid IPv4 node-local multicast addresses.
         */
        IsMCNodeLocal(
            [out] Boolean* isMCNodeLocal);

        /**
         * Returns whether this address is a organization-local multicast address or not.
         *
         * <p>Valid IPv6 organization-local multicast addresses have the prefix {@code ffx8::/16},
         * where x is a set of flags and the additional 112 bits make up the link-local multicast
         * address space.
         *
         * <p>Valid IPv4 organization-local multicast addresses have the prefix {@code 239.192/14}.
         */
        IsMCOrgLocal(
            [out] Boolean* isMCOrgLocal);

        /**
         * Returns whether this address is a site-local multicast address or not.
         *
         * <p>Valid IPv6 site-local multicast addresses have the prefix {@code ffx5::/16},
         * where x is a set of flags and the additional 112 bits make up the link-local multicast
         * address space.
         *
         * <p>Valid IPv4 site-local multicast addresses have the prefix {@code 239.255/16}.
         */
        IsMCSiteLocal(
            [out] Boolean* isMCSiteLocal);

        /**
         * Returns whether this address is a multicast address or not.
         *
         * <p>Valid IPv6 multicast addresses have the prefix {@code ff::/8}.
         *
         * <p>Valid IPv4 multicast addresses have the prefix {@code 224/4}.
         */
        IsMulticastAddress(
            [out] Boolean* isMulticastAddress);

        /**
         * Returns whether this address is a site-local address or not.
         *
         * <p>For the purposes of this method, valid IPv6 site-local addresses have
         * the deprecated prefix {@code fec0::/10} from
         * <a href="http://www.ietf.org/rfc/rfc1884.txt">RFC 1884</a>,
         * <i>not</i> the modern prefix {@code fc00::/7} from
         * <a href="http://www.ietf.org/rfc/rfc4193.txt">RFC 4193</a>.
         *
         * <p><a href="http://www.ietf.org/rfc/rfc3484.txt">RFC 3484</a>
         * "Default Address Selection for Internet Protocol Version 6 (IPv6)" states
         * that IPv4 private addresses have the prefix {@code 10/8}, {@code 172.16/12},
         * or {@code 192.168/16}.
         *
         * @return {@code true} if this instance represents a site-local address,
         *         {@code false} otherwise.
         */
        IsSiteLocalAddress(
            [out] Boolean* isSiteLocalAddress);

        /**
         * Tries to reach this {@code InetAddress}. This method first tries to use
         * ICMP <i>(ICMP ECHO REQUEST)</i>, falling back to a TCP connection
         * on port 7 (Echo) of the remote host.
         *
         * @param timeout
         *            timeout in milliseconds before the test fails if no connection
         *            could be established.
         * @return {@code true} if this address is reachable, {@code false}
         *         otherwise.
         * @throws IOException
         *             if an error occurs during an I/O operation.
         * @throws IllegalArgumentException
         *             if timeout is less than zero.
         */
        IsReachable(
            [in] Int32 timeout,
            [out] Boolean* isReachable);

        /**
         * Tries to reach this {@code InetAddress}. This method first tries to use
         * ICMP <i>(ICMP ECHO REQUEST)</i>, falling back to a TCP connection
         * on port 7 (Echo) of the remote host.
         *
         * @param networkInterface
         *            the network interface on which to connection should be
         *            established.
         * @param ttl
         *            the maximum count of hops (time-to-live).
         * @param timeout
         *            timeout in milliseconds before the test fails if no connection
         *            could be established.
         * @return {@code true} if this address is reachable, {@code false}
         *         otherwise.
         * @throws IOException
         *             if an error occurs during an I/O operation.
         * @throws IllegalArgumentException
         *             if ttl or timeout is less than zero.
         */
        IsReachable(
            [in] INetworkInterface* networkInterface,
            [in] Int32 ttl,
            [in] Int32 timeout,
            [out] Boolean* isReachable);
    }

    [deprecated]
    interface IInetAddressHelper {
        /**
         * Used by the DatagramSocket.disconnect implementation.
         * @hide internal use only
         */
        GetUNSPECIFIED(
            [out] IInetAddress** addr);

        /**
         * Gets all IP addresses associated with the given {@code host} identified
         * by name or literal IP address. The IP address is resolved by the
         * configured name service. If the host name is empty or {@code null} an
         * {@code UnknownHostException} is thrown. If the host name is a literal IP
         * address string an array with the corresponding single {@code InetAddress}
         * is returned.
         *
         * @param host the hostname or literal IP string to be resolved.
         * @return the array of addresses associated with the specified host.
         * @throws UnknownHostException if the address lookup fails.
         */
        GetAllByName(
            [in] String host,
            [out, callee] ArrayOf<IInetAddress*>* interAddress);

        /**
         * Operates identically to {@code getAllByName} except host resolution is
         * performed on the network designated by {@code netId}.
         *
         * @param host the hostname or literal IP string to be resolved.
         * @param netId the network to use for host resolution.
         * @return the array of addresses associated with the specified host.
         * @throws UnknownHostException if the address lookup fails.
         * @hide internal use only
         */
        GetAllByNameOnNet(
            [in] String host,
            [in] Int32 netId,
            [out, callee] ArrayOf<IInetAddress*>* addresses);

        /**
         * Returns the address of a host according to the given host string name
         * {@code host}. The host string may be either a machine name or a dotted
         * string IP address. If the latter, the {@code hostName} field is
         * determined upon demand. {@code host} can be {@code null} which means that
         * an address of the loopback interface is returned.
         *
         * @param host
         *            the hostName to be resolved to an address or {@code null}.
         * @return the {@code InetAddress} instance representing the host.
         * @throws UnknownHostException
         *             if the address lookup fails.
         */
        GetByName(
            [in] String host,
            [out] IInetAddress** interAddr);

        /**
         * Operates identically to {@code getByName} except host resolution is
         * performed on the network designated by {@code netId}.
         *
         * @param host
         *            the hostName to be resolved to an address or {@code null}.
         * @param netId the network to use for host resolution.
         * @return the {@code InetAddress} instance representing the host.
         * @throws UnknownHostException if the address lookup fails.
         * @hide internal use only
         */
        GetByNameOnNet(
            [in] String host,
            [in] Int32 netId,
            [out] IInetAddress** address);

        /**
         * Returns an {@code InetAddress} for the local host if possible, or the
         * loopback address otherwise. This method works by getting the hostname,
         * performing a DNS lookup, and then taking the first returned address.
         * For devices with multiple network interfaces and/or multiple addresses
         * per interface, this does not necessarily return the {@code InetAddress}
         * you want.
         *
         * <p>Multiple interface/address configurations were relatively rare
         * when this API was designed, but multiple interfaces are the default for
         * modern mobile devices (with separate wifi and radio interfaces), and
         * the need to support both IPv4 and IPv6 has made multiple addresses
         * commonplace. New code should thus avoid this method except where it's
         * basically being used to get a loopback address or equivalent.
         *
         * <p>There are two main ways to get a more specific answer:
         * <ul>
         * <li>If you have a connected socket, you should probably use
         * {@link Socket#getLocalAddress} instead: that will give you the address
         * that's actually in use for that connection. (It's not possible to ask
         * the question "what local address would a connection to a given remote
         * address use?"; you have to actually make the connection and see.)</li>
         * <li>For other use cases, see {@link NetworkInterface}, which lets you
         * enumerate all available network interfaces and their addresses.</li>
         * </ul>
         *
         * <p>Note that if the host doesn't have a hostname set&nbsp;&ndash; as
         * Android devices typically don't&nbsp;&ndash; this method will
         * effectively return the loopback address, albeit by getting the name
         * {@code localhost} and then doing a lookup to translate that to
         * {@code 127.0.0.1}.
         *
         * @return an {@code InetAddress} representing the local host, or the
         * loopback address.
         * @throws UnknownHostException
         *             if the address lookup fails.
         */
        GetLocalHost(
            [out] IInetAddress** interAddr);

        /**
         * Removes all entries from the VM's DNS cache. This does not affect the C library's DNS
         * cache, nor any caching DNS servers between you and the canonical server.
         * @hide
         */
        ClearDnsCache();

        /**
         * Returns true if the string is a valid numeric IPv4 or IPv6 address (such as "192.168.0.1").
         * This copes with all forms of address that Java supports, detailed in the InetAddress
         *
         * @sa InetAddress
         * class documentation.
         *
         * @hide used by frameworks/base to ensure that a getAllByName won't cause a DNS lookup.
         */
        IsNumeric(
            [in] String address,
            [out] Boolean* isNumeric);

        /**
         * Returns an InetAddress corresponding to the given numeric address (such
         * as {"192.168.0.1"} or {"2001:4860:800d::68"}).
         * This method will never do a DNS lookup. Non-numeric addresses are errors.
         *
         * @hide used by frameworks/base's NetworkUtils.numericToInetAddress
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException | if {numericAddress} is not a numeric address
         */
        ParseNumericAddress(
            [in] String numericAddress,
            [out] IInetAddress** interAddr);

        /**
         * Returns the IPv6 loopback address {::1} or the IPv4 loopback address {127.0.0.1}.
         * @since 1.7
         * @hide 1.7
         */
        GetLoopbackAddress(
            [out] IInetAddress** interAddr);

        /**
         * Equivalent to {getByAddress(null, ipAddress)}. Handy for addresses with
         * no associated hostname.
         */
        GetByAddress(
            [in] ArrayOf<Byte>* ipAddress,
            [out] IInetAddress** interAddr);

        /**
         * Returns an {InetAddress} corresponding to the given network-order
         * bytes {ipAddress} and {scopeId}.
         *
         * <p>For an IPv4 address, the byte array must be of length 4.
         * For IPv6, the byte array must be of length 16. Any other length will cause an {UnknownHostException}.
         *
         * <p>No reverse lookup is performed. The given {hostName} (which may be null) is
         * associated with the new {InetAddress} with no validation done.
         *
         * <p>(Note that numeric addresses such as {"127.0.0.1"} are names for the
         * purposes of this API. Most callers probably want getAllByName instead.)
         *
         * @sa #getAllByName
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * UnknownHostException | if {ipAddress} is null or the wrong length.
         */
        GetByAddress(
            [in] String hostName,
            [in] ArrayOf<Byte>* ipAddress,
            [out] IInetAddress** interAddr);
    }

    /**
     * An IPv4 address. See {@link InetAddress}.
     */
    /**
     * @Involve
     * interface Elastos.IO.ISerializable;
     * interface IInetAddress;
     */
    interface IInet4Address {
    }

    interface IInet4AddressHelper {
        /**
         * @hide
         */
        GetANY(
            [out] IInetAddress** result);

        /**
         * @hide
         */
        GetALL(
            [out] IInetAddress** result);

        /**
         * @hide
         */
        GetLOOPBACK(
            [out] IInetAddress** result);

    }

    /**
     * @Involve
     * interface Elastos.IO.ISerializable;
     * interface IInetAddress;
     */
    interface IInet6Address {
        /**
         * Returns the scope id if this address is scoped to an interface, 0 otherwise.
         */
        GetScopeId(
            [out] Int32* scopeId);

        /**
         * Returns the network interface if this address is instanced with a scoped
         * network interface, null otherwise.
         */
        GetScopedInterface(
            [out] INetworkInterface** scopedInterface);

        /**
         * Returns whether this IPv6 address is an IPv4-compatible address or not.
         * An IPv4-compatible address has the prefix {::/96} and is a deprecated
         * and no-longer used equivalent of the modern IPv4-mapped IPv6 addresses.
         */
        IsIPv4CompatibleAddress(
            [out] Boolean* IPv4Compatible);
    }

    [deprecated]
    interface IInet6AddressHelper {
        /**
         * Constructs an IPv6 address according to the given {host},
         * {addr} and {scope_id}.
         *
         * @param host
         *            the host name associated with the address.
         * @param addr
         *            the network address.
         * @param scope_id
         *            the scope id for link- or site-local addresses.
         * @return the Inet6Address instance representing the IP address.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * UnknownHostException | if the address is null or has an invalid length.
         */
        GetByAddress(
            [in] String host,
            [in] ArrayOf<Byte>* addr,
            [in] Int32 scope_id,
            [out] IInet6Address** address);

        /**
         * Gets an IPv6 address instance according to the given {host},
         * {addr} and {nif}. {scope_id} is set according to the
         * given {nif} and the {addr} type (for example site-local or
         * link-local).
         *
         * @param host
         *            the hostname associated with the address.
         * @param addr
         *            the network address.
         * @param nif
         *            the network interface that this address is associated with.
         * @return the Inet6Address instance representing the IP address.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * UnknownHostException | if the address is {null} or has an invalid length or the interface doesn't have a numeric scope id for the given address type.
         */
        GetByAddress(
            [in] String host,
            [in] ArrayOf<Byte>* addr,
            [in] INetworkInterface* nif,
            [out] IInet6Address** address);

        /**
         * @hide
         */
        GetANY(
            [out] IInetAddress** result);

        /**
         * @hide
         */
        GetLOOPBACK(
            [out] IInetAddress** result);
    }

    } // namespace Net
    } // namespace Elastos
}
