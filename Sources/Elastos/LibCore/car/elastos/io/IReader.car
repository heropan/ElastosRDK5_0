
module
{
    interface Elastos.IO.ICharBuffer;

    namespace Elastos {
    namespace IO {
    /**
     *
     *The base class for all readers. A reader is a means of reading data from a source in a character-*wise manner. Some readers also support marking a position in the input and returning to this *position later.
     *<p>
     *This abstract class does not provide a fully working implementation, so it needs to be subclassed,
     *and at least the read(char[], int, int) and close() methods needs to be overridden. Overriding some
     *of the non-abstract methods is also often advised, since it might result in higher efficiency.
     *<p>
     *Many specialized readers for purposes like reading from a file already exist in this package.
     *
     *@implements Elastos.IO.IReadable
     *@sa IWriter
     */
     /**
     * @Involve
     * interface IReadable;
     * interface ICloseable;
     */
    [deprecated]
    interface IReader {
        /**
         * Sets a mark position in this reader. The parameter readLimit
         * indicates how many characters can be read before the mark is invalidated.
         * Calling reset() will reposition the reader back to the marked
         * position if readLimit has not been surpassed.
         * <p>
         * This default implementation simply throws an IOException;
         * subclasses must provide their own implementation.
         *
         * @param readLimit
         *            the number of characters that can be read before the mark is
         *            invalidated.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException | if {readLimit < 0}.
         * IOException | if an error occurs while setting a mark in this reader.
         * @see #markSupported()
         * @see #reset()
         */
        Mark(
            [in] Int32 readLimit);

        /**
         * Indicates whether this reader supports the mark() and
         * reset() methods. This default implementation returns
         * false.
         *
         * @return always false.
         */
        IsMarkSupported(
            [out] Boolean* supported);

        /**
         * Reads a single character from this reader and returns it as an integer
         * with the two higher-order bytes set to 0. Returns -1 if the end of the
         * reader has been reached.
         *
         * @return the character read or -1 if the end of the reader has been
         *         reached.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if this reader is closed or some other I/O error occurs.
         */
        Read(
            [out] Int32* value);

        /**
         * Reads characters from this reader and stores them in the character array
         * {@code buffer} starting at offset 0. Returns the number of characters
         * actually read or -1 if the end of the reader has been reached.
         *
         * @throws IOException
         *             if this reader is closed or some other I/O error occurs.
         */
        Read(
            [in] ArrayOf<Char32>* buffer,
            [out] Int32* number);

        /**
         * Reads up to {@code count} characters from this reader and stores them
         * at {@code offset} in the character array {@code buffer}. Returns the number
         * of characters actually read or -1 if the end of the reader has been
         * reached.
         *
         * @throws IOException
         *             if this reader is closed or some other I/O error occurs.
         */
        Read(
            [in] ArrayOf<Char32>* buffer,
            [in] Int32 offset,
            [in] Int32 count,
            [out] Int32* number);

        /**
         * Indicates whether this reader is ready to be read without blocking.
         * Returns true if this reader will not block when read is
         * called, false if unknown or blocking will occur. This default
         * implementation always returns false.
         *
         * @return always false.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if this reader is closed or some other I/O error occurs.
         * @see #read()
         * @see #read(char[])
         * @see #read(char[], int, int)
         */
        IsReady(
            [out] Boolean* ready);

        /**
         * Resets this reader's position to the last mark() location.
         * Invocations of read() and skip() will occur from this new
         * location. If this reader has not been marked, the behavior of
         * reset() is implementation specific. This default
         * implementation throws an IOException.
         *
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | always thrown in this default implementation.
         * @see #mark(int)
         * @see #markSupported()
         */
        Reset();

        /**
         * Skips charCount characters in this reader. Subsequent calls of
         * read methods will not return these characters unless reset is used.
         * This method may perform multiple reads to read charCount characters.
         *
         * @return the number of characters actually skipped.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException | if {charCount < 0}.
         * IOException | if this reader is closed or some other I/O error occurs.
         * @see #mark(int)
         * @see #markSupported()
         * @see #reset()
         */
        Skip(
            [in] Int64 charCount,
            [out] Int64* number);

        /**
         * Reads characters and puts them into the {target} character buffer.
         *
         * @param target
         *            the destination character buffer.
         * @return the number of characters put into {target} or -1 if the end
         *         of this reader has been reached before a character has been read.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if any I/O error occurs while reading from this reader.
         * NullPointerException | if {target} is {null}.
         * ReadOnlyBufferException | if {target} is read-only.
         */
        Read(
            [in] ICharBuffer* target,
            [out] Int32* number);

    }

    } // namespace IO
    } // namespace Elastos
}