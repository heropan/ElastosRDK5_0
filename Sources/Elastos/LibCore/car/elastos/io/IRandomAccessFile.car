
module
{
    interface Elastos.IO.Channels.IFileChannel;
    interface Elastos.IO.IFileDescriptor;

    namespace Elastos {
    namespace IO {
    /**
     * Allows reading from and writing to a file in a random-access manner. This is different from the
     * uni-directional sequential access that a FileInputStream or FileOutputStream provides. If the file
     * is opened in read/write mode, write operations are available as well. The position of the next read
     * or write operation can be moved forwards and backwards after every operation.
     *
     * @implements Elastos.IO.ICloseable
     */
    /**
     * @Involve
     * interface ICloseable;
     * interface IDataInput;
     * interface IDataOutput;
     */
    [deprecated]
    interface IRandomAccessFile {
        /**
         * Gets this file's FileChannel object.
         * <p>
         * The file channel's FileChannel#position() position is the same
         * as this file's file pointer offset (see #getFilePointer()). Any
         * changes made to this file's file pointer offset are also visible in the
         * file channel's position and vice versa.
         *
         * @sa FileChannel
         * @sa FileChannel#position() position
         * @sa #getFilePointer()
         *
         * @return this file's file channel instance.
         */
        GetChannel(
            [out] IFileChannel** channel);

        /**
         * Gets this file's FileDescriptor. This represents the operating
         * system resource for this random access file.
         *
         * @sa FileDescriptor
         * @return this file's file descriptor object.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if an error occurs while getting the file descriptor of this file.
         */
        GetFD(
            [out] IFileDescriptor** fd);

        /**
         * Gets the current position within this file. All reads and
         * writes take place at the current file pointer position.
         *
         * @return the current offset in bytes from the beginning of the file.
         *
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if an error occurs while getting the file pointer of this file.
         */
        GetFilePointer(
            [out] Int64* offset);

        /**
         * Returns the length of this file in bytes.
         *
         * @return the file's length in bytes.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if this file is closed or some other I/O error occurs.
         */
        GetLength(
            [out] Int64* length);

        /**
         * Reads a single byte from the current position in this file and returns it
         * as an integer in the range from 0 to 255. Returns -1 if the end of the
         * file has been reached. Blocks until one byte has been read, the end of
         * the file is detected, or an exception is thrown.
         *
         * @return the byte read or -1 if the end of the file has been reached.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if this file is closed or another I/O error occurs.
         */
        Read(
            [out] Int32* value);

        /**
         * Reads bytes from the current position in this file and stores them in the
         * byte array {@code buffer}. The maximum number of bytes read corresponds
         * to the size of {@code buffer}. Blocks until at least one byte has been
         * read, the end of the file is detected, or an exception is thrown.
         * Returns the number of bytes actually read or -1 if the end of the file
         * has been reached. See also {@link #readFully}.
         *
         * @throws IOException
         *             if this file is closed or another I/O error occurs.
         */
        Read(
            [in] ArrayOf<Byte>* buffer,
            [out] Int32* number);

        /**
         * Reads up to {@code byteCount} bytes from the current position in this file
         * and stores them in the byte array {@code buffer} starting at {@code
         * byteOffset}. Blocks until at least one byte has been
         * read, the end of the file is detected, or an exception is thrown.
         * Returns the number of bytes actually read or -1 if the end of the stream has been reached.
         * See also {@link #readFully}.
         *
         * @throws IndexOutOfBoundsException
         *     if {@code byteOffset < 0 || byteCount < 0 || byteOffset + byteCount > buffer.length}.
         * @throws IOException
         *             if this file is closed or another I/O error occurs.
         */
        Read(
            [in] ArrayOf<Byte>* buffer,
            [in] Int32 offset,
            [in] Int32 length,
            [out] Int32* number);

        /**
         * Moves this file's file pointer to a new position, from where following
         * read, write or skip operations are done. The
         * position may be greater than the current length of the file, but the
         * file's length will only change if the moving of the pointer is followed
         * by a write operation.
         *
         * @param offset
         *            the new file pointer position.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if this file is closed, {pos < 0} or another I/O error occurs.
         */
        Seek(
            [in] Int64 offset);

        /**
         * Sets the length of this file to newLength. If the current file is
         * smaller, it is expanded but the contents from the previous end of the
         * file to the new end are undefined. The file is truncated if its current
         * size is bigger than newLength. If the current file pointer
         * position is in the truncated part, it is set to the end of the file.
         *
         * @param newLength
         *            the new file length in bytes.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException | if {newLength < 0}.
         * IOException | if this file is closed or another I/O error occurs.
         */
        SetLength(
            [in] Int64 length);

        /**
         * Writes a byte to this file, starting at the current file pointer. Only
         * the least significant byte of the integer oneByte is written.
         *
         * @param oneByte
         *            the byte to write to this file.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if this file is closed or another I/O error occurs.
         * @see #read()
         */
        Write(
            [in] Int32 oneByte);

        /**
         * Writes the entire contents of the byte array buffer to this file,
         * starting at the current file pointer.
         *
         * @param buffer
         *            the buffer to write.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if an I/O error occurs while writing to this file.
         */
        Write(
            [in] ArrayOf<Byte>* buffer);

        /**
         * Writes byteCount bytes from the byte array buffer to this
         * file, starting at the current file pointer and using byteOffset as
         * the first position within buffer to get bytes.
         *
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IndexOutOfBoundsException | if {byteCount < 0}, {byteOffset < 0} or {byteCount + byteOffset} is greater than the size of {buffer}.
         * IOException | if an I/O error occurs while writing to this file.
         */
        Write(
            [in] ArrayOf<Byte>* buffer,
            [in] Int32 offset,
            [in] Int32 count);
    }

    } // namespace IO
    } // namespace Elastos
}