
module
{
    interface Elastos.Core.IArrayOf;

    namespace Elastos {
    namespace IO {

    /**
     * A buffer is a list of elements of a specific primitive type.
     * <p>
     * A buffer can be described by the following properties:
     * <ul>
     * <li>Capacity: the number of elements a buffer can hold. Capacity may not be
     * negative and never changes.</li>
     * <li>Position: a cursor of this buffer. Elements are read or written at the
     * position if you do not specify an index explicitly. Position may not be
     * negative and not greater than the limit.</li>
     * <li>Limit: controls the scope of accessible elements. You can only read or
     * write elements from index zero to <code>limit - 1</code>. Accessing
     * elements out of the scope will cause an exception. Limit may not be negative
     * and not greater than capacity.</li>
     * <li>Mark: used to remember the current position, so that you can reset the
     * position later. Mark may not be negative and no greater than position.</li>
     * <li>A buffer can be read-only or read-write. Trying to modify the elements
     * of a read-only buffer will cause a <code>ReadOnlyBufferException</code>,
     * while changing the position, limit and mark of a read-only buffer is OK.</li>
     * <li>A buffer can be direct or indirect. A direct buffer will try its best to
     * take advantage of native memory APIs and it may not stay in the Java heap,
     * thus it is not affected by garbage collection.</li>
     * </ul>
     * <p>
     * Buffers are not thread-safe. If concurrent access to a buffer instance is
     * required, then the callers are responsible to take care of the
     * synchronization issues.
     */
    interface IBuffer {

        /**
         * Means the mark has not been set.
         */
        const Int32 UNSET_MARK = -1;

        /**
         * Returns the array that backs this buffer (optional operation).
         * The returned value is the actual array, not a copy, so modifications
         * to the array write through to the buffer.
         *
         * <p>Subclasses should override this method with a covariant return type
         * to provide the exact type of the array.
         *
         * <p>Use {@code hasArray} to ensure this method won't throw.
         * (A separate call to {@code isReadOnly} is not necessary.)
         *
         * @return the array
         * @throws ReadOnlyBufferException if the buffer is read-only
         *         UnsupportedOperationException if the buffer does not expose an array
         * @since 1.6
         */

        //Please remaining GetPrimitiveArray, don't delete !!! zhangjingcheng
        GetPrimitiveArray(
             [out] Handle64* offset);

        GetArray(
            [out] IArrayOf** array);

        /**
         * Returns the offset into the array returned by {@code array} of the first
         * element of the buffer (optional operation). The backing array (if there is one)
         * is not necessarily the same size as the buffer, and position 0 in the buffer is
         * not necessarily the 0th element in the array. Use
         * {@code buffer.array()[offset + buffer.arrayOffset()} to access element {@code offset}
         * in {@code buffer}.
         *
         * <p>Use {@code hasArray} to ensure this method won't throw.
         * (A separate call to {@code isReadOnly} is not necessary.)
         *
         * @return the offset
         * @throws ReadOnlyBufferException if the buffer is read-only
         *         UnsupportedOperationException if the buffer does not expose an array
         * @since 1.6
         */
        GetArrayOffset(
            [out] Int32* offset);

        /**
         * Returns the capacity of this buffer.
         *
         * @return the number of elements that are contained in this buffer.
         */
        GetCapacity(
            [out] Int32* cap);

        /**
         * Clears this buffer.
         * <p>
         * While the content of this buffer is not changed, the following internal
         * changes take place: the current position is reset back to the start of
         * the buffer, the value of the buffer limit is made equal to the capacity
         * and mark is cleared.
         *
         * @return this buffer.
         */
        Clear();

        /**
         * Flips this buffer.
         * <p>
         * The limit is set to the current position, then the position is set to
         * zero, and the mark is cleared.
         * <p>
         * The content of this buffer is not changed.
         *
         * @return this buffer.
         */
        Flip();

        /**
         * Returns true if {array} and {arrayOffset} won't throw. This method does not
         * return true for buffers not backed by arrays because the other methods would throw
         * {UnsupportedOperationException}, nor does it return true for buffers backed by
         * read-only arrays, because the other methods would throw {ReadOnlyBufferException}.
         * @since 1.6
         */
        HasArray(
            [out] Boolean* hasArray);

        /**
         * Indicates if there are elements remaining in this buffer, that is if
         * {position < limit}.
         *
         * @return {true} if there are elements remaining in this buffer,
         *         {false} otherwise.
         */
        HasRemaining(
            [out] Boolean* hasRemaining);

        /**
         * Returns true if this is a direct buffer.
         * @since 1.6
         */
        IsDirect(
            [out] Boolean* isDirect);

        /**
         * Indicates whether this buffer is read-only.
         *
         * @return {true} if this buffer is read-only, {false}
         *         otherwise.
         */
        IsReadOnly(
            [out] Boolean* isReadOnly);

        /**
         * Returns the limit of this buffer.
         *
         * @return the limit of this buffer.
         */
        GetLimit(
            [out] Int32* limit);

        /**
         * Sets the limit of this buffer.
         * <p>
         * If the current position in the buffer is in excess of
         * <code>newLimit</code> then, on returning from this call, it will have
         * been adjusted to be equivalent to <code>newLimit</code>. If the mark
         * is set and is greater than the new limit, then it is cleared.
         *
         * @param newLimit
         *            the new limit, must not be negative and not greater than
         *            capacity.
         * @return this buffer.
         * @exception IllegalArgumentException
         *                if <code>newLimit</code> is invalid.
         */
        SetLimit(
            [in] Int32 newLimit);

        /**
         * Marks the current position, so that the position may return to this point
         * later by calling <code>reset()</code>.
         *
         * @return this buffer.
         */
        Mark();

        /**
         * Returns the position of this buffer.
         *
         * @return the value of this buffer's current position.
         */
        GetPosition(
            [out] Int32* pos);

        /**
         * Sets the position of this buffer.
         * <p>
         * If the mark is set and it is greater than the new position, then it is
         * cleared.
         *
         * @param newPosition
         *            the new position, must be not negative and not greater than
         *            limit.
         * @return this buffer.
         * @exception IllegalArgumentException
         *                if <code>newPosition</code> is invalid.
         */
        SetPosition(
            [in] Int32 newPosition);

        /**
         * Returns the number of remaining elements in this buffer, that is
         * {limit - position}.
         *
         * @return the number of remaining elements in this buffer.
         */
        GetRemaining(
            [out] Int32* remaining);

        /**
         * Resets the position of this buffer to the <code>mark</code>.
         *
         * @return this buffer.
         * @exception InvalidMarkException
         *                if the mark is not set.
         */
        Reset();

        /**
         * Rewinds this buffer.
         * <p>
         * The position is set to zero, and the mark is cleared. The content of this
         * buffer is not changed.
         *
         * @return this buffer.
         */
        Rewind();

        /**
         * The log base 2 of the element size of this buffer.  Each typed subclass
         * (ByteBuffer, CharBuffer, etc.) is responsible for initializing this
         * value.  The value is used by JNI code in frameworks/base/ to avoid the
         * need for costly 'instanceof' tests.
         */
        GetElementSizeShift(
            [out] Int32* elementSizeShift);

        /**
         * For direct buffers, the effective address of the data; zero otherwise.
         * This is set in the constructor.
         * TODO: make this final at the cost of loads of extra constructors? [how many?]
         */
        GetEffectiveDirectAddress(
            [out] Handle64* effectiveDirectAddress);
    }

    } // namespace IO
    } // namespace Elastos
}

