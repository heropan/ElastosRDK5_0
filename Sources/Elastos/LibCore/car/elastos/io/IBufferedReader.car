
module
{
    namespace Elastos {
    namespace IO {
    /**
    * Wraps an existing Reader and buffers the input. Expensive interaction with the
    * underlying reader is minimized, since most (smaller) requests can be satisfied by
    * accessing the buffer alone. The drawback is that some extra space is required to
    * hold the buffer and that copying takes place when filling that buffer, but this
    * is usually outweighed by the performance benefits.
    * <p>
    * A typical application pattern for the class looks like this:
    * <p>
    * BufferedReader buf = new BufferedReader(new FileReader("file.java"));
    * @sa BufferedWriter
    *@implement Elastos.IO.IReader
    */

    /**
     * @Involve
     * interface IReadable;
     * interface IReader;
     * interface ICloseable;
     */
    interface IBufferedReader {
        /**
         * Returns the next line of text available from this reader. A line is
         * represented by zero or more characters followed by {'\n'},
         * {'\r'}, {"\r\n"} or the end of the reader. The string does
         * not include the newline sequence.
         *
         * @return the contents of the line or {null} if no characters were
         *         read before the end of the reader has been reached.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if this reader is closed or some other I/O error occurs.
         */
        ReadLine(
            [out] String* contents);
    }

    } // namespace IO
    } // namespace Elastos
}