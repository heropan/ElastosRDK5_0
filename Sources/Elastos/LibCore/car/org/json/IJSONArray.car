module
{
    interface Org.Json.IJSONObject;
    interface Org.Json.IJSONStringer;

    namespace Org {
    namespace Json {

    /**
     * A dense indexed sequence of values. Values may be any mix of
     * {@link JSONObject JSONObjects}, other {@link JSONArray JSONArrays}, Strings,
     * Booleans, Integers, Longs, Doubles, {@code null} or {@link JSONObject#NULL}.
     * Values may not be {@link Double#isNaN() NaNs}, {@link Double#isInfinite()
     * infinities}, or of any type not listed here.
     *
     * <p>{@code JSONArray} has the same type coercion behavior and
     * optional/mandatory accessors as {@link JSONObject}. See that class'
     * documentation for details.
     *
     * <p><strong>Warning:</strong> this class represents null in two incompatible
     * ways: the standard Java {@code null} reference, and the sentinel value {@link
     * JSONObject#NULL}. In particular, {@code get} fails if the requested index
     * holds the null reference, but succeeds if it holds {@code JSONObject.NULL}.
     *
     * <p>Instances of this class are not thread safe. Although this class is
     * nonfinal, it was not designed for inheritance and should not be subclassed.
     * In particular, self-use by overridable methods is not specified. See
     * <i>Effective Java</i> Item 17, "Design and Document or inheritance or else
     * prohibit it" for further information.
     */
    interface IJSONArray {
        /**
         * Returns the number of values in this array.
         */
        GetLength(
            [out] Int32* len);

        /**
         * Appends {@code value} to the end of this array.
         *
         * @return this array.
         */
        Put(
            [in] Boolean value);

        /**
         * Appends {@code value} to the end of this array.
         *
         * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
         *     {@link Double#isInfinite() infinities}.
         * @return this array.
         */
        Put(
            [in] Double value);

        /**
         * Appends {@code value} to the end of this array.
         *
         * @return this array.
         */
        Put(
            [in] Int32 value);

        /**
         * Appends {@code value} to the end of this array.
         *
         * @return this array.
         */
        Put(
            [in] Int64 value);

        /**
         * Appends {@code value} to the end of this array.
         *
         * @param value a {@link JSONObject}, {@link JSONArray}, String, Boolean,
         *     Integer, Long, Double, {@link JSONObject#NULL}, or {@code null}. May
         *     not be {@link Double#isNaN() NaNs} or {@link Double#isInfinite()
         *     infinities}. Unsupported values are not permitted and will cause the
         *     array to be in an inconsistent state.
         * @return this array.
         */
        Put(
            [in] IInterface* value);

        /**
         * Sets the value at {@code index} to {@code value}, null padding this array
         * to the required length if necessary. If a value already exists at {@code
         * index}, it will be replaced.
         *
         * @return this array.
         */
        Put(
            [in] Int32 index,
            [in] Boolean value);

        /**
         * Sets the value at {@code index} to {@code value}, null padding this array
         * to the required length if necessary. If a value already exists at {@code
         * index}, it will be replaced.
         *
         * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
         *     {@link Double#isInfinite() infinities}.
         * @return this array.
         */
        Put(
            [in] Int32 index,
            [in] Double value);

        /**
         * Sets the value at {@code index} to {@code value}, null padding this array
         * to the required length if necessary. If a value already exists at {@code
         * index}, it will be replaced.
         *
         * @return this array.
         */
        Put(
            [in] Int32 index,
            [in] Int32 value);

        /**
         * Sets the value at {@code index} to {@code value}, null padding this array
         * to the required length if necessary. If a value already exists at {@code
         * index}, it will be replaced.
         *
         * @return this array.
         */
        Put(
            [in] Int32 index,
            [in] Int64 value);

        /**
         * Sets the value at {@code index} to {@code value}, null padding this array
         * to the required length if necessary. If a value already exists at {@code
         * index}, it will be replaced.
         *
         * @param value a {@link JSONObject}, {@link JSONArray}, String, Boolean,
         *     Integer, Long, Double, {@link JSONObject#NULL}, or {@code null}. May
         *     not be {@link Double#isNaN() NaNs} or {@link Double#isInfinite()
         *     infinities}.
         * @return this array.
         */
        Put(
            [in] Int32 index,
            [in] IInterface* value);

        /**
         * Returns true if this array has no value at {@code index}, or if its value
         * is the {@code null} reference or {@link JSONObject#NULL}.
         */
        IsNull(
            [in] Int32 index,
            [out] Boolean* res);

        /**
         * Returns the value at {@code index}.
         *
         * @throws JSONException if this array has no value at {@code index}, or if
         *     that value is the {@code null} reference. This method returns
         *     normally if the value is {@code JSONObject#NULL}.
         */
        Get(
            [in] Int32 index,
            [out] IInterface** obj);

        /**
         * Returns the value at {@code index}, or null if the array has no value
         * at {@code index}.
         */
        Opt(
            [in] Int32 index,
            [out] IInterface** obj);

        /**
         * Removes and returns the value at {@code index}, or null if the array has no value
         * at {@code index}.
         */
        Remove(
            [in] Int32 index,
            [out] IInterface** obj);

        /**
         * Returns the value at {@code index} if it exists and is a boolean or can
         * be coerced to a boolean.
         *
         * @throws JSONException if the value at {@code index} doesn't exist or
         *     cannot be coerced to a boolean.
         */
        GetBoolean(
            [in] Int32 index,
            [out] Boolean* res);

        /**
         * Returns the value at {@code index} if it exists and is a boolean or can
         * be coerced to a boolean. Returns false otherwise.
         */
        OptBoolean(
            [in] Int32 index,
            [out] Boolean* res);

        /**
         * Returns the value at {@code index} if it exists and is a boolean or can
         * be coerced to a boolean. Returns {@code fallback} otherwise.
         */
        OptBoolean(
            [in] Int32 index,
            [in] Boolean fallback,
            [out] Boolean* res);

        /**
         * Returns the value at {@code index} if it exists and is a double or can
         * be coerced to a double.
         *
         * @throws JSONException if the value at {@code index} doesn't exist or
         *     cannot be coerced to a double.
         */
        GetDouble(
            [in] Int32 index,
            [out] Double* data);

        /**
         * Returns the value at {@code index} if it exists and is a double or can
         * be coerced to a double. Returns {@code NaN} otherwise.
         */
        OptDouble(
            [in] Int32 index,
            [out] Double* data);

        /**
         * Returns the value at {@code index} if it exists and is a double or can
         * be coerced to a double. Returns {@code fallback} otherwise.
         */
        OptDouble(
            [in] Int32 index,
            [in] Double fallback,
            [out] Double* data);

        /**
         * Returns the value at {@code index} if it exists and is an int or
         * can be coerced to an int.
         *
         * @throws JSONException if the value at {@code index} doesn't exist or
         *     cannot be coerced to a int.
         */
        GetInt32(
            [in] Int32 index,
            [out] Int32* data);

        /**
         * Returns the value at {@code index} if it exists and is an int or
         * can be coerced to an int. Returns 0 otherwise.
         */
        OptInt32(
            [in] Int32 index,
            [out] Int32* data);

        /**
         * Returns the value at {@code index} if it exists and is an int or
         * can be coerced to an int. Returns {@code fallback} otherwise.
         */
        OptInt32(
            [in] Int32 index,
            [in] Int32 fallback,
            [out] Int32* data);

        /**
         * Returns the value at {@code index} if it exists and is a long or
         * can be coerced to a long.
         *
         * @throws JSONException if the value at {@code index} doesn't exist or
         *     cannot be coerced to a long.
         */
        GetInt64(
            [in] Int32 index,
            [out] Int64* data);

        /**
         * Returns the value at {@code index} if it exists and is a long or
         * can be coerced to a long. Returns 0 otherwise.
         */
        OptInt64(
            [in] Int32 index,
            [out] Int64* data);

        /**
         * Returns the value at {@code index} if it exists and is a long or
         * can be coerced to a long. Returns {@code fallback} otherwise.
         */
        OptInt64(
            [in] Int32 index,
            [in] Int64 fallback,
            [out] Int64* data);

        /**
         * Returns the value at {@code index} if it exists, coercing it if
         * necessary.
         *
         * @throws JSONException if no such value exists.
         */
        GetString(
            [in] Int32 index,
            [out] String* str);

        /**
         * Returns the value at {@code index} if it exists, coercing it if
         * necessary. Returns the empty string if no such value exists.
         */
        OptString(
            [in] Int32 index,
            [out] String* str);

        /**
         * Returns the value at {@code index} if it exists, coercing it if
         * necessary. Returns {@code fallback} if no such value exists.
         */
        OptString(
            [in] Int32 index,
            [in] String fallback,
            [out] String* str);

        /**
         * Returns the value at {@code index} if it exists and is a {@code
         * JSONArray}.
         *
         * @throws JSONException if the value doesn't exist or is not a {@code
         *     JSONArray}.
         */
        GetJSONArray(
            [in] Int32 index,
            [out] IJSONArray** jsonArray);

        /**
         * Returns the value at {@code index} if it exists and is a {@code
         * JSONArray}. Returns null otherwise.
         */
        OptJSONArray(
            [in] Int32 index,
            [out] IJSONArray** jsonArray);

        /**
         * Returns the value at {@code index} if it exists and is a {@code
         * JSONObject}.
         *
         * @throws JSONException if the value doesn't exist or is not a {@code
         *     JSONObject}.
         */
        GetJSONObject(
            [in] Int32 index,
            [out] IJSONObject** jsonObject);

        /**
         * Returns the value at {@code index} if it exists and is a {@code
         * JSONObject}. Returns null otherwise.
         */
        OptJSONObject(
            [in] Int32 index,
            [out] IJSONObject** jsonObject);

        /**
         * Returns a new object whose values are the values in this array, and whose
         * names are the values in {@code names}. Names and values are paired up by
         * index from 0 through to the shorter array's length. Names that are not
         * strings will be coerced to strings. This method returns null if either
         * array is empty.
         */
        ToJSONObject(
            [in] IJSONArray* names,
            [out] IJSONObject** jsonObject);

        /**
         * Returns a new string by alternating this array's values with {@code
         * separator}. This array's string values are quoted and have their special
         * characters escaped. For example, the array containing the strings '12"
         * pizza', 'taco' and 'soda' joined on '+' returns this:
         * <pre>"12\" pizza"+"taco"+"soda"</pre>
         */
        Join(
            [in] String separator,
            [out] String* res);

        /**
         * Encodes this array as a human readable JSON string for debugging, such
         * as:
         * <pre>
         * [
         *     94043,
         *     90210
         * ]</pre>
         *
         * @param indentSpaces the number of spaces to indent for each level of
         *     nesting.
         */
        ToString(
            [in] Int32 indentSpaces,
            [out] String* str);
    }

    } // namespace Json
    } // namespace Org
}
