module
{
    namespace Org {
    namespace Json {

    /**
     * Lexical scoping elements within this stringer, necessary to insert the
     * appropriate separator characters (ie. commas and colons) and to detect
     * nesting errors.
     */
    enum JSONStringerScope {

        /**
         * An array with no elements requires no separators or newlines before
         * it is closed.
         */
        JSONStringerScope_EMPTY_ARRAY,

        /**
         * A array with at least one value requires a comma and newline before
         * the next element.
         */
        JSONStringerScope_NONEMPTY_ARRAY,

        /**
         * An object with no keys or values requires no separators or newlines
         * before it is closed.
         */
        JSONStringerScope_EMPTY_OBJECT,

        /**
         * An object whose most recent element is a key. The next element must
         * be a value.
         */
        JSONStringerScope_DANGLING_KEY,

        /**
         * An object with at least one name/value pair requires a comma and
         * newline before the next element.
         */
        JSONStringerScope_NONEMPTY_OBJECT,

        /**
         * A special bracketless array needed by JSONStringer.join() and
         * JSONObject.quote() only. Not used for JSON encoding.
         */
        JSONStringerScope_NULL,
    }

    /**
     * Implements {@link JSONObject#toString} and {@link JSONArray#toString}. Most
     * application developers should use those methods directly and disregard this
     * API. For example:<pre>
     * JSONObject object = ...
     * String json = object.toString();</pre>
     *
     * <p>Stringers only encode well-formed JSON strings. In particular:
     * <ul>
     *   <li>The stringer must have exactly one top-level array or object.
     *   <li>Lexical scopes must be balanced: every call to {@link #array} must
     *       have a matching call to {@link #endArray} and every call to {@link
     *       #object} must have a matching call to {@link #endObject}.
     *   <li>Arrays may not contain keys (property names).
     *   <li>Objects must alternate keys (property names) and values.
     *   <li>Values are inserted with either literal {@link #value(Object) value}
     *       calls, or by nesting arrays or objects.
     * </ul>
     * Calls that would result in a malformed JSON string will fail with a
     * {@link JSONException}.
     *
     * <p>This class provides no facility for pretty-printing (ie. indenting)
     * output. To encode indented output, use {@link JSONObject#toString(int)} or
     * {@link JSONArray#toString(int)}.
     *
     * <p>Some implementations of the API support at most 20 levels of nesting.
     * Attempts to create more than 20 levels of nesting may fail with a {@link
     * JSONException}.
     *
     * <p>Each stringer may be used to encode a single top level value. Instances of
     * this class are not thread safe. Although this class is nonfinal, it was not
     * designed for inheritance and should not be subclassed. In particular,
     * self-use by overrideable methods is not specified. See <i>Effective Java</i>
     * Item 17, "Design and Document or inheritance or else prohibit it" for further
     * information.
     */

    interface IJSONStringer {
        /**
         * Begins encoding a new array. Each call to this method must be paired with
         * a call to {@link #endArray}.
         *
         * @return this stringer.
         */
        Array();

        /**
         * Ends encoding the current array.
         *
         * @return this stringer.
         */
        EndArray();

        /**
         * Begins encoding a new object. Each call to this method must be paired
         * with a call to {@link #endObject}.
         *
         * @return this stringer.
         */
        Object();

        /**
         * Ends encoding the current object.
         *
         * @return this stringer.
         */
        EndObject();

        /**
         * Enters a new scope by appending any necessary whitespace and the given
         * bracket.
         */
        Open(
            [in] JSONStringerScope empty,
            [in] String openBracket);

        /**
         * Closes the current scope by appending any necessary whitespace and the
         * given bracket.
         */
        Close(
            [in] JSONStringerScope empty,
            [in] JSONStringerScope nonempty,
            [in] String closeBracket);

        /**
         * Encodes {@code value}.
         *
         * @param value a {@link JSONObject}, {@link JSONArray}, String, Boolean,
         *     Integer, Long, Double or null. May not be {@link Double#isNaN() NaNs}
         *     or {@link Double#isInfinite() infinities}.
         * @return this stringer.
         */
        Value(
            [in] IInterface* value);

        /**
         * Encodes {@code value} to this stringer.
         *
         * @return this stringer.
         */
        Value(
            [in] Boolean value);

        /**
         * Encodes {@code value} to this stringer.
         *
         * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
         *     {@link Double#isInfinite() infinities}.
         * @return this stringer.
         */
        Value(
            [in] Double value);

        /**
         * Encodes {@code value} to this stringer.
         *
         * @return this stringer.
         */
        Value(
            [in] Int64 value);

        /**
         * Encodes the key (property name) to this stringer.
         *
         * @param name the name of the forthcoming value. May not be null.
         * @return this stringer.
         */
        Key(
            [in] String name);
    }

    } // namespace Json
    } // namespace Org
}
