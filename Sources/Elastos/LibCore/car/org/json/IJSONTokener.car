module
{
    namespace Org {
    namespace Json {

    /**
     * Parses a JSON (<a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>)
     * encoded string into the corresponding object. Most clients of
     * this class will use only need the {@link #JSONTokener(String) constructor}
     * and {@link #nextValue} method. Example usage: <pre>
     * String json = "{"
     *         + "  \"query\": \"Pizza\", "
     *         + "  \"locations\": [ 94043, 90210 ] "
     *         + "}";
     *
     * JSONObject object = (JSONObject) new JSONTokener(json).nextValue();
     * String query = object.getString("query");
     * JSONArray locations = object.getJSONArray("locations");</pre>
     *
     * <p>For best interoperability and performance use JSON that complies with
     * RFC 4627, such as that generated by {@link JSONStringer}. For legacy reasons
     * this parser is lenient, so a successful parse does not indicate that the
     * input string was valid JSON. All of the following syntax errors will be
     * ignored:
     * <ul>
     *   <li>End of line comments starting with {@code //} or {@code #} and ending
     *       with a newline character.
     *   <li>C-style comments starting with {@code /*} and ending with
     *       {@code *}{@code /}. Such comments may not be nested.
     *   <li>Strings that are unquoted or {@code 'single quoted'}.
     *   <li>Hexadecimal integers prefixed with {@code 0x} or {@code 0X}.
     *   <li>Octal integers prefixed with {@code 0}.
     *   <li>Array elements separated by {@code ;}.
     *   <li>Unnecessary array separators. These are interpreted as if null was the
     *       omitted value.
     *   <li>Key-value pairs separated by {@code =} or {@code =>}.
     *   <li>Key-value pairs separated by {@code ;}.
     * </ul>
     *
     * <p>Each tokener may be used to parse a single JSON string. Instances of this
     * class are not thread safe. Although this class is nonfinal, it was not
     * designed for inheritance and should not be subclassed. In particular,
     * self-use by overrideable methods is not specified. See <i>Effective Java</i>
     * Item 17, "Design and Document or inheritance or else prohibit it" for further
     * information.
     */

    interface IJSONTokener {
        /**
         * Returns the next value from the input.
         *
         * @return a {@link JSONObject}, {@link JSONArray}, String, Boolean,
         *     Integer, Long, Double or {@link JSONObject#NULL}.
         * @throws JSONException if the input is malformed.
         */
        NextValue(
            [out] IInterface** obj);

        /**
         * Returns the string up to but not including {@code quote}, unescaping any
         * character escape sequences encountered along the way. The opening quote
         * should have already been read. This consumes the closing quote, but does
         * not include it in the returned string.
         *
         * @param quote either ' or ".
         * @throws NumberFormatException if any unicode escape sequences are
         *     malformed.
         */
        NextString(
            [in] Char32 quote,
            [out] String* result);

        /**
         * Returns an exception containing the given message plus the current
         * position and the entire input string.
         */
        SyntaxError(
            [in] String message);

        /*
         * Legacy APIs.
         *
         * None of the methods below are on the critical path of parsing JSON
         * documents. They exist only because they were exposed by the original
         * implementation and may be used by some clients.
         */

        /**
         * Returns true until the input has been exhausted.
         */
        More(
            [out] Boolean* result);

        /**
         * Returns the next available character, or the null character '\0' if all
         * input has been exhausted. The return value of this method is ambiguous
         * for JSON strings that contain the character '\0'.
         */
        Next(
            [out] Char32* ca);

        /**
         * Returns the next available character if it equals {@code c}. Otherwise an
         * exception is thrown.
         */
        Next(
            [in] Char32 c,
            [out] Char32* ca);

        /**
         * Returns the next character that is not whitespace and does not belong to
         * a comment. If the input is exhausted before such a character can be
         * found, the null character '\0' is returned. The return value of this
         * method is ambiguous for JSON strings that contain the character '\0'.
         */
        NextClean(
            [out] Char32* ca);

        /**
         * Returns the next {@code length} characters of the input.
         *
         * <p>The returned string shares its backing character array with this
         * tokener's input string. If a reference to the returned string may be held
         * indefinitely, you should use {@code new String(result)} to copy it first
         * to avoid memory leaks.
         *
         * @throws JSONException if the remaining input is not long enough to
         *     satisfy this request.
         */
        Next(
            [in] Int32 length,
            [out] String* str);

        /**
         * Returns the {@link String#trim trimmed} string holding the characters up
         * to but not including the first of:
         * <ul>
         *   <li>any character in {@code excluded}
         *   <li>a newline character '\n'
         *   <li>a carriage return '\r'
         * </ul>
         *
         * <p>The returned string shares its backing character array with this
         * tokener's input string. If a reference to the returned string may be held
         * indefinitely, you should use {@code new String(result)} to copy it first
         * to avoid memory leaks.
         *
         * @return a possibly-empty string
         */
        NextTo(
            [in] String excluded,
            [out] String* str);

        /**
         * Equivalent to {@code nextTo(String.valueOf(excluded))}.
         */
        NextTo(
            [in] Char32 excluded,
            [out] String* str);

        /**
         * Advances past all input up to and including the next occurrence of
         * {@code thru}. If the remaining input doesn't contain {@code thru}, the
         * input is exhausted.
         */
        SkipPast(
            [in] String thru);

        /**
         * Advances past all input up to but not including the next occurrence of
         * {@code to}. If the remaining input doesn't contain {@code to}, the input
         * is unchanged.
         */
        SkipTo(
            [in] Char32 to,
            [out] Char32* ca);

        /**
         * Unreads the most recent character of input. If no input characters have
         * been read, the input is unchanged.
         */
        Back();
    }

    interface IJSONTokenerHelper {
        /**
         * Returns the integer [0..15] value for the given hex character, or -1
         * for non-hex input.
         *
         * @param hex a character in the ranges [0-9], [A-F] or [a-f]. Any other
         *     character will yield a -1 result.
         */
        Dehexchar(
            [in] Char32 hex,
            [out] Int32* result);
    }

    } // namespace Json
    } // namespace Org
}
