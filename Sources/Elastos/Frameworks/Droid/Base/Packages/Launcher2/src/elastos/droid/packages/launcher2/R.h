/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

#ifndef __Elastos_Droid_Packages_Launcher2_R_H__
#define __Elastos_Droid_Packages_Launcher2_R_H__
#include <elatypes.h>
namespace Elastos {
namespace Droid {
namespace Packages {
namespace Launcher2 {
class ECO_PUBLIC R {
    public: class anim {
        public: static const int fade_in_fast = 0x7f050000;
        public: static const int fade_out_fast = 0x7f050001;
    };
    public: class array {
        public: static const int extra_wallpapers = 0x7f0b0000;
        /**  If you want additional bitmap drawable resources to appear in the
             wallpaper picker, add them to this list. For each foo.jpg be sure
             to include a foo_small.jpg to be used as a thumbnail in the
             scrolling gallery widget. 
         */
        public: static const int wallpapers = 0x7f0b0001;
    };
    public: class attr {
        /**  The number of horizontal cells in the CellLayout 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int cellCountX = 0x7f010004;
        /**  The number of vertical cells in the CellLayout 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int cellCountY = 0x7f010005;
        /**  The height of a single cell 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int cellHeight = 0x7f010007;
        /**  The width of a single cell 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int cellWidth = 0x7f010006;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int className = 0x7f010020;
        /**  The x index of the item to be focused in the cling 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int clingFocusedX = 0x7f01001e;
        /**  The y index of the item to be focused in the cling 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int clingFocusedY = 0x7f01001f;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int container = 0x7f010022;
        /**  The first screen the workspace should display. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int defaultScreen = 0x7f010003;
        /**  Orientation of a widget. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>vertical</code></td><td>0</td><td> Vertical widget. </td></tr>
<tr><td><code>horizontal</code></td><td>1</td><td> Horizontal widget. </td></tr>
</table>
         */
        public: static const int direction = 0x7f010000;
        /**  Used to identify how to draw the cling bg 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int drawIdentifier = 0x7f010002;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int heightGap = 0x7f010009;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int icon = 0x7f010028;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int key = 0x7f01002b;
        /**  Max number of cells of applications horizontally 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxAppCellCountX = 0x7f010018;
        /**  Max number of cells of applications vertically 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxAppCellCountY = 0x7f010019;
        /**  The max gap size for each dimension 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxGap = 0x7f01000a;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int packageName = 0x7f010021;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pageLayoutHeightGap = 0x7f010010;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pageLayoutPaddingBottom = 0x7f010012;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pageLayoutPaddingLeft = 0x7f010013;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pageLayoutPaddingRight = 0x7f010014;
        /**  The padding of the pages that are dynamically created per page 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pageLayoutPaddingTop = 0x7f010011;
        /**  A spacing override for the icons within a page 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pageLayoutWidthGap = 0x7f01000f;
        /**  The space between adjacent pages of the PagedView. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pageSpacing = 0x7f010015;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int screen = 0x7f010023;
        /**  The padding for the scroll indicator area 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollIndicatorPaddingLeft = 0x7f010016;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollIndicatorPaddingRight = 0x7f010017;
        /**  The source view to generate and apply the drawable states to/from 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int sourceImageViewId = 0x7f01000e;
        /**  The source view to delegate touch presses events to. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int sourceViewId = 0x7f010001;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int spanX = 0x7f010026;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int spanY = 0x7f010027;
        /**  The color of the stroke outline 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int strokeColor = 0x7f01000b;
        /**  The color of the text 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int strokeTextColor = 0x7f01000c;
        /**  The width of the stroke 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int strokeWidth = 0x7f01000d;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int title = 0x7f010029;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int uri = 0x7f01002a;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int value = 0x7f01002c;
        /**  Vertical spacing between widgets 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int widgetCellHeightGap = 0x7f01001b;
        /**  Horizontal spacing between widgets and wallpapers 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int widgetCellWidthGap = 0x7f01001a;
        /**  Number of widgets horizontally 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int widgetCountX = 0x7f01001c;
        /**  Number of widgets vertically 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int widgetCountY = 0x7f01001d;
        /**  An override for the width and height gap to allow users to specify
             a specific size for the page using spacing instead of resolving the
             spacing from the width of the page 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int widthGap = 0x7f010008;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int x = 0x7f010024;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int y = 0x7f010025;
    };
    public: class bool_ {
        public: static const int allow_rotation = 0x7f080002;
        public: static const int config_largeHeap = 0x7f080000;
        /**  Whether or not to use custom clings if a custom workspace layout is passed in 
 Whether or not to use custom clings if a custom workspace layout is passed in 
         */
        public: static const int config_useCustomClings = 0x7f080005;
        /**  Workspace 
 Whether or not the drop targets drop down as opposed to fade in 
 Workspace 
 Whether or not the drop targets drop down as opposed to fade in 
 Workspace 
 Whether or not the drop targets drop down as opposed to fade in 
         */
        public: static const int config_useDropTargetDownTransition = 0x7f080003;
        /**  Whether or not to fade the side pages 
 Whether or not to fade the side pages 
 Workspace 
 Whether or not to fade the side pages 
 Whether or not to fade the side pages 
         */
        public: static const int config_workspaceFadeAdjacentScreens = 0x7f080004;
        /**  Hotseat 
 Hotseat 
         */
        public: static const int hotseat_transpose_layout_with_orientation = 0x7f080006;
        public: static const int is_large_screen = 0x7f080001;
    };
    public: class color {
        public: static const int appwidget_error_color = 0x7f070003;
        public: static const int bubble_dark_background = 0x7f070002;
        /**  The color tints to apply to the text and drag view when hovering
         over the delete target or the info target 
         */
        public: static const int delete_target_hover_tint = 0x7f070000;
        public: static const int info_target_hover_tint = 0x7f070001;
        public: static const int workspace_all_apps_and_delete_zone_text_color = 0x7f070004;
        public: static const int workspace_all_apps_and_delete_zone_text_shadow_color = 0x7f070005;
        public: static const int workspace_icon_text_color = 0x7f070006;
    };
    public: class dimen {
        public: static const int all_apps_button_vertical_padding = 0x7f0a0070;
        public: static const int app_icon_drawable_padding = 0x7f0a0019;
        public: static const int app_icon_drawable_padding_land = 0x7f0a001a;
        public: static const int app_icon_padding_top = 0x7f0a001b;
        public: static const int app_icon_size = 0x7f0a0022;
        public: static const int app_widget_preview_label_margin_left = 0x7f0a0039;
        public: static const int app_widget_preview_label_margin_right = 0x7f0a003a;
        public: static const int app_widget_preview_label_margin_top = 0x7f0a0038;
        /**  Padding applied to AppWidget previews 
         */
        public: static const int app_widget_preview_padding_left = 0x7f0a0035;
        public: static const int app_widget_preview_padding_right = 0x7f0a0036;
        public: static const int app_widget_preview_padding_top = 0x7f0a0037;
        /**  The width can be 76dp because we don't have B padding 
         */
        public: static const int apps_customize_cell_height = 0x7f0a0024;
        /**  The width can be 72dp because we don't have L/R padding 
 AppsCustomize 
 AppsCustomize 
 AppsCustomize 
 AppsCustomize 
         */
        public: static const int apps_customize_cell_width = 0x7f0a0023;
        public: static const int apps_customize_max_gap = 0x7f0a0025;
        public: static const int apps_customize_pageLayoutHeightGap = 0x7f0a0066;
        public: static const int apps_customize_pageLayoutPaddingBottom = 0x7f0a0068;
        public: static const int apps_customize_pageLayoutPaddingLeft = 0x7f0a0069;
        public: static const int apps_customize_pageLayoutPaddingRight = 0x7f0a006a;
        /**  AppsCustomize 
         */
        public: static const int apps_customize_pageLayoutPaddingTop = 0x7f0a0067;
        /**  AppsCustomize 
 AppsCustomize 
 AppsCustomize 
         */
        public: static const int apps_customize_pageLayoutWidthGap = 0x7f0a0065;
        /**  The height of the tab bar - if this changes, we should update the
         external icon width/height above to compensate 
         */
        public: static const int apps_customize_tab_bar_height = 0x7f0a0020;
        public: static const int apps_customize_tab_bar_margin_top = 0x7f0a0021;
        public: static const int apps_customize_widget_cell_height_gap = 0x7f0a0027;
        public: static const int apps_customize_widget_cell_width_gap = 0x7f0a0026;
        /**  height of the bottom row of controls 
 height of the bottom row of controls 
 height of the bottom row of controls 
 Hotseat 
         */
        public: static const int button_bar_height = 0x7f0a002a;
        /**  Because portal animations go beyond the bounds of an icon, we need
         to make the dock layout slightly larger than the button_bar_height 
         */
        public: static const int button_bar_height_bottom_padding = 0x7f0a002c;
        public: static const int button_bar_height_plus_padding = 0x7f0a002f;
        /**  Because portal animations go beyond the bounds of an icon, we need
         to make the dock layout slightly larger than the button_bar_height 
 Because portal animations go beyond the bounds of an icon, we need
         to make the dock layout slightly larger than the button_bar_height 
         */
        public: static const int button_bar_height_top_padding = 0x7f0a002b;
        /**  Hotseat 
         */
        public: static const int button_bar_width_left_padding = 0x7f0a002d;
        public: static const int button_bar_width_right_padding = 0x7f0a002e;
        public: static const int cell_layout_bottom_padding = 0x7f0a005f;
        public: static const int cell_layout_bottom_padding_land = 0x7f0a004b;
        public: static const int cell_layout_bottom_padding_port = 0x7f0a004a;
        /**  Workspace 
 Block spacing on each side of the screen.  And also padding
         for the portals to look right. 
 Block spacing on each side of the screen.  And also padding
         for the portals to look right. 
         */
        public: static const int cell_layout_left_padding = 0x7f0a005c;
        public: static const int cell_layout_left_padding_land = 0x7f0a0045;
        /**  CellLayout padding 
 CellLayout padding land / port
 CellLayout padding land / port
         */
        public: static const int cell_layout_left_padding_port = 0x7f0a0044;
        public: static const int cell_layout_right_padding = 0x7f0a005d;
        public: static const int cell_layout_right_padding_land = 0x7f0a0047;
        public: static const int cell_layout_right_padding_port = 0x7f0a0046;
        public: static const int cell_layout_top_padding = 0x7f0a005e;
        public: static const int cell_layout_top_padding_land = 0x7f0a0049;
        public: static const int cell_layout_top_padding_port = 0x7f0a0048;
        /**  Cling 
         */
        public: static const int clingPunchThroughGraphicCenterRadius = 0x7f0a0000;
        /**  The offset for the text in the cling 
 Cling 
 The offset for the text in the cling 
 Cling 
 The offset for the text in the cling 
         */
        public: static const int cling_text_block_offset_x = 0x7f0a0002;
        public: static const int cling_text_block_offset_y = 0x7f0a0003;
        /**  When dragging items on the workspace, the number of dps by which the position of
     the drag view should be offset from the position of the original view. 
 When dragging items on the workspace, the number of dps by which the position of
     the drag view should be offset from the position of the original view. 
         */
        public: static const int dragViewOffsetX = 0x7f0a0032;
        public: static const int dragViewOffsetY = 0x7f0a0033;
        /**   When dragging an item, how much bigger (fixed dps) the dragged view
          should be. If 0, it will not be scaled at all. 
         */
        public: static const int dragViewScale = 0x7f0a0034;
        /**  Drag padding to add to the bottom of drop targets 
 Drag padding to add to the bottom of drop targets 
         */
        public: static const int drop_target_drag_padding = 0x7f0a0030;
        /**  Clings 
 Clings 
         */
        public: static const int folderClingMarginTop = 0x7f0a0001;
        public: static const int folder_cell_height = 0x7f0a000c;
        /**  Folders 
 The size of the image which sits behind the preview of the folder contents 
         */
        public: static const int folder_cell_width = 0x7f0a000b;
        public: static const int folder_height_gap = 0x7f0a0042;
        public: static const int folder_icon_padding_top = 0x7f0a000d;
        public: static const int folder_name_padding = 0x7f0a0040;
        public: static const int folder_padding = 0x7f0a0043;
        /**  The amount that the preview contents are inset from the preview background 
         */
        public: static const int folder_preview_padding = 0x7f0a003f;
        /**  Folders 
 The size of the image which sits behind the preview of the folder contents 
 Folders 
 The size of the image which sits behind the preview of the folder contents 
 Folders 
 The size of the image which sits behind the preview of the folder contents 
         */
        public: static const int folder_preview_size = 0x7f0a003e;
        public: static const int folder_width_gap = 0x7f0a0041;
        public: static const int hotseat_cell_height = 0x7f0a0013;
        /**  Workspace 
 Hotseat 
         */
        public: static const int hotseat_cell_width = 0x7f0a0012;
        public: static const int hotseat_height_gap = 0x7f0a0015;
        /**  Hotseat 
 Hotseat 
         */
        public: static const int hotseat_width_gap = 0x7f0a0014;
        public: static const int profile_badge_margin = 0x7f0a0029;
        /**  Sizes for managed profile badges 
         */
        public: static const int profile_badge_size = 0x7f0a0028;
        /**  QSB 
 QSB 
 Workspace 
         */
        public: static const int qsb_bar_height = 0x7f0a0006;
        /**  Workspace 
 qsb_bar_height_inset represents qsb_bar_height minus the padding
         that we put on each page for allowing folders to draw out of bounds 
 QSB 
 qsb_bar_height_inset represents qsb_bar_height minus the padding
         that we put on each page for allowing folders to draw out of bounds 
 Workspace 
 qsb_bar_height_inset represents qsb_bar_height minus the padding
         that we put on each page for allowing folders to draw out of bounds 
 qsb_bar_height_inset represents qsb_bar_height minus the padding
         that we put on each page for allowing folders to draw out of bounds 
         */
        public: static const int qsb_bar_height_inset = 0x7f0a0005;
        public: static const int qsb_padding_left = 0x7f0a0007;
        public: static const int qsb_padding_right = 0x7f0a0008;
        /**  We offset the proxy to overlap with the voice icon 
 We offset the proxy to overlap with the voice icon 
         */
        public: static const int qsb_voice_proxy_padding_right = 0x7f0a006f;
        public: static const int reveal_radius = 0x7f0a0004;
        /**  Dragging 
 the area at the edge of the screen that makes the workspace go left
         or right while you're dragging. 
 Workspace 
 the area at the edge of the screen that makes the workspace go left
         or right while you're dragging. 
 the area at the edge of the screen that makes the workspace go left
         or right while you're dragging. 
         */
        public: static const int scroll_zone = 0x7f0a0031;
        /**  44dp high for the optical bounds 
         */
        public: static const int search_bar_height = 0x7f0a0009;
        /**  Padding applied to shortcut previews 
         */
        public: static const int shortcut_preview_padding_left = 0x7f0a003b;
        public: static const int shortcut_preview_padding_right = 0x7f0a003c;
        public: static const int shortcut_preview_padding_top = 0x7f0a003d;
        public: static const int toolbar_button_horizontal_padding = 0x7f0a001d;
        /**  QSB 
 QSB 
 QSB 
         */
        public: static const int toolbar_button_vertical_padding = 0x7f0a001c;
        public: static const int toolbar_external_icon_height = 0x7f0a001f;
        /**  External toolbar icon size (for bounds) 
         */
        public: static const int toolbar_external_icon_width = 0x7f0a001e;
        public: static const int wallpaper_chooser_grid_height = 0x7f0a0072;
        /**  dimensions for the wallpaper picker wallpaper thumbnail width 
         */
        public: static const int wallpaper_chooser_grid_width = 0x7f0a0071;
        public: static const int workspace_bottom_padding = 0x7f0a0063;
        public: static const int workspace_bottom_padding_land = 0x7f0a0053;
        public: static const int workspace_bottom_padding_port = 0x7f0a0052;
        public: static const int workspace_cell_height = 0x7f0a006c;
        public: static const int workspace_cell_height_land = 0x7f0a0056;
        public: static const int workspace_cell_height_port = 0x7f0a0057;
        /**  Workspace cell size 
 Workspace cell size 
         */
        public: static const int workspace_cell_width = 0x7f0a006b;
        /**  Workspace cell size 
 Workspace cell size 
 Workspace cell size 
         */
        public: static const int workspace_cell_width_land = 0x7f0a0054;
        public: static const int workspace_cell_width_port = 0x7f0a0055;
        public: static const int workspace_divider_padding_bottom = 0x7f0a0011;
        /**  Workspace 
 Divider width set to match the qsb width 
         */
        public: static const int workspace_divider_padding_left = 0x7f0a000e;
        public: static const int workspace_divider_padding_right = 0x7f0a000f;
        /**  Workspace 
 Workspace 
         */
        public: static const int workspace_divider_padding_top = 0x7f0a0010;
        /**  Divider width set to match the qsb width 
         */
        public: static const int workspace_divider_width = 0x7f0a0073;
        public: static const int workspace_height_gap = 0x7f0a006e;
        public: static const int workspace_height_gap_land = 0x7f0a005a;
        public: static const int workspace_height_gap_port = 0x7f0a005b;
        public: static const int workspace_icon_text_size = 0x7f0a0017;
        /**  Workspace padding 
 Workspace padding 
         */
        public: static const int workspace_left_padding = 0x7f0a0060;
        public: static const int workspace_left_padding_land = 0x7f0a004d;
        /**  Workspace padding 
 Workspace padding 
         */
        public: static const int workspace_left_padding_port = 0x7f0a004c;
        public: static const int workspace_max_gap = 0x7f0a000a;
        public: static const int workspace_overscroll_drawable_padding = 0x7f0a0016;
        /**  We really want the page spacing to be the max of either the button bar
     height or the qsb bar height 
 Workspace 
         */
        public: static const int workspace_page_spacing = 0x7f0a0064;
        public: static const int workspace_right_padding = 0x7f0a0061;
        public: static const int workspace_right_padding_land = 0x7f0a004f;
        public: static const int workspace_right_padding_port = 0x7f0a004e;
        public: static const int workspace_spring_loaded_page_spacing = 0x7f0a0018;
        public: static const int workspace_top_padding = 0x7f0a0062;
        public: static const int workspace_top_padding_land = 0x7f0a0051;
        public: static const int workspace_top_padding_port = 0x7f0a0050;
        public: static const int workspace_width_gap = 0x7f0a006d;
        public: static const int workspace_width_gap_land = 0x7f0a0058;
        public: static const int workspace_width_gap_port = 0x7f0a0059;
    };
    public: class drawable {
        public: static const int all_apps_button_icon = 0x7f020000;
        public: static const int apps_customize_bg = 0x7f020001;
        public: static const int bg_appwidget_error = 0x7f020002;
        public: static const int bg_cling1 = 0x7f020003;
        public: static const int bg_cling2 = 0x7f020004;
        public: static const int bg_cling3 = 0x7f020005;
        public: static const int bg_cling4 = 0x7f020006;
        public: static const int bg_cling5 = 0x7f020007;
        public: static const int btn_cling_normal = 0x7f020008;
        public: static const int btn_cling_pressed = 0x7f020009;
        public: static const int cling = 0x7f02000a;
        public: static const int cling_button_bg = 0x7f02000b;
        public: static const int default_wallpaper = 0x7f02000c;
        public: static const int default_wallpaper_small = 0x7f02000d;
        public: static const int divider_launcher_holo = 0x7f02000e;
        public: static const int flying_icon_bg = 0x7f02000f;
        public: static const int flying_icon_bg_pressed = 0x7f020010;
        public: static const int focusable_view_bg = 0x7f020011;
        public: static const int focused_bg = 0x7f020012;
        public: static const int grid_focused = 0x7f020013;
        public: static const int grid_pressed = 0x7f020014;
        public: static const int grid_selected = 0x7f020015;
        public: static const int hand = 0x7f020016;
        public: static const int home_press = 0x7f020017;
        public: static const int homescreen_blue_normal_holo = 0x7f020018;
        public: static const int homescreen_blue_strong_holo = 0x7f020019;
        public: static const int hotseat_scrubber_holo = 0x7f02001a;
        public: static const int hotseat_track_holo = 0x7f02001b;
        public: static const int ic_allapps = 0x7f02001c;
        public: static const int ic_allapps_pressed = 0x7f02001d;
        public: static const int ic_home_all_apps_holo_dark = 0x7f02001e;
        public: static const int ic_home_search_normal_holo = 0x7f02001f;
        public: static const int ic_home_voice_search_holo = 0x7f020020;
        public: static const int ic_launcher_clear_active_holo = 0x7f020021;
        public: static const int ic_launcher_clear_normal_holo = 0x7f020022;
        public: static const int ic_launcher_info_active_holo = 0x7f020023;
        public: static const int ic_launcher_info_normal_holo = 0x7f020024;
        public: static const int ic_launcher_market_holo = 0x7f020025;
        public: static const int ic_launcher_trashcan_active_holo = 0x7f020026;
        public: static const int ic_launcher_trashcan_normal_holo = 0x7f020027;
        public: static const int info_target_selector = 0x7f020028;
        public: static const int overscroll_glow_left = 0x7f020029;
        public: static const int overscroll_glow_right = 0x7f02002a;
        public: static const int page_hover_left_holo = 0x7f02002b;
        public: static const int page_hover_right_holo = 0x7f02002c;
        public: static const int portal_container_holo = 0x7f02002d;
        public: static const int portal_ring_inner_holo = 0x7f02002e;
        public: static const int portal_ring_inner_nolip_holo = 0x7f02002f;
        public: static const int portal_ring_outer_holo = 0x7f020030;
        public: static const int portal_ring_rest = 0x7f020031;
        public: static const int remove_target_selector = 0x7f020032;
        public: static const int search_frame = 0x7f020033;
        public: static const int tab_selected_focused_holo = 0x7f020034;
        public: static const int tab_selected_holo = 0x7f020035;
        public: static const int tab_selected_pressed_focused_holo = 0x7f020036;
        public: static const int tab_selected_pressed_holo = 0x7f020037;
        public: static const int tab_unselected_focused_holo = 0x7f020038;
        public: static const int tab_unselected_holo = 0x7f020039;
        public: static const int tab_unselected_pressed_focused_holo = 0x7f02003a;
        public: static const int tab_unselected_pressed_holo = 0x7f02003b;
        public: static const int tab_widget_indicator_selector = 0x7f02003c;
        public: static const int uninstall_target_selector = 0x7f02003d;
        public: static const int wallpaper_gallery_background = 0x7f02003e;
        public: static const int wallpaper_gallery_item = 0x7f02003f;
        public: static const int wallpaper_picker_preview = 0x7f020040;
        public: static const int widget_container_holo = 0x7f020041;
        public: static const int widget_preview_tile = 0x7f020042;
        public: static const int widget_resize_frame_holo = 0x7f020043;
        public: static const int widget_resize_handle_bottom = 0x7f020044;
        public: static const int widget_resize_handle_left = 0x7f020045;
        public: static const int widget_resize_handle_right = 0x7f020046;
        public: static const int widget_resize_handle_top = 0x7f020047;
        public: static const int workspace_bg = 0x7f020048;
    };
    public: class id {
        public: static const int all_apps_cling = 0x7f0e000c;
        public: static const int all_apps_cling_add_item = 0x7f0e0003;
        public: static const int all_apps_cling_title = 0x7f0e0002;
        public: static const int animation_buffer = 0x7f0e000a;
        public: static const int application_icon = 0x7f0e0005;
        public: static const int apps_customize_content = 0x7f0e0006;
        public: static const int apps_customize_pane = 0x7f0e0029;
        public: static const int apps_customize_pane_content = 0x7f0e0009;
        public: static const int apps_customize_progress_bar = 0x7f0e000d;
        public: static const int cell1 = 0x7f0e001e;
        public: static const int cell2 = 0x7f0e001f;
        public: static const int cell3 = 0x7f0e0020;
        public: static const int cell4 = 0x7f0e0021;
        public: static const int cell5 = 0x7f0e0022;
        public: static const int cling_dismiss = 0x7f0e0004;
        public: static const int delete_target_text = 0x7f0e0011;
        public: static const int dock_divider = 0x7f0e001c;
        public: static const int drag_layer = 0x7f0e001b;
        public: static const int drag_target_bar = 0x7f0e002c;
        public: static const int folder_cling = 0x7f0e0026;
        public: static const int folder_cling_create_folder = 0x7f0e0016;
        public: static const int folder_cling_title = 0x7f0e0015;
        public: static const int folder_content = 0x7f0e0032;
        public: static const int folder_icon_name = 0x7f0e0018;
        public: static const int folder_name = 0x7f0e002e;
        public: static const int gallery = 0x7f0e0033;
        public: static const int horizontal = 0x7f0e0000;
        public: static const int hotseat = 0x7f0e0023;
        public: static const int info_target_text = 0x7f0e0012;
        public: static const int label = 0x7f0e002d;
        public: static const int launcher = 0x7f0e001a;
        public: static const int layout = 0x7f0e0019;
        public: static const int market_button = 0x7f0e0008;
        public: static const int paged_view_indicator = 0x7f0e000b;
        public: static const int preview_background = 0x7f0e0017;
        public: static const int provider = 0x7f0e0014;
        public: static const int provider_icon = 0x7f0e0013;
        public: static const int qsb_bar = 0x7f0e0024;
        public: static const int qsb_divider = 0x7f0e002a;
        public: static const int qsb_search_bar = 0x7f0e002b;
        public: static const int search_button = 0x7f0e002f;
        public: static const int search_button_container = 0x7f0e0030;
        public: static const int set = 0x7f0e0034;
        public: static const int tabs_container = 0x7f0e0007;
        public: static const int vertical = 0x7f0e0001;
        public: static const int voice_button = 0x7f0e0028;
        public: static const int voice_button_container = 0x7f0e0031;
        public: static const int voice_button_proxy = 0x7f0e0027;
        public: static const int wallpaper_chooser_fragment = 0x7f0e0035;
        public: static const int wallpaper_image = 0x7f0e0036;
        public: static const int widget_dims = 0x7f0e0010;
        public: static const int widget_name = 0x7f0e000f;
        public: static const int widget_preview = 0x7f0e000e;
        public: static const int workspace = 0x7f0e001d;
        public: static const int workspace_cling = 0x7f0e0025;
    };
    public: class integer {
        public: static const int apps_customize_cling_focused_x = 0x7f090024;
        public: static const int apps_customize_cling_focused_y = 0x7f090025;
        /**  AllApps/Customize/AppsCustomize 
 AppsCustomize 
         */
        public: static const int apps_customize_maxCellCountX = 0x7f090022;
        public: static const int apps_customize_maxCellCountY = 0x7f090023;
        /**  We can also afford to have a slightly wider portrait layout in
         xlarge 
         */
        public: static const int apps_customize_widget_cell_count_x = 0x7f090026;
        public: static const int apps_customize_widget_cell_count_y = 0x7f090027;
        public: static const int cell_count_x = 0x7f09001d;
        public: static const int cell_count_y = 0x7f09001e;
        /**  Batch loading for loading in LauncherModel 
         */
        public: static const int config_allAppsBatchLoadDelay = 0x7f09000e;
        public: static const int config_allAppsBatchSize = 0x7f09000f;
        /**  The slope, in percent, of the drag movement needed to drag an item out of
         AppsCustomize (y / x * 100%)  
         */
        public: static const int config_appsCustomizeDragSlopeThreshold = 0x7f09000d;
        public: static const int config_appsCustomizeFadeInTime = 0x7f090007;
        public: static const int config_appsCustomizeFadeOutTime = 0x7f090008;
        /**  AllApps/Customize/AppsCustomize 
 The alpha of the AppsCustomize bg in spring loaded mode 
         */
        public: static const int config_appsCustomizeSpringLoadedBgAlpha = 0x7f090001;
        public: static const int config_appsCustomizeWorkspaceAnimationStagger = 0x7f09000a;
        public: static const int config_appsCustomizeWorkspaceShrinkTime = 0x7f090009;
        /**  Fade/zoom in/out duration & scale in the AllApps transition.
         Note: This should be less than the workspaceShrinkTime as they happen together. 
         */
        public: static const int config_appsCustomizeZoomInTime = 0x7f090004;
        public: static const int config_appsCustomizeZoomOutTime = 0x7f090005;
        public: static const int config_appsCustomizeZoomScaleFactor = 0x7f090006;
        /**  Camera distance for the overscroll effect 
 Camera distance for the overscroll effect. We use a higher value here because the 
         workspace screens run nearly flush to the edge of the screen
 Camera distance for the overscroll effect 
         */
        public: static const int config_cameraDistance = 0x7f090019;
        /**  Properties controlling the workspace fade-out during dragging 
         */
        public: static const int config_dragFadeOutAlpha = 0x7f090017;
        public: static const int config_dragFadeOutDuration = 0x7f090018;
        /**  The duration (in ms) of the fade animation on the object outlines, used when
         we are dragging objects around on the home screen. 
         */
        public: static const int config_dragOutlineFadeTime = 0x7f090011;
        /**  The alpha value at which to show the most recent drop visualization outline. 
         */
        public: static const int config_dragOutlineMaxAlpha = 0x7f090012;
        /**  The distance at which the animation should take the max duration 
         */
        public: static const int config_dropAnimMaxDist = 0x7f090016;
        public: static const int config_dropAnimMaxDuration = 0x7f090014;
        /**  Parameters controlling the animation for when an item is dropped on the home screen,
         and it animates from its old position to the new one. 
         */
        public: static const int config_dropAnimMinDuration = 0x7f090013;
        /**  The transition duration for the background of the drop targets 
         */
        public: static const int config_dropTargetBgTransitionDuration = 0x7f090010;
        /**  DragController 
 DragController 
         */
        public: static const int config_flingToDeleteMinVelocity = 0x7f090000;
        /**  The duration of the UserFolder opening and closing animation 
         */
        public: static const int config_folderAnimDuration = 0x7f090015;
        /**  Tab transition animation duration 
         */
        public: static const int config_tabTransitionDuration = 0x7f09000c;
        public: static const int config_workspaceAppsCustomizeAnimationStagger = 0x7f09000b;
        /**  Out of 100, the percent to shrink the workspace during spring loaded mode. 
 AllApps/Customize/AppsCustomize 
 Out of 100, the percent to shrink the workspace during spring loaded mode. 
         */
        public: static const int config_workspaceSpringLoadShrinkPercentage = 0x7f090003;
        public: static const int config_workspaceUnshrinkTime = 0x7f090002;
        /**  Folder max bounds and max number of items. Note: folder_max_count_x * folder_max_count_y
         >= folder_max_num_items. When these are set to -1, they are automatically determined. 
 Folder max bounds and max number of items.
         Note: folder_max_count_x * folder_max_count_y >= folder_max_num_items. 
 Folders 
 Folder max bounds and max number of items. Note: folder_max_count_x * folder_max_count_y
        >= folder_max_num_items. When these are set to -1, they are automatically determined. 
 Folders 
 Folder max bounds and max number of items. Note: folder_max_count_x * folder_max_count_y
        >= folder_max_num_items. When these are set to -1, they are automatically determined. 
 Folders 
 Folder max bounds and max number of items. Note: folder_max_count_x * folder_max_count_y
        >= folder_max_num_items. When these are set to -1, they are automatically determined. 
         */
        public: static const int folder_max_count_x = 0x7f09001a;
        public: static const int folder_max_count_y = 0x7f09001b;
        public: static const int folder_max_num_items = 0x7f09001c;
        public: static const int hotseat_all_apps_index = 0x7f090020;
        public: static const int hotseat_cell_count = 0x7f09001f;
        /**  must be between 0 and 100 
 Hotseat 
 must be between 0 and 100 
         */
        public: static const int hotseat_item_scale_percentage = 0x7f090021;
    };
    public: class layout {
        public: static const int add_list_item = 0x7f040000;
        public: static const int all_apps_cling = 0x7f040001;
        public: static const int application = 0x7f040002;
        public: static const int apps_customize_application = 0x7f040003;
        public: static const int apps_customize_pane = 0x7f040004;
        public: static const int apps_customize_progressbar = 0x7f040005;
        public: static const int apps_customize_widget = 0x7f040006;
        public: static const int appwidget_error = 0x7f040007;
        public: static const int custom_workspace_cling = 0x7f040008;
        public: static const int drop_target_bar = 0x7f040009;
        public: static const int external_widget_drop_list_item = 0x7f04000a;
        public: static const int folder_cling = 0x7f04000b;
        public: static const int folder_icon = 0x7f04000c;
        public: static const int hotseat = 0x7f04000d;
        public: static const int launcher = 0x7f04000e;
        public: static const int market_button = 0x7f04000f;
        public: static const int qsb_bar = 0x7f040010;
        public: static const int rename_folder = 0x7f040011;
        public: static const int scroll_indicator = 0x7f040012;
        public: static const int search_bar = 0x7f040013;
        public: static const int tab_widget_indicator = 0x7f040014;
        public: static const int user_folder = 0x7f040015;
        public: static const int wallpaper_chooser = 0x7f040016;
        public: static const int wallpaper_chooser_base = 0x7f040017;
        public: static const int wallpaper_item = 0x7f040018;
        public: static const int workspace = 0x7f040019;
        public: static const int workspace_cling = 0x7f04001a;
        public: static const int workspace_divider = 0x7f04001b;
        public: static const int workspace_screen = 0x7f04001c;
    };
    public: class mipmap {
        public: static const int ic_launcher_application = 0x7f030000;
        public: static const int ic_launcher_home = 0x7f030001;
        public: static const int ic_launcher_wallpaper = 0x7f030002;
    };
    public: class string {
        /**  Accessibility: AllApps button 
         */
        public: static const int accessibility_all_apps_button = 0x7f0c002a;
        /**  Accessibility: Delete button 
         */
        public: static const int accessibility_delete_button = 0x7f0c002b;
        /**  Accessibility: Search button 
         */
        public: static const int accessibility_search_button = 0x7f0c0028;
        /**  Accessibility: Voice Search button 
         */
        public: static const int accessibility_voice_search_button = 0x7f0c0029;
        /**  Displayed when user selects a shortcut for an app that was uninstalled [CHAR_LIMIT=none]
         */
        public: static const int activity_not_found = 0x7f0c0007;
        /**  All applications label 
         */
        public: static const int all_apps_button_label = 0x7f0c0021;
        /**  The description of how to pick up and add an item to the workspace [CHAR_LIMIT=none] 
         */
        public: static const int all_apps_cling_add_item = 0x7f0c0050;
        /**  The title text for the All Apps cling [CHAR_LIMIT=none] 
         */
        public: static const int all_apps_cling_title = 0x7f0c004f;
        /**  Label for button in all applications label to go back home (to the workspace / desktop)
         for accessibilty (spoken when the button gets focus). 
         */
        public: static const int all_apps_home_button_label = 0x7f0c0022;
        /**  Application name 
         */
        public: static const int application_name = 0x7f0c0000;
        /**  The format string for AppsCustomize Apps page scroll text [CHAR_LIMIT=none] 
         */
        public: static const int apps_customize_apps_scroll_format = 0x7f0c004a;
        /**  The format string for AppsCustomize Apps page scroll text [CHAR_LIMIT=none] 
         */
        public: static const int apps_customize_widgets_scroll_format = 0x7f0c004b;
        /**  Appears in the CAB when an app is selected in All Apps or Customize mode. [CHAR_LIMIT=50] 
         */
        public: static const int cab_app_selection_text = 0x7f0c0037;
        /**  Appears in the CAB when a folder is selected in Customize mode. [CHAR_LIMIT=50] 
         */
        public: static const int cab_folder_selection_text = 0x7f0c0039;
        /**  Describes the button for getting details/info about currently selected application.
         Text is not displayed, but provided for accessibility. [CHAR_LIMIT=none] 
         */
        public: static const int cab_menu_app_info = 0x7f0c0036;
        /**  Describes the button for uninstalling the currently selected application.
         Text is not displayed, but provided for accessibility. [CHAR_LIMIT=none] 
         */
        public: static const int cab_menu_delete_app = 0x7f0c0035;
        /**  Appears in the CAB when a shortcut is selected in Customize mode. [CHAR_LIMIT=50] 
         */
        public: static const int cab_shortcut_selection_text = 0x7f0c003a;
        /**  Appears in the CAB when a widget is selected in Customize mode. [CHAR_LIMIT=50] 
         */
        public: static const int cab_widget_selection_text = 0x7f0c0038;
        /**  Buttons in Rename folder dialog box 
         */
        public: static const int cancel_action = 0x7f0c0012;
        /**  Title of dialog that appears after user selects Wallpaper from menu 
         */
        public: static const int chooser_wallpaper = 0x7f0c0004;
        /**  The text on the button to dismiss a cling [CHAR_LIMIT=none] 
         */
        public: static const int cling_dismiss = 0x7f0c0054;
        /**  Error message when user has filled all their home screens 
         */
        public: static const int completely_out_of_space = 0x7f0c0018;
        /**  Dummy string [CHAR_LIMIT=60] 
         */
        public: static const int custom_workspace_cling_description_1 = 0x7f0c005d;
        /**  Dummy string [CHAR_LIMIT=60] 
         */
        public: static const int custom_workspace_cling_description_2 = 0x7f0c005f;
        /**  Strings used in device overlays 
 Clings 
 Dummy string [CHAR_LIMIT=40] 
         */
        public: static const int custom_workspace_cling_title_1 = 0x7f0c005c;
        /**  Dummy string [CHAR_LIMIT=40] 
         */
        public: static const int custom_workspace_cling_title_2 = 0x7f0c005e;
        /**  The format string for default page scroll text [CHAR_LIMIT=none] 
         */
        public: static const int default_scroll_format = 0x7f0c0048;
        /**  Label for delete drop target. [CHAR_LIMIT=30] 
         */
        public: static const int delete_target_label = 0x7f0c0025;
        /**  Label for uninstall drop target. [CHAR_LIMIT=30]
         */
        public: static const int delete_target_uninstall_label = 0x7f0c0026;
        /**  Label for trash icon in All Apps. The icon/widget will become completely unavailable on the
         device. [CHAR_LIMIT=30]
         */
        public: static const int delete_zone_label_all_apps = 0x7f0c0024;
        /**  Label for trash icon in All Apps, when an updated system app is selected. The update will
         be uninstalled. [CHAR_LIMIT=30] 
         */
        public: static const int delete_zone_label_all_apps_system_app = 0x7f0c002c;
        /**  Label for trash icon on workspace. Meant to communicate the idea of removing the
         icon/widget from the home screen, but not permanently. [CHAR_LIMIT=30] 
         */
        public: static const int delete_zone_label_workspace = 0x7f0c0023;
        /**  Title of the Android Dreams (screensaver) module 
         */
        public: static const int dream_name = 0x7f0c0045;
        /**  Error message on dummy custom cling layout [DO NOT TRANSLATE] 
         */
        public: static const int dummy_custom_cling_error_message = 0x7f0c0055;
        /**  External-drop widget error string.  This is the error that is shown
         when you drag and item into the homescreen and it is unable to fit,
         or an error is encountered. [CHAR_LIMIT=50] 
         */
        public: static const int external_drop_widget_error = 0x7f0c000d;
        /**  External-drop widget pick label format string [CHAR_LIMIT=25] 
         */
        public: static const int external_drop_widget_pick_format = 0x7f0c000c;
        /**  External-drop widget pick title.  This is shown as the title of the
         dialog which allows you to pick which widgets to handle a particular
         drop if there are multiple choices. [CHAR_LIMIT=35] 
         */
        public: static const int external_drop_widget_pick_title = 0x7f0c000e;
        /**  The description of how to create a folder [CHAR_LIMIT=none] 
         */
        public: static const int folder_cling_create_folder = 0x7f0c0053;
        /**  The description of how to move an app [CHAR_LIMIT=none] 
         */
        public: static const int folder_cling_move_item = 0x7f0c0052;
        /**  The title text for the Folder cling [CHAR_LIMIT=none] 
         */
        public: static const int folder_cling_title = 0x7f0c0051;
        /**  Indication that folder closed 
         */
        public: static const int folder_closed = 0x7f0c0059;
        /**  Default folder title 
         */
        public: static const int folder_hint_text = 0x7f0c0046;
        /**  Default folder name 
         */
        public: static const int folder_name = 0x7f0c0003;
        /**  Folder name format 
         */
        public: static const int folder_name_format = 0x7f0c005b;
        /**  Folder accessibility 
 The format string for when a folder is opened, speaks the dimensions 
         */
        public: static const int folder_opened = 0x7f0c0056;
        /**  Folder renamed format 
         */
        public: static const int folder_renamed = 0x7f0c005a;
        /**  Instruction that clicking outside will close folder 
         */
        public: static const int folder_tap_to_close = 0x7f0c0057;
        /**  Instruction that clicking outside will commit folder rename 
         */
        public: static const int folder_tap_to_rename = 0x7f0c0058;
        /**  Text to show user in place of a gadget when we can't display it properly 
         */
        public: static const int gadget_error_text = 0x7f0c0043;
        /**  Options in "Add to Home" dialog box; Title of the group containing the list of all apps 
         */
        public: static const int group_applications = 0x7f0c0014;
        /**  Options in "Add to Home" dialog box; Title of the group containing the list of all shortcut
s 
         */
        public: static const int group_shortcuts = 0x7f0c0015;
        /**  Options in "Add to Home" dialog box; Title of the group containing the list of apps that can set the wallpaper
         */
        public: static const int group_wallpapers = 0x7f0c0017;
        /**  Options in "Add to Home" dialog box; Title of the group containing the list of all widgets/gadgets 
         */
        public: static const int group_widgets = 0x7f0c0016;
        /**  URL pointing to help text. If empty, no link to help will be created [DO NOT TRANSLATE] 
         */
        public: static const int help_url = 0x7f0c0034;
        /**  Accessibility-facing application name 
         */
        public: static const int home = 0x7f0c0001;
        /**  Error message when user has filled the hotseat 
         */
        public: static const int hotseat_out_of_space = 0x7f0c001a;
        /**  Label for the info icon. [CHAR_LIMIT=30] 
         */
        public: static const int info_target_label = 0x7f0c0027;
        /**  Error message when user tries to drop an invalid item on the hotseat 
         */
        public: static const int invalid_hotseat_item = 0x7f0c001b;
        /**  AppsCustomize pane 
 Message to tell the user to press and hold on a widget to add it [CHAR_LIMIT=50] 
         */
        public: static const int long_press_widget_to_add = 0x7f0c0009;
        /**  Market button text.  The market button text is removed in Launcher.java 
         in the Phone UI. [CHAR LIMIT=32] 
         */
        public: static const int market = 0x7f0c000a;
        /**  Verb, menu item used to add an item on the desktop 
         */
        public: static const int menu_add = 0x7f0c002d;
        /**  Noun, menu item used to show help. [CHAR_LIMIT=none] 
         */
        public: static const int menu_help = 0x7f0c0033;
        /**  Title of dialog box 
         */
        public: static const int menu_item_add_item = 0x7f0c0013;
        /**  Menu item used to manage installed applications 
         */
        public: static const int menu_manage_apps = 0x7f0c002e;
        /**  Noun, menu item used to bring down the notifications shade 
         */
        public: static const int menu_notifications = 0x7f0c0031;
        /**  Verb, menu item used to initiate global search 
         */
        public: static const int menu_search = 0x7f0c0030;
        /**  Noun, menu item used to show the system settings 
         */
        public: static const int menu_settings = 0x7f0c0032;
        /**  Noun, menu item used to set the desktop's wallpaper 
         */
        public: static const int menu_wallpaper = 0x7f0c002f;
        /**  Error message when user has filled a home screen 
         */
        public: static const int out_of_space = 0x7f0c0019;
        /**  Permission description 
         */
        public: static const int permdesc_install_shortcut = 0x7f0c003c;
        /**  Permission description 
         */
        public: static const int permdesc_read_settings = 0x7f0c0040;
        /**  Permission description 
         */
        public: static const int permdesc_uninstall_shortcut = 0x7f0c003e;
        /**  Permission description 
         */
        public: static const int permdesc_write_settings = 0x7f0c0042;
        /**  Permission short label 
         */
        public: static const int permlab_install_shortcut = 0x7f0c003b;
        /**  Permission short label 
         */
        public: static const int permlab_read_settings = 0x7f0c003f;
        /**  Permission short label 
         */
        public: static const int permlab_uninstall_shortcut = 0x7f0c003d;
        /**  Permission short label 
         */
        public: static const int permlab_write_settings = 0x7f0c0041;
        /**  Option in "Select wallpaper from" dialog box 
         */
        public: static const int pick_wallpaper = 0x7f0c0006;
        /**  Buttons in Rename folder dialog box 
         */
        public: static const int rename_action = 0x7f0c0011;
        /**  Label of Folder name field in Rename folder dialog box 
         */
        public: static const int rename_folder_label = 0x7f0c000f;
        /**  Title of dialog box 
         */
        public: static const int rename_folder_title = 0x7f0c0010;
        /**  Message displayed when an external application attemps to create a shortcut that already exists 
         */
        public: static const int shortcut_duplicate = 0x7f0c001e;
        /**  Message displayed when a shortcut is created by an external application 
         */
        public: static const int shortcut_installed = 0x7f0c001c;
        /**  Message displayed when a shortcut is uninstalled by an external application 
         */
        public: static const int shortcut_uninstalled = 0x7f0c001d;
        /**  Title of dialog when user is selecting an application to add to homescreen 
         */
        public: static const int title_select_application = 0x7f0c0020;
        /**  Title of dialog when user is selecting shortcut to add to homescreen 
         */
        public: static const int title_select_shortcut = 0x7f0c001f;
        /**  Name for all applications running as this uid. 
         */
        public: static const int uid_name = 0x7f0c0002;
        /**  Text to inform the user that they can't uninstall a system application 
         */
        public: static const int uninstall_system_app_text = 0x7f0c0044;
        /**  Button label on Wallpaper Gallery screen; user selects this button to set a specific wallpaper 
         */
        public: static const int wallpaper_instructions = 0x7f0c0005;
        /**  The format string for the dimensions of a widget in the drawer 
 There is a special version of this format string for Farsi 
         */
        public: static const int widget_dims_format = 0x7f0c000b;
        /**   Labels for the tabs in the customize drawer 
         */
        public: static const int widgets_tab_label = 0x7f0c0008;
        /**  The description of how to use the workspace [CHAR_LIMIT=none] 
         */
        public: static const int workspace_cling_move_item = 0x7f0c004d;
        /**  The description of how to open all apps from the workspace [CHAR_LIMIT=none] 
         */
        public: static const int workspace_cling_open_all_apps = 0x7f0c004e;
        /**  Clings 
 The title text for the workspace cling [CHAR_LIMIT=none] 
         */
        public: static const int workspace_cling_title = 0x7f0c004c;
        /**  The format string for Workspace descriptions [CHAR_LIMIT=none] 
         */
        public: static const int workspace_description_format = 0x7f0c0047;
        /**  The format string for Workspace page scroll text [CHAR_LIMIT=none] 
         */
        public: static const int workspace_scroll_format = 0x7f0c0049;
    };
    public: class style {
        /**  Clings 
         */
        public: static const int ClingButton = 0x7f0d0002;
        public: static const int ClingText = 0x7f0d0004;
        public: static const int ClingTitleText = 0x7f0d0003;
        public: static const int CustomClingText = 0x7f0d0015;
        /**  Overridden in device overlays 
         */
        public: static const int CustomClingTitleText = 0x7f0d0014;
        public: static const int DropTargetButton = 0x7f0d0010;
        public: static const int DropTargetButtonContainer = 0x7f0d000f;
        public: static const int MarketButton = 0x7f0d0013;
        /**  Search Bar 
 Workspace 
 QSB Search / Drop Target bar 
         */
        public: static const int QSBBar = 0x7f0d000c;
        /**  Workspace 
         */
        public: static const int SearchButton = 0x7f0d000e;
        public: static const int SearchDropTargetBar = 0x7f0d000d;
        public: static const int TabIndicator = 0x7f0d0011;
        /**  Overridden in values-land 
 AppsCustomize 
 AppsCustomize 
 AppsCustomize 
         */
        public: static const int TabIndicator_AppsCustomize = 0x7f0d0012;
        public: static const int Theme = 0x7f0d0001;
        public: static const int Theme_WallpaperPicker = 0x7f0d0000;
        public: static const int WorkspaceIcon = 0x7f0d0005;
        public: static const int WorkspaceIcon_Landscape = 0x7f0d0007;
        public: static const int WorkspaceIcon_Landscape_AppsCustomize = 0x7f0d000b;
        public: static const int WorkspaceIcon_Landscape_Folder = 0x7f0d0009;
        /**  Workspace 
         */
        public: static const int WorkspaceIcon_Portrait = 0x7f0d0006;
        public: static const int WorkspaceIcon_Portrait_AppsCustomize = 0x7f0d000a;
        public: static const int WorkspaceIcon_Portrait_Folder = 0x7f0d0008;
    };
    public: class xml {
        public: static const int default_workspace = 0x7f060000;
        public: static const int update_workspace = 0x7f060001;
        public: static const int wallpaper_picker_preview = 0x7f060002;
    };
    public: class styleable {
        /**  AppsCustomizePagedView specific attributes.  These attributes are used to
         customize an AppsCustomizePagedView in xml files. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AppsCustomizePagedView_clingFocusedX com.android.launcher:clingFocusedX}</code></td><td> The x index of the item to be focused in the cling </td></tr>
           <tr><td><code>{@link #AppsCustomizePagedView_clingFocusedY com.android.launcher:clingFocusedY}</code></td><td> The y index of the item to be focused in the cling </td></tr>
           <tr><td><code>{@link #AppsCustomizePagedView_maxAppCellCountX com.android.launcher:maxAppCellCountX}</code></td><td> Max number of cells of applications horizontally </td></tr>
           <tr><td><code>{@link #AppsCustomizePagedView_maxAppCellCountY com.android.launcher:maxAppCellCountY}</code></td><td> Max number of cells of applications vertically </td></tr>
           <tr><td><code>{@link #AppsCustomizePagedView_widgetCellHeightGap com.android.launcher:widgetCellHeightGap}</code></td><td> Vertical spacing between widgets </td></tr>
           <tr><td><code>{@link #AppsCustomizePagedView_widgetCellWidthGap com.android.launcher:widgetCellWidthGap}</code></td><td> Horizontal spacing between widgets and wallpapers </td></tr>
           <tr><td><code>{@link #AppsCustomizePagedView_widgetCountX com.android.launcher:widgetCountX}</code></td><td> Number of widgets horizontally </td></tr>
           <tr><td><code>{@link #AppsCustomizePagedView_widgetCountY com.android.launcher:widgetCountY}</code></td><td> Number of widgets vertically </td></tr>
           </table>
           @see #AppsCustomizePagedView_clingFocusedX
           @see #AppsCustomizePagedView_clingFocusedY
           @see #AppsCustomizePagedView_maxAppCellCountX
           @see #AppsCustomizePagedView_maxAppCellCountY
           @see #AppsCustomizePagedView_widgetCellHeightGap
           @see #AppsCustomizePagedView_widgetCellWidthGap
           @see #AppsCustomizePagedView_widgetCountX
           @see #AppsCustomizePagedView_widgetCountY
         */
        public: static const int AppsCustomizePagedView[8];
        /**
          <p>
          @attr description
           The x index of the item to be focused in the cling 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:clingFocusedX
        */
        public: static const int AppsCustomizePagedView_clingFocusedX = 6;
        /**
          <p>
          @attr description
           The y index of the item to be focused in the cling 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:clingFocusedY
        */
        public: static const int AppsCustomizePagedView_clingFocusedY = 7;
        /**
          <p>
          @attr description
           Max number of cells of applications horizontally 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:maxAppCellCountX
        */
        public: static const int AppsCustomizePagedView_maxAppCellCountX = 0;
        /**
          <p>
          @attr description
           Max number of cells of applications vertically 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:maxAppCellCountY
        */
        public: static const int AppsCustomizePagedView_maxAppCellCountY = 1;
        /**
          <p>
          @attr description
           Vertical spacing between widgets 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:widgetCellHeightGap
        */
        public: static const int AppsCustomizePagedView_widgetCellHeightGap = 3;
        /**
          <p>
          @attr description
           Horizontal spacing between widgets and wallpapers 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:widgetCellWidthGap
        */
        public: static const int AppsCustomizePagedView_widgetCellWidthGap = 2;
        /**
          <p>
          @attr description
           Number of widgets horizontally 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:widgetCountX
        */
        public: static const int AppsCustomizePagedView_widgetCountX = 4;
        /**
          <p>
          @attr description
           Number of widgets vertically 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:widgetCountY
        */
        public: static const int AppsCustomizePagedView_widgetCountY = 5;
        /**  CellLayout specific attributes. These attributes are used to customize
         a CellLayout view in XML files. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #CellLayout_cellHeight com.android.launcher:cellHeight}</code></td><td> The height of a single cell </td></tr>
           <tr><td><code>{@link #CellLayout_cellWidth com.android.launcher:cellWidth}</code></td><td> The width of a single cell </td></tr>
           <tr><td><code>{@link #CellLayout_heightGap com.android.launcher:heightGap}</code></td><td></td></tr>
           <tr><td><code>{@link #CellLayout_maxGap com.android.launcher:maxGap}</code></td><td> The max gap size for each dimension </td></tr>
           <tr><td><code>{@link #CellLayout_widthGap com.android.launcher:widthGap}</code></td><td> An override for the width and height gap to allow users to specify
             a specific size for the page using spacing instead of resolving the
             spacing from the width of the page </td></tr>
           </table>
           @see #CellLayout_cellHeight
           @see #CellLayout_cellWidth
           @see #CellLayout_heightGap
           @see #CellLayout_maxGap
           @see #CellLayout_widthGap
         */
        public: static const int CellLayout[5];
        /**
          <p>
          @attr description
           The height of a single cell 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:cellHeight
        */
        public: static const int CellLayout_cellHeight = 1;
        /**
          <p>
          @attr description
           The width of a single cell 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:cellWidth
        */
        public: static const int CellLayout_cellWidth = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#heightGap}
          attribute's value can be found in the {@link #CellLayout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:heightGap
        */
        public: static const int CellLayout_heightGap = 3;
        /**
          <p>
          @attr description
           The max gap size for each dimension 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:maxGap
        */
        public: static const int CellLayout_maxGap = 4;
        /**
          <p>
          @attr description
           An override for the width and height gap to allow users to specify
             a specific size for the page using spacing instead of resolving the
             spacing from the width of the page 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:widthGap
        */
        public: static const int CellLayout_widthGap = 2;
        /**  Cling specific attributes. These attributes are used to customize
         the cling in XML files. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Cling_drawIdentifier com.android.launcher:drawIdentifier}</code></td><td> Used to identify how to draw the cling bg </td></tr>
           </table>
           @see #Cling_drawIdentifier
         */
        public: static const int Cling[1];
        /**
          <p>
          @attr description
           Used to identify how to draw the cling bg 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:drawIdentifier
        */
        public: static const int Cling_drawIdentifier = 0;
        /** Attributes that can be used with a CustomClingText.
         */
        public: static const int CustomClingText[0];
        /**  Only used in the device overlays 
         */
        public: static const int CustomClingTitleText[0];
        /**  DrawableStateProxyView specific attributes. These attributes are used to customize
         a DrawableStateProxyView view in XML files. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #DrawableStateProxyView_sourceViewId com.android.launcher:sourceViewId}</code></td><td> The source view to delegate touch presses events to.</td></tr>
           </table>
           @see #DrawableStateProxyView_sourceViewId
         */
        public: static const int DrawableStateProxyView[1];
        /**
          <p>
          @attr description
           The source view to delegate touch presses events to. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:sourceViewId
        */
        public: static const int DrawableStateProxyView_sourceViewId = 0;
        /** Attributes that can be used with a Extra.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Extra_key com.android.launcher:key}</code></td><td></td></tr>
           <tr><td><code>{@link #Extra_value com.android.launcher:value}</code></td><td></td></tr>
           </table>
           @see #Extra_key
           @see #Extra_value
         */
        public: static const int Extra[2];
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#key}
          attribute's value can be found in the {@link #Extra} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:key
        */
        public: static const int Extra_key = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#value}
          attribute's value can be found in the {@link #Extra} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:value
        */
        public: static const int Extra_value = 1;
        /**  XML attributes used by default_workspace.xml 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Favorite_className com.android.launcher:className}</code></td><td></td></tr>
           <tr><td><code>{@link #Favorite_container com.android.launcher:container}</code></td><td></td></tr>
           <tr><td><code>{@link #Favorite_icon com.android.launcher:icon}</code></td><td></td></tr>
           <tr><td><code>{@link #Favorite_packageName com.android.launcher:packageName}</code></td><td></td></tr>
           <tr><td><code>{@link #Favorite_screen com.android.launcher:screen}</code></td><td></td></tr>
           <tr><td><code>{@link #Favorite_spanX com.android.launcher:spanX}</code></td><td></td></tr>
           <tr><td><code>{@link #Favorite_spanY com.android.launcher:spanY}</code></td><td></td></tr>
           <tr><td><code>{@link #Favorite_title com.android.launcher:title}</code></td><td></td></tr>
           <tr><td><code>{@link #Favorite_uri com.android.launcher:uri}</code></td><td></td></tr>
           <tr><td><code>{@link #Favorite_x com.android.launcher:x}</code></td><td></td></tr>
           <tr><td><code>{@link #Favorite_y com.android.launcher:y}</code></td><td></td></tr>
           </table>
           @see #Favorite_className
           @see #Favorite_container
           @see #Favorite_icon
           @see #Favorite_packageName
           @see #Favorite_screen
           @see #Favorite_spanX
           @see #Favorite_spanY
           @see #Favorite_title
           @see #Favorite_uri
           @see #Favorite_x
           @see #Favorite_y
         */
        public: static const int Favorite[11];
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#className}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:className
        */
        public: static const int Favorite_className = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#container}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:container
        */
        public: static const int Favorite_container = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#icon}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:icon
        */
        public: static const int Favorite_icon = 8;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#packageName}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:packageName
        */
        public: static const int Favorite_packageName = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#screen}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:screen
        */
        public: static const int Favorite_screen = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#spanX}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:spanX
        */
        public: static const int Favorite_spanX = 6;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#spanY}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:spanY
        */
        public: static const int Favorite_spanY = 7;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#title}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:title
        */
        public: static const int Favorite_title = 9;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#uri}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:uri
        */
        public: static const int Favorite_uri = 10;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#x}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:x
        */
        public: static const int Favorite_x = 4;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#y}
          attribute's value can be found in the {@link #Favorite} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:y
        */
        public: static const int Favorite_y = 5;
        /**  HandleView specific attributes. These attributes are used to customize
         a HandleView view in XML files. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #HandleView_direction com.android.launcher:direction}</code></td><td> Orientation of the handle.</td></tr>
           </table>
           @see #HandleView_direction
         */
        public: static const int HandleView[1];
        /**
          <p>
          @attr description
           Orientation of the handle. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>vertical</code></td><td>0</td><td> Vertical widget. </td></tr>
<tr><td><code>horizontal</code></td><td>1</td><td> Horizontal widget. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:direction
        */
        public: static const int HandleView_direction = 0;
        /**  HolographicLinearLayout specific attributes. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #HolographicLinearLayout_sourceImageViewId com.android.launcher:sourceImageViewId}</code></td><td> The source view to generate and apply the drawable states to/from </td></tr>
           </table>
           @see #HolographicLinearLayout_sourceImageViewId
         */
        public: static const int HolographicLinearLayout[1];
        /**
          <p>
          @attr description
           The source view to generate and apply the drawable states to/from 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:sourceImageViewId
        */
        public: static const int HolographicLinearLayout_sourceImageViewId = 0;
        /**  Hotseat specific attributes. These attributes are used to customize
         the hotseat in XML files. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Hotseat_cellCountX com.android.launcher:cellCountX}</code></td><td> The number of horizontal cells in the CellLayout </td></tr>
           <tr><td><code>{@link #Hotseat_cellCountY com.android.launcher:cellCountY}</code></td><td> The number of vertical cells in the CellLayout </td></tr>
           </table>
           @see #Hotseat_cellCountX
           @see #Hotseat_cellCountY
         */
        public: static const int Hotseat[2];
        /**
          <p>
          @attr description
           The number of horizontal cells in the CellLayout 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:cellCountX
        */
        public: static const int Hotseat_cellCountX = 0;
        /**
          <p>
          @attr description
           The number of vertical cells in the CellLayout 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:cellCountY
        */
        public: static const int Hotseat_cellCountY = 1;
        /**  PagedView specific attributes. These attributes are used to customize
         a PagedView view in XML files. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PagedView_pageLayoutHeightGap com.android.launcher:pageLayoutHeightGap}</code></td><td></td></tr>
           <tr><td><code>{@link #PagedView_pageLayoutPaddingBottom com.android.launcher:pageLayoutPaddingBottom}</code></td><td></td></tr>
           <tr><td><code>{@link #PagedView_pageLayoutPaddingLeft com.android.launcher:pageLayoutPaddingLeft}</code></td><td></td></tr>
           <tr><td><code>{@link #PagedView_pageLayoutPaddingRight com.android.launcher:pageLayoutPaddingRight}</code></td><td></td></tr>
           <tr><td><code>{@link #PagedView_pageLayoutPaddingTop com.android.launcher:pageLayoutPaddingTop}</code></td><td> The padding of the pages that are dynamically created per page </td></tr>
           <tr><td><code>{@link #PagedView_pageLayoutWidthGap com.android.launcher:pageLayoutWidthGap}</code></td><td> A spacing override for the icons within a page </td></tr>
           <tr><td><code>{@link #PagedView_pageSpacing com.android.launcher:pageSpacing}</code></td><td> The space between adjacent pages of the PagedView.</td></tr>
           <tr><td><code>{@link #PagedView_scrollIndicatorPaddingLeft com.android.launcher:scrollIndicatorPaddingLeft}</code></td><td> The padding for the scroll indicator area </td></tr>
           <tr><td><code>{@link #PagedView_scrollIndicatorPaddingRight com.android.launcher:scrollIndicatorPaddingRight}</code></td><td></td></tr>
           </table>
           @see #PagedView_pageLayoutHeightGap
           @see #PagedView_pageLayoutPaddingBottom
           @see #PagedView_pageLayoutPaddingLeft
           @see #PagedView_pageLayoutPaddingRight
           @see #PagedView_pageLayoutPaddingTop
           @see #PagedView_pageLayoutWidthGap
           @see #PagedView_pageSpacing
           @see #PagedView_scrollIndicatorPaddingLeft
           @see #PagedView_scrollIndicatorPaddingRight
         */
        public: static const int PagedView[9];
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#pageLayoutHeightGap}
          attribute's value can be found in the {@link #PagedView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pageLayoutHeightGap
        */
        public: static const int PagedView_pageLayoutHeightGap = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#pageLayoutPaddingBottom}
          attribute's value can be found in the {@link #PagedView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pageLayoutPaddingBottom
        */
        public: static const int PagedView_pageLayoutPaddingBottom = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#pageLayoutPaddingLeft}
          attribute's value can be found in the {@link #PagedView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pageLayoutPaddingLeft
        */
        public: static const int PagedView_pageLayoutPaddingLeft = 4;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#pageLayoutPaddingRight}
          attribute's value can be found in the {@link #PagedView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pageLayoutPaddingRight
        */
        public: static const int PagedView_pageLayoutPaddingRight = 5;
        /**
          <p>
          @attr description
           The padding of the pages that are dynamically created per page 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:pageLayoutPaddingTop
        */
        public: static const int PagedView_pageLayoutPaddingTop = 2;
        /**
          <p>
          @attr description
           A spacing override for the icons within a page 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:pageLayoutWidthGap
        */
        public: static const int PagedView_pageLayoutWidthGap = 0;
        /**
          <p>
          @attr description
           The space between adjacent pages of the PagedView. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:pageSpacing
        */
        public: static const int PagedView_pageSpacing = 6;
        /**
          <p>
          @attr description
           The padding for the scroll indicator area 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:scrollIndicatorPaddingLeft
        */
        public: static const int PagedView_scrollIndicatorPaddingLeft = 7;
        /**
          <p>This symbol is the offset where the {@link com.android.launcher.R.attr#scrollIndicatorPaddingRight}
          attribute's value can be found in the {@link #PagedView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:scrollIndicatorPaddingRight
        */
        public: static const int PagedView_scrollIndicatorPaddingRight = 8;
        /**  StrokedTextView specific attributes. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #StrokedTextView_strokeColor com.android.launcher:strokeColor}</code></td><td> The color of the stroke outline </td></tr>
           <tr><td><code>{@link #StrokedTextView_strokeTextColor com.android.launcher:strokeTextColor}</code></td><td> The color of the text </td></tr>
           <tr><td><code>{@link #StrokedTextView_strokeWidth com.android.launcher:strokeWidth}</code></td><td> The width of the stroke </td></tr>
           </table>
           @see #StrokedTextView_strokeColor
           @see #StrokedTextView_strokeTextColor
           @see #StrokedTextView_strokeWidth
         */
        public: static const int StrokedTextView[3];
        /**
          <p>
          @attr description
           The color of the stroke outline 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:strokeColor
        */
        public: static const int StrokedTextView_strokeColor = 0;
        /**
          <p>
          @attr description
           The color of the text 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:strokeTextColor
        */
        public: static const int StrokedTextView_strokeTextColor = 1;
        /**
          <p>
          @attr description
           The width of the stroke 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:strokeWidth
        */
        public: static const int StrokedTextView_strokeWidth = 2;
        /**  Workspace specific attributes. These attributes are used to customize
         the workspace in XML files. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Workspace_cellCountX com.android.launcher:cellCountX}</code></td><td> The number of horizontal cells in the CellLayout </td></tr>
           <tr><td><code>{@link #Workspace_cellCountY com.android.launcher:cellCountY}</code></td><td> The number of vertical cells in the CellLayout </td></tr>
           <tr><td><code>{@link #Workspace_defaultScreen com.android.launcher:defaultScreen}</code></td><td> The first screen the workspace should display.</td></tr>
           </table>
           @see #Workspace_cellCountX
           @see #Workspace_cellCountY
           @see #Workspace_defaultScreen
         */
        public: static const int Workspace[3];
        /**
          <p>
          @attr description
           The number of horizontal cells in the CellLayout 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:cellCountX
        */
        public: static const int Workspace_cellCountX = 1;
        /**
          <p>
          @attr description
           The number of vertical cells in the CellLayout 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:cellCountY
        */
        public: static const int Workspace_cellCountY = 2;
        /**
          <p>
          @attr description
           The first screen the workspace should display. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:defaultScreen
        */
        public: static const int Workspace_defaultScreen = 0;
    };
};
};
};
};
};

#endif // __Elastos_Droid_Packages_Launcher2_R_H__
