module
{
    namespace Elastos {
    namespace Droid {
    namespace Launcher2 {

    interface IDropTargetDragObject {

    }

    interface IDropTargetDragEnforcer

    /**
     * Interface defining an object that can receive a drag.
     *
     */
    interface IDropTarget {
        const String TAG = "DropTarget";

        /**
         * Used to temporarily disable certain drop targets
         *
         * @return boolean specifying whether this drop target is currently enabled
         */
        IsDropEnabled(
            [out] Boolean* resulr);

        /**
         * Handle an object being dropped on the DropTarget
         *
         * @param source DragSource where the drag started
         * @param x X coordinate of the drop location
         * @param y Y coordinate of the drop location
         * @param xOffset Horizontal offset with the object being dragged where the original
         *          touch happened
         * @param yOffset Vertical offset with the object being dragged where the original
         *          touch happened
         * @param dragView The DragView that's being dragged around on screen.
         * @param dragInfo Data associated with the object being dragged
         *
         */
        OnDrop(
            [in] IDragObject* dragObject);

        OnDragEnter(
            [in] IDragObject* dragObject);

        OnDragOver(
            [in] IDragObject* dragObject);

        OnDragExit(
            [in] IDragObject* dragObject);

        /**
         * Handle an object being dropped as a result of flinging to delete and will be called in place
         * of onDrop().  (This is only called on objects that are set as the DragController's
         * fling-to-delete target.
         */
        OnFlingToDelete(
            [in] IDragObject* dragObject,
            [in] Int32 x,
            [in] Int32 y,
            [in] IPointF* vec);

        /**
         * Allows a DropTarget to delegate drag and drop events to another object.
         *
         * Most subclasses will should just return null from this method.
         *
         * @param source DragSource where the drag started
         * @param x X coordinate of the drop location
         * @param y Y coordinate of the drop location
         * @param xOffset Horizontal offset with the object being dragged where the original
         *          touch happened
         * @param yOffset Vertical offset with the object being dragged where the original
         *          touch happened
         * @param dragView The DragView that's being dragged around on screen.
         * @param dragInfo Data associated with the object being dragged
         *
         * @return The DropTarget to delegate to, or null to not delegate to another object.
         */
        GetDropTargetDelegate(
            [in] IDragObject* dragObject,
            [out] IDropTarget** result);

        /**
         * Check if a drop action can occur at, or near, the requested location.
         * This will be called just before onDrop.
         *
         * @param source DragSource where the drag started
         * @param x X coordinate of the drop location
         * @param y Y coordinate of the drop location
         * @param xOffset Horizontal offset with the object being dragged where the
         *            original touch happened
         * @param yOffset Vertical offset with the object being dragged where the
         *            original touch happened
         * @param dragView The DragView that's being dragged around on screen.
         * @param dragInfo Data associated with the object being dragged
         * @return True if the drop will be accepted, false otherwise.
         */
        AcceptDrop(
            [in] IDragObject* dragObject,
            [out] Boolean** result);

        // These methods are implemented in Views
        GetHitRect(
            [in] IRect* outRect);

        GetLocationInDragLayer(
            [in] ArrayOf<Int32>* loc);

        GetLeft(
            [out] Int32 left);

        GetTop(
            [out] Int32 top);
    }

    } // namespace Launcher2
    } // namespace Droid
    } // namespace Elastos
}
