
module
{
    using interface Elastos.Utility.IList;
    using interface Elastos.Utility.IArrayList;

    interface Elastos.Droid.Packages.SystemUI.Recents.IRecentsConfiguration;

    namespace Elastos {
    namespace Droid {
    namespace Packages {
    namespace SystemUI {
    namespace Recents {
    namespace Model {

    /**
     * An interface for a task filter to query whether a particular task should show in a stack.
     */
    interface ITaskFilter {

        /** Returns whether the filter accepts the specified task */
        AcceptTask(
            [in] ITask* t,
            [in] Int32 index,
            [out] Boolean* result);
    }


    interface ITaskStackCallbacks;

    /**
     * The task stack contains a list of multiple tasks.
     */
    interface ITaskStack {

        /** Sets the callbacks for this task stack */
        SetCallbacks(
            [in] ITaskStackCallbacks* cb);

        /** Adds a new task */
        AddTask(
            [in] ITask* t);

        /** Removes a task */
        RemoveTask(
            [in] ITask* t);

        /** Sets a few tasks in one go */
        SetTasks(
            [in] IList* tasks);

        /** Gets the front task */
        GetFrontMostTask(
            [out] ITask** result);

        /** Gets the tasks */
        GetTasks(
            [out] IArrayList** result);

        /** Gets the number of tasks */
        GetTaskCount(
            [out] Int32* result);

        /** Returns the index of this task in this current task stack */
        IndexOfTask(
            [in] ITask* t,
            [out] Int32* result);

        /** Finds the task with the specified task id. */
        FindTaskWithId(
            [in] Int32 taskId,
            [out] ITask** result);

        /******** Filtering ********/

        /** Filters the stack into tasks similar to the one specified */
        FilterTasks(
            [in] ITask* t);

        /** Unfilters the current stack */
        UnfilterTasks();

        /** Returns whether tasks are currently filtered */
        HasFilteredTasks(
            [out] Boolean* result);

        /******** Grouping ********/

        /** Adds a group to the set */
        AddGroup(
            [in] ITaskGrouping* group);

        RemoveGroup(
            [in] ITaskGrouping* group);

        /** Returns the group with the specified affiliation. */
        GetGroupWithAffiliation(
            [in] Int32 affiliation,
            [out] ITaskGrouping** result);

        /**
         * Temporary: This method will simulate affiliation groups by
         */
        CreateAffiliatedGroupings(
            [in] IRecentsConfiguration* config);
    }

    /** Task stack callbacks */
    interface ITaskStackCallbacks {

        /* Notifies when a task has been added to the stack */
        OnStackTaskAdded(
            [in] ITaskStack* stack,
            [in] ITask* t);

        /* Notifies when a task has been removed from the stack */
        OnStackTaskRemoved(
            [in] ITaskStack* stack,
            [in] ITask* removedTask,
            [in] ITask* newFrontMostTask);

        /** Notifies when the stack was filtered */
        OnStackFiltered(
            [in] ITaskStack* newStack,
            [in] IArrayList* curTasks,
            [in] ITask* t);

        /** Notifies when the stack was un-filtered */
        OnStackUnfiltered(
            [in] ITaskStack* newStack,
            [in] IArrayList* curTasks);
    }

    } // namespace Model
    } // namespace Recents
    } // namespace SystemUI
    } // namespace Packages
    } // namespace Droid
    } // namespace Elastos
}
