
module
{
    using interface Elastos.Utility.IList;

    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.Res.IResources;
    interface Elastos.Droid.Graphics.Drawable.IDrawable;
    interface Elastos.Droid.App.IActivityManagerTaskDescription;

    interface Elastos.Droid.SystemUI.Recent.ITaskDescription;
    interface Elastos.Droid.SystemUI.Recents.IRecentsConfiguration;
    interface Elastos.Droid.SystemUI.Recents.Misc.ISystemServicesProxy;
    interface Elastos.Droid.SystemUI.Recents.Model.ITaskKey;

    namespace Elastos {
    namespace Droid {
    namespace SystemUI {
    namespace Recents {
    namespace Model {

    /** Handle to an ActivityInfo */
    interface IActivityInfoHandle {
    }

    /* Recents task loader
     * NOTE: We should not hold any references to a Context from a static instance */
    [local]
    interface IRecentsTaskLoader {

        /** Returns the system services proxy */
        GetSystemServicesProxy(
            [out] ISystemServicesProxy** result);

        /** Returns the activity icon using as many cached values as we can. */
        GetAndUpdateActivityIcon(
            [in] ITaskKey* taskKey,
            [in] ITaskDescription* td,
            [in] ISystemServicesProxy* ssp,
            [in] IResources* res,
            [in] IActivityInfoHandle* infoHandle,
            [in] Boolean preloadTask,
            [out] IDrawable** result);

        /** Returns the activity label using as many cached values as we can. */
        GetAndUpdateActivityLabel(
            [in] ITaskKey* taskKey,
            [in] IActivityManagerTaskDescription* td,
            [in] ISystemServicesProxy* ssp,
            [in] IActivityInfoHandle* infoHandle,
            [out] String* result);

        /** Returns the activity's primary color. */
        GetActivityPrimaryColor(
            [in] IActivityManagerTaskDescription* td,
            [in] IRecentsConfiguration* config,
            [out] Int32* result);

        /** Reload the set of recent tasks */
        Reload(
            [in] IContext* context,
            [in] Int32 preloadCount,
            [in] Boolean isTopTaskHome,
            [out] ISpaceNode** result);

        /** Creates a lightweight stack of the current recent tasks, without thumbnails and icons. */
        GetTaskStack(
            [in] ISystemServicesProxy* ssp,
            [in] IResources* res,
            [in] Int32 preloadTaskId,
            [in] Int32 preloadTaskCount,
            [in] Boolean loadTaskThumbnails,
            [in] Boolean isTopTaskHome,
            [in] IList* taskKeysOut,
            [in] IList* tasksToLoadOut,
            [out] ITaskStack** result);

        /** Acquires the task resource data directly from the pool. */
        LoadTaskData(
            [in] ITask* t);

        /** Releases the task resource data back into the pool. */
        UnloadTaskData(
            [in] ITask* t);

        /** Completely removes the resource data from the pool. */
        DeleteTaskData(
            [in] ITask* t,
            [in] Boolean notifyTaskDataUnloaded);

        /** Stops the task loader and clears all pending tasks */
        StopLoader();

        /** Registers any broadcast receivers. */
        RegisterReceivers(
            [in] IContext* context,
            [in] IPackageCallbacks* cb);

        /** Unregisters any broadcast receivers. */
        UnregisterReceivers();

        /**
         * Handles signals from the system, trimming memory when requested to prevent us from running
         * out of memory.
         */
        OnTrimMemory(
            [in] Int32 level);
    }

    [local]
    interface IRecentsTaskLoaderHelper {

        /** Initializes the recents task loader */
        Initialize(
            [in] IContext* context,
            [out] IRecentsTaskLoader** result);

        /** Returns the current recents task loader */
        GetInstance(
            [out] IRecentsTaskLoader** result);
    }

    } // namespace Model
    } // namespace Recents
    } // namespace SystemUI
    } // namespace Droid
    } // namespace Elastos
}
