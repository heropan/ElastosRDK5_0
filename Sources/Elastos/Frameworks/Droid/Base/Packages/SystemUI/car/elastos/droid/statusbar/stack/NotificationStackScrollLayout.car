
module
{
    using interface Elastos.Core.IRunnable;

    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IViewGroup;
    interface Elastos.Droid.View.IMotionEvent;

    interface Elastos.Droid.SystemUI.ISwipeHelperLongPressListener;
    interface Elastos.Droid.SystemUI.StatusBar.IActivatableNotificationView;
    interface Elastos.Droid.SystemUI.StatusBar.IDismissView;
    interface Elastos.Droid.SystemUI.StatusBar.IEmptyShadeView;
    interface Elastos.Droid.SystemUI.StatusBar.IExpandableView;
    interface Elastos.Droid.SystemUI.StatusBar.IExpandableViewOnHeightChangedListener;
    interface Elastos.Droid.SystemUI.StatusBar.ISpeedBumpView;
    interface Elastos.Droid.SystemUI.StatusBar.Phone.IPhoneStatusBar;

    namespace Elastos {
    namespace Droid {
    namespace SystemUI {
    namespace StatusBar {
    namespace Stack {

    interface INotificationStackScrollLayout;

    interface IOnChildLocationsChangedListener {
        OnChildLocationsChanged(
            [in] INotificationStackScrollLayout* stackScrollLayout);
    }

    interface IOnOverscrollTopChangedListener {

        /**
         * Notifies a listener that the overscroll has changed.
         *
         * @param amount the amount of overscroll, in pixels
         * @param isRubberbanded if true, this is a rubberbanded overscroll; if false, this is an
         *                     unrubberbanded motion to directly expand overscroll view (e.g expand
         *                     QS)
         */
        OnOverscrollTopChanged(
            [in] Float amount,
            [in] Boolean isRubberbanded);

        /**
         * Notify a listener that the scroller wants to escape from the scrolling motion and
         * start a fling animation to the expanded or collapsed overscroll view (e.g expand the QS)
         *
         * @param velocity The velocity that the Scroller had when over flinging
         * @param open Should the fling open or close the overscroll view.
         */
        FlingTopOverscroll(
            [in] Float velocity,
            [in] Boolean open);
    }

    /**
     * A layout which handles a dynamic amount of notifications and presents them in a scrollable stack.
     */
    /**
     * @Involve
     * interface IViewGroup
     * interface ISwipeHelperCallback,
     * interface IExpandHelperCallback
     * interface IScrollAdapter
     * interface IExpandableViewOnHeightChangedListener
     */
    [local]
    interface INotificationStackScrollLayout {
        UpdateSpeedBumpIndex(
            [in] Int32 newIndex);

        SetChildLocationsChangedListener(
            [in] IOnChildLocationsChangedListener* listener);

        /**
         * Returns the location the given child is currently rendered at.
         *
         * @param child the child to get the location for
         * @return one of {@link ViewState}'s <code>LOCATION_*</code> constants
         */
        GetChildLocation(
            [in] IView* child,
            [out] Int32* result);

        GetTopPadding(
            [out] Int32* result);

        /**
         * Update the height of the stack to a new height.
         *
         * @param height the new height of the stack
         */
        SetStackHeight(
            [in] Float height);

        GetItemHeight(
            [out] Int32* result);

        GetBottomStackPeekSize(
            [out] Int32* result);

        GetCollapseSecondCardPadding(
            [out] Int32* result);

        SetLongPressListener(
            [in] ISwipeHelperLongPressListener* listener);

        SetScrollView(
            [in] IViewGroup* scrollView);

        SetInterceptDelegateEnabled(
            [in] Boolean interceptDelegateEnabled);

        OnChildDismissed(
            [in] IView* v);

        OnBeginDrag(
            [in] IView* v);

        OnDragCancelled(
            [in] IView* v);

        GetChildAtPosition(
            [in] IMotionEvent* ev,
            [out] IView** view);

        GetChildAtRawPosition(
            [in] Float touchX,
            [in] Float touchY,
            [out] IExpandableView** view);

        GetChildAtPosition(
            [in] Float touchX,
            [in] Float touchY,
            [out] IExpandableView** view);

        CanChildBeExpanded(
            [in] IView* v,
            [out] Boolean* result);

        SetUserExpandedChild(
            [in] IView* v,
            [in] Boolean userExpanded);

        SetUserLockedChild(
            [in] IView* v,
            [in] Boolean userLocked);

        SetScrollingEnabled(
            [in] Boolean value);

        SetExpandingEnabled(
            [in] Boolean value);

        GetChildContentView(
            [in] IView* v,
            [out] IView** view);

        CanChildBeDismissed(
            [in] IView* v,
            [out] Boolean* result);

        DismissViewAnimated(
            [in] IView* child,
            [in] IRunnable* endRunnable,
            [in] Int32 delay,
            [in] Int64 duration);

        /**
         * Set the amount of overScrolled pixels which will force the view to apply a rubber-banded
         * overscroll effect based on numPixels. By default this will also cancel animations on the
         * same overScroll edge.
         *
         * @param numPixels The amount of pixels to overScroll by. These will be scaled according to
         *                  the rubber-banding logic.
         * @param onTop Should the effect be applied on top of the scroller.
         * @param animate Should an animation be performed.
         */
        SetOverScrolledPixels(
            [in] Float numPixels,
            [in] Boolean onTop,
            [in] Boolean animate);

        /**
         * Set the effective overScroll amount which will be directly reflected in the layout.
         * By default this will also cancel animations on the same overScroll edge.
         *
         * @param amount The amount to overScroll by.
         * @param onTop Should the effect be applied on top of the scroller.
         * @param animate Should an animation be performed.
         */
        SetOverScrollAmount(
            [in] Float amount,
            [in] Boolean onTop,
            [in] Boolean animate);

        /**
         * Set the effective overScroll amount which will be directly reflected in the layout.
         *
         * @param amount The amount to overScroll by.
         * @param onTop Should the effect be applied on top of the scroller.
         * @param animate Should an animation be performed.
         * @param cancelAnimators Should running animations be cancelled.
         */
        SetOverScrollAmount(
            [in] Float amount,
            [in] Boolean onTop,
            [in] Boolean animate,
            [in] Boolean cancelAnimators);

        /**
         * Set the effective overScroll amount which will be directly reflected in the layout.
         *
         * @param amount The amount to overScroll by.
         * @param onTop Should the effect be applied on top of the scroller.
         * @param animate Should an animation be performed.
         * @param cancelAnimators Should running animations be cancelled.
         * @param isRubberbanded The value which will be passed to
         *                     {@link OnOverscrollTopChangedListener#onOverscrollTopChanged}
         */
        SetOverScrollAmount(
            [in] Float amount,
            [in] Boolean onTop,
            [in] Boolean animate,
            [in] Boolean cancelAnimators,
            [in] Boolean isRubberbanded);

        SetOverscrollTopChangedListener(
            [in] IOnOverscrollTopChangedListener* overscrollTopChangedListener);

        GetCurrentOverScrollAmount(
            [in] Boolean top,
            [out] Float* result);

        GetCurrentOverScrolledPixels(
            [in] Boolean top,
            [out] Float* result);

        /**
         * @return the last child which has visibility unequal to GONE
         */
        GetLastChildNotGone(
            [out] IView** view);

        /**
         * @return the number of children which have visibility unequal to GONE
         */
        GetNotGoneChildCount(
            [out] Int32* result);

        GetContentHeight(
            [out] Int32* result);

        UpdateTopPadding(
            [in] Float qsHeight,
            [in] Int32 scrollY,
            [in] Boolean animate);

        GetNotificationTopPadding(
            [out] Int32* result);

        GetMinStackHeight(
            [out] Int32* result);

        GetTopPaddingOverflow(
            [out] Float* result);

        GetPeekHeight(
            [out] Int32* result);

        SetAnimationsEnabled(
            [in] Boolean animationsEnabled);

        IsAddOrRemoveAnimationPending(
            [out] Boolean* result);

        /**
         * Generate an animation for an added child view.
         *
         * @param child The view to be added.
         * @param fromMoreCard Whether this add is coming from the "more" card on lockscreen.
         */
        GenerateAddAnimation(
            [in] IView* child,
            [in] Boolean fromMoreCard);

        /**
         * Change the position of child to a new location
         *
         * @param child the view to change the position for
         * @param newIndex the new index
         */
        ChangeViewPosition(
            [in] IView* child,
            [in] Int32 newIndex);

        GetEmptyBottomMargin(
            [out] Int32* result);

        OnExpansionStarted();

        OnExpansionStopped();

        SetOnHeightChangedListener(
            [in] IExpandableViewOnHeightChangedListener* mOnHeightChangedListener);

        OnChildAnimationFinished();

        /**
         * See {@link AmbientState#setDimmed}.
         */
        SetDimmed(
            [in] Boolean dimmed,
            [in] Boolean animate);

        SetHideSensitive(
            [in] Boolean hideSensitive,
            [in] Boolean animate);

        /**
         * See {@link AmbientState#setActivatedChild}.
         */
        SetActivatedChild(
            [in] IActivatableNotificationView* activatedChild);

        GetActivatedChild(
            [out] IActivatableNotificationView** view);

        SetSpeedBumpView(
            [in] ISpeedBumpView* speedBumpView);

        GoToFullShade(
            [in] Int64 delay);

        CancelExpandHelper();

        SetIntrinsicPadding(
            [in] Int32 intrinsicPadding);

        GetIntrinsicPadding(
            [out] Int32* padding);

        /**
         * @return the y position of the first notification
         */
        GetNotificationsTopY(
            [out] Float* y);

        /**
         * See {@link AmbientState#setDark}.
         */
        SetDark(
            [in] Boolean dark,
            [in] Boolean animate);

        SetDismissView(
            [in] IDismissView* dismissView);

        SetEmptyShadeView(
            [in] IEmptyShadeView* emptyShadeView);

        UpdateEmptyShadeView(
            [in] Boolean visible);

        UpdateDismissView(
            [in] Boolean visible);

        SetDismissAllInProgress(
            [in] Boolean dismissAllInProgress);

        IsDismissViewNotGone(
            [out] Boolean* gone);

        IsDismissViewVisible(
            [out] Boolean* visible);

        GetDismissViewHeight(
            [out] Int32* result);

        GetBottomMostNotificationBottom(
            [out] Float* result);

        /**
         * @param qsMinHeight The minimum height of the quick settings including padding
         *                    See {@link StackScrollAlgorithm#updateIsSmallScreen}.
         */
        UpdateIsSmallScreen(
            [in] Int32 qsMinHeight);

        SetPhoneStatusBar(
            [in] IPhoneStatusBar* phoneStatusBar);

        OnGoToKeyguard();

        RemoveLongPressCallback();
    }

    } // namespace Stack
    } // namespace StatusBar
    } // namespace SystemUI
    } // namespace Droid
    } // namespace Elastos
}
