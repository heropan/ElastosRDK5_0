module
{
    interface Elastos.Droid.Animation.IAnimator;
    interface Elastos.Droid.View.IViewPropertyAnimator;

    namespace Elastos {
    namespace Droid {
    namespace SystemUI {
    namespace StatusBar {

    /**
     * Utility class to calculate general fling animation when the finger is released.
     */
    interface IFlingAnimationUtils {
        /**
         * Applies the interpolator and length to the animator, such that the fling animation is
         * consistent with the finger motion.
         *
         * @param animator the animator to apply
         * @param currValue the current value
         * @param endValue the end value of the animator
         * @param velocity the current velocity of the motion
         */
        Apply(
            [in] IAnimator* animator,
            [in] Float currValue,
            [in] Float endValue,
            [in] Float velocity);

        /**
         * Applies the interpolator and length to the animator, such that the fling animation is
         * consistent with the finger motion.
         *
         * @param animator the animator to apply
         * @param currValue the current value
         * @param endValue the end value of the animator
         * @param velocity the current velocity of the motion
         */
        Apply(
            [in] IViewPropertyAnimator* animator,
            [in] Float currValue,
            [in] Float endValue,
            [in] Float velocity);

        /**
         * Applies the interpolator and length to the animator, such that the fling animation is
         * consistent with the finger motion.
         *
         * @param animator the animator to apply
         * @param currValue the current value
         * @param endValue the end value of the animator
         * @param velocity the current velocity of the motion
         * @param maxDistance the maximum distance for this interaction; the maximum animation length
         *                    gets multiplied by the ratio between the actual distance and this value
         */
        Apply(
            [in] IAnimator* animator,
            [in] Float currValue,
            [in] Float endValue,
            [in] Float velocity,
            [in] Float maxDistance);

        /**
         * Applies the interpolator and length to the animator, such that the fling animation is
         * consistent with the finger motion.
         *
         * @param animator the animator to apply
         * @param currValue the current value
         * @param endValue the end value of the animator
         * @param velocity the current velocity of the motion
         * @param maxDistance the maximum distance for this interaction; the maximum animation length
         *                    gets multiplied by the ratio between the actual distance and this value
         */
        Apply(
            [in] IViewPropertyAnimator* animator,
            [in] Float currValue,
            [in] Float endValue,
            [in] Float velocity,
            [in] Float maxDistance);

        /**
         * Applies the interpolator and length to the animator, such that the fling animation is
         * consistent with the finger motion for the case when the animation is making something
         * disappear.
         *
         * @param animator the animator to apply
         * @param currValue the current value
         * @param endValue the end value of the animator
         * @param velocity the current velocity of the motion
         * @param maxDistance the maximum distance for this interaction; the maximum animation length
         *                    gets multiplied by the ratio between the actual distance and this value
         */
        ApplyDismissing(
            [in] IAnimator* animator,
            [in] Float currValue,
            [in] Float endValue,
            [in] Float velocity,
            [in] Float maxDistance);

        /**
         * Applies the interpolator and length to the animator, such that the fling animation is
         * consistent with the finger motion for the case when the animation is making something
         * disappear.
         *
         * @param animator the animator to apply
         * @param currValue the current value
         * @param endValue the end value of the animator
         * @param velocity the current velocity of the motion
         * @param maxDistance the maximum distance for this interaction; the maximum animation length
         *                    gets multiplied by the ratio between the actual distance and this value
         */
        ApplyDismissing(
            [in] IViewPropertyAnimator* animator,
            [in] Float currValue,
            [in] Float endValue,
            [in] Float velocity,
            [in] Float maxDistance);

        /**
         * @return the minimum velocity a gesture needs to have to be considered a fling
         */
        GetMinVelocityPxPerSecond(
            [out] Float* f);
    }

    } // namespace StatusBar
    } // namespace SystemUI
    } // namespace Droid
    } // namespace Elastos
}
