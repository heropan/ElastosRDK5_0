
module
{
    using interface Elastos.Utility.IArrayList;

    interface Elastos.Droid.Graphics.IRect;
    interface Elastos.Droid.Packages.SystemUI.Recents.Model.ITask;

    namespace Elastos {
    namespace Droid {
    namespace Packages {
    namespace SystemUI {
    namespace Recents {
    namespace Views {

    /* The layout logic for a TaskStackView.
     *
     * We are using a curve that defines the curve of the tasks as that go back in the recents list.
     * The curve is defined such that at curve progress p = 0 is the end of the curve (the top of the
     * stack rect), and p = 1 at the start of the curve and the bottom of the stack rect.
     */
    [local]
    interface ITaskStackViewLayoutAlgorithm {

        /** Computes the stack and task rects */
        ComputeRects(
            [in] Int32 windowWidth,
            [in] Int32 windowHeight,
            [in] IRect* taskStackBounds);

        /** Computes the minimum and maximum scroll progress values.  This method may be called before
         * the RecentsConfiguration is set, so we need to pass in the alt-tab state. */
        ComputeMinMaxScroll(
            [in] IArrayList* tasks,
            [in] Boolean launchedWithAltTab,
            [in] Boolean launchedFromHome);

        /** Update/get the transform */
        GetStackTransform(
            [in] ITask* task,
            [in] Float stackScroll,
            [in] ITaskViewTransform* transformOut,
            [in] ITaskViewTransform* prevTransform,
            [out] ITaskViewTransform** result);

        /** Update/get the transform */
        GetStackTransform(
            [in] Float taskProgress,
            [in] Float stackScroll,
            [in] ITaskViewTransform* transformOut,
            [in] ITaskViewTransform* prevTransform,
            [out] ITaskViewTransform** result);

        /**
         * Returns the untransformed task view size.
         */
        GetUntransformedTaskViewSize(
            [out] IRect** result);

        /**
         * Returns the scroll to such task top = 1f;
         */
        GetStackScrollForTask(
            [in] ITask* t,
            [out] Float* result);

        /** The inverse of the log function describing the curve. */
        InvLogFunc(
            [in] Float y,
            [out] Float* result);

        /** Converts from the progress along the curve to a screen coordinate. */
        CurveProgressToScreenY(
            [in] Float p,
            [out] Int32* result);

        /** Converts from the progress along the curve to a scale. */
        CurveProgressToScale(
            [in] Float p,
            [out] Float* result);

        /** Converts from a screen coordinate to the progress along the curve. */
        ScreenYToCurveProgress(
            [in] Int32 screenY,
            [out] Float* result);
    }

    interface ITaskStackViewLayoutAlgorithmHelper {

        /** Initializes the curve. */
        InitializeCurve();

        /** Reverses and scales out x. */
        Reverse(
            [in] Float x,
            [out] Float* result);

        /** The log function describing the curve. */
        LogFunc(
            [in] Float x,
            [out] Float* result);
    }

    } // namespace Views
    } // namespace Recents
    } // namespace SystemUI
    } // namespace Packages
    } // namespace Droid
    } // namespace Elastos
}
