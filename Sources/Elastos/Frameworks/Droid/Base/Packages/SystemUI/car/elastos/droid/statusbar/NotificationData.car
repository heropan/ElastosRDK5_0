module
{
    using interface Elastos.Droid.Service.Notification.IStatusBarNotification;
    using interface Elastos.Droid.Service.Notification.INotificationListenerServiceRankingMap;
    using interface Elastos.Droid.View.IView;
    using interface Elastos.Utility.IArrayList;

    namespace Elastos {
    namespace Droid {
    namespace Packages {
    namespace SystemUI {
    namespace StatusBar {

    interface IStatusBarIconView;

    /**
     * Provides access to keyguard state and user settings dependent data.
     */
    interface INotificationEnvironment {
        ShouldHideSensitiveContents(
            [in] Int32 userid,
            [out] Boolean* result);

        IsDeviceProvisioned(
            [out] Boolean* result);

        IsNotificationForCurrentProfiles(
            [in] IStatusBarNotification* sbn,
            [out] Boolean* result);

        GetCurrentMediaNotificationKey(
            [out] String* result);
    }

    [local]
    interface INotificationDataEntry {
        SetKey(
            [in] String key);

        GetKey(
            [out] String* key);

        SetNotification(
            [in] IStatusBarNotification* sbn);

        GetNotification(
            [out] IStatusBarNotification** sbn);

        SetIcon(
            [in] IStatusBarIconView* view);

        GetIcon(
            [out] IStatusBarIconView** view);

        SetRow(
            [in] IExpandableNotificationRow* row); // the outer expanded view

        GetRow(
            [out] IExpandableNotificationRow** row);

        SetExpanded(
            [in] IView* view); // the inflated RemoteViews

        GetExpanded(
            [out] IView** view);

        SetExpandedPublic(
            [in] IView* view); // for insecure lockscreens

        GetExpandedPublic(
            [out] IView** view);

        SetExpandedBig(
            [in] IView* big);

        GetExpandedBig(
            [out] IView** big);

        SetAutoRedacted(
            [in] Boolean value); // whether the redacted notification was generated by us

        GetAutoRedacted(
            [out] Boolean* value);

        SetLegacy(
            [in] Boolean value); // whether the notification has a legacy, dark background

        GetLegacy(
            [out] Boolean* result);

        SetTargetSdk(
            [in] Int32 sdk);

        GetTargetSdk(
            [out] Int32* sdk);

        SetBigContentView(
            [in] IView* bigContentView);

        GetBigContentView(
            [out] IView** view);

        GetPublicContentView(
            [out] IView** view);

        SetInterruption();

        HasInterrupted(
            [out] Boolean* result);

        /**
         * Resets the notification entry to be re-used.
         */
        Reset();
    }

    /**
     * The list of currently displaying notifications.
     */
    [local]
    interface INotificationData {

        /**
         * Returns the sorted list of active notifications (depending on {@link Environment}
         *
         * <p>
         * This call doesn't update the list of active notifications. Call {@link #filterAndSort()}
         * when the environment changes.
         * <p>
         * Don't hold on to or modify the returned list.
         */
        GetActiveNotifications(
            [out] IArrayList** list);

        Get(
            [in] String key,
            [out] INotificationDataEntry** entry);

        Add(
            [in] INotificationDataEntry* entry,
            [in] INotificationListenerServiceRankingMap* ranking);

        Remove(
            [in] String key,
            [in] INotificationListenerServiceRankingMap* ranking,
            [out] INotificationDataEntry** entry);

        UpdateRanking(
            [in] INotificationListenerServiceRankingMap* ranking);

        IsAmbient(
            [in] String key,
            [out] Boolean* result);

        GetVisibilityOverride(
            [in] String key,
            [out] Int32* result);

        // TODO: This should not be public. Instead the Environment should notify this class when
        // anything changed, and this class should call back the UI so it updates itself.
        FilterAndSort();

        IsGroupWithSummary(
            [in] String groupKey,
            [out] Boolean* result);

        /**
         * Return whether there are any clearable notifications (that aren't errors).
         */
        HasActiveClearableNotifications(
            [out] Boolean* result);
    }

    interface INotificationDataHelper {
        // Q: What kinds of notifications should show during setup?
        // A: Almost none! Only things coming from the system (package is "android") that also
        // have special "kind" tags marking them as relevant for setup (see below).
        ShowNotificationEvenIfUnprovisioned(
            [in] IStatusBarNotification* sbn,
            [out] Boolean* result);
    }

    } // namespace StatusBar
    } // namespace SystemUI
    } // namespace Packages
    } // namespace Droid
    } // namespace Elastos
}
