/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

#ifndef __Elastos_Droid_Settings_R_H__
#define __Elastos_Droid_Settings_R_H__
#include <elatypes.h>
namespace Elastos {
namespace Droid {
namespace Settings {
class ECO_PUBLIC R {
    public: class array {
        /**  Titles for animator duration scale preference. [CHAR LIMIT=35] 
 no translation found for hdcp_checking_titles:0 (441827799230089869) 
 no translation found for hdcp_checking_titles:1 (6042769699089883931) 
 no translation found for hdcp_checking_titles:2 (9174900380056846820) 
 no translation found for hdcp_checking_summaries:0 (505558545611516707) 
 no translation found for hdcp_checking_summaries:1 (3878793616631049349) 
 no translation found for hdcp_checking_summaries:2 (45075631231212732) 
 no translation found for window_animation_scale_entries:0 (8134156599370824081) 
 no translation found for window_animation_scale_entries:1 (6624864048416710414) 
 no translation found for window_animation_scale_entries:2 (2219332261255416635) 
 no translation found for window_animation_scale_entries:3 (3544428804137048509) 
 no translation found for window_animation_scale_entries:4 (3110710404225974514) 
 no translation found for window_animation_scale_entries:5 (4402738611528318731) 
 no translation found for window_animation_scale_entries:6 (6189539267968330656) 
 no translation found for transition_animation_scale_entries:0 (8464255836173039442) 
 no translation found for transition_animation_scale_entries:1 (3375781541913316411) 
 no translation found for transition_animation_scale_entries:2 (1991041427801869945) 
 no translation found for transition_animation_scale_entries:3 (4012689927622382874) 
 no translation found for transition_animation_scale_entries:4 (3289156759925947169) 
 no translation found for transition_animation_scale_entries:5 (7705857441213621835) 
 no translation found for transition_animation_scale_entries:6 (6660750935954853365) 
         */
        public: static const int animator_duration_scale_entries = 0x7f07004d;
        /**  Values for animator duration scale preference. 
         */
        public: static const int animator_duration_scale_values = 0x7f07004e;
        /**  Authentication Types used in APN editor 
         */
        public: static const int apn_auth_entries = 0x7f070027;
        public: static const int apn_auth_values = 0x7f070028;
        /**  Authentication Types used in APN editor 
         */
        public: static const int apn_protocol_entries = 0x7f070029;
        public: static const int apn_protocol_values = 0x7f07002a;
        /**  Apps on SD installation location options in ApplicationSettings 
         */
        public: static const int app_install_location_entries = 0x7f07002f;
        /**  Do not translate. 
         */
        public: static const int app_install_location_values = 0x7f070030;
        /**  Names of categories of app ops tabs 
 no translation found for app_install_location_entries:0 (8151497958991952759) 
 no translation found for app_install_location_entries:1 (3738430123799803530) 
 no translation found for app_install_location_entries:2 (4498124044785815005) 
         */
        public: static const int app_ops_categories = 0x7f070031;
        /**  User display names for app ops codes 
         */
        public: static const int app_ops_labels = 0x7f070033;
        /**  User display names for app ops codes 
         */
        public: static const int app_ops_summaries = 0x7f070032;
        /**  Titles for app process limit preference. [CHAR LIMIT=35] 
         */
        public: static const int app_process_limit_entries = 0x7f070059;
        /**  Values for app process limit preference. 
         */
        public: static const int app_process_limit_values = 0x7f07005a;
        /**  Battery saver mode: allowable trigger threshold levels. 
         */
        public: static const int battery_saver_trigger_values = 0x7f070068;
        /**  Bearer Info used in APN editor 
 no translation found for wifi_phase2_entries:0 (1818786254010764570) 
 no translation found for wifi_phase2_entries:1 (6189918678874123056) 
 no translation found for wifi_phase2_entries:2 (1524112260493662517) 
 no translation found for wifi_phase2_entries:3 (5923246669412752932) 
 no translation found for wifi_phase2_entries:4 (8651992560135239389) 
 no translation found for wifi_ip_settings:0 (3906714200993111074) 
 no translation found for wifi_ip_settings:1 (628395202971532382) 
 no translation found for wifi_proxy_settings:0 (4473276491748503377) 
 no translation found for wifi_proxy_settings:1 (8673874894887358090) 
 no translation found for apn_auth_entries:0 (3856896061242872146) 
 no translation found for apn_auth_entries:1 (5756844015743664882) 
 no translation found for apn_auth_entries:2 (535934025797984365) 
 no translation found for apn_auth_entries:3 (8383098660619805783) 
 no translation found for apn_protocol_entries:0 (4852355456199302715) 
 no translation found for apn_protocol_entries:1 (4394161344888484571) 
 no translation found for apn_protocol_entries:2 (8084938354605535381) 
         */
        public: static const int bearer_entries = 0x7f07002b;
        public: static const int bearer_values = 0x7f07002c;
        /**  Bluetooth Settings 
 Discoverable mode timeout options 
         */
        public: static const int bluetooth_visibility_timeout_entries = 0x7f070018;
        /**  Titles for captioning color preference. 
         */
        public: static const int captioning_color_selector_titles = 0x7f07003c;
        /**  Values for captioning color preference. 
         */
        public: static const int captioning_color_selector_values = 0x7f07003d;
        /**  Titles for captioning character edge type preference. [CHAR LIMIT=35] 
         */
        public: static const int captioning_edge_type_selector_titles = 0x7f07003a;
        /**  Values for captioning character edge type preference. 
         */
        public: static const int captioning_edge_type_selector_values = 0x7f07003b;
        /**  Titles for captioning font size preference. [CHAR LIMIT=35] 
         */
        public: static const int captioning_font_size_selector_titles = 0x7f070038;
        /**  Values for captioning font size preference. 
         */
        public: static const int captioning_font_size_selector_values = 0x7f070039;
        /**  Titles for captioning opacity preference. [CHAR LIMIT=35] 
         */
        public: static const int captioning_opacity_selector_titles = 0x7f07003e;
        /**  Values for captioning opacity preference. 
         */
        public: static const int captioning_opacity_selector_values = 0x7f07003f;
        /**  Titles for captioning text style preset preference. [CHAR LIMIT=35] 
         */
        public: static const int captioning_preset_selector_titles = 0x7f070040;
        /**  Values for captioning text style preset preference. 
         */
        public: static const int captioning_preset_selector_values = 0x7f070041;
        /**  Titles for captioning typeface preference. [CHAR LIMIT=35] 
 no translation found for long_press_timeout_selector_titles:0 (3511504869290423954) 
 no translation found for long_press_timeout_selector_titles:1 (2560532955514699713) 
 no translation found for long_press_timeout_selector_titles:2 (2372711992605524591) 
         */
        public: static const int captioning_typeface_selector_titles = 0x7f070036;
        /**  Values for captioning typeface preference. 
         */
        public: static const int captioning_typeface_selector_values = 0x7f070037;
        /**  Display color space adjustment modes for accessibility 
         */
        public: static const int daltonizer_type_entries = 0x7f070062;
        /**  Values for display color space adjustment modes for accessibility 
         */
        public: static const int daltonizer_type_values = 0x7f070063;
        /**  Data Usage settings. Range of data usage. 
         */
        public: static const int data_usage_data_range = 0x7f07001d;
        /**  There is a setting to control the format of dates displayed throughout the system.  This is in the Date & Time Settings screen.  These will be adjusted to use punctuation appropriate to the user's locale. 
         */
        public: static const int date_format_values = 0x7f070001;
        /**  Titles for debug overdraw preference. [CHAR LIMIT=50] 
         */
        public: static const int debug_hw_overdraw_entries = 0x7f070057;
        /**  Values for debug overdraw preference. 
         */
        public: static const int debug_hw_overdraw_values = 0x7f070058;
        /**  Display settings.  The delay in inactivity before the dream is shown. These are shown in a list dialog. 
         */
        public: static const int dream_timeout_entries = 0x7f070004;
        /**  Do not translate. 
         */
        public: static const int dream_timeout_values = 0x7f070005;
        public: static const int emergency_tone_entries = 0x7f07006b;
        /**  Titles for OpenGL traces preference. [CHAR LIMIT=35] 
         */
        public: static const int enable_opengl_traces_entries = 0x7f070051;
        /**  Values for OpenGL traces preference. 
         */
        public: static const int enable_opengl_traces_values = 0x7f070052;
        /**  no translation found for timezone_filters:0 (5296756001147094692) 
 no translation found for timezone_filters:1 (3005562397632768392) 
 no translation found for timezone_filters:2 (5696915123093701218) 
 no translation found for timezone_filters:3 (4439789052790868249) 
 no translation found for timezone_filters:4 (956915953069815961) 
 no translation found for timezone_filters:5 (5345178126174698955) 
 no translation found for timezone_filters:6 (8392017019801393511) 
 no translation found for screen_timeout_entries:0 (3342301044271143016) 
 no translation found for screen_timeout_entries:1 (8881760709354815449) 
 no translation found for screen_timeout_entries:2 (7589406073232279088) 
 no translation found for screen_timeout_entries:3 (7001195990902244174) 
 no translation found for screen_timeout_entries:4 (7489864775127957179) 
 no translation found for screen_timeout_entries:5 (2314124409517439288) 
 no translation found for screen_timeout_entries:6 (6864027152847611413) 
 no translation found for dream_timeout_entries:0 (3149294732238283185) 
 no translation found for dream_timeout_entries:1 (2194151041885903260) 
 no translation found for dream_timeout_entries:2 (5892295237131074341) 
 no translation found for dream_timeout_entries:3 (3538441365970038213) 
 no translation found for dream_timeout_entries:4 (412343871668955639) 
 no translation found for dream_timeout_entries:5 (5076853889688991690) 
 no translation found for dream_timeout_entries:6 (1903860996174927898) 
 no translation found for dream_timeout_entries:7 (6415509612413178727) 
 no translation found for lock_after_timeout_entries:1 (6736512735606834431) 
 no translation found for lock_after_timeout_entries:2 (8044619388267891375) 
 no translation found for lock_after_timeout_entries:3 (1822002388249545488) 
 no translation found for lock_after_timeout_entries:4 (8538071621211916519) 
 no translation found for lock_after_timeout_entries:5 (5663439580228932882) 
 no translation found for lock_after_timeout_entries:6 (49888496216106852) 
 no translation found for lock_after_timeout_entries:7 (9002737361305019353) 
 no translation found for lock_after_timeout_entries:8 (4322676235684793329) 
         */
        public: static const int entries_font_size = 0x7f070008;
        /**  Setting display values for zen mode 
         */
        public: static const int entries_zen_mode = 0x7f070066;
        public: static const int entryvalues_font_size = 0x7f070009;
        /**  Setting values for zen mode, must match the Settings.Global.ZEN_MODE_ constants 
         */
        public: static const int entryvalues_zen_mode = 0x7f070067;
        /**  Summaries for HDCP checking preference. [CHAR LIMIT=100]
         */
        public: static const int hdcp_checking_summaries = 0x7f070048;
        /**  Titles for HDCP checking preference. [CHAR LIMIT=35] 
         */
        public: static const int hdcp_checking_titles = 0x7f070046;
        /**  Values for HDCP checking preference. 
         */
        public: static const int hdcp_checking_values = 0x7f070047;
        public: static const int input_method_selector_titles = 0x7f07006e;
        public: static const int input_method_selector_values = 0x7f07006f;
        /**  Security settings.  The delay after screen is turned off until device locks.
         These are shown in a list dialog. 
         */
        public: static const int lock_after_timeout_entries = 0x7f070006;
        /**  Do not translate. 
         */
        public: static const int lock_after_timeout_values = 0x7f070007;
        /**  Titles for the list of long press timeout options. 
 no translation found for app_ops_labels:14 (2623604824935968113) 
 no translation found for app_ops_labels:15 (4420177125221176306) 
 no translation found for app_ops_labels:21 (3527273606643794973) 
 no translation found for app_ops_labels:22 (4370895547001583812) 
         */
        public: static const int long_press_timeout_selector_titles = 0x7f070034;
        /**  Values for the list of long press timeout options. 
         */
        public: static const int long_press_timeout_selector_values = 0x7f070035;
        /**  MVNO Info used in APN editor 
         */
        public: static const int mvno_type_entries = 0x7f07002d;
        public: static const int mvno_type_values = 0x7f07002e;
        /**  Titles for overlay display devices preference. [CHAR LIMIT=35] 
         */
        public: static const int overlay_display_devices_entries = 0x7f07004f;
        /**  Values for overlay display devices preference. 
         */
        public: static const int overlay_display_devices_values = 0x7f070050;
        /**  Process stats memory use details: labels for memory states 
         */
        public: static const int proc_stats_memory_states = 0x7f070069;
        /**  Process stats memory use details: labels for process 
         */
        public: static const int proc_stats_process_states = 0x7f07006a;
        /**  [CHAR LIMIT=30] Labels for memory states 
         */
        public: static const int ram_states = 0x7f070061;
        /**  Display settings.  The delay in inactivity before the screen is turned off. These are shown in a list dialog. 
         */
        public: static const int screen_timeout_entries = 0x7f070002;
        /**  Do not translate. 
         */
        public: static const int screen_timeout_values = 0x7f070003;
        /**  Values for premium SMS permission selector [CHAR LIMIT=30] 
 no translation found for app_process_limit_entries:0 (3401625457385943795) 
 no translation found for app_process_limit_entries:1 (4071574792028999443) 
 no translation found for app_process_limit_entries:2 (4810006996171705398) 
 no translation found for app_process_limit_entries:3 (8586370216857360863) 
 no translation found for app_process_limit_entries:4 (836593137872605381) 
 no translation found for app_process_limit_entries:5 (7899496259191969307) 
 no translation found for vpn_types_long:0 (2732002039459078847) 
 no translation found for vpn_types_long:1 (3799752201662127867) 
 no translation found for vpn_types_long:2 (4725504331295252103) 
 no translation found for vpn_types_long:3 (7526551163264034377) 
 no translation found for vpn_types_long:4 (8064740940687465039) 
 no translation found for vpn_types_long:5 (4946199982372391490) 
 no translation found for vpn_states:0 (8621078286418985762) 
 no translation found for vpn_states:1 (6692305604213080515) 
 no translation found for vpn_states:2 (8001704909356800092) 
 no translation found for vpn_states:3 (4039737283841672166) 
 no translation found for vpn_states:4 (4042143101664725090) 
         */
        public: static const int security_settings_premium_sms_values = 0x7f070060;
        /**  Titles for logd limit size lowram selection preference. [CHAR LIMIT=14] 
         */
        public: static const int select_logd_size_lowram_titles = 0x7f070043;
        /**  Summaries for logd limit size selection preference. [CHAR LIMIT=30]
         */
        public: static const int select_logd_size_summaries = 0x7f070045;
        /**  Titles for logd limit size selection preference. [CHAR LIMIT=14] 
         */
        public: static const int select_logd_size_titles = 0x7f070042;
        /**  Values for logd limit size selection preference. 
         */
        public: static const int select_logd_size_values = 0x7f070044;
        public: static const int select_runtime_summaries = 0x7f07006d;
        public: static const int select_runtime_titles = 0x7f07006c;
        /**  Titles for non-rectangular clipping preference. [CHAR LIMIT=35] 
         */
        public: static const int show_non_rect_clip_entries = 0x7f070053;
        /**  Values for non-rectangular clipping preference. 
         */
        public: static const int show_non_rect_clip_values = 0x7f070054;
        /**  Sim Cards display numbers. Range of data usage. 
         */
        public: static const int sim_card_data_range = 0x7f07001e;
        /**  Display color space adjustment modes for developers 
         */
        public: static const int simulate_color_space_entries = 0x7f070064;
        /**  Values for display color space adjustment modes for developers 
         */
        public: static const int simulate_color_space_values = 0x7f070065;
        /**  The time zone picker screen has two levels.  The first level allows the user to choose a region. 
         */
        public: static const int timezone_filters = 0x7f070000;
        /**  Titles for frame time tracking preference. [CHAR LIMIT=35] 
         */
        public: static const int track_frame_time_entries = 0x7f070055;
        /**  Values for frame time tracking preference. 
         */
        public: static const int track_frame_time_values = 0x7f070056;
        /**  Titles for transition animation scale preference. [CHAR LIMIT=35] 
         */
        public: static const int transition_animation_scale_entries = 0x7f07004b;
        /**  Values for transition animation scale preference. 
         */
        public: static const int transition_animation_scale_values = 0x7f07004c;
        public: static const int tts_demo_string_langs = 0x7f07000f;
        /**  Do not translate. 
         */
        public: static const int tts_demo_strings = 0x7f07000e;
        /**  Default pitch choices 
         */
        public: static const int tts_pitch_entries = 0x7f07000c;
        /**  Do not translate. 
         */
        public: static const int tts_pitch_values = 0x7f07000d;
        /**  TTS settings 
 Default speech rate choices 
         */
        public: static const int tts_rate_entries = 0x7f07000a;
        /**  Do not translate. 
         */
        public: static const int tts_rate_values = 0x7f07000b;
        /**  Display options for UsageStats class 
 no translation found for wifi_frequency_band_entries:1 (6670588712989942178) 
 no translation found for wifi_frequency_band_entries:2 (2715516524973207876) 
         */
        public: static const int usage_stats_display_order_types = 0x7f070021;
        /**  User content ratings for restricted users [CHAR LIMIT=30] 
         */
        public: static const int user_content_ratings_entries = 0x7f07005e;
        /**  Values for user content ratings for restricted users 
         */
        public: static const int user_content_ratings_values = 0x7f07005f;
        /**  Status for a VPN network. [CHAR LIMIT=100] 
         */
        public: static const int vpn_states = 0x7f07005d;
        /**  Short names for each VPN type, not really translatable. [CHAR LIMIT=20] 
         */
        public: static const int vpn_types = 0x7f07005b;
        /**  Longer descriptions for each VPN type. [CHAR LIMIT=100] 
         */
        public: static const int vpn_types_long = 0x7f07005c;
        /**  Wi-Fi AP settings.  The type of security a Wi-Fi AP supports. 
 Note that adding/removing/moving the items will need wifi settings code change. 
         */
        public: static const int wifi_ap_security = 0x7f070014;
        /**  EAP method 
         */
        public: static const int wifi_eap_entries = 0x7f070022;
        /**  Wi-Fi settings.  The type of EAP method a Wi-Fi network has. 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_ap_security:2 (3112452131886885338) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
         */
        public: static const int wifi_eap_method = 0x7f070015;
        /**  Wi-Fi settings. Presented as a list dialog to the user to choose the Wi-Fi frequency band. 
         */
        public: static const int wifi_frequency_band_entries = 0x7f07001f;
        /**  Match with wifi_frequency_band_entries and the values of the settings in WifiManager. 
 Do not translate. 
         */
        public: static const int wifi_frequency_band_values = 0x7f070020;
        /**  Wi-Fi IP settings. 
 Note that adding/removing/moving the items will need wifi settings code change. 
         */
        public: static const int wifi_ip_settings = 0x7f070025;
        /**  Match this with the order of WifiP2pDevice.Status 
 Wi-Fi p2p settings device status message 
         */
        public: static const int wifi_p2p_status = 0x7f070017;
        /**  Wi-Fi WPS setup for p2p connections.  
 Note that adding/removing/moving the items will need wifi settings code change. 
 no translation found for tts_rate_entries:0 (6041212618892492920) 
 no translation found for tts_rate_entries:1 (2361722960903353554) 
 no translation found for tts_rate_entries:2 (1145554631248513562) 
 no translation found for tts_rate_entries:3 (7553665153391107454) 
 no translation found for tts_pitch_entries:0 (7526050907652687351) 
 no translation found for tts_pitch_entries:1 (2692137425242433765) 
 no translation found for tts_pitch_entries:2 (3332408460740717754) 
 no translation found for tts_pitch_entries:3 (4907380534957572531) 
 no translation found for tts_pitch_entries:4 (4699640516390840297) 
 no translation found for wifi_status:1 (8934131797783724664) 
 no translation found for wifi_status:2 (8513729475867537913) 
 no translation found for wifi_status:3 (515055375277271756) 
 no translation found for wifi_status:4 (1943354004029184381) 
 no translation found for wifi_status:5 (4221763391123233270) 
 no translation found for wifi_status:6 (624838831631122137) 
 no translation found for wifi_status:7 (7979680559596111948) 
 no translation found for wifi_status:8 (1634960474403853625) 
 no translation found for wifi_status:9 (746097431216080650) 
 no translation found for wifi_status_with_ssid:1 (8878186979715711006) 
 no translation found for wifi_status_with_ssid:2 (355508996603873860) 
 no translation found for wifi_status_with_ssid:3 (554971459996405634) 
 no translation found for wifi_status_with_ssid:4 (7928343808033020343) 
 no translation found for wifi_status_with_ssid:5 (8937994881315223448) 
 no translation found for wifi_status_with_ssid:6 (1330262655415760617) 
 no translation found for wifi_status_with_ssid:7 (7698638434317271902) 
 no translation found for wifi_status_with_ssid:8 (197508606402264311) 
 no translation found for wifi_status_with_ssid:9 (8578370891960825148) 
 no translation found for wifi_security:0 (8491993170197127709) 
 no translation found for wifi_security:1 (6524315248437318854) 
 no translation found for wifi_security:2 (1532568756571457140) 
 no translation found for wifi_security:3 (3620707702811709779) 
 no translation found for wifi_security_no_eap:0 (2084555984818107151) 
 no translation found for wifi_security_no_eap:1 (397579322683471524) 
 no translation found for wifi_security_no_eap:2 (1968820975358150484) 
 no translation found for wifi_ap_security:0 (5251664683198623324) 
 no translation found for wifi_ap_security:1 (7989073072260294673) 
 no translation found for wifi_eap_method:0 (1160193392455075561) 
 no translation found for wifi_eap_method:1 (7981731051382306293) 
 no translation found for wifi_eap_method:2 (2892994535305020162) 
         */
        public: static const int wifi_p2p_wps_setup = 0x7f070016;
        /**  Phase 2 options for PEAP 
 no translation found for wifi_eap_entries:0 (8615575908717909498) 
 no translation found for wifi_eap_entries:1 (8667872640594311615) 
 no translation found for wifi_eap_entries:2 (7182812872984827322) 
         */
        public: static const int wifi_peap_phase2_entries = 0x7f070023;
        /**  Phase 2 options for rest of EAP methods 
         */
        public: static const int wifi_phase2_entries = 0x7f070024;
        /**  Wi-Fi proxy settings. 
 Note that adding/removing/moving the items will need wifi settings code change. 
         */
        public: static const int wifi_proxy_settings = 0x7f070026;
        /**  Wi-Fi security choices used when manually added a Wi-Fi network 
         */
        public: static const int wifi_security = 0x7f070012;
        /**  Wi-Fi security types for New User Dialog. EAP is not configurable. 
         */
        public: static const int wifi_security_no_eap = 0x7f070013;
        /**  Wi-Fi settings. The signal strength a Wi-Fi network has. 
         */
        public: static const int wifi_signal = 0x7f070019;
        /**  Wi-Fi settings. Presented as a list dialog to the user to choose the Wi-Fi sleep policy. 
         */
        public: static const int wifi_sleep_policy_entries = 0x7f07001a;
        /**  Wi-Fi settings. Presented as a list dialog to the user to choose the Wi-Fi sleep policy. Used when
         the device is Wi-Fi-only. [CHAR LIMIT=30] 
 no translation found for wifi_signal:0 (2245412278046491293) 
 no translation found for wifi_signal:1 (5615082285463430971) 
 no translation found for wifi_signal:2 (3565079809875324621) 
 no translation found for wifi_signal:3 (5702329417707689835) 
 no translation found for wifi_sleep_policy_entries:2 (1986753720941888596) 
         */
        public: static const int wifi_sleep_policy_entries_wifi_only = 0x7f07001b;
        /**  Do not translate. 
         */
        public: static const int wifi_sleep_policy_values = 0x7f07001c;
        /**  Wi-Fi settings. The status messages when the network is unknown. 
         */
        public: static const int wifi_status = 0x7f070010;
        /**  Wi-Fi settings. The status messages when the network is known. 
         */
        public: static const int wifi_status_with_ssid = 0x7f070011;
        /**  Titles for window animation scale preference. [CHAR LIMIT=35] 
         */
        public: static const int window_animation_scale_entries = 0x7f070049;
        /**  Values for window animation scale preference. 
         */
        public: static const int window_animation_scale_values = 0x7f07004a;
    };
    public: class attr {
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int apnPreferenceStyle = 0x7f010018;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int aspectRatio = 0x7f010002;
        /**  Color of predicted future use part of chart. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int barPredictionColor = 0x7f010005;
        /**  Primary color of chart. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int barPrimaryColor = 0x7f010004;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int borderDrawable = 0x7f010014;
        /**  Minimum height of the chart itself. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
         */
        public: static const int chartMinHeight = 0x7f010006;
        /**  Background color 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int emptyColor = 0x7f010007;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fillColor = 0x7f010016;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fillColorSecondary = 0x7f010017;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td></td></tr>
<tr><td><code>vertical</code></td><td>1</td><td></td></tr>
</table>
         */
        public: static const int followAxis = 0x7f01000c;
        /**  Text color, typeface, size, and style of header. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int headerAppearance = 0x7f010003;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int ic_menu_add = 0x7f01001e;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int ic_menu_moreoverflow = 0x7f01001f;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int ic_wps = 0x7f010020;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int icon = 0x7f010001;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int keywords = 0x7f010019;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int labelColor = 0x7f010010;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int labelSize = 0x7f01000e;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int labelTemplate = 0x7f01000f;
        /**  Minimum tick width for each slice in the bar chart. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minTickWidth = 0x7f010008;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int neighborMargin = 0x7f01000d;
        /**  optimal width of the chart 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int optimalWidth = 0x7f010009;
        /**  how to weight extra space beyond optimal width 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int optimalWidthWeight = 0x7f01000a;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int preferenceBackgroundColor = 0x7f01001d;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int primaryDrawable = 0x7f010012;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int safeRegion = 0x7f010011;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int secondaryDrawable = 0x7f010013;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int setup_divider_color = 0x7f010021;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_encrypted = 0x7f010000;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int strokeColor = 0x7f010015;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int sweepDrawable = 0x7f01000b;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int switchBarMarginEnd = 0x7f01001c;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int switchBarMarginStart = 0x7f01001b;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int switchBarTheme = 0x7f01001a;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int wifi_signal = 0x7f010023;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int wifi_signal_color = 0x7f010022;
    };
    public: class bool_ {
        /**  Whether the bluetooth activation confirmation dialogs should be auto dismissed.
         Can be overridden for specific product builds. 
         */
        public: static const int auto_confirm_bluetooth_activation_dialog = 0x7f080004;
        /**  Display additional System Update menu if true 
         */
        public: static const int config_additional_system_update_setting_enable = 0x7f080003;
        /**  Carrier_enabled editable 
 Carrier_enabled editable 
 Carrier_enabled editable 
 Carrier_enabled editable 
 Carrier_enabled editable 
 Carrier_enabled editable 
         */
        public: static const int config_allow_edit_carrier_enabled = 0x7f080009;
        /**  If false, MIN is displayed. If true, MSID is displayed. 
         */
        public: static const int config_msid_enable = 0x7f080008;
        /**  Whether to show a preference item for mobile plan 
         */
        public: static const int config_show_mobile_plan = 0x7f080006;
        /**  Whether to show a preference item for regulatory information in About phone 
         */
        public: static const int config_show_regulatory_info = 0x7f080005;
        /**  CryptKeeper allow rotation 
         */
        public: static const int crypt_keeper_allow_rotation = 0x7f080007;
        /**  Whether or not the dock settings are to be displayed for this device when docked 
         */
        public: static const int has_dock_settings = 0x7f080000;
        /**  Whether the DEPRECATED power control widget is enabled for this
         device. Should be overridden for specific product builds. 
         */
        public: static const int has_powercontrol_widget = 0x7f080002;
        /**  Whether there is a silent mode checkbox  
 Whether there is a silent mode checkbox  
         */
        public: static const int has_silent_mode = 0x7f080001;
    };
    public: class color {
        public: static const int black = 0x7f090000;
        public: static const int circle_avatar_frame_color = 0x7f09001a;
        public: static const int circle_avatar_frame_pressed_color = 0x7f09001c;
        public: static const int circle_avatar_frame_shadow_color = 0x7f09001b;
        public: static const int crypt_keeper_clock_am_pm = 0x7f09000f;
        public: static const int crypt_keeper_clock_background = 0x7f09000d;
        public: static const int crypt_keeper_clock_foreground = 0x7f09000e;
        public: static const int crypt_keeper_password_background = 0x7f090010;
        public: static const int dashboard_background_color = 0x7f09002a;
        public: static const int divider_color = 0x7f090011;
        public: static const int lock_pattern_background = 0x7f09001d;
        public: static const int lock_pattern_view_error_color = 0x7f090020;
        public: static const int lock_pattern_view_regular_color = 0x7f09001e;
        public: static const int lock_pattern_view_success_color = 0x7f09001f;
        public: static const int material_empty_color_light = 0x7f090002;
        public: static const int memory_apps_usage = 0x7f090005;
        public: static const int memory_avail = 0x7f090004;
        public: static const int memory_cache = 0x7f090009;
        public: static const int memory_dcim = 0x7f090007;
        public: static const int memory_downloads = 0x7f090006;
        public: static const int memory_misc = 0x7f09000a;
        public: static const int memory_music = 0x7f090008;
        public: static const int memory_used = 0x7f090003;
        public: static const int memory_user_dark = 0x7f09000c;
        public: static const int memory_user_light = 0x7f09000b;
        public: static const int red = 0x7f090001;
        public: static const int running_processes_apps_ram = 0x7f090025;
        public: static const int running_processes_free_ram = 0x7f090026;
        public: static const int running_processes_system_ram = 0x7f090024;
        public: static const int setup_divider_color_dark = 0x7f090013;
        public: static const int setup_divider_color_light = 0x7f090014;
        public: static const int setup_wizard_color_accent_dark = 0x7f090015;
        public: static const int setup_wizard_color_accent_light = 0x7f090016;
        public: static const int setup_wizard_wifi_color_dark = 0x7f090017;
        public: static const int setup_wizard_wifi_color_light = 0x7f090018;
        public: static const int switch_accent_color = 0x7f09002c;
        public: static const int switchbar_background_color = 0x7f09002b;
        public: static const int theme_accent = 0x7f090029;
        /**  Palette colors referenced by top-level themes. 
         */
        public: static const int theme_primary = 0x7f090027;
        public: static const int theme_primary_dark = 0x7f090028;
        public: static const int title_color = 0x7f090012;
        public: static const int unlock_pattern_view_error_color = 0x7f090023;
        public: static const int unlock_pattern_view_regular_color = 0x7f090021;
        public: static const int unlock_pattern_view_success_color = 0x7f090022;
        public: static const int wifi_assistant_color_accent = 0x7f090019;
        public: static const int wifi_divider = 0x7f09002d;
    };
    public: class dimen {
        public: static const int action_bar_switch_padding = 0x7f0c0002;
        /**  ActionBar contentInsetStart 
 ActionBar contentInsetStart 
 ActionBar contentInsetStart 
 ActionBar contentInsetStart 
         */
        public: static const int actionbar_contentInsetStart = 0x7f0c0039;
        /**  ActionBar height 
 ActionBar height 
 ActionBar height 
         */
        public: static const int actionbar_size = 0x7f0c0038;
        public: static const int actionbar_subsettings_contentInsetStart = 0x7f0c003a;
        public: static const int app_icon_size = 0x7f0c0003;
        public: static const int appwidget_height = 0x7f0c0075;
        public: static const int appwidget_min_height = 0x7f0c002a;
        public: static const int appwidget_min_width = 0x7f0c0029;
        public: static const int appwidget_preview_height = 0x7f0c0077;
        public: static const int appwidget_preview_width = 0x7f0c0076;
        public: static const int appwidget_width = 0x7f0c0074;
        public: static const int battery_history_chart_height = 0x7f0c000c;
        public: static const int bind_app_widget_dialog_checkbox_bottom_padding = 0x7f0c000a;
        /**  Bluetooth Preferences 
         */
        public: static const int bluetooth_dialog_padding = 0x7f0c006f;
        public: static const int bluetooth_pairing_padding = 0x7f0c0070;
        /**  Default text size for caption preview samples. Uses dp rather than sp because captions are not scaled. 
         */
        public: static const int caption_preview_text_size = 0x7f0c0037;
        public: static const int captioning_preview_height = 0x7f0c0030;
        public: static const int checkbox_layout_padding = 0x7f0c006e;
        /**  CheckBoxPreference 
         */
        public: static const int checkbox_widget_min_width = 0x7f0c006d;
        public: static const int circle_avatar_frame_shadow_radius = 0x7f0c002e;
        public: static const int circle_avatar_frame_stroke_width = 0x7f0c002d;
        public: static const int circle_avatar_size = 0x7f0c002c;
        public: static const int content_margin_left = 0x7f0c0007;
        public: static const int crypt_clock_size = 0x7f0c0010;
        /**  CryptKeeper edit text ime icon padding 
         */
        public: static const int crypt_keeper_edit_text_ime_padding = 0x7f0c0061;
        /**  CryptKeeper emergency call button dimensions 
         */
        public: static const int crypt_keeper_emergency_call_space_above = 0x7f0c0060;
        /**  CryptKeeper top margin for password/pin screen 
 CryptKeeper top margin for password/pin screen 
 CryptKeeper top margin for password/pin screen 
         */
        public: static const int crypt_keeper_password_top_margin = 0x7f0c005d;
        /**  CryptKeeper password/pin width 
 CryptKeeper password/pin width 
         */
        public: static const int crypt_keeper_password_width = 0x7f0c005f;
        /**  CryptKeeper pattern margin on phone 
         */
        public: static const int crypt_keeper_pattern_margin = 0x7f0c0062;
        /**  CryptKeeper separation between status and pattern 
         */
        public: static const int crypt_keeper_pattern_separator = 0x7f0c007a;
        /**  CryptKeeper pattern size for tablet 
         */
        public: static const int crypt_keeper_pattern_size = 0x7f0c0063;
        /**  CryptKeeper top margin for pattern screen 
 CryptKeeper top margin for pattern screen 
 CryptKeeper top margin for pattern screen 
         */
        public: static const int crypt_keeper_pattern_top_margin = 0x7f0c005e;
        /**  Dashboard category panel elevation 
         */
        public: static const int dashboard_category_elevation = 0x7f0c0043;
        public: static const int dashboard_category_padding_end = 0x7f0c0042;
        /**  Dashboard category padding start / end 
 Dashboard category padding start / end 
 Dashboard category padding start / end 
 Dashboard category padding start / end 
         */
        public: static const int dashboard_category_padding_start = 0x7f0c0041;
        /**  Dashboard category title layout height 
         */
        public: static const int dashboard_category_title_height = 0x7f0c0044;
        /**  Dashboard category title margin start 
 Dashboard category title margin start 
 Dashboard category title margin start 
         */
        public: static const int dashboard_category_title_margin_start = 0x7f0c0045;
        /**  Dashboard margins between each tiles within the layout 
 Dashboard margins between each tiles within the layout 
 Dashboard margins between each tiles within the layout 
 Dashboard margins between each tiles within the layout 
         */
        public: static const int dashboard_cell_gap_x = 0x7f0c003b;
        public: static const int dashboard_cell_gap_y = 0x7f0c003c;
        public: static const int dashboard_padding_bottom = 0x7f0c0040;
        public: static const int dashboard_padding_end = 0x7f0c003e;
        /**  Dashboard padding in its container 
 Dashboard padding in its container 
 Dashboard padding in its container 
         */
        public: static const int dashboard_padding_start = 0x7f0c003d;
        public: static const int dashboard_padding_top = 0x7f0c003f;
        public: static const int dashboard_tile_image_margin_end = 0x7f0c0049;
        /**  Dashboard tile image margin start / end 
 Dashboard tile image margin start / end 
 Dashboard tile image padding start / end 
         */
        public: static const int dashboard_tile_image_margin_start = 0x7f0c0048;
        /**  Dashboard image tile size 
         */
        public: static const int dashboard_tile_image_size = 0x7f0c0047;
        /**  Dashboard tile minimum height 
 Dashboard tile minimum height 
         */
        public: static const int dashboard_tile_minimum_height = 0x7f0c0046;
        public: static const int data_usage_chart_height = 0x7f0c000d;
        public: static const int data_usage_chart_optimalWidth = 0x7f0c000e;
        public: static const int datetime_margin_bottom = 0x7f0c0073;
        public: static const int datetime_margin_top = 0x7f0c0072;
        public: static const int description_margin_sides = 0x7f0c0009;
        public: static const int description_margin_top = 0x7f0c0008;
        public: static const int device_memory_usage_button_height = 0x7f0c0001;
        public: static const int device_memory_usage_button_width = 0x7f0c0000;
        public: static const int divider_height = 0x7f0c0024;
        public: static const int divider_margin_bottom = 0x7f0c0026;
        public: static const int divider_margin_top = 0x7f0c0025;
        /**   Size of icons in the top-level of settings  
         */
        public: static const int header_icon_width = 0x7f0c0028;
        public: static const int installed_app_details_bullet_offset = 0x7f0c000b;
        public: static const int keyguard_appwidget_picker_margin_left = 0x7f0c0078;
        public: static const int keyguard_appwidget_picker_margin_right = 0x7f0c0079;
        public: static const int keyguard_appwidget_picker_width = 0x7f0c007b;
        public: static const int notification_app_icon_badge_margin = 0x7f0c0034;
        public: static const int notification_app_icon_badge_size = 0x7f0c0033;
        public: static const int notification_app_icon_size = 0x7f0c0032;
        public: static const int pager_tabs_padding = 0x7f0c002b;
        public: static const int screen_margin_bottom = 0x7f0c0006;
        public: static const int screen_margin_sides = 0x7f0c0004;
        public: static const int screen_margin_top = 0x7f0c0005;
        /**  Screen pinning textview paddings 
         */
        public: static const int screen_pinning_textview_padding = 0x7f0c0064;
        /**  Search Panel elevation 
         */
        public: static const int search_panel_elevation = 0x7f0c004e;
        public: static const int search_result_item_image_margin_end = 0x7f0c0052;
        /**  Result item image margin start / end 
 Result item image margin start / end 
         */
        public: static const int search_result_item_image_margin_start = 0x7f0c0051;
        /**  Result item image size 
         */
        public: static const int search_result_item_image_size = 0x7f0c0050;
        public: static const int search_suggestion_item_image_margin_end = 0x7f0c0055;
        /**  Suggestion item image margin start / end 
         */
        public: static const int search_suggestion_item_image_margin_start = 0x7f0c0054;
        /**  Suggestion item image size 
         */
        public: static const int search_suggestion_item_image_size = 0x7f0c0053;
        /**  Search title (recent / results) padding start 
 Search title (recent / results) padding start 
         */
        public: static const int search_title_padding_start = 0x7f0c004f;
        public: static const int settings_side_margin = 0x7f0c0031;
        public: static const int setup_add_network_item_height = 0x7f0c0018;
        /**  Size of padding to give in the wifi list when there is no icon 
         */
        public: static const int setup_list_no_icon_padding = 0x7f0c0017;
        public: static const int setup_margin_bottom = 0x7f0c0011;
        /**  This is the extra spacing required to make the leading exactly 32sp 
         */
        public: static const int setup_title_line_spacing_extra = 0x7f0c0014;
        public: static const int setup_title_margin_bottom = 0x7f0c0013;
        public: static const int setup_title_padding_bottom = 0x7f0c0015;
        public: static const int setup_title_padding_top = 0x7f0c0016;
        public: static const int setup_title_size = 0x7f0c0012;
        public: static const int setup_wizard_card_corner_radius = 0x7f0c0019;
        public: static const int setup_wizard_card_elevation = 0x7f0c001a;
        public: static const int setup_wizard_card_land_margin_top = 0x7f0c0021;
        public: static const int setup_wizard_card_port_margin_sides = 0x7f0c0020;
        public: static const int setup_wizard_card_title_padding_bottom = 0x7f0c001f;
        public: static const int setup_wizard_card_title_padding_end = 0x7f0c001c;
        public: static const int setup_wizard_card_title_padding_start = 0x7f0c001d;
        public: static const int setup_wizard_card_title_padding_top = 0x7f0c001e;
        public: static const int setup_wizard_margin_sides = 0x7f0c0022;
        public: static const int setup_wizard_tablet_illustration_height = 0x7f0c001b;
        public: static const int setup_wizard_title_area_elevation = 0x7f0c0023;
        /**  SIM Dialog Margin bottom 
         */
        public: static const int sim_dialog_margin_bottom = 0x7f0c0066;
        /**  SIM Dialog Margin top 
         */
        public: static const int sim_dialog_margin_top = 0x7f0c0065;
        /**  SIM Dialog padding 
         */
        public: static const int sim_dialog_padding = 0x7f0c0067;
        public: static const int switchbar_margin_end = 0x7f0c004b;
        /**  SwitchBar margin start / end 
 SwitchBar margin start / end 
         */
        public: static const int switchbar_margin_start = 0x7f0c004a;
        public: static const int switchbar_subsettings_margin_end = 0x7f0c004d;
        /**  SwitchBar sub settings margin start / end 
 SwitchBar sub settings margin start / end 
 SwitchBar sub settings margin start / end 
 SwitchBar sub settings margin start / end 
         */
        public: static const int switchbar_subsettings_margin_start = 0x7f0c004c;
        /**  Minimum width for the popup for updating a user's photo. 
         */
        public: static const int update_user_photo_popup_min_width = 0x7f0c002f;
        /**  Height of a user icon view 
         */
        public: static const int user_icon_view_height = 0x7f0c0068;
        public: static const int user_spinner_height = 0x7f0c006a;
        public: static const int user_spinner_item_height = 0x7f0c006c;
        /**  User spinner offset
         */
        public: static const int user_spinner_offset = 0x7f0c0069;
        public: static const int user_spinner_padding = 0x7f0c006b;
        public: static const int vert_divider_width = 0x7f0c0027;
        public: static const int volume_seekbar_side_margin = 0x7f0c000f;
        public: static const int wifi_assistant_height = 0x7f0c005a;
        public: static const int wifi_assistant_image_start = 0x7f0c005c;
        public: static const int wifi_assistant_image_top = 0x7f0c005b;
        public: static const int wifi_assistant_padding = 0x7f0c0058;
        public: static const int wifi_assistant_padding_start_end = 0x7f0c0057;
        /**  Dimensions for Wifi Assistant Card 
 Dimensions for Wifi Assistant Card 
 Dimensions for Wifi Assistant Card 
 Dimensions for Wifi Assistant Card 
         */
        public: static const int wifi_assistant_padding_top_bottom = 0x7f0c0056;
        public: static const int wifi_assistant_text_padding = 0x7f0c0059;
        public: static const int wifi_divider_height = 0x7f0c0071;
        public: static const int zen_downtime_checkbox_padding = 0x7f0c0035;
        public: static const int zen_downtime_margin = 0x7f0c0036;
    };
    public: class drawable {
        public: static const int appwidget_bg_holo = 0x7f020000;
        public: static const int appwidget_button_center = 0x7f020001;
        public: static const int appwidget_button_left = 0x7f020002;
        public: static const int appwidget_button_right = 0x7f020003;
        public: static const int appwidget_inner_focused_c_holo = 0x7f020004;
        public: static const int appwidget_inner_focused_l_holo = 0x7f020005;
        public: static const int appwidget_inner_focused_r_holo = 0x7f020006;
        public: static const int appwidget_inner_pressed_c_holo = 0x7f020007;
        public: static const int appwidget_inner_pressed_l_holo = 0x7f020008;
        public: static const int appwidget_inner_pressed_r_holo = 0x7f020009;
        public: static const int appwidget_item_bg = 0x7f02000a;
        public: static const int appwidget_item_bg_normal = 0x7f02000b;
        public: static const int appwidget_item_bg_pressed = 0x7f02000c;
        public: static const int appwidget_settings_divider_holo = 0x7f02000d;
        public: static const int appwidget_settings_ind_mid_c_holo = 0x7f02000e;
        public: static const int appwidget_settings_ind_mid_l_holo = 0x7f02000f;
        public: static const int appwidget_settings_ind_mid_r_holo = 0x7f020010;
        public: static const int appwidget_settings_ind_off_c_holo = 0x7f020011;
        public: static const int appwidget_settings_ind_off_l_holo = 0x7f020012;
        public: static const int appwidget_settings_ind_off_r_holo = 0x7f020013;
        public: static const int appwidget_settings_ind_on_c_holo = 0x7f020014;
        public: static const int appwidget_settings_ind_on_l_holo = 0x7f020015;
        public: static const int appwidget_settings_ind_on_r_holo = 0x7f020016;
        public: static const int caption_background = 0x7f020017;
        public: static const int dashboard_tile_background = 0x7f020018;
        public: static const int data_grid_border = 0x7f020019;
        public: static const int data_sweep_limit = 0x7f02001a;
        public: static const int data_sweep_limit_activated = 0x7f02001b;
        public: static const int data_sweep_warning = 0x7f02001c;
        public: static const int data_sweep_warning_activated = 0x7f02001d;
        public: static const int data_usage_bar = 0x7f02001e;
        public: static const int data_usage_sweep_background = 0x7f02001f;
        public: static const int default_preference_background = 0x7f020020;
        public: static const int dotted_line_480px = 0x7f020021;
        public: static const int empty_icon = 0x7f020022;
        public: static const int encroid_progress = 0x7f020023;
        public: static const int encroid_resignin = 0x7f020024;
        public: static const int encroid_waiting = 0x7f020025;
        public: static const int ic_appwidget_settings_bluetooth_off_holo = 0x7f020026;
        public: static const int ic_appwidget_settings_bluetooth_on_holo = 0x7f020027;
        public: static const int ic_appwidget_settings_brightness_auto_holo = 0x7f020028;
        public: static const int ic_appwidget_settings_brightness_full_holo = 0x7f020029;
        public: static const int ic_appwidget_settings_brightness_half_holo = 0x7f02002a;
        public: static const int ic_appwidget_settings_brightness_off_holo = 0x7f02002b;
        public: static const int ic_appwidget_settings_location_off_holo = 0x7f02002c;
        public: static const int ic_appwidget_settings_location_on_holo = 0x7f02002d;
        public: static const int ic_appwidget_settings_location_saving_holo = 0x7f02002e;
        public: static const int ic_appwidget_settings_sync_off_holo = 0x7f02002f;
        public: static const int ic_appwidget_settings_sync_on_holo = 0x7f020030;
        public: static const int ic_appwidget_settings_wifi_off_holo = 0x7f020031;
        public: static const int ic_appwidget_settings_wifi_on_holo = 0x7f020032;
        public: static const int ic_audio_alarm_24dp = 0x7f020033;
        public: static const int ic_audio_vol_24dp = 0x7f020034;
        public: static const int ic_bt_cellphone = 0x7f020035;
        public: static const int ic_bt_config = 0x7f020036;
        public: static const int ic_bt_headphones_a2dp = 0x7f020037;
        public: static const int ic_bt_headset_hfp = 0x7f020038;
        public: static const int ic_bt_imaging = 0x7f020039;
        public: static const int ic_bt_keyboard_hid = 0x7f02003a;
        public: static const int ic_bt_laptop = 0x7f02003b;
        public: static const int ic_bt_misc_hid = 0x7f02003c;
        public: static const int ic_bt_network_pan = 0x7f02003d;
        public: static const int ic_bt_pointing_hid = 0x7f02003e;
        public: static const int ic_btn_next = 0x7f02003f;
        public: static const int ic_drawer = 0x7f020040;
        public: static const int ic_drawer_am = 0x7f020041;
        public: static const int ic_emergency = 0x7f020042;
        public: static const int ic_grayedout_printer = 0x7f020043;
        public: static const int ic_item_delete = 0x7f020044;
        public: static const int ic_list_sync_anim = 0x7f020045;
        public: static const int ic_lockscreen_ime = 0x7f020046;
        public: static const int ic_menu_3d_globe = 0x7f020047;
        public: static const int ic_menu_add_dark = 0x7f020048;
        public: static const int ic_menu_add_light = 0x7f020049;
        public: static const int ic_menu_add_white = 0x7f02004a;
        public: static const int ic_menu_delete = 0x7f02004b;
        public: static const int ic_menu_refresh_holo_dark = 0x7f02004c;
        public: static const int ic_menu_scan_network = 0x7f02004d;
        public: static const int ic_network_signal_0 = 0x7f02004e;
        public: static const int ic_network_signal_1 = 0x7f02004f;
        public: static const int ic_network_signal_2 = 0x7f020050;
        public: static const int ic_network_signal_3 = 0x7f020051;
        public: static const int ic_network_signal_4 = 0x7f020052;
        public: static const int ic_power_system = 0x7f020053;
        public: static const int ic_print = 0x7f020054;
        public: static const int ic_print_error = 0x7f020055;
        public: static const int ic_search_history = 0x7f020056;
        public: static const int ic_search_history_am = 0x7f020057;
        public: static const int ic_settings_32dp = 0x7f020058;
        public: static const int ic_settings_about = 0x7f020059;
        public: static const int ic_settings_accessibility = 0x7f02005a;
        public: static const int ic_settings_accounts = 0x7f02005b;
        public: static const int ic_settings_applications = 0x7f02005c;
        public: static const int ic_settings_backup = 0x7f02005d;
        public: static const int ic_settings_battery = 0x7f02005e;
        public: static const int ic_settings_bluetooth = 0x7f02005f;
        public: static const int ic_settings_bluetooth2 = 0x7f020060;
        public: static const int ic_settings_cell_standby = 0x7f020061;
        public: static const int ic_settings_data_usage = 0x7f020062;
        public: static const int ic_settings_date_time = 0x7f020063;
        public: static const int ic_settings_development = 0x7f020064;
        public: static const int ic_settings_display = 0x7f020065;
        public: static const int ic_settings_display_am = 0x7f020066;
        public: static const int ic_settings_dock = 0x7f020067;
        public: static const int ic_settings_home = 0x7f020068;
        public: static const int ic_settings_language = 0x7f020069;
        public: static const int ic_settings_location = 0x7f02006a;
        public: static const int ic_settings_more = 0x7f02006b;
        public: static const int ic_settings_multiuser = 0x7f02006c;
        public: static const int ic_settings_nfc_payment = 0x7f02006d;
        public: static const int ic_settings_nfc_payment_am = 0x7f02006e;
        public: static const int ic_settings_notifications = 0x7f02006f;
        public: static const int ic_settings_phone_idle = 0x7f020070;
        public: static const int ic_settings_print = 0x7f020071;
        public: static const int ic_settings_security = 0x7f020072;
        public: static const int ic_settings_sound = 0x7f020073;
        public: static const int ic_settings_storage = 0x7f020074;
        public: static const int ic_settings_sync = 0x7f020075;
        public: static const int ic_settings_voice_calls = 0x7f020076;
        public: static const int ic_settings_wifi = 0x7f020077;
        public: static const int ic_settings_wireless = 0x7f020078;
        public: static const int ic_sim_sd = 0x7f020079;
        public: static const int ic_sync_anim_holo = 0x7f02007a;
        public: static const int ic_sync_error_holo = 0x7f02007b;
        public: static const int ic_sync_green = 0x7f02007c;
        public: static const int ic_sync_green_holo = 0x7f02007d;
        public: static const int ic_sync_grey = 0x7f02007e;
        public: static const int ic_sync_grey_holo = 0x7f02007f;
        public: static const int ic_sync_red = 0x7f020080;
        public: static const int ic_sync_red_holo = 0x7f020081;
        public: static const int ic_sysbar_quicksettings = 0x7f020082;
        public: static const int ic_tab_all = 0x7f020083;
        public: static const int ic_tab_download = 0x7f020084;
        public: static const int ic_tab_running = 0x7f020085;
        public: static const int ic_tab_sdcard = 0x7f020086;
        public: static const int ic_tab_selected_all = 0x7f020087;
        public: static const int ic_tab_selected_download = 0x7f020088;
        public: static const int ic_tab_selected_running = 0x7f020089;
        public: static const int ic_tab_selected_sdcard = 0x7f02008a;
        public: static const int ic_tab_unselected_all = 0x7f02008b;
        public: static const int ic_tab_unselected_download = 0x7f02008c;
        public: static const int ic_tab_unselected_running = 0x7f02008d;
        public: static const int ic_tab_unselected_sdcard = 0x7f02008e;
        public: static const int ic_wifi_emptystate = 0x7f02008f;
        public: static const int ic_wifi_lock_signal_0_dark = 0x7f020090;
        public: static const int ic_wifi_lock_signal_0_light = 0x7f020091;
        public: static const int ic_wifi_lock_signal_0_teal = 0x7f020092;
        public: static const int ic_wifi_lock_signal_1_dark = 0x7f020093;
        public: static const int ic_wifi_lock_signal_1_light = 0x7f020094;
        public: static const int ic_wifi_lock_signal_1_teal = 0x7f020095;
        public: static const int ic_wifi_lock_signal_2_dark = 0x7f020096;
        public: static const int ic_wifi_lock_signal_2_light = 0x7f020097;
        public: static const int ic_wifi_lock_signal_2_teal = 0x7f020098;
        public: static const int ic_wifi_lock_signal_3_dark = 0x7f020099;
        public: static const int ic_wifi_lock_signal_3_light = 0x7f02009a;
        public: static const int ic_wifi_lock_signal_3_teal = 0x7f02009b;
        public: static const int ic_wifi_lock_signal_4_dark = 0x7f02009c;
        public: static const int ic_wifi_lock_signal_4_light = 0x7f02009d;
        public: static const int ic_wifi_lock_signal_4_teal = 0x7f02009e;
        public: static const int ic_wifi_signal_0_dark = 0x7f02009f;
        public: static const int ic_wifi_signal_0_light = 0x7f0200a0;
        public: static const int ic_wifi_signal_0_teal = 0x7f0200a1;
        public: static const int ic_wifi_signal_1_dark = 0x7f0200a2;
        public: static const int ic_wifi_signal_1_light = 0x7f0200a3;
        public: static const int ic_wifi_signal_1_teal = 0x7f0200a4;
        public: static const int ic_wifi_signal_2_dark = 0x7f0200a5;
        public: static const int ic_wifi_signal_2_light = 0x7f0200a6;
        public: static const int ic_wifi_signal_2_teal = 0x7f0200a7;
        public: static const int ic_wifi_signal_3_dark = 0x7f0200a8;
        public: static const int ic_wifi_signal_3_light = 0x7f0200a9;
        public: static const int ic_wifi_signal_3_teal = 0x7f0200aa;
        public: static const int ic_wifi_signal_4_dark = 0x7f0200ab;
        public: static const int ic_wifi_signal_4_light = 0x7f0200ac;
        public: static const int ic_wifi_signal_4_teal = 0x7f0200ad;
        public: static const int ic_wps_dark = 0x7f0200ae;
        public: static const int ic_wps_light = 0x7f0200af;
        public: static const int lock_anim = 0x7f0200b0;
        public: static const int lock_anim_0 = 0x7f0200b1;
        public: static const int lock_anim_1 = 0x7f0200b2;
        public: static const int lock_anim_10 = 0x7f0200b3;
        public: static const int lock_anim_11 = 0x7f0200b4;
        public: static const int lock_anim_12 = 0x7f0200b5;
        public: static const int lock_anim_13 = 0x7f0200b6;
        public: static const int lock_anim_14 = 0x7f0200b7;
        public: static const int lock_anim_2 = 0x7f0200b8;
        public: static const int lock_anim_3 = 0x7f0200b9;
        public: static const int lock_anim_4 = 0x7f0200ba;
        public: static const int lock_anim_5 = 0x7f0200bb;
        public: static const int lock_anim_6 = 0x7f0200bc;
        public: static const int lock_anim_7 = 0x7f0200bd;
        public: static const int lock_anim_8 = 0x7f0200be;
        public: static const int lock_anim_9 = 0x7f0200bf;
        public: static const int nav_divider = 0x7f0200c0;
        public: static const int nfc_payment_empty_state = 0x7f0200c1;
        public: static const int preference_background = 0x7f0200c2;
        public: static const int preference_highlight = 0x7f0200c3;
        public: static const int preview = 0x7f0200c4;
        public: static const int regulatory_info = 0x7f0200c5;
        public: static const int ring_notif = 0x7f0200c6;
        public: static const int ring_notif_mute = 0x7f0200c7;
        public: static const int ring_notif_vibrate = 0x7f0200c8;
        public: static const int search_panel_list_background = 0x7f0200c9;
        public: static const int setup_illustration_bg = 0x7f0200ca;
        public: static const int setup_illustration_horizontal_tile = 0x7f0200cb;
        public: static const int setup_illustration_tile = 0x7f0200cc;
        public: static const int setup_illustration_wifi = 0x7f0200cd;
        public: static const int setup_illustration_wifi_image = 0x7f0200ce;
        public: static const int setup_illustration_wifi_wide = 0x7f0200cf;
        public: static const int setup_illustration_wifi_wide_image = 0x7f0200d0;
        public: static const int setup_wizard_card_bg = 0x7f0200d1;
        public: static const int signal = 0x7f0200d2;
        public: static const int spinner_default_holo_dark_am_no_underline = 0x7f0200d3;
        public: static const int stat_sys_phone_call = 0x7f0200d4;
        public: static const int switchbar_background = 0x7f0200d5;
        public: static const int transparency = 0x7f0200d6;
        public: static const int transparency_tileable = 0x7f0200d7;
        public: static const int wifi_assistant_card = 0x7f0200d8;
        public: static const int wifi_assistant_card_tablet = 0x7f0200d9;
        public: static const int wifi_signal_colored = 0x7f0200da;
        public: static const int wifi_signal_dark = 0x7f0200db;
        public: static const int wifi_signal_light = 0x7f0200dc;
        public: static const int wifi_signal_lock_dark = 0x7f0200dd;
        public: static const int wifi_signal_lock_light = 0x7f0200de;
        public: static const int wifi_signal_lock_teal = 0x7f0200df;
        public: static const int wifi_signal_open_dark = 0x7f0200e0;
        public: static const int wifi_signal_open_light = 0x7f0200e1;
        public: static const int wifi_signal_open_teal = 0x7f0200e2;
        public: static const int wifi_signal_teal = 0x7f0200e3;
    };
    public: class id {
        public: static const int about_settings = 0x7f0d0254;
        public: static const int accessibility_settings = 0x7f0d0251;
        public: static const int account = 0x7f0d00c4;
        public: static const int accountTypeIcon = 0x7f0d0007;
        public: static const int account_settings = 0x7f0d024c;
        public: static const int account_settings_menu_auto_sync = 0x7f0d0256;
        public: static const int account_settings_menu_auto_sync_personal = 0x7f0d0257;
        public: static const int account_settings_menu_auto_sync_work = 0x7f0d0258;
        public: static const int accounts = 0x7f0d00d5;
        public: static const int accounts_label = 0x7f0d00d4;
        public: static const int action = 0x7f0d0132;
        public: static const int action_button = 0x7f0d008d;
        public: static const int action_delete = 0x7f0d0260;
        public: static const int action_select_all = 0x7f0d0261;
        public: static const int active_layout = 0x7f0d0082;
        public: static const int add_msg = 0x7f0d0088;
        public: static const int add_msg_expander = 0x7f0d0087;
        public: static const int admin_description = 0x7f0d0086;
        public: static const int admin_icon = 0x7f0d0083;
        public: static const int admin_name = 0x7f0d0084;
        public: static const int admin_policies = 0x7f0d008a;
        public: static const int admin_warning = 0x7f0d0089;
        public: static const int alarm_mute_button = 0x7f0d010b;
        public: static const int alarm_section = 0x7f0d010a;
        public: static const int alarm_volume_seekbar = 0x7f0d010c;
        public: static const int all_details = 0x7f0d0010;
        public: static const int alphanumeric_pin = 0x7f0d0032;
        public: static const int also_erases_external = 0x7f0d00d3;
        public: static const int android_beam_explained = 0x7f0d0008;
        public: static const int android_beam_image = 0x7f0d0009;
        public: static const int anonymous = 0x7f0d01f5;
        public: static const int apn_radiobutton = 0x7f0d000b;
        public: static const int app_background = 0x7f0d006f;
        public: static const int app_detail = 0x7f0d006c;
        public: static const int app_disabled = 0x7f0d00d1;
        public: static const int app_foreground = 0x7f0d006e;
        public: static const int app_icon = 0x7f0d000c;
        public: static const int app_image = 0x7f0d0019;
        public: static const int app_label = 0x7f0d001a;
        public: static const int app_name = 0x7f0d000d;
        public: static const int app_on_sdcard = 0x7f0d00cf;
        public: static const int app_restrictions_pref = 0x7f0d00f8;
        public: static const int app_restrictions_settings = 0x7f0d00f9;
        public: static const int app_settings = 0x7f0d000e;
        public: static const int app_size = 0x7f0d00d0;
        public: static const int app_snippet = 0x7f0d0011;
        public: static const int app_summary = 0x7f0d0061;
        public: static const int app_switches = 0x7f0d0070;
        public: static const int app_title = 0x7f0d0060;
        public: static const int app_titles = 0x7f0d006d;
        public: static const int application_settings = 0x7f0d0245;
        public: static const int application_size_prefix = 0x7f0d00a7;
        public: static const int application_size_text = 0x7f0d00a8;
        public: static const int appsSize = 0x7f0d0164;
        public: static const int appsSizePrefix = 0x7f0d0163;
        public: static const int ask_compatibility_cb = 0x7f0d00ba;
        public: static const int attempts = 0x7f0d0148;
        public: static const int auto_launch = 0x7f0d00b7;
        public: static const int auto_launch_title = 0x7f0d00b6;
        public: static const int back_button = 0x7f0d0117;
        public: static const int backgroundText = 0x7f0d01e0;
        public: static const int backup_pw_cancel_button = 0x7f0d0179;
        public: static const int backup_pw_set_button = 0x7f0d017a;
        public: static const int band = 0x7f0d001b;
        public: static const int banner = 0x7f0d00e6;
        public: static const int battery_history_chart = 0x7f0d001c;
        public: static const int battery_settings = 0x7f0d0244;
        public: static const int bluetooth_fragment_settings = 0x7f0d0027;
        public: static const int bluetooth_settings = 0x7f0d023a;
        public: static const int bottom_buttons = 0x7f0d0221;
        public: static const int bottom_divider = 0x7f0d0055;
        public: static const int bottom_padding = 0x7f0d0220;
        public: static const int bottom_padding_layout = 0x7f0d021f;
        public: static const int bssid = 0x7f0d022c;
        public: static const int btn_bluetooth = 0x7f0d01cd;
        public: static const int btn_brightness = 0x7f0d01d6;
        public: static const int btn_location = 0x7f0d01d0;
        public: static const int btn_sync = 0x7f0d01d3;
        public: static const int btn_wifi = 0x7f0d01ca;
        public: static const int buttonContainer = 0x7f0d0044;
        public: static const int buttonPanel = 0x7f0d008b;
        public: static const int buttonWidget = 0x7f0d010d;
        public: static const int button_bar = 0x7f0d0116;
        public: static const int buttons_spacer_left = 0x7f0d00ee;
        public: static const int bytes = 0x7f0d0062;
        public: static const int ca_cert = 0x7f0d01f2;
        public: static const int cache_header = 0x7f0d00b2;
        public: static const int cache_panel = 0x7f0d00b1;
        public: static const int cache_size = 0x7f0d00b3;
        public: static const int cache_size_text = 0x7f0d00b4;
        public: static const int call = 0x7f0d0146;
        public: static const int cancel = 0x7f0d01a4;
        public: static const int cancel_button = 0x7f0d003c;
        public: static const int capabilities = 0x7f0d009d;
        public: static const int capabilities_header = 0x7f0d009c;
        public: static const int cardBackground = 0x7f0d01df;
        public: static const int carrier = 0x7f0d00df;
        public: static const int category = 0x7f0d005c;
        public: static const int category_content = 0x7f0d005e;
        public: static const int category_title = 0x7f0d005d;
        public: static const int cell_info_list_rate = 0x7f0d0150;
        public: static const int cellinfo = 0x7f0d013e;
        public: static const int center_divider = 0x7f0d007f;
        public: static const int cert_remove_button = 0x7f0d0190;
        public: static const int cfi = 0x7f0d0145;
        public: static const int chart = 0x7f0d0063;
        public: static const int checkbox = 0x7f0d0090;
        public: static const int clear = 0x7f0d0133;
        public: static const int clear_activities_button = 0x7f0d00b8;
        public: static const int clear_cache_button = 0x7f0d00b5;
        public: static const int clickable = 0x7f0d018c;
        public: static const int color_bar = 0x7f0d0160;
        public: static const int color_preview = 0x7f0d00fe;
        public: static const int color_swatch = 0x7f0d0045;
        public: static const int comp_description = 0x7f0d016b;
        public: static const int config_list = 0x7f0d01e4;
        public: static const int confirm_new_backup_pw = 0x7f0d0178;
        public: static const int connecting_status = 0x7f0d021e;
        public: static const int connecting_status_layout = 0x7f0d021d;
        public: static const int container_material = 0x7f0d0115;
        public: static const int content = 0x7f0d0218;
        public: static const int content_padding = 0x7f0d0219;
        public: static const int control_buttons_panel = 0x7f0d00a1;
        public: static const int controls = 0x7f0d00f2;
        public: static const int controls_title = 0x7f0d00f3;
        public: static const int current_backup_pw = 0x7f0d0174;
        public: static const int cycle_day = 0x7f0d0069;
        public: static const int cycle_summary = 0x7f0d006b;
        public: static const int cycles_spinner = 0x7f0d006a;
        public: static const int dashboard = 0x7f0d005a;
        public: static const int dashboard_container = 0x7f0d005b;
        public: static const int data = 0x7f0d00c3;
        public: static const int data_buttons_panel = 0x7f0d00b0;
        public: static const int data_size_prefix = 0x7f0d00ac;
        public: static const int data_size_text = 0x7f0d00ad;
        public: static const int data_usage_menu_cellular_networks = 0x7f0d025e;
        public: static const int data_usage_menu_help = 0x7f0d025f;
        public: static const int data_usage_menu_metered = 0x7f0d025c;
        public: static const int data_usage_menu_restrict_background = 0x7f0d0259;
        public: static const int data_usage_menu_show_ethernet = 0x7f0d025b;
        public: static const int data_usage_menu_show_wifi = 0x7f0d025a;
        public: static const int data_usage_menu_sim_cards = 0x7f0d025d;
        public: static const int data_usage_settings = 0x7f0d023c;
        public: static const int date_picker = 0x7f0d007e;
        public: static const int date_picker_title = 0x7f0d007d;
        public: static const int date_time_auto = 0x7f0d007b;
        public: static const int date_time_auto_button = 0x7f0d007c;
        public: static const int date_time_settings = 0x7f0d0250;
        public: static const int date_time_settings_fragment = 0x7f0d0078;
        public: static const int dbm = 0x7f0d013b;
        public: static const int dcrtinfo = 0x7f0d013f;
        public: static const int defaultView = 0x7f0d0134;
        public: static const int delete_ = 0x7f0d01b1;
        public: static const int description = 0x7f0d008f;
        public: static const int detail_series = 0x7f0d0066;
        public: static const int details = 0x7f0d00f1;
        public: static const int development_settings = 0x7f0d0253;
        public: static const int deviceDetails = 0x7f0d00fc;
        public: static const int device_section = 0x7f0d023f;
        public: static const int dialog_layout = 0x7f0d0028;
        public: static const int disclaimer = 0x7f0d0073;
        public: static const int disconnects = 0x7f0d014a;
        public: static const int display_numbers = 0x7f0d00e1;
        public: static const int display_settings = 0x7f0d0241;
        public: static const int divider = 0x7f0d0096;
        public: static const int divider_delete = 0x7f0d0125;
        public: static const int divider_manage = 0x7f0d0123;
        public: static const int dns1 = 0x7f0d0204;
        public: static const int dns2 = 0x7f0d0205;
        public: static const int dnsCheckState = 0x7f0d0159;
        public: static const int dns_check_toggle = 0x7f0d0158;
        public: static const int dns_servers = 0x7f0d01c3;
        public: static const int dock_audio_media_enable_cb = 0x7f0d0095;
        public: static const int dummy_for_left_edge = 0x7f0d0217;
        public: static const int eap = 0x7f0d01ef;
        public: static const int eap_not_supported = 0x7f0d01e5;
        public: static const int eap_not_supported_for_add_network = 0x7f0d01e6;
        public: static const int editor = 0x7f0d01b3;
        public: static const int edittext = 0x7f0d0091;
        public: static const int eight = 0x7f0d01a0;
        public: static const int emergencyCallButton = 0x7f0d004e;
        public: static const int empty_print_state = 0x7f0d0099;
        public: static const int empty_printers_list_service_enabled = 0x7f0d009a;
        public: static const int enable_compatibility_cb = 0x7f0d00bb;
        public: static const int encroid = 0x7f0d0053;
        public: static const int encrypt_dont_require_password = 0x7f0d00a0;
        public: static const int encrypt_require_password = 0x7f0d009f;
        public: static const int encryption_message = 0x7f0d009e;
        public: static const int encryption_warning = 0x7f0d009b;
        public: static const int erase_external = 0x7f0d00d8;
        public: static const int erase_external_container = 0x7f0d00d7;
        public: static const int erase_external_option_text = 0x7f0d00d6;
        public: static const int error = 0x7f0d0049;
        public: static const int exclusionlist = 0x7f0d0131;
        public: static const int execute_encrypt = 0x7f0d004d;
        public: static const int execute_master_clear = 0x7f0d00da;
        public: static const int execute_media_format = 0x7f0d00db;
        public: static const int external_code_size_prefix = 0x7f0d00a9;
        public: static const int external_code_size_text = 0x7f0d00aa;
        public: static const int external_data_size_prefix = 0x7f0d00ae;
        public: static const int external_data_size_text = 0x7f0d00af;
        public: static const int extra = 0x7f0d00e9;
        public: static const int factory_reset = 0x7f0d0054;
        public: static const int fields = 0x7f0d01dc;
        public: static const int finish_button = 0x7f0d0006;
        public: static const int finish_button_area = 0x7f0d0005;
        public: static const int five = 0x7f0d019d;
        public: static const int fontSize = 0x7f0d0092;
        public: static const int footerLeftButton = 0x7f0d0042;
        public: static const int footerRightButton = 0x7f0d0043;
        public: static const int footerText = 0x7f0d0041;
        public: static const int four = 0x7f0d019c;
        public: static const int fragment = 0x7f0d0182;
        public: static const int freeSize = 0x7f0d0166;
        public: static const int freeSizePrefix = 0x7f0d0165;
        public: static const int gateway = 0x7f0d0202;
        public: static const int gprs = 0x7f0d0142;
        public: static const int grid = 0x7f0d0064;
        public: static const int gsm = 0x7f0d0141;
        public: static const int headerText = 0x7f0d003a;
        public: static const int health = 0x7f0d0021;
        public: static const int hidden_ssid = 0x7f0d022d;
        public: static const int hide_all = 0x7f0d015d;
        public: static const int hint = 0x7f0d0048;
        public: static const int home_app_pref = 0x7f0d010e;
        public: static const int home_app_uninstall = 0x7f0d0111;
        public: static const int home_divider = 0x7f0d0110;
        public: static const int home_radio = 0x7f0d010f;
        public: static const int home_settings = 0x7f0d0240;
        public: static const int horizontal = 0x7f0d0001;
        public: static const int hostname = 0x7f0d012f;
        public: static const int httpClientTest = 0x7f0d013a;
        public: static const int icon = 0x7f0d0034;
        public: static const int identity = 0x7f0d01f4;
        public: static const int illustration_image = 0x7f0d0255;
        public: static const int imei = 0x7f0d0135;
        public: static const int img_bluetooth = 0x7f0d01ce;
        public: static const int img_brightness = 0x7f0d01d7;
        public: static const int img_location = 0x7f0d01d1;
        public: static const int img_sync = 0x7f0d01d4;
        public: static const int img_wifi = 0x7f0d01cb;
        public: static const int ims_reg_required = 0x7f0d0151;
        public: static const int ind_bluetooth = 0x7f0d01cf;
        public: static const int ind_brightness = 0x7f0d01d8;
        public: static const int ind_location = 0x7f0d01d2;
        public: static const int ind_sync = 0x7f0d01d5;
        public: static const int ind_wifi = 0x7f0d01cc;
        public: static const int info = 0x7f0d01d9;
        public: static const int info_size = 0x7f0d00ab;
        public: static const int info_size_dots = 0x7f0d00a5;
        public: static const int initiate_encrypt = 0x7f0d0058;
        public: static const int initiate_master_clear = 0x7f0d00d9;
        public: static const int initiate_media_format = 0x7f0d00dc;
        public: static const int inputmethod_pref = 0x7f0d0112;
        public: static const int inputmethod_settings = 0x7f0d0113;
        public: static const int instructions_area = 0x7f0d016c;
        public: static const int intent = 0x7f0d00c2;
        public: static const int ip_fields = 0x7f0d01fe;
        public: static const int ip_settings = 0x7f0d01ff;
        public: static const int ipaddr = 0x7f0d022e;
        public: static const int ipaddress = 0x7f0d0201;
        public: static const int ipsec_ca_cert = 0x7f0d01be;
        public: static const int ipsec_identifier = 0x7f0d01b9;
        public: static const int ipsec_peer = 0x7f0d01bd;
        public: static const int ipsec_psk = 0x7f0d01b8;
        public: static const int ipsec_secret = 0x7f0d01ba;
        public: static const int ipsec_server_cert = 0x7f0d01bf;
        public: static const int ipsec_user = 0x7f0d01bb;
        public: static const int ipsec_user_cert = 0x7f0d01bc;
        public: static const int keyboard = 0x7f0d003e;
        public: static const int l2tp = 0x7f0d01b6;
        public: static const int l2tp_secret = 0x7f0d01b7;
        public: static const int l_anonymous = 0x7f0d020b;
        public: static const int l_ca_cert = 0x7f0d0208;
        public: static const int l_identity = 0x7f0d020a;
        public: static const int l_method = 0x7f0d0206;
        public: static const int l_phase2 = 0x7f0d0207;
        public: static const int l_user_cert = 0x7f0d0209;
        public: static const int label = 0x7f0d00c9;
        public: static const int labelsHeader = 0x7f0d00fb;
        public: static const int language_settings = 0x7f0d024d;
        public: static const int last_time_used = 0x7f0d01aa;
        public: static const int layout_results = 0x7f0d0171;
        public: static const int layout_root = 0x7f0d0076;
        public: static const int layout_suggestions = 0x7f0d016f;
        public: static const int leftSpacer = 0x7f0d008c;
        public: static const int left_button = 0x7f0d01a5;
        public: static const int level = 0x7f0d001f;
        public: static const int linear_color_bar = 0x7f0d0114;
        public: static const int link_speed = 0x7f0d0231;
        public: static const int listContainer = 0x7f0d004c;
        public: static const int listHeader = 0x7f0d0167;
        public: static const int list_container = 0x7f0d00cd;
        public: static const int list_results = 0x7f0d0172;
        public: static const int list_suggestions = 0x7f0d0170;
        public: static const int loading_container = 0x7f0d00ce;
        public: static const int locale_picker_fragment = 0x7f0d00cb;
        public: static const int location = 0x7f0d013c;
        public: static const int location_settings = 0x7f0d024a;
        public: static const int lockPattern = 0x7f0d0040;
        public: static const int login = 0x7f0d01c5;
        public: static const int lte_ram_dump = 0x7f0d0153;
        public: static const int macaddr = 0x7f0d022f;
        public: static const int main = 0x7f0d01c9;
        public: static const int main_content = 0x7f0d017b;
        public: static const int manage_user = 0x7f0d0124;
        public: static const int manufacturer_settings = 0x7f0d0248;
        public: static const int media_mute_button = 0x7f0d0100;
        public: static const int media_section = 0x7f0d00ff;
        public: static const int media_volume_seekbar = 0x7f0d0101;
        public: static const int mem_state = 0x7f0d012d;
        public: static const int mem_use = 0x7f0d012e;
        public: static const int message = 0x7f0d0026;
        public: static const int message_below_pin = 0x7f0d0033;
        public: static const int message_caption = 0x7f0d002a;
        public: static const int message_subhead = 0x7f0d002b;
        public: static const int messages = 0x7f0d00f4;
        public: static const int messages_title = 0x7f0d00f5;
        public: static const int method = 0x7f0d01f0;
        public: static const int misc_checkbox = 0x7f0d017d;
        public: static const int misc_filename = 0x7f0d017e;
        public: static const int misc_filesize = 0x7f0d017f;
        public: static const int more_control_buttons_panel = 0x7f0d00a2;
        public: static const int mppe = 0x7f0d01b5;
        public: static const int mwi = 0x7f0d0144;
        public: static const int name = 0x7f0d0029;
        public: static const int neighboring = 0x7f0d013d;
        public: static const int network = 0x7f0d0143;
        public: static const int network_prefix_length = 0x7f0d0203;
        public: static const int network_state = 0x7f0d0229;
        public: static const int network_switches = 0x7f0d0072;
        public: static const int network_switches_container = 0x7f0d0071;
        public: static const int networkid = 0x7f0d0230;
        public: static const int new_backup_pw = 0x7f0d0176;
        public: static const int next_button = 0x7f0d003d;
        public: static const int nfc_payment_empty_text = 0x7f0d00e3;
        public: static const int nfc_payment_learn_more = 0x7f0d00e4;
        public: static const int nfc_payment_pref = 0x7f0d00e5;
        public: static const int nfc_payment_settings = 0x7f0d0247;
        public: static const int nfc_payment_tap_image = 0x7f0d00e2;
        public: static const int nine = 0x7f0d01a1;
        public: static const int no_thanks_button = 0x7f0d01e2;
        public: static const int notification_description_text = 0x7f0d0107;
        public: static const int notification_mute_button = 0x7f0d0108;
        public: static const int notification_section = 0x7f0d0106;
        public: static const int notification_settings = 0x7f0d0242;
        public: static const int notification_switch = 0x7f0d00a3;
        public: static const int notification_volume_seekbar = 0x7f0d0109;
        public: static const int number = 0x7f0d00e0;
        public: static const int oem_info = 0x7f0d015a;
        public: static const int ok = 0x7f0d01a2;
        public: static const int old_password = 0x7f0d004b;
        public: static const int old_password_prompt = 0x7f0d004a;
        public: static const int one = 0x7f0d0199;
        public: static const int op_icon = 0x7f0d0013;
        public: static const int op_name = 0x7f0d0014;
        public: static const int op_time = 0x7f0d0015;
        public: static const int operations_section = 0x7f0d0012;
        public: static const int operator_ = 0x7f0d0136;
        public: static const int operator_settings = 0x7f0d023d;
        public: static const int options = 0x7f0d01c1;
        public: static const int other_network = 0x7f0d0185;
        public: static const int owner_info = 0x7f0d0059;
        public: static const int owner_info_edit_text = 0x7f0d00ed;
        public: static const int owner_info_nickname = 0x7f0d00eb;
        public: static const int package_name = 0x7f0d01a9;
        public: static const int packages_section = 0x7f0d00f7;
        public: static const int packages_section_title = 0x7f0d00f6;
        public: static const int pager = 0x7f0d0017;
        public: static const int pairing_caption = 0x7f0d002c;
        public: static const int pairing_code_message = 0x7f0d002e;
        public: static const int pairing_subhead = 0x7f0d002d;
        public: static const int password = 0x7f0d01c7;
        public: static const int passwordEntry = 0x7f0d004f;
        public: static const int password_entry = 0x7f0d003b;
        public: static const int password_label = 0x7f0d0237;
        public: static const int password_layout = 0x7f0d01ec;
        public: static const int password_text = 0x7f0d01eb;
        public: static const int percentage_bar_chart = 0x7f0d0119;
        public: static const int permissions_section = 0x7f0d00bc;
        public: static const int personal_section = 0x7f0d0249;
        public: static const int phase2 = 0x7f0d01f1;
        public: static const int phonebook_sharing_message = 0x7f0d002f;
        public: static const int pin_values_hint = 0x7f0d0031;
        public: static const int pingHostname = 0x7f0d0139;
        public: static const int pingIpAddr = 0x7f0d0138;
        public: static const int ping_test = 0x7f0d0137;
        public: static const int pinned_header = 0x7f0d00cc;
        public: static const int pkg_list = 0x7f0d01a8;
        public: static const int pkgicon = 0x7f0d00e7;
        public: static const int pkgname = 0x7f0d00ea;
        public: static const int port = 0x7f0d0130;
        public: static const int power = 0x7f0d001e;
        public: static const int pref_left_button = 0x7f0d011c;
        public: static const int pref_radio = 0x7f0d011e;
        public: static const int pref_right_button = 0x7f0d011d;
        public: static const int preference_highlight_key = 0x7f0d0000;
        public: static const int preferredNetworkType = 0x7f0d014e;
        public: static const int prefs = 0x7f0d0181;
        public: static const int preview = 0x7f0d0093;
        public: static const int preview_text = 0x7f0d0038;
        public: static const int preview_viewport = 0x7f0d0036;
        public: static const int preview_window = 0x7f0d0037;
        public: static const int print_menu_item_add_printer = 0x7f0d0264;
        public: static const int print_menu_item_search = 0x7f0d0263;
        public: static const int print_menu_item_settings = 0x7f0d0265;
        public: static const int print_settings = 0x7f0d0252;
        public: static const int privacy_settings = 0x7f0d024e;
        public: static const int profileExpand = 0x7f0d00fd;
        public: static const int profile_owner_warning = 0x7f0d0085;
        public: static const int profile_spinner = 0x7f0d0186;
        public: static const int progress_bar = 0x7f0d0052;
        public: static const int prompt1 = 0x7f0d0173;
        public: static const int prompt2 = 0x7f0d0175;
        public: static const int prompt3 = 0x7f0d0177;
        public: static const int properties_fragment = 0x7f0d0039;
        public: static const int provider_icon = 0x7f0d0189;
        public: static const int provider_id = 0x7f0d018b;
        public: static const int proxy_exclusionlist = 0x7f0d01fd;
        public: static const int proxy_fields = 0x7f0d01fa;
        public: static const int proxy_hostname = 0x7f0d01fb;
        public: static const int proxy_pac = 0x7f0d0211;
        public: static const int proxy_pac_field = 0x7f0d0210;
        public: static const int proxy_port = 0x7f0d01fc;
        public: static const int proxy_settings = 0x7f0d01f8;
        public: static const int proxy_settings_fields = 0x7f0d01f6;
        public: static const int proxy_settings_title = 0x7f0d01f7;
        public: static const int proxy_warning_limited_support = 0x7f0d01f9;
        public: static const int radio_power = 0x7f0d014f;
        public: static const int received = 0x7f0d014c;
        public: static const int redact_sensitive = 0x7f0d015b;
        public: static const int refresh_smsc = 0x7f0d0156;
        public: static const int regulatoryInfo = 0x7f0d015e;
        public: static const int remember = 0x7f0d015f;
        public: static const int resets = 0x7f0d0147;
        public: static const int resource = 0x7f0d00c5;
        public: static const int rightSpacer = 0x7f0d008e;
        public: static const int right_button = 0x7f0d01a6;
        public: static const int ringer_description_text = 0x7f0d0103;
        public: static const int ringer_mute_button = 0x7f0d0104;
        public: static const int ringer_section = 0x7f0d0102;
        public: static const int ringer_volume_seekbar = 0x7f0d0105;
        public: static const int roaming = 0x7f0d0140;
        public: static const int routes = 0x7f0d01c4;
        public: static const int row_divider = 0x7f0d000f;
        public: static const int rssi = 0x7f0d022b;
        public: static const int running_processes = 0x7f0d00d2;
        public: static const int save = 0x7f0d0094;
        public: static const int save_login = 0x7f0d01c8;
        public: static const int scale = 0x7f0d0020;
        public: static const int scan_list = 0x7f0d0232;
        public: static const int scanning_progress = 0x7f0d011a;
        public: static const int scanning_progress_bar = 0x7f0d0215;
        public: static const int screen_compatibility_section = 0x7f0d00b9;
        public: static const int screen_pinning_description = 0x7f0d016d;
        public: static const int search = 0x7f0d0262;
        public: static const int search_domains = 0x7f0d01c2;
        public: static const int search_panel = 0x7f0d016e;
        public: static const int security = 0x7f0d01db;
        public: static const int security_fields = 0x7f0d01ea;
        public: static const int security_settings = 0x7f0d024b;
        public: static const int security_settings_billing_desc = 0x7f0d00bd;
        public: static const int security_settings_billing_list = 0x7f0d00be;
        public: static const int security_settings_desc = 0x7f0d00c0;
        public: static const int security_settings_list = 0x7f0d00c1;
        public: static const int security_settings_premium_sms_list = 0x7f0d00bf;
        public: static const int security_text = 0x7f0d01ee;
        public: static const int sendbroadcast = 0x7f0d00c6;
        public: static const int sent = 0x7f0d014b;
        public: static const int sentSinceReceived = 0x7f0d014d;
        public: static const int series = 0x7f0d0065;
        public: static const int server = 0x7f0d01b4;
        public: static const int service = 0x7f0d016a;
        public: static const int services = 0x7f0d012c;
        public: static const int settings_button = 0x7f0d011b;
        public: static const int settings_divider = 0x7f0d00fa;
        public: static const int setup = 0x7f0d01e3;
        public: static const int seven = 0x7f0d019f;
        public: static const int shortcut = 0x7f0d0127;
        public: static const int show_all = 0x7f0d015c;
        public: static const int show_options = 0x7f0d01c0;
        public: static const int show_owner_info_on_lockscreen_checkbox = 0x7f0d00ec;
        public: static const int show_password = 0x7f0d01dd;
        public: static const int show_password_layout = 0x7f0d020c;
        public: static const int signal = 0x7f0d012a;
        public: static const int sim_name = 0x7f0d00de;
        public: static const int sim_settings = 0x7f0d023b;
        public: static const int six = 0x7f0d019e;
        public: static const int size = 0x7f0d0168;
        public: static const int skip_button = 0x7f0d0118;
        public: static const int sms_over_ims = 0x7f0d0152;
        public: static const int smsc = 0x7f0d0157;
        public: static const int smsc_label = 0x7f0d0154;
        public: static const int snippet = 0x7f0d0169;
        public: static const int spacerBottom = 0x7f0d0047;
        public: static const int ssid = 0x7f0d01da;
        public: static const int ssid_layout = 0x7f0d01e9;
        public: static const int ssid_text = 0x7f0d01e8;
        public: static const int startactivity = 0x7f0d00c7;
        public: static const int staticip = 0x7f0d0200;
        public: static const int status = 0x7f0d001d;
        public: static const int storage_settings = 0x7f0d0243;
        public: static const int storage_usb = 0x7f0d0266;
        public: static const int stupid_padding = 0x7f0d0074;
        public: static const int subtitle = 0x7f0d012b;
        public: static const int successes = 0x7f0d0149;
        public: static const int summary = 0x7f0d0046;
        public: static const int supplicant_state = 0x7f0d022a;
        public: static const int sweep_limit = 0x7f0d0068;
        public: static const int sweep_warning = 0x7f0d0067;
        public: static const int switchWidget = 0x7f0d0016;
        public: static const int switch_bar = 0x7f0d017c;
        public: static const int switch_ime_button = 0x7f0d0050;
        public: static const int switch_text = 0x7f0d0187;
        public: static const int switch_widget = 0x7f0d0188;
        public: static const int syncStatusIcon = 0x7f0d0003;
        public: static const int sync_active = 0x7f0d0129;
        public: static const int sync_failed = 0x7f0d0128;
        public: static const int sync_settings_error_info = 0x7f0d0004;
        public: static const int systemSize = 0x7f0d0162;
        public: static const int systemSizePrefix = 0x7f0d0161;
        public: static const int system_expandable_list = 0x7f0d0194;
        public: static const int system_list = 0x7f0d0193;
        public: static const int system_progress = 0x7f0d0192;
        public: static const int system_section = 0x7f0d024f;
        public: static const int system_tab = 0x7f0d0191;
        public: static const int tabs = 0x7f0d0018;
        public: static const int tabs_container = 0x7f0d0075;
        public: static const int technology = 0x7f0d0024;
        public: static const int temperature = 0x7f0d0023;
        public: static const int text = 0x7f0d0030;
        public: static const int text_layout = 0x7f0d000a;
        public: static const int three = 0x7f0d019b;
        public: static const int tile_divider = 0x7f0d005f;
        public: static const int time_picker = 0x7f0d0081;
        public: static const int time_picker_title = 0x7f0d0080;
        public: static const int time_zone_button = 0x7f0d007a;
        public: static const int timestamp = 0x7f0d00e8;
        public: static const int timezone_auto_time = 0x7f0d0079;
        public: static const int timezone_dropdown_anchor = 0x7f0d0077;
        public: static const int title = 0x7f0d0035;
        public: static const int titleDivider = 0x7f0d00c8;
        public: static const int title_area = 0x7f0d0184;
        public: static const int topLayout = 0x7f0d003f;
        public: static const int top_divider = 0x7f0d0051;
        public: static const int top_divider_no_progress = 0x7f0d0216;
        public: static const int top_level = 0x7f0d0180;
        public: static const int top_padding = 0x7f0d0213;
        public: static const int top_padding_layout = 0x7f0d0212;
        public: static const int total_size_prefix = 0x7f0d00a4;
        public: static const int total_size_text = 0x7f0d00a6;
        public: static const int trash_user = 0x7f0d0126;
        public: static const int trusted_credential_status = 0x7f0d018f;
        public: static const int trusted_credential_subject_primary = 0x7f0d018d;
        public: static const int trusted_credential_subject_secondary = 0x7f0d018e;
        public: static const int tts_engine_pref = 0x7f0d011f;
        public: static const int tts_engine_pref_text = 0x7f0d0121;
        public: static const int tts_engine_radiobutton = 0x7f0d0120;
        public: static const int tts_engine_settings = 0x7f0d0122;
        public: static const int two = 0x7f0d019a;
        public: static const int two_buttons_panel = 0x7f0d00f0;
        public: static const int type = 0x7f0d00dd;
        public: static const int typeSpinner = 0x7f0d01a7;
        public: static const int type_security = 0x7f0d01ed;
        public: static const int type_ssid = 0x7f0d01e7;
        public: static const int update = 0x7f0d0227;
        public: static const int update_smsc = 0x7f0d0155;
        public: static const int uptime = 0x7f0d0025;
        public: static const int usage_time = 0x7f0d01ab;
        public: static const int user_cert = 0x7f0d01f3;
        public: static const int user_dict_settings_add_dialog_top = 0x7f0d01ac;
        public: static const int user_dictionary_add_shortcut = 0x7f0d01b0;
        public: static const int user_dictionary_add_shortcut_label = 0x7f0d01af;
        public: static const int user_dictionary_add_word_grid = 0x7f0d01ae;
        public: static const int user_dictionary_add_word_text = 0x7f0d01ad;
        public: static const int user_expandable_list = 0x7f0d0198;
        public: static const int user_id = 0x7f0d018a;
        public: static const int user_limits_fragment = 0x7f0d01b2;
        public: static const int user_list = 0x7f0d0197;
        public: static const int user_name = 0x7f0d0098;
        public: static const int user_photo = 0x7f0d0097;
        public: static const int user_progress = 0x7f0d0196;
        public: static const int user_settings = 0x7f0d0246;
        public: static const int user_tab = 0x7f0d0195;
        public: static const int username = 0x7f0d01c6;
        public: static const int value = 0x7f0d00ef;
        public: static const int vertical = 0x7f0d0002;
        public: static const int voltage = 0x7f0d0022;
        public: static const int vpn_create = 0x7f0d0267;
        public: static const int vpn_lockdown = 0x7f0d0268;
        public: static const int warning_low_charge = 0x7f0d0056;
        public: static const int warning_unplugged = 0x7f0d0057;
        public: static const int widget_list = 0x7f0d00ca;
        public: static const int wifi_advanced_fields = 0x7f0d020f;
        public: static const int wifi_advanced_toggle = 0x7f0d020d;
        public: static const int wifi_advanced_togglebox = 0x7f0d020e;
        public: static const int wifi_assistant_card = 0x7f0d01de;
        public: static const int wifi_assistant_text = 0x7f0d01e1;
        public: static const int wifi_config_ui = 0x7f0d021c;
        public: static const int wifi_required_info = 0x7f0d0183;
        public: static const int wifi_settings = 0x7f0d0239;
        public: static const int wifi_settings_fragment_layout = 0x7f0d021a;
        public: static const int wifi_setup_add_network = 0x7f0d0222;
        public: static const int wifi_setup_cancel = 0x7f0d0223;
        public: static const int wifi_setup_connect = 0x7f0d0224;
        public: static const int wifi_setup_fragment = 0x7f0d021b;
        public: static const int wifi_setup_refresh_list = 0x7f0d0226;
        public: static const int wifi_setup_skip_or_next = 0x7f0d0225;
        public: static const int wifi_setup_title = 0x7f0d0214;
        public: static const int wifi_state = 0x7f0d0228;
        public: static const int wifi_wps = 0x7f0d0269;
        public: static const int wireless_section = 0x7f0d0238;
        public: static const int wireless_settings = 0x7f0d023e;
        public: static const int wps_dialog_btn = 0x7f0d0236;
        public: static const int wps_dialog_txt = 0x7f0d0233;
        public: static const int wps_progress_bar = 0x7f0d0235;
        public: static const int wps_timeout_bar = 0x7f0d0234;
        public: static const int zero = 0x7f0d01a3;
    };
    public: class integer {
        public: static const int bluetooth_name_length = 0x7f0b0005;
        /**  Dashboard number of columns 
 Dashboard number of columns 
 Dashboard number of columns 
 Dashboard number of columns 
         */
        public: static const int dashboard_num_columns = 0x7f0b0001;
        public: static const int keyguard_appwidget_picker_cols = 0x7f0b0006;
        /**  TODO: This is purely enforced by the interface, and does not affect what
         strings may be inserted into the actual content provider.
         With the addition of shortcuts, it seems more likely that users will
         find this limiting; it would be good to have the interface work with
         very long strings too. 
         */
        public: static const int maximum_user_dictionary_word_length = 0x7f0b0000;
        /**  Scrollbar style OUTSIDE_OVERLAY 
         */
        public: static const int preference_scrollbar_style = 0x7f0b0007;
        /**  Weight of the left pane in a multi-pane preference layout. 
 Weight of the left pane in a multi-pane preference layout. 
         */
        public: static const int preferences_left_pane_weight = 0x7f0b0002;
        /**  Weight of the right pane in a multi-pane preference layout. So the split is 40:60 
 Weight of the right pane in a multi-pane preference layout. So the split is 1:2 
         */
        public: static const int preferences_right_pane_weight = 0x7f0b0003;
        /**  Sim Card Name length 
         */
        public: static const int sim_name_length = 0x7f0b0004;
    };
    public: class layout {
        public: static const int account_preference = 0x7f040000;
        public: static const int account_sync_screen = 0x7f040001;
        public: static const int account_type_preference = 0x7f040002;
        public: static const int add_account_screen = 0x7f040003;
        public: static const int android_beam = 0x7f040004;
        public: static const int apn_preference_layout = 0x7f040005;
        public: static const int app_notification_header = 0x7f040006;
        public: static const int app_ops_details = 0x7f040007;
        public: static const int app_ops_details_item = 0x7f040008;
        public: static const int app_ops_item = 0x7f040009;
        public: static const int app_ops_summary = 0x7f04000a;
        public: static const int app_percentage_item = 0x7f04000b;
        public: static const int app_preference_item = 0x7f04000c;
        public: static const int apps_spinner_dropdown_item = 0x7f04000d;
        public: static const int apps_spinner_item = 0x7f04000e;
        public: static const int band_mode = 0x7f04000f;
        public: static const int battery_history_chart = 0x7f040010;
        public: static const int battery_info = 0x7f040011;
        public: static const int bluetooth_access = 0x7f040012;
        public: static const int bluetooth_device_picker = 0x7f040013;
        public: static const int bluetooth_device_settings = 0x7f040014;
        public: static const int bluetooth_device_settings_header = 0x7f040015;
        public: static const int bluetooth_pin_confirm = 0x7f040016;
        public: static const int bluetooth_pin_entry = 0x7f040017;
        public: static const int bluetooth_preference_category = 0x7f040018;
        public: static const int bookmark_picker_item = 0x7f040019;
        public: static const int captioning_preview = 0x7f04001a;
        public: static const int choose_lock_password = 0x7f04001b;
        public: static const int choose_lock_pattern = 0x7f04001c;
        public: static const int color_picker_item = 0x7f04001d;
        public: static const int confirm_lock_password = 0x7f04001e;
        public: static const int confirm_lock_pattern = 0x7f04001f;
        public: static const int credentials_dialog = 0x7f040020;
        public: static const int credentials_disallowed_preference_screen = 0x7f040021;
        public: static const int crypt_keeper_blank = 0x7f040022;
        public: static const int crypt_keeper_confirm = 0x7f040023;
        public: static const int crypt_keeper_emergency_button = 0x7f040024;
        public: static const int crypt_keeper_password_entry = 0x7f040025;
        public: static const int crypt_keeper_password_field = 0x7f040026;
        public: static const int crypt_keeper_pattern_entry = 0x7f040027;
        public: static const int crypt_keeper_pattern_field = 0x7f040028;
        public: static const int crypt_keeper_pin_entry = 0x7f040029;
        public: static const int crypt_keeper_pin_field = 0x7f04002a;
        public: static const int crypt_keeper_progress = 0x7f04002b;
        public: static const int crypt_keeper_settings = 0x7f04002c;
        public: static const int crypt_keeper_status = 0x7f04002d;
        public: static const int custom_preference = 0x7f04002e;
        public: static const int dashboard = 0x7f04002f;
        public: static const int dashboard_category = 0x7f040030;
        public: static const int dashboard_tile = 0x7f040031;
        public: static const int data_usage_app_title = 0x7f040032;
        public: static const int data_usage_bytes_editor = 0x7f040033;
        public: static const int data_usage_chart = 0x7f040034;
        public: static const int data_usage_cycle_editor = 0x7f040035;
        public: static const int data_usage_cycle_item = 0x7f040036;
        public: static const int data_usage_cycle_item_dropdown = 0x7f040037;
        public: static const int data_usage_cycles = 0x7f040038;
        public: static const int data_usage_detail = 0x7f040039;
        public: static const int data_usage_header = 0x7f04003a;
        public: static const int data_usage_item = 0x7f04003b;
        public: static const int data_usage_summary = 0x7f04003c;
        public: static const int date_time_settings_setupwizard = 0x7f04003d;
        public: static const int date_time_setup_custom_list_item_2 = 0x7f04003e;
        public: static const int device_admin_add = 0x7f04003f;
        public: static const int device_admin_item = 0x7f040040;
        public: static const int device_admin_settings = 0x7f040041;
        public: static const int dialog_edittext = 0x7f040042;
        public: static const int display = 0x7f040043;
        public: static const int dock_audio_media_enable_dialog = 0x7f040044;
        public: static const int dream_info_row = 0x7f040045;
        public: static const int edit_user_info_dialog_content = 0x7f040046;
        public: static const int edit_user_photo_popup_item = 0x7f040047;
        public: static const int empty_print_state = 0x7f040048;
        public: static const int empty_printers_list_service_enabled = 0x7f040049;
        public: static const int enable_accessibility_service_dialog_content = 0x7f04004a;
        public: static const int encryption_interstitial = 0x7f04004b;
        public: static const int grid_picker_dialog = 0x7f04004c;
        public: static const int installed_app_details = 0x7f04004d;
        public: static const int intent_sender = 0x7f04004e;
        public: static const int keyboard_layout_dialog_switch_hint = 0x7f04004f;
        public: static const int keyguard_appwidget_item = 0x7f040050;
        public: static const int keyguard_appwidget_picker_layout = 0x7f040051;
        public: static const int locale_picker = 0x7f040052;
        public: static const int location_list_no_item = 0x7f040053;
        public: static const int mac_preference = 0x7f040054;
        public: static const int manage_accounts_screen = 0x7f040055;
        public: static const int manage_applications_apps = 0x7f040056;
        public: static const int manage_applications_content = 0x7f040057;
        public: static const int manage_applications_item = 0x7f040058;
        public: static const int manage_applications_running = 0x7f040059;
        public: static const int managed_service_item = 0x7f04005a;
        public: static const int managed_service_settings = 0x7f04005b;
        public: static const int master_clear = 0x7f04005c;
        public: static const int master_clear_account = 0x7f04005d;
        public: static const int master_clear_confirm = 0x7f04005e;
        public: static const int master_clear_disallowed_screen = 0x7f04005f;
        public: static const int media_format_final = 0x7f040060;
        public: static const int media_format_primary = 0x7f040061;
        public: static const int multi_sim_dialog = 0x7f040062;
        public: static const int nfc_payment = 0x7f040063;
        public: static const int nfc_payment_option = 0x7f040064;
        public: static const int notification_app = 0x7f040065;
        public: static const int notification_app_list = 0x7f040066;
        public: static const int notification_app_section = 0x7f0400d8;
        public: static const int notification_log_row = 0x7f040067;
        public: static const int ownerinfo = 0x7f040068;
        public: static const int pick_item = 0x7f040069;
        public: static const int power_usage_action_item = 0x7f04006a;
        public: static const int power_usage_detail_item_text = 0x7f04006b;
        public: static const int power_usage_details = 0x7f04006c;
        public: static const int power_usage_message_item = 0x7f04006d;
        public: static const int power_usage_package_item = 0x7f04006e;
        public: static const int preference = 0x7f04006f;
        public: static const int preference_app_percentage = 0x7f040070;
        public: static const int preference_app_restrictions = 0x7f040071;
        public: static const int preference_batteryhistory = 0x7f040072;
        public: static const int preference_bluetooth = 0x7f040073;
        public: static const int preference_bluetooth_profile = 0x7f040074;
        public: static const int preference_bt_icon = 0x7f040075;
        public: static const int preference_color = 0x7f040076;
        public: static const int preference_dialog_ringervolume = 0x7f040077;
        public: static const int preference_empty_list = 0x7f040078;
        public: static const int preference_header_button_item = 0x7f040079;
        public: static const int preference_header_item = 0x7f04007a;
        public: static const int preference_header_switch_item = 0x7f04007b;
        public: static const int preference_home_app = 0x7f04007c;
        public: static const int preference_icon = 0x7f04007d;
        public: static const int preference_inputmethod = 0x7f04007e;
        public: static const int preference_linearcolor = 0x7f04007f;
        public: static const int preference_list_fragment = 0x7f040080;
        public: static const int preference_memoryusage = 0x7f040081;
        public: static const int preference_progress_category = 0x7f040082;
        public: static const int preference_rename_widget = 0x7f040083;
        public: static const int preference_settings_checkbox_widget = 0x7f040084;
        public: static const int preference_spellchecker = 0x7f040085;
        public: static const int preference_spellchecker_widget = 0x7f040086;
        public: static const int preference_start_widget = 0x7f040087;
        public: static const int preference_tts_engine = 0x7f040088;
        public: static const int preference_user_delete_widget = 0x7f040089;
        public: static const int preference_widget_radiobutton = 0x7f04008a;
        public: static const int preference_widget_shortcut = 0x7f04008b;
        public: static const int preference_widget_sync_toggle = 0x7f04008c;
        public: static const int preference_widget_wifi_signal = 0x7f04008d;
        public: static const int preset_picker_item = 0x7f04008e;
        public: static const int print_job_summary = 0x7f04008f;
        public: static const int printer_dropdown_item = 0x7f040090;
        public: static const int process_stats_details = 0x7f040091;
        public: static const int process_stats_mem_details = 0x7f040092;
        public: static const int profile_icon_small = 0x7f040093;
        public: static const int proxy = 0x7f040094;
        public: static const int radio_info = 0x7f040095;
        public: static const int redaction_interstitial = 0x7f040096;
        public: static const int regulatory_info = 0x7f040097;
        public: static const int remember_dock_setting = 0x7f040098;
        public: static const int running_processes_header = 0x7f040099;
        public: static const int running_processes_item = 0x7f04009a;
        public: static const int running_processes_view = 0x7f04009b;
        public: static const int running_service_details = 0x7f04009c;
        public: static const int running_service_details_process = 0x7f04009d;
        public: static const int running_service_details_service = 0x7f04009e;
        public: static const int screen_pinning_instructions = 0x7f04009f;
        public: static const int search_panel = 0x7f0400a0;
        public: static const int search_panel_results_header = 0x7f0400a1;
        public: static const int search_panel_suggestions_header = 0x7f0400a2;
        public: static const int search_result_item = 0x7f0400a3;
        public: static const int search_suggestion_item = 0x7f0400a4;
        public: static const int separator_label = 0x7f0400a5;
        public: static const int set_backup_pw = 0x7f0400a6;
        public: static const int settings_main_dashboard = 0x7f0400a7;
        public: static const int settings_main_prefs = 0x7f0400a8;
        public: static const int settings_storage_miscfiles = 0x7f0400a9;
        public: static const int settings_storage_miscfiles_list = 0x7f0400aa;
        public: static const int settings_top_level = 0x7f0400ab;
        public: static const int setup_preference = 0x7f0400ac;
        public: static const int setup_wifi_add_network = 0x7f0400ad;
        public: static const int setup_wizard_header = 0x7f0400ae;
        public: static const int spinner_view = 0x7f0400af;
        public: static const int switch_bar = 0x7f0400b0;
        public: static const int tab_widget = 0x7f0400b1;
        public: static const int text_description_preference = 0x7f0400b2;
        public: static const int title = 0x7f0400b3;
        public: static const int trust_agent_item = 0x7f0400b4;
        public: static const int trusted_credential = 0x7f0400b5;
        public: static const int trusted_credential_details = 0x7f0400b6;
        public: static const int trusted_credentials = 0x7f0400b7;
        public: static const int twelve_key_entry = 0x7f0400b8;
        public: static const int two_buttons_panel = 0x7f0400b9;
        public: static const int two_line_list_item = 0x7f0400ba;
        public: static const int usage_stats = 0x7f0400bb;
        public: static const int usage_stats_item = 0x7f0400bc;
        public: static const int user_dictionary_add_word = 0x7f0400bd;
        public: static const int user_dictionary_add_word_fullscreen = 0x7f0400be;
        public: static const int user_dictionary_item = 0x7f0400bf;
        public: static const int user_info_header = 0x7f0400c0;
        public: static const int user_limits = 0x7f0400c1;
        public: static const int user_preference = 0x7f0400c2;
        public: static const int vpn_dialog = 0x7f0400c3;
        public: static const int vpn_lockdown_editor = 0x7f0400c4;
        public: static const int weak_biometric_fallback_header = 0x7f0400c5;
        public: static const int widget = 0x7f0400c6;
        public: static const int wifi_advance_layout = 0x7f0400c7;
        public: static const int wifi_ap_dialog = 0x7f0400c8;
        public: static const int wifi_api_test = 0x7f0400c9;
        public: static const int wifi_assistant_card = 0x7f0400ca;
        public: static const int wifi_config_info = 0x7f0400cb;
        public: static const int wifi_config_ui_for_setup_wizard = 0x7f0400cc;
        public: static const int wifi_dialog = 0x7f0400cd;
        public: static const int wifi_dialog_row = 0x7f0400ce;
        public: static const int wifi_display_options = 0x7f0400cf;
        public: static const int wifi_display_preference = 0x7f0400d0;
        public: static const int wifi_notify_scan_mode = 0x7f0400d1;
        public: static const int wifi_settings_for_setup_wizard_xl = 0x7f0400d2;
        public: static const int wifi_setup_custom_list_item_1 = 0x7f0400d3;
        public: static const int wifi_status_test = 0x7f0400d4;
        public: static const int wifi_wps_dialog = 0x7f0400d5;
        public: static const int write_wifi_config_to_nfc = 0x7f0400d6;
        public: static const int zen_downtime_day = 0x7f0400d7;
    };
    public: class menu {
        public: static const int account_settings = 0x7f100000;
        public: static const int data_usage = 0x7f100001;
        public: static const int misc_files_menu = 0x7f100002;
        public: static const int options_menu = 0x7f100003;
        public: static const int print_service_settings = 0x7f100004;
        public: static const int storage = 0x7f100005;
        public: static const int vpn = 0x7f100006;
        public: static const int wifi_setup = 0x7f100007;
    };
    public: class mipmap {
        public: static const int ic_launcher_settings = 0x7f030000;
    };
    public: class plurals {
        /**  Error shown when in PASSWORD mode and password doesn't contain the required number of letters 
         */
        public: static const int lockpassword_password_requires_letters = 0x7f0e0001;
        /**  Error shown when in PASSWORD mode and password doesn't contain the required number of lowercase letters 
         */
        public: static const int lockpassword_password_requires_lowercase = 0x7f0e0002;
        /**  Error shown when in PASSWORD mode and password doesn't contain the required number of non-letter characters 
         */
        public: static const int lockpassword_password_requires_nonletter = 0x7f0e0006;
        /**  Error shown when in PASSWORD mode and password doesn't contain the required number of numerical digits 
         */
        public: static const int lockpassword_password_requires_numeric = 0x7f0e0004;
        /**  Error shown when in PASSWORD mode and password doesn't contain the required number of special symbols 
         */
        public: static const int lockpassword_password_requires_symbols = 0x7f0e0005;
        /**  Error shown when in PASSWORD mode and password doesn't contain the required number of uppercase letters 
         */
        public: static const int lockpassword_password_requires_uppercase = 0x7f0e0003;
        /**  Summary of preference to manage condition providers, when one or more are enabled 
         */
        public: static const int manage_condition_providers_summary_nonzero = 0x7f0e0009;
        /**  Summary of preference to manage notification listeners, when one or more are enabled
         and are therefore able to read the user's notifications 
         */
        public: static const int manage_notification_access_summary_nonzero = 0x7f0e0008;
        /**  [CHAR LIMIT=NONE] Device Info screen. Countdown for user taps to enable development settings 
         */
        public: static const int show_dev_countdown = 0x7f0e0000;
        /**  Instructions telling the user that they entered the wrong SIM PIN while trying to unlock the keyguard.  Displayed in a dialog box.  [CHAR LIMIT=100] 
         */
        public: static const int wrong_pin_code = 0x7f0e0007;
    };
    public: class raw {
        public: static const int media_volume = 0x7f060000;
    };
    public: class string {
        /**  Main Settings screen setting option title for the item to take you to the Accounts screen [CHAR LIMIT=22] 
         */
        public: static const int Accounts_settings_title = 0x7f0a013e;
        /**  Main settings screen, setting title for the user to go into the About phone screen 
         */
        public: static const int about_settings = 0x7f0a0426;
        /**  Main settings screen, setting summary for the user to go into the About phone screen
         */
        public: static const int about_settings_summary = 0x7f0a0427;
        /**  Sound & display settings screen, accelerometer-based rotation summary text when check box is clear 
         */
        public: static const int accelerometer_summary_off = 0x7f0a031a;
        /**  Sound & display settings screen, accelerometer-based rotation summary text when check box is selected 
         */
        public: static const int accelerometer_summary_on = 0x7f0a0319;
        /**  Sound & display settings screen, accelerometer-based rotation check box label 
         */
        public: static const int accelerometer_title = 0x7f0a0318;
        /**  Access point names title.  [CHAR LIMIT=50] 
         */
        public: static const int access_point_names = 0x7f0a0893;
        /**  Title for the accessibility preference screen to enable video captioning. [CHAR LIMIT=35] 
         */
        public: static const int accessibility_captioning_title = 0x7f0a058e;
        /**  Subtitle for the accessibility preference to configure display color space correction. [CHAR LIMIT=NONE] 
         */
        public: static const int accessibility_display_daltonizer_preference_subtitle = 0x7f0a05a0;
        /**  Title for the accessibility preference to configure display color space correction. [CHAR LIMIT=NONE] 
         */
        public: static const int accessibility_display_daltonizer_preference_title = 0x7f0a059f;
        /**  Subtitle for the accessibility preference to configure display color inversion. [CHAR LIMIT=NONE] 
         */
        public: static const int accessibility_display_inversion_preference_subtitle = 0x7f0a059e;
        /**  Title for the accessibility preference to configure display color inversion. [CHAR LIMIT=NONE] 
         */
        public: static const int accessibility_display_inversion_preference_title = 0x7f0a059d;
        /**  Title for the accessibility preference category of display related preferences. [CHAR LIMIT=25] 
         */
        public: static const int accessibility_display_title = 0x7f0a058d;
        /**  Summary when an accessibility feature or ime is not permitted. [CHAR LIMIT=40] 
         */
        public: static const int accessibility_feature_or_input_method_not_allowed = 0x7f0a05ac;
        /**  Summary for the disabled state of an accessibility feature. [CHAR LIMIT=10] 
         */
        public: static const int accessibility_feature_state_off = 0x7f0a05ab;
        /**  Summary for the enabled state of an accessibility feature. [CHAR LIMIT=10] 
         */
        public: static const int accessibility_feature_state_on = 0x7f0a05aa;
        /**   Description for the preference screen to enable the global geture taht turns on accessibility. [CHAR LIMIT=none] 
         */
        public: static const int accessibility_global_gesture_preference_description = 0x7f0a0594;
        /**  Summary for the preference screen to enable the global geture that turns on accessibility (off state). [CHAR LIMIT=35] 
         */
        public: static const int accessibility_global_gesture_preference_summary_off = 0x7f0a0593;
        /**  Summary for the preference to enable the global geture that turns on accessibility (on state). [CHAR LIMIT=60] 
         */
        public: static const int accessibility_global_gesture_preference_summary_on = 0x7f0a0592;
        /**  Title for the preference to enable the global geture that turns on accessibility. [CHAR LIMIT=35] 
         */
        public: static const int accessibility_global_gesture_preference_title = 0x7f0a0591;
        /**  Title for accessibility preference to choose long-press delay i.e. timeout before it is detected. [CHAR LIMIT=35] 
         */
        public: static const int accessibility_long_press_timeout_preference_title = 0x7f0a059c;
        /**  Title for accessibility menu item to lauch a settings activity. [CHAR LIMIT=15] 
         */
        public: static const int accessibility_menu_item_settings = 0x7f0a05a9;
        /**  Title for the prompt shown as a placeholder if no accessibility serivices are installed. [CHAR LIMIT=50] 
         */
        public: static const int accessibility_no_services_installed = 0x7f0a05d6;
        /**  Title for the accessibility preference to power button to end a call. [CHAR LIMIT=35] 
         */
        public: static const int accessibility_power_button_ends_call_prerefence_title = 0x7f0a059a;
        /**  Summary for the accessibility preference screen to enable screen magnification. [CHAR LIMIT=none] 
         */
        public: static const int accessibility_screen_magnification_summary = 0x7f0a0590;
        /**  Title for the accessibility preference screen to enable screen magnification. [CHAR LIMIT=35] 
         */
        public: static const int accessibility_screen_magnification_title = 0x7f0a058f;
        /**  Default description for an accessibility serivice if the latter doesn't provide one. [CHAR LIMIT=NONE] 
         */
        public: static const int accessibility_service_default_description = 0x7f0a05d7;
        public: static const int accessibility_service_no_apps_message = 0x7f0a0982;
        public: static const int accessibility_service_no_apps_title = 0x7f0a0981;
        /**  Title for the accessibility preference category of accessibility services. [CHAR LIMIT=25] 
         */
        public: static const int accessibility_services_title = 0x7f0a058b;
        /**  Settings title in main settings screen for accessibility settings 
         */
        public: static const int accessibility_settings = 0x7f0a0589;
        /**  Settings title for accessibility settings screen 
         */
        public: static const int accessibility_settings_title = 0x7f0a058a;
        /**  Content description of the disabled sync icon for accessibility. [CHAR LIMIT=NONE] 
         */
        public: static const int accessibility_sync_disabled = 0x7f0a0726;
        /**  Content description of the enabled sync icon for accessibility. [CHAR LIMIT=NONE] 
         */
        public: static const int accessibility_sync_enabled = 0x7f0a0725;
        /**  Content description of the disabled sync icon for accessibility. [CHAR LIMIT=NONE] 
         */
        public: static const int accessibility_sync_error = 0x7f0a0728;
        /**  Content description of the in progress sync icon for accessibility. [CHAR LIMIT=NONE] 
         */
        public: static const int accessibility_sync_in_progress = 0x7f0a0727;
        /**  Title for the accessibility preference category of system related preferences. [CHAR LIMIT=25] 
         */
        public: static const int accessibility_system_title = 0x7f0a058c;
        /**  Title for the accessibility preference to high contrast text. [CHAR LIMIT=35] 
         */
        public: static const int accessibility_toggle_high_text_contrast_preference_title = 0x7f0a0596;
        /**  Title for the accessibility preference to enable large text. [CHAR LIMIT=35] 
         */
        public: static const int accessibility_toggle_large_text_preference_title = 0x7f0a0595;
        /**  Summary for the accessibility preference to auto update screen magnification. [CHAR LIMIT=50] 
         */
        public: static const int accessibility_toggle_screen_magnification_auto_update_preference_summary = 0x7f0a0599;
        /**  Title for the accessibility preference to auto update screen magnification. [CHAR LIMIT=35] 
         */
        public: static const int accessibility_toggle_screen_magnification_auto_update_preference_title = 0x7f0a0598;
        /**  Title for the accessibility preference to enable screen magnification. [CHAR LIMIT=35] 
         */
        public: static const int accessibility_toggle_screen_magnification_preference_title = 0x7f0a0597;
        /**  Title for the accessibility preference to speak passwords. [CHAR LIMIT=35] 
         */
        public: static const int accessibility_toggle_speak_password_preference_title = 0x7f0a059b;
        /**  Account settings header. [CHAR LIMIT=30] 
         */
        public: static const int account_settings = 0x7f0a0312;
        /**   Title for menu option to enable global auto-sync of personal account data [CHAR LIMIT=30] 
         */
        public: static const int account_settings_menu_auto_sync = 0x7f0a07ab;
        /**   Title for menu option to enable global auto-sync of personal account data [CHAR LIMIT=30] 
         */
        public: static const int account_settings_menu_auto_sync_personal = 0x7f0a07ac;
        /**   Title for menu option to enable global auto-sync of work account data [CHAR LIMIT=30] 
         */
        public: static const int account_settings_menu_auto_sync_work = 0x7f0a07ad;
        /**  Main Settings screen setting option title for the item to take you to the accounts screen [CHAR LIMIT=22] 
         */
        public: static const int account_settings_title = 0x7f0a0140;
        /**  Account specific sync settings title [CHAR LIMIT=35] 
         */
        public: static const int account_sync_settings_title = 0x7f0a072b;
        /**  Label for screen showing the active device policy 
         */
        public: static const int active_device_admin_msg = 0x7f0a06f4;
        /**  Title for settings of active input methods in each IME [CHAR LIMIT=35] 
         */
        public: static const int active_input_method_subtypes = 0x7f0a0545;
        /**  Displayed when user launches a widget configuration activity that was uninstalled 
         */
        public: static const int activity_not_found = 0x7f0a0461;
        /**  The title of the dialog to pick an activity.  This is shown when there are multiple activities that can do a particular action.  For example, suppose you click on the "Share" menu item in the Browser.  Since you can share the webpage URL via many communication methods, this dialog would come up with choices like "Email", "IM", etc.  This is a generic message, and the previous example is a single possible scenario (so please don't assume it's for the browser or anything :) ). 
         */
        public: static const int activity_picker_label = 0x7f0a00f2;
        /**  Message of dialog confirming that user wants to revoke access to adb from all computers they have authorized 
         */
        public: static const int adb_keys_warning_message = 0x7f0a056c;
        /**  Warning text to user about the implications of enabling USB debugging 
         */
        public: static const int adb_warning_message = 0x7f0a056b;
        /**  Title of warning dialog about the implications of enabling USB debugging 
         */
        public: static const int adb_warning_title = 0x7f0a056a;
        /**  Button label to add an account [CHAR LIMIT=20] 
         */
        public: static const int add_account_label = 0x7f0a072d;
        /**  Label for button to set the active device admin 
         */
        public: static const int add_device_admin = 0x7f0a06fd;
        /**  Label for screen showing to add device policy 
         */
        public: static const int add_device_admin_msg = 0x7f0a06fc;
        /**  Warning when trying to add a profile owner admin after setup has completed. [CHAR LIMIT=none] 
         */
        public: static const int adding_profile_owner_warning = 0x7f0a0702;
        public: static const int additional_system_update = 0x7f0a0000;
        public: static const int additional_system_update_menu = 0x7f0a0001;
        /**  A menu item in "About phone" that allows the user to update the phone with settings
    from their cell phone carrier. The use of the string is similar to the string
    "system_update_settings_list_item_title" in this project. [CHAR LIMIT=25] 
         */
        public: static const int additional_system_update_settings_list_item_title = 0x7f0a081a;
        /**  Title of preference group for advance security settings [CHAR LIMIT=30] 
         */
        public: static const int advanced_security_title = 0x7f0a06c8;
        /**  Applications settings screen, setting check box title. If checked, applications show more settings options. 
         */
        public: static const int advanced_settings = 0x7f0a046c;
        /**  Applications settings screen, setting check box summary.  This is the summary for "Advanced settings" checkbox  
         */
        public: static const int advanced_settings_summary = 0x7f0a046d;
        /**  Wireless controls settings screen, setting check box label 
         */
        public: static const int airplane_mode = 0x7f0a0104;
        /**  Sound & notification > Sound section: Title for the option managing alarm volume. [CHAR LIMIT=30] 
         */
        public: static const int alarm_volume_option_title = 0x7f0a08fb;
        /**  Sound settings screen, alarm volume slider title 
         */
        public: static const int alarm_volume_title = 0x7f0a02f7;
        /**  Sound settings screen, volume title 
         */
        public: static const int all_volume_title = 0x7f0a02ea;
        /**  Strings for Dialog allow button 
         */
        public: static const int allow = 0x7f0a0009;
        /**  Message in dialog that pops up when an app requests permission to bind a widget [CHAR LIMIT=NONE] 
         */
        public: static const int allow_bind_app_widget_activity_allow_bind = 0x7f0a057a;
        /**  Title in dialog that pops up when an app requests permission to bind a widget [CHAR LIMIT=NONE] 
         */
        public: static const int allow_bind_app_widget_activity_allow_bind_title = 0x7f0a0579;
        /**  Text for checkbox that pops up when an app requests permission to bind a widget [CHAR LIMIT=NONE] 
         */
        public: static const int allow_bind_app_widget_activity_always_allow_bind = 0x7f0a057b;
        /**  check box to allow data usage when roaming [CHAR LIMIT=41] 
         */
        public: static const int allow_data_usage_title = 0x7f0a010c;
        /**  Setting Checkbox title whether to allow mock locations 
         */
        public: static const int allow_mock_location = 0x7f0a0567;
        /**  setting Checkbox summary whether to allow mock locations  
         */
        public: static const int allow_mock_location_summary = 0x7f0a0568;
        /**  AlertDialog message for warning user when enabling usage access [CHAR LIMIT=NONE] 
         */
        public: static const int allow_usage_access_message = 0x7f0a06dd;
        /**  AlertDialog title for warning user when enabling usage access [CHAR LIMIT=30] 
         */
        public: static const int allow_usage_access_title = 0x7f0a06dc;
        /**  Manage applications, individual application info screen, screen, message text under Launch by default heading. This is present if the app was given user permission to create widgets. 
         */
        public: static const int always_allow_bind_appwidgets_text = 0x7f0a0486;
        /**  Amber alerts summary.  [CHAR LIMIT=60] 
         */
        public: static const int amber_alerts_summary = 0x7f0a088b;
        /**  Amber alerts title.  [CHAR LIMIT=30] 
         */
        public: static const int amber_alerts_title = 0x7f0a088a;
        /**  Used to describe the enabled state of the Android Beam feature when NFC, which it relies on, is turned off [CHAR LIMIT=NONE] 
         */
        public: static const int android_beam_disabled_summary = 0x7f0a0214;
        /**  Explanation of the Android Beam feature in the Android Beam settings panel. The use of "beam" here is as a verb and not considered trademarked. [CHAR LIMIT=NONE] 
         */
        public: static const int android_beam_explained = 0x7f0a0216;
        /**  Used in the Android Beam sharing preferences screen. This phrase is a trademark. [CHAR LIMIT=32] 
         */
        public: static const int android_beam_label = 0x7f0a0215;
        /**  Used to describe the off state of the Android Beam feature [CHAR LIMIT=NONE] 
         */
        public: static const int android_beam_off_summary = 0x7f0a0213;
        /**  Used to describe the on state of the Android Beam feature [CHAR LIMIT=NONE] 
         */
        public: static const int android_beam_on_summary = 0x7f0a0212;
        /**  Used to enter the Android Beam sharing preferences screen. This phrase is a trademark. [CHAR LIMIT=32] 
         */
        public: static const int android_beam_settings_title = 0x7f0a0211;
        /**  UI debug setting: scaling factor for all Animator-based animations [CHAR LIMIT=25] 
         */
        public: static const int animator_duration_scale_title = 0x7f0a078e;
        /**  Edit access point labels: The actual access point name
         */
        public: static const int apn_apn = 0x7f0a03a4;
        /**  Edit acces  point labels: Authenticaton type
         */
        public: static const int apn_auth_type = 0x7f0a03af;
        /**  Authentication Typs: CHAP 
         */
        public: static const int apn_auth_type_chap = 0x7f0a03b2;
        /**  Authentication Typs: None 
         */
        public: static const int apn_auth_type_none = 0x7f0a03b0;
        /**  Authentication Typs: PAP 
         */
        public: static const int apn_auth_type_pap = 0x7f0a03b1;
        /**  Authentication Typs: PAP or CHAP 
         */
        public: static const int apn_auth_type_pap_chap = 0x7f0a03b3;
        /**  Screen title after user selects APNs setting option 
         */
        public: static const int apn_edit = 0x7f0a03a1;
        /**  Edit access point labels: The port number of the proxy to use for this APN 
         */
        public: static const int apn_http_port = 0x7f0a03a6;
        /**  Edit access point labels: The addess of the proxy to use for this APN 
         */
        public: static const int apn_http_proxy = 0x7f0a03a5;
        /**  Edit access point labels: 
         */
        public: static const int apn_mcc = 0x7f0a03ad;
        /**  Edit access point labels: The port on the proxy used for MMS
         */
        public: static const int apn_mms_port = 0x7f0a03ac;
        /**  Edit access point labels: The proxy to use for MMS (multimedia messages)
         */
        public: static const int apn_mms_proxy = 0x7f0a03ab;
        /**  Edit access point labels: 
         */
        public: static const int apn_mmsc = 0x7f0a03aa;
        /**  Edit access point labels: 
         */
        public: static const int apn_mnc = 0x7f0a03ae;
        /**  Edit access point labels: A label the user can give to the APN to allow him to differentiate it from the others 
         */
        public: static const int apn_name = 0x7f0a03a3;
        /**  Edit access point label summary text when no value has been set 
 unknown quoting pattern: original -1, translation 1 
         */
        public: static const int apn_not_set = 0x7f0a03a2;
        /**  Edit access point labels: The password that will be used when connecting to this APN 
         */
        public: static const int apn_password = 0x7f0a03a8;
        /**  Edit access point labels: The protocol of the APN, e.g., "IPv4", "IPv6", or "IPv4/IPv6". 
         */
        public: static const int apn_protocol = 0x7f0a03b5;
        /**  Edit access point labels: The protocol of the APN when roaming, e.g., "IPv4", "IPv6", or "IPv4/IPv6". 
         */
        public: static const int apn_roaming_protocol = 0x7f0a03b6;
        /**  Edit access point labels: The server address to conenct to for this APN 
         */
        public: static const int apn_server = 0x7f0a03a9;
        /**  APN Settings 
 APN settings screen title 
         */
        public: static const int apn_settings = 0x7f0a03a0;
        /**  Error message for users that aren't allowed to modify Access Point Names settings [CHAR LIMIT=none] 
         */
        public: static const int apn_settings_not_available = 0x7f0a0551;
        /**  Edit access point labels: The type of APN 
         */
        public: static const int apn_type = 0x7f0a03b4;
        /**  Edit access point labels: The username that will be used when conencting to this APN
         */
        public: static const int apn_user = 0x7f0a03a7;
        /**  [CHAR LIMIT=200] Manage applications, text for dialog when disabling apps 
         */
        public: static const int app_disable_dlg_text = 0x7f0a04ca;
        /**  [CHAR LIMIT=30] Manage applications, title for dialog when disabling apps 
         */
        public: static const int app_disable_dlg_title = 0x7f0a04c9;
        /**  [CHAR LIMIT=200] Manage applications, text for dialog when disabling notifications for an app 
         */
        public: static const int app_disable_notifications_dlg_text = 0x7f0a04ce;
        /**  [CHAR LIMIT=30] Manage applications, title for dialog when disabling notifications for an app 
         */
        public: static const int app_disable_notifications_dlg_title = 0x7f0a04cd;
        /**  Manage applications, restore updated system application to factory version 
         */
        public: static const int app_factory_reset = 0x7f0a0484;
        /**  Manage applications, factory reset option dialog text for system applications. 
         */
        public: static const int app_factory_reset_dlg_text = 0x7f0a04ab;
        /**  Manage applications, factory reset dialog title for system applications. 
         */
        public: static const int app_factory_reset_dlg_title = 0x7f0a04aa;
        public: static const int app_forward_locked = 0x7f0a04c0;
        /**  Manage applications. application installation location summary 
         */
        public: static const int app_install_location_summary = 0x7f0a04c8;
        /**  Manage applications, application installation location title 
         */
        public: static const int app_install_location_title = 0x7f0a04c7;
        /**  [CHAR LIMIT=NONE] Label for amount of memory use 
         */
        public: static const int app_memory_use = 0x7f0a0656;
        /**  label for application name 
         */
        public: static const int app_name_label = 0x7f0a0586;
        /**  Manage applications, individual application dialog box message. Shown when the user somehow got into a state where it wants to manage some app that isn't found. 
         */
        public: static const int app_not_found_dlg_text = 0x7f0a04a8;
        /**  Manage applications, individual application dialog box title. Shown when the user somehow got into a state where it wants to manage some app that isn't found. 
         */
        public: static const int app_not_found_dlg_title = 0x7f0a04a7;
        /**  Summary for apps that aren't supported in limited users [CHAR LIMIT=none] 
         */
        public: static const int app_not_supported_in_limited = 0x7f0a089d;
        /**  [CHAR LIMIT=NONE] App notification settings: Block option description
         */
        public: static const int app_notification_block_summary = 0x7f0a0927;
        /**  [CHAR LIMIT=NONE] App notification settings: Block option title 
         */
        public: static const int app_notification_block_title = 0x7f0a0926;
        /**  [CHAR LIMIT=NONE] App notification settings: Priority option description
         */
        public: static const int app_notification_priority_summary = 0x7f0a0929;
        /**  [CHAR LIMIT=NONE] App notification settings: Priority option title 
         */
        public: static const int app_notification_priority_title = 0x7f0a0928;
        /**  [CHAR LIMIT=20] Notification settings: App notifications row summary when banned 
         */
        public: static const int app_notification_row_banned = 0x7f0a092c;
        /**  [CHAR LIMIT=40] Notification settings: App notifications row summary when high priority 
         */
        public: static const int app_notification_row_priority = 0x7f0a092d;
        /**  [CHAR LIMIT=20] Notification settings: App notifications row summary when sensitive 
         */
        public: static const int app_notification_row_sensitive = 0x7f0a092e;
        /**  [CHAR LIMIT=NONE] App notification settings: Sensitive option description
         */
        public: static const int app_notification_sensitive_summary = 0x7f0a092b;
        /**  [CHAR LIMIT=NONE] App notification settings: Sensitive option title 
         */
        public: static const int app_notification_sensitive_title = 0x7f0a092a;
        /**  [CHAR LIMIT=20] Notification settings: App notifications dialog dismiss button caption 
         */
        public: static const int app_notifications_dialog_done = 0x7f0a092f;
        /**  Label for are-notifications-enabled checkbox in app details [CHAR LIMIT=20] 
         */
        public: static const int app_notifications_switch_label = 0x7f0a0871;
        /**  Sound & notification > Notification section: Title for the option managing notifications per application. [CHAR LIMIT=30] 
         */
        public: static const int app_notifications_title = 0x7f0a090e;
        /**  [CHAR LIMIT=NONE] Time label for an operation that has never executed. 
         */
        public: static const int app_ops_never_used = 0x7f0a04d1;
        /**  [CHAR LIMIT=NONE] Time label for an operation that is currently running. 
         */
        public: static const int app_ops_running = 0x7f0a04d0;
        /**  [CHAR LIMIT=NONE] App ops settings title, on main settings screen. If clicked, the user is taken to a settings screen for app operations 
         */
        public: static const int app_ops_settings = 0x7f0a04cf;
        /**  UI debug setting: limit number of running background processes [CHAR LIMIT=25] 
         */
        public: static const int app_process_limit_title = 0x7f0a0793;
        /**  Preference label for custom restrictions [CHAR LIMIT=35] 
         */
        public: static const int app_restrictions_custom_label = 0x7f0a089b;
        /**  Summary text for apps that are allowed to access accounts from the primary user [CHAR LIMIT=none] 
         */
        public: static const int app_sees_restricted_accounts = 0x7f0a089e;
        /**  [CHAR LIMIT=NONE] Manage applications, text for dialog when disabling update apps 
         */
        public: static const int app_special_disable_dlg_text = 0x7f0a04cc;
        /**  [CHAR LIMIT=NONE] Manage applications, title for dialog when disabling updated apps 
         */
        public: static const int app_special_disable_dlg_title = 0x7f0a04cb;
        /**  Manage applications, individual application info screen title. For example, if they click on "Browser" in "Manage applications", the title of the next screen will be this 
         */
        public: static const int application_info_label = 0x7f0a046e;
        /**  Application Restrictions screen title [CHAR LIMIT=45] 
         */
        public: static const int application_restrictions = 0x7f0a085c;
        /**  Manage applications, individual application info screen, label under Storage heading. The amount of space taken up by the application itself (for example, the java compield files and things like that) 
         */
        public: static const int application_size_label = 0x7f0a047a;
        /**  Applications settings title, on main settings screen. If clicked, the user is taken to a settings screen full of application settings
         */
        public: static const int applications_settings = 0x7f0a0464;
        /**  Applications settings screen heading. The header for the Application settings screen. 
         */
        public: static const int applications_settings_header = 0x7f0a0466;
        /**  Applications settings summary, on main settings screen. The summary for the "Applications" item on the main settings screen. Describes what settings are accessible from the "Applications" screen. 
 Applications settings summary, on main settings screen. The summary for the "Applications" item on the main settings screen. Describes what settings are accessible from the "Applications" screen. This is the string to use for devices without a keyboard (so for example, there is no "Quick launch" settings here since that feature requires a keyboard) 
         */
        public: static const int applications_settings_summary = 0x7f0a0465;
        /**  Applications with restrictions header [CHAR LIMIT=45] 
         */
        public: static const int apps_with_restrictions_header = 0x7f0a085d;
        /**  Applicaitons with restrictions - settings button [CHAR LIMIT=30] 
         */
        public: static const int apps_with_restrictions_settings_button = 0x7f0a085e;
        /**  Manage applications, individual application screen, checkbox to control asking for compatibility mode.  
         */
        public: static const int ask_compatibility = 0x7f0a048a;
        /**  Security & location settings screen, setting check box label if Assisted GPS should be enabled 
         */
        public: static const int assisted_gps = 0x7f0a041e;
        /**  Security & location settings screen, setting summary when Assisted GPS check box is clear 
         */
        public: static const int assisted_gps_disabled = 0x7f0a0420;
        /**  Security & location settings screen, setting summary when Assisted GPS check box is selected 
         */
        public: static const int assisted_gps_enabled = 0x7f0a041f;
        /**  Sound settings screen, setting option name checkbox to enable/disable audio recording features that improve audio recording in noisy environments 
         */
        public: static const int audio_record_proc_title = 0x7f0a02fd;
        /**  Sound & display settings screen, setting option summary to enable adaptive brightness [CHAR LIMIT=100] 
         */
        public: static const int auto_brightness_summary = 0x7f0a031f;
        /**  Sound & display settings screen, setting option name to enable adaptive brightness [CHAR LIMIT=30] 
         */
        public: static const int auto_brightness_title = 0x7f0a031e;
        /**  On Text & language settings screen, setting option name.  title of the setting to enable autocapitalization of entered text.  for example, after the user finishes a sentence, the next letter he types will automatically be capitalizated. [CHAR LIMIT=25] 
         */
        public: static const int auto_caps = 0x7f0a0504;
        /**  On Text & language settings screen, setting summary. Summary for the Auto-cap setting. [CHAR LIMIT=100]
         */
        public: static const int auto_caps_summary = 0x7f0a0505;
        /**  Manage applications, individual application screen, text under Launch by default heading if the app is NOT a default for actions 
         */
        public: static const int auto_launch_disable_text = 0x7f0a0487;
        /**  Manage applications, individual application info screen, screen, message text under Launch by default heading. This is present if the app is set as a default for some actions. 
         */
        public: static const int auto_launch_enable_text = 0x7f0a0485;
        /**  Manage applications, individual application info screen,  heading for settings related to controlling whether this app is the default for some actions 
         */
        public: static const int auto_launch_label = 0x7f0a0470;
        /**  Manage applications, individual application info screen,  heading for settings related to controlling whether this app is the default for some actions *and* whether the app was given permission by the user to create widgets 
         */
        public: static const int auto_launch_label_generic = 0x7f0a0471;
        /**  On Text & language settings screen, setting option name. title of the setting to enable automatic punctuation of entered text.  for example, it will change an entered "youre" to "you're". 
         */
        public: static const int auto_punctuate = 0x7f0a0506;
        /**  On Text & language settings screen, setting summary for the Auto-punctuate setting. 
         */
        public: static const int auto_punctuate_summary = 0x7f0a0508;
        /**  On Text & language settings screen, setting option name. title of the setting to enable autoreplace of entered text. auto replace is a feature that will automatically correct mistyped words. 
         */
        public: static const int auto_replace = 0x7f0a0502;
        /**  On Text & language settings screen, setting summary.  This is the summary for the "Auto-replace" setting. 
         */
        public: static const int auto_replace_summary = 0x7f0a0503;
        /**  Summary text of the "automatic restore" setting 
         */
        public: static const int auto_restore_summary = 0x7f0a06ea;
        /**  Auto-restore menu title 
         */
        public: static const int auto_restore_title = 0x7f0a06e9;
        /**  Sound & display settings screen, setting option name to change whether the screen adjusts automatically based on lighting conditions 
         */
        public: static const int automatic_brightness = 0x7f0a032f;
        /**  CPU awake time title 
         */
        public: static const int awake = 0x7f0a060b;
        /**  Data synchronization settings screen, title of setting that controls whether background data should be used [CHAR LIMIT=30] 
         */
        public: static const int background_data = 0x7f0a0730;
        /**  Data synchronization settings screen, message of dialog that confirms the user's unchecking of background data [CHAR LIMIT=200] 
         */
        public: static const int background_data_dialog_message = 0x7f0a0733;
        /**  Data synchronization settings screen, title of dialog that confirms the user's unchecking of background data [CHAR LIMIT=20] 
         */
        public: static const int background_data_dialog_title = 0x7f0a0732;
        /**  Data synchronization settings screen, summary of setting that controls whether background data should be used [CHAR LIMIT=60] 
         */
        public: static const int background_data_summary = 0x7f0a0731;
        /**  Running service details, description for background process. 
         */
        public: static const int background_process_stop_description = 0x7f0a04f5;
        /**  Default summary text of the "Configure backup account" setting [CHAR LIMIT=80]
         */
        public: static const int backup_configure_account_default_summary = 0x7f0a06e7;
        /**  Configure backup account options menu title [CHAR LIMIT=25]
         */
        public: static const int backup_configure_account_title = 0x7f0a06e6;
        /**  Summary text of the "back up data" setting 
         */
        public: static const int backup_data_summary = 0x7f0a06e5;
        /**  Backup data menu title 
         */
        public: static const int backup_data_title = 0x7f0a06e4;
        /**  Dialog title for confirmation to erase backup data from server 
         */
        public: static const int backup_erase_dialog_message = 0x7f0a06f2;
        /**  Dialog title for confirmation to erase backup data from server 
         */
        public: static const int backup_erase_dialog_title = 0x7f0a06f1;
        /**   Title for security picker when choosing a facelock's backup unlock method: Pattern/PIN [CHAR LIMIT=22] 
         */
        public: static const int backup_lock_settings_picker_title = 0x7f0a015d;
        /**  Button label for cancelling the new-password operation and retaining the user's previous full-backup password 
         */
        public: static const int backup_pw_cancel_button_text = 0x7f0a0819;
        /**  Button label for setting the user's new full-backup password 
         */
        public: static const int backup_pw_set_button_text = 0x7f0a0818;
        /**  Backup section title 
         */
        public: static const int backup_section_title = 0x7f0a06e2;
        /**  Band mode screen. Status message when unsuccessful. 
         */
        public: static const int band_mode_failed = 0x7f0a00e2;
        /**  Band mode screen.  Loading message. 
         */
        public: static const int band_mode_loading = 0x7f0a00e0;
        /**  Band mode screen. Button caption to set the bandmode. 
         */
        public: static const int band_mode_set = 0x7f0a00e1;
        /**  Band mode screen. Statusm essage when successful. 
         */
        public: static const int band_mode_succeeded = 0x7f0a00e3;
        /**  Band Mode Selection 
 Band mode screen.  Title of activity. 
         */
        public: static const int band_mode_title = 0x7f0a00df;
        /**  About phone screen,  setting option name  [CHAR LIMIT=40] 
         */
        public: static const int baseband_version = 0x7f0a0355;
        /**  Label for app details action 
         */
        public: static const int battery_action_app_details = 0x7f0a0630;
        /**  Label for app settings action 
         */
        public: static const int battery_action_app_settings = 0x7f0a0631;
        /**  Label for bluetooth settings 
         */
        public: static const int battery_action_bluetooth = 0x7f0a0634;
        /**  Label for display settings 
         */
        public: static const int battery_action_display = 0x7f0a0632;
        /**  Label for force stop action 
         */
        public: static const int battery_action_stop = 0x7f0a062f;
        /**  Label for wifi settings 
         */
        public: static const int battery_action_wifi = 0x7f0a0633;
        /**  [CHAR LIMIT=50] Description for power consumed by applications 
         */
        public: static const int battery_desc_apps = 0x7f0a0641;
        /**  Description for bluetooth power consumption detail 
         */
        public: static const int battery_desc_bluetooth = 0x7f0a063e;
        /**  Description for power consumed by display 
         */
        public: static const int battery_desc_display = 0x7f0a063a;
        /**  [CHAR_LIMIT=NONE] Description for power consumed by the flashlight 
         */
        public: static const int battery_desc_flashlight = 0x7f0a0639;
        /**  [CHAR LIMIT=50] Description for over-counted power use 
         */
        public: static const int battery_desc_overcounted = 0x7f0a0648;
        /**  Description for cell radio detail 
         */
        public: static const int battery_desc_radio = 0x7f0a0637;
        /**  Description for standby detail 
         */
        public: static const int battery_desc_standby = 0x7f0a0636;
        /**  [CHAR LIMIT=50] Description for unaccounted power use 
         */
        public: static const int battery_desc_unaccounted = 0x7f0a0646;
        /**  [CHAR LIMIT=50] Description for power consumed by users 
         */
        public: static const int battery_desc_users = 0x7f0a0645;
        /**  Description for voice call detail 
         */
        public: static const int battery_desc_voice = 0x7f0a0635;
        /**  Description for wifi connectivity 
         */
        public: static const int battery_desc_wifi = 0x7f0a063c;
        /**  Used to show an amount of time in the form "d days, h hours, m minutes, s seconds" in BatteryHistory 
         */
        public: static const int battery_history_days = 0x7f0a057c;
        /**  Used to show an amount of time in the form "d days, h hours, m minutes, s seconds" in BatteryHistory 
         */
        public: static const int battery_history_days_no_seconds = 0x7f0a0580;
        /**  Used to show an amount of time in the form "h hours, m minutes, s seconds" in BatteryHistory 
         */
        public: static const int battery_history_hours = 0x7f0a057d;
        /**  Used to show an amount of time in the form "h hours, m minutes, s seconds" in BatteryHistory 
         */
        public: static const int battery_history_hours_no_seconds = 0x7f0a0581;
        /**  Used to show an amount of time in the form "m minutes, s seconds" in BatteryHistory 
         */
        public: static const int battery_history_minutes = 0x7f0a057e;
        /**  Used to show an amount of time in the form "m minutes, s seconds" in BatteryHistory 
         */
        public: static const int battery_history_minutes_no_seconds = 0x7f0a0582;
        /**  Used to show an amount of time in the form "s seconds" in BatteryHistory 
         */
        public: static const int battery_history_seconds = 0x7f0a057f;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_awake_battery = 0x7f0a0047;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_awake_plugged = 0x7f0a0048;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_health_cold = 0x7f0a005e;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_health_dead = 0x7f0a005b;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_health_good = 0x7f0a0059;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_health_label = 0x7f0a0040;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_health_over_voltage = 0x7f0a005c;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_health_overheat = 0x7f0a005a;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_health_unknown = 0x7f0a0058;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_health_unspecified_failure = 0x7f0a005d;
        /**  The title of the activity to see battery info. 
         */
        public: static const int battery_info_label = 0x7f0a00f5;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_level_label = 0x7f0a003f;
        public: static const int battery_info_power_ac = 0x7f0a0053;
        public: static const int battery_info_power_ac_usb = 0x7f0a0056;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_power_label = 0x7f0a003d;
        public: static const int battery_info_power_unknown = 0x7f0a0057;
        /**  Battery Info screen. Units shown after a value.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_power_unplugged = 0x7f0a0052;
        public: static const int battery_info_power_usb = 0x7f0a0054;
        public: static const int battery_info_power_wireless = 0x7f0a0055;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_scale_label = 0x7f0a003e;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_screen_on = 0x7f0a0049;
        /**  [CHAR_LIMIT=20] Battery use screen.  Battery status shown in chart label when charging from an unknown source.  
         */
        public: static const int battery_info_status_charging = 0x7f0a004b;
        /**  [CHAR_LIMIT=20] Battery use screen.  Battery status shown in chart label when charging on AC.  
         */
        public: static const int battery_info_status_charging_ac = 0x7f0a004c;
        /**  [CHAR_LIMIT=20] Battery use screen.  Battery status shown in chart label when charging over USB.  
         */
        public: static const int battery_info_status_charging_usb = 0x7f0a004d;
        /**  [CHAR_LIMIT=20] Battery use screen.  Battery status shown in chart label when charging over a wireless connection.  
         */
        public: static const int battery_info_status_charging_wireless = 0x7f0a004e;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_status_discharging = 0x7f0a004f;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_status_full = 0x7f0a0051;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_status_label = 0x7f0a003c;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_status_not_charging = 0x7f0a0050;
        /**  Battery Info screen. Value for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_status_unknown = 0x7f0a004a;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_technology_label = 0x7f0a0041;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_temperature_label = 0x7f0a0044;
        /**  Battery Info screen. Units shown after a value.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_temperature_units = 0x7f0a0045;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_uptime = 0x7f0a0046;
        /**  Battery Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_voltage_label = 0x7f0a0042;
        /**  Battery Info screen. Units shown after a value.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int battery_info_voltage_units = 0x7f0a0043;
        /**  Phone info screen, section titles: 
         */
        public: static const int battery_level_title = 0x7f0a039f;
        /**  [CHAR LIMIT=NONE] Description for unaccounted power use 
         */
        public: static const int battery_msg_unaccounted = 0x7f0a0647;
        /**  [CHAR_LIMIT=40] Battery saver: Label for feature, title + menu item 
         */
        public: static const int battery_saver = 0x7f0a0650;
        /**  [CHAR_LIMIT=40] Battery saver: Value for automatic entry option: Never 
         */
        public: static const int battery_saver_turn_on_automatically_never = 0x7f0a0652;
        /**  [CHAR_LIMIT=40] Battery saver: Value for automatic entry option: pct% battery 
         */
        public: static const int battery_saver_turn_on_automatically_pct = 0x7f0a0653;
        /**  [CHAR_LIMIT=40] Battery saver: Title for automatic entry option 
         */
        public: static const int battery_saver_turn_on_automatically_title = 0x7f0a0651;
        /**  Battery usage since user reset the stats 
         */
        public: static const int battery_since_reset = 0x7f0a0601;
        /**  Battery usage since unplugged 
         */
        public: static const int battery_since_unplugged = 0x7f0a0600;
        /**  [CHAR LIMIT=25] Label for battery stats charging state graph 
         */
        public: static const int battery_stats_charging_label = 0x7f0a0604;
        /**  Battery usage duration 
         */
        public: static const int battery_stats_duration = 0x7f0a0603;
        /**  [CHAR LIMIT=25] Label for battery stats gps on state graph 
         */
        public: static const int battery_stats_gps_on_label = 0x7f0a0606;
        /**  Battery usage during last unplugged period 
         */
        public: static const int battery_stats_last_duration = 0x7f0a060a;
        /**  Battery usage on battery duration 
         */
        public: static const int battery_stats_on_battery = 0x7f0a0602;
        /**  [CHAR LIMIT=25] Label for battery stats phone signal strength graph 
         */
        public: static const int battery_stats_phone_signal_label = 0x7f0a0609;
        /**  [CHAR LIMIT=25] Label for battery stats screen on state graph 
         */
        public: static const int battery_stats_screen_on_label = 0x7f0a0605;
        /**  [CHAR LIMIT=25] Label for battery stats wake lock state graph 
         */
        public: static const int battery_stats_wake_lock_label = 0x7f0a0608;
        /**  [CHAR LIMIT=25] Label for battery stats wifi running state graph 
         */
        public: static const int battery_stats_wifi_running_label = 0x7f0a0607;
        /**  Phone info screen, section titles: 
         */
        public: static const int battery_status_title = 0x7f0a039e;
        /**  [CHAR LIMIT=100] Suggestion for getting apps to consume less power due to GPS
         */
        public: static const int battery_sugg_apps_gps = 0x7f0a0643;
        /**  Suggestion for exploring application info to stop or uninstall 
         */
        public: static const int battery_sugg_apps_info = 0x7f0a0642;
        /**  Suggestion for getting apps to consume less power 
         */
        public: static const int battery_sugg_apps_settings = 0x7f0a0644;
        /**  Suggestion for bluetooth 
         */
        public: static const int battery_sugg_bluetooth_basic = 0x7f0a063f;
        /**  Suggestion for bluetooth headset 
         */
        public: static const int battery_sugg_bluetooth_headset = 0x7f0a0640;
        /**  Suggestion for reducing display power 
         */
        public: static const int battery_sugg_display = 0x7f0a063b;
        /**  Suggestion to switch to airplane mode to save power 
         */
        public: static const int battery_sugg_radio = 0x7f0a0638;
        /**  Suggestion for wifi connectivity power drain 
         */
        public: static const int battery_sugg_wifi = 0x7f0a063d;
        /**  Edit Beaerer Info of APN 
         */
        public: static const int bearer = 0x7f0a03ba;
        /**  Security settings screen when using face unlock, setting option name to start an activity that allows the user to improve accuracy by adding additional enrollment faces 
         */
        public: static const int biometric_weak_improve_matching_title = 0x7f0a012e;
        /**  On the security settings screen when using face unlock.  The summary of the liveliness checkbox 
         */
        public: static const int biometric_weak_liveliness_summary = 0x7f0a0130;
        /**  On the security settings screen when using face unlock.  This checkbox is used to toggle whether liveliness detection is required.  If it is checked the user must blink during unlock to prove it's not a photo  
         */
        public: static const int biometric_weak_liveliness_title = 0x7f0a012f;
        /**  Used as setting title (for checkbox) on second screen after selecting Bluetooth settings 
         */
        public: static const int bluetooth = 0x7f0a005f;
        /**  Bluetooth settings.  Connection options screen.  The summary for the A2DP checkbox preference when A2DP is connected. 
         */
        public: static const int bluetooth_a2dp_profile_summary_connected = 0x7f0a01de;
        /**  Bluetooth settings.  Connection options screen.  The summary for the A2DP checkbox preference that describes how checking it will set the A2DP profile as preferred. 
         */
        public: static const int bluetooth_a2dp_profile_summary_use_for = 0x7f0a01e6;
        /**  Bluetooth settings. Title of the advanced bluetooth settings screen [CHAR LIMIT=30]
         */
        public: static const int bluetooth_advanced_titlebar = 0x7f0a01c7;
        /**  Strings for asking to the user whether to allow an app to enable discovery mode 
         */
        public: static const int bluetooth_ask_discovery = 0x7f0a008b;
        /**  Strings for asking to the user whether to allow an app to enable bluetooth 
         */
        public: static const int bluetooth_ask_enablement = 0x7f0a008a;
        /**  Strings for asking to the user whether to allow an app to enable bluetooth and discovery mode 
         */
        public: static const int bluetooth_ask_enablement_and_discovery = 0x7f0a0090;
        public: static const int bluetooth_ask_enablement_and_lasting_discovery = 0x7f0a0091;
        /**  Strings for asking to the user whether to allow an app to enable bluetooth and start broadcasting 
         */
        public: static const int bluetooth_ask_enablement_and_start_broadcast = 0x7f0a008e;
        public: static const int bluetooth_ask_lasting_discovery = 0x7f0a008c;
        /**  Strings for asking to the user whether to allow an app to start broadcasting 
         */
        public: static const int bluetooth_ask_start_broadcast = 0x7f0a008d;
        /**  Strings for device profile auto connect setting 
         */
        public: static const int bluetooth_auto_connect = 0x7f0a0094;
        /**  Bluetooth broadcasting settings, option to enable/disable broadcasting 
         */
        public: static const int bluetooth_broadcasting = 0x7f0a0074;
        /**  Strings for bluetooth broadcasting explanation 
         */
        public: static const int bluetooth_broadcasting_explaination = 0x7f0a008f;
        /**  Message for confirmation of passkey to complete pairing. [CHAR LIMIT=NONE] 
         */
        public: static const int bluetooth_confirm_passkey_msg = 0x7f0a01a3;
        /**  Bluetooth settings.  The title of the screen to pick which profiles to connect to on the device.  For example, headphones may have both A2DP and headset, this allows the user to choose which one he wants to connect to. 
         */
        public: static const int bluetooth_connect_specific_profiles_title = 0x7f0a01c9;
        /**  Bluetooth settings.  Message when connected to a device. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_connected = 0x7f0a0077;
        /**  Bluetooth settings.  Message when connected to a device, except for media audio. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_connected_no_a2dp = 0x7f0a0079;
        /**  Bluetooth settings.  Message when connected to a device, except for phone audio. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_connected_no_headset = 0x7f0a0078;
        /**  Bluetooth settings.  Message when connected to a device, except for phone/media audio. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_connected_no_headset_no_a2dp = 0x7f0a007b;
        /**  Bluetooth settings.  Message when connected to a device, except for map. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_connected_no_map = 0x7f0a007a;
        /**  Bluetooth settings.  Message when connecting to a device 
         */
        public: static const int bluetooth_connecting = 0x7f0a007e;
        /**  Message for the error dialog when BT connecting operation fails generically. 
         */
        public: static const int bluetooth_connecting_error_message = 0x7f0a01af;
        /**  Bluetooth connection permission Alert Activity text [CHAR LIMIT=none]
         */
        public: static const int bluetooth_connection_dialog_text = 0x7f0a0097;
        /**  Notification message when a remote Bluetooth device wants to connect to a Bluetooth profile [CHAR LIMIT=none]
         */
        public: static const int bluetooth_connection_notif_message = 0x7f0a0096;
        /**  Activity label of BluetoothPermissionActivity [CHAR LIMIT=none]
         */
        public: static const int bluetooth_connection_permission_request = 0x7f0a0095;
        /** Bluetooth settings screen, summary text for Bluetooth device with no name 
         */
        public: static const int bluetooth_device = 0x7f0a0081;
        /**  Bluetooth settings. Connection options screen. Title for checkbox to enable incoming file transfers [CHAR LIMIT=30] 
         */
        public: static const int bluetooth_device_advanced_enable_opp_title = 0x7f0a01dd;
        /**  Bluetooth settings.  Connection options screen.  The summary of the online mode checkbox.  This describes what the setting does in the context of the screen. 
         */
        public: static const int bluetooth_device_advanced_online_mode_summary = 0x7f0a01da;
        /**  Bluetooth settings.  Connection options screen.  The title of the checkbox that controls whether the device is in "online" mode or "offline" mode.  This essentially is the checkbox that controls whether any checks / unchecks on a profile should be applied immediately, or next time the device is connected. 
         */
        public: static const int bluetooth_device_advanced_online_mode_title = 0x7f0a01d9;
        /**  Bluetooth settings.  Connection options screen.  The title of the header that is above all of the profiles.
         When a user decides what Bluetooth capabilities to use with the device.  
         */
        public: static const int bluetooth_device_advanced_profile_header_title = 0x7f0a01db;
        /**  Bluetooth settings. Connection options screen. Title for option to rename the device. [CHAR LIMIT=30] 
         */
        public: static const int bluetooth_device_advanced_rename_device = 0x7f0a01dc;
        /**  Bluetooth settings.  Connection options screen.  The title of the screen. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_device_advanced_title = 0x7f0a01d8;
        /**  Bluetooth settings.  Context menu item for a device.  Action will connect to all profiles on the device. 
         */
        public: static const int bluetooth_device_context_connect = 0x7f0a01c0;
        /**  Bluetooth settings.  Context menu item for a device.  Action will take the user to another screen where they can choose exactly which profiles to connect to. 
         */
        public: static const int bluetooth_device_context_connect_advanced = 0x7f0a01c5;
        /**  Bluetooth settings.  Context menu item for a device.  Action will disconnect from all profiles on the device. 
         */
        public: static const int bluetooth_device_context_disconnect = 0x7f0a01c1;
        /**  Bluetooth settings.  Context menu item for a device.  Action will disconnect and remove pairing with the device. 
         */
        public: static const int bluetooth_device_context_disconnect_unpair = 0x7f0a01c4;
        /**  Bluetooth settings.  Context menu item for a device.  Action will first pair, and then connect to all profiles on the device. 
         */
        public: static const int bluetooth_device_context_pair_connect = 0x7f0a01c2;
        /**  Bluetooth settings.  Context menu item for a device.  Action will remove pairing with the device. 
         */
        public: static const int bluetooth_device_context_unpair = 0x7f0a01c3;
        /**  Bluetooth settings screen, image description for device details button. This opens the screen to rename, unpair, etc. a single device. 
         */
        public: static const int bluetooth_device_details = 0x7f0a0069;
        /**  Bluetooth settings screen, title for the current bluetooth name setting 
         */
        public: static const int bluetooth_device_name = 0x7f0a0068;
        /**  Bluetooth settings screen, heading above the list of nearby bluetooth devices 
         */
        public: static const int bluetooth_devices = 0x7f0a0067;
        /**  Bluetooth settings.  Message for disabling a profile of a bluetooth device. [CHAR LIMIT=NONE] 
         */
        public: static const int bluetooth_disable_profile_message = 0x7f0a0076;
        /**  Bluetooth settings.  Dialog title to disable a single profile of a device. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_disable_profile_title = 0x7f0a0075;
        /**  Bluetooth settings.  Message for disconnecting from the A2DP profile. [CHAR LIMIT=80] 
         */
        public: static const int bluetooth_disconnect_a2dp_profile = 0x7f0a01d3;
        /**  Bluetooth settings.  Message for disconnecting from all profiles of a bluetooth device. [CHAR LIMIT=NONE] 
         */
        public: static const int bluetooth_disconnect_all_profiles = 0x7f0a0070;
        /**  Bluetooth settings.  Message for disconnecting from the headset profile. [CHAR LIMIT=80] 
         */
        public: static const int bluetooth_disconnect_headset_profile = 0x7f0a01d4;
        /**  Bluetooth settings.  Message for disconnecting from the HID profile. [CHAR LIMIT=80] 
         */
        public: static const int bluetooth_disconnect_hid_profile = 0x7f0a01d5;
        /**  Bluetooth settings.  Message for disconnecting from the PAN profile (NAP role). [CHAR LIMIT=80] 
         */
        public: static const int bluetooth_disconnect_pan_nap_profile = 0x7f0a01d7;
        /**  Bluetooth settings.  Message for disconnecting from the PAN profile (user role). [CHAR LIMIT=80] 
         */
        public: static const int bluetooth_disconnect_pan_user_profile = 0x7f0a01d6;
        /**  Bluetooth settings.  Dialog title to confirm disconnecting from all profiles of a device. [CHAR LIMIT=30] 
         */
        public: static const int bluetooth_disconnect_title = 0x7f0a006f;
        /**  Bluetooth settings.  Message when a device is disconnected 
         */
        public: static const int bluetooth_disconnected = 0x7f0a007c;
        /**  Bluetooth settings.  Message when disconnecting from a device 
         */
        public: static const int bluetooth_disconnecting = 0x7f0a007d;
        /**  Message when bluetooth dialog when passkey or pin needs to be displayed. 
         */
        public: static const int bluetooth_display_passkey_pin_msg = 0x7f0a01a5;
        /**  Bluetooth settings.  Dock Setting Title 
         */
        public: static const int bluetooth_dock_settings = 0x7f0a01ec;
        /**  Bluetooth settings.  Dock Setting Dialog - Checkbox selection 2: Use dock for media audio 
         */
        public: static const int bluetooth_dock_settings_a2dp = 0x7f0a01ef;
        /**  Bluetooth settings.  Dock Setting Dialog - Checkbox selection 1: Use dock as speaker phone 
         */
        public: static const int bluetooth_dock_settings_headset = 0x7f0a01ee;
        /**  Bluetooth settings.  Dock Setting Dialog - Remember setting and don't ask user again 
         */
        public: static const int bluetooth_dock_settings_remember = 0x7f0a01f0;
        /**  Bluetooth settings.  Dock Setting Dialog Title 
         */
        public: static const int bluetooth_dock_settings_title = 0x7f0a01ed;
        /**  Bluetooth settings. Text displayed when Bluetooth is off and device list is empty [CHAR LIMIT=50]
         */
        public: static const int bluetooth_empty_list_bluetooth_off = 0x7f0a01c8;
        /**  Bluetooth Settings. text displayed when user has restriction DISALLOW_CONFIG_BLUETOOTH [CHAR LIMIT=NONE]
         */
        public: static const int bluetooth_empty_list_user_restricted = 0x7f0a0071;
        /**  Checkbox label for alphanumeric PIN entry (default is numeric PIN). [CHAR LIMIT=50] 
         */
        public: static const int bluetooth_enable_alphanumeric_pin = 0x7f0a019f;
        /**  Message when bluetooth dialog for passkey entry is showing. [CHAR LIMIT=NONE] 
         */
        public: static const int bluetooth_enter_passkey_msg = 0x7f0a019e;
        /**  Pairing dialog text to remind user to enter the passkey on the other device. [CHAR LIMIT=NONE] 
         */
        public: static const int bluetooth_enter_passkey_other_device = 0x7f0a01a2;
        /**  Message when bluetooth dialog for pin entry is showing. [CHAR LIMIT=NONE] 
         */
        public: static const int bluetooth_enter_pin_msg = 0x7f0a019c;
        /**  Pairing dialog text to remind user to enter the PIN on the other device. [CHAR LIMIT=NONE] 
         */
        public: static const int bluetooth_enter_pin_other_device = 0x7f0a01a1;
        /**  Title for BT error dialogs. 
         */
        public: static const int bluetooth_error_title = 0x7f0a01aa;
        /**  Bluetooth settings.  Connection options screen.  The summary for the headset checkbox preference when headset is connected. 
         */
        public: static const int bluetooth_headset_profile_summary_connected = 0x7f0a01df;
        /**  Bluetooth settings.  Connection options screen.  The summary for the headset checkbox preference that describes how checking it will set the headset profile as preferred. 
         */
        public: static const int bluetooth_headset_profile_summary_use_for = 0x7f0a01e7;
        /**  Bluetooth settings. Connection options screen. The summary for the HID checkbox preference when HID is connected. 
         */
        public: static const int bluetooth_hid_profile_summary_connected = 0x7f0a01e3;
        /**  Bluetooth settings. Connection options screen. The summary
         for the HID checkbox preference that describes how checking it
         will set the HID profile as preferred. 
         */
        public: static const int bluetooth_hid_profile_summary_use_for = 0x7f0a01e9;
        /**  Message when bluetooth incoming pairing request for (2.1 devices) dialog is showing 
 syntax error in translation for bluetooth_confirm_passkey_msg (3708312912841950052) org.xmlpull.v1.XmlPullParserException: name expected (position:START_TAG <null>@1:243 in     <string name="bluetooth_confirm_passkey_msg" msgid="3708312912841950052">"Zum Pairing mit:&gt;&lt;b&gt;<xliff:g id="DEVICE_NAME">%1$s</xliff:g>&lt;/b&gt;&lt;br&gt;&lt;br&gt;Vergewissern Sie sich, dass folgender Zugangscode angezeigt wird:<&lt;br&gt;&lt;b&gt;P<xliff:g id="PASSKEY">%2$s</xliff:g>&lt;/b&gt;."</string>
)  
         */
        public: static const int bluetooth_incoming_pairing_msg = 0x7f0a01a4;
        /**  Bluetooth Visibility discoonect question.  Asks the user if they wish to disconnect a paired bluetooth device.  [CHAR LIMIT=50] 
         */
        public: static const int bluetooth_is_disconnect_question = 0x7f0a0073;
        /**  Bluetooth settings screen, summary after selecting Discoverable check box [CHAR LIMIT=50] 
         */
        public: static const int bluetooth_is_discoverable = 0x7f0a0060;
        /**  Bluetooth settings screen, summary when Discoverable duration is set to "forever" [CHAR LIMIT=50] 
         */
        public: static const int bluetooth_is_discoverable_always = 0x7f0a0061;
        /**  Bluetooth Visibility message.  This message informs the user that their device is now visible to other bluetooth devices.  [CHAR LIMIT=NONE] 
         */
        public: static const int bluetooth_is_visible_message = 0x7f0a0072;
        /**  Bluetooth settings screen, check box label whether or not to allow
        bluetooth voice dialing when lock screen is up
         */
        public: static const int bluetooth_lock_voice_dialing = 0x7f0a0065;
        /**  Bluetooth settings screen, lock voice dialing checkbox summary text 
         */
        public: static const int bluetooth_lock_voice_dialing_summary = 0x7f0a0066;
        /**  Bluetooth message permission Alert Activity text [CHAR LIMIT=none] 
         */
        public: static const int bluetooth_map_acceptance_dialog_text = 0x7f0a009d;
        /**  Bluetooth settings.  Connection options screen.  The summary for the map checkbox preference when map is connected. 
         */
        public: static const int bluetooth_map_profile_summary_connected = 0x7f0a01e1;
        /**  Bluetooth settings.  Connection options screen.  The summary for the map checkbox preference that describes how checking it will set the map profile as preferred. 
         */
        public: static const int bluetooth_map_profile_summary_use_for = 0x7f0a01eb;
        /**  Activity label of BluetoothMessagePermissionActivity, also used as Strings in the permission dialog [CHAR LIMIT=none] 
         */
        public: static const int bluetooth_map_request = 0x7f0a009c;
        /**  Bluetooth settings.  Menu option to Bluetooth advanced settings [CHAR LIMIT=20]
         */
        public: static const int bluetooth_menu_advanced = 0x7f0a01c6;
        /**  Bluetooth settings screen, summary text when there isn't a name set (for the name setting) 
         */
        public: static const int bluetooth_name_not_set = 0x7f0a006b;
        /** Bluetooth settings screen, text that appears when scanning for devices is finished and no nearby bluetooth device was found [CHAR LIMIT=40]
         */
        public: static const int bluetooth_no_devices_found = 0x7f0a0083;
        /**  Bluetooth settings screen, summary text when not discoverable and no paired devices [CHAR LIMIT=50] 
         */
        public: static const int bluetooth_not_visible_to_other_devices = 0x7f0a0062;
        /**  Notification message when a Bluetooth device wants to pair with us 
         */
        public: static const int bluetooth_notif_message = 0x7f0a0086;
        /**  Notification ticker text (shown in the status bar) when a Bluetooth device wants to pair with us 
         */
        public: static const int bluetooth_notif_ticker = 0x7f0a0084;
        /**  Notification title when a Bluetooth device wants to pair with us 
         */
        public: static const int bluetooth_notif_title = 0x7f0a0085;
        /**  Bluetooth on time 
         */
        public: static const int bluetooth_on_time = 0x7f0a060d;
        /**  Bluetooth settings screen, summary text when not discoverable with paired devices [CHAR LIMIT=50] 
         */
        public: static const int bluetooth_only_visible_to_paired_devices = 0x7f0a0063;
        /**  Bluetooth settings.  Connection options screen.  The summary for the OPP checkbox preference when OPP is connected. 
         */
        public: static const int bluetooth_opp_profile_summary_connected = 0x7f0a01e0;
        /**  Bluetooth settings.  Connection options screen.  The summary for the OPP checkbox preference when OPP is not connected. 
         */
        public: static const int bluetooth_opp_profile_summary_not_connected = 0x7f0a01e2;
        /**  Bluetooth settings.  Connection options screen.  The summary for the OPP checkbox preference that describes how checking it will set the OPP profile as preferred. 
         */
        public: static const int bluetooth_opp_profile_summary_use_for = 0x7f0a01e8;
        /** Bluetooth settings screen, summary text under individual Bluetooth devices when pairing 
         */
        public: static const int bluetooth_pairing = 0x7f0a0080;
        /**  Button text for accepting an incoming pairing request. [CHAR LIMIT=20] 
         */
        public: static const int bluetooth_pairing_accept = 0x7f0a01a6;
        /**  Button text for accepting an incoming pairing request in all caps. [CHAR LIMIT=20] 
         */
        public: static const int bluetooth_pairing_accept_all_caps = 0x7f0a01a7;
        /**  Button text for declining an incoming pairing request. [CHAR LIMIT=20] 
         */
        public: static const int bluetooth_pairing_decline = 0x7f0a01a8;
        /**  Message for the error dialog when BT pairing fails because the other device is down. 
         */
        public: static const int bluetooth_pairing_device_down_error_message = 0x7f0a01ad;
        /**  Bluetooth settings: Message informing user that a bluetooth wants to access contant and call history.  [CHAR LIMIT=100] 
         */
        public: static const int bluetooth_pairing_dialog_contants_request = 0x7f0a01bb;
        /**  Bluetooth settings: paring permission message.  [CHAR LIMIT=100] 
         */
        public: static const int bluetooth_pairing_dialog_paring_request = 0x7f0a01bc;
        /**  Bluetooth settings: share phone book title.  [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_pairing_dialog_sharing_phonebook_title = 0x7f0a01ba;
        /**  Bluetooth settings: pairing dialog title.  [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_pairing_dialog_title = 0x7f0a01b9;
        /**  Message for the error dialog when BT pairing fails generically. 
         */
        public: static const int bluetooth_pairing_error_message = 0x7f0a01ab;
        /**  Message when bluetooth is informing the user of the pairing key. [CHAR LIMIT=NONE] 
         */
        public: static const int bluetooth_pairing_key_msg = 0x7f0a019d;
        /**  Message for the error dialog when BT pairing fails because the PIN /
    Passkey entered is incorrect. 
         */
        public: static const int bluetooth_pairing_pin_error_message = 0x7f0a01ac;
        /**  Message for the error dialog when BT pairing fails because the other device rejected the pairing. 
         */
        public: static const int bluetooth_pairing_rejected_error_message = 0x7f0a01ae;
        /**  ======================================================================================= 
 Note: The opening brackets of HTML style tags are escaped (e.g. "<b>" is "&lt;b>") in   
   the following resources to enable formatting followed by HTML styling, as described   
   here:  http://developer.android.com/guide/topics/resources/string-resource.html       
 ======================================================================================= 
 Title for the dialog to enter PIN. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_pairing_request = 0x7f0a019b;
        /**  Message in pairing dialogs.  [CHAR LIMIT=NONE] 
         */
        public: static const int bluetooth_pairing_will_share_phonebook = 0x7f0a01a9;
        /**  Bluetooth settings. Connection options screen. The summary for the checkbox preference when PAN is connected (NAP role). [CHAR LIMIT=25]
         */
        public: static const int bluetooth_pan_nap_profile_summary_connected = 0x7f0a01e5;
        /**  Bluetooth settings. Connection options screen. The summary
         for the PAN checkbox preference that describes how checking it
         will set the PAN profile as preferred. 
         */
        public: static const int bluetooth_pan_profile_summary_use_for = 0x7f0a01ea;
        /**  Bluetooth settings. Connection options screen. The summary for the checkbox preference when PAN is connected (user role). [CHAR LIMIT=25]
         */
        public: static const int bluetooth_pan_user_profile_summary_connected = 0x7f0a01e4;
        /**  Bluetooth phone book permission Alert Activity text [CHAR LIMIT=none] 
         */
        public: static const int bluetooth_pb_acceptance_dialog_text = 0x7f0a0099;
        /** FIXME SHOULD BE REMOVED AND ALL LANG VERSIONS FIXED TO ABOVE NAME 
         */
        public: static const int bluetooth_pb_remember_choice = 0x7f0a009b;
        /**  Strings for dialog title when asking to the user whether to allow an app to enable discovery mode 
         */
        public: static const int bluetooth_permission_request = 0x7f0a0089;
        /**  Activity label of BluetoothPbPermissionActivity, also used as Strings in the permission dialog [CHAR LIMIT=none] 
         */
        public: static const int bluetooth_phonebook_request = 0x7f0a0098;
        /**  Bluetooth PIN hint text (below the text entry box). [CHAR LIMIT=30] 
         */
        public: static const int bluetooth_pin_values_hint = 0x7f0a01a0;
        /**  Bluetooth settings: The sub heading for device settings. [CHAR LIMIT=30] 
         */
        public: static const int bluetooth_preference_device_settings = 0x7f0a01b3;
        /**  Bluetooth settings: The sub heading for available devices during and after scanning. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_preference_found_devices = 0x7f0a01be;
        /**  Bluetooth settings: The message displayed if no Bluetooth devices were found. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_preference_no_found_devices = 0x7f0a01bf;
        /**  Bluetooth settings: The sub heading for devices which have already been paired with this device. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_preference_paired_devices = 0x7f0a01bd;
        /**  Bluetooth settings: Checkbox label for enable/disable contacts connection.  [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_preference_paired_dialog_contacts_option = 0x7f0a01b8;
        /**  Bluetooth settings: Checkbox label for enable/disable internet connection.  [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_preference_paired_dialog_internet_option = 0x7f0a01b6;
        /**  Bluetooth settings: Checkbox label for enable/disable keyboard connection.  [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_preference_paired_dialog_keyboard_option = 0x7f0a01b7;
        /**  Bluetooth settings: Name label [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_preference_paired_dialog_name_label = 0x7f0a01b5;
        /**  Bluetooth settings: Paired dialog title [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_preference_paired_dialog_title = 0x7f0a01b4;
        /**  Bluetooth settings: The title of the preference (list item) that initiates a scan for devices 
         */
        public: static const int bluetooth_preference_scan_title = 0x7f0a01b0;
        /**  Bluetooth settings.  The user-visible string that is used whenever referring to the A2DP profile. 
         */
        public: static const int bluetooth_profile_a2dp = 0x7f0a01ca;
        /**  Bluetooth settings screen, image description for profile of a device details button. 
         */
        public: static const int bluetooth_profile_details = 0x7f0a006a;
        /**  Bluetooth settings.  The user-visible string that is used whenever referring to the headset or handsfree profile. 
         */
        public: static const int bluetooth_profile_headset = 0x7f0a01cb;
        /**  Bluetooth settings. The user-visible string that is used whenever referring to the HID profile. 
         */
        public: static const int bluetooth_profile_hid = 0x7f0a01cd;
        /**  Bluetooth settings.  The user-visible string that is used whenever referring to the map profile. 
         */
        public: static const int bluetooth_profile_map = 0x7f0a01d2;
        /**  Bluetooth settings.  The user-visible string that is used whenever referring to the OPP profile. 
         */
        public: static const int bluetooth_profile_opp = 0x7f0a01cc;
        /**  Bluetooth settings. The user-visible string that is used whenever referring to the PAN profile (accessing Internet through remote device). [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_profile_pan = 0x7f0a01ce;
        /**  Bluetooth settings. The user-visible string that is used whenever referring to the PAN profile (sharing this device's Internet connection). [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_profile_pan_nap = 0x7f0a01d1;
        /**  Bluetooth settings. The user-visible string that is used whenever referring to the PBAP profile. [CHAR LIMIT=40] 
         */
        public: static const int bluetooth_profile_pbap = 0x7f0a01cf;
        /**  Bluetooth settings. The user-visible summary string that is used whenever referring to the PBAP profile (sharing contacts). [CHAR LIMIT=60] 
         */
        public: static const int bluetooth_profile_pbap_summary = 0x7f0a01d0;
        /**  Bluetooth settings check box summary for turning on bluetooth 
         */
        public: static const int bluetooth_quick_toggle_summary = 0x7f0a0197;
        /**  Bluetooth settings 
 Bluetooth settings check box title on Main Settings screen 
         */
        public: static const int bluetooth_quick_toggle_title = 0x7f0a0196;
        /**  Bluetooth phone book permission Alert Activity checkbox text [CHAR LIMIT=none] 
         */
        public: static const int bluetooth_remember_choice = 0x7f0a009a;
        /**  Bluetooth settings screen, confirmation button for rename device dialog. [CHAR LIMIT=20] 
         */
        public: static const int bluetooth_rename_button = 0x7f0a006e;
        /**  Bluetooth settings screen, menu item to change this device's Bluetooth name. [CHAR LIMIT=30] 
         */
        public: static const int bluetooth_rename_device = 0x7f0a006d;
        /**  Bluetooth settings screen, menu item to scan for nearby bluetooth devices 
         */
        public: static const int bluetooth_scan_for_devices = 0x7f0a006c;
        /**  Bluetooth settings: The title of the action button that initiates a search for nearby devices [CHAR LIMIT=20] 
         */
        public: static const int bluetooth_search_for_devices = 0x7f0a01b1;
        /**  Bluetooth settings: The title of the action button while a search for nearby devices is in progress [CHAR LIMIT=20] 
         */
        public: static const int bluetooth_searching_for_devices = 0x7f0a01b2;
        /** Used as title on second screen after selecting Bluetooth settings 
         */
        public: static const int bluetooth_settings = 0x7f0a0198;
        /** Wireless controls screen, settings summary for the item tot ake you to the bluetooth settings screen 
         */
        public: static const int bluetooth_settings_summary = 0x7f0a019a;
        /** Wireless controls screen, settings title for the item to take you to the bluetooth settings screen 
         */
        public: static const int bluetooth_settings_title = 0x7f0a0199;
        /**  Bluetooth settings screen, menu to show the list of received files [CHAR LIMIT=30] 
         */
        public: static const int bluetooth_show_received_files = 0x7f0a0087;
        /**  Bluetooth Tethering settings
 Label for bluetooth tether checkbox [CHAR LIMIT=25]
         */
        public: static const int bluetooth_tether_checkbox_text = 0x7f0a03f3;
        /**  Bluetooth available subtext - shown when Bluetooth tethering is turned on but it is not currently tethered to any devices [CHAR LIMIT=50]
         */
        public: static const int bluetooth_tethering_available_subtext = 0x7f0a03f4;
        /**  Bluetooth connected subtext - shown when a device is tethered over Bluetooth [CHAR LIMIT=60]
         */
        public: static const int bluetooth_tethering_device_connected_subtext = 0x7f0a03f5;
        /**  Bluetooth connected subtext - shown when multiple devices are tethered over Bluetooth [CHAR LIMIT=60]
         */
        public: static const int bluetooth_tethering_devices_connected_subtext = 0x7f0a03f6;
        /**  Bluetooth errored subtext - shown when Bluetooth is broken for some reason [CHAR LIMIT=50]
         */
        public: static const int bluetooth_tethering_errored_subtext = 0x7f0a03f9;
        /**  Bluetooth tethering off subtext - shown when Bluetooth Tethering is turned off [CHAR LIMIT=50]
         */
        public: static const int bluetooth_tethering_off_subtext = 0x7f0a03f8;
        /**  Bluetooth tethering off subtext - shown when Bluetooth Tethering is turned off [CHAR LIMIT=50]
         */
        public: static const int bluetooth_tethering_off_subtext_config = 0x7f0a03f7;
        /**  Bluetooth Tethering settings. Error message shown when trying to connect an 8th device [CHAR LIMIT=50]
         */
        public: static const int bluetooth_tethering_overflow_error = 0x7f0a03fa;
        /**  Strings for msg to display to user while bluetooth is turning off [CHAR LIMIT=60] 
         */
        public: static const int bluetooth_turning_off = 0x7f0a0093;
        /**  Strings for msg to display to user while bluetooth is turning on [CHAR LIMIT=60] 
         */
        public: static const int bluetooth_turning_on = 0x7f0a0092;
        /**  Bluetooth settings.  Message when the device state is unknown 
         */
        public: static const int bluetooth_unknown = 0x7f0a007f;
        /**  Bluetooth Tethering settings.  Message for untethering from a bluetooth device [CHAR LIMIT=50]
         */
        public: static const int bluetooth_untether_blank = 0x7f0a03fb;
        /**  Bluetooth settings screen, option name to pick discoverability timeout duration (a list dialog comes up) 
         */
        public: static const int bluetooth_visibility_timeout = 0x7f0a0064;
        /**  Sound & display settings screen, setting option name to change brightness level 
         */
        public: static const int brightness = 0x7f0a031b;
        /**  Sound & display settings screen, setting option summary to change brightness level 
         */
        public: static const int brightness_summary = 0x7f0a031d;
        /**  Sound & display settings screen, setting option name to change brightness level [CHAR LIMIT=30] 
         */
        public: static const int brightness_title = 0x7f0a031c;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int bssid_label = 0x7f0a02d7;
        /**  Setting Checkbox title whether to enable bluetooth HCI snoop log 
         */
        public: static const int bt_hci_snoop_log = 0x7f0a0559;
        /**  setting Checkbox summary whether to capture all bluetooth HCI packets in a file 
         */
        public: static const int bt_hci_snoop_log_summary = 0x7f0a055a;
        /**  [CHAR LIMIT=NONE] Setting checkbox title for Whether to include bug report item in power menu. 
         */
        public: static const int bugreport_in_power = 0x7f0a0555;
        /**  [CHAR LIMIT=NONE] Setting checkbox summary for Whether to include bug report item in power 
         */
        public: static const int bugreport_in_power_summary = 0x7f0a0556;
        /**  About phone screen,  setting option name  [CHAR LIMIT=40] 
         */
        public: static const int build_number = 0x7f0a0357;
        /**  Summary for built-in keyboard settings 
         */
        public: static const int builtin_keyboard_settings_summary = 0x7f0a054b;
        /**  Title for built-in keyboard settings 
         */
        public: static const int builtin_keyboard_settings_title = 0x7f0a054a;
        /**  Manage applications, Header name used for cache information 
         */
        public: static const int cache_header_label = 0x7f0a0474;
        /**  Manage applications, label that appears next to the cache size 
         */
        public: static const int cache_size_label = 0x7f0a0476;
        /**  Label for a process item representing a background process 
         */
        public: static const int cached = 0x7f0a04d7;
        /**  Call Manager enable settings summary.  [CHAR LIMIT=80] 
         */
        public: static const int call_manager_enable_summary = 0x7f0a088e;
        /**  Call Manager enable settings title.  [CHAR LIMIT=50] 
         */
        public: static const int call_manager_enable_title = 0x7f0a088d;
        /**  Call Manager settings summary.  [CHAR LIMIT=50] 
         */
        public: static const int call_manager_summary = 0x7f0a0890;
        /**  Call Manager settings title.  [CHAR LIMIT=50] 
         */
        public: static const int call_manager_title = 0x7f0a088f;
        /**  Main settings screen, Call settings summary for item to go into call settings 
         */
        public: static const int call_settings_summary = 0x7f0a03e5;
        /**  Main settings screen, Call settings title for item to go into the call settings 
         */
        public: static const int call_settings_title = 0x7f0a03e4;
        /**  check box Calls title [CHAR LIMIT=30] 
         */
        public: static const int calls_title = 0x7f0a0109;
        /**  ======================================================================================= 
 NEW STUFF 
 ======================================================================================= 
 Button label for generic cancel action [CHAR LIMIT=20] 
         */
        public: static const int cancel = 0x7f0a00fa;
        /**  Button label for generic cancel action in all caps [CHAR LIMIT=20] 
         */
        public: static const int cancel_all_caps = 0x7f0a00fb;
        /**  Messaage shown in dialog when you can't manually sync 
         */
        public: static const int cant_sync_dialog_message = 0x7f0a0750;
        /**  Title of dialog shown when you can't manually sync an item because it's disabled 
         */
        public: static const int cant_sync_dialog_title = 0x7f0a074f;
        /**  Title for the list of capabilities of an accessibility service. 
         */
        public: static const int capabilities_list_title = 0x7f0a05cc;
        /**  Description for the capability of an accessibility service to receive events and keys. 
         */
        public: static const int capability_desc_receiveAccessibilityEvents = 0x7f0a05d3;
        /**  Title for the capability of an accessibility service to receive events and keys. 
         */
        public: static const int capability_title_receiveAccessibilityEvents = 0x7f0a05d2;
        /**  Title for the preference to change video caption background color. [CHAR LIMIT=35] 
         */
        public: static const int captioning_background_color = 0x7f0a05b3;
        /**  Title for the preference to change video caption background opacity. [CHAR LIMIT=35] 
         */
        public: static const int captioning_background_opacity = 0x7f0a05b4;
        /**  Title for the preference catgeory containing custom video caption properties. [CHAR LIMIT=35] 
         */
        public: static const int captioning_custom_options_title = 0x7f0a05b2;
        /**  Title for the preference to change video caption edge color. [CHAR LIMIT=35] 
         */
        public: static const int captioning_edge_color = 0x7f0a05b9;
        /**  Title for the preference to change video caption edge type. [CHAR LIMIT=35] 
         */
        public: static const int captioning_edge_type = 0x7f0a05ba;
        /**  Title for the preference to change video caption text color. [CHAR LIMIT=35] 
         */
        public: static const int captioning_foreground_color = 0x7f0a05b7;
        /**  Title for the preference to change video caption text opacity. [CHAR LIMIT=35] 
         */
        public: static const int captioning_foreground_opacity = 0x7f0a05b8;
        /**  Title for the preference to change video caption locale. [CHAR LIMIT=35] 
         */
        public: static const int captioning_locale = 0x7f0a05af;
        /**  Title for the preference category containing video caption property presets. [CHAR LIMIT=35] 
         */
        public: static const int captioning_preset = 0x7f0a05b1;
        /**  Sample characters for previewing video caption preferences. [CHAR LIMIT=2] 
         */
        public: static const int captioning_preview_characters = 0x7f0a05bd;
        /**  Sample text for previewing video caption preferences. [CHAR LIMIT=NONE] 
         */
        public: static const int captioning_preview_text = 0x7f0a05bc;
        /**  Title for the preference category containing the video caption preview. [CHAR LIMIT=35] 
         */
        public: static const int captioning_preview_title = 0x7f0a05ad;
        /**  Title for the preference catgeory containing standard video caption options. [CHAR LIMIT=35] 
         */
        public: static const int captioning_standard_options_title = 0x7f0a05ae;
        /**  Title for the preference to change video caption text size. [CHAR LIMIT=35] 
         */
        public: static const int captioning_text_size = 0x7f0a05b0;
        /**  Title for the preference to change video caption font family (ex. monospace, sans-serif). [CHAR LIMIT=35] 
         */
        public: static const int captioning_typeface = 0x7f0a05bb;
        /**  Title for the preference to change video caption window color. [CHAR LIMIT=35] 
         */
        public: static const int captioning_window_color = 0x7f0a05b5;
        /**  Title for the preference to change video caption window opacity. [CHAR LIMIT=35] 
         */
        public: static const int captioning_window_opacity = 0x7f0a05b6;
        /**  Edit enable/disable of APN 
         */
        public: static const int carrier_enabled = 0x7f0a03b7;
        public: static const int carrier_enabled_summaryOff = 0x7f0a03b9;
        public: static const int carrier_enabled_summaryOn = 0x7f0a03b8;
        /**  Header for items under the personal user [CHAR LIMIT=30] 
         */
        public: static const int category_personal = 0x7f0a0313;
        public: static const int category_printers = 0x7f0a0983;
        /**  Header for items under the work user [CHAR LIMIT=30] 
         */
        public: static const int category_work = 0x7f0a0314;
        /**  Main Settings screen setting option summary text for the item to take you to the CDMA security and location screen 
         */
        public: static const int cdma_security_settings_summary = 0x7f0a0143;
        /**  Cell Broadcast settings title.  [CHAR LIMIT=50] 
         */
        public: static const int cell_broadcast_settings = 0x7f0a0891;
        public: static const int cell_broadcast_settings_summary = 0x7f0a098e;
        /**  check box cellular data summary [CHAR LIMIT=41] 
         */
        public: static const int cellular_data_summary = 0x7f0a010b;
        /**  check box cellular data title [CHAR LIMIT=30] 
         */
        public: static const int cellular_data_title = 0x7f0a0108;
        /**  Sound settings screen, the caption of the checkbox for having the notification volume be
         the same as the incoming call volume. 
         */
        public: static const int checkbox_notification_same_as_incoming_call = 0x7f0a02f2;
        /**  The title of the activity to pick a time zone. 
         */
        public: static const int choose_timezone = 0x7f0a009f;
        /**  Manage applications, individual application screen, button label under Launch by default heading.  This is used to clear any default actions that may be assigned to this app.  
         */
        public: static const int clear_activities = 0x7f0a0488;
        /**  Setting title to revoke secure USB debugging authorizations 
         */
        public: static const int clear_adb_keys = 0x7f0a0554;
        /**  Manage applications, text label for button 
         */
        public: static const int clear_cache_btn_text = 0x7f0a0475;
        /**  Manage applications, individual application screen, confirmation dialog message. Displays when user selects to "Clear data". It warns the user of the consequences of clearing the data for an app. 
         */
        public: static const int clear_data_dlg_text = 0x7f0a04a4;
        /**  Manage applications, individual application screen, confirmation dialog title. Displays when user selects to "Clear data". 
         */
        public: static const int clear_data_dlg_title = 0x7f0a04a3;
        /**  Manage applications, individual application dialog box message. Shown when there was an error trying to clear the data. 
         */
        public: static const int clear_data_failed = 0x7f0a04a9;
        /**  Manage applications, text for dialog if clear data fails
         */
        public: static const int clear_failed_dlg_text = 0x7f0a04ad;
        /**  Manage applications, title for dialog if clear data fails
         */
        public: static const int clear_failed_dlg_title = 0x7f0a04ac;
        /**  Manage applications, individual application info screen, button label under Storage heading. Button to clear all data associated with tis app (for exampel, remove all cached emails for an Email app) 
         */
        public: static const int clear_user_data_text = 0x7f0a0483;
        /**  Label for the color black. [CHAR LIMIT=35] 
         */
        public: static const int color_black = 0x7f0a05c3;
        /**  Label for the color blue. [CHAR LIMIT=35] 
         */
        public: static const int color_blue = 0x7f0a05c6;
        /**  Label for custom colors, formats as a HTML color. 
         */
        public: static const int color_custom = 0x7f0a05ca;
        /**  Label for the color cyan. [CHAR LIMIT=35] 
         */
        public: static const int color_cyan = 0x7f0a05c7;
        /**  Label for the color gray. [CHAR LIMIT=35] 
         */
        public: static const int color_gray = 0x7f0a05c2;
        /**  Label for the color green. [CHAR LIMIT=35] 
         */
        public: static const int color_green = 0x7f0a05c5;
        /**  Label for the color magenta. [CHAR LIMIT=35] 
         */
        public: static const int color_magenta = 0x7f0a05c9;
        /**  Label for no color (transparent). [CHAR LIMIT=35] 
         */
        public: static const int color_none = 0x7f0a05c0;
        /**  Orange label.  [CHAR LIMIT=40] 
         */
        public: static const int color_orange = 0x7f0a08c1;
        /**  Purple label.  [CHAR LIMIT=40] 
         */
        public: static const int color_purple = 0x7f0a08c2;
        /**  Label for the color red. [CHAR LIMIT=35] 
         */
        public: static const int color_red = 0x7f0a05c4;
        /**  Label for default color. This lets the app pick the color. [CHAR LIMIT=35] 
         */
        public: static const int color_unspecified = 0x7f0a05bf;
        /**  Label for the color white. [CHAR LIMIT=35] 
         */
        public: static const int color_white = 0x7f0a05c1;
        /**  Label for the color yellow. [CHAR LIMIT=35] 
         */
        public: static const int color_yellow = 0x7f0a05c8;
        public: static const int computing_size = 0x7f0a04b6;
        /**  Summary for a warning message about security implications of enabling a condition
          provider, displayed as a dialog message. [CHAR LIMIT=NONE] 
         */
        public: static const int condition_provider_security_warning_summary = 0x7f0a0924;
        /**  Title for a warning message about security implications of enabling a condition
          provider, displayed as a dialog message. [CHAR LIMIT=NONE] 
         */
        public: static const int condition_provider_security_warning_title = 0x7f0a0923;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Configuration screen
         */
        public: static const int config_list_label = 0x7f0a02e5;
        /**  Title for configuring input method settings [CHAR LIMIT=35] 
         */
        public: static const int configure_input_method = 0x7f0a0542;
        /**  Prompt for the user to confirm the new full-backup password by re-entering it 
         */
        public: static const int confirm_new_backup_pw_prompt = 0x7f0a0817;
        /**  Button label for generic continue action in all caps [CHAR LIMIT=20] 
         */
        public: static const int continue_all_caps = 0x7f0a00fc;
        /**  About phone settings screen, setting option name to see a list of contributors 
         */
        public: static const int contributors_title = 0x7f0a0429;
        /**  Manage applications, Header name used for other controls 
         */
        public: static const int controls_label = 0x7f0a0477;
        /**  Subtitle for possible options 
         */
        public: static const int controls_subtitle = 0x7f0a0612;
        /**  About phone settings screen, setting option name to see copyright-related info 
         */
        public: static const int copyright_title = 0x7f0a042b;
        /**  Strings for Dialog create button 
         */
        public: static const int create = 0x7f0a0008;
        /**  Title of preference of what type of credential storage this device has: hardware or software [CHAR LIMIT=30] 
         */
        public: static const int credential_storage_type = 0x7f0a06c9;
        /**  Summary text for preference showing what type of credential storage this device has when it is stored in a hardware-backed storage (as opposed to "software only") [CHAR LIMIT=NONE] 
         */
        public: static const int credential_storage_type_hardware = 0x7f0a06ca;
        /**  Summary text for preference showing what type of credential storage this device has when it is stored in software only (as opposed to "hardware-backed") [CHAR LIMIT=NONE] 
         */
        public: static const int credential_storage_type_software = 0x7f0a06cb;
        /**  Description of dialog to explain that a lock screen password is required to use credential storage [CHAR LIMIT=NONE] 
         */
        public: static const int credentials_configure_lock_screen_hint = 0x7f0a06da;
        /**  Toast message [CHAR LIMIT=30] 
         */
        public: static const int credentials_enabled = 0x7f0a06d9;
        /**  Toast message [CHAR LIMIT=30] 
         */
        public: static const int credentials_erased = 0x7f0a06d7;
        /**  Title of preference to install certificates from SD card [CHAR LIMIT=30] 
         */
        public: static const int credentials_install = 0x7f0a06c2;
        /**  Explanation of drawing unlock pattern to install credentials 
         */
        public: static const int credentials_install_gesture_explanation = 0x7f0a06ce;
        /**  Message to draw an unlock pattern when installing credentials 
         */
        public: static const int credentials_install_gesture_prompt = 0x7f0a06cd;
        /**  Summary of preference to install certificates from SD card [CHAR LIMIT=NONE] 
         */
        public: static const int credentials_install_summary = 0x7f0a06c3;
        /**  Toast message [CHAR LIMIT=30] when credential storage containing private keys and certificates could not be erased (opposite of string credentials_erased) 
         */
        public: static const int credentials_not_erased = 0x7f0a06d8;
        /**  Description of the input box for the old password [CHAR LIMIT=30] 
         */
        public: static const int credentials_old_password = 0x7f0a06d1;
        public: static const int credentials_password_too_short = 0x7f0a06d3;
        /**  Title of preference to reset credential storage [CHAR LIMIT=30] 
         */
        public: static const int credentials_reset = 0x7f0a06c4;
        /**  Description of dialog to reset credential storage [CHAR LIMIT=NONE] 
         */
        public: static const int credentials_reset_hint = 0x7f0a06d2;
        /**  Summary of preference to reset credential storage [CHAR LIMIT=NONE] 
         */
        public: static const int credentials_reset_summary = 0x7f0a06c5;
        /**  Error message [CHAR LIMIT=NONE] 
         */
        public: static const int credentials_reset_warning = 0x7f0a06d5;
        /**  Error message [CHAR LIMIT=NONE] 
         */
        public: static const int credentials_reset_warning_plural = 0x7f0a06d6;
        /**  Error message for users that aren't allowed to see or modify credentials [CHAR LIMIT=none] 
         */
        public: static const int credentials_settings_not_available = 0x7f0a06cc;
        /**  Title of preference group for credential storage settings [CHAR LIMIT=30] 
         */
        public: static const int credentials_title = 0x7f0a06c1;
        /**  Title of dialog to enable credential storage [CHAR LIMIT=30] 
         */
        public: static const int credentials_unlock = 0x7f0a06cf;
        /**  Description of dialog to enable credential storage [CHAR LIMIT=NONE] 
         */
        public: static const int credentials_unlock_hint = 0x7f0a06d0;
        /**  Error message [CHAR LIMIT=NONE] 
         */
        public: static const int credentials_wrong_password = 0x7f0a06d4;
        /**  Button text to start encryption process 
         */
        public: static const int crypt_keeper_button_text = 0x7f0a0149;
        /**  String at bottom of screen when prompting for pattern.
         Note: This is only for the pattern case. 
         */
        public: static const int crypt_keeper_confirm_encrypt = 0x7f0a014e;
        /**  Title of the final confirmation screen before starting device encryption 
         */
        public: static const int crypt_keeper_confirm_title = 0x7f0a014f;
        /**  Informational text on the password entry screen when password entry fails
         */
        public: static const int crypt_keeper_cooldown = 0x7f0a0154;
        /**  Informational text when encryption fails 
         */
        public: static const int crypt_keeper_data_corrupt_summary = 0x7f0a015a;
        /**  Title of the encryption screen when decrypting the device failed 
         */
        public: static const int crypt_keeper_data_corrupt_title = 0x7f0a0159;
        /**  Informational text in the first confirmation screen before starting device encryption 
         */
        public: static const int crypt_keeper_desc = 0x7f0a0148;
        /**  Dialog message, shown when encryption cannot proceed because a PIN/Password is needed 
         */
        public: static const int crypt_keeper_dialog_need_password_message = 0x7f0a014d;
        /**  Dialog title, shown when encryption cannot proceed because a PIN/Password is needed 
         */
        public: static const int crypt_keeper_dialog_need_password_title = 0x7f0a014c;
        public: static const int crypt_keeper_encrypt_summary = 0x7f0a0969;
        /**  Title of the preferences item to control encryption 
         */
        public: static const int crypt_keeper_encrypt_title = 0x7f0a0146;
        /**  Summary of the preferences item to control encryption, when encryption is active 
         */
        public: static const int crypt_keeper_encrypted_summary = 0x7f0a0147;
        /**  Informational text on the password entry screen prompting the user for their password 
         */
        public: static const int crypt_keeper_enter_password = 0x7f0a0156;
        /**  Informational text when encryption fails 
         */
        public: static const int crypt_keeper_failed_summary = 0x7f0a0158;
        /**  Title of the encryption screen when encrypting the device failed 
         */
        public: static const int crypt_keeper_failed_title = 0x7f0a0157;
        /**  Warning text in the final confirmation screen before starting device encryption 
         */
        public: static const int crypt_keeper_final_desc = 0x7f0a0150;
        /**  Warning string that will be displayed when encryption cannot be started 
         */
        public: static const int crypt_keeper_low_charge_text = 0x7f0a014a;
        /**  Title of the preferences category for preference items to control encryption 
         */
        public: static const int crypt_keeper_settings_title = 0x7f0a0145;
        /**  Informational text on the progress screen while encrypting the device 
         */
        public: static const int crypt_keeper_setup_description = 0x7f0a0152;
        public: static const int crypt_keeper_setup_time_remaining = 0x7f0a0153;
        /**  Title of the progress screen while encrypting the device 
         */
        public: static const int crypt_keeper_setup_title = 0x7f0a0151;
        /**  Image button description to switch input method 
         */
        public: static const int crypt_keeper_switch_input_method = 0x7f0a015b;
        /**  Warning string that will be displayed when encryption cannot be started 
         */
        public: static const int crypt_keeper_unplugged_text = 0x7f0a014b;
        /**  Warn user their device will be wiped if they make x more failed attempts 
         */
        public: static const int crypt_keeper_warn_wipe = 0x7f0a0155;
        /**  Button at the bottom of the CryptKeeper screen to make an emergency call. 
         */
        public: static const int cryptkeeper_emergency_call = 0x7f0a07e7;
        /**  Button at the bottom of the CryptKeeper screen that lets the user return to a call 
         */
        public: static const int cryptkeeper_return_to_call = 0x7f0a07e8;
        /**  Prompt for the user to enter their current full-backup password 
         */
        public: static const int current_backup_pw_prompt = 0x7f0a0815;
        /**  Title for the option to press to choose the current keyboard, also known as input method [CHAR LIMIT=35] 
         */
        public: static const int current_input_method = 0x7f0a053d;
        /**  Label for deuteranomaly (red-green color blindness) [CHAR LIMIT=45] 
         */
        public: static const int daltonizer_mode_deuteranomaly = 0x7f0a05a6;
        /**  Label for disabling color space adjustment [CHAR LIMIT=45] 
         */
        public: static const int daltonizer_mode_disabled = 0x7f0a05a4;
        /**  Label for converting display colors to grayscale, which simulates monochromacy (complete color blindness). [CHAR LIMIT=45] 
         */
        public: static const int daltonizer_mode_monochromacy = 0x7f0a05a5;
        /**  Label for protanomaly (red-green color blindness) [CHAR LIMIT=45] 
         */
        public: static const int daltonizer_mode_protanomaly = 0x7f0a05a7;
        /**  Label for tritanomaly (blue-yellow color blindness) [CHAR LIMIT=45] 
         */
        public: static const int daltonizer_mode_tritanomaly = 0x7f0a05a8;
        /**  Title for the preference to configure the type of color space correction to apply. [CHAR LIMIT=NONE] 
         */
        public: static const int daltonizer_type = 0x7f0a05a2;
        /**  Summary shown for color space correction preference when its value is overridden by another preference [CHAR LIMIT=35] 
         */
        public: static const int daltonizer_type_overridden = 0x7f0a05a3;
        /** Dashboard strings
 Text to describe the dashboard fragment title [CHAR LIMIT=16] 
         */
        public: static const int dashboard_title = 0x7f0a08d0;
        /**  Manage applications, individual application info screen, label under Storage heading.  The amount of sapce taken up by the app's data (for example, downloaded emails or something like that) 
         */
        public: static const int data_size_label = 0x7f0a047c;
        /**  Message about carrier data accounting.  [CHAR LIMIT=100] 
         */
        public: static const int data_usage_accounting = 0x7f0a0798;
        /**  Title for app usage. [CHAR LIMIT=40] 
         */
        public: static const int data_usage_app = 0x7f0a0799;
        /**  Title for app usage. [CHAR LIMIT=40] 
         */
        public: static const int data_usage_app_info_label = 0x7f0a079a;
        /**  Title for application data usage separator in data usage list. [CHAR LIMIT=25] 
         */
        public: static const int data_usage_app_items_header_text = 0x7f0a079e;
        /**  Checkbox label that restricts background data usage of a specific application. [CHAR LIMIT=40] 
         */
        public: static const int data_usage_app_restrict_background = 0x7f0a07c6;
        /**  Summary message for checkbox that restricts background data usage of a specific application. [CHAR LIMIT=64] 
         */
        public: static const int data_usage_app_restrict_background_summary = 0x7f0a07c7;
        /**  Summary message for checkbox that restricts background data usage of a specific application when no networks have been limited. [CHAR LIMIT=84] 
         */
        public: static const int data_usage_app_restrict_background_summary_disabled = 0x7f0a07c8;
        /**  Body of dialog shown when user restricts background data usage of a specific application. [CHAR LIMIT=NONE] 
         */
        public: static const int data_usage_app_restrict_dialog = 0x7f0a07ca;
        /**  Title of dialog shown when user restricts background data usage of a specific application. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_app_restrict_dialog_title = 0x7f0a07c9;
        /**  Label for application which has its data usage restricted. [CHAR LIMIT=16] 
         */
        public: static const int data_usage_app_restricted = 0x7f0a07b3;
        /**  Button title for launching application-specific data usage settings. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_app_settings = 0x7f0a07c5;
        /**  Activity title for Appk data usage summary. [CHAR LIMIT=25] 
         */
        public: static const int data_usage_app_summary_title = 0x7f0a0797;
        /**   Body of dialog shown when user disables global auto sync [CHAR LIMIT=none] 
         */
        public: static const int data_usage_auto_sync_off_dialog = 0x7f0a07cf;
        /**   Title of dialog shown when user disables global auto sync [CHAR LIMIT=32] 
         */
        public: static const int data_usage_auto_sync_off_dialog_title = 0x7f0a07ce;
        /**   Body of dialog shown when user enables global auto sync [CHAR LIMIT=none] 
         */
        public: static const int data_usage_auto_sync_on_dialog = 0x7f0a07cd;
        /**   Title of dialog shown when user enables global auto sync [CHAR LIMIT=32] 
         */
        public: static const int data_usage_auto_sync_on_dialog_title = 0x7f0a07cc;
        /**  Data Usage Background label.  [CHAR LIMIT=40] 
         */
        public: static const int data_usage_background_label = 0x7f0a07c4;
        /**  Title for cellular data usage. [CHAR LIMIT=40] 
         */
        public: static const int data_usage_cellular_data = 0x7f0a079b;
        /**  Title for option to change data usage cycle day. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_change_cycle = 0x7f0a07ae;
        /**  Title for option to pick visible time range from a list available usage periods. [CHAR LIMIT=25] 
         */
        public: static const int data_usage_cycle = 0x7f0a079d;
        /**  Positive button title for data usage cycle editor, confirming that changes should be saved. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_cycle_editor_positive = 0x7f0a07d2;
        /**  Subtitle of dialog for editing data usage cycle reset date. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_cycle_editor_subtitle = 0x7f0a07d1;
        /**  Title of dialog for editing data usage cycle reset date. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_cycle_editor_title = 0x7f0a07d0;
        /**  Title for setting data limit. [CHAR LIMIT=40] 
         */
        public: static const int data_usage_data_limit = 0x7f0a079c;
        /**  Checkbox label that will disable 2G-3G network data connection when user-defined limit is reached. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_disable_3g_limit = 0x7f0a07b7;
        /**  Checkbox label that will disable 4G network data connection when user-defined limit is reached. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_disable_4g_limit = 0x7f0a07b6;
        /**  Body of dialog shown to request confirmation that mobile data will be disabled. [CHAR LIMIT=NONE] 
         */
        public: static const int data_usage_disable_mobile = 0x7f0a07b4;
        /**  Checkbox label that will disable mobile network data connection when user-defined limit is reached. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_disable_mobile_limit = 0x7f0a07b5;
        /**  Checkbox label that will disable Wi-Fi network data connection when user-defined limit is reached. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_disable_wifi_limit = 0x7f0a07b8;
        /**  Disclaimer string for data usage measured by device. [CHAR LIMIT=80] 
         */
        public: static const int data_usage_disclaimer = 0x7f0a07e6;
        /**  Label shown when no applications used data during selected time period. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_empty = 0x7f0a07b0;
        /**  Toggle switch title for enabling 2G and 3G data network connections. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_enable_3g = 0x7f0a07c1;
        /**  Toggle switch title for enabling 4G data network connection. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_enable_4g = 0x7f0a07c2;
        /**  Toggle switch title for enabling all mobile data network connections. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_enable_mobile = 0x7f0a07c0;
        /**  Data Usage Foreground label.  [CHAR LIMIT=40] 
         */
        public: static const int data_usage_forground_label = 0x7f0a07c3;
        /**  Label for data usage occuring while application in background. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_label_background = 0x7f0a07b2;
        /**  Label for data usage occuring while application in foreground. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_label_foreground = 0x7f0a07b1;
        /**  Body of dialog shown before user limits mobile data usage. [CHAR LIMIT=NONE] 
         */
        public: static const int data_usage_limit_dialog_mobile = 0x7f0a07d6;
        /**  Title of dialog shown before user limits data usage. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_limit_dialog_title = 0x7f0a07d5;
        /**  Title of dialog for editing data usage limit in bytes. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_limit_editor_title = 0x7f0a07d4;
        /**  Title shown when current operation applies to mobile networks. [CHAR LIMIT=20] 
         */
        public: static const int data_usage_list_mobile = 0x7f0a07be;
        /**  Title shown when current operation applies to no networks. [CHAR LIMIT=20] 
         */
        public: static const int data_usage_list_none = 0x7f0a07bf;
        /**  Title for menu option to allow background data usage. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_allow_background = 0x7f0a07a1;
        /**  Title for menu option to enable global auto-sync of account data 
         */
        public: static const int data_usage_menu_auto_sync = 0x7f0a07a8;
        /**  Title for menu option to show details for all cellular networks. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_cellular_networks = 0x7f0a07aa;
        /**  Title for menu option to hide Ethernet data usage. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_hide_ethernet = 0x7f0a07a6;
        /**  Title for menu option to hide Wi-Fi data usage. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_hide_wifi = 0x7f0a07a4;
        /**  Title for menu option to configure metered networks. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_metered = 0x7f0a07a7;
        /**  Title for menu option to restrict background data usage. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_restrict_background = 0x7f0a07a0;
        /**  Title for menu option to enable mobile data when roaming. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_roaming = 0x7f0a079f;
        /**  Title for menu option to show Ethernet data usage. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_show_ethernet = 0x7f0a07a5;
        /**  Title for menu option to show Wi-Fi data usage. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_show_wifi = 0x7f0a07a3;
        /**  Title for menu option to show details for all SIM cards. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_sim_cards = 0x7f0a07a9;
        /**  Title for menu option to show 4G mobile data usage separate from other mobile data usage. [CHAR LIMIT=26] 
         */
        public: static const int data_usage_menu_split_4g = 0x7f0a07a2;
        /**  Dialog body for selecting paid networks. [CHAR LIMIT=NONE] 
         */
        public: static const int data_usage_metered_body = 0x7f0a07e2;
        /**  Header for list of mobile networks. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_metered_mobile = 0x7f0a07e3;
        /**  Dialog title for selecting metered networks. [CHAR LIMIT=25] 
         */
        public: static const int data_usage_metered_title = 0x7f0a07e1;
        /**  Header for list of Wi-Fi networks. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_metered_wifi = 0x7f0a07e4;
        /**  Body text prompting user to enable Wi-Fi to configure metered networks. [CHAR LIMIT=64] 
         */
        public: static const int data_usage_metered_wifi_disabled = 0x7f0a07e5;
        /**  Body of dialog prompting user to change numerical day of month that data usage cycle should reset. [CHAR LIMIT=64] 
         */
        public: static const int data_usage_pick_cycle_day = 0x7f0a07af;
        /**  Combination of total network bytes sent and received by an application. [CHAR LIMIT=NONE] 
         */
        public: static const int data_usage_received_sent = 0x7f0a07de;
        /**  Body of dialog shown before user restricts background data usage. [CHAR LIMIT=NONE] 
         */
        public: static const int data_usage_restrict_background = 0x7f0a07d8;
        /**  Body of dialog shown before user restricts background data usage. This is for multiuser phones. [CHAR LIMIT=NONE] 
         */
        public: static const int data_usage_restrict_background_multiuser = 0x7f0a07d9;
        /**  Title of dialog shown before user restricts background data usage. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_restrict_background_title = 0x7f0a07d7;
        /**  Body of dialog shown when user attempts to restrict background data before a network data limit has been set. [CHAR LIMIT=NONE] 
         */
        public: static const int data_usage_restrict_denied_dialog = 0x7f0a07cb;
        /**  Activity title for network data usage summary. [CHAR LIMIT=25] 
         */
        public: static const int data_usage_summary_title = 0x7f0a0796;
        /**  Label displaying current network data usage limit threshold. [CHAR LIMIT=18] 
         */
        public: static const int data_usage_sweep_limit = 0x7f0a07db;
        /**  Label displaying current network data usage warning threshold. [CHAR LIMIT=18] 
         */
        public: static const int data_usage_sweep_warning = 0x7f0a07da;
        /**  Tab title for showing 2G and 3G data usage. [CHAR LIMIT=10] 
         */
        public: static const int data_usage_tab_3g = 0x7f0a07bd;
        /**  Tab title for showing 4G data usage. [CHAR LIMIT=10] 
         */
        public: static const int data_usage_tab_4g = 0x7f0a07bc;
        /**  Tab title for showing Ethernet data usage. [CHAR LIMIT=10] 
         */
        public: static const int data_usage_tab_ethernet = 0x7f0a07ba;
        /**  Tab title for showing combined mobile data usage. [CHAR LIMIT=20] 
         */
        public: static const int data_usage_tab_mobile = 0x7f0a07bb;
        /**  Tab title for showing Wi-Fi data usage. [CHAR LIMIT=10] 
         */
        public: static const int data_usage_tab_wifi = 0x7f0a07b9;
        /**  Label displaying total network data transferred during a specific time period. [CHAR LIMIT=64] 
         */
        public: static const int data_usage_total_during_range = 0x7f0a07df;
        /**  Label displaying total network data transferred during a specific time period, including a disclaimer that contrasts device versus carrier reporting. [CHAR LIMIT=80] 
         */
        public: static const int data_usage_total_during_range_mobile = 0x7f0a07e0;
        /**  Title of data usage item that represents all uninstalled applications. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_uninstalled_apps = 0x7f0a07dc;
        /**  Title of data usage item that represents all uninstalled applications or removed users. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_uninstalled_apps_users = 0x7f0a07dd;
        /**  Title of dialog for editing data usage warning in bytes. [CHAR LIMIT=48] 
         */
        public: static const int data_usage_warning_editor_title = 0x7f0a07d3;
        /**  Date & time settings screen title 
         */
        public: static const int date_and_time = 0x7f0a009e;
        /**  Main Settings screen setting option summary text for the item to go into the date and time settings. 
         */
        public: static const int date_and_time_settings_summary = 0x7f0a0119;
        /**  Main Settings screen setting option name to go into the date and time settings
         */
        public: static const int date_and_time_settings_title = 0x7f0a0117;
        /**  Title for Date & Time settings screen in SetupWizard [CHAR LIMIT=40] 
         */
        public: static const int date_and_time_settings_title_setup_wizard = 0x7f0a0118;
        /**  Title string shown above DatePicker, letting a user select system date
         [CHAR LIMIT=20] 
         */
        public: static const int date_picker_title = 0x7f0a012c;
        /**  Date & time setting screen setting check box title 
         */
        public: static const int date_time_24hour = 0x7f0a0121;
        /**  Date & time setting screen setting check box title [CHAR LIMIT=30] 
         */
        public: static const int date_time_24hour_title = 0x7f0a0120;
        /**  Date & time setting screen setting check box title if the date and time should be determined automatically [CHAR LIMIT=25] 
         */
        public: static const int date_time_auto = 0x7f0a011a;
        /**  Date & time setting screen setting option summary text when Automatic check box is clear
        [CHAR LIMIT=100] 
         */
        public: static const int date_time_auto_summaryOff = 0x7f0a011c;
        /**  Date & time setting screen setting option summary text when Automatic check box is selected
        (that is, when date and time should be determined automatically) [CHAR LIMIT=100] 
         */
        public: static const int date_time_auto_summaryOn = 0x7f0a011b;
        /**  Date & time setting screen setting option title.  This setting allows the user to choose how the date should be displayed in apps (what ordering for month and day, etc.) 
         */
        public: static const int date_time_date_format = 0x7f0a0129;
        /**  Date & time setting screen setting option title.  This setting allows the user to choose how the date should be displayed in apps (what ordering for month and day, etc.)  [CHAR LIMIT=30] 
         */
        public: static const int date_time_date_format_title = 0x7f0a0128;
        /**  Date & time setting screen setting option title 
         */
        public: static const int date_time_set_date = 0x7f0a0127;
        /**  Date & time setting screen setting option title [CHAR LIMIT=30] 
         */
        public: static const int date_time_set_date_title = 0x7f0a0126;
        /**  Date & time setting screen setting option title 
         */
        public: static const int date_time_set_time = 0x7f0a0123;
        /**  Date & time setting screen setting option title [CHAR LIMIT=30] 
         */
        public: static const int date_time_set_time_title = 0x7f0a0122;
        /**  Date & time setting screen setting option title 
         */
        public: static const int date_time_set_timezone = 0x7f0a0125;
        /**  Date & time setting screen setting option title [CHAR LIMIT=30] 
         */
        public: static const int date_time_set_timezone_title = 0x7f0a0124;
        /**  UI debug setting: select current app to debug [CHAR LIMIT=50] 
         */
        public: static const int debug_app = 0x7f0a075f;
        /**  UI debug setting: no debug app has been set [CHAR LIMIT=50] 
         */
        public: static const int debug_app_not_set = 0x7f0a0760;
        /**  UI debug setting: debug app has been set [CHAR LIMIT=50] 
         */
        public: static const int debug_app_set = 0x7f0a0761;
        /**  Preference category for application debugging development settings. [CHAR LIMIT=25] 
         */
        public: static const int debug_applications_category = 0x7f0a0790;
        /**  Preference category for app debugging development settings. [CHAR LIMIT=50] 
         */
        public: static const int debug_debugging_category = 0x7f0a075e;
        /**  Preference category for drawing debugging development settings. [CHAR LIMIT=25] 
         */
        public: static const int debug_drawing_category = 0x7f0a0767;
        /**  Preference category for hardware accelerated drawing debugging development settings. [CHAR LIMIT=50] 
         */
        public: static const int debug_hw_drawing_category = 0x7f0a0768;
        /**  UI debug setting: show the amount of overdraw in apps using the GPU [CHAR LIMIT=25] 
         */
        public: static const int debug_hw_overdraw = 0x7f0a0777;
        /**  Preference category for input debugging development settings. [CHAR LIMIT=25] 
         */
        public: static const int debug_input_category = 0x7f0a0766;
        /**  Do not translate. 
         */
        public: static const int debug_intent_sender_label = 0x7f0a00f3;
        /**  UI debug setting: show layout bounds information [CHAR LIMIT=25] 
         */
        public: static const int debug_layout = 0x7f0a0780;
        /**  UI debug setting: show layout bounds information summary [CHAR LIMIT=50] 
         */
        public: static const int debug_layout_summary = 0x7f0a0781;
        /**  Preference category for monitoring debugging development settings. [CHAR LIMIT=25] 
         */
        public: static const int debug_monitoring_category = 0x7f0a076a;
        /**  Setting Checkbox title whether to enable view attribute inspection 
         */
        public: static const int debug_view_attributes = 0x7f0a0569;
        /**  Do not translate. Used as the value for a setting. 
         */
        public: static const int default_date_format = 0x7f0a00a0;
        /**  Option title for the default sound, context based on screen 
         */
        public: static const int default_sound = 0x7f0a08f8;
        /**  the following are for Settings Storage screen 
 Menu item/button 'delete' 
         */
        public: static const int delete_ = 0x7f0a0757;
        /**  Strings for Dialog deny button 
         */
        public: static const int deny = 0x7f0a000a;
        /**  Subtitle for application/subsystem details 
         */
        public: static const int details_subtitle = 0x7f0a0611;
        /**  Activity title for battery usage details for an app. or power consumer 
         */
        public: static const int details_title = 0x7f0a0610;
        /**  Warning text to user about the implications of enabling USB debugging 
         */
        public: static const int dev_settings_warning_message = 0x7f0a056e;
        /**  Title of warning dialog about the implications of enabling developer settings 
         */
        public: static const int dev_settings_warning_title = 0x7f0a056d;
        /**  Setting checkbox title for Whether to enable USB debugging support on the phone. 
 Error message for users that aren't allowed to modify developer options [CHAR LIMIT=none] 
         */
        public: static const int development_settings_not_available = 0x7f0a054e;
        /**  Development Settings summary.  The summary of the item to take the user to Development settings.  Development settings are settings meant for application developers. 
         */
        public: static const int development_settings_summary = 0x7f0a054d;
        /**  Development Settings.  the title for the item to take the user to Development settings.  Development settings are settings meant for application developers.  
         */
        public: static const int development_settings_title = 0x7f0a054c;
        /**  Device admin add activity title 
         */
        public: static const int device_admin_add_title = 0x7f0a06fe;
        /**  Device admin settings activity title 
         */
        public: static const int device_admin_settings_title = 0x7f0a06f3;
        /**  Device admin warning message about policies an admin can use 
         */
        public: static const int device_admin_status = 0x7f0a0700;
        /**  In the security screen, the header title for settings related to device admins 
         */
        public: static const int device_admin_title = 0x7f0a0190;
        /**  Device admin warning message about policies an admin can use 
         */
        public: static const int device_admin_warning = 0x7f0a06ff;
        /**  [CHAR LIMIT=35] Feedback on the device 
         */
        public: static const int device_feedback = 0x7f0a094a;
        /**  Device Info screen. Used for a status item's value when the proper value is not known 
         */
        public: static const int device_info_default = 0x7f0a000b;
        /**  The title of the activity to see random device info. 
         */
        public: static const int device_info_label = 0x7f0a00f4;
        /**  About phone screen, show when a value of some status item is unavailable. 
         */
        public: static const int device_info_not_available = 0x7f0a0359;
        /**  Advanced (used for diagnostics) device info activity title [CHAR LIMIT=40] 
         */
        public: static const int device_info_settings = 0x7f0a034f;
        /**  Strings for BluetoothDevicePicker [CHAR LIMIT=40]
         */
        public: static const int device_picker = 0x7f0a0088;
        /**  Master Clear 
 SD card & phone storage settings screen, setting option name under Internal phone storage heading [CHAR LIMIT=30] 
         */
        public: static const int device_reset_title = 0x7f0a03c9;
        /**  About phone screen, title of the item to go into the Phone status screen 
         */
        public: static const int device_status = 0x7f0a035b;
        /**  About phone screen, phone status screen title 
         */
        public: static const int device_status_activity_title = 0x7f0a035a;
        /**  About phone screen, summary of the item to go into the phone status screen 
         */
        public: static const int device_status_summary = 0x7f0a035c;
        /**  Sound & notification > Other sounds: Title for the option enabling touch sounds for dial pad tones. [CHAR LIMIT=30] 
         */
        public: static const int dial_pad_tones_title = 0x7f0a0910;
        /**  [CHAR LIMIT=40] Sound & display settings screen, title of dialog for picking font size 
         */
        public: static const int dialog_title_font_size = 0x7f0a0335;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Menu item for WifiManager disableNetwork API
         */
        public: static const int disableNetwork = 0x7f0a02cb;
        /**  UI debug setting: disable use of overlays? [CHAR LIMIT=25] 
         */
        public: static const int disable_overlays = 0x7f0a0778;
        /**  UI debug setting: disable use of overlays summary [CHAR LIMIT=50] 
         */
        public: static const int disable_overlays_summary = 0x7f0a0779;
        /**  Message for a warning about disabling accessibility service. [CHAR LIMIT=NONE] 
         */
        public: static const int disable_service_message = 0x7f0a05d5;
        /**  Title for a warning about disabling an accessibility service. [CHAR LIMIT=NONE] 
         */
        public: static const int disable_service_title = 0x7f0a05d4;
        /**  [CHAR LIMIT=25] Manage applications, individual application info screen, button label under Storage heading. Button to disable an existing application. 
         */
        public: static const int disable_text = 0x7f0a0481;
        /**  [CHAR LIMIT=25] Manage applications, text telling using an application is disabled. 
         */
        public: static const int disabled = 0x7f0a049d;
        /**  Summary shown when trust agent settings is disabled because the user hasn't set up primary security 
         */
        public: static const int disabled_because_no_backup_security = 0x7f0a0194;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Menu item for WifiManager disconnect API
         */
        public: static const int disconnect = 0x7f0a02cd;
        /**  [CHAR LIMIT=70] Rotate when screen is turned option 
         */
        public: static const int display_auto_rotate_rotate = 0x7f0a0954;
        /**  [CHAR LIMIT=70] Don't rotate when screen is turned option 
         */
        public: static const int display_auto_rotate_stay_in_current = 0x7f0a0957;
        /**  [CHAR LIMIT=70] Keep the screen in landscape when rotated 
         */
        public: static const int display_auto_rotate_stay_in_landscape = 0x7f0a0956;
        /**  [CHAR LIMIT=70] Keep the screen in portrait when rotated 
         */
        public: static const int display_auto_rotate_stay_in_portrait = 0x7f0a0955;
        /**  [CHAR LIMIT=45] Auto-rotate setting title 
         */
        public: static const int display_auto_rotate_title = 0x7f0a0953;
        /**  Label for chosen font size 
         */
        public: static const int display_font_size_label = 0x7f0a00a3;
        /**  The title of the activity to adjust display settings 
         */
        public: static const int display_label = 0x7f0a00f6;
        /**  label for text to indicate sort options 
         */
        public: static const int display_order_text = 0x7f0a0585;
        /**  Label of preview text when tweaking font size 
         */
        public: static const int display_preview_label = 0x7f0a00a2;
        /**  Sound & display settings screen, section header for settings related to display 
         */
        public: static const int display_settings = 0x7f0a0317;
        public: static const int display_settings_title = 0x7f0a02e7;
        /**  Manage applications, individual application screen, confirmation dialog button. Displays when user selects to "Clear data". 
         */
        public: static const int dlg_cancel = 0x7f0a04a6;
        /**  SD card eject confirmation dialog  
         */
        public: static const int dlg_confirm_unmount_text = 0x7f0a038d;
        /**  SD card eject confirmation dialog title   
         */
        public: static const int dlg_confirm_unmount_title = 0x7f0a038c;
        /**  SD card eject error dialog text   
         */
        public: static const int dlg_error_unmount_text = 0x7f0a038f;
        /**  SD card eject error dialog title   
         */
        public: static const int dlg_error_unmount_title = 0x7f0a038e;
        /**  Manage applications, individual application screen, confirmation dialog button. Displays when user selects to "Clear data". Goes through with the clearing of the data. 
         */
        public: static const int dlg_ok = 0x7f0a04a5;
        /**  Sound & notification > Other sounds: Value for the dock audio media with value 0: disabled. [CHAR LIMIT=30] 
         */
        public: static const int dock_audio_media_disabled = 0x7f0a0916;
        /**  Sound & notification > Other sounds: Value for the dock audio media with value 1: enabled. [CHAR LIMIT=30] 
         */
        public: static const int dock_audio_media_enabled = 0x7f0a0917;
        /**  Sound & notification > Other sounds: Title for the option enabling dock audio media. [CHAR LIMIT=50] 
         */
        public: static const int dock_audio_media_title = 0x7f0a0915;
        /**  Dock audio settings 
         */
        public: static const int dock_audio_settings_title = 0x7f0a0308;
        /**  Dock audio summary for docked to car dock 
         */
        public: static const int dock_audio_summary_car = 0x7f0a030a;
        /**  Dock audio summary for docked to desk dock 
         */
        public: static const int dock_audio_summary_desk = 0x7f0a0309;
        /**  Dock audio summary for undocked 
         */
        public: static const int dock_audio_summary_none = 0x7f0a030b;
        /**  Dock audio summary for docked to unknown 
         */
        public: static const int dock_audio_summary_unknown = 0x7f0a030c;
        /**  Dock not found dialog text 
         */
        public: static const int dock_not_found_text = 0x7f0a030e;
        /**  Dock not found dialog title 
         */
        public: static const int dock_not_found_title = 0x7f0a030d;
        /**  Dock settings title, top level 
         */
        public: static const int dock_settings = 0x7f0a0306;
        /**  Sound settings screen, dock settings summary
         */
        public: static const int dock_settings_summary = 0x7f0a02f8;
        /**  Dock settings title 
         */
        public: static const int dock_settings_title = 0x7f0a0307;
        /**  Sound settings screen, setting option summary text when check box is clear 
         */
        public: static const int dock_sounds_enable_summary_off = 0x7f0a0311;
        /**  Dock settings screen, setting option summary text when check box is selected 
         */
        public: static const int dock_sounds_enable_summary_on = 0x7f0a0310;
        /**  Dock settings screen, dock events SFX setting check box label 
         */
        public: static const int dock_sounds_enable_title = 0x7f0a030f;
        /**  Sound & notification > Other sounds: Title for the option enabling docking sounds. [CHAR LIMIT=30] 
         */
        public: static const int docking_sounds_title = 0x7f0a0912;
        public: static const int does_not_exist = 0x7f0a04bf;
        /**  Button to close the SSL CA cert warning dialog box, meaning the user is done reading.  [CHAR LIMIT=NONE] 
         */
        public: static const int done_button = 0x7f0a081f;
        /**  [CHAR LIMIT=NONE] Display settings screen, setting description for the ambient display feature. 
         */
        public: static const int doze_summary = 0x7f0a0332;
        /**  [CHAR LIMIT=30] Display settings screen, setting option name to change whether the ambient display feature is enabled. 
         */
        public: static const int doze_title = 0x7f0a0331;
        /**  Sound settings screen, setting check box label 
         */
        public: static const int dtmf_tone_enable_title = 0x7f0a02f9;
        /**  Sound & notification > Other sounds: Value for the emergency tone option with value 1: alert. [CHAR LIMIT=30] 
         */
        public: static const int emergency_tone_alert = 0x7f0a0919;
        /**  Sound & notification > Other sounds: Value for the emergency tone option with value 0: silent. [CHAR LIMIT=30] 
         */
        public: static const int emergency_tone_silent = 0x7f0a0918;
        /**  Sound settings screen, setting option summary text 
         */
        public: static const int emergency_tone_summary = 0x7f0a06df;
        /**  Sound settings screen, setting check box label 
         */
        public: static const int emergency_tone_title = 0x7f0a06de;
        /**  Sound & notification > Other sounds: Value for the emergency tone option with value 2: vibrate. [CHAR LIMIT=30] 
         */
        public: static const int emergency_tone_vibrate = 0x7f0a091a;
        /**  String displayed when list is empty 
         */
        public: static const int empty_list_msg = 0x7f0a04b8;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Menu item for WifiManager enableNetwork API
         */
        public: static const int enableNetwork = 0x7f0a02cc;
        public: static const int enable_adb = 0x7f0a0552;
        /**  Setting checkbox summary for Whether to enable USB debugging support on the phone 
         */
        public: static const int enable_adb_summary = 0x7f0a0553;
        /**  Manage applications, individual application screen, checkbox to control compatibility mode.  
         */
        public: static const int enable_compatibility = 0x7f0a048b;
        /**  UI debug setting: enable various types of OpenGL traces [CHAR LIMIT=25] 
         */
        public: static const int enable_opengl_traces_title = 0x7f0a077b;
        /**  Title for the preference to show a tile for a particular feature in the Quick Settings pane. [CHAR LIMIT=NONE] 
         */
        public: static const int enable_quick_setting = 0x7f0a05a1;
        /**  Warning that the device data will not be encrypted with password or PIN if
        enabling an accessibility service and there is a secure lock setup. [CHAR LIMIT=NONE] 
         */
        public: static const int enable_service_encryption_warning = 0x7f0a05cd;
        /**  Message to the user to enter his password before enabling an accessibility service. [CHAR LIMIT=NONE] 
         */
        public: static const int enable_service_password_reason = 0x7f0a05d1;
        /**  Message to the user to enter his pattern before enabling an accessibility service. [CHAR LIMIT=NONE] 
         */
        public: static const int enable_service_pattern_reason = 0x7f0a05cf;
        /**  Message to the user to enter his PIN before enabling an accessibility service. [CHAR LIMIT=NONE] 
         */
        public: static const int enable_service_pin_reason = 0x7f0a05d0;
        /**  Title for a warning about security implications of enabling an accessibility
         service. [CHAR LIMIT=NONE] 
         */
        public: static const int enable_service_title = 0x7f0a05cb;
        /**  Summary of checkbox setting that enables the terminal app. [CHAR LIMIT=64] 
         */
        public: static const int enable_terminal_summary = 0x7f0a0576;
        /**  Title of checkbox setting that enables the terminal app. [CHAR LIMIT=32] 
         */
        public: static const int enable_terminal_title = 0x7f0a0575;
        /**  [CHAR LIMIT=25] Manage applications, individual application info screen, button label under Storage heading. Button to re-enable an existing application. 
         */
        public: static const int enable_text = 0x7f0a0482;
        /**  Radio button text that doesn't require a password to decrypt [CHAR LIMIT=NONE] 
         */
        public: static const int encrypt_dont_require_password = 0x7f0a0962;
        /**  Radio button text that doesn't require a pattern to decrypt [CHAR LIMIT=NONE] 
         */
        public: static const int encrypt_dont_require_pattern = 0x7f0a0961;
        /**  Radio button text that doesn't require a PIN to decrypt [CHAR LIMIT=NONE] 
         */
        public: static const int encrypt_dont_require_pin = 0x7f0a0960;
        /**  Radio button text that require a password to start device [CHAR LIMIT=NONE] 
         */
        public: static const int encrypt_require_password = 0x7f0a095f;
        /**  Radio button text that require a pattern to start device [CHAR LIMIT=NONE] 
         */
        public: static const int encrypt_require_pattern = 0x7f0a095e;
        /**  Radio button text that require a PIN to start device [CHAR LIMIT=NONE] 
         */
        public: static const int encrypt_require_pin = 0x7f0a095d;
        /**  Message for encryption dialog telling the user that Talkback and other accessibility services will be disabled. 
         */
        public: static const int encrypt_talkback_dialog_message_password = 0x7f0a0968;
        /**  Message for encryption dialog telling the user that Talkback and other accessibility services will be disabled. 
         */
        public: static const int encrypt_talkback_dialog_message_pattern = 0x7f0a0967;
        /**  Message for encryption dialog telling the user that Talkback and other accessibility services will be disabled. 
         */
        public: static const int encrypt_talkback_dialog_message_pin = 0x7f0a0966;
        /**  Title for encryption dialog that disables TalkBack. [CHAR_LIMIT=25] 
         */
        public: static const int encrypt_talkback_dialog_require_password = 0x7f0a0965;
        /**  Title for encryption dialog that disables TalkBack. [CHAR_LIMIT=25] 
         */
        public: static const int encrypt_talkback_dialog_require_pattern = 0x7f0a0964;
        /**  Title for encryption dialog that disables TalkBack. [CHAR_LIMIT=25] 
         */
        public: static const int encrypt_talkback_dialog_require_pin = 0x7f0a0963;
        /**  Encryption interstitial button to continue with the shown setting.  Appears on screen that asks the user to opt in/out of encrypting device with a pin/pattern/password. [CHAR LIMIT=NONE] 
         */
        public: static const int encryption_continue_button = 0x7f0a0959;
        /**  Encryption interstitial title [CHAR LIMIT=30] 
         */
        public: static const int encryption_interstitial_header = 0x7f0a0958;
        /**  Message shown on encryption interstitial to ask the user whether or not they want to use a password to encrypt the device. [CHAR LIMIT=NONE] 
         */
        public: static const int encryption_interstitial_message_password = 0x7f0a095c;
        /**  Message shown on encryption interstitial to ask the user whether or not they want to use a pattern to encrypt the device. [CHAR LIMIT=NONE] 
         */
        public: static const int encryption_interstitial_message_pattern = 0x7f0a095b;
        /**  Message shown on encryption interstitial to ask the user whether or not they want to use a PIN to encrypt the device. [CHAR LIMIT=NONE] 
         */
        public: static const int encryption_interstitial_message_pin = 0x7f0a095a;
        /**  Message of dialog confirming that user wants to protect external storage. [CHAR LIMIT=NONE] 
         */
        public: static const int enforce_read_external_confirm_message = 0x7f0a0574;
        /**  Title of dialog confirming that user wants to protect external storage. [CHAR LIMIT=32] 
         */
        public: static const int enforce_read_external_confirm_title = 0x7f0a0573;
        /**  Summary of checkbox setting that protects external storage. [CHAR LIMIT=64] 
         */
        public: static const int enforce_read_external_summary = 0x7f0a0572;
        /**  Title of checkbox setting that protects external storage. [CHAR LIMIT=32] 
         */
        public: static const int enforce_read_external_title = 0x7f0a0571;
        /**  Enhaced 4G LTE Mode summary.  [CHAR LIMIT=100] 
         */
        public: static const int enhanced_4g_lte_mode_summary = 0x7f0a0895;
        /**  Enhaced 4G LTE Mode title.  [CHAR LIMIT=50] 
         */
        public: static const int enhanced_4g_lte_mode_title = 0x7f0a0894;
        /**  This is displayed to the user when the device needs to be decrypted 
         */
        public: static const int enter_password = 0x7f0a0753;
        /**  Informational text on the pattern entry screen prompting the user for their pattern 
         */
        public: static const int enter_pattern = 0x7f0a0755;
        /**  Informational text on the pin entry screen prompting the user for their pin 
         */
        public: static const int enter_pin = 0x7f0a0754;
        /**  SD card & phone storage settings screen, label for check box to erase SD card [CHAR LIMIT=30] 
         */
        public: static const int erase_external_storage = 0x7f0a03d0;
        /**  SD card & phone storage settings screen, description for check box to erase USB storage [CHAR LIMIT=NONE] 
         */
        public: static const int erase_external_storage_description = 0x7f0a03d1;
        /**  APN error dialog messages: 
         */
        public: static const int error_apn_empty = 0x7f0a03c3;
        /**  APN error dialog messages: 
         */
        public: static const int error_mcc_not3 = 0x7f0a03c4;
        /**  APN error dialog messages: 
         */
        public: static const int error_mnc_not23 = 0x7f0a03c5;
        /**  APN error dialog messages: 
         */
        public: static const int error_name_empty = 0x7f0a03c2;
        /**  APN error dialog title 
         */
        public: static const int error_title = 0x7f0a03c1;
        /**  Summary Title for saying that the preference is experimental and will evolve over time due to User feedback. [CHAR LIMIT=NONE] 
         */
        public: static const int experimental_preference = 0x7f0a0952;
        public: static const int experimental_webview = 0x7f0a098a;
        public: static const int experimental_webview_summary = 0x7f0a098b;
        /**   Manage applications, individual application info screen, label under Storage heading.  The amount of space taken up by the app's code on USB storage [CHARSIZE=40] 
         */
        public: static const int external_code_size_label = 0x7f0a047b;
        /**   Manage applications, individual application info screen, label under Storage heading.  The amount of space taken up by the app's data on the SD card [CHARSIZE=40] 
         */
        public: static const int external_data_size_label = 0x7f0a047d;
        /**  Extreme threats summary.  [CHAR LIMIT=62] 
         */
        public: static const int extreme_threats_summary = 0x7f0a0887;
        /**  Extreme threats title.  [CHAR LIMIT=30] 
         */
        public: static const int extreme_threats_title = 0x7f0a0886;
        /**  Toast that settings for an application is failed to open. 
         */
        public: static const int failed_to_open_app_settings_toast = 0x7f0a050e;
        /**  About phone screen, fcc equipment id label  [CHAR LIMIT=40] 
         */
        public: static const int fcc_equipment_id = 0x7f0a0354;
        /**  Text for menu option in ManageApps screen to present various menu options 
         */
        public: static const int filter = 0x7f0a0496;
        /**  Text for filter option in ManageApps screen to display all installed
    applications 
         */
        public: static const int filter_apps_all = 0x7f0a0498;
        /**  [CHAR LIMIT=NONE] Text for filter option in ManageApps screen to display disabled apps 
         */
        public: static const int filter_apps_disabled = 0x7f0a0499;
        /**  Text for filter option in ManageApps screen to display list of
    packages installed on sdcard. 
         */
        public: static const int filter_apps_onsdcard = 0x7f0a049c;
        /**  Text for filter option in ManageApps screen to display list of running
    packages only. 
         */
        public: static const int filter_apps_running = 0x7f0a049b;
        /**  Text for filter option in ManageApps screen to display third party
    applications only 
         */
        public: static const int filter_apps_third_party = 0x7f0a049a;
        /**  Title of dialog for presenting filter options 
         */
        public: static const int filter_dlg_title = 0x7f0a0497;
        /**  Button shown when this activity is run from SetupWizard 
         */
        public: static const int finish_button_label = 0x7f0a0749;
        /**  About phone screen, status item label  [CHAR LIMIT=40] 
         */
        public: static const int firmware_version = 0x7f0a0352;
        /**  Do not translate. label for font size preview.  Does not need to be translated. 
         */
        public: static const int font_size_preview_text = 0x7f0a0039;
        /**  Button. Chosen when they want to save the chosen text size. 
         */
        public: static const int font_size_save = 0x7f0a003a;
        /**  UI debug setting: force hardware acceleration to render apps [CHAR LIMIT=25] 
         */
        public: static const int force_hw_ui = 0x7f0a0786;
        /**  UI debug setting: force hardware acceleration summary [CHAR LIMIT=50] 
         */
        public: static const int force_hw_ui_summary = 0x7f0a0787;
        /**  UI debug setting: force anti-aliasing to render apps [CHAR LIMIT=25] 
         */
        public: static const int force_msaa = 0x7f0a0788;
        /**  UI debug setting: force anti-aliasing summary [CHAR LIMIT=50] 
         */
        public: static const int force_msaa_summary = 0x7f0a0789;
        /**  UI debug setting: force right to left layout [CHAR LIMIT=37] 
         */
        public: static const int force_rtl_layout_all_locales = 0x7f0a0782;
        /**  UI debug setting: force right to left layout summary [CHAR LIMIT=100] 
         */
        public: static const int force_rtl_layout_all_locales_summary = 0x7f0a0783;
        /**  Manage applications, text label for button to kill / force stop an application 
         */
        public: static const int force_stop = 0x7f0a0478;
        /**  [CHAR LIMIT=200] Manage applications, text for dialog when killing persistent apps
         */
        public: static const int force_stop_dlg_text = 0x7f0a04c4;
        public: static const int force_stop_dlg_title = 0x7f0a04c3;
        /**  Button label for generic FORGET action [CHAR LIMIT=20] 
         */
        public: static const int forget = 0x7f0a0100;
        /**  Spoken description for the Bluetooth power control gadget. 
         */
        public: static const int gadget_bluetooth = 0x7f0a06b8;
        /**  Brightness gadget value used to describe automatic brightness state. 
         */
        public: static const int gadget_brightness_state_auto = 0x7f0a06bc;
        /**  Brightness gadget value used to describe maximum brightness state. 
         */
        public: static const int gadget_brightness_state_full = 0x7f0a06bd;
        /**  Brightness gadget value used to describe half brightness state. 
         */
        public: static const int gadget_brightness_state_half = 0x7f0a06be;
        /**  Brightness gadget value used to describe minimum brightness state. 
         */
        public: static const int gadget_brightness_state_off = 0x7f0a06bf;
        /**  Template for brightness gadget toggle button description. 
         */
        public: static const int gadget_brightness_template = 0x7f0a06bb;
        /**  Spoken description for the Location power control gadget. 
         */
        public: static const int gadget_location = 0x7f0a06b9;
        /**  Title for the screen that lets the user choose a gadget to add to the home screen
         (or other screens that can host gadgets).  Note to translators: we're still determining
         the final name for Gadgets/Widgets, so please translate both for now. 
         */
        public: static const int gadget_picker_title = 0x7f0a0577;
        /**  Gadget value used to describe off state. 
         */
        public: static const int gadget_state_off = 0x7f0a06b4;
        /**  Gadget value used to describe on state. 
         */
        public: static const int gadget_state_on = 0x7f0a06b3;
        /**  Template for gadget toggle button description. Populated examples are "Wi-Fi off" or "Wi-Fi turning on". 
         */
        public: static const int gadget_state_template = 0x7f0a06b2;
        /**  Gadget value used to describe turning off state. 
         */
        public: static const int gadget_state_turning_off = 0x7f0a06b6;
        /**  Gadget value used to describe turning on state. 
         */
        public: static const int gadget_state_turning_on = 0x7f0a06b5;
        /**  Spoken description for the data synchronization gadget. 
         */
        public: static const int gadget_sync = 0x7f0a06ba;
        /**  Power Control Widget 
         */
        public: static const int gadget_title = 0x7f0a06af;
        public: static const int gadget_toggle_bluetooth = 0x7f0a06b1;
        public: static const int gadget_toggle_wifi = 0x7f0a06b0;
        /**  Spoken description for the Wi-Fi power control gadget. 
         */
        public: static const int gadget_wifi = 0x7f0a06b7;
        /**  On Language & input settings screen, heading. Inside the "Language & input settings" screen, this is the header for settings that relate to game controller devices. [CHAR LIMIT=40] 
         */
        public: static const int game_controller_settings_category = 0x7f0a0511;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Menu item for WifiManager getConfiguredNetworks API
         */
        public: static const int getConfiguredNetworks = 0x7f0a02ce;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Menu item for WifiManager getConnectionInfo API
         */
        public: static const int getConnectionInfo = 0x7f0a02cf;
        /**  Warning message when changing a global setting for a phone.[CHAR LIMIT=none] 
         */
        public: static const int global_change_warning = 0x7f0a0861;
        /**  Warning message title for global font change [CHAR LIMIT=40] 
         */
        public: static const int global_font_change_title = 0x7f0a0863;
        /**  Warning message title for global locale change [CHAR LIMIT=40] 
         */
        public: static const int global_locale_change_title = 0x7f0a0862;
        public: static const int google_wallet = 0x7f0a0865;
        /**  Sound settings screen, setting check box label 
         */
        public: static const int haptic_feedback_enable_title = 0x7f0a02fc;
        /**  On Text & language settings screen, category for physical keyboard text entry options. 
         */
        public: static const int hardkeyboard_category = 0x7f0a0507;
        /**  HDCP checking dialog title, used for debug purposes only. [CHAR LIMIT=25] 
         */
        public: static const int hdcp_checking_dialog_title = 0x7f0a075d;
        /**  HDCP checking title, used for debug purposes only. [CHAR LIMIT=25] 
         */
        public: static const int hdcp_checking_title = 0x7f0a075c;
        /**  Header that appears at the top of Account Settings screen 
         */
        public: static const int header_account_settings = 0x7f0a0746;
        /**  Title shown in AddAccount 
         */
        public: static const int header_add_an_account = 0x7f0a0748;
        /**  Header title for those settings relating to application syncing. 
         */
        public: static const int header_application_sync_settings = 0x7f0a0743;
        /**  Settings main menu category heading. Personal (Accounts, security, language, backup...). [CHAR LIMIT=40] 
         */
        public: static const int header_category_access = 0x7f0a0012;
        /**  Settings main menu category heading. Wireless and networks (Wi-Fi, Bluetooth, data usage...). [CHAR LIMIT=40] 
         */
        public: static const int header_category_connections = 0x7f0a000f;
        /**  Settings main menu category heading. Device (Sound, display, battery, applications...). [CHAR LIMIT=40] 
         */
        public: static const int header_category_device = 0x7f0a0010;
        /**  Settings main menu category heading. Personal (Accounts, security, language, backup...). [CHAR LIMIT=40] 
         */
        public: static const int header_category_personal = 0x7f0a0011;
        /**  Settings main menu category heading. System (Updates, data, accessibility, about phone). [CHAR LIMIT=40] 
         */
        public: static const int header_category_system = 0x7f0a0013;
        /**  Settings main menu category heading. Wireless and networks (Wi-Fi, Bluetooth, data usage...). [CHAR LIMIT=40] 
         */
        public: static const int header_category_wireless_networks = 0x7f0a000e;
        /**  Header for data and synchronization 
         */
        public: static const int header_data_and_synchronization = 0x7f0a0744;
        /**  Display settings screen, notification popups are enabled [CHAR LIMIT=30] 
         */
        public: static const int heads_up_enabled_title = 0x7f0a02ef;
        /**  Running service details, description for running heavy-weight process. 
         */
        public: static const int heavy_weight_stop_description = 0x7f0a04f4;
        /**  Help menu label [CHAR LIMIT=20] 
         */
        public: static const int help_label = 0x7f0a0872;
        /**  Help URL, Accounts [DO NOT TRANSLATE] 
         */
        public: static const int help_url_accounts = 0x7f0a087a;
        /**  Help URL, Backup & reset [DO NOT TRANSLATE] 
         */
        public: static const int help_url_backup_reset = 0x7f0a087c;
        /**  Help URL, Battery [DO NOT TRANSLATE] 
         */
        public: static const int help_url_battery = 0x7f0a0879;
        /**  Help URL, Bluetooth [DO NOT TRANSLATE] 
         */
        public: static const int help_url_bluetooth = 0x7f0a0874;
        /**  Help URL, Choose lockscreen [DO NOT TRANSLATE] 
         */
        public: static const int help_url_choose_lockscreen = 0x7f0a087b;
        /**  Help URL, Data usage [DO NOT TRANSLATE] 
         */
        public: static const int help_url_data_usage = 0x7f0a0875;
        /**  Help URL, Dreams [DO NOT TRANSLATE] 
         */
        public: static const int help_url_dreams = 0x7f0a087e;
        /**  Help URL, Location access [DO NOT TRANSLATE] 
         */
        public: static const int help_url_location_access = 0x7f0a0880;
        /**  Help URL, More [DO NOT TRANSLATE] 
         */
        public: static const int help_url_more_networks = 0x7f0a0876;
        /**  Help URL, Tap & pay [DO NOT TRANSLATE] 
         */
        public: static const int help_url_nfc_payment = 0x7f0a0882;
        /**  Help URL, Remote display [DO NOT TRANSLATE] 
         */
        public: static const int help_url_remote_display = 0x7f0a0883;
        /**  Help URL, Security settings [DO NOT TRANSLATE] 
         */
        public: static const int help_url_security = 0x7f0a0881;
        /**  Help URL, Sound [DO NOT TRANSLATE] 
         */
        public: static const int help_url_sound = 0x7f0a0878;
        /**  Help URL, Tethering [DO NOT TRANSLATE] 
         */
        public: static const int help_url_tether = 0x7f0a087d;
        /**  Help URL, User settings [DO NOT TRANSLATE] 
         */
        public: static const int help_url_users = 0x7f0a087f;
        /**  Help URL, Vpn [DO NOT TRANSLATE] 
         */
        public: static const int help_url_vpn = 0x7f0a0877;
        /**  Help URL, WiFi [DO NOT TRANSLATE] 
         */
        public: static const int help_url_wifi = 0x7f0a0873;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int hidden_ssid_label = 0x7f0a02d9;
        /**  Activity title for battery usage history details 
         */
        public: static const int history_details_title = 0x7f0a060f;
        /**  Home application selection - uninstall button [CHAR LIMIT=80] 
         */
        public: static const int home_app_uninstall_button = 0x7f0a085f;
        /**  Main Settings screen setting option name to go into the display settings screen 
         */
        public: static const int home_settings = 0x7f0a02e6;
        /**  Home settings screen, text indicating that a launcer does not support work profiles [CHAR LIMIT=100] 
         */
        public: static const int home_work_profile_not_supported = 0x7f0a02f3;
        /**  Warning message about security implications of enabling an input method, displayed as a dialog
         message when the user selects to enable an IME. 
         */
        public: static const int ime_security_warning = 0x7f0a050a;
        /**  UI debug setting: immediately destroy activities? [CHAR LIMIT=25] 
         */
        public: static const int immediately_destroy_activities = 0x7f0a0791;
        /**  UI debug setting: immediately destroy activities summary [CHAR LIMIT=50] 
         */
        public: static const int immediately_destroy_activities_summary = 0x7f0a0792;
        /**  Phone IMS registration required off. Only shown in diagnostic screen, so precise translation is not needed. 
         */
        public: static const int ims_reg_required_off = 0x7f0a0019;
        /**  Phone SMS over IMS IMS registration required on. Only shown in diagnostic screen, so precise translation is not needed. 
         */
        public: static const int ims_reg_required_on = 0x7f0a0018;
        /**  Auto-restore menu title [CHAR LIMIT=30] 
         */
        public: static const int include_app_data_title = 0x7f0a06e8;
        /**  Sound settings screen, the title of the volume bar to adjust the incoming call volume 
         */
        public: static const int incoming_call_volume_title = 0x7f0a02f0;
        /**  Setting name for Input Method chooser 
         */
        public: static const int input_method = 0x7f0a053c;
        /**  Title for setting the visibility of input method selector [CHAR LIMIT=35] 
         */
        public: static const int input_method_selector = 0x7f0a053e;
        /**  An option to always hide input method selector [CHAR LIMIT=25] 
         */
        public: static const int input_method_selector_always_hide_title = 0x7f0a0541;
        public: static const int input_method_selector_always_hide_value = 0x7f0a0004;
        /**  An option to always show input method selector [CHAR LIMIT=25] 
         */
        public: static const int input_method_selector_always_show_title = 0x7f0a0540;
        public: static const int input_method_selector_always_show_value = 0x7f0a0003;
        /**  An option to always show input method selector automatically when needed [CHAR LIMIT=25] 
         */
        public: static const int input_method_selector_show_automatically_title = 0x7f0a053f;
        /**  values for input method selector should be corresponding to the array index of titles 
         */
        public: static const int input_method_selector_show_automatically_value = 0x7f0a0002;
        public: static const int input_method_selector_visibility_default_value = 0x7f0a0005;
        /**  Title for settings of each IME [CHAR LIMIT=25] 
         */
        public: static const int input_method_settings = 0x7f0a0543;
        /**  Spoken description for IME settings image button [CHAR LIMIT=NONE] 
         */
        public: static const int input_method_settings_button = 0x7f0a0544;
        /**  Title for the settings of selecting active input methods of an IME [CHAR LIMIT=35] 
         */
        public: static const int input_methods_and_subtype_enabler_title = 0x7f0a0548;
        /**  Input Methods Settings localized format string for generating the appropriate "Foo settings" menu label for the Input Method named "Foo" [CHAR LIMIT=35] 
         */
        public: static const int input_methods_settings_label_format = 0x7f0a0547;
        /**  Input methods Settings 
         */
        public: static const int input_methods_settings_title = 0x7f0a053b;
        /**  Applications settings screen, message text of alert that appears if user selects the "Unknown sources" check box 
         */
        public: static const int install_all_warning = 0x7f0a046b;
        /**  Applications settings screen, setting check box title. If checked, the system allows installation of applications that are downloaded from random places, such as web sites.  
         */
        public: static const int install_applications = 0x7f0a0467;
        /**  Applications settings screen, setting check box title. If checked, the system allows installation of applications that are downloaded from random places, such as web sites.  [CHAR LIMIT=30] 
         */
        public: static const int install_applications_title = 0x7f0a0468;
        /**  [CHAR LIMIT=NONE] Manage applications, individual application info screen, button label under Storage heading. Button to install an application for the user. 
         */
        public: static const int install_text = 0x7f0a0480;
        /**  Applications settings screen, setting check box summary.  This is the summary for "Unknown sources" checkbox  
         */
        public: static const int install_unknown_applications = 0x7f0a046a;
        /**  Applications settings screen, setting check box summary.  This is the summary for "Unknown sources" checkbox  [CHAR LIMIT=65] 
         */
        public: static const int install_unknown_applications_title = 0x7f0a0469;
        /**  Manage applications, text for move error messages 
         */
        public: static const int insufficient_storage = 0x7f0a04be;
        /**  Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int intent_sender_account_label = 0x7f0a00a9;
        /**  Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int intent_sender_action_label = 0x7f0a00a6;
        /**  Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int intent_sender_data_label = 0x7f0a00a4;
        /**  Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int intent_sender_resource_label = 0x7f0a00a8;
        /**  Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int intent_sender_sendbroadcast_text = 0x7f0a00a5;
        /**  Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int intent_sender_startactivity_text = 0x7f0a00a7;
        /**  SD card & phone storage settings screen heading. This is displayed above items that pertain to the phone's internal storage  
         */
        public: static const int internal_memory = 0x7f0a0375;
        /**  [CHAR LIMIT=15] Manage applications, label for chart showing internal storage use. 
         */
        public: static const int internal_storage = 0x7f0a04a0;
        public: static const int invalid_location = 0x7f0a04c1;
        public: static const int invalid_size_value = 0x7f0a04b7;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int ipaddr_label = 0x7f0a02da;
        /**  [CHAR_LIMIT=NONE] Format to put the first item at the start of a series of 3 or more items in a list 
         */
        public: static const int join_many_items_first = 0x7f0a04b2;
        /**  [CHAR_LIMIT=NONE] Format to put the last item at the end of a series of 3 or more items in a list 
         */
        public: static const int join_many_items_last = 0x7f0a04b1;
        /**  [CHAR_LIMIT=NONE] Format to put the middle items together in a series of 4 or more items in a list 
         */
        public: static const int join_many_items_middle = 0x7f0a04b3;
        /**  [CHAR_LIMIT=NONE] Format to put together two items in a list. 
         */
        public: static const int join_two_items = 0x7f0a04b0;
        /**  Setting Checkbox title whether to keep the screen on when plugged in to a power source 
         */
        public: static const int keep_screen_on = 0x7f0a0557;
        /**  setting Checkbox summary whether to keep the screen on when plugged in  
         */
        public: static const int keep_screen_on_summary = 0x7f0a0558;
        /**  About phone screen,  setting option name  [CHAR LIMIT=40] 
         */
        public: static const int kernel_version = 0x7f0a0356;
        /**  Label of the default keyboard layout.  [CHAR LIMIT=35] 
         */
        public: static const int keyboard_layout_default_label = 0x7f0a0517;
        /**  Button to configure keyboard layouts.  [CHAR LIMIT=35] 
         */
        public: static const int keyboard_layout_dialog_setup_button = 0x7f0a0515;
        /**  Hint describing how to switch keyboard layouts using the keyboard.  [CHAR LIMIT=48] 
         */
        public: static const int keyboard_layout_dialog_switch_hint = 0x7f0a0516;
        /**  Title for the keyboard layout preference dialog. [CHAR LIMIT=35] 
         */
        public: static const int keyboard_layout_dialog_title = 0x7f0a0514;
        /**  Title for the keyboard layout picker activity. [CHAR LIMIT=35] 
         */
        public: static const int keyboard_layout_picker_title = 0x7f0a0518;
        /**  On Language & keyboard settings screen, heading. Inside the "Language & keyboard settings" screen, this is the header for settings that relate to keyboard (enable/disable each keyboard, settings for each keyboard). 
         */
        public: static const int keyboard_settings_category = 0x7f0a04ff;
        /**  Title of keyboard settings list item within voice input/output settings 
         */
        public: static const int keyboard_settings_title = 0x7f0a0677;
        public: static const int keywords_accounts = 0x7f0a08ed;
        public: static const int keywords_app = 0x7f0a08ea;
        public: static const int keywords_battery = 0x7f0a08e1;
        public: static const int keywords_date_and_time = 0x7f0a08e5;
        public: static const int keywords_display = 0x7f0a08da;
        public: static const int keywords_display_auto_brightness = 0x7f0a08dc;
        public: static const int keywords_display_brightness_level = 0x7f0a08db;
        public: static const int keywords_display_cast_screen = 0x7f0a08df;
        public: static const int keywords_display_font_size = 0x7f0a08de;
        public: static const int keywords_display_wallpaper = 0x7f0a08dd;
        public: static const int keywords_factory_data_reset = 0x7f0a08e6;
        public: static const int keywords_home = 0x7f0a08d9;
        public: static const int keywords_keyboard_and_ime = 0x7f0a08ef;
        public: static const int keywords_location = 0x7f0a08eb;
        public: static const int keywords_location_mode = 0x7f0a08ec;
        /**  Search keywords for different screen unlock modes : slide to unlock, password, pattern and PIN [CHAR LIMIT=none] 
         */
        public: static const int keywords_lockscreen = 0x7f0a08f0;
        public: static const int keywords_more_default_sms_app = 0x7f0a08d7;
        public: static const int keywords_more_mobile_networks = 0x7f0a08d8;
        public: static const int keywords_printing = 0x7f0a08e7;
        public: static const int keywords_sounds_and_notifications = 0x7f0a08e8;
        public: static const int keywords_sounds_and_notifications_interruptions = 0x7f0a08e9;
        public: static const int keywords_spell_checker = 0x7f0a08e2;
        public: static const int keywords_storage = 0x7f0a08e0;
        public: static const int keywords_text_to_speech_output = 0x7f0a08e4;
        public: static const int keywords_users = 0x7f0a08ee;
        public: static const int keywords_voice_input = 0x7f0a08e3;
        /** Search Keywords [CHAR LIMIT=NONE]
         */
        public: static const int keywords_wifi = 0x7f0a08d6;
        /**  Title of Language and keyboard settings screen 
         */
        public: static const int language_keyboard_settings_title = 0x7f0a04fd;
        /**  LocalePicker 
 Title for the locale picker activity 
         */
        public: static const int language_picker_title = 0x7f0a00f1;
        /**  Title of setting on main settings screen.  This item will take the user to the screen to tweak settings realted to locale and text 
         */
        public: static const int language_settings = 0x7f0a04fc;
        /**  On Language & keyboard settings screen, heading. Inside the "Language & keyboard settings" screen, this is the header for settings that relate to language (select the system language, user dictionary for the language). 
         */
        public: static const int language_settings_category = 0x7f0a04fe;
        /**  choice for the font size spinner 
         */
        public: static const int large_font = 0x7f0a0038;
        /**  Last synced date/time for accounts that synced [CHAR LIMIT=none] 
         */
        public: static const int last_synced = 0x7f0a0738;
        /**  label for last time used 
         */
        public: static const int last_time_used_label = 0x7f0a0587;
        public: static const int launch_count_label = 0x7f0a0980;
        /**  About phone settings screen, setting option name to go to dialog that shows legal info 
         */
        public: static const int legal_information = 0x7f0a0428;
        /**  About phone settings screen, setting option name to see licensing info 
         */
        public: static const int license_title = 0x7f0a042c;
        /**  [CHAR LIMIT=40] Display settings screen, setting option name to change whether the device wakes up when a lift gesture is detected. 
         */
        public: static const int lift_to_wake_title = 0x7f0a0330;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int link_speed_label = 0x7f0a02dd;
        /**  [CHAR LIMIT=NONE] Text when loading app list in notification settings 
         */
        public: static const int loading_notification_apps = 0x7f0a0925;
        /**  Summary text of the "local backup password" setting when the user has already supplied a password 
         */
        public: static const int local_backup_password_summary_change = 0x7f0a06ed;
        /**  Summary text of the "local backup password" setting when the user has not supplied a password 
         */
        public: static const int local_backup_password_summary_none = 0x7f0a06ec;
        /**  Local (desktop) backup password menu title [CHAR LIMIT=25] 
         */
        public: static const int local_backup_password_title = 0x7f0a06eb;
        /**  Toast message shown when setting a new local backup password fails due to the user not correctly typing the password again for confirmation [CHAR LIMIT=80] 
         */
        public: static const int local_backup_password_toast_confirmation_mismatch = 0x7f0a06ef;
        /**  Toast message shown when the user successfully sets a new local backup password [CHAR LIMIT=80] 
         */
        public: static const int local_backup_password_toast_success = 0x7f0a06ee;
        /**  Toast message shown when setting a new local backup password fails due to the user not supplying the correct existing password. The phrasing here is deliberately quite general. [CHAR LIMIT=80] 
         */
        public: static const int local_backup_password_toast_validation_failure = 0x7f0a06f0;
        /**  Label for the default device locale. [CHAR LIMIT=35] 
         */
        public: static const int locale_default = 0x7f0a05be;
        /**  [CHAR LIMIT=none] Description text for location access switch 
         */
        public: static const int location_access_summary = 0x7f0a0424;
        /**  [CHAR LIMIT=45] Label for turning on/off location access completely. 
         */
        public: static const int location_access_title = 0x7f0a0423;
        public: static const int location_category_app_settings = 0x7f0a0979;
        /**  [CHAR LIMIT=30] Location settings screen, sub category for location services 
         */
        public: static const int location_category_location_services = 0x7f0a0412;
        /**  [CHAR LIMIT=30] Location settings screen, sub category for recent location requests 
         */
        public: static const int location_category_recent_location_requests = 0x7f0a0410;
        /**  [CHAR LIMIT=30] Security & location settings screen, setting check box label for GPS satellites 
         */
        public: static const int location_gps = 0x7f0a041c;
        /**  [CHAR LIMIT=30] Location settings screen, recent location requests high battery use
         */
        public: static const int location_high_battery_use = 0x7f0a0413;
        public: static const int location_loading_injected_setting = 0x7f0a097a;
        /**  [CHAR LIMIT=30] Location settings screen, recent location requests low battery use
         */
        public: static const int location_low_battery_use = 0x7f0a0414;
        /**  [CHAR LIMIT=130] Location mode screen, description for battery saving mode 
         */
        public: static const int location_mode_battery_saving_description = 0x7f0a0417;
        /**  [CHAR LIMIT=30] Location settings screen, battery saving location mode 
         */
        public: static const int location_mode_battery_saving_title = 0x7f0a040d;
        /**  [CHAR LIMIT=130] Location mode screen, description for high accuracy mode 
         */
        public: static const int location_mode_high_accuracy_description = 0x7f0a0416;
        /**  [CHAR LIMIT=30] Location settings screen, high accuracy location mode 
         */
        public: static const int location_mode_high_accuracy_title = 0x7f0a040c;
        /**  [CHAR LIMIT=30] Location settings screen, location off mode 
         */
        public: static const int location_mode_location_off_title = 0x7f0a040f;
        /**  [CHAR LIMIT=30] Location mode screen, screen title 
         */
        public: static const int location_mode_screen_title = 0x7f0a0415;
        /**  [CHAR LIMIT=130] Location mode screen, description for sensors only mode 
         */
        public: static const int location_mode_sensors_only_description = 0x7f0a0418;
        /**  [CHAR LIMIT=30] Location settings screen, device only location mode 
         */
        public: static const int location_mode_sensors_only_title = 0x7f0a040e;
        /**  [CHAR LIMIT=30] Location settings screen, setting preference screen box label for location mode 
         */
        public: static const int location_mode_title = 0x7f0a040b;
        /**  [CHAR LIMIT=130] Security & location settings screen, setting summary for Google location service check box
         */
        public: static const int location_neighborhood_level = 0x7f0a041a;
        /**  [CHAR LIMIT=130] Security & location settings screen, setting summary when Use wireless networks check box is selected, for wifi-only devices 
         */
        public: static const int location_neighborhood_level_wifi = 0x7f0a041b;
        /**  [CHAR LIMIT=30] Security & location settings screen, setting check box label for Google location service (cell ID, wifi, etc.) 
         */
        public: static const int location_network_based = 0x7f0a0419;
        /**  Location settings screen, displayed when there's no recent app accessing location 
         */
        public: static const int location_no_recent_apps = 0x7f0a0411;
        /**  Main Settings screen setting option title for the item to take you to the location screen 
         */
        public: static const int location_settings_title = 0x7f0a013f;
        /**  [CHAR LIMIT=45] Section heading for location sources 
         */
        public: static const int location_sources_heading = 0x7f0a0425;
        /**  [CHAR LIMIT=100] Security & location settings screen, setting check box summary for GPS satellites on a phone 
         */
        public: static const int location_street_level = 0x7f0a041d;
        /**  Security & location settings screen, section header for settings relating to location 
         */
        public: static const int location_title = 0x7f0a040a;
        /**  Security settings screen, setting option name to change screen timeout 
         */
        public: static const int lock_after_timeout = 0x7f0a0131;
        /**  Security settings screen, setting option summary to change screen timeout 
         */
        public: static const int lock_after_timeout_summary = 0x7f0a0132;
        /**  Security settings screen, setting option summary to change screen timeout, with additional explanation
         */
        public: static const int lock_after_timeout_summary_with_exception = 0x7f0a0133;
        /**  Security > Choose PIN/PW/Pattern > Notification redaction interstitial: Message asking the user how they want their notifications to appear when the device is locked [CHAR LIMIT=NONE] 
         */
        public: static const int lock_screen_notifications_interstitial_message = 0x7f0a090d;
        /**  Sound & notification > Notification section: Value for lockscreen notifications: notifications will not appear on a secure lock screen
         [CHAR LIMIT=50] 
         */
        public: static const int lock_screen_notifications_summary_disable = 0x7f0a090c;
        /**  Sound & notification > Notification section: Value for lockscreen notifications: sensitive information will be
         hidden or redacted from notifications shown on a secure lock screen
         [CHAR LIMIT=50] 
         */
        public: static const int lock_screen_notifications_summary_hide = 0x7f0a090b;
        /**  Sound & notification > Notification section: Value for lockscreen notifications:  all information will be
         shown in notifications shown on a secure lock screen
         [CHAR LIMIT=50] 
         */
        public: static const int lock_screen_notifications_summary_show = 0x7f0a090a;
        /**  Sound & notification > Notification section: Title for the option controlling notifications on the lockscreen. [CHAR LIMIT=30] 
         */
        public: static const int lock_screen_notifications_title = 0x7f0a0909;
        /**   Title for security picker to choose the unlock method: None/Pattern/PIN/Password [CHAR LIMIT=22] 
         */
        public: static const int lock_settings_picker_title = 0x7f0a015c;
        /**  Lock Pattern settings 
 Security & location settings screen, header 
         */
        public: static const int lock_settings_title = 0x7f0a0443;
        /**  Toast shown when lock pattern or password successfully setup. [CHAR LIMIT=64] 
         */
        public: static const int lock_setup = 0x7f0a018f;
        /**  Sound settings screen, setting check box label 
         */
        public: static const int lock_sounds_enable_title = 0x7f0a02fb;
        /**  Label for ChoosePassword/PIN OK button 
         */
        public: static const int lockpassword_cancel_label = 0x7f0a018c;
        /**  Header shown to ask the user to select an unlock method [CHAR LIMIT=30] 
         */
        public: static const int lockpassword_choose_lock_generic_header = 0x7f0a043f;
        /**  Lock Pattern settings 
 Header on first screen of choose password/PIN flow [CHAR LIMIT=30] 
         */
        public: static const int lockpassword_choose_your_password_header = 0x7f0a0437;
        /**  Header on first screen of choose pattern flow [CHAR LIMIT=30] 
         */
        public: static const int lockpassword_choose_your_pattern_header = 0x7f0a0438;
        /**  Header on first screen of choose password/PIN flow [CHAR LIMIT=30] 
         */
        public: static const int lockpassword_choose_your_pin_header = 0x7f0a0439;
        /**  Header on password confirm screen if second password doesn't match the first. [CHAR LIMIT=30] 
         */
        public: static const int lockpassword_confirm_passwords_dont_match = 0x7f0a043d;
        /**  Header on pin confirm screen if second pin doesn't match the first. [CHAR LIMIT=30]
         */
        public: static const int lockpassword_confirm_pins_dont_match = 0x7f0a043e;
        /**  Header on password confirm screen [CHAR LIMIT=30] 
         */
        public: static const int lockpassword_confirm_your_password_header = 0x7f0a043a;
        /**  Header on pattern confirm screen [CHAR LIMIT=30] 
         */
        public: static const int lockpassword_confirm_your_pattern_header = 0x7f0a043b;
        /**  Header on password confirm screen [CHAR LIMIT=30] 
         */
        public: static const int lockpassword_confirm_your_pin_header = 0x7f0a043c;
        /**  Hint shown after minimum password criteria is met 
         */
        public: static const int lockpassword_continue_label = 0x7f0a0180;
        /**  Error shown when in PASSWORD mode and user enters an invalid character 
         */
        public: static const int lockpassword_illegal_character = 0x7f0a0185;
        /**  Label for ChoosePassword/PIN OK button 
         */
        public: static const int lockpassword_ok_label = 0x7f0a018b;
        /**  Error shown when in PASSWORD mode and password has been used recently. Please keep this string short! 
 String.format failed for translation 
 no translation found for lockpassword_password_requires_letters:other (8186027808415585970) 
 String.format failed for translation 
 no translation found for lockpassword_password_requires_lowercase:other (2693910942679679225) 
 String.format failed for translation 
 no translation found for lockpassword_password_requires_uppercase:other (3030801209112209245) 
 String.format failed for translation 
 no translation found for lockpassword_password_requires_numeric:other (4703982391407595924) 
 String.format failed for translation 
 no translation found for lockpassword_password_requires_symbols:other (1221290525051187757) 
 String.format failed for translation 
 no translation found for lockpassword_password_requires_nonletter:other (3952508584649046404) 
         */
        public: static const int lockpassword_password_recently_used = 0x7f0a0189;
        /**  Error shown when in PASSWORD mode and password is all digits 
         */
        public: static const int lockpassword_password_requires_alpha = 0x7f0a0186;
        /**  Error shown when in PASSWORD mode and password doesn't contain any digits 
         */
        public: static const int lockpassword_password_requires_digit = 0x7f0a0187;
        /**  Error shown when in PASSWORD mode and password doesn't contain any symbols 
         */
        public: static const int lockpassword_password_requires_symbol = 0x7f0a0188;
        /**  Toast shown if setting password was successful 
         */
        public: static const int lockpassword_password_set_toast = 0x7f0a0440;
        /**  Error shown in popup when password is too long 
         */
        public: static const int lockpassword_password_too_long = 0x7f0a0181;
        /**  Hint shown in dialog screen when password is too short 
         */
        public: static const int lockpassword_password_too_short = 0x7f0a017d;
        /**  Toast shown if setting pattern was successful 
         */
        public: static const int lockpassword_pattern_set_toast = 0x7f0a0442;
        /**  Error shown when in PIN mode and user enters a non-digit 
         */
        public: static const int lockpassword_pin_contains_non_digits = 0x7f0a0183;
        /**  [CHAR_LIMIT=NONE] Error shown when the user tries to set an ascending or descending sequence of digits 
         */
        public: static const int lockpassword_pin_no_sequential_digits = 0x7f0a018a;
        /**  Error shown when in PIN mode and PIN has been used recently. Please keep this string short! 
         */
        public: static const int lockpassword_pin_recently_used = 0x7f0a0184;
        /**  Toast shown if setting PIN was successful 
         */
        public: static const int lockpassword_pin_set_toast = 0x7f0a0441;
        /**  Error shown in popup when PIN is too long 
         */
        public: static const int lockpassword_pin_too_long = 0x7f0a0182;
        /**  Hint shown in dialog screen when PIN is too short 
         */
        public: static const int lockpassword_pin_too_short = 0x7f0a017e;
        /**  Hint shown after minimum password criteria is met 
         */
        public: static const int lockpassword_press_continue = 0x7f0a017f;
        /**  Security & location settings screen, setting option name 
         */
        public: static const int lockpattern_change_lock_pattern_label = 0x7f0a0444;
        /**  Security & location settings screen, change unlock pattern screen instruction when the user chooses "Change unlock pattern".  We first ask the user toe nter the current pattern, and this is the message seen 
         */
        public: static const int lockpattern_change_lock_pin_label = 0x7f0a0445;
        /**  Security & location settings screen, change unlock pattern screen button, on bottom of screen.  After they draw a pattern and release their finger, we display the pattern so they remember.  When they are ready to draw it once again to confirm it, they press this button. 
         */
        public: static const int lockpattern_confirm_button_text = 0x7f0a0451;
        /**  Security & location settings screen, change unlock pattern screen button, on bottom of screen. Once they draw a new pattern and confirm it by drawing it again, they press this button to exit 
         */
        public: static const int lockpattern_continue_button_text = 0x7f0a0454;
        /**  Security & location settings screen, change unlock pattern screen instruction on top of screen to confirm pattern 
         */
        public: static const int lockpattern_need_to_confirm = 0x7f0a044f;
        /**  Security & location settings screen, change unlock pattern screen instruction when the user chooses "Change unlock pattern".  We first ask the user toe nter the current pattern, and this is the message seen 
         */
        public: static const int lockpattern_need_to_unlock = 0x7f0a0446;
        /**  Do not translate. 
         */
        public: static const int lockpattern_need_to_unlock_footer = 0x7f0a0447;
        /**  Security & location settings screen, change unlock pattern screen instruction if user draws incorrect pattern 
         */
        public: static const int lockpattern_need_to_unlock_wrong = 0x7f0a0448;
        /**  Do not translate. 
         */
        public: static const int lockpattern_need_to_unlock_wrong_footer = 0x7f0a0449;
        public: static const int lockpattern_pattern_confirmed_header = 0x7f0a0450;
        /**  Security & location settings screen, change unlock pattern screen message on top of screen after drawing pattern 
         */
        public: static const int lockpattern_pattern_entered_header = 0x7f0a044e;
        /**  Security & location settings screen, change unlock pattern screen instruction on top of screen if user doesn't connect enough dots 
         */
        public: static const int lockpattern_recording_incorrect_too_short = 0x7f0a044d;
        /**  Security & location settings screen, change unlock pattern screen instruction on top of screen while drawing pattern 
         */
        public: static const int lockpattern_recording_inprogress = 0x7f0a044c;
        /**  Security & location settings screen, change unlock pattern screen hint on bottom of screen.  We are telling them to press the menu button to see more options or help. 
         */
        public: static const int lockpattern_recording_intro_footer = 0x7f0a044b;
        /**  Security & location settings screen, change unlock pattern screen instruction on top of screen.  This si when they are supposed to draw a new unlock pattern (for example, if they are changing their unlock patterns)..
         */
        public: static const int lockpattern_recording_intro_header = 0x7f0a044a;
        /**  Security & location settings screen, change unlock pattern screen button, on bottom of screen.  After they draw a pattern and release their finger, we display the pattern so they remember.  If they are nto satisfied with this pattern, they click this button to redraw the pattern. 
         */
        public: static const int lockpattern_restart_button_text = 0x7f0a0452;
        /**  Security & location settings screen, change unlock pattern screen button, on bottom of screen. If they are supposed to enter their current pattern before being able to draw another one, and they screw up, they hit this button to try again 
         */
        public: static const int lockpattern_retry_button_text = 0x7f0a0453;
        /**  Security & location settings screen, setting option name when user has previously set an unlock pattern and wants to change to a new pattern 
         */
        public: static const int lockpattern_settings_change_lock_pattern = 0x7f0a045d;
        /**  Security & location settings screen, setting option name when user has never set an unlock pattern 
         */
        public: static const int lockpattern_settings_choose_lock_pattern = 0x7f0a045c;
        /**  Security & location settings screen, setting check box title. This controls whether the device locks immediately when the power button is pressed. [CHAR LIMIT=28]
         */
        public: static const int lockpattern_settings_enable_power_button_instantly_locks = 0x7f0a045a;
        /**  Security & location settings screen, setting summary for the checkbox "Require pattern" 
         */
        public: static const int lockpattern_settings_enable_summary = 0x7f0a0457;
        /**  Security & location settings screen, setting check box title. This setting controls whether tactile feedback will be produced when the user draws the pattern.
         */
        public: static const int lockpattern_settings_enable_tactile_feedback_title = 0x7f0a0459;
        /**  Security & location settings screen, setting check box title if the unlock pattern MUST be drawn everytime they turn on the screen 
         */
        public: static const int lockpattern_settings_enable_title = 0x7f0a0456;
        /**  Security & location settings screen, setting check box title. This setting controls whether a visible green line is drawn as the user moves his finger around while drawing the unlock pattern.  If checked, this line is drawn.  If unchecked, there is nothing drawn so the user does not reveal his pattern while he unlocks the phone.
         */
        public: static const int lockpattern_settings_enable_visible_pattern_title = 0x7f0a0458;
        /**  Security & location settings screen, the help instructions (an animation) caption 
         */
        public: static const int lockpattern_settings_help_how_to_record = 0x7f0a045e;
        /**  Security & location settings screen, setting optional summary when a trust agent is enabled
         */
        public: static const int lockpattern_settings_power_button_instantly_locks_summary = 0x7f0a045b;
        /**  Security & location settings screen, unlock screen activity title 
         */
        public: static const int lockpattern_settings_title = 0x7f0a0455;
        /**  Security & location settings screen, change unlock pattern screen countdown hint on bottom of screen after too many incorrect attempts 
         */
        public: static const int lockpattern_too_many_failed_confirmation_attempts_footer = 0x7f0a0460;
        /**  Security & location settings screen, change unlock pattern screen instruction on top of screen after too many incorrect attempts 
         */
        public: static const int lockpattern_too_many_failed_confirmation_attempts_header = 0x7f0a045f;
        /**  Label for LockPatternTutorial Cancel button 
         */
        public: static const int lockpattern_tutorial_cancel_label = 0x7f0a018d;
        /**  Label for LockPatternTutorial Continue button 
         */
        public: static const int lockpattern_tutorial_continue_label = 0x7f0a018e;
        /**  Phone ram dump off. Only shown in diagnostic screen, so precise translation is not needed. 
         */
        public: static const int lte_ram_dump_off = 0x7f0a001b;
        /**  Phone ram dump on. Only shown in diagnostic screen, so precise translation is not needed. 
         */
        public: static const int lte_ram_dump_on = 0x7f0a001a;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int macaddr_label = 0x7f0a02db;
        /**  Representation of a mAh value. [CHAR LIMIT=NONE] 
         */
        public: static const int mah = 0x7f0a0649;
        /**  Description of the main process in the details. 
         */
        public: static const int main_running_process_description = 0x7f0a04f7;
        /**  Title of preference to manage condition providers 
         */
        public: static const int manage_condition_providers = 0x7f0a0920;
        /**  Summary of preference to manage condition providers, when none are enabled 
         */
        public: static const int manage_condition_providers_summary_zero = 0x7f0a0921;
        /**  Title of preference to manage device admins 
         */
        public: static const int manage_device_admin = 0x7f0a0191;
        /**  Summary of preference to manage device policies 
         */
        public: static const int manage_device_admin_summary = 0x7f0a0192;
        /**  Mobile plan [CHAR LIMIT=35]
         */
        public: static const int manage_mobile_plan_title = 0x7f0a03fe;
        public: static const int manage_notification_access = 0x7f0a096a;
        /**  Summary of preference to manage notification listeners, when none are enabled 
         */
        public: static const int manage_notification_access_summary_zero = 0x7f0a091c;
        /**  Sound & notification > Notification section: Title for managing notification listeners option. [CHAR LIMIT=30] 
         */
        public: static const int manage_notification_access_title = 0x7f0a091b;
        /**  Manage applications screen, individual app screen, button label when the user wants to manage the space taken up by an app. 
         */
        public: static const int manage_space_text = 0x7f0a0495;
        /**  Title of preference to manage trust agents 
         */
        public: static const int manage_trust_agents = 0x7f0a0193;
        /**  Summary of preference to manage device policies 
         */
        public: static const int manage_trust_agents_summary = 0x7f0a0195;
        /**  Applications settings screen, setting option summary for the user to go to the screen to manage installed applications  
         */
        public: static const int manageapplications_settings_summary = 0x7f0a0463;
        /**  Applications settings screen, setting option name for the user to go to the screen to manage installed applications  
         */
        public: static const int manageapplications_settings_title = 0x7f0a0462;
        /**  Title for managed device admins on the list [CHAR_LIMIT=25] 
         */
        public: static const int managed_device_admin_title = 0x7f0a06fa;
        /**  Message displayed when the device admin can only be disabled by deleting the work profile [CHAR_LIMIT=120] 
         */
        public: static const int managed_profile_device_admin_info = 0x7f0a06f8;
        /**  Label for the state of the work profile [CHAR LIMIT=80] 
         */
        public: static const int managed_profile_not_available_label = 0x7f0a072e;
        /**  Title for a work profile. [CHAR LIMIT=25] 
         */
        public: static const int managed_user_title = 0x7f0a0951;
        /**  SD card & phone storage settings screen, instructions and list of current accounts.  The list of accounts follows this text[CHAR LIMIT=NONE] 
         */
        public: static const int master_clear_accounts = 0x7f0a03cd;
        /**  SD card & phone storage settings screen, button on screen after user selects Factory data reset 
         */
        public: static const int master_clear_button_text = 0x7f0a03d2;
        /**  Master clear confirmation screen title [CHAR LIMIT=30] 
         */
        public: static const int master_clear_confirm_title = 0x7f0a03d8;
        /**  SD card & phone storage settings screen, message on screen after user selects Factory data reset [CHAR LIMIT=NONE] 
         */
        public: static const int master_clear_desc = 0x7f0a03cc;
        /**  SD card & phone storage settings screen, list of items in user data storage (USB storage or SD card) that will be erased during this operation [CHAR LIMIT=NONE] 
         */
        public: static const int master_clear_desc_also_erases_external = 0x7f0a03ce;
        /**  SD card & phone storage settings screen, instructions about whether to also erase the external storage (SD card) when erasing the internal storage [CHAR LIMIT=NONE] 
         */
        public: static const int master_clear_desc_erase_external_storage = 0x7f0a03cf;
        /**  Master clear failed message 
         */
        public: static const int master_clear_failed = 0x7f0a03d7;
        /**  SD card & phone storage settings screen, button on screen after user selects Reset phone button 
         */
        public: static const int master_clear_final_button_text = 0x7f0a03d4;
        /**  SD card & phone storage settings screen, message on screen after user selects Reset phone button 
         */
        public: static const int master_clear_final_desc = 0x7f0a03d3;
        /**  Explanation of drawing unlock pattern to reset phone 
         */
        public: static const int master_clear_gesture_explanation = 0x7f0a03d6;
        /**  Message to draw an unlock pattern before clearing the device 
         */
        public: static const int master_clear_gesture_prompt = 0x7f0a03d5;
        /**  Error message for users that aren't allowed to factory reset [CHAR LIMIT=none] 
         */
        public: static const int master_clear_not_available = 0x7f0a03d9;
        /**  Master clear progress screen text [CHAR LIMIT=75] 
         */
        public: static const int master_clear_progress_text = 0x7f0a03db;
        /**  Master clear progress screen title [CHAR LIMIT=30] 
         */
        public: static const int master_clear_progress_title = 0x7f0a03da;
        /**  SD card & phone storage settings screen, setting option summary text under Internal phone storage heading 
         */
        public: static const int master_clear_summary = 0x7f0a03cb;
        /**  SD card & phone storage settings screen, setting option name under Internal phone storage heading 
         */
        public: static const int master_clear_title = 0x7f0a03ca;
        /**  Preference category for media development settings. [CHAR LIMIT=50] 
         */
        public: static const int media_category = 0x7f0a0769;
        /**  SD card & phone storage settings screen, button on screen after user selects Factory data reset 
 syntax error in translation for media_format_desc (8764037252319942415) org.xmlpull.v1.XmlPullParserException: expected: /string read: b (position:END_TAG </b>@1:113 in     <string name="media_format_desc" product="default" msgid="8764037252319942415">"SDကဒ်ကိုဖျက်မည်လား။ သင့်"</b>"ကဒ်ထဲရှိဒေတာ"<b>"အားလုံးကို ဆုံးရှုံးမည်"</string>
)  
         */
        public: static const int media_format_button_text = 0x7f0a03df;
        /**  SD card & phone storage settings screen, message on screen after user selects Factory data reset [CHAR LIMIT=NONE] 
         */
        public: static const int media_format_desc = 0x7f0a03de;
        /**  SD card & phone storage settings screen, button on screen after user selects Format media button 
         */
        public: static const int media_format_final_button_text = 0x7f0a03e1;
        /**  SD card & phone storage settings screen, message on screen after user selects Format media button [CHAR LIMIT=NONE] 
         */
        public: static const int media_format_final_desc = 0x7f0a03e0;
        /**  Explanation of drawing unlock pattern to format card [CHAR LIMIT=NONE] 
         */
        public: static const int media_format_gesture_explanation = 0x7f0a03e3;
        /**  Message to draw an unlock pattern before clearing the device 
         */
        public: static const int media_format_gesture_prompt = 0x7f0a03e2;
        /**  SD card & phone storage settings screen, setting option summary text under Internal phone storage heading 
         */
        public: static const int media_format_summary = 0x7f0a03dd;
        /**  SD card & phone storage settings screen, setting option name under Internal phone storage heading 
         */
        public: static const int media_format_title = 0x7f0a03dc;
        /**  Sound & notification > Sound section: Title for the option managing media volume. [CHAR LIMIT=30] 
         */
        public: static const int media_volume_option_title = 0x7f0a08fa;
        /**  Sound settings screen, setting option summary text 
         */
        public: static const int media_volume_summary = 0x7f0a02f6;
        /**  Sound settings screen, setting option name 
         */
        public: static const int media_volume_title = 0x7f0a02f5;
        /**  choice for the font size spinner 
         */
        public: static const int medium_font = 0x7f0a0037;
        /**  [CHAR LIMIT=NONE] Activity title for process stats details on overall memory state 
         */
        public: static const int mem_details_title = 0x7f0a0661;
        /**  [CHAR LIMIT=NONE] Subtitle for process stats memory state details for list of memory states 
         */
        public: static const int mem_state_subtitle = 0x7f0a0662;
        /**  [CHAR LIMIT=NONE] Type of memory use that is available/free 
         */
        public: static const int mem_use_free_type = 0x7f0a0668;
        /**  [CHAR LIMIT=NONE] Type of memory use associated with kernel caches 
         */
        public: static const int mem_use_kernel_cache_type = 0x7f0a0666;
        /**  [CHAR LIMIT=NONE] Type of memory use associated with the kernel 
         */
        public: static const int mem_use_kernel_type = 0x7f0a0664;
        /**  [CHAR LIMIT=NONE] Type of memory use associated with native processes 
         */
        public: static const int mem_use_native_type = 0x7f0a0665;
        /**  [CHAR LIMIT=NONE] Subtitle for process stats memory state details for list of memory use 
         */
        public: static const int mem_use_subtitle = 0x7f0a0663;
        /**  [CHAR LIMIT=NONE] Total of all memory use 
         */
        public: static const int mem_use_total = 0x7f0a0669;
        /**  [CHAR LIMIT=NONE] Type of memory use associated with kernel zram swap 
         */
        public: static const int mem_use_zram_type = 0x7f0a0667;
        /**  [CHAR LIMIT=10] Running services, label for chart showing memory use. 
         */
        public: static const int memory = 0x7f0a04dd;
        /**  SD card & phone storage settings title. Displayed as a title when showing the total usage of applications installed. Below it will be a number like "123.4 MB" indicating used storage. [CHAR LIMIT=50] 
         */
        public: static const int memory_apps_usage = 0x7f0a037b;
        /**  SD card & phone storage settings title. The amount of free space for some storage partition.  For example, this is listed under both the "Internal phone storage" section and the "SD card" section. 
         */
        public: static const int memory_available = 0x7f0a0377;
        /**  SD card & phone storage settings title. The amount of free space for some storage partition when the volume is read-only. [CHAR LIMIT=64] 
         */
        public: static const int memory_available_read_only = 0x7f0a0378;
        /**  SD card & phone storage settings summary. Displayed when the total memory usage is being calculated. Will be replaced with a number like "12.3 GB" when finished calucating. [CHAR LIMIT=30] 
         */
        public: static const int memory_calculating_size = 0x7f0a037a;
        /**  Message of dialog asking user to confirm before clearing all caches. [CHAR LIMIT=48] 
         */
        public: static const int memory_clear_cache_message = 0x7f0a038a;
        /**  SD card status when it is mounted as read only. Will be appended to size, starts with an unbreakable space 
 Title of dialog asking user to confirm before clearing all caches. [CHAR LIMIT=48] 
         */
        public: static const int memory_clear_cache_title = 0x7f0a0389;
        /**  SD card & phone storage settings title. Displayed as a title when showing the total usage of all pictures, videos in /sdcard/DCIM, /sdcard/Pictures folders on the device. Below it will be a number like "123.4 MB" indicating used storage. [CHAR LIMIT=50] 
         */
        public: static const int memory_dcim_usage = 0x7f0a037e;
        /**  SD card & phone storage settings title. Displayed as a title when showing the total usage of /sdcard/Download on the device. Below it will be a number like "123.4 MB" indicating used storage. [CHAR LIMIT=50] 
         */
        public: static const int memory_downloads_usage = 0x7f0a037d;
        /**  Storage item representing all cached data on device. [CHAR LIMIT=48] 
         */
        public: static const int memory_media_cache_usage = 0x7f0a0381;
        /**  SD card & phone storage settings title. Displayed as a title when showing the total usage of misc files on the device. Below it will be a number like "123.4 MB" indicating used storage. [CHAR LIMIT=50] 
         */
        public: static const int memory_media_misc_usage = 0x7f0a0380;
        /**  SD card & phone storage settings title. Displayed as a title when showing the total usage of media on the device. Below it will be a number like "123.4 MB" indicating used storage. [CHAR LIMIT=50] 
         */
        public: static const int memory_media_usage = 0x7f0a037c;
        /**  SD card & phone storage settings title. Displayed as a title when showing the total usage of audio files in /sdcard on the device. Below it will be a number like "123.4 MB" indicating used storage. [CHAR LIMIT=50] 
         */
        public: static const int memory_music_usage = 0x7f0a037f;
        /**  SD card & phone storage settings screen heading.  The total amount of storage space for some storage partition.  For example, this is listed under both the "Internal phone storage" section and the "SD card" section 
         */
        public: static const int memory_size = 0x7f0a0379;
        /**  Edit access point screen menu option to discard the user's changes for this APN 
         */
        public: static const int menu_cancel = 0x7f0a03c0;
        /**  Edit access point screen menu option to delete this APN 
         */
        public: static const int menu_delete = 0x7f0a03bd;
        /**  [CHAR LIMIT=NONE] Menu for process stats to show 3 hours of data 
         */
        public: static const int menu_duration_12h = 0x7f0a066c;
        /**  [CHAR LIMIT=NONE] Menu for process stats to show 3 hours of data 
         */
        public: static const int menu_duration_1d = 0x7f0a066d;
        /**  [CHAR LIMIT=NONE] Menu for process stats to show 3 hours of data 
         */
        public: static const int menu_duration_3h = 0x7f0a066a;
        /**  [CHAR LIMIT=NONE] Menu for process stats to show 3 hours of data 
         */
        public: static const int menu_duration_6h = 0x7f0a066b;
        /**  APNs screen menu option to create a brand spanking new APN 
         */
        public: static const int menu_new = 0x7f0a03be;
        /**  [CHAR LIMIT=NONE] Menu for process stats to select duration of stats to show 
         */
        public: static const int menu_proc_stats_duration = 0x7f0a0660;
        /**  [CHAR LIMIT=NONE] Menu for process stats to select which type of stats to show 
         */
        public: static const int menu_proc_stats_type = 0x7f0a0670;
        /**  [CHAR LIMIT=NONE] Menu for process stats to show information on background processes 
         */
        public: static const int menu_proc_stats_type_background = 0x7f0a0671;
        /**  [CHAR LIMIT=NONE] Menu for process stats to show information on cached processes 
         */
        public: static const int menu_proc_stats_type_cached = 0x7f0a0673;
        /**  [CHAR LIMIT=NONE] Menu for process stats to show information on foreground processes 
         */
        public: static const int menu_proc_stats_type_foreground = 0x7f0a0672;
        /**  APNs screen menu option to reset default APN settings 
         */
        public: static const int menu_restore = 0x7f0a03c7;
        /**  Edit access point screen menu option to save the user's changes for this APN to the persistent storage 
         */
        public: static const int menu_save = 0x7f0a03bf;
        /**  [CHAR LIMIT=NONE] Menu for process stats to control whether system processes are shown 
         */
        public: static const int menu_show_system = 0x7f0a066e;
        /**  Menu label for viewing battery usage since unplugged 
         */
        public: static const int menu_stats_last_unplugged = 0x7f0a064b;
        /**  Menu label for refreshing with latest usage numbers 
         */
        public: static const int menu_stats_refresh = 0x7f0a064d;
        /**  Menu label for viewing battery usage total 
         */
        public: static const int menu_stats_total = 0x7f0a064c;
        /**  Menu label for viewing battery usage since unplugged 
         */
        public: static const int menu_stats_unplugged = 0x7f0a064a;
        /**  [CHAR LIMIT=NONE] Menu for process stats to control whether computation should be based
        on Uss (Unique Set Size) instead of Pss (Proportional Set Size) 
         */
        public: static const int menu_use_uss = 0x7f0a066f;
        /**  Misc files [CHAR LIMIT=25] 
         */
        public: static const int misc_files = 0x7f0a0758;
        /**  number of misc files selected [CHAR LIMIT=40] 
         */
        public: static const int misc_files_selected_count = 0x7f0a0759;
        /**  number of bytes represented by the selected misc files [CHAR LIMIT=40] 
         */
        public: static const int misc_files_selected_count_bytes = 0x7f0a075a;
        /**  Ask user to connect to the internet [CHAR_ LIMIT=50]
         */
        public: static const int mobile_connect_to_internet = 0x7f0a0409;
        /**  Ask user to insert a SIM card [CHAR_ LIMIT=50]
         */
        public: static const int mobile_insert_sim_card = 0x7f0a0408;
        /**  There is no mobile provisiong website for the operator which is the firat parameter [CHAR_ LIMIT=50]
         */
        public: static const int mobile_no_provisioning_url = 0x7f0a0407;
        /**  The SIM operator is not known [CHAR_ LIMIT=50]
         */
        public: static const int mobile_unknown_sim_operator = 0x7f0a0406;
        /**  About phone screen, status item label  [CHAR LIMIT=40] 
         */
        public: static const int model_number = 0x7f0a0353;
        /**  Manage applications, text for Move button 
         */
        public: static const int move_app = 0x7f0a04ba;
        /**  Manage applications, text for dialog moving an app 
         */
        public: static const int move_app_failed_dlg_text = 0x7f0a04c6;
        /**  Manage applications, text for dialog when moving an app 
         */
        public: static const int move_app_failed_dlg_title = 0x7f0a04c5;
        /**  Manage applications, text for Move button to move app to internal storage 
         */
        public: static const int move_app_to_internal = 0x7f0a04bb;
        /**  Manage applications, text for Move button  to move app to sdcard 
         */
        public: static const int move_app_to_sdcard = 0x7f0a04bc;
        /**  Manage applications, title for dialog when killing persistent apps
 Manage applications, text for Move button when move is in progress 
         */
        public: static const int moving = 0x7f0a04bd;
        /**  SD card & phone storage settings item summary that will result in the phone connected to PC and MTP/PTP enabled.   [CHAR LIMIT=80] 
         */
        public: static const int mtp_ptp_mode_summary = 0x7f0a038b;
        /**  Sound settings screen, music effects title [CHAR LIMIT=30]
         */
        public: static const int musicfx_title = 0x7f0a02eb;
        /**  Edit Mvno Match Data Info of APN 
         */
        public: static const int mvno_match_data = 0x7f0a03bc;
        /**  Edit Mvno Type Info of APN 
         */
        public: static const int mvno_type = 0x7f0a03bb;
        /**  Network operators settings title.  [CHAR LIMIT=50] 
         */
        public: static const int network_operators_settings = 0x7f0a0892;
        /**  Wifi Assistant request message.  This message asks the user if it is okay for an app to become the Wifi Assistant instead of the current Wifi Assistant app. [CHAR LIMIT=100] 
         */
        public: static const int network_scorer_change_active_dialog_text = 0x7f0a0404;
        /**  Wifi Assistant change wi-fi assistant title.  [CHAR LIMIT=40] 
         */
        public: static const int network_scorer_change_active_dialog_title = 0x7f0a0403;
        /**  Wifi Assistant request message.  This message asks the user if it is okay for an app to become the Wifi Assistant. [CHAR LIMIT=100] 
         */
        public: static const int network_scorer_change_active_no_previous_dialog_text = 0x7f0a0405;
        /**  Wireless controls, item title to go into the network settings 
         */
        public: static const int network_settings_title = 0x7f0a03fd;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int network_state_label = 0x7f0a02d4;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int networkid_label = 0x7f0a02dc;
        /**  mobile network settings screen, setting option name 
         */
        public: static const int networks = 0x7f0a0115;
        /**  Prompt for the user to enter a new full-backup password 
         */
        public: static const int new_backup_pw_prompt = 0x7f0a0816;
        /**  Used in setup wizard Wi-Fi screen. The button label for going to the next screen and submitting. [CHAR LIMIT=20] 
         */
        public: static const int next_label = 0x7f0a00f0;
        /**  NFC More... title.  [CHAR LIMIT=40] 
         */
        public: static const int nfc_more_title = 0x7f0a0869;
        public: static const int nfc_payment_ask = 0x7f0a098d;
        /**  String shown before a checkbox, allowing the user to indicate that he wants foreground apps
         to be able to override the configured default app 
         */
        public: static const int nfc_payment_favor_foreground = 0x7f0a0867;
        /**  String shown when there are no NFC payment applications installed, clickable, pointing to
         a website to learn more
         */
        public: static const int nfc_payment_learn_more = 0x7f0a0868;
        public: static const int nfc_payment_menu_item_add_service = 0x7f0a086a;
        /**  String shown when there are no NFC payment applications installed 
         */
        public: static const int nfc_payment_no_apps = 0x7f0a0866;
        public: static const int nfc_payment_set_default = 0x7f0a086c;
        public: static const int nfc_payment_set_default_instead_of = 0x7f0a086d;
        /**  Label for the dialog that is shown when the user is asked to set a
         preferred payment application 
         */
        public: static const int nfc_payment_set_default_label = 0x7f0a086b;
        public: static const int nfc_payment_settings_title = 0x7f0a0864;
        /**  Description of NFC in the 1st level settings screen, for a phone. [CHAR LIMIT=NONE] 
         */
        public: static const int nfc_quick_toggle_summary = 0x7f0a0210;
        /**  NFC settings 
 Used in the 1st-level settings screen to turn on NFC 
         */
        public: static const int nfc_quick_toggle_title = 0x7f0a020f;
        /**  Strings for Dialog no button 
         */
        public: static const int no = 0x7f0a0007;
        /**  Button label for generic NO action [CHAR LIMIT=20] 
         */
        public: static const int no_all_caps = 0x7f0a00ff;
        /**  UI debug setting: label for app picker to select no applicatiojn [CHAR LIMIT=50] 
         */
        public: static const int no_application = 0x7f0a0763;
        /**  [CHAR LIMIT=25] Text shown when there are no applications to display. 
         */
        public: static const int no_applications = 0x7f0a049f;
        /**  String to show in the list of condition providers, when none is installed 
 String.format failed for translation 
 no translation found for manage_condition_providers_summary_nonzero:other (358057362115673258) 
         */
        public: static const int no_condition_providers = 0x7f0a0922;
        /**  Message when there are no available device admins to display 
         */
        public: static const int no_device_admins = 0x7f0a06f7;
        /**  String to show in the list of notification listeners, when none is installed 
 String.format failed for translation 
 no translation found for manage_notification_access_summary_nonzero:one (8344183614159211585) 
 String.format failed for translation 
 no translation found for manage_notification_access_summary_nonzero:other (980049191810249052) 
         */
        public: static const int no_notification_listeners = 0x7f0a091d;
        /**  [CHAR LIMIT=25] Text shown when there are no services running 
         */
        public: static const int no_running_services = 0x7f0a04d8;
        /**  Message displayed when there are no active services in a process. 
         */
        public: static const int no_services = 0x7f0a04ee;
        /**  Message when there are no available trust agents to display 
         */
        public: static const int no_trust_agents = 0x7f0a06fb;
        /**  The option in the date-format picker for using the normal format
         called for by the user's locale. 
         */
        public: static const int normal_date_format = 0x7f0a00a1;
        /**  [CHAR LIMIT=25] Manage applications, text telling using an application is not installed. 
         */
        public: static const int not_installed = 0x7f0a049e;
        /**  [CHAR LIMIT=NONE] Content description for per-app notification
         settings button 
         */
        public: static const int notification_app_settings_button = 0x7f0a0949;
        /**  Summary for a warning message about security implications of enabling a notification
          listener, displayed as a dialog message. [CHAR LIMIT=NONE] 
         */
        public: static const int notification_listener_security_warning_summary = 0x7f0a091f;
        /**  Title for a warning message about security implications of enabling a notification
          listener, displayed as a dialog message. [CHAR LIMIT=NONE] 
         */
        public: static const int notification_listener_security_warning_title = 0x7f0a091e;
        public: static const int notification_log_title = 0x7f0a0705;
        /**  Sound & notification > Notification section: Title for the pulse notification light option. [CHAR LIMIT=30] 
         */
        public: static const int notification_pulse_title = 0x7f0a0908;
        /**  Sound & notification > Sound section: Title for the option defining the default notification ringtone. [CHAR LIMIT=30] 
         */
        public: static const int notification_ringtone_title = 0x7f0a0905;
        /**  Sound & notification: Notification section header [CHAR LIMIT=30] 
         */
        public: static const int notification_section_header = 0x7f0a0907;
        /**  Sounds and Notification 
 Sound & notification: Settings header. [CHAR LIMIT=30] 
         */
        public: static const int notification_settings = 0x7f0a08f9;
        /**  [CHAR LIMIT=20] Notifications settings: Apps section header 
         */
        public: static const int notification_settings_apps_title = 0x7f0a0948;
        /**  Sound settings screen, setting option title
         */
        public: static const int notification_sound_dialog_title = 0x7f0a02f4;
        /**  Sound settings screen, setting option name 
         */
        public: static const int notification_sound_title = 0x7f0a02ee;
        /**  Sound & notification > Sound section: Title for the option managing notification volume. [CHAR LIMIT=30] 
         */
        public: static const int notification_volume_option_title = 0x7f0a08fd;
        /**  Sound settings screen, the title of the volume bar to adjust the notification volume 
         */
        public: static const int notification_volume_title = 0x7f0a02f1;
        /**  Description of NFC in the 1st level settings screen. [CHAR LIMIT=NONE] 
         */
        public: static const int nsd_quick_toggle_summary = 0x7f0a0218;
        /**  Network service discovery settings 
 Used in the 1st-level settings screen to turn on NSD 
         */
        public: static const int nsd_quick_toggle_title = 0x7f0a0217;
        /**  Full package name of OEM preferred device feedback reporter [DO NOT TRANSLATE] 
         */
        public: static const int oem_preferred_feedback_reporter = 0x7f0a094b;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int oem_radio_info_label = 0x7f0a00de;
        /**  setting Checkbox title whether to enable OEM unlock [CHAR_LIMIT=35] 
         */
        public: static const int oem_unlock_enable = 0x7f0a055b;
        /**  setting Checkbox summary whether to enable OEM unlock [CHAR_LIMIT=50] 
         */
        public: static const int oem_unlock_enable_summary = 0x7f0a055c;
        /**  Button label for generic OK action [CHAR LIMIT=20] 
         */
        public: static const int okay = 0x7f0a00fd;
        /**  Message to user that Home Settings will be hidden because there is now only one available home application 
         */
        public: static const int only_one_home_message = 0x7f0a0860;
        /**  Summary for on-screen keyboard settings 
         */
        public: static const int onscreen_keyboard_settings_summary = 0x7f0a0549;
        /**  Sound & notification > Sound section: Title for the other sounds option and associated settings page. [CHAR LIMIT=30] 
         */
        public: static const int other_sound_settings = 0x7f0a090f;
        /**  UI debug setting: simulate secondary display devices using overlays [CHAR LIMIT=25] 
         */
        public: static const int overlay_display_devices_title = 0x7f0a078f;
        /**  Hint text shown in owner info edit text [CHAR LIMIT=50] 
         */
        public: static const int owner_info_settings_edit_text_hint = 0x7f0a0139;
        /**  Text shown for summary of owner info setting [CHAR LIMIT=40]
         */
        public: static const int owner_info_settings_summary = 0x7f0a0138;
        /**  Text shown for title of owner info setting [CHAR LIMIT=20]
         */
        public: static const int owner_info_settings_title = 0x7f0a0135;
        /**  Subtitle for list of packages 
         */
        public: static const int packages_subtitle = 0x7f0a0613;
        public: static const int percentage = 0x7f0a098c;
        /**  Manage applications, individual application info screen, heading for settings related to the app's permissions. for example, it may list all the permissions the app has. 
         */
        public: static const int permissions_label = 0x7f0a0473;
        /**  Personal data section title 
         */
        public: static const int personal_data_section_title = 0x7f0a06e3;
        /**  Title for personal device admins on the list [CHAR_LIMIT=25] 
         */
        public: static const int personal_device_admin_title = 0x7f0a06f9;
        /**  The title of the activity to see phone info 
         */
        public: static const int phone_info_label = 0x7f0a00f7;
        /**  On Text & language settings screen, setting option name. title of the setting to take the user to a screen to select the locale. 
         */
        public: static const int phone_language = 0x7f0a0500;
        /**  On Text & language settings screen, setting option name. summary of the setting to take the user to a screen to select the locale. 
         */
        public: static const int phone_language_summary = 0x7f0a0501;
        /**  On Pico TTS Settings screen, text to mark a voice as installed 
         */
        public: static const int pico_installed = 0x7f0a06a6;
        /**  On Pico TTS Settings screen, text to mark the section for the various languages and voices that are available 
         */
        public: static const int pico_languages_and_voices = 0x7f0a06a5;
        /**  On Pico TTS Settings screen, text to mark a voice as not installed 
         */
        public: static const int pico_not_installed = 0x7f0a06a7;
        /**  On Pico TTS Settings screen, summary text to indicate that a voice is female 
         */
        public: static const int pico_voice_summary_female = 0x7f0a06a8;
        /**  On Pico TTS Settings screen, summary text to indicate that a voice is male 
         */
        public: static const int pico_voice_summary_male = 0x7f0a06a9;
        /**  Instructions telling the user that the operation to unlock the keyguard with SIM PIN failed. Displayed in one line in a large font.  [CHAR LIMIT=40] 
         */
        public: static const int pin_failed = 0x7f0a034e;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int ping_test_label = 0x7f0a00d9;
        /**  Label for the phase2 
         */
        public: static const int please_select_phase2 = 0x7f0a0265;
        /**  UI debug setting: show pointer location? [CHAR LIMIT=25] 
         */
        public: static const int pointer_location = 0x7f0a076d;
        /**  UI debug setting: show pointer location summary [CHAR LIMIT=50] 
         */
        public: static const int pointer_location_summary = 0x7f0a076e;
        /**  On Language & input settings screen, heading. Inside the "Language & input settings" screen, this is the header for settings that relate to mouse and trackpad devices. [CHAR LIMIT=40] 
         */
        public: static const int pointer_settings_category = 0x7f0a050f;
        /**  On Language & input settings screen, setting summary.  Setting for mouse pointer speed. [CHAR LIMIT=35] 
         */
        public: static const int pointer_speed = 0x7f0a0510;
        /**  Label for power consumed by Bluetooth 
         */
        public: static const int power_bluetooth = 0x7f0a0617;
        /**  Label for power consumed by Cell idle 
         */
        public: static const int power_cell = 0x7f0a0618;
        /**  Display time remaining until battery is charged [CHAR_LIMIT=60] 
         */
        public: static const int power_charge_remaining = 0x7f0a05f8;
        /**  [CHAR_LIMIT=40] Label for battery level chart when charging 
         */
        public: static const int power_charging = 0x7f0a05fa;
        /**  [CHAR_LIMIT=40] Label for battery level chart when charging with duration 
         */
        public: static const int power_charging_duration = 0x7f0a05fb;
        /**  [CHAR_LIMIT=40] Label for battery level chart when charging with duration 
         */
        public: static const int power_charging_duration_ac = 0x7f0a05fc;
        /**  [CHAR_LIMIT=40] Label for battery level chart when charging with duration 
         */
        public: static const int power_charging_duration_usb = 0x7f0a05fd;
        /**  [CHAR_LIMIT=40] Label for battery level chart when charging with duration 
         */
        public: static const int power_charging_duration_wireless = 0x7f0a05fe;
        /**  Display time remaining until battery is discharged [CHAR_LIMIT=60] 
         */
        public: static const int power_discharge_remaining = 0x7f0a05f7;
        /**  [CHAR_LIMIT=40] Label for battery level chart when discharging with duration 
         */
        public: static const int power_discharging_duration = 0x7f0a05f9;
        /**  Label for power consumed by the flashlight 
         */
        public: static const int power_flashlight = 0x7f0a0615;
        /**  Label for power consumed when Idle 
         */
        public: static const int power_idle = 0x7f0a061a;
        /**  Label for power that we computed too much for 
         */
        public: static const int power_overcounted = 0x7f0a061c;
        /**  Label for power consumed by Calling 
         */
        public: static const int power_phone = 0x7f0a0619;
        /**  Label for power consumed by the screen 
         */
        public: static const int power_screen = 0x7f0a0614;
        /**  Label for power that we aren't able to account for 
         */
        public: static const int power_unaccounted = 0x7f0a061b;
        /**  Display the battery level and status [CHAR_LIMIT=60] 
         */
        public: static const int power_usage_level_and_status = 0x7f0a05f6;
        /**  [CHAR_LIMIT=40] Label for list of apps using battery in power use UI 
         */
        public: static const int power_usage_list_summary = 0x7f0a05ff;
        /**  Message to show when battery usage data is not available [CHAR LIMIT=30] 
         */
        public: static const int power_usage_not_available = 0x7f0a05f5;
        /**  Activity title summary for App Fuel Gauge summary 
         */
        public: static const int power_usage_summary = 0x7f0a05f4;
        /**  Activity title for App Fuel Gauge summary 
         */
        public: static const int power_usage_summary_title = 0x7f0a05f3;
        /**  Label for power consumed by Wi-Fi 
         */
        public: static const int power_wifi = 0x7f0a0616;
        /**  Preference item that lets the user change password 
         */
        public: static const int preference_change_password_title = 0x7f0a0745;
        /**  Preferred Network offload Footer.  [CHAR LIMIT=100] 
         */
        public: static const int preferred_network_offload_footer = 0x7f0a08cb;
        /**  Preferred Network offload Header.  [CHAR LIMIT=25] 
         */
        public: static const int preferred_network_offload_header = 0x7f0a08ca;
        /**  Preferred Network offload Popup.  [CHAR LIMIT=100] 
         */
        public: static const int preferred_network_offload_popup = 0x7f0a08cc;
        /**  Preferred Network offload title.  [CHAR LIMIT=25] 
         */
        public: static const int preferred_network_offload_title = 0x7f0a08c9;
        /**  Preferred network type summary.  [CHAR LIMIT=100] 
         */
        public: static const int preferred_network_type_summary = 0x7f0a0897;
        /**  Preferred network type title.  [CHAR LIMIT=50] 
         */
        public: static const int preferred_network_type_title = 0x7f0a0896;
        /**  Template for the label of the state for a blocked print job. [CHAR LIMIT=25] 
         */
        public: static const int print_blocked_state_title_template = 0x7f0a05f0;
        /**  Title for the button to cancel a print job. [CHAR LIMIT=25] 
         */
        public: static const int print_cancel = 0x7f0a05eb;
        /**  Template for the label for a cancelling print job. [CHAR LIMIT=25] 
         */
        public: static const int print_cancelling_state_title_template = 0x7f0a05ee;
        /**  Template for the label of the state for a failed print job. [CHAR LIMIT=25] 
         */
        public: static const int print_failed_state_title_template = 0x7f0a05ef;
        /**  Summary for the disabled state of a print feature. [CHAR LIMIT=10] 
         */
        public: static const int print_feature_state_off = 0x7f0a05e2;
        /**  Summary for the enabled state of a print feature. [CHAR LIMIT=10] 
         */
        public: static const int print_feature_state_on = 0x7f0a05e1;
        /**  Template for the summary of a print job. [CHAR LIMIT=25] 
         */
        public: static const int print_job_summary = 0x7f0a05ec;
        /**  Title of the action bar button to got to add a printer. [CHAR LIMIT=25] 
         */
        public: static const int print_menu_item_add_printer = 0x7f0a05e4;
        /**  Title for print menu item to launch the add printers activity. [CHAR LIMIT=25] 
         */
        public: static const int print_menu_item_add_printers = 0x7f0a05e0;
        /**  Title of the action bar button to got to Play Store to download a print service. [CHAR LIMIT=25] 
         */
        public: static const int print_menu_item_add_service = 0x7f0a05e3;
        /**  Title for the search action bar menu item. [CHAR LIMIT=20] 
         */
        public: static const int print_menu_item_search = 0x7f0a05e5;
        /**  Title for print menu item to launch a settings activity. [CHAR LIMIT=25] 
         */
        public: static const int print_menu_item_settings = 0x7f0a05df;
        /**  Title for the prompt shown as a placeholder if no printers are found while searching. [CHAR LIMIT=50] 
         */
        public: static const int print_no_printers_found = 0x7f0a05de;
        /**  Title for the prompt shown as a placeholder if no print serivices are installed. [CHAR LIMIT=50] 
         */
        public: static const int print_no_services_installed = 0x7f0a05dd;
        /**  Title for the print job settings screen. [CHAR LIMIT=25] 
         */
        public: static const int print_print_job = 0x7f0a05e9;
        /**  Title for the menu item to open the print jobs screen. [CHAR LIMIT=25] 
         */
        public: static const int print_print_jobs = 0x7f0a05e8;
        /**  Template for the label of the state for a ongoing print job. [CHAR LIMIT=25] 
         */
        public: static const int print_printing_state_title_template = 0x7f0a05ed;
        /**  Title for the button to restart a print job. [CHAR LIMIT=25] 
         */
        public: static const int print_restart = 0x7f0a05ea;
        /**  Utterance to announce that the search box is hidden. This is spoken to a blind user. [CHAR LIMIT=none] 
         */
        public: static const int print_search_box_hidden_utterance = 0x7f0a05f2;
        /**  Utterance to announce that the search box is shown. This is spoken to a blind user. [CHAR LIMIT=none] 
         */
        public: static const int print_search_box_shown_utterance = 0x7f0a05f1;
        /**  Title for the prompt if no printers are available and the system is searching for such. [CHAR LIMIT=50] 
         */
        public: static const int print_searching_for_printers = 0x7f0a05e6;
        /**  Title for the prompt if no printers are available because the print service is disabled. [CHAR LIMIT=50] 
         */
        public: static const int print_service_disabled = 0x7f0a05e7;
        /**  Summary for a warning message about security implications of enabling a print service,
         displayed as a dialog message when the user selects to enable a print service. [CHAR LIMIT=NONE] 
         */
        public: static const int print_service_security_warning_summary = 0x7f0a05dc;
        /**  Title for a warning message about security implications of enabling a print service,
         displayed as a dialog message when the user selects to enable a print service (tablet). [CHAR LIMIT=NONE] 
         */
        public: static const int print_service_security_warning_title = 0x7f0a05db;
        /**  Title in main settings screen for printing settings [CHAR LIMIT=15] 
         */
        public: static const int print_settings = 0x7f0a05d9;
        /**  Title for print service settings screen [CHAR LIMIT=25] 
         */
        public: static const int print_settings_title = 0x7f0a05da;
        /**  Backup and reset settings menu title 
         */
        public: static const int privacy_settings = 0x7f0a06e0;
        /**  Privacy settings activity title 
         */
        public: static const int privacy_settings_title = 0x7f0a06e1;
        /**  Label for kernel threads 
         */
        public: static const int process_kernel_label = 0x7f0a064e;
        /**  Label for mediaserver process 
         */
        public: static const int process_mediaserver_label = 0x7f0a064f;
        /**  Message that a process's provider is in use. 
         */
        public: static const int process_provider_in_use_description = 0x7f0a04f9;
        /**  Message that a process's service is in use. 
         */
        public: static const int process_service_in_use_description = 0x7f0a04f8;
        /**  [CHAR LIMIT=NONE] Label for item showing details of average RAM use 
         */
        public: static const int process_stats_avg_ram_use = 0x7f0a065c;
        /**  [CHAR LIMIT=NONE] Label for item showing details of maximum RAM use 
         */
        public: static const int process_stats_max_ram_use = 0x7f0a065d;
        /**  [CHAR LIMIT=NONE] Label for process stats, duration of time the stats are over 
         */
        public: static const int process_stats_memory_status = 0x7f0a065b;
        public: static const int process_stats_ram_use = 0x7f0a0984;
        /**  [CHAR LIMIT=NONE] Label for item showing percent of time spent running 
         */
        public: static const int process_stats_run_time = 0x7f0a065e;
        /**  [CHAR LIMIT=NONE] Activity title summary for Process Stats summary 
         */
        public: static const int process_stats_summary = 0x7f0a0655;
        /**  [CHAR LIMIT=NONE] Activity title for Process Stats summary 
         */
        public: static const int process_stats_summary_title = 0x7f0a0654;
        /**  [CHAR LIMIT=NONE] Label for process stats, duration of time the stats are over 
         */
        public: static const int process_stats_total_duration = 0x7f0a0657;
        /**  [CHAR LIMIT=NONE] Label for process stats, text for stats type 
         */
        public: static const int process_stats_type_background = 0x7f0a0658;
        /**  [CHAR LIMIT=NONE] Label for process stats, text for stats type 
         */
        public: static const int process_stats_type_cached = 0x7f0a065a;
        /**  [CHAR LIMIT=NONE] Label for process stats, text for stats type 
         */
        public: static const int process_stats_type_foreground = 0x7f0a0659;
        /**  Text shown for title of profile info setting [CHAR LIMIT=20]
         */
        public: static const int profile_info_settings_title = 0x7f0a013d;
        /**  Title for screen to set a profile owner [CHAR LIMIT=40] 
         */
        public: static const int profile_owner_add_title = 0x7f0a0701;
        /** Bluetooth settings screen, text that appears in heading bar when scanning for devices 
         */
        public: static const int progress_scanning = 0x7f0a0082;
        /**  What to show in messaging that refers to this provider, e.g. AccountSyncSettings 
         */
        public: static const int provider_label = 0x7f0a074d;
        /**  HTTP proxy settings. The button to save. 
         */
        public: static const int proxy_action_text = 0x7f0a00b1;
        /**  HTTP proxy settings. Button to clear the proxy box. 
         */
        public: static const int proxy_clear_text = 0x7f0a00ab;
        /**  HTTP proxy settings. The button to restore the defaults. 
         */
        public: static const int proxy_defaultView_text = 0x7f0a00b0;
        /**  HTTP proxy settings. Title if there is an error
         */
        public: static const int proxy_error = 0x7f0a00b4;
        /**  HTTP proxy settings. Button to get rid of error box
         */
        public: static const int proxy_error_dismiss = 0x7f0a00b5;
        /**  HTTP proxy settings. Error msg 
         */
        public: static const int proxy_error_empty_host_set_port = 0x7f0a00b9;
        /**  HTTP proxy settings. Error msg 
         */
        public: static const int proxy_error_empty_port = 0x7f0a00b8;
        /**  HTTP proxy settings. The error if the exclusion list is not valid 
         */
        public: static const int proxy_error_invalid_exclusion_list = 0x7f0a00b7;
        /**  HTTP proxy settings. The error if the hostname is not valid 
         */
        public: static const int proxy_error_invalid_host = 0x7f0a00b6;
        /**  HTTP proxy settings. Error msg 
         */
        public: static const int proxy_error_invalid_port = 0x7f0a00ba;
        /**  HTTP proxy settings. The hint text for proxy exclusion list. [CHAR LIMIT=50]
         */
        public: static const int proxy_exclusionlist_hint = 0x7f0a00af;
        /**  HTTP proxy settings. The exclusion list label. 
         */
        public: static const int proxy_exclusionlist_label = 0x7f0a00ae;
        /**  HTTP proxy settings. The hint text field for the hostname. [CHAR LIMIT=50] 
         */
        public: static const int proxy_hostname_hint = 0x7f0a00b3;
        /**  HTTP proxy settings. The text field for the hostname 
         */
        public: static const int proxy_hostname_label = 0x7f0a00b2;
        /**  HTTP proxy settings. The hint text field for port. 
         */
        public: static const int proxy_port_hint = 0x7f0a00ad;
        /**  HTTP proxy settings. The port number label. 
         */
        public: static const int proxy_port_label = 0x7f0a00ac;
        /**  The title of the activity to adjust proxy settings 
         */
        public: static const int proxy_settings_label = 0x7f0a00f9;
        /**  HTTP proxy settings title 
         */
        public: static const int proxy_settings_title = 0x7f0a00aa;
        /**  HTTP proxy settings. Hint for Proxy-Auto Config URL. 
         */
        public: static const int proxy_url_hint = 0x7f0a00bd;
        /**  HTTP proxy settings. Title for Proxy-Auto Config URL.  [CHAR LIMIT=25] 
         */
        public: static const int proxy_url_title = 0x7f0a00bc;
        /**  HTTP proxy settings. Warning message about limited application support [CHAR LIMIT=100]
         */
        public: static const int proxy_warning_limited_support = 0x7f0a00bb;
        /**  Text used as a search hint into the search box 
         */
        public: static const int query_hint_text = 0x7f0a08d3;
        /**  On the Quick launch settings screen, title of the item for shortcut letters that are not assigned to an application yet. Quick launch is assigning a global shortcut to launch a specific app. 
         */
        public: static const int quick_launch_assign_application = 0x7f0a0532;
        /**  Clear dialog for quick launch setting box button labels: 
         */
        public: static const int quick_launch_clear_cancel_button = 0x7f0a0538;
        /**  On the Quick launch settings screen, message in the "Clear shortcut" confirmation dialog.  See the title for this dialog for more info. 
         */
        public: static const int quick_launch_clear_dialog_message = 0x7f0a0536;
        /**  On the Quick launch settings screen, title of "Clear shortcut" confirmation dialog. This is reached by longpressing an item for a shortcut letter.  This allows the user to clear the assigned application for that shortcut letter. 
         */
        public: static const int quick_launch_clear_dialog_title = 0x7f0a0535;
        /**  Clear dialog for quick launch setting box button labels: 
         */
        public: static const int quick_launch_clear_ok_button = 0x7f0a0537;
        /**  Quick launch screen, when assigning an app to a shortcut, this menu item to show a list of all applications.  
         */
        public: static const int quick_launch_display_mode_applications = 0x7f0a0539;
        /**  Quick launch screen, when assigning an app to a shortcut, this menu item to show a list of all shortcutable applications 
         */
        public: static const int quick_launch_display_mode_shortcuts = 0x7f0a053a;
        /**  On the Quick launch settings screen, summary text for the item of letters that are not assigned. See the quick launch "Assign application" for a description of quick launch 
         */
        public: static const int quick_launch_no_shortcut = 0x7f0a0533;
        /**  On the Quick launch settings screen, summary text under the item for each assigned letter.  
         */
        public: static const int quick_launch_shortcut = 0x7f0a0534;
        /**  The summary of the item to go into the Quick launch settings. This is a description of what Quick launch offers. 
         */
        public: static const int quick_launch_summary = 0x7f0a0531;
        /**  The title of the item to go into the Quick launch settings. 
         */
        public: static const int quick_launch_title = 0x7f0a0530;
        /**  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_cid = 0x7f0a0033;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_data_connected = 0x7f0a002b;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_data_connecting = 0x7f0a002a;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_data_disconnected = 0x7f0a0029;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_data_suspended = 0x7f0a002c;
        /**  Phone Info screen. Units shown after a value.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_display_asu = 0x7f0a0031;
        /**  Phone Info screen. Units shown after a value.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_display_bytes = 0x7f0a002f;
        /**  Phone Info screen. Units shown after a value.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_display_dbm = 0x7f0a0030;
        /**  Phone Info screen. Units shown after a value.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_display_packets = 0x7f0a002e;
        /**  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_lac = 0x7f0a0032;
        /**  Phone Info screen. Menu item label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_menu_getPDP = 0x7f0a001f;
        /**  Phone Info screen. Menu item label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_menu_viewADN = 0x7f0a001c;
        /**  Phone Info screen. Menu item label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_menu_viewFDN = 0x7f0a001d;
        /**  Phone Info screen. Menu item label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_menu_viewSDN = 0x7f0a001e;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_phone_idle = 0x7f0a0026;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_phone_offhook = 0x7f0a0028;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_phone_ringing = 0x7f0a0027;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_roaming_in = 0x7f0a0024;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_roaming_not = 0x7f0a0025;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_service_emergency = 0x7f0a0022;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_service_in = 0x7f0a0020;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_service_off = 0x7f0a0023;
        /**  Phone Info screen. Status label.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_service_out = 0x7f0a0021;
        /**  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radioInfo_unknown = 0x7f0a002d;
        /**  Main Settings screen settings summary text for the "Wireless controls" setting 
         */
        public: static const int radio_controls_summary = 0x7f0a0107;
        /**  Main Settings screen settings title for things like airplane mode, tethering, NFC, VPN.  This will take you to another screen with those settings.  [CHAR LIMIT=30] 
         */
        public: static const int radio_controls_title = 0x7f0a0105;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_band_mode_label = 0x7f0a00d3;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_call_redirect_label = 0x7f0a00c6;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_call_status_label = 0x7f0a00ce;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_cellinfo_label = 0x7f0a00c0;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_current_network_label = 0x7f0a00c9;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_data_attempts_label = 0x7f0a00c2;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_data_successes_label = 0x7f0a00ca;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_dcrtinfo_label = 0x7f0a00c1;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_gprs_service_label = 0x7f0a00c3;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_gsm_disconnects_label = 0x7f0a00c8;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_gsm_service_label = 0x7f0a00cc;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_http_client_test = 0x7f0a00d8;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_imei_label = 0x7f0a00c5;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_message_waiting_label = 0x7f0a00d1;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_neighboring_location_label = 0x7f0a00bf;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_network_type_label = 0x7f0a00d4;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_phone_number_label = 0x7f0a00d2;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_ping_hostname = 0x7f0a00d7;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_ping_ipaddr = 0x7f0a00d6;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_ppp_received_label = 0x7f0a00cb;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_ppp_resets_label = 0x7f0a00c7;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_ppp_sent_label = 0x7f0a00cf;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_radio_resets_label = 0x7f0a00d0;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_roaming_label = 0x7f0a00c4;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_set_perferred_label = 0x7f0a00d5;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_signal_location_label = 0x7f0a00be;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_signal_strength_label = 0x7f0a00cd;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_smsc_label = 0x7f0a00da;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_smsc_refresh_label = 0x7f0a00dc;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_smsc_update_label = 0x7f0a00db;
        /**  Radio Info screen. Label for a status item.  Used for diagnostic info screens, precise translation isn't needed 
         */
        public: static const int radio_info_toggle_dns_check_label = 0x7f0a00dd;
        /**  Remove account message in dialog [CHAR LIMIT=NONE] 
         */
        public: static const int really_remove_account_message = 0x7f0a074b;
        /**  Title of remove message for remove account dialog 
         */
        public: static const int really_remove_account_title = 0x7f0a074a;
        public: static const int recognizer_settings_summary = 0x7f0a0987;
        public: static const int recognizer_settings_title = 0x7f0a0986;
        public: static const int recognizer_title = 0x7f0a0985;
        /**  Manage app screen, shown when the activity is busy recomputing the size of each app 
         */
        public: static const int recompute_size = 0x7f0a04a2;
        /**  Text to display in regulatory info screen (from device overlay). 
         */
        public: static const int regulatory_info_text = 0x7f0a08ae;
        /**  About phone settings screen, setting option name to show regulatory information [CHAR LIMIT=25] 
         */
        public: static const int regulatory_information = 0x7f0a042a;
        /**  This is shown if the autheticator for a given account fails to remove it. [CHAR LIMIT=NONE] 
         */
        public: static const int remove_account_failed = 0x7f0a074c;
        /**  Button label to remove current account 
         */
        public: static const int remove_account_label = 0x7f0a0747;
        /**  Label for button to remove the active device admin 
         */
        public: static const int remove_device_admin = 0x7f0a06f5;
        /**  Button label to remove the work profile [CHAR LIMIT=35] 
         */
        public: static const int remove_managed_profile_label = 0x7f0a072f;
        /**  repeat title.  Allows the user to set how oftem to repeat alert reminders.
         For example, they may have alerts just once or every 2 or 15 minutes.  [CHAR LIMIT=30] 
         */
        public: static const int repeat_title = 0x7f0a088c;
        /**  [CHAR LIMIT=NONE] Manage applications screen, menu item.  Reset all of user's app preferences. 
         */
        public: static const int reset_app_preferences = 0x7f0a0491;
        /**  [CHAR LIMIT=25] Manage applications screen, menu item.  Confirmation button of dialog to confirm resetting user's app preferences. 
         */
        public: static const int reset_app_preferences_button = 0x7f0a0494;
        /**  [CHAR LIMIT=NONE] Manage applications screen, menu item.  Body of dialog to confirm resetting user's app preferences. 
         */
        public: static const int reset_app_preferences_desc = 0x7f0a0493;
        /**  [CHAR LIMIT=NONE] Manage applications screen, menu item.  Title of dialog to confirm resetting user's app preferences. 
         */
        public: static const int reset_app_preferences_title = 0x7f0a0492;
        /**  The message of dialog indicated restoring default APN settings in progress 
         */
        public: static const int restore_default_apn = 0x7f0a03c6;
        /**  APNs screen toast message to inform reset default APN settings is completed 
         */
        public: static const int restore_default_apn_completed = 0x7f0a03c8;
        /**  PIN entry dialog title for entering the administrator PIN [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_enter_admin_pin = 0x7f0a094c;
        /**  Restrictions summary for changing bluetooth configuration [CHAR LIMIT=100] 
         */
        public: static const int restriction_bluetooth_config_summary = 0x7f0a08a2;
        /**  Restrictions title for changing bluetooth configuration [CHAR LIMIT=35] 
         */
        public: static const int restriction_bluetooth_config_title = 0x7f0a08a1;
        /**  Restrictions summary for allowing location sharing [CHAR LIMIT=100] 
         */
        public: static const int restriction_location_enable_summary = 0x7f0a08a7;
        /**  Restrictions title for allowing location sharing [CHAR LIMIT=35] 
         */
        public: static const int restriction_location_enable_title = 0x7f0a08a6;
        /**  Restrictions screen - menu label to change restrictions pin [CHAR LIMIT=25] 
         */
        public: static const int restriction_menu_change_pin = 0x7f0a0870;
        /**  Restrictions screen - reset menu to reset to unrestricted [CHAR LIMIT=25] 
         */
        public: static const int restriction_menu_reset = 0x7f0a086f;
        /**  Restrictions summary for allowing NFC transfers (phone) [CHAR LIMIT=100] 
         */
        public: static const int restriction_nfc_enable_summary = 0x7f0a08a5;
        /**  Restrictions summary for allowing NFC transfers (tablet) [CHAR LIMIT=100] 
         */
        public: static const int restriction_nfc_enable_summary_config = 0x7f0a08a4;
        /**  Restrictions title for allowing NFC transfers [CHAR LIMIT=35] 
         */
        public: static const int restriction_nfc_enable_title = 0x7f0a08a3;
        /**  Restriction settings title [CHAR LIMIT=35] 
         */
        public: static const int restriction_settings_title = 0x7f0a086e;
        /**  Restrictions summary for configuring wifi and mobile [CHAR LIMIT=100] 
         */
        public: static const int restriction_wifi_config_summary = 0x7f0a08a0;
        /**  Restrictions title for configuring wifi and mobile [CHAR LIMIT=35] 
         */
        public: static const int restriction_wifi_config_title = 0x7f0a089f;
        /**  Sound & notification > Sound section: Title for the option managing ringer volume. [CHAR LIMIT=30] 
         */
        public: static const int ring_volume_option_title = 0x7f0a08fc;
        /**  Sound settings screen, setting option name 
         */
        public: static const int ring_volume_title = 0x7f0a02ec;
        /**  Sound settings screen, setting option summary text 
         */
        public: static const int ringtone_summary = 0x7f0a02e9;
        /**  Sound & notification > Sound section: Title for the option defining the phone ringtone. [CHAR LIMIT=30] 
         */
        public: static const int ringtone_title = 0x7f0a0904;
        /**  mobile network settings screen, setting check box title 
         */
        public: static const int roaming = 0x7f0a010d;
        /**  mobile network settings screen, setting option summary text when check box is clear 
         */
        public: static const int roaming_disable = 0x7f0a010f;
        /**  mobile network settings screen, setting option summary text when check box is selected 
         */
        public: static const int roaming_enable = 0x7f0a010e;
        /**  mobile network settings screen, dialog message when you are roaming and clear the "Data roaming" check box 
         */
        public: static const int roaming_reenable_message = 0x7f0a0110;
        /**  mobile network settings screen, title of dialog box that appears when you select the "Data roaming" check box 
         */
        public: static const int roaming_reenable_title = 0x7f0a0114;
        /**  mobile network settings screen, button on dialog box that appears when you are roaming and clear the "Data roaming" check box 
         */
        public: static const int roaming_turn_it_on_button = 0x7f0a0111;
        /**  mobile network settings screen, message in dialog box that appears when you select the "Data roaming" check box 
         */
        public: static const int roaming_warning = 0x7f0a0112;
        /**  mobile network settings screen, message in dialog box that appears when you select the "Data roaming" check box. This is for multiuser phones [CHAR LIMIT=none] 
         */
        public: static const int roaming_warning_multiuser = 0x7f0a0113;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int rssi_label = 0x7f0a02d6;
        /**  [CHAR LIMIT=NONE] Label of a running process that represents a removed 
         */
        public: static const int running_process_item_removed_user_label = 0x7f0a04e0;
        /**  [CHAR LIMIT=NONE] Label of a running process that represents another user 
         */
        public: static const int running_process_item_user_label = 0x7f0a04df;
        /**  [CHAR LIMIT=20] Running processes/services header: prefix for line showing RAM
         used by apps. 
         */
        public: static const int running_processes_header_apps_prefix = 0x7f0a04e8;
        /**  [CHAR LIMIT=20] Running processes/services header: prefix for line showing portion
         of free RAM that is used by cached apps. 
         */
        public: static const int running_processes_header_cached_prefix = 0x7f0a04eb;
        /**  [CHAR LIMIT=NONE] Bottom test of the header leading in to the running
         processes/services list. 
         */
        public: static const int running_processes_header_footer = 0x7f0a04e6;
        /**  [CHAR LIMIT=20] Running processes/services header: prefix for line showing RAM
         that is free. 
         */
        public: static const int running_processes_header_free_prefix = 0x7f0a04e9;
        /**  [CHAR_LIMIT=20] Running processes/services header: formatter for RAM use amount. 
         */
        public: static const int running_processes_header_ram = 0x7f0a04ec;
        /**  [CHAR LIMIT=20] Running processes/services header: prefix for line showing RAM
         used by system. 
         */
        public: static const int running_processes_header_system_prefix = 0x7f0a04e7;
        /**  [CHAR LIMIT=NONE] Top title of the header of the running processes/services list. 
         */
        public: static const int running_processes_header_title = 0x7f0a04e5;
        /**  [CHAR LIMIT=20] Running processes/services header: prefix for line showing total RAM
         used by everything. 
         */
        public: static const int running_processes_header_used_prefix = 0x7f0a04ea;
        /**  Descriptive text of a running process: plural process, plural service. 
         */
        public: static const int running_processes_item_description_p_p = 0x7f0a04e4;
        /**  Descriptive text of a running process: plural process, singular service. 
         */
        public: static const int running_processes_item_description_p_s = 0x7f0a04e3;
        /**  Descriptive text of a running process: singular process, plural service. 
         */
        public: static const int running_processes_item_description_s_p = 0x7f0a04e2;
        /**  Descriptive text of a running process: singular process, singular service. 
         */
        public: static const int running_processes_item_description_s_s = 0x7f0a04e1;
        /**  Title for list of services. 
         */
        public: static const int runningservicedetails_processes_title = 0x7f0a04f0;
        /**  Title for list of services. 
         */
        public: static const int runningservicedetails_services_title = 0x7f0a04ef;
        /**  Details about an application's running services. 
         */
        public: static const int runningservicedetails_settings_title = 0x7f0a04ed;
        /**  Running service details, stop confirmation descriptive text. Displays when user selects selects to stop a system service. 
         */
        public: static const int runningservicedetails_stop_dlg_text = 0x7f0a04fb;
        /**  Running service details, stop confirmation dialog title. Displays when user selects selects to stop a system service. 
         */
        public: static const int runningservicedetails_stop_dlg_title = 0x7f0a04fa;
        /**  Services settings screen, setting option summary for the user to go to the screen to view running services  
         */
        public: static const int runningservices_settings_summary = 0x7f0a04d5;
        /**  Services settings screen, setting option name for the user to go to the screen to view running services 
         */
        public: static const int runningservices_settings_title = 0x7f0a04d4;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int scan_list_label = 0x7f0a02de;
        /**  Manage applications, individual application info screen,  heading for settings related to controlling application screen compatibility 
         */
        public: static const int screen_compatibility_label = 0x7f0a0472;
        /**  Manage applications, individual application info screen, screen, message text under screen compatibility heading 
         */
        public: static const int screen_compatibility_text = 0x7f0a0489;
        /**  Sound & notification > Other sounds: Title for the option enabling touch sounds for screen locking sounds. [CHAR LIMIT=30] 
         */
        public: static const int screen_locking_sounds_title = 0x7f0a0911;
        /**  [CHAR LIMIT=300] Screen pinning description 
         */
        public: static const int screen_pinning_description = 0x7f0a0950;
        /**  [CHAR LIMIT=28] Screen pinning title 
         */
        public: static const int screen_pinning_title = 0x7f0a094f;
        /**  Sound & display settings screen, setting option name to change screen timeout 
         */
        public: static const int screen_timeout = 0x7f0a0320;
        /**  Sound & display settings screen, setting option summary to change screen timeout 
         */
        public: static const int screen_timeout_summary = 0x7f0a0322;
        /**  Sound & display settings screen, setting option name to change screen timeout [CHAR LIMIT=30] 
         */
        public: static const int screen_timeout_title = 0x7f0a0321;
        /**  Dream settings screen, button label for settings for a specific screensaver 
         */
        public: static const int screensaver_settings_button = 0x7f0a032e;
        /**  Dream settings screen, caption for when dreams are disabled 
         */
        public: static const int screensaver_settings_disabled_prompt = 0x7f0a032b;
        /**  Dream settings screen, button label to start dreaming 
         */
        public: static const int screensaver_settings_dream_start = 0x7f0a032d;
        /**  Display settings screen, summary fragment for screen saver options, activated when docked  
         */
        public: static const int screensaver_settings_summary_dock = 0x7f0a0329;
        /**  Display settings screen, summary fragment for screen saver options, activated when docked or asleep and charging 
         */
        public: static const int screensaver_settings_summary_either_long = 0x7f0a0326;
        /**  Dream settings screen, dialog option, activated when docked or asleep and charging 
         */
        public: static const int screensaver_settings_summary_either_short = 0x7f0a0327;
        /**  Display settings screen, summary for screen saver options, screen saver is turned off 
         */
        public: static const int screensaver_settings_summary_off = 0x7f0a032a;
        /**  Display settings screen, summary fragment for screen saver options, activated when asleep and charging 
         */
        public: static const int screensaver_settings_summary_sleep = 0x7f0a0328;
        /**  Display settings screen, trigger for screen saver options 
         */
        public: static const int screensaver_settings_title = 0x7f0a0325;
        /**  Dream settings screen, action label, when to dream 
         */
        public: static const int screensaver_settings_when_to_dream = 0x7f0a032c;
        /**  The title of the activity to adjust SD card settings
         */
        public: static const int sd_card_settings_label = 0x7f0a00f8;
        /**  [CHAR LIMIT=15] Manage applications, label for chart showing SD card storage use. 
         */
        public: static const int sd_card_storage = 0x7f0a04a1;
        /**  SD card & phone storage settings item title that will result in the phone unmounting the SD card.  This will be done before the user phyiscally removes the SD card from the phone.  Kind of like the "Safely remove" on some operating systems.   
         */
        public: static const int sd_eject = 0x7f0a0382;
        /**  SD card & phone storage settings item title that will result in the phone unmounting the SD card.  This will be done before the user phyiscally removes the SD card from the phone.  Kind of like the "Safely remove" on some operating systems.   
         */
        public: static const int sd_eject_summary = 0x7f0a0383;
        /**  SD card eject progress text   
         */
        public: static const int sd_ejecting_summary = 0x7f0a0392;
        /**  SD card eject progress title   
         */
        public: static const int sd_ejecting_title = 0x7f0a0391;
        /**  SD card & phone storage settings item title that will result in the phone formatting the SD card.   [CHAR LIMIT=25] 
         */
        public: static const int sd_format = 0x7f0a0387;
        /**  SD card & phone storage settings item title that will result in the phone unmounting the SD card.   [CHAR LIMIT=80] 
         */
        public: static const int sd_format_summary = 0x7f0a0388;
        /**  SD card & phone storage settings item summary that is displayed when no SD card is inserted 
         */
        public: static const int sd_insert_summary = 0x7f0a0384;
        /**  SD card & phone storage settings screen heading. This is displayed above items that pertain to the SD card 
         */
        public: static const int sd_memory = 0x7f0a0376;
        /**  SD card & phone storage settings item title that will result in the phone mounting the SD card. 
         */
        public: static const int sd_mount = 0x7f0a0385;
        /**  Subtext for Mount SD Card in Storage settings. User should never see this since we use automount. 
         */
        public: static const int sd_mount_summary = 0x7f0a0386;
        /**  Instructions after the user changes the mass storage settings 
         */
        public: static const int sdcard_changes_instructions = 0x7f0a00e4;
        /**  Used for diagnostic info screens, precise translation isn't needed. Formats the SD card in the phone, meaning it will be erased and reformatted 
         */
        public: static const int sdcard_format = 0x7f0a0035;
        /**  Title for a notification shown. 
         */
        public: static const int sdcard_setting = 0x7f0a003b;
        /**  Th label for the available (free) sapce on the SD card 
         */
        public: static const int sdcard_settings_available_bytes_label = 0x7f0a00e8;
        /**  Error message when the SD card was removed without properly unmounting 
         */
        public: static const int sdcard_settings_bad_removal_status = 0x7f0a00eb;
        /**  Message when the SD card is being used by the computer as mass storage 
         */
        public: static const int sdcard_settings_mass_storage_status = 0x7f0a00e9;
        /**  Message when there is no SD card present 
         */
        public: static const int sdcard_settings_not_present_status = 0x7f0a00e7;
        /**  Message when the SD card is mounted as read only 
         */
        public: static const int sdcard_settings_read_only_status = 0x7f0a00ee;
        /**  Message when it is scanning the SD card for new files 
         */
        public: static const int sdcard_settings_scanning_status = 0x7f0a00ed;
        /**  Enable USB mass storage mode checkbox title 
         */
        public: static const int sdcard_settings_screen_mass_storage_text = 0x7f0a00e5;
        /**  The label for total bytes on SD card 
         */
        public: static const int sdcard_settings_total_bytes_label = 0x7f0a00e6;
        /**  Message when it is safe to remove the SD card 
         */
        public: static const int sdcard_settings_unmounted_status = 0x7f0a00ea;
        /**  Label for used bytes on the SD card 
         */
        public: static const int sdcard_settings_used_bytes_label = 0x7f0a00ec;
        /**  Used for diagnostic info screens, precise translation isn't needed. Unmounts the SD card from the phone, meaning it will become available for an attached computer  
         */
        public: static const int sdcard_unmount = 0x7f0a0034;
        /**  Text used as a search hint into the search box 
         */
        public: static const int search_menu = 0x7f0a08d2;
        /**  Text used to identify the search query suggestions / recent searches 
         */
        public: static const int search_recents_queries_label = 0x7f0a08d4;
        /**  Text used to identify the search results 
         */
        public: static const int search_results_label = 0x7f0a08d5;
        /**  Search strings 
 Text to describe the search results fragment title [CHAR LIMIT=16] 
         */
        public: static const int search_results_title = 0x7f0a08d1;
        /**  Main Settings screen, setting option name to go into search settings 
         */
        public: static const int search_settings = 0x7f0a0315;
        /**  Main Settings screen, setting option summary to go into search settings 
         */
        public: static const int search_settings_summary = 0x7f0a0316;
        /**  Warning that the device data will not be encrypted with password or PIN if
         choosing a secure lock and there is an enabled accessibility service. [CHAR LIMIT=NONE] 
         */
        public: static const int secure_lock_encryption_warning = 0x7f0a05ce;
        /**  Summary for settings checkbox to disable widgets when the setting has been disabled by an installed device admin [CHAR LIMIT=50] 
         */
        public: static const int security_enable_widgets_disabled_summary = 0x7f0a0137;
        /**  Text shown for title of settings checkbox to enable widgets [CHAR LIMIT=20]
         */
        public: static const int security_enable_widgets_title = 0x7f0a0136;
        /**  In the security screen, the header title for settings related to  Passwords
         */
        public: static const int security_passwords_title = 0x7f0a0144;
        /**  Manage applications, individual application info screen, text that appears under the "Permissions" heading after the app has tried to send to a premium SMS. [CHAR LIMIT=50] 
         */
        public: static const int security_settings_billing_desc = 0x7f0a04b4;
        /**  Manage applications, individual application info screen, text that appears under the "Permissions" heading. This describes the permissions that the application has. 
         */
        public: static const int security_settings_desc = 0x7f0a04ae;
        /**  [CHAR_LIMIT=NONE] Manage applications, individual application info screen, text that appears under the "Permissions" heading.
         This describes the permissions that the application has.  It is used when multiple packages are contributing
         to the permissions and need to be listed here. 
         */
        public: static const int security_settings_desc_multi = 0x7f0a04af;
        /**  Manage applications, text for permission to send to premium SMS short codes. [CHAR LIMIT=40] 
         */
        public: static const int security_settings_premium_sms_desc = 0x7f0a04b5;
        /**  Main Settings screen setting option summary text for the item tot ake you to the security and location screen 
         */
        public: static const int security_settings_summary = 0x7f0a0142;
        /**  Main Settings screen setting option title for the item to take you to the security screen 
         */
        public: static const int security_settings_title = 0x7f0a0141;
        /**   action to select all [CHAR LIMIT=30] 
         */
        public: static const int select_all = 0x7f0a075b;
        /**  UI debug setting: title for app picker dialog [CHAR LIMIT=50] 
         */
        public: static const int select_application = 0x7f0a0762;
        /**  Label for screen showing to select device policy 
         */
        public: static const int select_device_admin_msg = 0x7f0a06f6;
        /**  UI debug setting: limit size of Android logger buffers [CHAR LIMIT=59] 
         */
        public: static const int select_logd_size_dialog_title = 0x7f0a0566;
        /**  UI debug setting: limit size of Android logger buffers 
         */
        public: static const int select_logd_size_title = 0x7f0a0565;
        public: static const int select_runtime_dialog_title = 0x7f0a097e;
        public: static const int select_runtime_title = 0x7f0a097d;
        public: static const int select_runtime_warning_message = 0x7f0a097f;
        /**  About phone screen,  setting option name  [CHAR LIMIT=40] 
         */
        public: static const int selinux_status = 0x7f0a0358;
        /**  These statuses are displayed when a device was built with SE Android supoprt.
    These are displayed by the settings app in the about section. 
         */
        public: static const int selinux_status_disabled = 0x7f0a081b;
        public: static const int selinux_status_enforcing = 0x7f0a081d;
        public: static const int selinux_status_permissive = 0x7f0a081c;
        /**  [CHAR LIMIT=10] Running services, summary of background processes 
         */
        public: static const int service_background_processes = 0x7f0a04db;
        /**  Running services, description for a service in the started state 
         */
        public: static const int service_client_name = 0x7f0a04da;
        /**  [CHAR LIMIT=10] Running services, summary of foreground processes 
         */
        public: static const int service_foreground_processes = 0x7f0a04dc;
        /**  Running service details, manage a service that is running for some other reason. 
         */
        public: static const int service_manage = 0x7f0a04f2;
        /**  Running service details, default description for services that are managed. 
         */
        public: static const int service_manage_description = 0x7f0a04f6;
        /**  Text to label a process entry with the process name. 
         */
        public: static const int service_process_name = 0x7f0a04de;
        /**  Label for a service item when it is restarting 
         */
        public: static const int service_restarting = 0x7f0a04d6;
        /**  Running services, description for a service in the started state 
         */
        public: static const int service_started_by_app = 0x7f0a04d9;
        /**  Running service details, stop a service that has started itself. 
         */
        public: static const int service_stop = 0x7f0a04f1;
        /**  Running service details, default description for services that are started. 
         */
        public: static const int service_stop_description = 0x7f0a04f3;
        /**  [CHAR LIMIT=NONE] Subtitle for process stats services list 
         */
        public: static const int services_subtitle = 0x7f0a065f;
        /**  Data synchronization settings screen, setting option name 
         */
        public: static const int settings_backup = 0x7f0a073a;
        /**  Data synchronization settings screen, setting option summary text when check box is selected 
         */
        public: static const int settings_backup_summary = 0x7f0a073b;
        /**  Accessibility settings: button for lauching settings for an accessibility service 
         */
        public: static const int settings_button = 0x7f0a05d8;
        /**  Title of the Settings activity shown within the application itself. 
         */
        public: static const int settings_label = 0x7f0a0101;
        /**  Title of the Settings activity shown in the Launcher. [CHAR LIMIT=20] 
         */
        public: static const int settings_label_launcher = 0x7f0a0102;
        /**  About phone settings screen, Open source license dialog title until license is fully loaded 
         */
        public: static const int settings_license_activity_loading = 0x7f0a0432;
        /**  About phone settings, Legal information setting option name and title of dialog box holding license info 
         */
        public: static const int settings_license_activity_title = 0x7f0a0430;
        /**  About phone settings screen, Open source license dialog message when licenses cannot be loaded 
         */
        public: static const int settings_license_activity_unavailable = 0x7f0a0431;
        /**  About phone settings screen, Safety Legal dialog title until the link is fully loaded 
         */
        public: static const int settings_safetylegal_activity_loading = 0x7f0a0436;
        /**  About phone settings, Safety Legal information setting option name and title of dialog box holding safety legal info 
         */
        public: static const int settings_safetylegal_activity_title = 0x7f0a0434;
        /**  About phone settings screen, Safety legal dialog message when data network is not connected 
         */
        public: static const int settings_safetylegal_activity_unreachable = 0x7f0a0435;
        /**  About phone settings, Safety Legal information setting option name and title of dialog box holding safety legal info 
         */
        public: static const int settings_safetylegal_title = 0x7f0a0433;
        /**  Label for option to select a settings panel as a shortcut 
         */
        public: static const int settings_shortcut = 0x7f0a0103;
        /**  NFC Wi-Fi pairing/setup strings
 Write NFC tag for Wi-Fi pairing/setup title [CHAR_LIMIT=30]
         */
        public: static const int setup_wifi_nfc_tag = 0x7f0a08f1;
        /**  Extreme threats summary.  [CHAR LIMIT=60] 
         */
        public: static const int severe_threats_summary = 0x7f0a0889;
        /**  Severe threats title.  [CHAR LIMIT=30] 
         */
        public: static const int severe_threats_title = 0x7f0a0888;
        /**  UI debug setting: show all ANRs? [CHAR LIMIT=25] 
         */
        public: static const int show_all_anrs = 0x7f0a0794;
        /**  UI debug setting: show all ANRs summary [CHAR LIMIT=50] 
         */
        public: static const int show_all_anrs_summary = 0x7f0a0795;
        /**  [CHAR LIMIT=25] Manage applications screen, menu item.  Show background cached processes. 
         */
        public: static const int show_background_processes = 0x7f0a0490;
        /**  UI debug setting: show how CPU is being used? [CHAR LIMIT=25] 
         */
        public: static const int show_cpu_usage = 0x7f0a0784;
        /**  UI debug setting: show cpu usage summary [CHAR LIMIT=50] 
         */
        public: static const int show_cpu_usage_summary = 0x7f0a0785;
        /**  [CHAR LIMIT=NONE] Device Info screen. Okay we get it, stop pressing, you already have it on 
         */
        public: static const int show_dev_already = 0x7f0a000d;
        /**  [CHAR LIMIT=NONE] Device Info screen. Confirmation that developer settings are enabled 
         */
        public: static const int show_dev_on = 0x7f0a000c;
        /**  UI debug setting: show when hardware layers get updated [CHAR LIMIT=25] 
         */
        public: static const int show_hw_layers_updates = 0x7f0a0775;
        /**  UI debug setting: show hardware layers updates summary [CHAR LIMIT=50] 
         */
        public: static const int show_hw_layers_updates_summary = 0x7f0a0776;
        /**  UI debug setting: show where window updates happen with GPU rendering? [CHAR LIMIT=25] 
         */
        public: static const int show_hw_screen_updates = 0x7f0a0773;
        /**  UI debug setting: show GPU rendering screen updates summary [CHAR LIMIT=50] 
         */
        public: static const int show_hw_screen_updates_summary = 0x7f0a0774;
        /**  UI debug setting: show when non-rectangular clip operations are used [CHAR LIMIT=50] 
         */
        public: static const int show_non_rect_clip = 0x7f0a078a;
        /**  Text shown next to checkbox for showing owner info on LockScreen [CHAR LIMIT=50]
         */
        public: static const int show_owner_info_on_lockscreen_label = 0x7f0a0134;
        /**  On Security & location settings screen, setting check box name. Title of the checkbox to set whether password edit fields will show the most recent character typed and then hide it, or just hide it right away.  By hide, I mean mask it out. 
         */
        public: static const int show_password = 0x7f0a0509;
        /**  Text shown next to checkbox for showing profile info on LockScreen [CHAR LIMIT=50]
         */
        public: static const int show_profile_info_on_lockscreen_label = 0x7f0a013c;
        /**  [CHAR LIMIT=25] Manage applications screen, menu item.  Show running services. 
         */
        public: static const int show_running_services = 0x7f0a048f;
        /**  UI debug setting: show where surface updates happen? [CHAR LIMIT=25] 
         */
        public: static const int show_screen_updates = 0x7f0a0771;
        /**  UI debug setting: show surface updates summary [CHAR LIMIT=50] 
         */
        public: static const int show_screen_updates_summary = 0x7f0a0772;
        /**  UI debug setting: show touches? [CHAR LIMIT=25] 
         */
        public: static const int show_touches = 0x7f0a076f;
        /**  UI debug setting: show touches location summary [CHAR LIMIT=50] 
         */
        public: static const int show_touches_summary = 0x7f0a0770;
        /**  Text shown next to checkbox for showing user info on LockScreen [CHAR LIMIT=50]
         */
        public: static const int show_user_info_on_lockscreen_label = 0x7f0a013a;
        /**  SIM card lock settings screen, SIM PIN dialog message when wrong PIN is entered  [CHAR LIMIT=40] 
         */
        public: static const int sim_bad_pin = 0x7f0a0344;
        /**  Title for call back. [CHAR LIMIT=60] 
         */
        public: static const int sim_call_back_title = 0x7f0a08c6;
        /**  Checkbox to always use for calls.  [CHAR LIMIT=40] 
         */
        public: static const int sim_calls_always_use = 0x7f0a08b6;
        /**  When a user chooses this "Ask first" preference for the SIM to use for phone calls, they'll be prompted to choose a SIM every time they initiate a call [CHAR LIMIT=50] 
         */
        public: static const int sim_calls_ask_first_prefs_title = 0x7f0a08ce;
        /**  Label for a numbered SIM card.  [CHAR LIMIT=40] 
         */
        public: static const int sim_card_number_title = 0x7f0a08b8;
        /**  Select label Title of Sim Editor.  [CHAR LIMIT=40] 
         */
        public: static const int sim_card_select_title = 0x7f0a08c0;
        /**  Message that SIM cards have changed.  [CHAR LIMIT=40] 
         */
        public: static const int sim_cards_changed_message = 0x7f0a08b2;
        /**  Message smmary that SIM cards have changed.  [CHAR LIMIT=60] 
         */
        public: static const int sim_cards_changed_message_summary = 0x7f0a08b3;
        /**  Message that Cellular data is unavailable.  [CHAR LIMIT=40] 
         */
        public: static const int sim_cellular_data_unavailable = 0x7f0a08b4;
        /**  Message summary that Cellular data is unavailable.  [CHAR LIMIT=60] 
         */
        public: static const int sim_cellular_data_unavailable_summary = 0x7f0a08b5;
        /**  SIM card lock settings screen, toast after not entering correct SIM PIN  [CHAR LIMIT=40] 
         */
        public: static const int sim_change_failed = 0x7f0a0346;
        /**  SIM card lock settings screen, SIM PIN dialog message instruction  [CHAR LIMIT=40] 
         */
        public: static const int sim_change_pin = 0x7f0a0343;
        /**  SIM card lock settings screen, SIM PIN dialog message when the entered PIN is correct [CHAR LIMIT=40] 
         */
        public: static const int sim_change_succeeded = 0x7f0a0347;
        /**  SIM card lock settings screen, SIM PIN dialog message instruction  [CHAR LIMIT=40] 
         */
        public: static const int sim_disable_sim_lock = 0x7f0a033f;
        /**  Carrier label of Sim Editor.  [CHAR LIMIT=40] 
         */
        public: static const int sim_editor_carrier = 0x7f0a08bc;
        /**  Color label of Sim Editor.  [CHAR LIMIT=40] 
         */
        public: static const int sim_editor_color = 0x7f0a08be;
        /**  Name label of Sim Editor.  [CHAR LIMIT=40] 
         */
        public: static const int sim_editor_name = 0x7f0a08ba;
        /**  Display label numbers of Sim Editor.  [CHAR LIMIT=40] 
         */
        public: static const int sim_editor_num_format = 0x7f0a08bf;
        /**  Number label of Sim Editor.  [CHAR LIMIT=40] 
         */
        public: static const int sim_editor_number = 0x7f0a08bd;
        /**  Title label of Sim Editor.  [CHAR LIMIT=40] 
         */
        public: static const int sim_editor_title = 0x7f0a08bb;
        /**  SIM card lock settings screen, SIM PIN dialog message instruction  [CHAR LIMIT=40] 
         */
        public: static const int sim_enable_sim_lock = 0x7f0a033e;
        /**  SIM card lock settings screen, SIM PIN dialog button labels: [CHAR LIMIT=40] 
         */
        public: static const int sim_enter_cancel = 0x7f0a034a;
        /**  SIM card lock settings screen, SIM PIN dialog message instruction  [CHAR LIMIT=40] 
         */
        public: static const int sim_enter_new = 0x7f0a0341;
        /**  SIM card lock settings screen, SIM PIN dialog button labels: [CHAR LIMIT=40] 
         */
        public: static const int sim_enter_ok = 0x7f0a0349;
        /**  SIM card lock settings screen, SIM PIN dialog message instruction  [CHAR LIMIT=40] 
         */
        public: static const int sim_enter_old = 0x7f0a0340;
        /**  SIM card lock settings screen, SIM PIN dialog message instruction  [CHAR LIMIT=40] 
         */
        public: static const int sim_enter_pin = 0x7f0a033d;
        /**  SIM card lock settings screen, toast after not entering correct SIM PIN [CHAR LIMIT=40] 
         */
        public: static const int sim_lock_failed = 0x7f0a0348;
        /**  SIM card lock settings screen, setting option summary text when SIM lock check box is clear  [CHAR LIMIT=40] 
         */
        public: static const int sim_lock_off = 0x7f0a033b;
        /**  SIM card lock settings screen, setting option summary text when SIM lock check box is selected  [CHAR LIMIT=40] 
         */
        public: static const int sim_lock_on = 0x7f0a033a;
        /**  SIM lock settings title  [CHAR LIMIT=40] 
         */
        public: static const int sim_lock_settings = 0x7f0a0336;
        /**  Security & location settings screen, setting option name  [CHAR LIMIT=40] 
         */
        public: static const int sim_lock_settings_category = 0x7f0a0337;
        /**  Security & location settings screen, section heading for settings related to sim card locking  [CHAR LIMIT=40] 
         */
        public: static const int sim_lock_settings_title = 0x7f0a0338;
        /**  Multiple SIMs found summary.  [CHAR LIMIT=100] 
         */
        public: static const int sim_multi_sims_summary = 0x7f0a034c;
        /**  Multiple SIMs found title.  [CHAR LIMIT=40] 
         */
        public: static const int sim_multi_sims_title = 0x7f0a034b;
        /**  Message informing the user that no SIM card is inserted  [CHAR LIMIT=60] 
         */
        public: static const int sim_no_inserted_msg = 0x7f0a08c3;
        /**  Title for other call settings. [CHAR LIMIT=60] 
         */
        public: static const int sim_other_call_settings = 0x7f0a08c8;
        /**  Title for outgoing back. [CHAR LIMIT=60] 
         */
        public: static const int sim_outgoing_call_title = 0x7f0a08c7;
        /**  SIM card lock settings screen, setting option name to change the SIM PIN  [CHAR LIMIT=40] 
         */
        public: static const int sim_pin_change = 0x7f0a033c;
        /**  SIM card lock settings screen, setting check box label  [CHAR LIMIT=40] 
         */
        public: static const int sim_pin_toggle = 0x7f0a0339;
        /**  SIM card lock settings screen, SIM PIN dialog message when PINs don't match  [CHAR LIMIT=40] 
         */
        public: static const int sim_pins_dont_match = 0x7f0a0345;
        /**  This is a divider in the SIM cards preferences that is the header of various settings where the user chooses which SIM to use for phone calls, data, and SMS messages [CHAR LIMIT=50] 
         */
        public: static const int sim_pref_divider = 0x7f0a08cd;
        /**  SIM card lock settings screen, Re-type new PIN.  [CHAR LIMIT=40] 
         */
        public: static const int sim_reenter_new = 0x7f0a0342;
        /**  Title for selecting a SIM card.  [CHAR LIMIT=40] 
         */
        public: static const int sim_select_card = 0x7f0a08b7;
        /**  When a SIM preference hasn't been selected yet, this string is displayed as the pref summary until the user chooses a SIM subscription from the preference list [CHAR LIMIT=50] 
         */
        public: static const int sim_selection_required_pref = 0x7f0a08cf;
        /**  Summary for SIM settings title settings during Setup Wizard.  [CHAR LIMIT=40] 
         */
        public: static const int sim_settings_summary = 0x7f0a08b1;
        /**  Title for SIM settings title settings during Setup Wizard.  [CHAR LIMIT=40] 
         */
        public: static const int sim_settings_title = 0x7f0a08b0;
        /**  Title for SIM card settings during Setup Wizard.  [CHAR LIMIT=40] 
         */
        public: static const int sim_setup_wizard_title = 0x7f0a08af;
        /**  Name label of Sim card that is empty.  [CHAR LIMIT=40] 
         */
        public: static const int sim_slot_empty = 0x7f0a08b9;
        /**  SIM status summary [CHAR LIMIT=60] 
         */
        public: static const int sim_status_summary = 0x7f0a08c5;
        /**  SIM status title  [CHAR LIMIT=40] 
         */
        public: static const int sim_status_title = 0x7f0a08c4;
        /**  UI debug setting: simulate color space anomalies. [CHAR LIMIT=25] 
         */
        public: static const int simulate_color_space = 0x7f0a077a;
        /**  Used in setup wizard Wi-Fi screen.  The button label for going to the next screen without submitting. [CHAR LIMIT=20] 
         */
        public: static const int skip_label = 0x7f0a00ef;
        /**  choice for the font size spinner 
         */
        public: static const int small_font = 0x7f0a0036;
        /**  SMS Application [CHAR LIMIT=35]
         */
        public: static const int sms_application_title = 0x7f0a03ff;
        public: static const int sms_change_default_dialog_text = 0x7f0a0401;
        public: static const int sms_change_default_dialog_title = 0x7f0a0400;
        public: static const int sms_change_default_no_previous_dialog_text = 0x7f0a0402;
        /**  check box SMS Messges title [CHAR LIMIT=30] 
         */
        public: static const int sms_messages_title = 0x7f0a010a;
        /**  Phone SMS over IMS off. Only shown in diagnostic screen, so precise translation is not needed. 
         */
        public: static const int sms_over_ims_off = 0x7f0a0017;
        /**  Phone SMS over IMS on. Only shown in diagnostic screen, so precise translation is not needed. 
         */
        public: static const int sms_over_ims_on = 0x7f0a0016;
        /**  [CHAR LIMIT=25] Manage applications screen, menu item.  Sorts all of the apps in the list alphabetically. 
         */
        public: static const int sort_order_alpha = 0x7f0a048d;
        /**  Manage applications screen, menu item. Sorts all of the apps in the list based on their file size.  This is used to uninstall when space is getting low. 
         */
        public: static const int sort_order_size = 0x7f0a048e;
        /**  Category title for phone call's ringtone and vibration settings in the Sound Setting.
         [CHAR LIMIT=40] 
         */
        public: static const int sound_category_call_ringtone_vibrate_title = 0x7f0a0706;
        public: static const int sound_category_notification_title = 0x7f0a0988;
        public: static const int sound_category_sound_title = 0x7f0a0704;
        /**  Category title for system-wide notification and feedback settings in the Sound Setting.
         [CHAR LIMIT=40] 
         */
        public: static const int sound_category_system_title = 0x7f0a0707;
        /**  Sound settings screen, setting check box label 
         */
        public: static const int sound_effects_enable_title = 0x7f0a02fa;
        /**  Sound settings screen heading 
         */
        public: static const int sound_settings = 0x7f0a02e8;
        /**  Image button description for spell checker language. 
         */
        public: static const int spellchecker_language = 0x7f0a050d;
        /**  Image button description for spell checker quick settings. 
         */
        public: static const int spellchecker_quick_settings = 0x7f0a050c;
        /**  Warning message about security implications of enabling a spell checker, displayed as a dialog
         message when the user selects to enable a spell checker. 
         */
        public: static const int spellchecker_security_warning = 0x7f0a050b;
        /**   Title for spell checker settings 
         */
        public: static const int spellcheckers_settings_title = 0x7f0a0814;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int ssid_label = 0x7f0a02d8;
        /**  Title of Dialog warning users of SSL monitoring. [CHAR LIMIT=NONE] 
         */
        public: static const int ssl_ca_cert_dialog_title = 0x7f0a0820;
        /**  Text of message to show to users whose administrator has installed a SSL CA Cert.  [CHAR LIMIT=NONE] 
         */
        public: static const int ssl_ca_cert_info_message = 0x7f0a0821;
        /**  Label on button that will take the user to the Trusted Credentials settings page.  [CHAR LIMIT=NONE]
         */
        public: static const int ssl_ca_cert_settings_button = 0x7f0a0823;
        /**  Shows up when there is a user SSL CA Cert installed on the
         device.  Indicates to the user that SSL traffic can be intercepted.  [CHAR LIMIT=NONE] 
         */
        public: static const int ssl_ca_cert_warning = 0x7f0a081e;
        /**  Text of warning to show to users that have a SSL CA Cert installed.  [CHAR LIMIT=NONE] 
         */
        public: static const int ssl_ca_cert_warning_message = 0x7f0a0822;
        /**  Text to inform the user to tap a tag to complete the setup process 
         */
        public: static const int status_awaiting_tap = 0x7f0a08f3;
        /**  About phone, status item title.  How much time the device has had its main CPU awake. 
         */
        public: static const int status_awake_time = 0x7f0a0374;
        /**  About phone, status item title.  The bluetooth adapter's hardware address
         */
        public: static const int status_bt_address = 0x7f0a0370;
        /**  About phone, status item title. The status of data access.  For example, the value may be "Connected" 
         */
        public: static const int status_data_state = 0x7f0a036a;
        /**  Text displayed in error cases (failure to write to tag) 
         */
        public: static const int status_failed_to_write = 0x7f0a08f6;
        /**  About phone, status item title.  The ICCID of the current LTE device. [CHAR LIMIT=30] 
         */
        public: static const int status_icc_id = 0x7f0a0367;
        /**  Do not translate. About phone, status item title 
         */
        public: static const int status_imei = 0x7f0a0360;
        /**  Do not translate. About phone, status item title 
         */
        public: static const int status_imei_sv = 0x7f0a0361;
        /**  Text to inform the user that the network key entered was incorrect 
         */
        public: static const int status_invalid_password = 0x7f0a08f4;
        /**  About phone, status item title for the latest area info cell broadcast received (Brazil only). 
         */
        public: static const int status_latest_area_info = 0x7f0a0369;
        /**  About phone, status item title.  The phone MEID number of the current LTE/CDMA device. [CHAR LIMIT=30] 
         */
        public: static const int status_meid_number = 0x7f0a0366;
        /**  About phone, status item title.  The phone MIN number of the current device.
         */
        public: static const int status_min_number = 0x7f0a0363;
        /**  About phone, status item title.  The phone MSID number of the current device.
         */
        public: static const int status_msid_number = 0x7f0a0364;
        /**  About phone, status item title for the type of data phone network we're connected to, for example 3G or Edge or GPRS 
         */
        public: static const int status_network_type = 0x7f0a0368;
        /**  About phone, status item title.  The phone number of the current device [CHAR LIMIT=30] 
         */
        public: static const int status_number = 0x7f0a0362;
        /**  About phone, status item title. The cell carrier that the user is connected to.  
         */
        public: static const int status_operator = 0x7f0a036e;
        /**  About phone, status item title.  The phone PRL Version of the current device.
         */
        public: static const int status_prl_version = 0x7f0a0365;
        /**  About phone, status item title, The status for roaming.  For example, the value might be "Not roaming" 
         */
        public: static const int status_roaming = 0x7f0a036d;
        /**  About phone, status item title.  The hardware serial number. [CHAR LIMIT=30]
         */
        public: static const int status_serial_number = 0x7f0a0371;
        /**  About phone, status item title. The status of whether we have service.  for example, the value may be "In service" 
         */
        public: static const int status_service_state = 0x7f0a036b;
        /**  About phone, status item title. The  current cell tower signal strength 
         */
        public: static const int status_signal_strength = 0x7f0a036c;
        /**  Text displayed when tag is not writable 
         */
        public: static const int status_tag_not_writable = 0x7f0a08f7;
        /**  About phone, status item value if the actual value is not available. 
         */
        public: static const int status_unavailable = 0x7f0a0372;
        /**  About phone, status item title.  How long the device has been running since its last reboot. 
         */
        public: static const int status_up_time = 0x7f0a0373;
        /**  About phone, status item title.  The MAC address of the Wi-Fi network adapter. 
         */
        public: static const int status_wifi_mac_address = 0x7f0a036f;
        public: static const int status_wimax_mac_address = 0x7f0a0752;
        /**  Text displayed when tag successfully writen 
         */
        public: static const int status_write_success = 0x7f0a08f5;
        /**  Manage applications, individual application info screen, section heading for stuff relating to an app's storage settings. 
         */
        public: static const int storage_label = 0x7f0a046f;
        /**  Settings item summary when storage is running low [CHAR LIMIT=NONE] 
         */
        public: static const int storage_low_summary = 0x7f0a0394;
        /**  Settings item title when storage is running low [CHAR LIMIT=32] 
         */
        public: static const int storage_low_title = 0x7f0a0393;
        /**  Storage setting.  Menu option for USB transfer settings [CHAR LIMIT=30]
         */
        public: static const int storage_menu_usb = 0x7f0a0395;
        /**  Section header above list of other users storage [CHAR LIMIT=32] 
         */
        public: static const int storage_other_users = 0x7f0a039d;
        /**  Main settings screen item's title to go into the storage settings screen [CHAR LIMIT=25] 
         */
        public: static const int storage_settings = 0x7f0a035d;
        /**  [CHAR LIMIT=100] Main settings screen item's summary for the SD card and storage settings 
         */
        public: static const int storage_settings_summary = 0x7f0a035f;
        /**  Storage settings screen title 
         */
        public: static const int storage_settings_title = 0x7f0a035e;
        /**  Storage setting.  Title for USB transfer settings [CHAR LIMIT=30]
         */
        public: static const int storage_title_usb = 0x7f0a0396;
        /**  Services settings screen, setting option summary for the user to go to the screen to app storage use 
         */
        public: static const int storageuse_settings_summary = 0x7f0a04d3;
        /**  [CHAR LIMIT=25] Services settings screen, setting option name for the user to go to the screen to view app storage use 
         */
        public: static const int storageuse_settings_title = 0x7f0a04d2;
        /**  UI debug setting: always enable strict mode? [CHAR LIMIT=25] 
         */
        public: static const int strict_mode = 0x7f0a076b;
        /**  UI debug setting: show strict mode summary [CHAR LIMIT=50] 
         */
        public: static const int strict_mode_summary = 0x7f0a076c;
        /**  mobile network settings screen, setting option summary text 
         */
        public: static const int sum_carrier_select = 0x7f0a0116;
        /**  [CHAR LIMIT=40] General divider text when concatenating multiple items in a text summary 
         */
        public: static const int summary_divider_text = 0x7f0a0937;
        /**  Sound & display settings screen, setting option summary displaying the currently selected font size 
         */
        public: static const int summary_font_size = 0x7f0a0334;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
        Label on Wifi Status screen
         */
        public: static const int supplicant_state_label = 0x7f0a02d5;
        public: static const int switch_off_text = 0x7f0a094e;
        /**  Switch On/Off  
         */
        public: static const int switch_on_text = 0x7f0a094d;
        /**  Animation description for the sync active icon. 
         */
        public: static const int sync_active = 0x7f0a072a;
        /**  Title for a checkbox that enables data synchronization in the account and sync screen [CHAR LIMIT=35] 
         */
        public: static const int sync_automatically = 0x7f0a0734;
        /**  Data synchronization settings screen, checkbox setting option name. Controls whether Calendar shoudl be synced. 
         */
        public: static const int sync_calendar = 0x7f0a0740;
        /**  Data synchronization settings screen, checkbox setting option name 
         */
        public: static const int sync_contacts = 0x7f0a0741;
        /**  Sync status shown when sync is disabled [CHAR LIMIT=25] 
         */
        public: static const int sync_disabled = 0x7f0a0736;
        /**  Sync status shown when sync is enabled [CHAR LIMIT=25] 
         */
        public: static const int sync_enabled = 0x7f0a0735;
        /**  Sync status shown when last sync resulted in an error [CHAR LIMIT=25] 
         */
        public: static const int sync_error = 0x7f0a0737;
        /**  Image description for the sync failed icon. 
         */
        public: static const int sync_failed = 0x7f0a0729;
        /**  Data synchronization settings screen, checkbox setting option name. Controls whether Gmail should be synced.  Should use "Gmail" to refer to this app.
         */
        public: static const int sync_gmail = 0x7f0a073f;
        /**  Sync status shown when sync is disabled [CHAR LIMIT=30] 
         */
        public: static const int sync_in_progress = 0x7f0a0739;
        /**  Message when sync is currently failing [CHAR LIMIT=100] 
         */
        public: static const int sync_is_failing = 0x7f0a072c;
        /**  Formatter in AccountSyncSettings for each application we wish to synchronize, e.g. "Sync Calendar" 
         */
        public: static const int sync_item_title = 0x7f0a074e;
        /**  Data synchronization settings screen, menu option 
         */
        public: static const int sync_menu_sync_cancel = 0x7f0a073d;
        /**  Data synchronization settings screen, menu option 
         */
        public: static const int sync_menu_sync_now = 0x7f0a073c;
        /**  Data synchronization settings screen, summary of a sync provider (for example, Gmail) when autosync is off and the user wants to do a one-time sync. 
         */
        public: static const int sync_one_time_sync = 0x7f0a073e;
        /**  Message introducing the user to Google Sync. 
         */
        public: static const int sync_plug = 0x7f0a0742;
        public: static const int system_package = 0x7f0a04c2;
        /**  About phone screen, list item summary.  Takes the user to the screen for seeing and installing system updates. [CHAR LIMIT=40] 
         */
        public: static const int system_update_settings_list_item_summary = 0x7f0a0351;
        /**  About phone screen, list item title.  Takes the user to the screen for seeing and installing system updates. [CHAR LIMIT=40] 
         */
        public: static const int system_update_settings_list_item_title = 0x7f0a0350;
        /**  About phone settings screen, setting option name to see terms and conditions 
         */
        public: static const int terms_title = 0x7f0a042d;
        /**  This is for diagnostics screen. The title of a screen with various items realted to launching screens that will giev the user info. For example, it contains "Phone information" and "Battery information" 
         */
        public: static const int testing = 0x7f0a052c;
        /**  In the Testing screen. The item title of the activity that shows a bunch of battery-related information.  
         */
        public: static const int testing_battery_info = 0x7f0a052e;
        /**  In the Testing screen.  The item title of the activity that shows a bunch of phone-related information.  
         */
        public: static const int testing_phone_info = 0x7f0a052d;
        /**  Do not translate. In the Testing screen. The item title of the activity that shows a bunch of SIM-related operations.  
         */
        public: static const int testing_sim_toolkit = 0x7f0a052f;
        /**  In the Testing screen. The item title of the activity that shows usage statistics.  
         */
        public: static const int testing_usage_stats = 0x7f0a0584;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Wi-Fi Testing on the diagnostic screen
         */
        public: static const int testing_wifi_info = 0x7f0a02ca;
        /**  Tethering controls, item title to go into the tethering settings when USB, Bluetooth and Wifi tethering are available [CHAR LIMIT=25]
         */
        public: static const int tether_settings_title_all = 0x7f0a03ea;
        /**  Tethering controls, item title to go into the tethering settings when only Bluetooth tethering is available [CHAR LIMIT=25]
         */
        public: static const int tether_settings_title_bluetooth = 0x7f0a03e8;
        /**  Tethering controls, item title to go into the tethering settings 
 Tethering controls, item title to go into the tethering settings when only USB tethering is available [CHAR LIMIT=25]
         */
        public: static const int tether_settings_title_usb = 0x7f0a03e6;
        /**  Tethering controls, item title to go into the tethering settings when USB and Bluetooth tethering are available [CHAR LIMIT=25]
         */
        public: static const int tether_settings_title_usb_bluetooth = 0x7f0a03e9;
        /**  Tethering controls, item title to go into the tethering settings when only Wifi tethering is available [CHAR LIMIT=25]
         */
        public: static const int tether_settings_title_wifi = 0x7f0a03e7;
        /**  Tethering help button - calls up a web view with general tethering info 
         */
        public: static const int tethering_help_button_text = 0x7f0a03fc;
        /**  Error message for users that aren't allowed to modify Tethering settings [CHAR LIMIT=none] 
         */
        public: static const int tethering_settings_not_available = 0x7f0a0550;
        /**  Title string shown above TimePicker, letting a user select system time
         [CHAR LIMIT=20] 
         */
        public: static const int time_picker_title = 0x7f0a012d;
        /**  Do not translate. This is a stub which will be removed soon. 
         */
        public: static const int time_zone_auto_stub = 0x7f0a0724;
        /**  [CHAR LIMIT=30] Sound & display settings screen, setting option name to change font size 
         */
        public: static const int title_font_size = 0x7f0a0333;
        /**  Manage applications, individual application info screen,label under Storage heading.  The total storage space taken up by this app. 
         */
        public: static const int total_size_label = 0x7f0a0479;
        /**  Sound & notification > Other sounds: Title for the option enabling touch sounds. [CHAR LIMIT=30] 
         */
        public: static const int touch_sounds_title = 0x7f0a0913;
        /**  UI debug setting: profile time taken by hardware acceleration to render apps [CHAR LIMIT=25] 
         */
        public: static const int track_frame_time = 0x7f0a078b;
        /**  UI debug setting: scaling factor for transition animations [CHAR LIMIT=25] 
         */
        public: static const int transition_animation_scale_title = 0x7f0a078d;
        /**  Title of preference to display trusted credentials (aka CA certificates) [CHAR LIMIT=30] 
         */
        public: static const int trusted_credentials = 0x7f0a06c6;
        /**  Alert dialog confirmation when disabling a system CA certificate. 
         */
        public: static const int trusted_credentials_disable_confirmation = 0x7f0a0812;
        /**  Button label for disabling a system CA certificate. 
         */
        public: static const int trusted_credentials_disable_label = 0x7f0a080e;
        /**  Alert dialog confirmation when enabling a system CA certificate. 
         */
        public: static const int trusted_credentials_enable_confirmation = 0x7f0a0811;
        /**  Button label for enabling a system CA certificate. 
         */
        public: static const int trusted_credentials_enable_label = 0x7f0a080f;
        /**  Alert dialog confirmation when removing a user CA certificate. 
         */
        public: static const int trusted_credentials_remove_confirmation = 0x7f0a0813;
        /**  Button label for removing a user CA certificate. 
         */
        public: static const int trusted_credentials_remove_label = 0x7f0a0810;
        /**  Summary of preference to display trusted credentials (aka CA certificates) [CHAR LIMIT=NONE] 
         */
        public: static const int trusted_credentials_summary = 0x7f0a06c7;
        /**  Tab label for built-in system CA certificates. 
         */
        public: static const int trusted_credentials_system_tab = 0x7f0a080c;
        /**  Tab label for user added CA certificates. 
         */
        public: static const int trusted_credentials_user_tab = 0x7f0a080d;
        /**  This is displayed when the password is entered incorrectly 
         */
        public: static const int try_again = 0x7f0a0756;
        /**  On main TTS Settings screen, summary for when required speech synthesis data alrady installed on SD card 
         */
        public: static const int tts_data_installed_summary = 0x7f0a0692;
        /**  On main TTS Settings screen, summary for default language for synthesized voice 
         */
        public: static const int tts_default_lang_summary = 0x7f0a068d;
        /**  On main TTS Settings screen, in default settings section, setting default language for synthesized voice 
         */
        public: static const int tts_default_lang_title = 0x7f0a068a;
        /**  On main TTS Settings screen, summary for default pitch for synthesized voice 
         */
        public: static const int tts_default_pitch_summary = 0x7f0a0689;
        /**  On main TTS Settings screen, in default settings section, setting default pitch for synthesized voice 
         */
        public: static const int tts_default_pitch_title = 0x7f0a0688;
        /**  On main TTS Settings screen, summary for default speech rate for synthesized voice 
         */
        public: static const int tts_default_rate_summary = 0x7f0a0687;
        /**  On main TTS Settings screen, in default settings section, setting default speech rate for synthesized voice 
         */
        public: static const int tts_default_rate_title = 0x7f0a0686;
        /**  Text spoken by the TTS engine as an example if the engine doesn't provide sample text [CHAR LIMIT=100] 
         */
        public: static const int tts_default_sample_string = 0x7f0a0699;
        /**  On main TTS Settings screen, section header for default TTS settings 
         */
        public: static const int tts_default_settings_section = 0x7f0a0683;
        /**  On main TTS Settings screen, summary for default synthesis engine for synthesized voice 
         */
        public: static const int tts_default_synth_summary = 0x7f0a0685;
        /**  On main TTS Settings screen, in default settings section, setting default synthesis engine for synthesized voice 
         */
        public: static const int tts_default_synth_title = 0x7f0a0684;
        /**  Error screen when a selected TTS engine can't run because it's missing components 
         */
        public: static const int tts_engine_error = 0x7f0a0694;
        /**  Button text for error screen when a selected TTS engine can't run because it's missing components 
         */
        public: static const int tts_engine_error_config = 0x7f0a0695;
        /**  Button text for error screen when a selected TTS engine can't run because it's missing components 
         */
        public: static const int tts_engine_error_reselect = 0x7f0a0696;
        /**  On main TTS Settings screen, text preceded by the TTS engine name to indicate the engine cannot be used by the user 
         */
        public: static const int tts_engine_name_is_disabled_summary = 0x7f0a06a2;
        /**  On main TTS Settings screen, text preceded by the TTS engine name to indicate the engine can be used by the user 
         */
        public: static const int tts_engine_name_is_enabled_summary = 0x7f0a06a1;
        /**  On main TTS Settings screen, text preceded by the TTS engine name, clicking this button will launch the engine settings 
         */
        public: static const int tts_engine_name_settings = 0x7f0a06a0;
        /**  Warning message about required internet conectivity for TTS synthesis, displayed as a dialog
         message when the user selects to play an example for network only locale and there's no internet connectivity. 
         */
        public: static const int tts_engine_network_required = 0x7f0a0698;
        /**  [CHAR LIMIT=50] The text for the settings section that users to set a
         preferred text to speech engine 
         */
        public: static const int tts_engine_preference_section_title = 0x7f0a06ad;
        /**  Warning message about security implications of enabling a TTS engine, displayed as a dialog
         message when the user selects to enable an engine. 
         */
        public: static const int tts_engine_security_warning = 0x7f0a0697;
        /**  [CHAR LIMIT=150] Text for screen readers / accessibility programs for
         the image that launches the TTS engine settings when clicked. 
         */
        public: static const int tts_engine_settings_button = 0x7f0a06ac;
        /**  On the main TTS settings screen, text for a divider under which
         the engine specific settings and the "engine install data" option
         are listed [CHAR LIMIT=30]
         */
        public: static const int tts_engine_settings_section = 0x7f0a06a3;
        /**  Title for a preference in the main TTS settings screen, which
         launches the settings screen for a given TTS engine when clicked
         [CHAR LIMIT=30]
         */
        public: static const int tts_engine_settings_title = 0x7f0a06a4;
        /**  On main TTS Settings screen, text for divider under which all TTS engines are listed 
         */
        public: static const int tts_engines_section = 0x7f0a069f;
        /**  [CHAR LIMIT=50] Title of the settings section that displays general preferences
         that are applicable to all engines, such as the speech rate 
         */
        public: static const int tts_general_section_title = 0x7f0a06ae;
        /**  On main TTS Settings screen, summary for click to install required speech synthesis data 
         */
        public: static const int tts_install_data_summary = 0x7f0a0691;
        /**  On main TTS Settings screen, click to install required speech synthesis data 
         */
        public: static const int tts_install_data_title = 0x7f0a0690;
        /**  On main TTS Settings screen, language summary if it can't default to system language [CHAR LIMIT=50] 
         */
        public: static const int tts_lang_not_selected = 0x7f0a068c;
        /**  Entry in the TTS engine language/locale picker, when selected will try to default to the system language [CHAR LIMIT=50] 
         */
        public: static const int tts_lang_use_system = 0x7f0a068b;
        /**  [CHAR LIMIT=30] Notification message that appears after the user has installed a new TTS engine,
         to warn the user that this engine cannot be used before the checkbox for that engine
         in TTS settings is checked. 
         */
        public: static const int tts_notif_engine_install_message = 0x7f0a06ab;
        /**  [CHAR LIMIT=33] Notification title that appears when the installation of a new TTS engine completed 
         */
        public: static const int tts_notif_engine_install_title = 0x7f0a06aa;
        /**  On main TTS Settings screen, summary for triggering playback of an example of speech synthesis 
         */
        public: static const int tts_play_example_summary = 0x7f0a068f;
        /**  On main TTS Settings screen, triggers playback of an example of speech synthesis 
         */
        public: static const int tts_play_example_title = 0x7f0a068e;
        /**  Name of the TTS package as listed by the package manager. 
         */
        public: static const int tts_settings = 0x7f0a067f;
        /**  Text spoken by the TTS engine when TTS settings (other than language) have been changed 
         */
        public: static const int tts_settings_changed_demo = 0x7f0a0693;
        /**  TTS option item name in the main settings screen 
         */
        public: static const int tts_settings_title = 0x7f0a0680;
        /**  On main TTS Settings screen, current TTS engine status for the current default language,
         tts engine is queried for status [CHAR LIMIT=150] 
         */
        public: static const int tts_status_checking = 0x7f0a069e;
        /**  On main TTS Settings screen, current TTS engine status for the current default language,
         selected language is not supported by the engine [CHAR LIMIT=150] 
         */
        public: static const int tts_status_not_supported = 0x7f0a069d;
        /**  On main TTS Settings screen, current TTS engine status for the current default language,
         selected language is fully supported by the engine [CHAR LIMIT=150]
         */
        public: static const int tts_status_ok = 0x7f0a069b;
        /**  On main TTS Settings screen, current TTS engine status for the current default language,
         selected language is supported by the engine only if there's a working network connection [CHAR LIMIT=150] 
         */
        public: static const int tts_status_requires_network = 0x7f0a069c;
        /**  On main TTS Settings screen, title of a field explaining current TTS engine status for
         current default language [CHAR LIMIT=50] 
         */
        public: static const int tts_status_title = 0x7f0a069a;
        /**  Phone Info screen. Button label to turn off the radio . Only shown in diagnostic screen, so precise translation is not needed. 
         */
        public: static const int turn_off_radio = 0x7f0a0015;
        /**  Phone info 
 Phone Info screen. Button label to turn on the radio . Only shown in diagnostic screen, so precise translation is not needed. 
         */
        public: static const int turn_on_radio = 0x7f0a0014;
        /**  Manage applications, individual application info screen, menu item to uninstall an application for all users. 
         */
        public: static const int uninstall_all_users_text = 0x7f0a047f;
        /**  Manage applications, individual application info screen, button label under Storage heading. Button to remove the application from the system. 
         */
        public: static const int uninstall_text = 0x7f0a047e;
        /**  Manage apps, individual app screen, substituted for the application's label when the app's label CAN NOT be determined.
         */
        public: static const int unknown = 0x7f0a048c;
        /**  Info explaining the backup lock which is used for facelock 
         */
        public: static const int unlock_backup_info_summary = 0x7f0a0162;
        /**  Title shown on security settings to allow the user to change their lockscreen password [CHAR LIMIT=22]
         */
        public: static const int unlock_change_lock_password_title = 0x7f0a017c;
        /**  Title shown on security settings to allow the user to change their lockscreen pattern [CHAR LIMIT=22] 
         */
        public: static const int unlock_change_lock_pattern_title = 0x7f0a017a;
        /**  Title shown on security settings to allow the user to change their lockscreen PIN [CHAR LIMIT=22] 
         */
        public: static const int unlock_change_lock_pin_title = 0x7f0a017b;
        /**  Summary shown under unlock_disable_lock_title when password is in use and can be removed [CHAR LIMIT=45]
         */
        public: static const int unlock_disable_lock_password_summary = 0x7f0a0179;
        /**  Summary shown under unlock_disable_lock_title when pattern is in use and can be removed [CHAR LIMIT=45] 
         */
        public: static const int unlock_disable_lock_pattern_summary = 0x7f0a0177;
        /**  Summary shown under unlock_disable_lock_title when PIN is in use and can be removed [CHAR LIMIT=45]
         */
        public: static const int unlock_disable_lock_pin_summary = 0x7f0a0178;
        /**  Title for option to turn of password/pin/pattern unlock. [CHAR LIMIT=22] 
         */
        public: static const int unlock_disable_lock_title = 0x7f0a0176;
        /**  Summary for preference that disables unlock security [CHAR LIMIT=45]
         */
        public: static const int unlock_set_unlock_biometric_weak_summary = 0x7f0a0168;
        /**  Title for preference that guides the user through a weak biometric lock [CHAR LIMIT=22] 
         */
        public: static const int unlock_set_unlock_biometric_weak_title = 0x7f0a0167;
        /**  Summary for preference that has been disabled by because of the DevicePolicyAdmin, or because device encryption is enabled, or because there are credentials in the credential storage [CHAR LIMIT=50] 
         */
        public: static const int unlock_set_unlock_disabled_summary = 0x7f0a016f;
        /**   Summary for PreferenceScreen to changeecurity method: None/Pattern/PIN/Password [CHAR LIMIT=45]  
         */
        public: static const int unlock_set_unlock_launch_picker_change_summary = 0x7f0a0160;
        /**   Title for PreferenceScreen to change security method: None/Pattern/PIN/Password [CHAR LIMIT=22] 
         */
        public: static const int unlock_set_unlock_launch_picker_change_title = 0x7f0a015f;
        /**   Summary for PreferenceScreen to changeecurity method: None/Pattern/PIN/Password [CHAR LIMIT=45]  
         */
        public: static const int unlock_set_unlock_launch_picker_enable_summary = 0x7f0a0161;
        /**   Title for PreferenceScreen to launch picker for security method when there is none [CHAR LIMIT=22] 
         */
        public: static const int unlock_set_unlock_launch_picker_title = 0x7f0a015e;
        /**  Summary for "Configure lockscreen" when security biometric weak is enabled [CHAR LIMIT=45] 
         */
        public: static const int unlock_set_unlock_mode_biometric_weak = 0x7f0a0172;
        /**  Summary for "Configure lockscreen" when security is disabled [CHAR LIMIT=45] 
         */
        public: static const int unlock_set_unlock_mode_none = 0x7f0a0171;
        /**  Summary for "Configure lockscreen" when lock screen is off [CHAR LIMIT=45] 
         */
        public: static const int unlock_set_unlock_mode_off = 0x7f0a0170;
        /**  Summary for "Configure lockscreen" when security password is enabled [CHAR LIMIT=45] 
         */
        public: static const int unlock_set_unlock_mode_password = 0x7f0a0175;
        /**  Summary for "Configure lockscreen" when security pattern is enabled [CHAR LIMIT=45] 
         */
        public: static const int unlock_set_unlock_mode_pattern = 0x7f0a0173;
        /**  Summary for "Configure lockscreen" when security PIN is enabled [CHAR LIMIT=45] 
         */
        public: static const int unlock_set_unlock_mode_pin = 0x7f0a0174;
        /**  Summary for preference that disables unlock security [CHAR LIMIT=45]
         */
        public: static const int unlock_set_unlock_none_summary = 0x7f0a0166;
        /**  Title for preference that disables unlock security [CHAR LIMIT=22] 
         */
        public: static const int unlock_set_unlock_none_title = 0x7f0a0165;
        /**  Summary for preference that disables unlock security [CHAR LIMIT=45] 
         */
        public: static const int unlock_set_unlock_off_summary = 0x7f0a0164;
        /**  Title for preference that disables unlock security [CHAR LIMIT=22] 
         */
        public: static const int unlock_set_unlock_off_title = 0x7f0a0163;
        /**  Title for preference that guides the user through creating an unlock password [CHAR LIMIT=45] 
         */
        public: static const int unlock_set_unlock_password_summary = 0x7f0a016e;
        /**  Title for preference that guides the user through creating an unlock password [CHAR LIMIT=22] 
         */
        public: static const int unlock_set_unlock_password_title = 0x7f0a016d;
        /**  Summary for preference that guides the user through creating an unlock pattern [CHAR LIMIT=45] 
         */
        public: static const int unlock_set_unlock_pattern_summary = 0x7f0a016a;
        /**  Title for preference that guides the user through creating an unlock pattern [CHAR LIMIT=22]
         */
        public: static const int unlock_set_unlock_pattern_title = 0x7f0a0169;
        /**  Summary for preference that guides the user through creating an unlock PIN (Personal Identification Number) [CHAR LIMIT=45] 
         */
        public: static const int unlock_set_unlock_pin_summary = 0x7f0a016c;
        /**  Title for preference that guides the user through creating an unlock PIN (Personal Identification Number) [CHAR LIMIT=22] 
         */
        public: static const int unlock_set_unlock_pin_title = 0x7f0a016b;
        /**  SD card unmount informative text   [CHAR LIMIT=NONE] 
         */
        public: static const int unmount_inform_text = 0x7f0a0390;
        /**  Name to assign to a Network Access Point that was saved without a name 
         */
        public: static const int untitled_apn = 0x7f0a0703;
        /**  Title of Usage Access preference item [CHAR LIMIT=30] 
         */
        public: static const int usage_access_title = 0x7f0a06db;
        /**  Application name and battery usage percentage 
         */
        public: static const int usage_name_percent = 0x7f0a060e;
        /**  XXX remove? Strings used for displaying usage statistics 
         */
        public: static const int usage_stats_label = 0x7f0a0583;
        /**  label for usage time 
         */
        public: static const int usage_time_label = 0x7f0a0588;
        /**  [CHAR_LIMIT=NONE] Label for amount of power use that was actually observed (though
         the change in battery level) 
         */
        public: static const int usage_type_actual_power = 0x7f0a062e;
        /**  Label for Audio usage time 
         */
        public: static const int usage_type_audio = 0x7f0a0628;
        /**  [CHAR_LIMIT=NONE] Label for amount of power use that was computed 
         */
        public: static const int usage_type_computed_power = 0x7f0a062d;
        /**  Label for CPU usage time 
         */
        public: static const int usage_type_cpu = 0x7f0a061d;
        /**  Label for CPU usage in foreground 
         */
        public: static const int usage_type_cpu_foreground = 0x7f0a061e;
        /**  Label for mobile network data received [CHAR LIMIT=32] 
         */
        public: static const int usage_type_data_recv = 0x7f0a0624;
        /**  Label for mobile network data sent [CHAR LIMIT=32] 
         */
        public: static const int usage_type_data_send = 0x7f0a0623;
        /**  Label for Wi-Fi network data received [CHAR LIMIT=32] 
         */
        public: static const int usage_type_data_wifi_recv = 0x7f0a0627;
        /**  Label for Wi-Fi network data sent [CHAR LIMIT=32] 
         */
        public: static const int usage_type_data_wifi_send = 0x7f0a0626;
        /**  Label for GPS usage time 
         */
        public: static const int usage_type_gps = 0x7f0a0620;
        /**  Label for time that there was no cell coverage 
         */
        public: static const int usage_type_no_coverage = 0x7f0a062b;
        /**  Label for time that a feature has been on 
         */
        public: static const int usage_type_on_time = 0x7f0a062a;
        /**  Label for Phone usage time 
         */
        public: static const int usage_type_phone = 0x7f0a0622;
        /**  Label for mobile network radio active time [CHAR LIMIT=32] 
         */
        public: static const int usage_type_radio_active = 0x7f0a0625;
        /**  Label for the total power capacity of the device's battery 
         */
        public: static const int usage_type_total_battery_capacity = 0x7f0a062c;
        /**  Label for Video usage time 
         */
        public: static const int usage_type_video = 0x7f0a0629;
        /**  [CHAR LIMIT=25] Label for keeping device from sleeping 
         */
        public: static const int usage_type_wake_lock = 0x7f0a061f;
        /**  [CHAR LIMIT=25] Label for WIFI usage time 
         */
        public: static const int usage_type_wifi_running = 0x7f0a0621;
        /**  UI debug setting: disable USB audio routing title [CHAR LIMIT=32] 
         */
        public: static const int usb_audio_disable_routing = 0x7f0a077e;
        /**  UI debug setting: disable USB audio routing summary [CHAR LIMIT=50] 
         */
        public: static const int usb_audio_disable_routing_summary = 0x7f0a077f;
        /**  Storage setting.  USB connection category [CHAR LIMIT=30]
         */
        public: static const int usb_connection_category = 0x7f0a0397;
        /**  Storage setting.  Summary for PTP checkbox [CHAR LIMIT=NONE]
         */
        public: static const int usb_label_installer_cd = 0x7f0a039c;
        /**  Storage setting.  Summary for MTP checkbox [CHAR LIMIT=NONE]
         */
        public: static const int usb_mtp_summary = 0x7f0a0399;
        /**  Storage setting.  Title for MTP checkbox [CHAR LIMIT=30]
         */
        public: static const int usb_mtp_title = 0x7f0a0398;
        /**  Storage setting.  Label for installer CD [CHAR LIMIT=30]
         */
        public: static const int usb_ptp_summary = 0x7f0a039b;
        /**  Storage setting.  Title for PTP checkbox [CHAR LIMIT=30]
         */
        public: static const int usb_ptp_title = 0x7f0a039a;
        /**  USB tethered subtext - shown when USB is connected and being tethered 
         */
        public: static const int usb_tethering_active_subtext = 0x7f0a03ee;
        /**  USB available subtext - shown when USB is connected but not currently being tethered 
         */
        public: static const int usb_tethering_available_subtext = 0x7f0a03ed;
        public: static const int usb_tethering_button_text = 0x7f0a03ec;
        /**  USB errored subtext - shown when USB is broken for some reason 
         */
        public: static const int usb_tethering_errored_subtext = 0x7f0a03f2;
        /**  USB storage subtext - shown when tethering is disabled because USB storage is active 
         */
        public: static const int usb_tethering_storage_active_subtext = 0x7f0a03ef;
        /**  USB unavailable subtext - shown when USB is not connected 
         */
        public: static const int usb_tethering_turnon_subtext = 0x7f0a03f1;
        /**  USB unavailable subtext - shown when USB is not connected 
         */
        public: static const int usb_tethering_unavailable_subtext = 0x7f0a03f0;
        /**  USB Tethering options 
         */
        public: static const int usb_title = 0x7f0a03eb;
        /**  On main TTS Settings screen, summary for toggle used to force use of default TTS settings 
         */
        public: static const int use_default_tts_settings_summary = 0x7f0a0682;
        /**  On main TTS Settings screen, title for toggle used to force use of default TTS settings 
         */
        public: static const int use_default_tts_settings_title = 0x7f0a0681;
        /**  [CHAR_LIMIT=100] Security & location settings screen, setting check box summary for Google search 
         */
        public: static const int use_location_summary = 0x7f0a0422;
        /**  [CHAR_LIMIT=30] Security & location settings screen, setting check box label for Google search 
         */
        public: static const int use_location_title = 0x7f0a0421;
        /**  UI debug setting: force use of NuPlayer [CHAR LIMIT=25] 
         */
        public: static const int use_nuplayer = 0x7f0a077c;
        /**  UI debug setting: force use of NuPlayer summary [CHAR LIMIT=50] 
         */
        public: static const int use_nuplayer_summary = 0x7f0a077d;
        /**  Title for settings whether or not the framework will select input methods in an IME based on the current system locale. [CHAR LIMIT=35] 
         */
        public: static const int use_system_language_to_select_input_method_subtypes = 0x7f0a0546;
        /**  User account title [CHAR LIMIT=30] 
         */
        public: static const int user_account_title = 0x7f0a0884;
        /**  User menu to allow creating new users from lockscreen [CHAR LIMIT=30] 
         */
        public: static const int user_add_on_lockscreen_menu = 0x7f0a0842;
        /**  Summary for add restricted profile entry in the choice dialog [CHAR LIMIT=none] 
         */
        public: static const int user_add_profile_item_summary = 0x7f0a0834;
        /**  Button text for adding a restricted profile [CHAR LIMIT=25] 
         */
        public: static const int user_add_profile_item_title = 0x7f0a0836;
        /**  Summary for add user entry in the choice dialog [CHAR LIMIT=none] 
         */
        public: static const int user_add_user_item_summary = 0x7f0a0833;
        /**  Button text for adding a regular user [CHAR LIMIT=25] 
         */
        public: static const int user_add_user_item_title = 0x7f0a0835;
        /**  User settings add user menu [CHAR LIMIT=35] 
         */
        public: static const int user_add_user_menu = 0x7f0a0827;
        /**  Message for add user confirmation dialog - long version. [CHAR LIMIT=none] 
         */
        public: static const int user_add_user_message_long = 0x7f0a0838;
        /**  Message for add user confirmation dialog - short version. [CHAR LIMIT=none] 
         */
        public: static const int user_add_user_message_short = 0x7f0a0839;
        /**  User settings add user or restricted profile menu [CHAR LIMIT=35] 
         */
        public: static const int user_add_user_or_profile_menu = 0x7f0a0826;
        /**  Title for add user confirmation dialog [CHAR LIMIT=30] 
         */
        public: static const int user_add_user_title = 0x7f0a0837;
        /**  Title for add user type dialog [CHAR LIMIT=45] 
         */
        public: static const int user_add_user_type_title = 0x7f0a0832;
        /**  Setting label to show that a new user is being added [CHAR LIMIT=30] 
         */
        public: static const int user_adding_new_user = 0x7f0a084d;
        /**  Message to limited users that they cannot add accounts [CHAR LIMIT=100] 
         */
        public: static const int user_cannot_add_accounts_message = 0x7f0a0840;
        /**  Message to secondary users that only owner can manage users [CHAR LIMIT=none] 
         */
        public: static const int user_cannot_manage_message = 0x7f0a083f;
        /**  User removal confirmation message [CHAR LIMIT=none] 
         */
        public: static const int user_confirm_remove_message = 0x7f0a084a;
        /**  User (self) removal confirmation message [CHAR LIMIT=none] 
         */
        public: static const int user_confirm_remove_self_message = 0x7f0a0849;
        /**  User (self) removal confirmation title [CHAR LIMIT=30] 
         */
        public: static const int user_confirm_remove_self_title = 0x7f0a0845;
        /**  User removal confirmation title [CHAR LIMIT=25] 
         */
        public: static const int user_confirm_remove_title = 0x7f0a0846;
        /**  Delete button text [CHAR LIMIT=25] 
         */
        public: static const int user_delete_button = 0x7f0a084f;
        /**  Spoken content description for delete icon beside a user [CHAR LIMIT=none] 
         */
        public: static const int user_delete_user_description = 0x7f0a084e;
        /**  User dictionary settings. Text on the dialog button to confirm adding a word. [CHAR LIMIT=15] 
         */
        public: static const int user_dict_settings_add_dialog_confirm = 0x7f0a0520;
        /**  User dictionary settings. Text on the dialog button mask advanced options. [CHAR LIMIT=15] 
         */
        public: static const int user_dict_settings_add_dialog_less_options = 0x7f0a051f;
        /**  User dictionary settings. Text on the dialog button to pop more options for adding a word. [CHAR LIMIT=16] 
         */
        public: static const int user_dict_settings_add_dialog_more_options = 0x7f0a051e;
        /**  User dictionary settings. The title of the dialog to add a new word to the user dictionary. [CHAR LIMIT=25] 
         */
        public: static const int user_dict_settings_add_dialog_title = 0x7f0a051c;
        /**  User dictionary settings. Label to put before the language field. [CHAR LIMIT=20] 
         */
        public: static const int user_dict_settings_add_locale_option_name = 0x7f0a0523;
        /**  User dictionary settings. The title of the menu item to add a new word to the user dictionary. 
         */
        public: static const int user_dict_settings_add_menu_title = 0x7f0a051b;
        /**  User dictionary settings. The title of the screen to add/edit a new word to the user dictionary; it describes the phrase that will be added to the user dictionary. [CHAR LIMIT=25] 
         */
        public: static const int user_dict_settings_add_screen_title = 0x7f0a051d;
        /**  User dictionary settings. Hint for the text field to type the optional shortcut to add to the user dictionary. [CHAR LIMIT=35] 
         */
        public: static const int user_dict_settings_add_shortcut_hint = 0x7f0a0525;
        /**  User dictionary settings. Label to put before the shortcut field (once a shortcut is registered, the user can type the shortcut and get the word it points to in the suggestions). [CHAR LIMIT=20] 
         */
        public: static const int user_dict_settings_add_shortcut_option_name = 0x7f0a0522;
        /**  User dictionary settings. Hint for the text field to type the word to add to the user dictionary. [CHAR LIMIT=35] 
         */
        public: static const int user_dict_settings_add_word_hint = 0x7f0a0524;
        /**  User dictionary settings. Label to put before the word field (that's the word that will actually be added to the user dictionary when OK is pressed). [CHAR LIMIT=20] 
         */
        public: static const int user_dict_settings_add_word_option_name = 0x7f0a0521;
        /**  User dictionary settings. The list item to choose to insert a word into the user dictionary for all languages 
         */
        public: static const int user_dict_settings_all_languages = 0x7f0a052a;
        /**  User dictionary settings. The title of the context menu item to delete the current word 
         */
        public: static const int user_dict_settings_context_menu_delete_title = 0x7f0a0528;
        /**  User dictionary settings. The title of the context menu item to edit the current word 
         */
        public: static const int user_dict_settings_context_menu_edit_title = 0x7f0a0527;
        /**  User dictionary settings. The title of the dialog to edit an existing word in the user dictionary. 
         */
        public: static const int user_dict_settings_edit_dialog_title = 0x7f0a0526;
        /**  User dictionary settings. The text to show when there are no user-defined words in the dictionary  [CHAR LIMIT=200] 
         */
        public: static const int user_dict_settings_empty_text = 0x7f0a0529;
        /**  User dictionary settings. The text to show for the option that shows the entire list of supported locales to choose one [CHAR LIMIT=30] 
         */
        public: static const int user_dict_settings_more_languages = 0x7f0a052b;
        /**  User dictionary settings.  The summary of the list item to go into the Personal dictionary settings screen. 
         */
        public: static const int user_dict_settings_summary = 0x7f0a051a;
        /**  User dictionary settings. The title of the list item to go into the Personal dictionary settings screen. [CHAR LIMIT=35] 
         */
        public: static const int user_dict_settings_title = 0x7f0a0519;
        /**  Title of preference to enable calling[CHAR LIMIT=40] 
         */
        public: static const int user_enable_calling = 0x7f0a0855;
        /**  Message for confirmation of turning on calls [CHAR LIMIT=none] 
         */
        public: static const int user_enable_calling_confirm_message = 0x7f0a0859;
        /**  Title for confirmation of turning on calls [CHAR LIMIT=40] 
         */
        public: static const int user_enable_calling_confirm_title = 0x7f0a0858;
        /**  Title of preference to enable calling and SMS [CHAR LIMIT=45] 
         */
        public: static const int user_enable_calling_sms = 0x7f0a0856;
        /**  Message for confirmation of turning on calls and SMS [CHAR LIMIT=none] 
         */
        public: static const int user_enable_calling_sms_confirm_message = 0x7f0a085b;
        /**  Title for confirmation of turning on calls and SMS [CHAR LIMIT=45] 
         */
        public: static const int user_enable_calling_sms_confirm_title = 0x7f0a085a;
        /**  Message to user to confirm exiting guest. [CHAR LIMIT=none] 
         */
        public: static const int user_exit_guest_confirm_message = 0x7f0a0853;
        /**  Title of dialog to user to confirm exiting guest. [CHAR LIMIT=50] 
         */
        public: static const int user_exit_guest_confirm_title = 0x7f0a0852;
        /**  Label for button in confirmation dialog when exiting guest session [CHAR LIMIT=35] 
         */
        public: static const int user_exit_guest_dialog_remove = 0x7f0a0854;
        /**  Label for item to exit guest mode [CHAR LIMIT=35] 
         */
        public: static const int user_exit_guest_title = 0x7f0a0851;
        /**  Title for Guest user [CHAR LIMIT=35] 
         */
        public: static const int user_guest = 0x7f0a0850;
        /**  An option in a photo selection dialog, if there is no photo yet [CHAR LIMIT=50] 
         */
        public: static const int user_image_choose_photo = 0x7f0a08ac;
        /**  Accessibility message for the photo selector which is a button/popup with the current photo [CHAR LIMIT=50] 
         */
        public: static const int user_image_photo_selector = 0x7f0a08ad;
        /**  An option in a photo selection dialog, if there is no photo yet [CHAR LIMIT=50] 
         */
        public: static const int user_image_take_photo = 0x7f0a08ab;
        /**  Text shown for title of user info setting [CHAR LIMIT=20]
         */
        public: static const int user_info_settings_title = 0x7f0a013b;
        /**  User settings header for list of users and profiles [CHAR LIMIT=40] 
         */
        public: static const int user_list_title = 0x7f0a0825;
        /**  User settings warning that restricted profile needs a screen lock [CHAR LIMIT=NONE] 
         */
        public: static const int user_need_lock_message = 0x7f0a082a;
        /**  User details new restricted profile name [CHAR LIMIT=30] 
         */
        public: static const int user_new_profile_name = 0x7f0a0844;
        /**  User details new user name [CHAR LIMIT=30] 
         */
        public: static const int user_new_user_name = 0x7f0a0843;
        /**  Title for the preference to enter the nickname of the userto display in the user switcher [CHAR LIMIT=25]
         */
        public: static const int user_nickname = 0x7f0a0831;
        /**  User information string to represent the owner of the device [CHAR LIMIT=25] 
         */
        public: static const int user_owner = 0x7f0a082f;
        /**  User picture title [CHAR LIMIT=30] 
         */
        public: static const int user_picture_title = 0x7f0a0885;
        /**  User profile removal confirmation message [CHAR LIMIT=none] 
         */
        public: static const int user_profile_confirm_remove_message = 0x7f0a084c;
        /**  Profile removal confirmation title [CHAR LIMIT=25] 
         */
        public: static const int user_profile_confirm_remove_title = 0x7f0a0847;
        /**  Title of preference to remove the user [CHAR LIMIT=35] 
         */
        public: static const int user_remove_user = 0x7f0a0857;
        /**  User details remove user menu [CHAR LIMIT=20] 
         */
        public: static const int user_remove_user_menu = 0x7f0a0841;
        /**  User limits screen, user name rename text [CHAR LIMIT=15] 
         */
        public: static const int user_rename = 0x7f0a089a;
        /**  Summary for app entries that are controlled by another entry [CHAR LIMIT=none] 
         */
        public: static const int user_restrictions_controlled_by = 0x7f0a089c;
        /**  User app limits screen title [CHAR LIMIT=35] 
         */
        public: static const int user_restrictions_title = 0x7f0a0899;
        /**  User settings dialog button to set screen lock [CHAR LIMIT=25] 
         */
        public: static const int user_set_lock_button = 0x7f0a082b;
        /**  User settings screen title [CHAR LIMIT=25] 
         */
        public: static const int user_settings_title = 0x7f0a0824;
        /**  Button text to setup the new user later [CHAR LIMIT=25] 
         */
        public: static const int user_setup_button_setup_later = 0x7f0a083e;
        /**  Button text to setup the new user now [CHAR LIMIT=25] 
         */
        public: static const int user_setup_button_setup_now = 0x7f0a083d;
        /**  Message in dialog to setup a new user after creation [CHAR LIMIT=none] 
         */
        public: static const int user_setup_dialog_message = 0x7f0a083b;
        /**  Title of dialog to setup a new user [CHAR LIMIT=30] 
         */
        public: static const int user_setup_dialog_title = 0x7f0a083a;
        /**  Message in dialog to setup a new restricted profile after creation [CHAR LIMIT=none] 
         */
        public: static const int user_setup_profile_dialog_message = 0x7f0a083c;
        /**  User settings summary for a work profile [CHAR LIMIT=50] 
         */
        public: static const int user_summary_managed_profile = 0x7f0a0829;
        /**  User summary to indicate that a work profile is currently not set up [CHAR LIMIT=100] 
         */
        public: static const int user_summary_managed_profile_not_set_up = 0x7f0a082e;
        /**  User summary to indicate that user is currently not set up [CHAR LIMIT=100] 
         */
        public: static const int user_summary_not_set_up = 0x7f0a082c;
        /**  User summary to indicate that restricted profile is currently not set up [CHAR LIMIT=100] 
         */
        public: static const int user_summary_restricted_not_set_up = 0x7f0a082d;
        /**  User settings summary for a restricted profile [CHAR LIMIT=50] 
         */
        public: static const int user_summary_restricted_profile = 0x7f0a0828;
        /**  User settings title for current user entry "You" user. [CHAR LIMIT=30] 
         */
        public: static const int user_you = 0x7f0a0830;
        public: static const int verify_applications = 0x7f0a097b;
        public: static const int verify_applications_summary = 0x7f0a097c;
        /**  Summary of checkbox setting to perform package verification on apps installed over USB/ADT/ADB [CHAR LIMIT=NONE] 
         */
        public: static const int verify_apps_over_usb_summary = 0x7f0a0570;
        /**  Title of checkbox setting to perform package verification on apps installed over USB/ADT/ADB [CHAR LIMIT=32] 
         */
        public: static const int verify_apps_over_usb_title = 0x7f0a056f;
        /**  Manage applications, version string displayed in app snippet 
         */
        public: static const int version_text = 0x7f0a04b9;
        /**  Sound settings screen, setting option name checkbox 
         */
        public: static const int vibrate_in_silent_title = 0x7f0a02ed;
        /**  On Language & input settings screen, setting title.  Setting to redirect vibration to input devices. [CHAR LIMIT=35] 
         */
        public: static const int vibrate_input_devices = 0x7f0a0512;
        /**  On Language & input settings screen, setting summary.  Setting to redirect vibration to input devices. [CHAR LIMIT=100] 
         */
        public: static const int vibrate_input_devices_summary = 0x7f0a0513;
        /**  Sound & notification > Other sounds: Title for the option enabling haptic feedback on touch. [CHAR LIMIT=30] 
         */
        public: static const int vibrate_on_touch_title = 0x7f0a0914;
        /**  Sound & notification > Sound section: Title for the option managing whether or not to vibrate when ringing. [CHAR LIMIT=30] 
         */
        public: static const int vibrate_when_ringing_title = 0x7f0a0906;
        /**  Title for the 'voice input' category of voice input/output settings 
         */
        public: static const int voice_category = 0x7f0a0678;
        /**  Title of setting on main settings screen. This item will take the user to the screen to tweak settings related to speech functionality 
         */
        public: static const int voice_input_output_settings = 0x7f0a0674;
        /**  Main voice input/output settings screen title 
         */
        public: static const int voice_input_output_settings_title = 0x7f0a0675;
        /**  [CHAR_LIMIT=NONE] Name of the settings item to open the voice input settings. 
         */
        public: static const int voice_input_settings = 0x7f0a0679;
        /**  [CHAR_LIMIT=NONE] Title of the screen of the voice input settings 
         */
        public: static const int voice_input_settings_title = 0x7f0a067a;
        /**  [CHAR_LIMIT=NONE] Warning message about security implications of enabling a
         voice interaction service, displayed as a dialog
         message when the user selects to enable a service. 
         */
        public: static const int voice_interaction_security_warning = 0x7f0a067e;
        /**  [CHAR LIMIT=NONE] The summary text for the voice service preference that is
         a full voice interaction service.  This is something that provides interactive
         voice control of applications; for example you can tell it commands to have it
         launch and let you interact with applications through your voice. 
         */
        public: static const int voice_interactor_preference_summary = 0x7f0a067c;
        /**  [CHAR LIMIT=NONE] The summary text for the voice service preference that is
         a simple voice recognition service.  This is something that only provides simple
         speech to text conversions that applications can use when they want to allow you
         to provide text to them through your voice (instead of with a keyboard). 
         */
        public: static const int voice_recognizer_preference_summary = 0x7f0a067d;
        /**  Title of voice search settings list item within voice input/output settings 
         */
        public: static const int voice_search_settings_title = 0x7f0a0676;
        /**  [CHAR LIMIT=50] The text for the settings section in which users select
         a voice interaction or recognition service to use. 
         */
        public: static const int voice_service_preference_section_title = 0x7f0a067b;
        /**  Volume description for alarm volume 
         */
        public: static const int volume_alarm_description = 0x7f0a0301;
        /**  Image description for alarm volume mute button. 
         */
        public: static const int volume_alarm_mute = 0x7f0a0305;
        /**  Volume description for media volume 
         */
        public: static const int volume_media_description = 0x7f0a02fe;
        /**  Image description for media volume mute button. 
         */
        public: static const int volume_media_mute = 0x7f0a0303;
        /**  Volume description for notification volume 
         */
        public: static const int volume_notification_description = 0x7f0a0300;
        /**  Image description for notification volume mute button. 
         */
        public: static const int volume_notification_mute = 0x7f0a0304;
        /**  Volume description for ringtone and notification volume 
         */
        public: static const int volume_ring_description = 0x7f0a02ff;
        /**  Image description for ringer volume mute button. 
         */
        public: static const int volume_ring_mute = 0x7f0a0302;
        /**  Button label to cancel changing a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_cancel = 0x7f0a07fd;
        /**  Button label to connect to a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_connect = 0x7f0a07ff;
        /**  Dialog title to connect to a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_connect_to = 0x7f0a0801;
        /**  Preference title to create a new VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_create = 0x7f0a0803;
        /**  Input label for the DNS servers of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_dns_servers = 0x7f0a07f5;
        /**  Dialog title to edit a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_edit = 0x7f0a0800;
        /**  Selection label for the IPSec CA certificate of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_ipsec_ca_cert = 0x7f0a07f1;
        /**  Input label for the IPSec identifier of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_ipsec_identifier = 0x7f0a07ee;
        /**  Input label for the IPSec pre-shared key of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_ipsec_secret = 0x7f0a07ef;
        /**  Selection label for the IPSec server certificate of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_ipsec_server_cert = 0x7f0a07f2;
        /**  Selection label for the IPSec user certificate of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_ipsec_user_cert = 0x7f0a07f0;
        /**  Input label for the L2TP secret of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_l2tp_secret = 0x7f0a07ed;
        /**  Error indicating that the selected VPN doesn't meet requirements. [CHAR LIMIT=NONE] 
         */
        public: static const int vpn_lockdown_config_error = 0x7f0a0809;
        /**  List item indicating that no always-on VPN is selected. [CHAR LIMIT=64] 
         */
        public: static const int vpn_lockdown_none = 0x7f0a0808;
        /**  Summary describing the always-on VPN feature. [CHAR LIMIT=NONE] 
         */
        public: static const int vpn_lockdown_summary = 0x7f0a0807;
        /**  Menu item to delete a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_menu_delete = 0x7f0a0805;
        /**  Menu item to edit a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_menu_edit = 0x7f0a0804;
        /**  Menu item to select always-on VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_menu_lockdown = 0x7f0a0806;
        /**  Toast message when a certificate is missing. [CHAR LIMIT=100] 
         */
        public: static const int vpn_missing_cert = 0x7f0a080b;
        /**  Checkbox label to enable PPP encryption for a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_mppe = 0x7f0a07ec;
        /**  Input label for the name of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_name = 0x7f0a07e9;
        /**  Option to not use a CA certificate to verify the VPN server. [CHAR LIMIT=40] 
         */
        public: static const int vpn_no_ca_cert = 0x7f0a07fb;
        /**  Toast message when there is no network connection to start VPN. [CHAR LIMIT=100] 
         */
        public: static const int vpn_no_network = 0x7f0a080a;
        /**  Option to use the server certificate received from the VPN server. [CHAR LIMIT=40] 
         */
        public: static const int vpn_no_server_cert = 0x7f0a07fc;
        /**  Hint for not using an optional feature in a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_not_used = 0x7f0a07fa;
        /**  Input label for the password of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_password = 0x7f0a07f8;
        /**  Input label for the forwarding routes of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_routes = 0x7f0a07f6;
        /**  Button label to save a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_save = 0x7f0a07fe;
        /**  Checkbox label to save the username and the password in a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_save_login = 0x7f0a07f9;
        /**  Input label for the DNS search domains of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_search_domains = 0x7f0a07f4;
        /**  Input label for the server address of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_server = 0x7f0a07eb;
        /**  Error message for users that aren't allowed to modify VPN settings [CHAR LIMIT=none] 
         */
        public: static const int vpn_settings_not_available = 0x7f0a054f;
        /**  Title of preference to enter the VPN settings activity 
         */
        public: static const int vpn_settings_title = 0x7f0a06c0;
        /**  Checkbox label to show advanced options of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_show_options = 0x7f0a07f3;
        /**  Preference title for VPN settings. [CHAR LIMIT=40] 
         */
        public: static const int vpn_title = 0x7f0a0802;
        /**  Input label for the type of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_type = 0x7f0a07ea;
        /**  Input label for the username of a VPN profile. [CHAR LIMIT=40] 
         */
        public: static const int vpn_username = 0x7f0a07f7;
        /**  UI debug setting: wait for debugger to attach to debugging process? [CHAR LIMIT=50] 
         */
        public: static const int wait_for_debugger = 0x7f0a0764;
        /**  UI debug setting: wait for debugger to attach to debugging process summary [CHAR LIMIT=500] 
         */
        public: static const int wait_for_debugger_summary = 0x7f0a0765;
        /**  About phone settings screen, setting option name to see wallpapers attributions 
         */
        public: static const int wallpaper_attributions = 0x7f0a042e;
        /**  About phone settings screen, setting option name to see wallpapers attributions values 
         */
        public: static const int wallpaper_attributions_values = 0x7f0a042f;
        /**  Wallpaper settings fragment title [CHAR LIMIT=30] 
         */
        public: static const int wallpaper_settings_fragment_title = 0x7f0a0324;
        /**  Wallpaper settings title [CHAR LIMIT=30] 
         */
        public: static const int wallpaper_settings_title = 0x7f0a0323;
        /**  Title for the screen that lets the user choose a widget to add to the home screen
         (or other screens that can host widgets).  Note to translators: we're still determining
         the final name for Gadgets/Widgets, so please translate both for now. 
         */
        public: static const int widget_picker_title = 0x7f0a0578;
        /**  Header for the list of wifi networks
         */
        public: static const int wifi_access_points = 0x7f0a023c;
        /**  Action bar text message to manually add a wifi network [CHAR LIMIT=20]
         */
        public: static const int wifi_add_network = 0x7f0a023b;
        /**  Title of the screen to adjust IP settings 
 Wi-Fi settings screen, advanced, title of the item to show the Wi-Fi device's current IP address. 
         */
        public: static const int wifi_advanced_ip_address_title = 0x7f0a029d;
        /**  Wi-Fi settings screen, advanced, title of the item to show the Wi-Fi device's MAC address. 
         */
        public: static const int wifi_advanced_mac_address_title = 0x7f0a029c;
        /**  Wifi Advanced settings.  Used as a label under the shortcut icon that goes to Wifi advanced settings. [CHAR LIMIT=20] 
         */
        public: static const int wifi_advanced_settings_label = 0x7f0a029f;
        /**  Wi-Fi settings screen, advanced, settings section.  This is a header shown above advanced wifi settings. [CHAR LIMIT=30] 
         */
        public: static const int wifi_advanced_titlebar = 0x7f0a0298;
        /**  Setting Checkbox title whether to enable WiFi Aggressive Handover. [CHAR LIMIT=40] 
         */
        public: static const int wifi_aggressive_handover = 0x7f0a055f;
        /**  Setting Checkbox summary whether to enable Wifi aggressive handover [CHAR LIMIT=130] 
         */
        public: static const int wifi_aggressive_handover_summary = 0x7f0a0563;
        /**  Setting Checkbox title whether to enable WiFi Scanning in the presence of traffic. [CHAR LIMIT=80] 
         */
        public: static const int wifi_allow_scan_with_traffic = 0x7f0a0560;
        /**  Setting Checkbox summary whether to always allow WiFi Roam Scans [CHAR LIMIT=130] 
         */
        public: static const int wifi_allow_scan_with_traffic_summary = 0x7f0a0564;
        /**  Text warning about skipping Wi-Fi without a mobile connect (phone) [CHAR LIMIT=NONE] 
         */
        public: static const int wifi_and_mobile_skipped_message = 0x7f0a0295;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Menu item on Wifi information screen
         */
        public: static const int wifi_api_test = 0x7f0a02d0;
        /**  Wifi Assistant card message.  [CHAR LIMIT=200] 
         */
        public: static const int wifi_assistant_card_message = 0x7f0a01f4;
        /**  Wifi Assistant title string.  [CHAR LIMIT=40] 
         */
        public: static const int wifi_assistant_intro_setup = 0x7f0a01f1;
        /**  Wifi Assistant No, thanks string.  Text to say no to wifi assistant. [CHAR LIMIT=20] 
         */
        public: static const int wifi_assistant_no_thanks = 0x7f0a01f2;
        /**  Wifi Assistant open app button text.  [CHAR LIMIT=40] 
         */
        public: static const int wifi_assistant_open_app = 0x7f0a01f7;
        /**  Wifi Assistant setup string.  Text to say yes to wifi assistant and begin setup. [CHAR LIMIT=20] 
         */
        public: static const int wifi_assistant_setup = 0x7f0a01f3;
        /**  Wifi Assistant title.  [CHAR LIMIT=40] 
         */
        public: static const int wifi_assistant_title = 0x7f0a01f5;
        /**  Wifi Assistant title message.  First piece of text on the Wifi Assistant setup wizard.  [CHAR LIMIT=200] 
         */
        public: static const int wifi_assistant_title_message = 0x7f0a01f6;
        /**  Checkbox summary for option to Automatically manage Wi\u2011Fi  [CHAR LIMIT=100] 
         */
        public: static const int wifi_automatically_manage_summary = 0x7f0a022f;
        /**  Checkbox title for option to Automatically manage Wi\u2011Fi  [CHAR LIMIT=40] 
         */
        public: static const int wifi_automatically_manage_title = 0x7f0a022e;
        /**  Checkbox summary for option to toggle poor network detection [CHAR LIMIT=60] 
         */
        public: static const int wifi_avoid_poor_network_detection_summary = 0x7f0a022a;
        /**  Wifi 2.4GHz is used as an universal itendifier for 2.4GHz band 
         */
        public: static const int wifi_band_24ghz = 0x7f0a020d;
        /**  Wifi Internal 5GHz as an universal itendifier for 5GHz band 
         */
        public: static const int wifi_band_5ghz = 0x7f0a020e;
        /**  Button label to dismiss the dialog 
         */
        public: static const int wifi_cancel = 0x7f0a0291;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Menu item on Wifi information screen
         */
        public: static const int wifi_config_info = 0x7f0a02e4;
        /**  Button label to connect to a Wi-Fi network 
         */
        public: static const int wifi_connect = 0x7f0a028b;
        /**  Text alerting that Wi-Fi couldn't connect (phone) [CHAR LIMIT=NONE] 
         */
        public: static const int wifi_connect_failed_message = 0x7f0a0296;
        /**  Status for networks disabled for unknown reason 
         */
        public: static const int wifi_disabled_generic = 0x7f0a0270;
        /**  Status for networked disabled from a DNS or DHCP failure 
         */
        public: static const int wifi_disabled_network_failure = 0x7f0a0271;
        /**  Status for networks disabled from authentication failure (wrong password
         or certificate). 
         */
        public: static const int wifi_disabled_password_failure = 0x7f0a0272;
        /**  Wifi Display settings. The checkbox title for enabling autonomous GO during certification process. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_autonomous_go = 0x7f0a0207;
        public: static const int wifi_display_available_devices = 0x7f0a0970;
        /**  Setting Checkbox title whether to show options for wireless display certification 
         */
        public: static const int wifi_display_certification = 0x7f0a055d;
        /**  Wifi Display settings. The sub heading for wireless display certification options. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_certification_heading = 0x7f0a0204;
        /**  setting Checkbox summary whether to show options for wireless display certification  
         */
        public: static const int wifi_display_certification_summary = 0x7f0a0561;
        /**  Wifi Display settings. Image description for device details button. This opens the screen to rename, unpair, etc. a single device. 
         */
        public: static const int wifi_display_details = 0x7f0a01ff;
        public: static const int wifi_display_disconnect_text = 0x7f0a0973;
        public: static const int wifi_display_disconnect_title = 0x7f0a0972;
        /**  Wifi Display settings. The title of a menu item to enable wireless display [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_enable_menu_item = 0x7f0a01f9;
        /**  Wifi Display settings. The dropdown menu title for choosing listen channel during certification process. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_listen_channel = 0x7f0a020b;
        /**  Wifi Display settings. The checkbox title for enabling listen mode during certification process. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_listen_mode = 0x7f0a0206;
        /**  Wifi Display settings. Text that appears when scanning for devices is finished and no nearby device was found [CHAR LIMIT=40]
         */
        public: static const int wifi_display_no_devices_found = 0x7f0a01fa;
        /**  Wifi Display settings. The dropdown menu title for choosing operating channel during certification process. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_operating_channel = 0x7f0a020c;
        /**  Wifi Display settings. Options dialog.  The done button text. [CHAR LIMIT=20] 
         */
        public: static const int wifi_display_options_done = 0x7f0a0202;
        /**  Wifi Display settings. Options dialog.  The forget button text. [CHAR LIMIT=20] 
         */
        public: static const int wifi_display_options_forget = 0x7f0a0201;
        /**  Wifi Display settings. Options dialog.  The name label used when prompting the user to rename the display. [CHAR LIMIT=20] 
         */
        public: static const int wifi_display_options_name = 0x7f0a0203;
        /**  Wifi Display settings. Options dialog.  The title of the dialog. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_options_title = 0x7f0a0200;
        public: static const int wifi_display_paired_devices = 0x7f0a096f;
        /**  Wifi Display settings. The button text for sending pause trigger during certification process. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_pause = 0x7f0a0208;
        /**  Wifi Display settings. The button text for sending play (resume) trigger during certification process. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_resume = 0x7f0a0209;
        public: static const int wifi_display_search_for_devices = 0x7f0a096d;
        public: static const int wifi_display_searching_for_devices = 0x7f0a096e;
        /**  Wifi Display settings. The section title for wireless display session info. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_session_info = 0x7f0a0205;
        public: static const int wifi_display_settings_empty_list_wifi_display_disabled = 0x7f0a096c;
        public: static const int wifi_display_settings_empty_list_wifi_display_off = 0x7f0a096b;
        /**  Wifi Display settings. The title of the screen. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_settings_title = 0x7f0a01f8;
        public: static const int wifi_display_status_available = 0x7f0a0971;
        /**  Wifi Display settings. The status summary for connected devices. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_status_connected = 0x7f0a01fc;
        /**  Wifi Display settings. The status summary for connecting devices. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_status_connecting = 0x7f0a01fb;
        /**  Wifi Display settings. The status summary for devices that's already in use. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_status_in_use = 0x7f0a01fd;
        /**  Wifi Display settings. The status summary for devices that's not available. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_status_not_available = 0x7f0a01fe;
        public: static const int wifi_display_summary_disabled = 0x7f0a0976;
        public: static const int wifi_display_summary_off = 0x7f0a0975;
        public: static const int wifi_display_summary_on = 0x7f0a0974;
        /**  Wifi Display settings. The dropdown menu title for choosing WPS configuration during certification process. [CHAR LIMIT=40] 
         */
        public: static const int wifi_display_wps_config = 0x7f0a020a;
        /**  Label for the DNS (first one) 
         */
        public: static const int wifi_dns1 = 0x7f0a02a6;
        /**  Hint text for DNS 
         */
        public: static const int wifi_dns1_hint = 0x7f0a02a7;
        /**  Label for the DNS (second one)
         */
        public: static const int wifi_dns2 = 0x7f0a02a8;
        /**  Hint text for DNS 
         */
        public: static const int wifi_dns2_hint = 0x7f0a02a9;
        /**  Button for going to the previous screen or step [CHAR LIMIT=20] 
         */
        public: static const int wifi_dont_skip = 0x7f0a0293;
        /**  Label for the EAP anonymous identity of the network 
         */
        public: static const int wifi_eap_anonymous = 0x7f0a0269;
        /**  Label for the EAP CA certificate of the network 
         */
        public: static const int wifi_eap_ca_cert = 0x7f0a0266;
        /**  Label for the EAP identity of the network 
         */
        public: static const int wifi_eap_identity = 0x7f0a0268;
        /**  Label for the EAP method of the network 
         */
        public: static const int wifi_eap_method = 0x7f0a0264;
        /**  Label for the EAP user certificate of the network 
         */
        public: static const int wifi_eap_user_cert = 0x7f0a0267;
        /**  Wifi Settings. text displayed when user has restriction DISALLOW_CONFIG_WIFI [CHAR LIMIT=NONE]
         */
        public: static const int wifi_empty_list_user_restricted = 0x7f0a0249;
        /**  Wi-Fi settings. text displayed when Wi-Fi is off and network list is empty [CHAR LIMIT=50]
         */
        public: static const int wifi_empty_list_wifi_off = 0x7f0a0247;
        /**  Wi-Fi settings. text displayed when Wi-Fi is on and network list is empty [CHAR LIMIT=50]
         */
        public: static const int wifi_empty_list_wifi_on = 0x7f0a0248;
        /**  Summary text when Wi-Fi or bluetooth has error 
         */
        public: static const int wifi_error = 0x7f0a0223;
        /**  Toast message when Wi-Fi cannot scan for networks 
         */
        public: static const int wifi_fail_to_scan = 0x7f0a0225;
        /**  Failured notification for connect 
         */
        public: static const int wifi_failed_connect_message = 0x7f0a028c;
        /**  Failured notification for forget 
         */
        public: static const int wifi_failed_forget_message = 0x7f0a028e;
        /**  Failured notification for save 
         */
        public: static const int wifi_failed_save_message = 0x7f0a0290;
        /**  Button label to delete a Wi-Fi network 
         */
        public: static const int wifi_forget = 0x7f0a028d;
        /**  Label for the frequency band of the connection 
         */
        public: static const int wifi_frequency = 0x7f0a0261;
        /**  Label for the gateway of the network 
         */
        public: static const int wifi_gateway = 0x7f0a02aa;
        /**  Hint text for the gateway 
         */
        public: static const int wifi_gateway_hint = 0x7f0a02ab;
        /**  Label for Wifi tether checkbox. Toggles Access Point on/off  [CHAR LIMIT=30] 
         */
        public: static const int wifi_hotspot_checkbox_text = 0x7f0a02bf;
        /**  Label for Wifi tether checkbox summary. Toggles Access Point on/off  [CHAR LIMIT=60] 
         */
        public: static const int wifi_hotspot_checkbox_text_summary = 0x7f0a02c0;
        /**  Used to open the ssid and security dialog for Wifi Access Point.  [CHAR LIMIT=30]
         */
        public: static const int wifi_hotspot_configure_ap_text = 0x7f0a02c6;
        /**  Summary Used to open the ssid and security dialog for Wifi Access Point.  [CHAR LIMIT=60] 
         */
        public: static const int wifi_hotspot_configure_ap_text_summary = 0x7f0a02c7;
        /**  Wifi settings button to connect in to a Hotspot. [CHAR LIMIT=50]
         */
        public: static const int wifi_hotspot_connect = 0x7f0a028a;
        /**  Dialog message to sign in to a Hotspot. [CHAR LIMIT=50]
         */
        public: static const int wifi_hotspot_message = 0x7f0a0289;
        /**  Dialog label to sign in to a Hotspot. [CHAR LIMIT=50]
         */
        public: static const int wifi_hotspot_title = 0x7f0a0288;
        /**  Toast message when Wi-Fi or bluetooth is disallowed in airplane mode 
         */
        public: static const int wifi_in_airplane_mode = 0x7f0a0224;
        /**  Preference title for option to install certificates 
         */
        public: static const int wifi_install_credentials = 0x7f0a0230;
        /**  Label for the IP address of the connection 
         */
        public: static const int wifi_ip_address = 0x7f0a0262;
        /**  Hint text for the IP address 
         */
        public: static const int wifi_ip_address_hint = 0x7f0a0263;
        /**  Label for the spinner to show ip settings [CHAR LIMIT=25] 
         */
        public: static const int wifi_ip_settings = 0x7f0a026c;
        /**  Error message if the dns is not valid [CHAR LIMIT=50]
         */
        public: static const int wifi_ip_settings_invalid_dns = 0x7f0a02a4;
        /**  Error message if the gateway is not valid [CHAR LIMIT=50]
         */
        public: static const int wifi_ip_settings_invalid_gateway = 0x7f0a02a3;
        /**  Error message if the IP address is not valid [CHAR LIMIT=50]
         */
        public: static const int wifi_ip_settings_invalid_ip_address = 0x7f0a02a2;
        /**  Error message if the network prefix length is not valid [CHAR LIMIT=50]
         */
        public: static const int wifi_ip_settings_invalid_network_prefix_length = 0x7f0a02a5;
        /**  Menu ietm to cancel the IP settings 
         */
        public: static const int wifi_ip_settings_menu_cancel = 0x7f0a02a1;
        /**  Menu item to save the IP settings 
         */
        public: static const int wifi_ip_settings_menu_save = 0x7f0a02a0;
        /**  Checkbox summary for option to toggle suspend power optimizations [CHAR LIMIT=30] 
         */
        public: static const int wifi_limit_optimizations_summary = 0x7f0a023a;
        /**  Menu option to Wi-Fi advanced settings 
         */
        public: static const int wifi_menu_advanced = 0x7f0a0242;
        /**  Menu option to connect to a Wi-Fi network 
         */
        public: static const int wifi_menu_connect = 0x7f0a0243;
        /**  Menu option to delete a Wi-Fi network 
         */
        public: static const int wifi_menu_forget = 0x7f0a0244;
        /**  Menu option to modify a Wi-Fi network configuration 
         */
        public: static const int wifi_menu_modify = 0x7f0a0245;
        /**  Content description for menu button in Wifi setup. Not shown on the screen. [CHAR LIMIT=NONE] 
         */
        public: static const int wifi_menu_more_options = 0x7f0a023e;
        /**  Menu option to launch Wi-Fi Direct settings [CHAR LIMIT=20]
         */
        public: static const int wifi_menu_p2p = 0x7f0a0240;
        /**  Menu option to scan Wi-Fi networks 
         */
        public: static const int wifi_menu_scan = 0x7f0a0241;
        /**  Menu option to do WPS Push Button [CHAR LIMIT=25]
         */
        public: static const int wifi_menu_wps_pbc = 0x7f0a023d;
        /**  Menu option to do WPS Pin Entry [CHAR LIMIT=25]
         */
        public: static const int wifi_menu_wps_pin = 0x7f0a023f;
        /**  Menu option to write a Wi-Fi configuration token to an NFC tag [CHAR_LIMIT=30]
         */
        public: static const int wifi_menu_write_to_nfc = 0x7f0a0246;
        /**  Wi-Fi settings. content description for more button [CHAR LIMIT=50]
         */
        public: static const int wifi_more = 0x7f0a024b;
        /**  Label for the network prefix of the network [CHAR LIMIT=25]
         */
        public: static const int wifi_network_prefix_length = 0x7f0a02ac;
        /**  Hint text for network prefix length 
         */
        public: static const int wifi_network_prefix_length_hint = 0x7f0a02ad;
        /**  Summary for the remembered network but currently not in range. 
         */
        public: static const int wifi_not_in_range = 0x7f0a0273;
        /**  Checkbox title for option to notify user when open networks are nearby 
         */
        public: static const int wifi_notify_open_networks = 0x7f0a0226;
        /**  Checkbox summary for option to notify user when open networks are nearby [CHAR LIMIT=60]
         */
        public: static const int wifi_notify_open_networks_summary = 0x7f0a0227;
        /**  Wifi on time 
         */
        public: static const int wifi_on_time = 0x7f0a060c;
        /**  Wi-Fi settings. title for setup other network button [CHAR LIMIT=35]
         */
        public: static const int wifi_other_network = 0x7f0a024a;
        /**  Message text for disconnection from one device
         */
        public: static const int wifi_p2p_cancel_connect_message = 0x7f0a02bc;
        /**  Title for cancel connect dialog 
         */
        public: static const int wifi_p2p_cancel_connect_title = 0x7f0a02bb;
        /**  Message text for remembered group deletion
         */
        public: static const int wifi_p2p_delete_group_message = 0x7f0a02bd;
        public: static const int wifi_p2p_device_info = 0x7f0a02af;
        /**  Message text for disconnection from one device
         */
        public: static const int wifi_p2p_disconnect_message = 0x7f0a02b9;
        /**  Message text for disconnection from multiple devices
         */
        public: static const int wifi_p2p_disconnect_multiple_message = 0x7f0a02ba;
        /**  Title for disconnect dialog 
         */
        public: static const int wifi_p2p_disconnect_title = 0x7f0a02b8;
        /**  Toast text for a failed connection initiation 
         */
        public: static const int wifi_p2p_failed_connect_message = 0x7f0a02b6;
        /**  Message text for failure to rename 
         */
        public: static const int wifi_p2p_failed_rename_message = 0x7f0a02b7;
        /**  Menu option to Rename
         */
        public: static const int wifi_p2p_menu_rename = 0x7f0a02b3;
        /**  Menu option to discover peers
         */
        public: static const int wifi_p2p_menu_search = 0x7f0a02b1;
        /**  Menu option when discovery is in progress [CHAR LIMIT=25] 
         */
        public: static const int wifi_p2p_menu_searching = 0x7f0a02b2;
        /**  Title for available p2p devices 
         */
        public: static const int wifi_p2p_peer_devices = 0x7f0a02b4;
        public: static const int wifi_p2p_persist_network = 0x7f0a02b0;
        /**  Title for remembered p2p groups 
         */
        public: static const int wifi_p2p_remembered_groups = 0x7f0a02b5;
        /**  Wi-Fi p2p / Wi-Fi Direct settings 
 Used in the 1st-level settings screen to launch Wi-fi Direct settings [CHAR LIMIT=25] 
         */
        public: static const int wifi_p2p_settings_title = 0x7f0a02ae;
        /**  Label for the password of the secured network 
         */
        public: static const int wifi_password = 0x7f0a026a;
        /**  Checkbox title for option to toggle poor network detection 
         */
        public: static const int wifi_poor_network_detection = 0x7f0a0228;
        /**  Checkbox summary for option to toggle poor network detection 
         */
        public: static const int wifi_poor_network_detection_summary = 0x7f0a0229;
        /**  Used in the 1st-level settings screen as the turn-on summary 
         */
        public: static const int wifi_quick_toggle_summary = 0x7f0a021a;
        /**  Used in the 1st-level settings screen to turn on Wi-Fi 
         */
        public: static const int wifi_quick_toggle_title = 0x7f0a0219;
        /**  Summary for the remembered network. 
         */
        public: static const int wifi_remembered = 0x7f0a026f;
        /**  Message informing that wifi is required during setup [CHAR LIMIT=NONE] 
         */
        public: static const int wifi_required_info_text = 0x7f0a024d;
        /**  Button label to save a Wi-Fi network configuration 
         */
        public: static const int wifi_save = 0x7f0a028f;
        /**  Wifi saved access points.  Used as a label under the shortcut icon that goes to Wifi saved access points. [CHAR LIMIT=20] 
         */
        public: static const int wifi_saved_access_points_label = 0x7f0a029e;
        /**  Wi-Fi settings screen, Saved networks, settings section.  This is a header shown above Saved networks wifi settings. [CHAR LIMIT=30] 
         */
        public: static const int wifi_saved_access_points_titlebar = 0x7f0a0297;
        /**  Checkbox title for option to scan always available setting 
         */
        public: static const int wifi_scan_always_available = 0x7f0a022b;
        /**  Checkbox summary for option to toggle scan always available setting 
         */
        public: static const int wifi_scan_always_available_summary = 0x7f0a022d;
        /**  Checkbox title for option to scan always available setting [CHAR LIMIT=60] 
         */
        public: static const int wifi_scan_always_available_title = 0x7f0a022c;
        public: static const int wifi_scan_always_confirm_allow = 0x7f0a0286;
        public: static const int wifi_scan_always_confirm_deny = 0x7f0a0287;
        /**  Message informing the user how to turn off  [CHAR LIMIT=200] 
         */
        public: static const int wifi_scan_always_turnoff_message = 0x7f0a0285;
        public: static const int wifi_scan_always_turnon_message = 0x7f0a0284;
        /**  Wifi scan always mode checkbox text 
         */
        public: static const int wifi_scan_notify_remember_choice = 0x7f0a0233;
        public: static const int wifi_scan_notify_text_location_off = 0x7f0a0232;
        public: static const int wifi_scan_notify_text_location_on = 0x7f0a0231;
        public: static const int wifi_secured_first_item = 0x7f0a0977;
        public: static const int wifi_secured_second_item = 0x7f0a0978;
        /**  Label for the security of the connection 
         */
        public: static const int wifi_security = 0x7f0a025d;
        /**  Do not translate.  Concise terminology for wifi with 802.1x EAP security 
         */
        public: static const int wifi_security_eap = 0x7f0a0283;
        /**  Used in Wi-Fi settings dialogs when Wi-Fi does not have any security. 
         */
        public: static const int wifi_security_none = 0x7f0a027d;
        /**  Do not translate.  Terminology for wifi with unknown PSK type 
         */
        public: static const int wifi_security_psk_generic = 0x7f0a0282;
        /**  Do not translate.  Concise terminology for wifi with 802.1x EAP security 
         */
        public: static const int wifi_security_short_eap = 0x7f0a027c;
        /**  Do not translate.  Concise terminology for wifi with unknown PSK type 
         */
        public: static const int wifi_security_short_psk_generic = 0x7f0a027b;
        /**  Do not translate.  Concise terminology for wifi with WEP security 
         */
        public: static const int wifi_security_short_wep = 0x7f0a0277;
        /**  Do not translate.  Concise terminology for wifi with WPA security 
         */
        public: static const int wifi_security_short_wpa = 0x7f0a0278;
        /**  Do not translate.  Concise terminology for wifi with WPA2 security 
         */
        public: static const int wifi_security_short_wpa2 = 0x7f0a0279;
        /**  Do not translate.  Concise terminology for wifi with both WPA/WPA2 security 
         */
        public: static const int wifi_security_short_wpa_wpa2 = 0x7f0a027a;
        /**  Do not translate.  Terminology for wifi with WEP security 
         */
        public: static const int wifi_security_wep = 0x7f0a027e;
        /**  Do not translate.  Terminology for wifi with WPA security 
         */
        public: static const int wifi_security_wpa = 0x7f0a027f;
        /**  Do not translate.  Terminology for wifi with WPA2 security 
         */
        public: static const int wifi_security_wpa2 = 0x7f0a0280;
        /**  Do not translate.  Terminology for wifi with both WPA/WPA2 security, or unknown 
         */
        public: static const int wifi_security_wpa_wpa2 = 0x7f0a0281;
        /**  Used by Account creation for turning on Wi-Fi  [CHAR LIMIT=60] 
         */
        public: static const int wifi_select_network = 0x7f0a0220;
        /**  Wi-Fi settings screen, error message when the frequency band could not be set [CHAR LIMIT=50]. 
         */
        public: static const int wifi_setting_frequency_band_error = 0x7f0a029b;
        /**  Wi-Fi settings screen, setting summary for setting the wifi frequency band [CHAR LIMIT=50]
         */
        public: static const int wifi_setting_frequency_band_summary = 0x7f0a029a;
        /**  Wi-Fi settings screen, setting title for setting the band [CHAR LIMIT=50]
         */
        public: static const int wifi_setting_frequency_band_title = 0x7f0a0299;
        /**  Setting title for setting the wifi sleep policy. Do we keep Wi-Fi active when the screen turns off? [CHAR LIMIT=30] 
         */
        public: static const int wifi_setting_on_during_sleep_title = 0x7f0a0235;
        /**  Generic error message when the sleep policy could not be set. 
         */
        public: static const int wifi_setting_sleep_policy_error = 0x7f0a0236;
        /**  Setting title for setting the wifi sleep policy. Do we keep Wi-Fi active when the screen turns off? 
         */
        public: static const int wifi_setting_sleep_policy_title = 0x7f0a0234;
        /**  Used in the 1st-level settings screen to go to the 2nd-level settings screen  [CHAR LIMIT=20]
         */
        public: static const int wifi_settings = 0x7f0a021b;
        /**  Title of the Wi-fi settings screen 
         */
        public: static const int wifi_settings_category = 0x7f0a021c;
        /**  Summary text of the Wi-fi settings screen 
         */
        public: static const int wifi_settings_summary = 0x7f0a021e;
        /**  Title of the Wi-fi settings entry in the left top level menu 
         */
        public: static const int wifi_settings_title = 0x7f0a021d;
        /**  Button message shown on the button adding manual setting.
         Used in Wifi Setup For Setup Wizard with XL screen. 
         */
        public: static const int wifi_setup_add_network = 0x7f0a070e;
        /**  Button label to go back to previous screen. Used in SetupWizard for
      XLarge screen [CHAR LIMIT=10] 
         */
        public: static const int wifi_setup_back = 0x7f0a0712;
        /**  Button label to dismiss the dialog.
         Used in SetupWizard for XLarge screen [CHAR LIMIT=10] 
         */
        public: static const int wifi_setup_cancel = 0x7f0a0717;
        /**  Button label to connect to a Wi-Fi network.
         Used in SetupWizard for XLarge screen [CHAR LIMIT=10] 
         */
        public: static const int wifi_setup_connect = 0x7f0a0714;
        /**  Message shown when the device is connected to a network [CHAR LIMIT=NONE] 
         */
        public: static const int wifi_setup_description_connected = 0x7f0a0723;
        /**  Message shown when the device is connecting a network [CHAR LIMIT=NONE] 
         */
        public: static const int wifi_setup_description_connecting = 0x7f0a0722;
        /**  Button label to show detailed dialog for a selected Wi-Fi settings.
         Used in SetupWizard for XLarge screen [CHAR LIMIT=20] 
         */
        public: static const int wifi_setup_detail = 0x7f0a0713;
        /**  Message shown when users select EAP in Wi-Fi settings for SetupWizard,
         saying EAP can't be configured in SetupWizard flow.
         [CHAR LIMIT=NONE] 
         */
        public: static const int wifi_setup_eap_not_supported = 0x7f0a0721;
        /**  Button label to delete a Wi-Fi network.
         Used in SetupWizard for XLarge screen [CHAR LIMIT=10] 
         */
        public: static const int wifi_setup_forget = 0x7f0a0715;
        /**  Button message shown on the button enabling users go the next step.
         Used in Wifi Setup For Setup Wizard with XL screen. [CHAR LIMIT=10] 
         */
        public: static const int wifi_setup_next = 0x7f0a0711;
        /**  Text message shown when Wifi is not connected.
         Used in Wifi Setup For Setup Wizard with XL screen. 
         */
        public: static const int wifi_setup_not_connected = 0x7f0a070d;
        /**  Button message shown on the button refreshing a list of network.
         Used in Wifi Setup For Setup Wizard with XL screen. 
         */
        public: static const int wifi_setup_refresh_list = 0x7f0a070f;
        /**  Button label to save a Wi-Fi network configuration.
         Used in SetupWizard for XLarge screen [CHAR LIMIT=10] 
         */
        public: static const int wifi_setup_save = 0x7f0a0716;
        /**  Button message shown on the button enabling users skip Wifi Setup.
         Used in Wifi Setup For Setup Wizard with XL screen. [CHAR LIMIT=10] 
         */
        public: static const int wifi_setup_skip = 0x7f0a0710;
        /**  The message shown above available networks when a user clicked one of available
         networks or created another profile and he/she is waiting for the connection
         is established.
         Used in Wifi Setup For Setup Wizard with XL screen. [CHAR LIMIT=35] 
         */
        public: static const int wifi_setup_status_connecting = 0x7f0a071e;
        /**  The message shown above available networks when a user clicked a network secured by
         EAP. We don't allow the user to connect it.
         Used in Wifi Setup For Setup Wizard with XL screen. [CHAR LIMIT=35] 
         */
        public: static const int wifi_setup_status_eap_not_supported = 0x7f0a0720;
        /**  Message shown above available networks when a user clicked one of available
         networks and the UI is prompting the user to edit the network configuration
         if needed. Used in Wifi Setup with XL screen. [CHAR LIMIT=35] 
         */
        public: static const int wifi_setup_status_edit_network = 0x7f0a071c;
        /**  Message shown above available networks when a user clicked one of available
         networks and the UI is showing one possible existing network.
         Used in Wifi Setup. 
         */
        public: static const int wifi_setup_status_existing_network = 0x7f0a071a;
        /**  The message shown above available networks when a user clicked "Add network"
         button. Used in Wifi Setup For Setup Wizard with XL screen. [CHAR LIMIT=35] 
         */
        public: static const int wifi_setup_status_new_network = 0x7f0a071d;
        /**  The message shown above available networks when connection is established,
         letting a user to proceed to the next step of the SetupWizard.
         Used in Wifi Setup For Setup Wizard with XL screen. [CHAR LIMIT=35] 
         */
        public: static const int wifi_setup_status_proceed_to_next = 0x7f0a071f;
        /**  The message shown above available networks when the device is scanning
         available networks [CHAR LIMIT=35] 
         */
        public: static const int wifi_setup_status_scanning = 0x7f0a0718;
        /**  Message shown above available network when there's no connected network.
         Used in Wifi Setup For Setup Wizard with XL screen. 
         */
        public: static const int wifi_setup_status_select_network = 0x7f0a0719;
        /**  Message shown above available networks when a user clicked one of available
         networks and the network doesn't require configuration (e.g. password)
         Used in Wifi Setup with XL screen. [CHAR LIMIT=35] 
         */
        public: static const int wifi_setup_status_unsecured_network = 0x7f0a071b;
        /**  Wifi Setup For Setup Wizard with XL screen 
 Title shown in Wifi Setup Wizard with XL screen 
         */
        public: static const int wifi_setup_title = 0x7f0a0708;
        /**  Title shown in Wifi Setup For Setup Wizard with XL screen when
         a user is adding a network.
         [CHAR LIMIT=50] 
         */
        public: static const int wifi_setup_title_add_network = 0x7f0a070c;
        /**  Title shown in Wifi Setup For Setup Wizard with XL screen when
         the device successfully connected to a network the user specified.
         The argument should be the name of the network.
         [CHAR LIMIT=50] 
         */
        public: static const int wifi_setup_title_connected_network = 0x7f0a070b;
        /**  Title shown in Wifi Setup For Setup Wizard with XL screen when
         the device is connecting a network the user specified.
         The argument should be the name of the network.
         [CHAR LIMIT=50] 
         */
        public: static const int wifi_setup_title_connecting_network = 0x7f0a070a;
        /**  Title shown in Wifi Setup Wizard with XL screen when
         a user is configuring password for a network.
         The argument should be the name of the network.
         [CHAR LIMIT=50] 
         */
        public: static const int wifi_setup_title_editing_network = 0x7f0a0709;
        /**  Used in the 1st-level settings screen to turn on Wi-Fi  [CHAR LIMIT=60] 
         */
        public: static const int wifi_setup_wizard_title = 0x7f0a021f;
        /**  Wi-Fi settings. wps menu title [CHAR LIMIT=25]
         */
        public: static const int wifi_setup_wps = 0x7f0a024c;
        /**  Label to show/hide advanced options [CHAR LIMIT=40] 
         */
        public: static const int wifi_show_advanced = 0x7f0a024e;
        /**  Label for the check box to show password 
         */
        public: static const int wifi_show_password = 0x7f0a026b;
        /**  Label for the signal strength of the connection 
         */
        public: static const int wifi_signal = 0x7f0a025e;
        /**  Button for skipping a step after having been warned of a potential concern [CHAR LIMIT=30] 
         */
        public: static const int wifi_skip_anyway = 0x7f0a0292;
        /**  Text warning about skipping Wi-Fi with a mobile connect (phone) [CHAR LIMIT=NONE]
         */
        public: static const int wifi_skipped_message = 0x7f0a0294;
        /**  Label for the link speed of the connection 
         */
        public: static const int wifi_speed = 0x7f0a0260;
        /**  Label for the SSID of the network 
         */
        public: static const int wifi_ssid = 0x7f0a025b;
        /**  Hint for a text field to enter the SSID of a hidden wifi network. [CHAR LIMIT=35] 
         */
        public: static const int wifi_ssid_hint = 0x7f0a025c;
        /**  Summary text when turning Wi-Fi or bluetooth on 
         */
        public: static const int wifi_starting = 0x7f0a0221;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int wifi_state_disabled = 0x7f0a02e0;
        /**  wifi state values
 Do not translate. Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int wifi_state_disabling = 0x7f0a02df;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int wifi_state_enabled = 0x7f0a02e2;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int wifi_state_enabling = 0x7f0a02e1;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Label on Wifi Status screen
         */
        public: static const int wifi_state_label = 0x7f0a02d3;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary 
         */
        public: static const int wifi_state_unknown = 0x7f0a02e3;
        /**  Label for the status of the connection 
         */
        public: static const int wifi_status = 0x7f0a025f;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Menu item on Wifi information screen
         */
        public: static const int wifi_status_test = 0x7f0a02d1;
        /**  Summary text when turning Wi-Fi or bluetooth off 
         */
        public: static const int wifi_stopping = 0x7f0a0222;
        /**  Checkbox title for option to toggle suspend power optimizations [CHAR LIMIT=30] 
         */
        public: static const int wifi_suspend_efficiency_title = 0x7f0a0237;
        /**  Checkbox title for option to toggle suspend power optimizations 
         */
        public: static const int wifi_suspend_optimizations = 0x7f0a0238;
        /**  Checkbox summary for option to toggle suspend power optimizations 
         */
        public: static const int wifi_suspend_optimizations_summary = 0x7f0a0239;
        /**  Wifi AP settings
 Label for Wifi tether checkbox. Toggles Access Point on/off 
         */
        public: static const int wifi_tether_checkbox_text = 0x7f0a02be;
        /**  Used to open the ssid and security dialog for Wifi Access Point 
         */
        public: static const int wifi_tether_configure_ap_text = 0x7f0a02c5;
        /**  Default access point SSID used for tethering 
         */
        public: static const int wifi_tether_configure_ssid_default = 0x7f0a02c9;
        /**  Subtext on configuration preference to indicate SSID and security chosen 
         */
        public: static const int wifi_tether_configure_subtext = 0x7f0a02c8;
        /**  Subtext for wifi tether checkbox on success 
         */
        public: static const int wifi_tether_enabled_subtext = 0x7f0a02c3;
        /**  Subtext for wifi tether checkbox on failure 
         */
        public: static const int wifi_tether_failed_subtext = 0x7f0a02c4;
        /**  Summary text when turning hotspot on 
         */
        public: static const int wifi_tether_starting = 0x7f0a02c1;
        /**  Summary text when turning hotspot off 
         */
        public: static const int wifi_tether_stopping = 0x7f0a02c2;
        /**  Hint for unchanged fields 
         */
        public: static const int wifi_unchanged = 0x7f0a026d;
        /**  Hint for unspecified fields 
         */
        public: static const int wifi_unspecified = 0x7f0a026e;
        /**  Do not translate. Used for diagnostic screens, precise translation is not necessary
         Button text on Wifi Status screen
         */
        public: static const int wifi_update = 0x7f0a02d2;
        /**  Setting Checkbox title whether to enable WiFi Verbose Logging. [CHAR LIMIT=40] 
         */
        public: static const int wifi_verbose_logging = 0x7f0a055e;
        /**  Setting Checkbox summary whether to enable Wifi verbose Logging [CHAR LIMIT=80] 
         */
        public: static const int wifi_verbose_logging_summary = 0x7f0a0562;
        /**  Substring of status line when Wi-Fi Protected Setup (WPS) is available and
         string is listed first [CHAR LIMIT=20]
         */
        public: static const int wifi_wps_available_first_item = 0x7f0a0274;
        /**  Substring of wifi status when Wi-Fi Protected Setup (WPS) is available and
         string is listed after a wifi_secured_* string
         */
        public: static const int wifi_wps_available_second_item = 0x7f0a0275;
        /**  Text displayed when WPS succeeds [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_complete = 0x7f0a0253;
        /**  Text displayed when Wi-Fi is connected through WPS [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_connected = 0x7f0a0254;
        /**  Text displayed when WPS fails due to authentication issues [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_failed_auth = 0x7f0a0259;
        /**  Text displayed when WPS fails to start [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_failed_generic = 0x7f0a0256;
        /**  Text displayed when WPS fails due to another session [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_failed_overlap = 0x7f0a025a;
        /**  Text displayed when WPS fails to TKIP [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_failed_tkip = 0x7f0a0258;
        /**  Text displayed when WPS fails due to WEP [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_failed_wep = 0x7f0a0257;
        /**  Text displayed when WPS setup is in progress [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_in_progress = 0x7f0a0255;
        /**  Message in WriteWifiConfigToNfcDialog when prompted to enter network password [CHAR_LIMIT=40] 
         */
        public: static const int wifi_wps_nfc_enter_password = 0x7f0a0276;
        /**  Message in WPS dialog for PBC after start up [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_onstart_pbc = 0x7f0a0251;
        /**  Message in WPS dialog for PIN after start up [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_onstart_pin = 0x7f0a0252;
        /**  Message in WPS dialog at start up [CHAR LIMIT=150] 
         */
        public: static const int wifi_wps_setup_msg = 0x7f0a0250;
        /**  Title for the WPS setup dialog [CHAR LIMIT=50] 
         */
        public: static const int wifi_wps_setup_title = 0x7f0a024f;
        public: static const int wimax_settings = 0x7f0a0751;
        public: static const int wimax_settings_summary = 0x7f0a0989;
        /**  UI debug setting: scaling factor for window animations [CHAR LIMIT=25] 
         */
        public: static const int window_animation_scale_title = 0x7f0a078c;
        /**  Wireless Settings screen title for things like Wi-Fi, bluetooth, airplane mode. 
         */
        public: static const int wireless_networks_settings_title = 0x7f0a0106;
        /**  Wizard back button label [CHAR LIMIT=25] 
         */
        public: static const int wizard_back = 0x7f0a08a8;
        /**  Wizard next button label [CHAR LIMIT=25] 
         */
        public: static const int wizard_finish = 0x7f0a08aa;
        /**  Wizard next button label [CHAR LIMIT=25] 
         */
        public: static const int wizard_next = 0x7f0a08a9;
        /**  Work profile removal confirmation message [CHAR LIMIT=none] 
         */
        public: static const int work_profile_confirm_remove_message = 0x7f0a084b;
        /**  Work profile removal confirmation title [CHAR LIMIT=25] 
         */
        public: static const int work_profile_confirm_remove_title = 0x7f0a0848;
        /**  Work SIM title.  [CHAR LIMIT=50] 
         */
        public: static const int work_sim_title = 0x7f0a0898;
        /**  Text for button to confirm writing tag 
         */
        public: static const int write_tag = 0x7f0a08f2;
        /**  Instructions telling the user that they entered the wrong SIM PIN for the last time.
         Displayed in a dialog box.  [CHAR LIMIT=100] 
         */
        public: static const int wrong_pin_code_pukked = 0x7f0a034d;
        /**  Strings for Dialog yes button 
         */
        public: static const int yes = 0x7f0a0006;
        /**  Button label for generic YES action [CHAR LIMIT=20] 
         */
        public: static const int yes_all_caps = 0x7f0a00fe;
        /**  [CHAR LIMIT=80] Zen mode settings: Reminder text about alarms 
         */
        public: static const int zen_mode_alarm_info = 0x7f0a0940;
        /**  [CHAR LIMIT=40] Zen mode settings: Automation category text 
         */
        public: static const int zen_mode_automation_category = 0x7f0a0935;
        /**  [CHAR LIMIT=30] Zen mode settings: Exit condition selection dialog, default option 
         */
        public: static const int zen_mode_default_option = 0x7f0a0930;
        /**  [CHAR LIMIT=60] Zen mode settings: Downtime category text 
         */
        public: static const int zen_mode_downtime_category = 0x7f0a0932;
        /**  [CHAR LIMIT=40] Zen mode settings: Downtime days option title 
         */
        public: static const int zen_mode_downtime_days = 0x7f0a0933;
        /**  [CHAR LIMIT=40] Zen mode settings: Downtime days option value, no days set 
         */
        public: static const int zen_mode_downtime_days_none = 0x7f0a0934;
        /**  [CHAR LIMIT=20] Zen mode settings: End time option 
         */
        public: static const int zen_mode_end_time = 0x7f0a0946;
        /**  [CHAR LIMIT=20] Zen mode settings: End time option: Summary text value format 
         */
        public: static const int zen_mode_end_time_summary_format = 0x7f0a0947;
        /**  [CHAR LIMIT=40] Zen mode settings: Entry conditions option: value when blank 
         */
        public: static const int zen_mode_entry_conditions_summary_none = 0x7f0a0938;
        /**  [CHAR LIMIT=40] Zen mode settings: Entry conditions option: title 
         */
        public: static const int zen_mode_entry_conditions_title = 0x7f0a0936;
        /**  [CHAR LIMIT=50] Zen mode settings: Events option 
         */
        public: static const int zen_mode_events = 0x7f0a093f;
        /**  [CHAR LIMIT=50] Zen mode settings: From option 
         */
        public: static const int zen_mode_from = 0x7f0a093b;
        /**  [CHAR LIMIT=30] Zen mode settings: From option value: Anyone 
         */
        public: static const int zen_mode_from_anyone = 0x7f0a093c;
        /**  [CHAR LIMIT=30] Zen mode settings: From option value: Contacts 
         */
        public: static const int zen_mode_from_contacts = 0x7f0a093d;
        /**  [CHAR LIMIT=30] Zen mode settings: From option value: Starred contacts 
         */
        public: static const int zen_mode_from_starred = 0x7f0a093e;
        /**  [CHAR LIMIT=40] Zen mode settings: Important category text 
         */
        public: static const int zen_mode_important_category = 0x7f0a0931;
        /**  [CHAR LIMIT=20] Zen mode settings: Messages option 
         */
        public: static const int zen_mode_messages = 0x7f0a093a;
        /**  Sound & notification > Sound section: Zen mode option: Important interruptions [CHAR LIMIT=60] 
         */
        public: static const int zen_mode_option_important_interruptions = 0x7f0a0902;
        /**  Sound & notification > Sound section: Zen mode option: No interruptions [CHAR LIMIT=60] 
         */
        public: static const int zen_mode_option_no_interruptions = 0x7f0a0903;
        /**  Sound & notification > Sound section: Zen mode option: Off [CHAR LIMIT=60] 
         */
        public: static const int zen_mode_option_off = 0x7f0a0901;
        /**  Sound & notification > Sound section: Title for the zen mode option. [CHAR LIMIT=60] 
         */
        public: static const int zen_mode_option_title = 0x7f0a08ff;
        /**  Sound & notification > Sound section: Title for the zen mode option for devices without voice. [CHAR LIMIT=60] 
         */
        public: static const int zen_mode_option_title_novoice = 0x7f0a0900;
        /**  [CHAR LIMIT=20] Zen mode settings: Phone calls option 
         */
        public: static const int zen_mode_phone_calls = 0x7f0a0939;
        /**  Sound & notification > Sound section: Title for the Interruptions option and associated settings page. [CHAR LIMIT=30] 
         */
        public: static const int zen_mode_settings_title = 0x7f0a08fe;
        /**  [CHAR LIMIT=20] Zen mode settings: Start time option 
         */
        public: static const int zen_mode_start_time = 0x7f0a0945;
        /**  [CHAR LIMIT=20] Zen mode settings: When option 
         */
        public: static const int zen_mode_when = 0x7f0a0941;
        /**  [CHAR LIMIT=20] Zen mode settings: When option value: Every night 
         */
        public: static const int zen_mode_when_every_night = 0x7f0a0943;
        /**  [CHAR LIMIT=20] Zen mode settings: When option value: Never 
         */
        public: static const int zen_mode_when_never = 0x7f0a0942;
        /**  [CHAR LIMIT=20] Zen mode settings: When option value: Weeknights 
         */
        public: static const int zen_mode_when_weeknights = 0x7f0a0944;
        /**  Date & time setting screen setting check box title if the time zone should be determined automatically [CHAR LIMIT=25] 
         */
        public: static const int zone_auto = 0x7f0a011d;
        /**  Date & time setting screen setting option summary text when Automatic time zone check box is clear
        [CHAR LIMIT=100] 
         */
        public: static const int zone_auto_summaryOff = 0x7f0a011f;
        /**  Date & time setting screen setting option summary text when Automatic time zone check box is selected (that is, when date and time should be determined automatically)
        [CHAR LIMIT=100]  
         */
        public: static const int zone_auto_summaryOn = 0x7f0a011e;
        /**  Menu item on Select time zone screen 
         */
        public: static const int zone_list_menu_sort_alphabetically = 0x7f0a012a;
        /**  Menu item on Select time zone screen 
         */
        public: static const int zone_list_menu_sort_by_timezone = 0x7f0a012b;
    };
    public: class style {
        public: static const int ApnPreference = 0x7f0f002f;
        public: static const int CryptKeeperBlankTheme = 0x7f0f0024;
        public: static const int KeyguardAppWidgetItem = 0x7f0f002a;
        public: static const int PreferenceFragmentListSinglePane = 0x7f0f0010;
        public: static const int PreferenceFragmentStyle = 0x7f0f0013;
        public: static const int PreferenceHeaderListSinglePane = 0x7f0f000f;
        public: static const int PreferenceHeaderPanelSinglePane = 0x7f0f000d;
        public: static const int PreferencePanelSinglePane = 0x7f0f000e;
        public: static const int SecurityPreferenceButton = 0x7f0f0026;
        public: static const int SecurityPreferenceButtonContainer = 0x7f0f0025;
        public: static const int SettingsPreferenceHeaderList = 0x7f0f0012;
        public: static const int SettingsPreferenceHeaderPanel = 0x7f0f0011;
        public: static const int SetupAddWifiNetwork = 0x7f0f0019;
        /**  Alternate title style used for some tablet layouts 
         */
        public: static const int SetupCardTitle = 0x7f0f0017;
        public: static const int SetupTitle = 0x7f0f0016;
        public: static const int SetupWizardDisableAppStartingTheme = 0x7f0f003a;
        public: static const int SetupWizardWifiTheme = 0x7f0f003b;
        public: static const int SetupWizardWifiTheme_Light = 0x7f0f003c;
        public: static const int TallTitleBarTheme = 0x7f0f000c;
        public: static const int TextAppearance = 0x7f0f0006;
        public: static const int TextAppearance_CategoryTitle = 0x7f0f0033;
        public: static const int TextAppearance_CryptKeeper_PasswordEntry = 0x7f0f000b;
        public: static const int TextAppearance_Medium = 0x7f0f0030;
        public: static const int TextAppearance_PagerTabs = 0x7f0f0029;
        public: static const int TextAppearance_PasswordEntry = 0x7f0f000a;
        public: static const int TextAppearance_RecentsTitle = 0x7f0f0036;
        public: static const int TextAppearance_ResultTitle = 0x7f0f0037;
        public: static const int TextAppearance_SetupWizardCardTitle = 0x7f0f0018;
        public: static const int TextAppearance_Small = 0x7f0f0031;
        public: static const int TextAppearance_Switch = 0x7f0f0032;
        public: static const int TextAppearance_TileSubTitle = 0x7f0f0035;
        public: static const int TextAppearance_TileTitle = 0x7f0f0034;
        public: static const int TextAppearance_info_label = 0x7f0f0007;
        public: static const int TextAppearance_info_small = 0x7f0f0008;
        public: static const int TextAppearance_info_value = 0x7f0f0009;
        public: static const int Theme_ActionBar = 0x7f0f0042;
        public: static const int Theme_ActionBar_SubSettings = 0x7f0f0043;
        public: static const int Theme_AlertDialog = 0x7f0f0049;
        public: static const int Theme_CreateShortCut = 0x7f0f0039;
        public: static const int Theme_CryptKeeper = 0x7f0f0047;
        public: static const int Theme_DialogWhenLarge = 0x7f0f0046;
        public: static const int Theme_Light_WifiDialog = 0x7f0f003e;
        public: static const int Theme_NotificationStation = 0x7f0f004a;
        public: static const int Theme_Settings = 0x7f0f0040;
        /**  Theme with no local references, used by AccountPreferenceBase where we have to inflate
         layouts against a remote context using our local theme colors. Due to the implementation
         details of Theme, we can't reference any local resources and MUST instead use the values
         directly. So use #ff263238 instead of @color/theme_primary and so on. 
         */
        public: static const int Theme_SettingsBase = 0x7f0f003f;
        public: static const int Theme_SubSettings = 0x7f0f0041;
        public: static const int Theme_SubSettingsDialogWhenLarge = 0x7f0f0048;
        public: static const int Theme_SwitchBar_Settings = 0x7f0f0044;
        public: static const int Theme_SwitchBar_SubSettings = 0x7f0f0045;
        public: static const int Theme_WifiDialog = 0x7f0f003d;
        /**  Used to color the switch bar controls 
         */
        public: static const int ThemeOverlay_SwitchBar = 0x7f0f004b;
        /**  We'd like to have this as 16dip hight including paddingTop/paddingBottom to
         be consistent with ProgressBar 
         */
        public: static const int TopDivider = 0x7f0f0015;
        public: static const int Transparent = 0x7f0f0023;
        public: static const int VertDivider = 0x7f0f0014;
        public: static const int Widget_TimePicker = 0x7f0f0038;
        public: static const int WifiAssistantButton = 0x7f0f002c;
        public: static const int WifiAssistantButton_Negative = 0x7f0f002d;
        public: static const int WifiAssistantButton_Positive = 0x7f0f002e;
        public: static const int WifiAssistantText = 0x7f0f002b;
        public: static const int bt_item = 0x7f0f001a;
        public: static const int bt_item_edit_content = 0x7f0f001c;
        public: static const int bt_item_label = 0x7f0f001b;
        public: static const int entry_layout = 0x7f0f0004;
        public: static const int form_value = 0x7f0f0005;
        public: static const int info_label = 0x7f0f0000;
        public: static const int info_layout = 0x7f0f0003;
        public: static const int info_small = 0x7f0f0002;
        public: static const int info_value = 0x7f0f0001;
        public: static const int setup_wizard_button = 0x7f0f0022;
        public: static const int vpn_label = 0x7f0f0027;
        public: static const int vpn_value = 0x7f0f0028;
        public: static const int wifi_item = 0x7f0f001d;
        public: static const int wifi_item_content = 0x7f0f001f;
        public: static const int wifi_item_edit_content = 0x7f0f0020;
        public: static const int wifi_item_label = 0x7f0f001e;
        public: static const int wifi_section = 0x7f0f0021;
    };
    public: class xml {
        public: static const int accessibility_daltonizer_settings = 0x7f050000;
        public: static const int accessibility_settings = 0x7f050001;
        public: static const int account_settings = 0x7f050002;
        public: static const int account_sync_settings = 0x7f050003;
        public: static const int add_account_settings = 0x7f050004;
        public: static const int apn_editor = 0x7f050005;
        public: static const int apn_settings = 0x7f050006;
        public: static const int app_notification_settings = 0x7f050007;
        public: static const int app_restrictions = 0x7f050008;
        public: static const int application_settings = 0x7f050009;
        public: static const int appwidget_info = 0x7f05000a;
        public: static const int battery_saver_settings = 0x7f05000b;
        public: static const int bluetooth_device_advanced = 0x7f05000c;
        public: static const int bluetooth_settings = 0x7f05000d;
        public: static const int captioning_settings = 0x7f05000e;
        public: static const int dashboard_categories = 0x7f05000f;
        public: static const int data_usage_metered_prefs = 0x7f050010;
        public: static const int date_time_prefs = 0x7f050011;
        public: static const int development_prefs = 0x7f050012;
        public: static const int device_info_memory = 0x7f050013;
        public: static const int device_info_settings = 0x7f050014;
        public: static const int device_info_status = 0x7f050015;
        public: static const int device_picker = 0x7f050016;
        public: static const int display_settings = 0x7f050017;
        public: static const int file_paths = 0x7f050018;
        public: static const int home_selection = 0x7f050019;
        public: static const int input_methods_prefs = 0x7f05001a;
        public: static const int language_settings = 0x7f05001b;
        public: static const int location_mode = 0x7f05001c;
        public: static const int location_settings = 0x7f05001d;
        public: static const int manage_accounts_settings = 0x7f05001e;
        public: static const int nfc_payment_settings = 0x7f05001f;
        public: static const int notification_settings = 0x7f050020;
        public: static const int other_sound_settings = 0x7f050021;
        public: static const int power_usage_summary = 0x7f050022;
        public: static const int print_job_settings = 0x7f050023;
        public: static const int print_settings = 0x7f050024;
        public: static const int privacy_settings = 0x7f050025;
        public: static const int process_stats_summary = 0x7f050026;
        public: static const int quick_launch_settings = 0x7f050027;
        public: static const int security_settings = 0x7f050028;
        public: static const int security_settings_biometric_weak = 0x7f050029;
        public: static const int security_settings_chooser = 0x7f05002a;
        public: static const int security_settings_encrypted = 0x7f05002b;
        public: static const int security_settings_lockscreen = 0x7f05002c;
        public: static const int security_settings_misc = 0x7f05002d;
        public: static const int security_settings_password = 0x7f05002e;
        public: static const int security_settings_pattern = 0x7f05002f;
        public: static const int security_settings_picker = 0x7f050030;
        public: static const int security_settings_pin = 0x7f050031;
        public: static const int security_settings_unencrypted = 0x7f050032;
        public: static const int sim_lock_settings = 0x7f050033;
        public: static const int sim_settings = 0x7f050034;
        public: static const int spellchecker_prefs = 0x7f050035;
        public: static const int sync_settings = 0x7f050036;
        public: static const int testing_settings = 0x7f050037;
        public: static const int testing_wifi_settings = 0x7f050038;
        public: static const int tether_prefs = 0x7f050039;
        public: static const int timezones = 0x7f05003a;
        public: static const int trust_agent_settings = 0x7f05003b;
        public: static const int tts_engine_settings = 0x7f05003c;
        public: static const int tts_settings = 0x7f05003d;
        public: static const int usage_access_settings = 0x7f05003e;
        public: static const int usb_settings = 0x7f05003f;
        public: static const int user_details_settings = 0x7f050040;
        public: static const int user_settings = 0x7f050041;
        public: static const int voice_input_settings = 0x7f050042;
        public: static const int vpn_settings2 = 0x7f050043;
        public: static const int wallpaper_settings = 0x7f050044;
        public: static const int wifi_access_points = 0x7f050045;
        public: static const int wifi_access_points_for_wifi_setup_xl = 0x7f050046;
        public: static const int wifi_advanced_settings = 0x7f050047;
        public: static const int wifi_display_saved_access_points = 0x7f050048;
        public: static const int wifi_display_settings = 0x7f050049;
        public: static const int wifi_p2p_settings = 0x7f05004a;
        public: static const int wifi_settings = 0x7f05004b;
        public: static const int wireless_settings = 0x7f05004c;
        public: static const int zen_mode_settings = 0x7f05004d;
    };
    public: class styleable {
        /** Attributes that can be used with a BatteryHistoryChart.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #BatteryHistoryChart_android_shadowColor com.android.settings:android_shadowColor}</code></td><td> Place a shadow of the specified color behind the text.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_android_shadowDx com.android.settings:android_shadowDx}</code></td><td> Horizontal offset of the shadow.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_android_shadowDy com.android.settings:android_shadowDy}</code></td><td> Vertical offset of the shadow.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_android_shadowRadius com.android.settings:android_shadowRadius}</code></td><td> Radius of the shadow.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_android_textAppearance com.android.settings:android_textAppearance}</code></td><td> Base text color, typeface, size, and style.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_android_textColor com.android.settings:android_textColor}</code></td><td> Text color.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_android_textSize com.android.settings:android_textSize}</code></td><td> Size of the text.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_android_textStyle com.android.settings:android_textStyle}</code></td><td> Style (bold, italic, bolditalic) for the text.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_android_typeface com.android.settings:android_typeface}</code></td><td> Typeface (normal, sans, serif, monospace) for the text.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_barPredictionColor com.android.settings:barPredictionColor}</code></td><td> Color of predicted future use part of chart.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_barPrimaryColor com.android.settings:barPrimaryColor}</code></td><td> Primary color of chart.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_chartMinHeight com.android.settings:chartMinHeight}</code></td><td> Minimum height of the chart itself.</td></tr>
           <tr><td><code>{@link #BatteryHistoryChart_headerAppearance com.android.settings:headerAppearance}</code></td><td> Text color, typeface, size, and style of header.</td></tr>
           </table>
           @see #BatteryHistoryChart_android_shadowColor
           @see #BatteryHistoryChart_android_shadowDx
           @see #BatteryHistoryChart_android_shadowDy
           @see #BatteryHistoryChart_android_shadowRadius
           @see #BatteryHistoryChart_android_textAppearance
           @see #BatteryHistoryChart_android_textColor
           @see #BatteryHistoryChart_android_textSize
           @see #BatteryHistoryChart_android_textStyle
           @see #BatteryHistoryChart_android_typeface
           @see #BatteryHistoryChart_barPredictionColor
           @see #BatteryHistoryChart_barPrimaryColor
           @see #BatteryHistoryChart_chartMinHeight
           @see #BatteryHistoryChart_headerAppearance
         */
        public: static const int BatteryHistoryChart[13];
        /**
          <p>
          @attr description
           Place a shadow of the specified color behind the text. 
          <p>This corresponds to the global attribute          resource symbol {@link com.android.settings.R.attr#android_shadowColor}.
          @attr name android:android_shadowColor
        */
        public: static const int BatteryHistoryChart_android_shadowColor = 5;
        /**
          <p>
          @attr description
           Horizontal offset of the shadow. 
          <p>This corresponds to the global attribute          resource symbol {@link com.android.settings.R.attr#android_shadowDx}.
          @attr name android:android_shadowDx
        */
        public: static const int BatteryHistoryChart_android_shadowDx = 6;
        /**
          <p>
          @attr description
           Vertical offset of the shadow. 
          <p>This corresponds to the global attribute          resource symbol {@link com.android.settings.R.attr#android_shadowDy}.
          @attr name android:android_shadowDy
        */
        public: static const int BatteryHistoryChart_android_shadowDy = 7;
        /**
          <p>
          @attr description
           Radius of the shadow. 
          <p>This corresponds to the global attribute          resource symbol {@link com.android.settings.R.attr#android_shadowRadius}.
          @attr name android:android_shadowRadius
        */
        public: static const int BatteryHistoryChart_android_shadowRadius = 8;
        /**
          <p>
          @attr description
           Base text color, typeface, size, and style. 
          <p>This corresponds to the global attribute          resource symbol {@link com.android.settings.R.attr#android_textAppearance}.
          @attr name android:android_textAppearance
        */
        public: static const int BatteryHistoryChart_android_textAppearance = 0;
        /**
          <p>
          @attr description
           Text color. 
          <p>This corresponds to the global attribute          resource symbol {@link com.android.settings.R.attr#android_textColor}.
          @attr name android:android_textColor
        */
        public: static const int BatteryHistoryChart_android_textColor = 4;
        /**
          <p>
          @attr description
           Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp). 
          <p>This corresponds to the global attribute          resource symbol {@link com.android.settings.R.attr#android_textSize}.
          @attr name android:android_textSize
        */
        public: static const int BatteryHistoryChart_android_textSize = 1;
        /**
          <p>
          @attr description
           Style (bold, italic, bolditalic) for the text. 
          <p>This corresponds to the global attribute          resource symbol {@link com.android.settings.R.attr#android_textStyle}.
          @attr name android:android_textStyle
        */
        public: static const int BatteryHistoryChart_android_textStyle = 3;
        /**
          <p>
          @attr description
           Typeface (normal, sans, serif, monospace) for the text. 
          <p>This corresponds to the global attribute          resource symbol {@link com.android.settings.R.attr#android_typeface}.
          @attr name android:android_typeface
        */
        public: static const int BatteryHistoryChart_android_typeface = 2;
        /**
          <p>
          @attr description
           Color of predicted future use part of chart. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:barPredictionColor
        */
        public: static const int BatteryHistoryChart_barPredictionColor = 11;
        /**
          <p>
          @attr description
           Primary color of chart. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:barPrimaryColor
        */
        public: static const int BatteryHistoryChart_barPrimaryColor = 10;
        /**
          <p>
          @attr description
           Minimum height of the chart itself. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
          <p>This is a private symbol.
          @attr name android:chartMinHeight
        */
        public: static const int BatteryHistoryChart_chartMinHeight = 12;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style of header. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:headerAppearance
        */
        public: static const int BatteryHistoryChart_headerAppearance = 9;
        /** Attributes that can be used with a ChartGridView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ChartGridView_android_textAppearance com.android.settings:android_textAppearance}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartGridView_android_textColor com.android.settings:android_textColor}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartGridView_borderDrawable com.android.settings:borderDrawable}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartGridView_primaryDrawable com.android.settings:primaryDrawable}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartGridView_secondaryDrawable com.android.settings:secondaryDrawable}</code></td><td></td></tr>
           </table>
           @see #ChartGridView_android_textAppearance
           @see #ChartGridView_android_textColor
           @see #ChartGridView_borderDrawable
           @see #ChartGridView_primaryDrawable
           @see #ChartGridView_secondaryDrawable
         */
        public: static const int ChartGridView[5];
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#android_textAppearance}
          attribute's value can be found in the {@link #ChartGridView} array.
          @attr name android:android_textAppearance
        */
        public: static const int ChartGridView_android_textAppearance = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#android_textColor}
          attribute's value can be found in the {@link #ChartGridView} array.
          @attr name android:android_textColor
        */
        public: static const int ChartGridView_android_textColor = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#borderDrawable}
          attribute's value can be found in the {@link #ChartGridView} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:borderDrawable
        */
        public: static const int ChartGridView_borderDrawable = 4;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#primaryDrawable}
          attribute's value can be found in the {@link #ChartGridView} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:primaryDrawable
        */
        public: static const int ChartGridView_primaryDrawable = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#secondaryDrawable}
          attribute's value can be found in the {@link #ChartGridView} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:secondaryDrawable
        */
        public: static const int ChartGridView_secondaryDrawable = 3;
        /** Attributes that can be used with a ChartNetworkSeriesView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ChartNetworkSeriesView_fillColor com.android.settings:fillColor}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartNetworkSeriesView_fillColorSecondary com.android.settings:fillColorSecondary}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartNetworkSeriesView_safeRegion com.android.settings:safeRegion}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartNetworkSeriesView_strokeColor com.android.settings:strokeColor}</code></td><td></td></tr>
           </table>
           @see #ChartNetworkSeriesView_fillColor
           @see #ChartNetworkSeriesView_fillColorSecondary
           @see #ChartNetworkSeriesView_safeRegion
           @see #ChartNetworkSeriesView_strokeColor
         */
        public: static const int ChartNetworkSeriesView[4];
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#fillColor}
          attribute's value can be found in the {@link #ChartNetworkSeriesView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:fillColor
        */
        public: static const int ChartNetworkSeriesView_fillColor = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#fillColorSecondary}
          attribute's value can be found in the {@link #ChartNetworkSeriesView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:fillColorSecondary
        */
        public: static const int ChartNetworkSeriesView_fillColorSecondary = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#safeRegion}
          attribute's value can be found in the {@link #ChartNetworkSeriesView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:safeRegion
        */
        public: static const int ChartNetworkSeriesView_safeRegion = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#strokeColor}
          attribute's value can be found in the {@link #ChartNetworkSeriesView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:strokeColor
        */
        public: static const int ChartNetworkSeriesView_strokeColor = 1;
        /** Attributes that can be used with a ChartSweepView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ChartSweepView_followAxis com.android.settings:followAxis}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartSweepView_labelColor com.android.settings:labelColor}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartSweepView_labelSize com.android.settings:labelSize}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartSweepView_labelTemplate com.android.settings:labelTemplate}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartSweepView_neighborMargin com.android.settings:neighborMargin}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartSweepView_safeRegion com.android.settings:safeRegion}</code></td><td></td></tr>
           <tr><td><code>{@link #ChartSweepView_sweepDrawable com.android.settings:sweepDrawable}</code></td><td></td></tr>
           </table>
           @see #ChartSweepView_followAxis
           @see #ChartSweepView_labelColor
           @see #ChartSweepView_labelSize
           @see #ChartSweepView_labelTemplate
           @see #ChartSweepView_neighborMargin
           @see #ChartSweepView_safeRegion
           @see #ChartSweepView_sweepDrawable
         */
        public: static const int ChartSweepView[7];
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#followAxis}
          attribute's value can be found in the {@link #ChartSweepView} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td></td></tr>
<tr><td><code>vertical</code></td><td>1</td><td></td></tr>
</table>
          @attr name android:followAxis
        */
        public: static const int ChartSweepView_followAxis = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#labelColor}
          attribute's value can be found in the {@link #ChartSweepView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:labelColor
        */
        public: static const int ChartSweepView_labelColor = 5;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#labelSize}
          attribute's value can be found in the {@link #ChartSweepView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:labelSize
        */
        public: static const int ChartSweepView_labelSize = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#labelTemplate}
          attribute's value can be found in the {@link #ChartSweepView} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:labelTemplate
        */
        public: static const int ChartSweepView_labelTemplate = 4;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#neighborMargin}
          attribute's value can be found in the {@link #ChartSweepView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:neighborMargin
        */
        public: static const int ChartSweepView_neighborMargin = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#safeRegion}
          attribute's value can be found in the {@link #ChartSweepView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:safeRegion
        */
        public: static const int ChartSweepView_safeRegion = 6;
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#sweepDrawable}
          attribute's value can be found in the {@link #ChartSweepView} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:sweepDrawable
        */
        public: static const int ChartSweepView_sweepDrawable = 0;
        /** Attributes that can be used with a ChartView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ChartView_optimalWidth com.android.settings:optimalWidth}</code></td><td> optimal width of the chart </td></tr>
           <tr><td><code>{@link #ChartView_optimalWidthWeight com.android.settings:optimalWidthWeight}</code></td><td> how to weight extra space beyond optimal width </td></tr>
           </table>
           @see #ChartView_optimalWidth
           @see #ChartView_optimalWidthWeight
         */
        public: static const int ChartView[2];
        /**
          <p>
          @attr description
           optimal width of the chart 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:optimalWidth
        */
        public: static const int ChartView_optimalWidth = 0;
        /**
          <p>
          @attr description
           how to weight extra space beyond optimal width 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:optimalWidthWeight
        */
        public: static const int ChartView_optimalWidthWeight = 1;
        /** Attributes that can be used with a IconPreferenceScreen.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #IconPreferenceScreen_icon com.android.settings:icon}</code></td><td></td></tr>
           </table>
           @see #IconPreferenceScreen_icon
         */
        public: static const int IconPreferenceScreen[1];
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#icon}
          attribute's value can be found in the {@link #IconPreferenceScreen} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:icon
        */
        public: static const int IconPreferenceScreen_icon = 0;
        /** Attributes that can be used with a PercentageBarChart.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PercentageBarChart_emptyColor com.android.settings:emptyColor}</code></td><td> Background color </td></tr>
           <tr><td><code>{@link #PercentageBarChart_minTickWidth com.android.settings:minTickWidth}</code></td><td> Minimum tick width for each slice in the bar chart.</td></tr>
           </table>
           @see #PercentageBarChart_emptyColor
           @see #PercentageBarChart_minTickWidth
         */
        public: static const int PercentageBarChart[2];
        /**
          <p>
          @attr description
           Background color 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:emptyColor
        */
        public: static const int PercentageBarChart_emptyColor = 0;
        /**
          <p>
          @attr description
           Minimum tick width for each slice in the bar chart. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:minTickWidth
        */
        public: static const int PercentageBarChart_minTickWidth = 1;
        /**  For Search 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Preference_keywords com.android.settings:keywords}</code></td><td></td></tr>
           </table>
           @see #Preference_keywords
         */
        public: static const int Preference[1];
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#keywords}
          attribute's value can be found in the {@link #Preference} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:keywords
        */
        public: static const int Preference_keywords = 0;
        /** Attributes that can be used with a SetupWizardIllustration.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SetupWizardIllustration_aspectRatio com.android.settings:aspectRatio}</code></td><td></td></tr>
           </table>
           @see #SetupWizardIllustration_aspectRatio
         */
        public: static const int SetupWizardIllustration[1];
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#aspectRatio}
          attribute's value can be found in the {@link #SetupWizardIllustration} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:aspectRatio
        */
        public: static const int SetupWizardIllustration_aspectRatio = 0;
        /** Attributes that can be used with a WifiEncryptionState.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #WifiEncryptionState_state_encrypted com.android.settings:state_encrypted}</code></td><td></td></tr>
           </table>
           @see #WifiEncryptionState_state_encrypted
         */
        public: static const int WifiEncryptionState[1];
        /**
          <p>This symbol is the offset where the {@link com.android.settings.R.attr#state_encrypted}
          attribute's value can be found in the {@link #WifiEncryptionState} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:state_encrypted
        */
        public: static const int WifiEncryptionState_state_encrypted = 0;
    };
};
};
};
};

#endif // __Elastos_Droid_Settings_R_H__
