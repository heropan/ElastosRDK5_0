module
{

    namespace Elastos {
    namespace Droid {
    namespace Utility {
    /**
     * ArraySet is a generic set data structure that is designed to be more memory efficient than a
     * traditional {@link java.util.HashSet}.  The design is very similar to
     * {@link ArrayMap}, with all of the caveats described there.  This implementation is
     * separate from ArrayMap, however, so the Object array contains only one item for each
     * entry in the set (instead of a pair for a mapping).
     *
     * <p>Note that this implementation is not intended to be appropriate for data structures
     * that may contain large numbers of items.  It is generally slower than a traditional
     * HashSet, since lookups require a binary search and adds and removes require inserting
     * and deleting entries in the array.  For containers holding up to hundreds of items,
     * the performance difference is not significant, less than 50%.</p>
     *
     * <p>Because this container is intended to better balance memory use, unlike most other
     * standard Java containers it will shrink its array as items are removed from it.  Currently
     * you have no control over this shrinking -- if you set a capacity and then remove an
     * item, it may reduce the capacity to better match the current size.  In the future an
     * explicit call to set the capacity should turn off this aggressive shrinking behavior.</p>
     *
     * @hide
     */
    /**
     * @Involved
     * interface ICollection;
     * interface ISet;
     */
    interface IArraySet {
        /**
         * Ensure the array map can hold at least <var>minimumCapacity</var>
         * items.
         */
        EnsureCapacity(
            [in] Int32 minimumCapacity);

        /**
         * Returns the index of a value in the set.
         *
         * @param key The value to search for.
         * @return Returns the index of the value if it exists, else a negative integer.
         */
        GetIndexOf(
            [in] IInterface* key,
            [out] Int32* value);

        /**
         * Return the value at the given index in the array.
         * @param index The desired index, must be between 0 and {@link #size()}-1.
         * @return Returns the value stored at the given index.
         */
        GetValueAt(
            [in] Int32 index,
            [out] IInterface** outface);

        /**
         * Perform a {@link #add(Object)} of all values in <var>array</var>
         * @param array The array whose contents are to be retrieved.
         */
        AddAll(
            [in] IArraySet* array);

        /**
         * Remove the key/value mapping at the given index.
         * @param index The desired index, must be between 0 and {@link #size()}-1.
         * @return Returns the value that was stored at this index.
         */
        RemoveAt(
            [in] Int32 index,
            [out] IInterface** outface);
    }

    } // namespace Utility
    } // namespace Droid
    } // namespace Elastos
}
