
module
{

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {


        /**
         * Public API for controlling the Bluetooth Headset Service.
         * This includes both Bluetooth Headset and Handsfree (v1.5) profiles.
         * <p>
         * BluetoothHeadset is a proxy object for controlling the Bluetooth Headset Service via IPC.
         * <p>
         * Use getProfileProxy(Context, BluetoothProfile.ServiceListener, int) to get the BluetoothHeadset proxy object.
         * Use closeProfileProxy(int, BluetoothProfile) to close the service connection.
         *
         * @sa getProfileProxy(Context, BluetoothProfile.ServiceListener, int)
         * @sa closeProfileProxy(int, BluetoothProfile)
         * <p>
         * Android only supports one connected Bluetooth Headset at a time. Each method is protected with its appropriate permission.
         *
         * @implements Elastos.Droid.Bluetooth.IBluetoothProfile
          */

        /**
         * @Involve
         * interface IBluetoothProfile
         */
        [local]
        interface IBluetoothHeadset {
            /**
             * Intent used to broadcast the change in the Audio Connection state of the
             * A2DP profile.
             *
             * <p>This intent will have 3 extras:
             * <ul>
             *   <li> #EXTRA_STATE - The current state of the profile. </li>
             *   <li> #EXTRA_PREVIOUS_STATE- The previous state of the profile. </li>
             *   <li> BluetoothDevice#EXTRA_DEVICE - The remote device. </li>
             * </ul>
             * <p>#EXTRA_STATE or #EXTRA_PREVIOUS_STATE can be any of
             * #STATE_AUDIO_CONNECTED, #STATE_AUDIO_DISCONNECTED,
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission
             * to receive.
             *
             * @sa #EXTRA_STATE
             * @sa #EXTRA_PREVIOUS_STATE
             * @sa BluetoothDevice#EXTRA_DEVICE
             * @sa #EXTRA_STATE
             * @sa #EXTRA_PREVIOUS_STATE
             * @sa #STATE_AUDIO_CONNECTED
             * @sa #STATE_AUDIO_DISCONNECTED
             * @sa android.Manifest.permission#BLUETOOTH
             */
            //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
            const String ACTION_CONNECTION_STATE_CHANGED = "android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED";

            /**
             * Intent used to broadcast the change in the Audio Connection state of the
             * A2DP profile.
             *
             * <p>This intent will have 3 extras:
             * <ul>
             *   <li> #EXTRA_STATE - The current state of the profile. </li>
             *   <li> #EXTRA_PREVIOUS_STATE- The previous state of the profile. </li>
             *   <li> BluetoothDevice#EXTRA_DEVICE - The remote device. </li>
             * </ul>
             * <p>#EXTRA_STATE or #EXTRA_PREVIOUS_STATE can be any of
             * #STATE_AUDIO_CONNECTED, #STATE_AUDIO_DISCONNECTED,
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission
             * to receive.
             *
             * @sa #EXTRA_STATE
             * @sa #EXTRA_PREVIOUS_STATE
             * @sa BluetoothDevice#EXTRA_DEVICE
             * @sa #EXTRA_STATE
             * @sa #EXTRA_PREVIOUS_STATE
             * @sa #STATE_AUDIO_CONNECTED
             * @sa #STATE_AUDIO_DISCONNECTED
             * @sa android.Manifest.permission#BLUETOOTH
             */
            //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
            const String ACTION_AUDIO_STATE_CHANGED = "android.bluetooth.headset.profile.action.AUDIO_STATE_CHANGED";


            /**
             * Intent used to broadcast that the headset has posted a
             * vendor-specific event.
             *
             * <p>This intent will have 4 extras and 1 category.
             * <ul>
             *  <li> BluetoothDevice#EXTRA_DEVICE - The remote Bluetooth Device
             *       </li>
             *  <li> #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD - The vendor
             *       specific command </li>
             *  <li> #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE - The AT
             *       command type which can be one of  #AT_CMD_TYPE_READ,
             *       #AT_CMD_TYPE_TEST, or #AT_CMD_TYPE_SET,
             *       #AT_CMD_TYPE_BASIC, #AT_CMD_TYPE_ACTION. </li>
             *  <li> #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS - Command
             *       arguments. </li>
             * </ul>
             *
             * @sa BluetoothDevice#EXTRA_DEVICE
             * @sa #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD
             * @sa #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             * @sa #AT_CMD_TYPE_READ
             * @sa #AT_CMD_TYPE_TEST
             * @sa #AT_CMD_TYPE_SET
             * @sa #AT_CMD_TYPE_BASIC
             * @sa #AT_CMD_TYPE_ACTION
             * @sa #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS
             *
             *<p> The category is the Company ID of the vendor defining the
             * vendor-specific command. BluetoothAssignedNumbers
             *
             * @sa BluetoothAssignedNumbers
             *
             * For example, for Plantronics specific events
             * Category will be #VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY.55
             *
             * @sa #VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY.55
             *
             * <p> For example, an AT+XEVENT=foo,3 will get translated into
             * <ul>
             *   <li> EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD = +XEVENT </li>
             *   <li> EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE = AT_CMD_TYPE_SET </li>
             *   <li> EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS = foo, 3 </li>
             * </ul>
             * <p>Requires {@sa android.Manifest.permission#BLUETOOTH} permission
             * to receive.
             */
            //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
            const String ACTION_VENDOR_SPECIFIC_HEADSET_EVENT = "android.bluetooth.headset.action.VENDOR_SPECIFIC_HEADSET_EVENT";

            /**
             * A String extra field in #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT
             * intents that contains the name of the vendor-specific command.
             *
             * @sa #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT
             */
            const String EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD = "android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_CMD";

            /**
             * An Int32 extra field in #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT
             * intents that contains the AT command type of the vendor-specific command.
             *
             * @sa #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT
             */
            const String EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE = "android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE";

            /**
             * AT command type READ used with
             * #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             * For example, AT+VGM?. There are no arguments for this command type.
             *
             * @sa #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             */
            const Int32 AT_CMD_TYPE_READ = 0;

            /**
             * AT command type TEST used with
             * #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             * For example, AT+VGM=?. There are no arguments for this command type.
             *
             * @sa #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             */
            const Int32 AT_CMD_TYPE_TEST = 1;

            /**
             * AT command type SET used with
             * #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             * For example, AT+VGM=<args>.
             *
             * @sa #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             */
            const Int32 AT_CMD_TYPE_SET = 2;

            /**
             * AT command type BASIC used with
             * #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             * For example, ATD. Single character commands and everything following the
             * character are arguments.
             *
             * @sa #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             */
            const Int32 AT_CMD_TYPE_BASIC = 3;

            /**
             * AT command type ACTION used with
             * #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             * For example, AT+CHUP. There are no arguments for action commands.
             *
             * @sa #EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE
             */
            const Int32 AT_CMD_TYPE_ACTION = 4;

            /**
             * A Parcelable String array extra field in
             * #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT intents that contains
             * the arguments to the vendor-specific command.
             *
             * @sa #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT
             */
            const String EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS =
                "android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_ARGS";

            /**
             * The intent category to be used with  #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT
             * for the companyId
             *
             * @sa #ACTION_VENDOR_SPECIFIC_HEADSET_EVENT
             */
            const String VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY  =
                "android.bluetooth.headset.intent.category.companyid";

            /**
             * A vendor-specific command for unsolicited result code.
             */
            const String VENDOR_RESULT_CODE_COMMAND_ANDROID = "+ANDROID";

            /**
             * Headset state when SCO audio is connected.
             * This state can be one of
             * #EXTRA_STATE or #EXTRA_PREVIOUS_STATE of
             * #ACTION_AUDIO_STATE_CHANGED intent.
             *
             * @sa #EXTRA_STATE
             * @sa #EXTRA_PREVIOUS_STATE
             * @sa #ACTION_AUDIO_STATE_CHANGED
             */
            const Int32 STATE_AUDIO_DISCONNECTED = 10;

            /**
             * Headset state when SCO audio is connected.
             * This state can be one of
             * #EXTRA_STATE or #EXTRA_PREVIOUS_STATE of
             * #ACTION_AUDIO_STATE_CHANGED intent.
             *
             * @sa #EXTRA_STATE
             * @sa #EXTRA_PREVIOUS_STATE
             * @sa #ACTION_AUDIO_STATE_CHANGED
             */
            const Int32 STATE_AUDIO_CONNECTING = 11;

            /**
             * Headset state when SCO audio is connected.
             * This state can be one of
             * #EXTRA_STATE or #EXTRA_PREVIOUS_STATE of
             * #ACTION_AUDIO_STATE_CHANGED intent.
             *
             * @sa #EXTRA_STATE
             * @sa #EXTRA_PREVIOUS_STATE
             * @sa #ACTION_AUDIO_STATE_CHANGED
             */
            const Int32 STATE_AUDIO_CONNECTED = 12;

            /**
             * Close the connection to the backing service.
             * Other public functions of BluetoothHeadset will return default error
             * results once close() has been called. Multiple invocations of close()
             * are ok.
             */
            /*package*/ Close();

            /**
             * Initiate connection to a profile of the remote bluetooth device.
             *
             * <p> Currently, the system supports only 1 connection to the
             * headset/handsfree profile. The API will automatically disconnect connected
             * devices before connecting.
             *
             * <p> This API returns false in scenarios like the profile on the
             * device is already connected or Bluetooth is not turned on.
             * When this API returns true, it is guaranteed that
             * connection state intent for the profile will be broadcasted with
             * the state. Users can get the connection state of the profile
             * from this intent.
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH_ADMIN
             * permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH_ADMIN
             *
             * @param device Remote Bluetooth Device
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            Connect(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Initiate disconnection from a profile
             *
             * <p> This API will return false in scenarios like the profile on the
             * Bluetooth device is not in connected state etc. When this API returns,
             * true, it is guaranteed that the connection state change
             * intent will be broadcasted with the state. Users can get the
             * disconnection state of the profile from this intent.
             *
             * <p> If the disconnection is initiated by a remote device, the state
             * will transition from #STATE_CONNECTED to
             * #STATE_DISCONNECTED. If the disconnect is initiated by the
             * host (local) device the state will transition from
             * #STATE_CONNECTED to state #STATE_DISCONNECTING to
             * state #STATE_DISCONNECTED. The transition to
             * #STATE_DISCONNECTING can be used to distinguish between the
             * two scenarios.
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH_ADMIN
             * permission.
             *
             * @sa #STATE_CONNECTED
             * @sa #STATE_DISCONNECTED
             * @sa #STATE_CONNECTED
             * @sa #STATE_DISCONNECTING
             * @sa #STATE_DISCONNECTED
             * @sa #STATE_DISCONNECTING
             * @sa android.Manifest.permission#BLUETOOTH_ADMIN
             *
             * @param device Remote Bluetooth Device
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            Disconnect(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Set priority of the profile
             *
             * <p> The device should already be paired.
             *  Priority can be one of #PRIORITY_ON or #PRIORITY_OFF,
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH_ADMIN
             * permission.
             *
             * @sa #PRIORITY_ON
             * @sa #PRIORITY_OFF
             * @sa android.Manifest.permission#BLUETOOTH_ADMIN
             *
             * @param device Paired bluetooth device
             * @param priority
             * @return true if priority is set, false on error
             * @hide
             */
            SetPriority(
                [in] IBluetoothDevice* device,
                [in] Int32 priority,
                [out] Boolean* result);

            /**
             * Get the priority of the profile.
             *
             * <p> The priority can be any of:
             * #PRIORITY_AUTO_CONNECT, #PRIORITY_OFF
             * #PRIORITY_ON, #PRIORITY_UNDEFINED
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa #PRIORITY_AUTO_CONNECT
             * @sa #PRIORITY_OFF
             * @sa #PRIORITY_ON
             * @sa #PRIORITY_UNDEFINED
             * @sa android.Manifest.permission#BLUETOOTH
             * @param device Bluetooth device
             * @return priority of the device
             * @hide
             */
            GetPriority(
                [in] IBluetoothDevice* device,
                [out] Int32* priority);

            /**
             * Start Bluetooth voice recognition. This methods sends the voice
             * recognition AT command to the headset and establishes the
             * audio connection.
             *
             * <p> Users can listen to #ACTION_AUDIO_STATE_CHANGED.
             * If this function returns true, this intent will be broadcasted with
             * #EXTRA_STATE set to #STATE_AUDIO_CONNECTING.
             *
             * <p> #EXTRA_STATE will transition from
             * #STATE_AUDIO_CONNECTING to #STATE_AUDIO_CONNECTED when
             * audio connection is established and to #STATE_AUDIO_DISCONNECTED
             * in case of failure to establish the audio connection.
             *
             * @sa #ACTION_AUDIO_STATE_CHANGED
             * @sa #EXTRA_STATE
             * @sa #STATE_AUDIO_CONNECTING
             *
             * @sa #EXTRA_STATE
             * @sa #STATE_AUDIO_CONNECTING
             * @sa #STATE_AUDIO_CONNECTED
             * @sa #STATE_AUDIO_DISCONNECTED
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param device Bluetooth headset
             * @return false if there is no headset connected of if the
             *               connected headset doesn't support voice recognition
             *               or on error, true otherwise
             */
            StartVoiceRecognition(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Stop Bluetooth Voice Recognition mode, and shut down the
             * Bluetooth audio path.
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param device Bluetooth headset
             * @return false if there is no headset connected
             *               or on error, true otherwise
             */
            StopVoiceRecognition(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Check if Bluetooth SCO audio is connected.
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param device Bluetooth headset
             * @return true if SCO is connected,
             *         false otherwise or on error
             */
            IsAudioConnected(
                [in] IBluetoothDevice* device,
                [out] Boolean* isConnected);

            /**
             * Get battery usage hint for Bluetooth Headset service.
             * This is a monotonically increasing integer. Wraps to 0 at
             * Integer.MAX_INT, and at boot.
             * Current implementation returns the number of AT commands handled since
             * boot. This is a good indicator for spammy headset/handsfree units that
             * can keep the device awake by polling for cellular status updates. As a
             * rule of thumb, each AT command prevents the CPU from sleeping for 500 ms
             *
             * @param device the bluetooth headset.
             * @return monotonically increasing battery usage hint, or a negative error
             *         code on error
             * @hide
             */
            GetBatteryUsageHint(
                [in] IBluetoothDevice* device,
                [out] Int32* batteryHint);

            /**
             * Accept the incoming connection.
             * Note: This is an internal function and shouldn't be exposed
             *
             * @hide
             */
            AcceptIncomingConnect(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Reject the incoming connection.
             * @hide
             */
            RejectIncomingConnect(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Get the current audio state of the Headset.
             * Note: This is an internal function and shouldn't be exposed
             *
             * @hide
             */
            GetAudioState(
                [in] IBluetoothDevice* device,
                [out] Int32* state);

            /**
             * Check if Bluetooth SCO audio is connected.
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @return true if SCO is connected,
             *         false otherwise or on error
             * @hide
             */
            IsAudioOn(
                [out] Boolean* isAudioOn);

            /**
             * Initiates a connection of headset audio.
             * It setup SCO channel with remote connected headset device.
             *
             * @return true if successful
             *         false if there was some error such as
             *               there is no connected headset
             * @hide
             */
            ConnectAudio(
                [out] Boolean* result);

            /**
             * Initiates a disconnection of headset audio.
             * It tears down the SCO channel from remote headset device.
             *
             * @return true if successful
             *         false if there was some error such as
             *               there is no connected SCO channel
             * @hide
             */
            DisconnectAudio(
                [out] Boolean* result);

            /**
             * Initiates a SCO channel connection with the headset (if connected).
             * Also initiates a virtual voice call for Handsfree devices as many devices
             * do not accept SCO audio without a call.
             * This API allows the handsfree device to be used for routing non-cellular
             * call audio.
             *
             * @param device Remote Bluetooth Device
             * @return true if successful, false if there was some error.
             * @hide
             */
            StartScoUsingVirtualVoiceCall(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Terminates an ongoing SCO connection and the associated virtual
             * call.
             *
             * @param device Remote Bluetooth Device
             * @return true if successful, false if there was some error.
             * @hide
             */
            StopScoUsingVirtualVoiceCall(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Notify Headset of phone state change.
             * This is a backdoor for phone app to call BluetoothHeadset since
             * there is currently not a good way to get precise call state change outside
             * of phone app.
             *
             * @hide
             */
            PhoneStateChanged(
                [in] Int32 numActive,
                [in] Int32 numHeld,
                [in] Int32 callState,
                [in] String number,
                [in] Int32 type);

            /**
             * Send Headset of CLCC response
             *
             * @hide
             */
            ClccResponse(
                [in] Int32 index,
                [in] Int32 direction,
                [in] Int32 status,
                [in] Int32 mode,
                [in] Boolean mpty,
                [in] String number,
                [in] Int32 type);

            /**
             * Sends a vendor-specific unsolicited result code to the headset.
             *
             * <p>The actual string to be sent is <code>command + ": " + arg</code>.
             * For example, if {@code command} is {@link #VENDOR_RESULT_CODE_COMMAND_ANDROID} and {@code arg}
             * is {@code "0"}, the string <code>"+ANDROID: 0"</code> will be sent.
             *
             * <p>Currently only {@link #VENDOR_RESULT_CODE_COMMAND_ANDROID} is allowed as {@code command}.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
             *
             * @param device Bluetooth headset.
             * @param command A vendor-specific command.
             * @param arg The argument that will be attached to the command.
             * @return {@code false} if there is no headset connected, or if the command is not an allowed
             *         vendor-specific unsolicited result code, or on error. {@code true} otherwise.
             * @throws IllegalArgumentException if {@code command} is {@code null}.
             */
            SendVendorSpecificResultCode(
                [in] IBluetoothDevice* device,
                [in] String command,
                [in] String arg,
                [out] Boolean* result);

            /**
             * enable WBS codec setting.
             *
             * @return true if successful
             *         false if there was some error such as
             *               there is no connected headset
             * @hide
             */
            EnableWBS(
                [out] Boolean* result);

            /**
             * disable WBS codec settting. It set NBS codec.
             *
             * @return true if successful
             *         false if there was some error such as
             *               there is no connected headset
             * @hide
             */
            DisableWBS(
                [out] Boolean* result);
        }

    } // Bluetooth
    } // Droid
    } // Elastos
}
