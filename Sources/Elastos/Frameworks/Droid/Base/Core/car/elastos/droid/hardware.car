
module
{
    merge("hardware/Camera.car");
    merge("hardware/ISerialManager.car");
    merge("hardware/Sensor.car");
    merge("hardware/SensorEvent.car");
    merge("hardware/SensorEventListener.car");
    merge("hardware/SensorListener.car");
    merge("hardware/SensorManager.car");
    merge("hardware/SerialManager.car");
    merge("hardware/SerialPort.car");
    merge("hardware/SystemSensorManager.car");
    merge("hardware/ConsumerIrManager.car");
    merge("hardware/GeomagneticField.car");
    merge("hardware/SensorEventListener2.car");
    merge("hardware/TriggerEvent.car");
    merge("hardware/TriggerEventListener.car");
    merge("hardware/LegacySensorManager.car");
    merge("hardware/IConsumerIrService.car");

    merge("hardware/display/DisplayManager.car");
    merge("hardware/display/DisplayManagerGlobal.car");
    merge("hardware/display/DisplayManagerInternal.car");
    merge("hardware/display/DisplayViewport.car");
    merge("hardware/display/IDisplayManager.car");
    merge("hardware/display/IDisplayManagerCallback.car");
    merge("hardware/display/IVirtualDisplayCallback.car");
    merge("hardware/display/VirtualDisplay.car");
    merge("hardware/display/WifiDisplay.car");
    merge("hardware/display/WifiDisplaySessionInfo.car");
    merge("hardware/display/WifiDisplayStatus.car");

    merge("hardware/hdmi/HdmiClient.car");
    merge("hardware/hdmi/HdmiControlManager.car");
    merge("hardware/hdmi/HdmiDeviceInfo.car");
    merge("hardware/hdmi/HdmiHotplugEvent.car");
    merge("hardware/hdmi/HdmiPlaybackClient.car");
    merge("hardware/hdmi/HdmiPortInfo.car");
    merge("hardware/hdmi/HdmiRecordListener.car");
    merge("hardware/hdmi/HdmiRecordSources.car");
    merge("hardware/hdmi/HdmiTimerRecordSources.car");
    merge("hardware/hdmi/HdmiTvClient.car");
    merge("hardware/hdmi/IHdmiControlCallback.car");
    merge("hardware/hdmi/IHdmiControlService.car");
    merge("hardware/hdmi/IHdmiDeviceEventListener.car");
    merge("hardware/hdmi/IHdmiHotplugEventListener.car");
    merge("hardware/hdmi/IHdmiInputChangeListener.car");
    merge("hardware/hdmi/IHdmiMhlVendorCommandListener.car");
    merge("hardware/hdmi/IHdmiRecordListener.car");
    merge("hardware/hdmi/IHdmiSystemAudioModeChangeListener.car");
    merge("hardware/hdmi/IHdmiVendorCommandListener.car");

    merge("hardware/input/IInputManager.car");
    merge("hardware/input/IInputDevicesChangedListener.car");
    merge("hardware/input/InputDeviceIdentifier.car");
    merge("hardware/input/InputManager.car");
    merge("hardware/input/InputManagerInternal.car");
    merge("hardware/input/KeyboardLayout.car");
    merge("hardware/input/TouchCalibration.car");

    merge("hardware/location/ActivityChangedEvent.car");
    merge("hardware/location/ActivityRecognitionEvent.car");
    merge("hardware/location/ActivityRecognitionHardware.car");
    merge("hardware/location/GeofenceHardware.car");
    merge("hardware/location/GeofenceHardwareCallback.car");
    merge("hardware/location/GeofenceHardwareImpl.car");
    merge("hardware/location/GeofenceHardwareMonitorCallback.car");
    merge("hardware/location/GeofenceHardwareMonitorEvent.car");
    merge("hardware/location/GeofenceHardwareRequest.car");
    merge("hardware/location/GeofenceHardwareRequestParcelable.car");
    merge("hardware/location/GeofenceHardwareService.car");
    merge("hardware/location/IActivityRecognitionHardware.car");
    merge("hardware/location/IActivityRecognitionHardwareSink.car");
    merge("hardware/location/IActivityRecognitionHardwareWatcher.car");
    merge("hardware/location/IFusedLocationHardware.car");
    merge("hardware/location/IFusedLocationHardwareSink.car");
    merge("hardware/location/IGeofenceHardware.car");
    merge("hardware/location/IGeofenceHardwareCallback.car");
    merge("hardware/location/IGeofenceHardwareMonitorCallback.car");

    merge("hardware/soundtrigger/IRecognitionStatusCallback.car");
    merge("hardware/soundtrigger/KeyphraseEnrollmentInfo.car");
    merge("hardware/soundtrigger/KeyphraseMetadata.car");
    merge("hardware/soundtrigger/SoundTrigger.car");
    merge("hardware/soundtrigger/SoundTriggerModule.car");

    merge("hardware/usb/IUsbManager.car");
    merge("hardware/usb/UsbAccessory.car");
    merge("hardware/usb/UsbConstants.car");
    merge("hardware/usb/UsbDevice.car");
    merge("hardware/usb/UsbDeviceConnection.car");
    merge("hardware/usb/UsbEndpoint.car");
    merge("hardware/usb/UsbInterface.car");
    merge("hardware/usb/UsbManager.car");
    merge("hardware/usb/UsbRequest.car");
    merge("hardware/usb/UsbCameraManager.car");
    merge("hardware/usb/UsbConfiguration.car");

    merge("hardware/camera2/CaptureRequest.car");
    merge("hardware/camera2/CameraDevice.car");
    merge("hardware/camera2/CameraCaptureSession.car");
    merge("hardware/camera2/CameraCharacteristics.car");
    merge("hardware/camera2/CameraManager.car");
    merge("hardware/camera2/CameraMetadata.car");
    merge("hardware/camera2/CaptureFailure.car");
    merge("hardware/camera2/CaptureResult.car");
    merge("hardware/camera2/DngCreator.car");
    merge("hardware/camera2/TotalCaptureResult.car");
    merge("hardware/camera2/ICameraDeviceCallbacks.car");
    merge("hardware/camera2/ICameraDeviceUser.car");

    merge("hardware/camera2/dispatch/Dispatchable.car");
    merge("hardware/camera2/dispatch/MethodNameInvoker.car");

    merge("hardware/camera2/impl/CallbackProxies.car");
    merge("hardware/camera2/impl/CameraMetadataNative.car");
    merge("hardware/camera2/impl/CameraCaptureSessionImpl.car");
    merge("hardware/camera2/impl/CameraDeviceImpl.car");
    merge("hardware/camera2/impl/GetCommand.car");
    merge("hardware/camera2/impl/SetCommand.car");

    merge("hardware/camera2/legacy/BurstHolder.car");
    merge("hardware/camera2/legacy/RequestHolder.car");
    merge("hardware/camera2/legacy/LegacyRequest.car");
    merge("hardware/camera2/legacy/CameraDeviceState.car");
    merge("hardware/camera2/legacy/CaptureCollector.car");
    merge("hardware/camera2/legacy/GLThreadManager.car");
    merge("hardware/camera2/legacy/LegacyCameraDevice.car");
    merge("hardware/camera2/legacy/LegacyFaceDetectMapper.car");
    merge("hardware/camera2/legacy/LegacyFocusStateMapper.car");
    merge("hardware/camera2/legacy/LegacyMetadataMapper.car");
    merge("hardware/camera2/legacy/LegacyRequestMapper.car");
    merge("hardware/camera2/legacy/LegacyResultMapper.car");
    merge("hardware/camera2/legacy/ParameterUtils.car");
    merge("hardware/camera2/legacy/RequestHandlerThread.car");
    merge("hardware/camera2/legacy/RequestQueue.car");
    merge("hardware/camera2/legacy/RequestThreadManager.car");
    merge("hardware/camera2/legacy/SurfaceTextureRenderer.car");

    merge("hardware/camera2/marshal/Marshaler.car");
    merge("hardware/camera2/marshal/MarshalHelpers.car");
    merge("hardware/camera2/marshal/MarshalQueryable.car");
    merge("hardware/camera2/marshal/MarshalRegistry.car");

    merge("hardware/camera2/params/BlackLevelPattern.car");
    merge("hardware/camera2/params/ColorSpaceTransform.car");
    merge("hardware/camera2/params/Face.car");
    merge("hardware/camera2/params/RggbChannelVector.car");
    merge("hardware/camera2/params/LensShadingMap.car");
    merge("hardware/camera2/params/MeteringRectangle.car");
    merge("hardware/camera2/params/StreamConfigurationMap.car");
    merge("hardware/camera2/params/TonemapCurve.car");
    merge("hardware/camera2/params/HighSpeedVideoConfiguration.car");
    merge("hardware/camera2/params/ReprocessFormatsMap.car");
    merge("hardware/camera2/params/StreamConfiguration.car");
    merge("hardware/camera2/params/StreamConfigurationDuration.car");

    merge("hardware/camera2/utils/ArrayUtils.car");
    merge("hardware/camera2/utils/CloseableLock.car");
    merge("hardware/camera2/utils/HashCodeHelpers.car");
    merge("hardware/camera2/utils/ListUtils.car");
    merge("hardware/camera2/utils/ParamsUtils.car");
    merge("hardware/camera2/utils/SizeAreaComparator.car");
    merge("hardware/camera2/utils/TaskDrainer.car");
    merge("hardware/camera2/utils/TaskSingleDrainer.car");
    merge("hardware/camera2/utils/TypeReference.car");

    interface Elastos.Droid.Graphics.IRect;
    interface Elastos.Droid.Graphics.IPoint;
    interface Elastos.Droid.View.IDisplay;
    interface Elastos.Droid.View.ISurface;
    interface Elastos.Droid.View.IRotationWatcher;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Media.IAudioFormat;
    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Utility.IRational;
    interface Elastos.Droid.Utility.ISize;

    using interface Elastos.Utility.IUUID;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {

        class CConsumerIrManager {
            constructor(
                [in] IContext* context);

            interface IConsumerIrManager;
        }

        class CCarrierFrequencyRange {
            constructor(
                [in] Int32 min,
                [in] Int32 max);

            interface ICarrierFrequencyRange;
        }

        class CGeomagneticField {
            constructor(
                [in] Float gdLatitudeDeg,
                [in] Float gdLongitudeDeg,
                [in] Float altitudeMeters,
                [in] Int64 timeMillis);

            interface IGeomagneticField;
        }

        class CSensorEvent {
            constructor(
                [in] Int32 size);

            interface ISensorEvent;
        }

        class CSensor {
            constructor();

            interface ISensor;
        }

        singleton class CSensorManagerHelper {
            interface ISensorManagerHelper;
        }

        class CHardwareCamera {
            constructor();

            /** used by Camera#open, Camera#open(int) */
            constructor(
                [in] Int32 cameraId);

            /**
             * Create a legacy camera object.
             *
             * @param cameraId The hardware camera to access, between 0 and
             * {@link #getNumberOfCameras()}-1.
             * @param halVersion The HAL API version this camera device to be opened as.
             */
            constructor(
                [in] Int32 cameraId,
                [in] Int32 halVersion);

            interface IHardwareCamera;
        }

        singleton class CHardwareCameraHelper {
            interface IHardwareCameraHelper;
        }

        class CTriggerEvent {
            constructor(
                [in] Int32 size);

            interface ITriggerEvent;
        }

        class CLegacySensorManagerRotationWatcher{
            constructor();

            interface IRotationWatcher;
        }

    namespace Camera2 {
    namespace Params {
        [deprecated]
        class CBlackLevelPattern {
            constructor();

            constructor(
                [in] ArrayOf<Int32>* offsets);

            interface IBlackLevelPattern;
        }

        [deprecated]
        class CColorSpaceTransform {
            constructor();

            constructor(
                [in] ArrayOf<IRational*>* elements);

            constructor(
                [in] ArrayOf<Int32>* _elements);

            interface IColorSpaceTransform;
        }

        class CFace {
            constructor();

            constructor(
                [in] IRect* bounds,
                [in] Int32 score,
                [in] Int32 id,
                [in] IPoint* leftEyePosition,
                [in] IPoint* rightEyePosition,
                [in] IPoint* mouthPosition);

            constructor(
                [in] IRect* bounds,
                [in] Int32 score);

            interface IFace;
        }

        class CHighSpeedVideoConfiguration {
            constructor();

            constructor(
                [in] Int32 width,
                [in] Int32 height,
                [in] Int32 fpsMin,
                [in] Int32 fpsMax);

            interface IHighSpeedVideoConfiguration;
        }

        [deprecated]
        class CLensShadingMap {
            constructor();

            constructor(
                [in] ArrayOf<Float>* elements,
                [in] Int32 rows,
                [in] Int32 columns);

            interface ILensShadingMap;
        }

        class CMeteringRectangle {
            constructor();

            constructor(
                [in] Int32 x,
                [in] Int32 y,
                [in] Int32 width,
                [in] Int32 height,
                [in] Int32 meteringWeight);

            constructor(
                [in] IPoint* xy,
                [in] ISize* dimensions,
                [in] Int32 meteringWeight);

            constructor(
                [in] IRect* rect,
                [in] Int32 meteringWeight);

            interface IMeteringRectangle;
        }

        [deprecated]
        class CReprocessFormatsMap {
            constructor();

            constructor(
                [in] ArrayOf<Int32>* entry);

            interface IReprocessFormatsMap;
        }

        class CRggbChannelVector {
            constructor();

            constructor(
                [in] Float red,
                [in] Float greenEven,
                [in] Float greenOdd,
                [in] Float blue);

            interface IRggbChannelVector;
        }

        class CStreamConfiguration {
            constructor();

            constructor(
                [in] Int32 format,
                [in] Int32 width,
                [in] Int32 height,
                [in] Boolean input);

            interface IStreamConfiguration;
        }

        class CStreamConfigurationDuration {
            constructor();

            constructor(
                [in] Int32 format,
                [in] Int32 width,
                [in] Int32 height,
                [in] Int64 durationNs);

            interface IStreamConfigurationDuration;
        }

        [deprecated]
        class CTonemapCurve {
            constructor();

            constructor(
                [in] ArrayOf<Float>* red,
                [in] ArrayOf<Float>* green,
                [in] ArrayOf<Float>* blue);

            interface ITonemapCurve;
        }

        [deprecated]
        class CStreamConfigurationMap {
            constructor();

            constructor(
                [in] ArrayOf<IStreamConfiguration*>* configurations,
                [in] ArrayOf<IStreamConfigurationDuration*>* minFrameDurations,
                [in] ArrayOf<IStreamConfigurationDuration*>* stallDurations,
                [in] ArrayOf<IHighSpeedVideoConfiguration*>* highSpeedVideoConfigurations);

            interface IStreamConfigurationMap;
        }

    } // namespace Params
    } // namespace Camera2

    namespace Location {
        class CActivityRecognitionHardware {
            interface IActivityRecognitionHardware;
            interface IIActivityRecognitionHardware;
            interface IBinder;
        }
    } // namespace Location

    namespace Display {
        /**
         * Manages the properties of attached displays.
         * <p>
         * Get an instance of this class by calling
         * {@link android.content.Context#getSystemService(java.lang.String)
         * Context.getSystemService()} with the argument
         * {@link android.content.Context#DISPLAY_SERVICE}.
         * </p>
         */
        [local]
        class CDisplayManager {
            constructor(
                [in] IContext* ctx);

            interface IDisplayManager;
        }

        class CDisplayManagerCallback {
            constructor(
                [in] Handle32 owner);

            interface IIDisplayManagerCallback;
        }

        class CDisplayPowerRequest {
            constructor();

            constructor(
                [in] IDisplayPowerRequest* other);

            interface IDisplayPowerRequest;
        }

        class CVirtualDisplay {
            constructor(
                [in] IDisplayManagerGlobal* global,
                [in] IDisplay* display,
                [in] IIVirtualDisplayCallback* token,
                [in] ISurface* surface);

            interface IVirtualDisplay;
        }

        class CVirtualDisplayCallback {
            interface IVirtualDisplayCallback;
        }

        singleton class CDisplayManagerGlobalHelper {
            interface IDisplayManagerGlobalHelper;
        }
    } // namespace Display

    namespace Input {

        class CInputManagerInputDevicesChangedListener {
            constructor(
                [in] Handle32 inputManager);

            interface IInputDevicesChangedListener;
        }

        class CInputManager {
            interface IInputManager;
        }

        singleton class CInputManagerHelper {
            interface IInputManagerHelper;
        }

    } // namespace Input

    namespace Soundtrigger {

    class CSoundTriggerModuleProperties {
        constructor();

        /**
         * Create a segment of a carrier frequency range.
         *
         * @param min The minimum transmittable frequency in this range segment.
         * @param max The maximum transmittable frequency in this range segment.
         */
        constructor(
            [in] Int32 id,
            [in] String implementor,
            [in] String description,
            [in] String uuid,
            [in] Int32 _version,
            [in] Int32 maxSoundModels,
            [in] Int32 maxKeyphrases,
            [in] Int32 maxUsers,
            [in] Int32 recognitionModes,
            [in] Boolean supportsCaptureTransition,
            [in] Int32 maxBufferMs,
            [in] Boolean supportsConcurrentCapture,
            [in] Int32 powerConsumptionMw,
            [in] Boolean returnsTriggerInEvent);

        interface ISoundTriggerModuleProperties;
        interface IParcelable;
    }

    [deprecated]
    class CSoundTriggerSoundModel {
        constructor();

        constructor(
            [in] IUUID* uuid,
            [in] IUUID* vendorUuid,
            [in] Int32 type,
            [in] ArrayOf<Byte>* data);

        interface ISoundTriggerSoundModel;
    }

    [deprecated]
    class CSoundTriggerKeyphrase {
        constructor();

        constructor(
            [in] Int32 id,
            [in] Int32 recognitionModes,
            [in] String locale,
            [in] String text,
            [in] ArrayOf<Int32>* users);

        interface ISoundTriggerKeyphrase;
        interface IParcelable;
    }

    [deprecated]
    class CSoundTriggerKeyphraseSoundModel {
        constructor();

        constructor(
            [in] IUUID* uuid,
            [in] IUUID* vendorUuid,
            [in] ArrayOf<Byte>* data,
            [in] ArrayOf<ISoundTriggerKeyphrase*>* keyphrases);

        interface ISoundTriggerKeyphraseSoundModel;
        interface ISoundTriggerSoundModel;
        interface IParcelable;
    }

    [deprecated]
    class CSoundTriggerRecognitionEvent {
        constructor();

        constructor(
            [in] Int32 status,
            [in] Int32 soundModelHandle,
            [in] Boolean captureAvailable,
            [in] Int32 captureSession,
            [in] Int32 captureDelayMs,
            [in] Int32 capturePreambleMs,
            [in] Boolean triggerInData,
            [in] IAudioFormat* captureFormat,
            [in] ArrayOf<Byte>* data);

        interface ISoundTriggerRecognitionEvent;
        interface IParcelable;
    }

    [deprecated]
    class CSoundTriggerRecognitionConfig {
        constructor();

        constructor(
            [in] Boolean captureRequested,
            [in] Boolean allowMultipleTriggers,
            [in] ArrayOf<ISoundTriggerKeyphraseRecognitionExtra*>* keyphrases,
            [in] ArrayOf<Byte>* data);

        interface ISoundTriggerRecognitionConfig;
        interface IParcelable;
    }

    class CSoundTriggerConfidenceLevel {
        constructor();

        constructor(
            [in] Int32 userId,
            [in] Int32 confidenceLevel);

        interface ISoundTriggerConfidenceLevel;
        interface IParcelable;
    }

    [deprecated]
    class CSoundTriggerKeyphraseRecognitionExtra {
        constructor();

        constructor(
            [in] Int32 id,
            [in] Int32 recognitionModes,
            [in] Int32 coarseConfidenceLevel,
            [in] ArrayOf<ISoundTriggerConfidenceLevel*>* confidenceLevels);

        interface ISoundTriggerKeyphraseRecognitionExtra;
        interface IParcelable;
    }

    [deprecated]
    class CSoundTriggerKeyphraseRecognitionEvent {
        constructor();

        constructor(
            [in] Int32 status,
            [in] Int32 soundModelHandle,
            [in] Boolean captureAvailable,
            [in] Int32 captureSession,
            [in] Int32 captureDelayMs,
            [in] Int32 capturePreambleMs,
            [in] Boolean triggerInData,
            [in] IAudioFormat* captureFormat,
            [in] ArrayOf<Byte>* data,
            [in] ArrayOf<ISoundTriggerKeyphraseRecognitionExtra*>* keyphraseExtras);

        interface ISoundTriggerKeyphraseRecognitionEvent;
        interface ISoundTriggerRecognitionEvent;
        interface IParcelable;
    }

    [deprecated]
    class CSoundTriggerSoundModelEvent {
        constructor();

        constructor(
            [in] Int32 status,
            [in] Int32 soundModelHandle,
            [in] ArrayOf<Byte>* data);

        interface ISoundTriggerSoundModelEvent;
        interface IParcelable;
    }

    } // namespace Soundtrigger

    namespace Usb {

    class CUsbAccessory {
        constructor();

        /**
         * UsbAccessory should only be instantiated by UsbService implementation
         * @hide
         */
        constructor(
            [in] String manufacturer,
            [in] String model,
            [in] String description,
            [in] String ver,
            [in] String uri,
            [in] String serial);

        /**
         * UsbAccessory should only be instantiated by UsbService implementation
         * @hide
         */
        constructor(
            [in] ArrayOf<String> strings);

        interface IUsbAccessory;
        interface IParcelable;
    }

    class CUsbConfiguration {
        constructor();

        /**
         * UsbConfiguration should only be instantiated by UsbService implementation
         * @hide
         */
        constructor(
            [in] Int32 id,
            [in] String name,
            [in] Int32 attributes,
            [in] Int32 maxPower);

        interface IUsbConfiguration;
        interface IParcelable;
    }

    [deprecated]
    class CUsbDevice {
        constructor();

        /**
         * UsbDevice should only be instantiated by UsbService implementation
         * @hide
         */
        constructor(
            [in] String name,
            [in] Int32 vendorId,
            [in] Int32 productId,
            [in] Int32 cls,
            [in] Int32 subCls,
            [in] Int32 protocol,
            [in] String manufacturerName,
            [in] String productName,
            [in] String serialNumber);

        interface IUsbDevice;
        interface IParcelable;
    }

    class CUsbDeviceConnection {
        /**
         * UsbDevice should only be instantiated by UsbService implementation
         * @hide
         */
        constructor(
            [in] IUsbDevice* device);

        interface IUsbDeviceConnection;
    }

    class CUsbEndpoint {
        constructor();

        /**
         * UsbEndpoint should only be instantiated by UsbService implementation
         * @hide
         */
        constructor(
            [in] Int32 address,
            [in] Int32 attributes,
            [in] Int32 size,
            [in] Int32 interval);

        interface IUsbEndpoint;
        interface IParcelable;
    }

    class CUsbInterface {
        constructor();

        /**
         * UsbInterface should only be instantiated by UsbService implementation
         * @hide
         */
        constructor(
            [in] Int32 id,
            [in] Int32 alternateSetting,
            [in] String name,
            [in] Int32 Class,
            [in] Int32 subClass,
            [in] Int32 protocol);

        interface IUsbInterface;
        interface IParcelable;
    }

    [local]
    class CUsbManager {
        /**
         * {@hide}
         */
        constructor(
            [in] IContext* ctx,
            [in] IIUsbManager* service);

        interface IUsbManager;
    }

    class CUsbRequest {
        constructor();

        interface IUsbRequest;
    }

    singleton class CUsbDeviceHelper {
        interface IUsbDeviceHelper;
    }

    } // namespace Usb
    } // namespace Hardware
    } // namepsace Droid
    } // namespace Elastos
}
