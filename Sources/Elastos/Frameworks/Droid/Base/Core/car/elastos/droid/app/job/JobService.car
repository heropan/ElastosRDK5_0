module
{
    using interface Elastos.Droid.Os.IBinder;
    using interface Elastos.Droid.Content.IIntent;
    using interface Elastos.Droid.App.Job.IJobParameters;

    namespace Elastos {
    namespace Droid {
    namespace App {
    namespace Job {

    /**
     * @Involve
     * interface Elastos.Droid.Content.IContext
     * interface Elastos.Droid.Content.IContextWrapper
     * interface IComponentCallbacks
     * interface IComponentCallbacks2
     */
    interface IJobService {

        /**
         * Job services must be protected with this permission:
         *
         * <pre class="prettyprint">
         *     <service android:name="MyJobService"
         *              android:permission="android.permission.BIND_JOB_SERVICE" >
         *         ...
         *     </service>
         * </pre>
         *
         * <p>If a job service is declared in the manifest but not protected with this
         * permission, that service will be ignored by the OS.
         */
        const String PERMISSION_BIND = "android.permission.BIND_JOB_SERVICE";

        EnsureHandler();

        OnBind(
            [in] IIntent* intent,
            [out] IBinder** binder);

        /**
         * Override this method with the callback logic for your job. Any such logic needs to be
         * performed on a separate thread, as this function is executed on your application's main
         * thread.
         *
         * @param params Parameters specifying info about this job, including the extras bundle you
         *               optionally provided at job-creation time.
         * @return True if your service needs to process the work (on a separate thread). False if
         * there's no more work to be done for this job.
         */
        OnStartJob(
            [in] IJobParameters* params,
            [out] Boolean* result);

        /**
         * This method is called if the system has determined that you must stop execution of your job
         * even before you've had a chance to call {@link #jobFinished(JobParameters, Boolean)}.
         *
         * <p>This will happen if the requirements specified at schedule time are no longer met. For
         * example you may have requested WiFi with
         * {@link android.app.job.JobInfo.Builder#setRequiredNetworkType(int)}, yet while your
         * job was executing the user toggled WiFi. Another example is if you had specified
         * {@link android.app.job.JobInfo.Builder#setRequiresDeviceIdle(Boolean)}, and the phone left its
         * idle maintenance window. You are solely responsible for the behaviour of your application
         * upon receipt of this message; your app will likely start to misbehave if you ignore it. One
         * immediate repercussion is that the system will cease holding a wakelock for you.</p>
         *
         * @param params Parameters specifying info about this job.
         * @return True to indicate to the JobManager whether you'd like to reschedule this job based
         * on the retry criteria provided at job creation-time. False to drop the job. Regardless of
         * the value returned, your job must stop executing.
         */
        OnStopJob(
            [in] IJobParameters* params,
            [out] Boolean* result);

        /**
         * Callback to inform the JobManager you've finished executing. This can be called from any
         * thread, as it will ultimately be run on your application's main thread. When the system
         * receives this message it will release the wakelock being held.
         * <p>
         *     You can specify post-execution behaviour to the scheduler here with
         *     <code>needsReschedule </code>. This will apply a back-off timer to your job based on
         *     the default, or what was set with
         *     {@link android.app.job.JobInfo.Builder#setBackoffCriteria(long, int)}. The original
         *     requirements are always honoured even for a backed-off job. Note that a job running in
         *     idle mode will not be backed-off. Instead what will happen is the job will be re-added
         *     to the queue and re-executed within a future idle maintenance window.
         * </p>
         *
         * @param params Parameters specifying system-provided info about this job, this was given to
         *               your application in {@link #onStartJob(JobParameters)}.
         * @param needsReschedule True if this job should be rescheduled according to the back-off
         *                        criteria specified at schedule-time. False otherwise.
         */
        JobFinished(
            [in] IJobParameters* params,
            [in] Boolean needsReschedule);
    }

    } // namespace Job
    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}