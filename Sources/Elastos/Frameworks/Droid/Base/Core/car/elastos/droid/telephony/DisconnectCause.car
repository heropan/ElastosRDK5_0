
module
{

    namespace Elastos {
    namespace Droid {
    namespace Telephony {


    interface IDisconnectCause {
        /** The disconnect cause is not valid (Not received a disconnect cause) */
        const Int32 NOT_VALID                      = -1;
        /** Has not yet disconnected */
        const Int32 NOT_DISCONNECTED               = 0;
        /** An incoming call that was missed and never answered */
        const Int32 INCOMING_MISSED                = 1;
        /** Normal; Remote hangup*/
        const Int32 NORMAL                         = 2;
        /** Normal; Local hangup */
        const Int32 LOCAL                          = 3;
        /** Outgoing call to busy line */
        const Int32 BUSY                           = 4;
        /** Outgoing call to congested network */
        const Int32 CONGESTION                     = 5;
        /** Not presently used */
        const Int32 MMI                            = 6;
        /** Invalid dial string */
        const Int32 INVALID_NUMBER                 = 7;
        /** Cannot reach the peer */
        const Int32 NUMBER_UNREACHABLE             = 8;
        /** Cannot reach the server */
        const Int32 SERVER_UNREACHABLE             = 9;
        /** Invalid credentials */
        const Int32 INVALID_CREDENTIALS            = 10;
        /** Calling from out of network is not allowed */
        const Int32 OUT_OF_NETWORK                 = 11;
        /** Server error */
        const Int32 SERVER_ERROR                   = 12;
        /** Client timed out */
        const Int32 TIMED_OUT                      = 13;
        /** Client went out of network range */
        const Int32 LOST_SIGNAL                    = 14;
        /** GSM or CDMA ACM limit exceeded */
        const Int32 LIMIT_EXCEEDED                 = 15;
        /** An incoming call that was rejected */
        const Int32 INCOMING_REJECTED              = 16;
        /** Radio is turned off explicitly */
        const Int32 POWER_OFF                      = 17;
        /** Out of service */
        const Int32 OUT_OF_SERVICE                 = 18;
        /** No ICC, ICC locked, or other ICC error */
        const Int32 ICC_ERROR                      = 19;
        /** Call was blocked by call barring */
        const Int32 CALL_BARRED                    = 20;
        /** Call was blocked by fixed dial number */
        const Int32 FDN_BLOCKED                    = 21;
        /** Call was blocked by restricted all voice access */
        const Int32 CS_RESTRICTED                  = 22;
        /** Call was blocked by restricted normal voice access */
        const Int32 CS_RESTRICTED_NORMAL           = 23;
        /** Call was blocked by restricted emergency voice access */
        const Int32 CS_RESTRICTED_EMERGENCY        = 24;
        /** Unassigned number */
        const Int32 UNOBTAINABLE_NUMBER            = 25;
        /** MS is locked until next power cycle */
        const Int32 CDMA_LOCKED_UNTIL_POWER_CYCLE  = 26;
        /** Drop call*/
        const Int32 CDMA_DROP                      = 27;
        /** INTERCEPT order received, MS state idle entered */
        const Int32 CDMA_INTERCEPT                 = 28;
        /** MS has been redirected, call is cancelled */
        const Int32 CDMA_REORDER                   = 29;
        /** Service option rejection */
        const Int32 CDMA_SO_REJECT                 = 30;
        /** Requested service is rejected, retry delay is set */
        const Int32 CDMA_RETRY_ORDER               = 31;
        /** Unable to obtain access to the CDMA system */
        const Int32 CDMA_ACCESS_FAILURE            = 32;
        /** Not a preempted call */
        const Int32 CDMA_PREEMPTED                 = 33;
        /** Not an emergency call */
        const Int32 CDMA_NOT_EMERGENCY             = 34;
        /** Access Blocked by CDMA network */
        const Int32 CDMA_ACCESS_BLOCKED            = 35;
        /** Unknown error or not specified */
        const Int32 ERROR_UNSPECIFIED              = 36;
        /**
         * Only emergency numbers are allowed, but we tried to dial
         * a non-emergency number.
         */
        // TODO: This should be the same as NOT_EMERGENCY
        const Int32 EMERGENCY_ONLY                 = 37;
        /**
         * The supplied CALL Intent didn't contain a valid phone number.
         */
        const Int32 NO_PHONE_NUMBER_SUPPLIED       = 38;
        /**
         * Our initial phone number was actually an MMI sequence.
         */
        const Int32 DIALED_MMI                     = 39;
        /**
         * We tried to call a voicemail: URI but the device has no
         * voicemail number configured.
         */
        const Int32 VOICEMAIL_NUMBER_MISSING       = 40;
        /**
         * This status indicates that InCallScreen should display the
         * CDMA-specific "call lost" dialog.  (If an outgoing call fails,
         * and the CDMA "auto-retry" feature is enabled, *and* the retried
         * call fails too, we display this specific dialog.)
         *
         * TODO: this is currently unused, since the "call lost" dialog
         * needs to be triggered by a *disconnect* event, rather than when
         * the InCallScreen first comes to the foreground.  For now we use
         * the needToShowCallLostDialog field for this (see below.)
         */
        const Int32 CDMA_CALL_LOST                 = 41;
        /**
         * This status indicates that the call was placed successfully,
         * but additionally, the InCallScreen needs to display the
         * "Exiting ECM" dialog.
         *
         * (Details: "Emergency callback mode" is a CDMA-specific concept
         * where the phone disallows data connections over the cell
         * network for some period of time after you make an emergency
         * call.  If the phone is in ECM and you dial a non-emergency
         * number, that automatically *cancels* ECM, but we additionally
         * need to warn the user that ECM has been canceled (see bug
         * 4207607.))
         *
         * TODO: Rethink where the best place to put this is. It is not a notification
         * of a failure of the connection -- it is an additional message that accompanies
         * a successful connection giving the user important information about what happened.
         *
         * {@hide}
         */
        const Int32 EXITED_ECM                     = 42;

        /**
         * The outgoing call failed with an unknown cause.
         */
        const Int32 OUTGOING_FAILURE = 43;

        /**
         * The outgoing call was canceled by the {@link android.telecom.ConnectionService}.
         */
        const Int32 OUTGOING_CANCELED = 44;

        /** Smallest valid value for call disconnect codes. */
        const Int32 MINIMUM_VALID_VALUE = 0; //NOT_DISCONNECTED;

        /** Largest valid value for call disconnect codes. */
        const Int32 MAXIMUM_VALID_VALUE = 44; //OUTGOING_CANCELED;

        /** Returns descriptive string for the specified disconnect cause. */
        ToString(
            [in] Int32 cause,
            [out] String* str);
    }

    } // namespace Telephony
    } // namespace Droid
    } // namespace Elastos
}
