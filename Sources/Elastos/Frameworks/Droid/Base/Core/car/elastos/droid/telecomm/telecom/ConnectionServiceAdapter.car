
module
{
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Telecomm.Internal.IIConnectionServiceAdapter;
    interface Elastos.Droid.Telecomm.Internal.IRemoteServiceCallback;
    interface Elastos.Droid.Telecomm.Telecom.IParcelableConnection;
    interface Elastos.Droid.Telecomm.Telecom.IParcelableConference;
    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Telecomm {
    namespace Telecom {

    /**
     * Provides methods for IConnectionService implementations to interact with the system phone
     * app.
     *
     * @hide
     * @Involve
     * interface IProxyDeathRecipient
     */
    interface IConnectionServiceAdapter {

        AddAdapter(
            [in] IIConnectionServiceAdapter* adapter);

        RemoveAdapter(
            [in] IIConnectionServiceAdapter* adapter);

        HandleCreateConnectionComplete(
            [in] String id,
            [in] IConnectionRequest* request,
            [in] IParcelableConnection* connection);

        /**
         * Sets a call's state to active (e.g., an ongoing call where two parties can actively
         * communicate).
         *
         * @param callId The unique ID of the call whose state is changing to active.
         */
        SetActive(
            [in] String callId);

        /**
         * Sets a call's state to ringing (e.g., an inbound ringing call).
         *
         * @param callId The unique ID of the call whose state is changing to ringing.
         */
        SetRinging(
            [in] String callId);

        /**
         * Sets a call's state to dialing (e.g., dialing an outbound call).
         *
         * @param callId The unique ID of the call whose state is changing to dialing.
         */
        SetDialing(
            [in] String callId);

        /**
         * Sets a call's state to disconnected.
         *
         * @param callId The unique ID of the call whose state is changing to disconnected.
         * @param disconnectCause The reason for the disconnection, as described by
         *            {@link android.telecomm.DisconnectCause}.
         */
        SetDisconnected(
            [in] String callId,
            [in] IDisconnectCause* disconnectCause);

        /**
         * Sets a call's state to be on hold.
         *
         * @param callId - The unique ID of the call whose state is changing to be on hold.
         */
        SetOnHold(
            [in] String callId);

        /**
         * Asks Telecom to start or stop a ringback tone for a call.
         *
         * @param callId The unique ID of the call whose ringback is being changed.
         * @param ringback Whether Telecom should start playing a ringback tone.
         */
        SetRingbackRequested(
            [in] String callId,
            [in] Boolean ringback);

        SetCallCapabilities(
            [in] String callId,
            [in] Int32 capabilities);

        /**
         * Indicates whether or not the specified call is currently conferenced into the specified
         * conference call.
         *
         * @param callId The unique ID of the call being conferenced.
         * @param conferenceCallId The unique ID of the conference call. Null if call is not
         *            conferenced.
         */
        SetIsConferenced(
            [in] String callId,
            [in] String conferenceCallId);

        /**
         * Indicates that the call no longer exists. Can be used with either a call or a conference
         * call.
         *
         * @param callId The unique ID of the call.
         */
        RemoveCall(
            [in] String callId);

        OnPostDialWait(
            [in] String callId,
            [in] String remaining);

        /**
         * Indicates that a new conference call has been created.
         *
         * @param callId The unique ID of the conference call.
         */
        AddConferenceCall(
            [in] String callId,
            [in] IParcelableConference* parcelableConference);

        /**
         * Retrieves a list of remote connection services usable to place calls.
         */
        QueryRemoteConnectionServices(
            [in] IRemoteServiceCallback* clb);

        /**
         * Sets the call video provider for a call.
         *
         * @param callId The unique ID of the call to set with the given call video provider.
         * @param videoProvider The call video provider instance to set on the call.
         */
        SetVideoProvider(
            [in] String callId,
            [in] IConnectionVideoProvider* videoProvider);

        /**
         * Requests that the framework use VOIP audio mode for this connection.
         *
         * @param callId The unique ID of the call to set with the given call video provider.
         * @param isVoip True if the audio mode is VOIP.
         */
        SetIsVoipAudioMode(
            [in] String callId,
            [in] Boolean isVoip);

        SetStatusHints(
            [in] String callId,
            [in] IStatusHints* statusHints);

        SetAddress(
            [in] String callId,
            [in] IUri* address,
            [in] Int32 presentation);

        SetCallerDisplayName(
            [in] String callId,
            [in] String callerDisplayName,
            [in] Int32 presentation);

        /**
         * Sets the video state associated with a call.
         *
         * Valid values: {@link VideoProfile.VideoState#AUDIO_ONLY},
         * {@link VideoProfile.VideoState#BIDIRECTIONAL},
         * {@link VideoProfile.VideoState#TX_ENABLED},
         * {@link VideoProfile.VideoState#RX_ENABLED}.
         *
         * @param callId The unique ID of the call to set the video state for.
         * @param videoState The video state.
         */
        SetVideoState(
            [in] String callId,
            [in] Int32 videoState);

        SetConferenceableConnections(
            [in] String callId,
            [in] IList* conferenceableCallIds);
    }

    } // namespace Telecom
    } // namespace Telecomm
    } // namespace Droid
    } // namespace Elastos
}
