
module
{
    interface Elastos.Droid.App.IActivity;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Widget.IRemoteViews;

    namespace Elastos {
    namespace Droid {
    namespace AppWidget {

    /**
     * AppWidgetHost provides the interaction with the AppWidget service for apps,
     * like the home screen, that want to embed AppWidgets in their UI.
     */
    [local, deprecated]
    interface IAppWidgetHost {
        /**
         * Start receiving onAppWidgetChanged calls for your AppWidgets.  Call this when your activity
         * becomes visible, i.e. from onStart() in your Activity.
         */
        StartListening();

        /**
         * Stop receiving onAppWidgetChanged calls for your AppWidgets.  Call this when your activity is
         * no longer visible, i.e. from onStop() in your Activity.
         */
        StopListening();

        /**
         * Get a appWidgetId for a host in the calling process.
         *
         * @return a appWidgetId
         */
        AllocateAppWidgetId(
            [out] Int32* appWidgetId);

        /**
         * Starts an app widget provider configure activity for result on behalf of the caller.
         * Use this method if the provider is in another profile as you are not allowed to start
         * an activity in another profile. You can optionally provide a request code that is
         * returned in {@link Activity#onActivityResult(int, int, android.content.Intent)} and
         * an options bundle to be passed to the started activity.
         * <p>
         * Note that the provided app widget has to be bound for this method to work.
         * </p>
         *
         * @param activity The activity from which to start the configure one.
         * @param appWidgetId The bound app widget whose provider's config activity to start.
         * @param requestCode Optional request code retuned with the result.
         * @param intentFlags Optional intent flags.
         *
         * @throws android.content.ActivityNotFoundException If the activity is not found.
         *
         * @see AppWidgetProviderInfo#getProfile()
         */
        StartAppWidgetConfigureActivityForResult(
            [in] IActivity* activity,
            [in] Int32 appWidgetId,
            [in] Int32 intentFlags,
            [in] Int32 requestCode,
            [in] IBundle* options);

        /**
         * Gets a list of all the appWidgetIds that are bound to the current host
         *
         * @hide
         */
        GetAppWidgetIds(
            [out, callee] ArrayOf<Int32>* ids);

        /**
         * Stop listening to changes for this AppWidget.
         */
        DeleteAppWidgetId(
            [in] Int32 appWidgetId);

        /**
         * Remove all records about this host from the AppWidget manager.
         * <ul>
         *   <li>Call this when initializing your database, as it might be because of a data wipe.</li>
         *   <li>Call this to have the AppWidget manager release all resources associated with your
         *   host.  Any future calls about this host will cause the records to be re-allocated.</li>
         * </ul>
         */
        DeleteHost();

        /**
         * Create the AppWidgetHostView for the given widget.
         * The AppWidgetHost retains a pointer to the newly-created View.
         */
        CreateView(
            [in] IContext* ctx,
            [in] Int32 appWidgetId,
            [in] IAppWidgetProviderInfo* appWidget,
            [out] IAppWidgetHostView** hostView);

        UpdateAppWidgetView(
            [in] Int32 appWidgetId,
            [in] IRemoteViews* views);

        ViewDataChanged(
            [in] Int32 appWidgetId,
            [in] Int32 viewId);
    }

    [local]
    interface IAppWidgetHostHelper {
        /**
         * Remove all records about all hosts for your package.
         * <ul>
         *   <li>Call this when initializing your database, as it might be because of a data wipe.</li>
         *   <li>Call this to have the AppWidget manager release all resources associated with your
         *   host.  Any future calls about this host will cause the records to be re-allocated.</li>
         * </ul>
         */
        DeleteAllHosts();
    }

    } // namespace AppWidget
    } // namespace Droid
    } // namespace Elastos
}
