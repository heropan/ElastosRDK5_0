
module
{
    using interface Elastos.Net.IInetAddress;
    interface Elastos.Droid.Net.Wifi.IWifiSsid;
    enum Elastos.Droid.Net.Wifi.SupplicantState;
    enum Elastos.Droid.Net.NetworkInfoDetailedState;

    namespace Elastos {
    namespace Droid {
    namespace Wifi {

    /**
     * Describes the state of any Wifi connection that is active or
     * is in the process of being set up.
     */
    interface IWifiInfo {
        /* @hide */
        SetSSID(
            [in] IWifiSsid* wifiSsid);

        /**
         * Returns the service set identifier (SSID) of the current 802.11 network.
         * If the SSID can be decoded as UTF-8, it will be returned surrounded by double
         * quotation marks. Otherwise, it is returned as a string of hex digits. The
         * SSID may be {@code null} if there is no network currently connected.
         * @return the SSID
         */
        GetSSID(
            [out] String* ssid);

        /** @hide */
        GetWifiSsid(
            [out] IWifiSsid** ssid);

        SetBSSID(
            [in] String BSSID);

        /**
         * Return the basic service set identifier (BSSID) of the current access point.
         * The BSSID may be {@code null} if there is no network currently connected.
         * @return the BSSID, in the form of a six-byte MAC address: {@code XX:XX:XX:XX:XX:XX}
         */
        GetBSSID(
            [out] String* bssid);

        /**
         * Returns the received signal strength indicator of the current 802.11
         * network.
         * <p><strong>This is not normalized, but should be!</strong></p>
         * @return the RSSI, in the range ??? to ???
         */
        GetRssi(
            [out] Int32* rssi);

        /* @hide */
        SetRssi(
            [in] Int32 rssi);

        /**
         * Returns the current link speed in {@link #LINK_SPEED_UNITS}.
         * @return the link speed.
         * @see #LINK_SPEED_UNITS
         */
        GetLinkSpeed(
            [out] Int32* link);

        /* @hide */
        SetLinkSpeed(
            [in] Int32 linkSpeed);

         /**
         * Record the MAC address of the WLAN interface
         * @param macAddress the MAC address in {@code XX:XX:XX:XX:XX:XX} form
         */
        SetMacAddress(
            [in] String macAddress);

        GetMacAddress(
            [out] String* address);

        /** {@hide} */
        SetMeteredHint(
            [in] Boolean meteredHint);

        /** {@hide} */
        GetMeteredHint(
            [out] Boolean* metered);

        SetNetworkId(
            [in] Int32 id);

        /**
         * Each configured network has a unique small integer ID, used to identify
         * the network when performing operations on the supplicant. This method
         * returns the ID for the currently connected network.
         * @return the network ID, or -1 if there is no currently connected network
         */
        GetNetworkId(
            [out] Int32* id);

        /**
         * Return the detailed state of the supplicant's negotiation with an
         * access point, in the form of a {@link SupplicantState SupplicantState} object.
         * @return the current {@link SupplicantState SupplicantState}
         */
        GetSupplicantState(
            [out] SupplicantState* state);

        /** {@hide} */
        SetSupplicantState(
            [in] SupplicantState state);

        SetInetAddress(
            [in] IInetAddress* address);

        GetIpAddress(
            [out] Int32* ip);

        /**
         * @return {@code true} if this network does not broadcast its SSID, so an
         * SSID-specific probe request must be used for scans.
         */
        GetHiddenSSID(
            [out] Boolean* result);

        /** {@hide} */
        SetHiddenSSID(
            [in] Boolean hiddenSSID);
    }

    interface IWifiInfoHelper {
        /**
         * Map a supplicant state into a fine-grained network connectivity state.
         * @param suppState the supplicant state
         * @return the corresponding {@link DetailedState}
         */
        GetDetailedStateOf(
            [in] SupplicantState suppState,
            [out] NetworkInfoDetailedState* detailedState);

        RemoveDoubleQuotes(
            [in] String str,
            [out] String* value);
    }

    } // namespace Wifi
    } // namespace Droid
    } // namespace Elastos
}
