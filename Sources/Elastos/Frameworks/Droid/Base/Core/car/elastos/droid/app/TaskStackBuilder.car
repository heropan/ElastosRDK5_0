module
{
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.IUserHandle;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Content.IComponentName;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.App.IActivity;
    interface Elastos.Droid.App.IPendingIntent;

    namespace Elastos {
    namespace Droid {
    namespace App {

    /**
     * Utility class for constructing synthetic back stacks for cross-task navigation on Android 3.0 and newer.
     * <p>
     * In API level 11 (Android 3.0/Honeycomb) the recommended conventions for app
     * navigation using the back key changed. The back key's behavior is local to
     * the current task and does not capture navigation across different tasks.
     * Navigating across tasks and easily reaching the previous task is
     * accomplished through the "recents" UI, accessible through the
     * software-provided Recents key on the navigation or system bar. On devices
     * with the older hardware button configuration the recents UI can be accessed
     * with a long press on the Home key.
     * <p>
     * When crossing from one task stack to another post-Android 3.0, the
     * application should synthesize a back stack/history for the new task so that
     * the user may navigate out of the new task and back to the Launcher by
     * repeated presses of the back key. Back key presses should not navigate across task stacks.
     * <p>
     * TaskStackBuilder provides a backward-compatible way to obey the correct
     * conventions around cross-task navigation on the device's version of the
     * platform. On devices running Android 3.0 or newer, calls to the
     * startActivities() method or sending the PendingIntent generated by
     * getPendingIntent(int, int) will construct the synthetic back stack as
     * prescribed. On devices running older versions of the platform, these same
     * calls will invoke the topmost activity in the supplied stack, ignoring the
     * rest of the synthetic stack and allowing the back key to navigate back to the previous task.
     *
     * @sa startActivities()
     * @sa PendingIntent
     * @sa getPendingIntent(int, int)
     * <p>
     * <h3>About Navigation</h3>
     * <p>
     * For more detailed information about tasks, the back stack, and navigation design guidelines, please read Tasks and Back Stack from the developer guide and Navigation from the design guide.
     *
     * @sa Tasks and Back Stack
     * @sa Navigation
     */
    [local]
    interface ITaskStackBuilder {
        /**
         * Add a new Intent to the task stack. The most recently added Intent will invoke
         * the Activity at the top of the final task stack.
         *
         * @param nextIntent Intent for the next Activity in the synthesized task stack
         * @return This TaskStackBuilder for method chaining
         */
        AddNextIntent(
            [in] IIntent* nextIntent);

        /**
         * Add a new Intent with the resolved chain of parents for the target activity to
         * the task stack.
         *
         * <p>This is equivalent to calling #addParentStack(ComponentName) addParentStack
         * with the resolved ComponentName of nextIntent (if it can be resolved), followed by
         * #addNextIntent(Intent) addNextIntent with nextIntent.</p>
         *
         * @sa #addParentStack(ComponentName) addParentStack
         * @sa #addNextIntent(Intent) addNextIntent
         *
         * @param nextIntent Intent for the topmost Activity in the synthesized task stack.
         *                   Its chain of parents as specified in the manifest will be added.
         * @return This TaskStackBuilder for method chaining.
         */
        AddNextIntentWithParentStack(
            [in] IIntent* nextIntent);

        /**
         * Add the activity parent chain as specified by the
         * Activity#getParentActivityIntent() getParentActivityIntent() method of the activity
         * specified and the android.R.attr#parentActivityName parentActivityName attributes
         * of each successive activity (or activity-alias) element in the application's manifest
         * to the task stack builder.
         *
         * @sa Activity#getParentActivityIntent() getParentActivityIntent()
         * @sa android.R.attr#parentActivityName parentActivityName
         *
         * @param sourceActivity All parents of this activity will be added
         * @return This TaskStackBuilder for method chaining
         */
        AddParentStack(
            [in] IActivity* sourceActivity);

        /**
         * Add the activity parent chain as specified by the
         * android.R.attr#parentActivityName parentActivityName attribute of the activity
         * (or activity-alias) element in the application's manifest to the task stack builder.
         *
         * @sa android.R.attr#parentActivityName parentActivityName
         *
         * @param sourceActivityClass All parents of this activity will be added
         * @return This TaskStackBuilder for method chaining
         */
//        public TaskStackBuilder addParentStack(Class<?> sourceActivityClass)

        /**
         * Add the activity parent chain as specified by the
         * android.R.attr#parentActivityName parentActivityName attribute of the activity
         * (or activity-alias) element in the application's manifest to the task stack builder.
         *
         * @sa android.R.attr#parentActivityName parentActivityName
         *
         * @param sourceActivityName Must specify an Activity component. All parents of
         *                           this activity will be added
         * @return This TaskStackBuilder for method chaining
         */
        AddParentStack(
            [in] IComponentName* sourceActivityName);

        /**
         * @return the number of intents added so far.
         */
        GetIntentCount(
            [out] Int32* num);

        /**
         * Return the intent at the specified index for modification.
         * Useful if you need to modify the flags or extras of an intent that was previously added,
         * for example with #addParentStack(Activity).
         *
         * @sa #addParentStack(Activity)
         *
         * @param index Index from 0-getIntentCount()
         * @return the intent at position index
         */
        EditIntentAt(
            [in] Int32 index,
            [out] IIntent** intent);

        /**
         * Start the task stack constructed by this builder.
         */
        StartActivities();

        /**
         * Start the task stack constructed by this builder.
         * @hide
         */
        StartActivities(
            [in] IBundle* options,
            [in] IUserHandle* userHandle);

        /**
         * Start the task stack constructed by this builder.
         *
         * @param options Additional options for how the Activity should be started.
         * See android.content.Context#startActivity(Intent, Bundle)
         * Context.startActivity(Intent, Bundle) for more details.
         *
         * @sa android.content.Context#startActivity(Intent, Bundle) Context.startActivity(Intent, Bundle)
         */
        StartActivities(
            [in] IBundle* options);

        /**
         * Obtain a PendingIntent for launching the task constructed by this builder so far.
         *
         * @sa PendingIntent
         *
         * @param requestCode Private request code for the sender
         * @param flags May be PendingIntent#FLAG_ONE_SHOT,
         *              PendingIntent#FLAG_NO_CREATE,  PendingIntent#FLAG_CANCEL_CURRENT,
         *              PendingIntent#FLAG_UPDATE_CURRENT, or any of the flags supported by
         *              Intent#fillIn(Intent, int) to control which unspecified parts of the
         *              intent that can be supplied when the actual send happens.
         *
         * @sa PendingIntent#FLAG_ONE_SHOT
         * @sa PendingIntent#FLAG_NO_CREATE
         * @sa PendingIntent#FLAG_CANCEL_CURRENT
         * @sa PendingIntent#FLAG_UPDATE_CURRENT
         * @sa Intent#fillIn(Intent, int)
         *
         * @return The obtained PendingIntent
         */
        GetPendingIntent(
            [in] Int32 requestCode,
            [in] Int32 flags,
            [out] IPendingIntent** pendingIntent);

        /**
         * Obtain a PendingIntent for launching the task constructed by this builder so far.
         *
         * @sa PendingIntent
         *
         * @param requestCode Private request code for the sender
         * @param flags May be PendingIntent#FLAG_ONE_SHOT,
         *              PendingIntent#FLAG_NO_CREATE,  PendingIntent#FLAG_CANCEL_CURRENT,
         *              PendingIntent#FLAG_UPDATE_CURRENT, or any of the flags supported by
         *              Intent#fillIn(Intent, int) to control which unspecified parts of the
         *              intent that can be supplied when the actual send happens.
         *
         * @sa PendingIntent#FLAG_ONE_SHOT
         * @sa PendingIntent#FLAG_NO_CREATE
         * @sa PendingIntent#FLAG_CANCEL_CURRENT
         * @sa PendingIntent#FLAG_UPDATE_CURRENT
         * @sa Intent#fillIn(Intent, int)
         *
         * @return The obtained PendingIntent
         */
        GetPendingIntent(
            [in] Int32 requestCode,
            [in] Int32 flags,
            [in] IBundle* options,
            [out] IPendingIntent** pendingIntent);

        /**
         * @hide
         */
        GetPendingIntent(
            [in] Int32 requestCode,
            [in] Int32 flags,
            [in] IBundle* options,
            [in] IUserHandle* user,
            [out] IPendingIntent** pendingIntent);

        /**
         * Return an array containing the intents added to this builder. The intent at the
         * root of the task stack will appear as the first item in the array and the
         * intent at the top of the stack will appear as the last item.
         *
         * @return An array containing the intents added to this builder.
         */
        GetIntents(
            [out, callee] ArrayOf<IIntent*>* intents);
    }

    [local]
    interface ITaskStackBuilderHelper {
        /**
         * Return a new TaskStackBuilder for launching a fresh task stack consisting
         * of a series of activities.
         *
         * @param context The context that will launch the new task stack or generate a PendingIntent
         * @return A new TaskStackBuilder
         */
        Create(
            [in] IContext* ctx,
            [out] ITaskStackBuilder** builder);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
