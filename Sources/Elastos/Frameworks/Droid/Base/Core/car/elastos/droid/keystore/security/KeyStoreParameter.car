
module
{
    interface Elastos.Droid.KeyStore.Security.IKeyStoreParameter;

    namespace Elastos {
    namespace Droid {
    namespace KeyStore {
    namespace Security {

    /**
     * Builder class for {@link KeyStoreParameter} objects.
     * <p>
     * This will build protection parameters for use with the
     * <a href="{@docRoot}training/articles/keystore.html">Android KeyStore
     * facility</a>.
     * <p>
     * This can be used to require that KeyStore entries be stored encrypted.
     * <p>
     * Example:
     *
     * <pre class="prettyprint">
     * KeyStoreParameter params = new KeyStoreParameter.Builder(mContext)
     *         .setEncryptionRequired()
     *         .build();
     * </pre>
     */
    interface IKeyStoreParameterBuilder {
        /**
         * Indicates that this key must be encrypted at rest on storage. Note
         * that enabling this will require that the user enable a strong lock
         * screen (e.g., PIN, password) before creating or using the generated
         * key is successful.
         */
            SetEncryptionRequired(
                [in] Boolean required);

        /**
         * Builds the instance of the {@code KeyPairGeneratorSpec}.
         *
         * @throws IllegalArgumentException if a required field is missing
         * @return built instance of {@code KeyPairGeneratorSpec}
         */
            Build(
                [out] IKeyStoreParameter** para);
    }

    /**
     * This provides the optional parameters that can be specified for
     * {@code KeyStore} entries that work with
     * <a href="{@docRoot}training/articles/keystore.html">Android KeyStore
     * facility</a>. The Android KeyStore facility is accessed through a
     * {@link java.security.KeyStore} API using the {@code AndroidKeyStore}
     * provider. The {@code context} passed in may be used to pop up some UI to ask
     * the user to unlock or initialize the Android KeyStore facility.
     * <p>
     * Any entries placed in the {@code KeyStore} may be retrieved later. Note that
     * there is only one logical instance of the {@code KeyStore} per application
     * UID so apps using the {@code sharedUid} facility will also share a
     * {@code KeyStore}.
     * <p>
     * Keys may be generated using the {@link KeyPairGenerator} facility with a
     * {@link KeyPairGeneratorSpec} to specify the entry's {@code alias}. A
     * self-signed X.509 certificate will be attached to generated entries, but that
     * may be replaced at a later time by a certificate signed by a real Certificate
     * Authority.
     *
     * @Involve
     * interface Elastos.Security.KeyStore.IProtectionParameter
     */
    interface IKeyStoreParameter {
    /**
     * @hide
     */
        GetFlags(
            [out] Int32* flags);

    /**
     * Returns {@code true} if this parameter requires entries to be encrypted
     * on the disk.
     */
        IsEncryptionRequired(
            [out] Boolean* required);
    }

    }// namespace Security
    }// namespace KeyStore
    }// namespace Droid
    }// namespace Elastos

}

