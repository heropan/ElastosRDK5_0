
module
{
    namespace Elastos {
    namespace Droid {
    namespace Media {

    /**
     * An audio port is a node of the audio framework or hardware that can be connected to or
     * disconnect from another audio node to create a specific audio routing configuration.
     * Examples of audio ports are an output device (speaker) or an output mix (see AudioMixPort).
     * All attributes that are relevant for applications to make routing selection are decribed
     * in an AudioPort,  in particular:
     * - possible channel mask configurations.
     * - audio format (PCM 16bit, PCM 24bit...)
     * - gain: a port can be associated with one or more gain controllers (see AudioGain).
     *
     * This object is always created by the framework and read only by applications.
     * A list of all audio port descriptors currently available for applications to control
     * is obtained by AudioManager.listAudioPorts().
     * An application can obtain an AudioPortConfig for a valid configuration of this port
     * by calling AudioPort.buildConfig() and use this configuration
     * to create a connection between audio sinks and sources with AudioManager.connectAudioPatch()
     *
     * @hide
     */
    interface IAudioPort {
        /**
         * For use by the audio framework.
         */
        const Int32 ROLE_NONE = 0;
        /**
         * The audio port is a source (produces audio)
         */
        const Int32 ROLE_SOURCE = 1;
        /**
         * The audio port is a sink (consumes audio)
         */
        const Int32 ROLE_SINK = 2;

        /**
         * audio port type for use by audio framework implementation
         */
        const Int32 TYPE_NONE = 0;
        /**
         */
        const Int32 TYPE_DEVICE = 1;
        /**
         */
        const Int32 TYPE_SUBMIX = 2;
        /**
         */
        const Int32 TYPE_SESSION = 3;

        /**
         * Get the audio port role
         */
        Role(
            [out] Int32* result);

        /**
         * Get the list of supported sampling rates
         * Empty array if sampling rate is not relevant for this audio port
         */
        SamplingRates(
            [out, callee] ArrayOf<Int32>* result);

        /**
         * Get the list of supported channel mask configurations
         * (e.g AudioFormat.CHANNEL_OUT_STEREO)
         * Empty array if channel mask is not relevant for this audio port
         */
        ChannelMasks(
            [out, callee] ArrayOf<Int32>* result);

        /**
         * Get the list of supported audio format configurations
         * (e.g AudioFormat.ENCODING_PCM_16BIT)
         * Empty array if format is not relevant for this audio port
         */
        Formats(
            [out, callee] ArrayOf<Int32>* result);

        Handle(
            [out] IAudioHandle** result);

        /**
         * Get the list of gain descriptors
         * Empty array if this port does not have gain control
         */
        Gains(
            [out, callee] ArrayOf<IAudioGain*>* result);

        /**
         * Build a specific configuration of this audio port for use by methods
         * like AudioManager.connectAudioPatch().
         * @param channelMask The desired channel mask. AudioFormat.CHANNEL_OUT_DEFAULT if no change
         * from active configuration requested.
         * @param format The desired audio format. AudioFormat.ENCODING_DEFAULT if no change
         * from active configuration requested.
         * @param gain The desired gain. null if no gain changed requested.
         */
        BuildConfig(
            [in] Int32 samplingRate,
            [in] Int32 channelMask,
            [in] Int32 format,
            [in] IAudioGainConfig* gain,
            [out] IAudioPortConfig** result);

        /**
         * Get currently active configuration of this audio port.
         */
        ActiveConfig(
            [out] IAudioPortConfig** result);

        SetActiveConfig(
            [in] IAudioPortConfig* config);
    }

    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
