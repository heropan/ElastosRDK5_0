
module
{
    using interface Elastos.IO.IFile;
    using interface Elastos.Utility.IList;
    using interface Elastos.Utility.ISet;
    interface Elastos.Droid.Net.IUriBuilder;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    /**
     * Immutable URI reference. A URI reference includes a URI and a fragment, the
     * component of the URI following a '#'. Builds and parses URI references
     * which conform to
     * <a href="http://www.faqs.org/rfcs/rfc2396.html">RFC 2396</a>.
     *
     * <p>In the interest of performance, this class performs little to no
     * validation. Behavior is undefined for invalid input. This class is very
     * forgiving--in the face of invalid input, it will return garbage
     * rather than throw an exception unless otherwise specified.
     */
    /**
     * @Involved
     * interface IParcelable;
     * interface IComparable;
     */
    interface IUri {
        /*

        This class aims to do as little up front work as possible. To accomplish
        that, we vary the implementation depending on what the user passes in.
        For example, we have one implementation if the user passes in a
        URI string (StringUri) and another if the user passes in the
        individual components (OpaqueUri).

        *Concurrency notes*: Like any truly immutable object, this class is safe
        for concurrent use. This class uses a caching pattern in some places where
        it doesn't use volatile or synchronized. This is safe to do with ints
        because getting or setting an int is atomic. It's safe to do with a String
        because the internal fields are final and the memory model guarantees other
        threads won't see a partially initialized instance. We are not guaranteed
        that some threads will immediately see changes from other threads on
        certain platforms, but we don't mind if those threads reconstruct the
        cached result. As a result, we get thread safe caching with no concurrency
        overhead, which means the most common case, access from a single thread,
        is as fast as possible.

        From the Java Language spec.:

        "17.5 Final Field Semantics

        ... when the object is seen by another thread, that thread will always
        see the correctly constructed version of that object's final fields.
        It will also see versions of any object or array referenced by
        those final fields that are at least as up-to-date as the final fields
        are."

        In that same vein, all non-transient fields within Uri
        implementations should be final and immutable so as to ensure true
        immutability for clients even when they don't use proper concurrency
        control.

        For reference, from RFC 2396:

        "4.3. Parsing a URI Reference

           A URI reference is typically parsed according to the four main
           components and fragment identifier in order to determine what
           components are present and whether the reference is relative or
           absolute.  The individual components are then parsed for their
           subparts and, if not opaque, to verify their validity.

           Although the BNF defines what is allowed in each component, it is
           ambiguous in terms of differentiating between an authority component
           and a path component that begins with two slash characters.  The
           greedy algorithm is used for disambiguation: the left-most matching
           rule soaks up as much of the URI reference string as it is capable of
           matching.  In other words, the authority component wins."

        The "four main components" of a hierarchical URI consist of
        <scheme>://<authority><path>?<query>

        */

        /**
         * Returns true if this URI is hierarchical like "http://google.com".
         * Absolute URIs are hierarchical if the scheme-specific part starts with
         * a '/'. Relative URIs are always hierarchical.
         */
        IsHierarchical(
            [out] Boolean* result);

        /**
         * Returns true if this URI is opaque like "mailto:nobody@google.com". The
         * scheme-specific part of an opaque URI cannot start with a '/'.
         */
        IsOpaque(
            [out] Boolean* result);

        /**
         * Returns true if this URI is relative, i.e.&nbsp;if it doesn't contain an
         * explicit scheme.
         *
         * @return true if this URI is relative, false if it's absolute
         */
        IsRelative(
            [out] Boolean* result);

        /**
         * Returns true if this URI is absolute, i.e.&nbsp;if it contains an
         * explicit scheme.
         *
         * @return true if this URI is absolute, false if it's relative
         */
        IsAbsolute(
            [out] Boolean* result);

        /**
         * Gets the scheme of this URI. Example: "http"
         *
         * @return the scheme or null if this is a relative URI
         */
        GetScheme(
            [out] String* result);

        /**
         * Gets the scheme-specific part of this URI, i.e.&nbsp;everything between
         * the scheme separator ':' and the fragment separator '#'. If this is a
         * relative URI, this method returns the entire URI. Decodes escaped octets.
         *
         * <p>Example: "//www.google.com/search?q=android"
         *
         * @return the decoded scheme-specific-part
         */
        GetSchemeSpecificPart(
            [out] String* result);

        /**
         * Gets the scheme-specific part of this URI, i.e.&nbsp;everything between
         * the scheme separator ':' and the fragment separator '#'. If this is a
         * relative URI, this method returns the entire URI. Leaves escaped octets
         * intact.
         *
         * <p>Example: "//www.google.com/search?q=android"
         *
         * @return the decoded scheme-specific-part
         */
        GetEncodedSchemeSpecificPart(
            [out] String* result);

        /**
         * Gets the decoded authority part of this URI. For
         * server addresses, the authority is structured as follows:
         * {@code [ userinfo '@' ] host [ ':' port ]}
         *
         * <p>Examples: "google.com", "bob@google.com:80"
         *
         * @return the authority for this URI or null if not present
         */
        GetAuthority(
            [out] String* result);

        /**
         * Gets the encoded authority part of this URI. For
         * server addresses, the authority is structured as follows:
         * {@code [ userinfo '@' ] host [ ':' port ]}
         *
         * <p>Examples: "google.com", "bob@google.com:80"
         *
         * @return the authority for this URI or null if not present
         */
        GetEncodedAuthority(
            [out] String* result);

        /**
         * Gets the decoded user information from the authority.
         * For example, if the authority is "nobody@google.com", this method will
         * return "nobody".
         *
         * @return the user info for this URI or null if not present
         */
        GetUserInfo(
            [out] String* result);

        /**
         * Gets the encoded user information from the authority.
         * For example, if the authority is "nobody@google.com", this method will
         * return "nobody".
         *
         * @return the user info for this URI or null if not present
         */
        GetEncodedUserInfo(
            [out] String* result);

        /**
         * Gets the encoded host from the authority for this URI. For example,
         * if the authority is "bob@google.com", this method will return
         * "google.com".
         *
         * @return the host for this URI or null if not present
         */
        GetHost(
            [out] String* result);

        /**
         * Gets the port from the authority for this URI. For example,
         * if the authority is "google.com:80", this method will return 80.
         *
         * @return the port for this URI or -1 if invalid or not present
         */
        GetPort(
            [out] Int32* result);

        /**
         * Gets the decoded path.
         *
         * @return the decoded path, or null if this is not a hierarchical URI
         * (like "mailto:nobody@google.com") or the URI is invalid
         */
        GetPath(
            [out] String* result);

        /**
         * Gets the encoded path.
         *
         * @return the encoded path, or null if this is not a hierarchical URI
         * (like "mailto:nobody@google.com") or the URI is invalid
         */
        GetEncodedPath(
            [out] String* result);

        /**
         * Gets the decoded query component from this URI. The query comes after
         * the query separator ('?') and before the fragment separator ('#'). This
         * method would return "q=android" for
         * "http://www.google.com/search?q=android".
         *
         * @return the decoded query or null if there isn't one
         */
        GetQuery(
            [out] String* result);

        /**
         * Gets the encoded query component from this URI. The query comes after
         * the query separator ('?') and before the fragment separator ('#'). This
         * method would return "q=android" for
         * "http://www.google.com/search?q=android".
         *
         * @return the encoded query or null if there isn't one
         */
        GetEncodedQuery(
            [out] String* result);

        /**
         * Gets the decoded fragment part of this URI, everything after the '#'.
         *
         * @return the decoded fragment or null if there isn't one
         */
        GetFragment(
            [out] String* result);

        /**
         * Gets the encoded fragment part of this URI, everything after the '#'.
         *
         * @return the encoded fragment or null if there isn't one
         */
        GetEncodedFragment(
            [out] String* result);

        /**
         * Gets the decoded path segments.
         *
         * @return decoded path segments, each without a leading or trailing '/'
         */
        GetPathSegments(
            [out] IList** result);

        /**
         * Gets the decoded last segment in the path.
         *
         * @return the decoded last segment or null if the path is empty
         */
        GetLastPathSegment(
            [out] String* result);

        /**
         * Return a string representation of the URI that is safe to print
         * to logs and other places where PII should be avoided.
         * @hide
         */
        ToSafeString(
            [out] String* result);

        /**
         * Constructs a new builder, copying the attributes from this Uri.
         */
        BuildUpon(
            [out] IUriBuilder** result);

        /**
         * Returns a set of the unique names of all query parameters. Iterating
         * over the set will return the names in order of their first occurrence.
         *
         * @throws UnsupportedOperationException if this isn't a hierarchical URI
         *
         * @return a set of decoded names
         */
        GetQueryParameterNames(
            [out] ISet** result);

        /**
         * Searches the query string for parameter values with the given key.
         *
         * @param key which will be encoded
         *
         * @throws UnsupportedOperationException if this isn't a hierarchical URI
         * @throws NullPointerException if key is null
         * @return a list of decoded values
         */
        GetQueryParameters(
            [in] String key,
            [out] IList** result);

        /**
         * Searches the query string for the first value with the given key.
         *
         * <p><strong>Warning:</strong> Prior to Ice Cream Sandwich, this decoded
         * the '+' character as '+' rather than ' '.
         *
         * @param key which will be encoded
         * @throws UnsupportedOperationException if this isn't a hierarchical URI
         * @throws NullPointerException if key is null
         * @return the decoded value or null if no parameter is found
         */
        GetQueryParameter(
            [in] String key,
            [out] String* result);

        /**
         * Searches the query string for the first value with the given key and interprets it
         * as a boolean value. "false" and "0" are interpreted as <code>false</code>, everything
         * else is interpreted as <code>true</code>.
         *
         * @param key which will be decoded
         * @param defaultValue the default value to return if there is no query parameter for key
         * @return the boolean interpretation of the query parameter key
         */
        GetBooleanQueryParameter(
            [in] String key,
            [in] Boolean defaultValue,
            [out] Boolean* result);

        /**
         * Return an equivalent URI with a lowercase scheme component.
         * This aligns the Uri with Android best practices for
         * intent filtering.
         *
         * <p>For example, "HTTP://www.android.com" becomes
         * "http://www.android.com"
         *
         * <p>All URIs received from outside Android (such as user input,
         * or external sources like Bluetooth, NFC, or the Internet) should
         * be normalized before they are used to create an Intent.
         *
         * <p class="note">This method does <em>not</em> validate bad URI's,
         * or 'fix' poorly formatted URI's - so do not use it for input validation.
         * A Uri will always be returned, even if the Uri is badly formatted to
         * begin with and a scheme component cannot be found.
         *
         * @return normalized Uri (never null)
         * @see {@link android.content.Intent#setData}
         * @see {@link #setNormalizedData}
         */
        NormalizeScheme(
            [out] IUri** result);

        /**
         * If this {@link Uri} is {@code file://}, then resolve and return its
         * canonical path. Also fixes legacy emulated storage paths so they are
         * usable across user boundaries. Should always be called from the app
         * process before sending elsewhere.
         *
         * @hide
         */
        GetCanonicalUri(
            [out] IUri** result);

        /**
         * If this is a {@code file://} Uri, it will be reported to
         * {@link StrictMode}.
         *
         * @hide
         */
        CheckFileUriExposed(
            [in] String location);

        /**
         * Test if this is a path prefix match against the given Uri. Verifies that
         * scheme, authority, and atomic path segments match.
         *
         * @hide
         */
        IsPathPrefixMatch(
            [in] IUri* prefix,
            [out] Boolean* result);
    }

    interface IUriHelper {
        /**
         * The empty URI, equivalent to "".
         */
        GetEMPTY(
            [out] IUri** result);

        /**
         * Creates a Uri which parses the given encoded URI string.
         *
         * @param uriString an RFC 2396-compliant, encoded URI
         * @throws NullPointerException if uriString is null
         * @return Uri for this given uri string
         */
        Parse(
            [in] String uriString,
            [out] IUri** result);

        /**
         * Creates a Uri from a file. The URI has the form
         * "file://<absolute path>". Encodes path characters with the exception of
         * '/'.
         *
         * <p>Example: "file:///tmp/android.txt"
         *
         * @throws NullPointerException if file is null
         * @return a Uri for the given file
         */
        FromFile(
            [in] IFile* file,
            [out] IUri** result);

        /**
         * Creates an opaque Uri from the given components. Encodes the ssp
         * which means this method cannot be used to create hierarchical URIs.
         *
         * @param scheme of the URI
         * @param ssp scheme-specific-part, everything between the
         *  scheme separator (':') and the fragment separator ('#'), which will
         *  get encoded
         * @param fragment fragment, everything after the '#', null if undefined,
         *  will get encoded
         *
         * @throws NullPointerException if scheme or ssp is null
         * @return Uri composed of the given scheme, ssp, and fragment
         *
         * @see Builder if you don't want the ssp and fragment to be encoded
         */
        FromParts(
            [in] String scheme,
            [in] String ssp,
            [in] String fragment,
            [out] IUri** result);

        /**
         * Encodes characters in the given string as '%'-escaped octets
         * using the UTF-8 scheme. Leaves letters ("A-Z", "a-z"), numbers
         * ("0-9"), and unreserved characters ("_-!.~'()*") intact. Encodes
         * all other characters.
         *
         * @param s string to encode
         * @return an encoded version of s suitable for use as a URI component,
         *  or null if s is null
         */
        Encode(
            [in] String s,
            [out] String* result);

        /**
         * Encodes characters in the given string as '%'-escaped octets
         * using the UTF-8 scheme. Leaves letters ("A-Z", "a-z"), numbers
         * ("0-9"), and unreserved characters ("_-!.~'()*") intact. Encodes
         * all other characters with the exception of those specified in the
         * allow argument.
         *
         * @param s string to encode
         * @param allow set of additional characters to allow in the encoded form,
         *  null if no characters should be skipped
         * @return an encoded version of s suitable for use as a URI component,
         *  or null if s is null
         */
        Encode(
            [in] String s,
            [in] String allow,
            [out] String* result);

        /**
         * Decodes '%'-escaped octets in the given string using the UTF-8 scheme.
         * Replaces invalid octets with the unicode replacement character
         * ("\\uFFFD").
         *
         * @param s encoded string to decode
         * @return the given string with escaped octets decoded, or null if
         *  s is null
         */
        Decode(
            [in] String s,
            [out] String* result);

        /**
         * Creates a new Uri by appending an already-encoded path segment to a
         * base Uri.
         *
         * @param baseUri Uri to append path segment to
         * @param pathSegment encoded path segment to append
         * @return a new Uri based on baseUri with the given segment appended to
         *  the path
         * @throws NullPointerException if baseUri is null
         */
        WithAppendedPath(
            [in] IUri* baseUri,
            [in] String pathSegment,
            [out] IUri** result);
    }

    /**
     * Helper class for building or manipulating URI references. Not safe for
     * concurrent use.
     *
     * <p>An absolute hierarchical URI reference follows the pattern:
     * {@code <scheme>://<authority><absolute path>?<query>#<fragment>}
     *
     * <p>Relative URI references (which are always hierarchical) follow one
     * of two patterns: {@code <relative or absolute path>?<query>#<fragment>}
     * or {@code //<authority><absolute path>?<query>#<fragment>}
     *
     * <p>An opaque URI follows this pattern:
     * {@code <scheme>:<opaque part>#<fragment>}
     *
     * <p>Use {@link Uri#buildUpon()} to obtain a builder representing an existing URI.
     */
    /**
     * @Involved
     * no super interface
     */
    interface IUriBuilder {
        /**
         * Sets the scheme.
         *
         * @param scheme name or {@code null} if this is a relative Uri
         */
        Scheme(
            [in] String scheme);

        /**
         * Encodes and sets the given opaque scheme-specific-part.
         *
         * @param opaquePart decoded opaque part
         */
        OpaquePart(
            [in] String opaquePart);

        /**
         * Sets the previously encoded opaque scheme-specific-part.
         *
         * @param opaquePart encoded opaque part
         */
        EncodedOpaquePart(
            [in] String opaquePart);

        /**
         * Encodes and sets the authority.
         */
        Authority(
            [in] String authority);

        /**
         * Sets the previously encoded authority.
         */
        EncodedAuthority(
            [in] String authority);

        /**
         * Sets the path. Leaves '/' characters intact but encodes others as
         * necessary.
         *
         * <p>If the path is not null and doesn't start with a '/', and if
         * you specify a scheme and/or authority, the builder will prepend the
         * given path with a '/'.
         */
        Path(
            [in] String path);

        /**
         * Sets the previously encoded path.
         *
         * <p>If the path is not null and doesn't start with a '/', and if
         * you specify a scheme and/or authority, the builder will prepend the
         * given path with a '/'.
         */
        EncodedPath(
            [in] String path);

        /**
         * Encodes the given segment and appends it to the path.
         */
        AppendPath(
            [in] String newSegment);

        /**
         * Appends the given segment to the path.
         */
        AppendEncodedPath(
            [in] String newSegment);

        /**
         * Encodes and sets the query.
         */
        Query(
            [in] String query);

        /**
         * Sets the previously encoded query.
         */
        EncodedQuery(
            [in] String query);

        /**
         * Encodes and sets the fragment.
         */
        Fragment(
            [in] String fragment);

        /**
         * Sets the previously encoded fragment.
         */
        EncodedFragment(
            [in] String fragment);

        /**
         * Encodes the key and value and then appends the parameter to the
         * query string.
         *
         * @param key which will be encoded
         * @param value which will be encoded
         */
        AppendQueryParameter(
            [in] String key,
            [in] String value);

        /**
         * Clears the the previously set query.
         */
        ClearQuery();

        /**
         * Constructs a Uri with the current attributes.
         *
         * @throws UnsupportedOperationException if the URI is opaque and the
         *  scheme is null
         */
        Build(
            [out] IUri** result);
    }

    } // namespace Net
    } // namespace Droid
    } // namespace Elastos
}
