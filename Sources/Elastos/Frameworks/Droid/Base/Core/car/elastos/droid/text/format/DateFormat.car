module
{
    using interface Elastos.Core.ICharSequence;
    using interface Elastos.Utility.IDate;
    using interface Elastos.Utility.ILocale;
    using interface Elastos.Utility.ICalendar;

    interface Elastos.Droid.Content.IContext;

    namespace Elastos {
    namespace Droid {
    namespace Text {
    namespace Format {

    /**
     * Utility class for producing strings with formatted date/time.
     *
     * <p>Most callers should avoid supplying their own format strings to this
     * class' {@code format} methods and rely on the correctly localized ones
     * supplied by the system. This class' factory methods return
     * appropriately-localized {@link java.text.DateFormat} instances, suitable
     * for both formatting and parsing dates. For the canonical documentation
     * of format strings, see {@link java.text.SimpleDateFormat}.
     *
     * <p>In cases where the system does not provide a suitable pattern,
     * this class offers the {@link #getBestDateTimePattern} method.
     *
     * <p>The {@code format} methods in this class implement a subset of Unicode
     * <a href="http://www.unicode.org/reports/tr35/#Date_Format_Patterns">UTS #35</a> patterns.
     * The subset currently supported by this class includes the following format characters:
     * {@code acdEHhLKkLMmsyz}. Up to API level 17, only {@code adEhkMmszy} were supported.
     * Note that this class incorrectly implements {@code k} as if it were {@code H} for backwards
     * compatibility.
     *
     * <p>See {@link java.text.SimpleDateFormat} for more documentation
     * about patterns, or if you need a more complete or correct implementation.
     * Note that the non-{@code format} methods in this class are implemented by
     * {@code SimpleDateFormat}.
     */
    [deprecated, local]
    interface IDateFormat {
        /** @deprecated Use a literal {@code '} instead. */
        //@Deprecated
        const Char32 QUOTE = '\'';

        /** @deprecated Use a literal {@code 'a'} instead. */
        //@Deprecated
        const Char32 AM_PM = 'a';

        /** @deprecated Use a literal {@code 'a'} instead; 'A' was always equivalent to 'a'. */
        //@Deprecated
        const Char32 CAPITAL_AM_PM = 'A';

        /** @deprecated Use a literal {@code 'd'} instead. */
        //@Deprecated
        const Char32 DATE = 'd';

        /** @deprecated Use a literal {@code 'E'} instead. */
        //@Deprecated
        const Char32 DAY = 'E';

        /** @deprecated Use a literal {@code 'h'} instead. */
        //@Deprecated
        const Char32 HOUR = 'h';

        /**
         * @deprecated Use a literal {@code 'H'} (for compatibility with {@link SimpleDateFormat}
         * and Unicode) or {@code 'k'} (for compatibility with Android releases up to and including
         * Jelly Bean MR-1) instead. Note that the two are incompatible.
         */
        //@Deprecated
        const Char32 HOUR_OF_DAY = 'k';

        /** @deprecated Use a literal {@code 'm'} instead. */
        //@Deprecated
        const Char32 MINUTE = 'm';

        /** @deprecated Use a literal {@code 'M'} instead. */
        //@Deprecated
        const Char32 MONTH = 'M';

        /** @deprecated Use a literal {@code 'L'} instead. */
        //@Deprecated
        const Char32 STANDALONE_MONTH = 'L';

        /** @deprecated Use a literal {@code 's'} instead. */
        //@Deprecated
        const Char32 SECONDS = 's';

        /** @deprecated Use a literal {@code 'z'} instead. */
        //@Deprecated
        const Char32 TIME_ZONE = 'z';

        /** @deprecated Use a literal {@code 'y'} instead. */
        //@Deprecated
        const Char32 YEAR = 'y';

        /**
         * Returns true if user preference is set to 24-hour format.
         * @param context the context to use for the content resolver
         * @return true if 24 hour time format is selected, false otherwise.
         */
        Is24HourFormat(
            [in] IContext* ctx,
            [out] Boolean* ret);

        /**
         * Returns the best possible localized form of the given skeleton for the given
         * locale. A skeleton is similar to, and uses the same format characters as, a Unicode
         * <a href="http://www.unicode.org/reports/tr35/#Date_Format_Patterns">UTS #35</a>
         * pattern.
         *
         * <p>One difference is that order is irrelevant. For example, "MMMMd" will return
         * "MMMM d" in the {@code en_US} locale, but "d. MMMM" in the {@code de_CH} locale.
         *
         * <p>Note also in that second example that the necessary punctuation for German was
         * added. For the same input in {@code es_ES}, we'd have even more extra text:
         * "d 'de' MMMM".
         *
         * <p>This method will automatically correct for grammatical necessity. Given the
         * same "MMMMd" input, this method will return "d LLLL" in the {@code fa_IR} locale,
         * where stand-alone months are necessary. Lengths are preserved where meaningful,
         * so "Md" would give a different result to "MMMd", say, except in a locale such as
         * {@code ja_JP} where there is only one length of month.
         *
         * <p>This method will only return patterns that are in CLDR, and is useful whenever
         * you know what elements you want in your format string but don't want to make your
         * code specific to any one locale.
         *
         * @param locale the locale into which the skeleton should be localized
         * @param skeleton a skeleton as described above
         * @return a string pattern suitable for use with {@link java.text.SimpleDateFormat}.
         */
        GetBestDateTimePattern(
            [in] ILocale* locale,
            [in] String skeleton,
            [out] String* pattern);

        /**
         * Returns a {@link java.text.DateFormat} object that can format the time according
         * to the current locale and the user's 12-/24-hour clock preference.
         * @param context the application context
         * @return the {@link java.text.DateFormat} object that properly formats the time.
         */
        GetTimeFormat(
            [in] IContext* ctx,
            [out] Elastos.Text.IDateFormat** ret);

        /**
         * Returns a String pattern that can be used to format the time according
         * to the current locale and the user's 12-/24-hour clock preference.
         * @param context the application context
         * @hide
         */
        GetTimeFormatString(
            [in] IContext* ctx,
            [out] String* format);

        /**
         * Returns a {@link java.text.DateFormat} object that can format the date
         * in short form (such as 12/31/1999) according
         * to the current locale and the user's date-order preference.
         * @param context the application context
         * @return the {@link java.text.DateFormat} object that properly formats the date.
         */
        GetDateFormat(
            [in] IContext* ctx,
            [out] Elastos.Text.IDateFormat** ret);

        /**
         * Returns a {@link java.text.DateFormat} object to format the date
         * as if the date format setting were set to <code>value</code>,
         * including null to use the locale's default format.
         * @param context the application context
         * @param value the date format setting string to interpret for
         *              the current locale
         * @hide
         */
        GetDateFormatForSetting(
            [in] IContext* ctx,
            [in] String value,
            [out] Elastos.Text.IDateFormat** ret);

        /**
         * Returns a {@link java.text.DateFormat} object that can format the date
         * in long form (such as {@code Monday, January 3, 2000}) for the current locale.
         * @param context the application context
         * @return the {@link java.text.DateFormat} object that formats the date in long form.
         */
        GetLongDateFormat(
            [in] IContext* ctx,
            [out] Elastos.Text.IDateFormat** ret);

        /**
         * Returns a {@link java.text.DateFormat} object that can format the date
         * in medium form (such as {@code Jan 3, 2000}) for the current locale.
         * @param context the application context
         * @return the {@link java.text.DateFormat} object that formats the date in long form.
         */
        GetMediumDateFormat(
            [in] IContext* ctx,
            [out] Elastos.Text.IDateFormat** ret);

        /**
         * Gets the current date format stored as a char array. The array will contain
         * 3 elements ({@link #DATE}, {@link #MONTH}, and {@link #YEAR}) in the order
         * specified by the user's format preference.  Note that this order is
         * <i>only</i> appropriate for all-numeric dates; spelled-out (MEDIUM and LONG)
         * dates will generally contain other punctuation, spaces, or words,
         * not just the day, month, and year, and not necessarily in the same
         * order returned here.
         */
        GetDateFormatOrder(
            [in] IContext* ctx,
            [out, callee] ArrayOf<Char32>* ret);

        /**
         * Given a format string and a time in milliseconds since Jan 1, 1970 GMT, returns a
         * CharSequence containing the requested date.
         * @param inFormat the format string, as described in {@link android.text.format.DateFormat}
         * @param inTimeInMillis in milliseconds since Jan 1, 1970 GMT
         * @return a {@link CharSequence} containing the requested text
         */
        Format(
            [in] ICharSequence* inFormat,
            [in] Int64 inTimeInMillis,
            [out] ICharSequence** ret);

        /**
         * Given a format string and a {@link java.util.Date} object, returns a CharSequence containing
         * the requested date.
         * @param inFormat the format string, as described in {@link android.text.format.DateFormat}
         * @param inDate the date to format
         * @return a {@link CharSequence} containing the requested text
         */
        Format(
            [in] ICharSequence* inFormat,
            [in] IDate* inDate,
            [out] ICharSequence** ret);

        /**
         * Indicates whether the specified format string contains seconds.
         *
         * Always returns false if the input format is null.
         *
         * @param inFormat the format string, as described in {@link android.text.format.DateFormat}
         *
         * @return true if the format string contains {@link #SECONDS}, false otherwise
         *
         * @hide
         */
        HasSeconds(
            [in] ICharSequence* inFormat,
            [out] Boolean* ret);

        /**
         * Given a format string and a {@link java.util.Calendar} object, returns a CharSequence
         * containing the requested date.
         * @param inFormat the format string, as described in {@link android.text.format.DateFormat}
         * @param inDate the date to format
         * @return a {@link CharSequence} containing the requested text
         */
        Format(
            [in] ICharSequence* inFormat,
            [in] ICalendar* inDate,
            [out] ICharSequence** ret);
    }

    }//namespace Format
    }//namespace Text
    }//namespace Droid
    }//namespace Elastos
}
