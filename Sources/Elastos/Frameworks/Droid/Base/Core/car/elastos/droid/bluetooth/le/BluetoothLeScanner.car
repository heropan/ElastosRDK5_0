
module
{
    interface Elastos.Droid.Bluetooth.LE.IScanSettings;
    interface Elastos.Droid.Bluetooth.LE.IScanCallback;

    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {
    namespace LE {

    /**
     * This class provides methods to perform scan related operations for Bluetooth LE devices. An
     * application can scan for a particular type of Bluetotoh LE devices using {@link ScanFilter}. It
     * can also request different types of callbacks for delivering the result.
     * <p>
     * Use {@link BluetoothAdapter#getBluetoothLeScanner()} to get an instance of
     * {@link BluetoothLeScanner}.
     * <p>
     * <b>Note:</b> Most of the scan methods here require
     * {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
     *
     * @see ScanFilter
     */
    interface IBluetoothLeScanner {

        /**
         * Start Bluetooth LE scan with default parameters and no filters. The scan results will be
         * delivered through {@code callback}.
         * <p>
         * Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
         *
         * @param callback Callback used to deliver scan results.
         * @throws IllegalArgumentException If {@code callback} is null.
         */
        StartScan(
            [in] IScanCallback* cb);

        /**
         * Start Bluetooth LE scan. The scan results will be delivered through {@code callback}.
         * <p>
         * Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
         *
         * @param filters {@link ScanFilter}s for finding exact BLE devices.
         * @param settings Settings for the scan.
         * @param callback Callback used to deliver scan results.
         * @throws IllegalArgumentException If {@code settings} or {@code callback} is null.
         */
        StartScan(
            [in] IList* filters,
            [in] IScanSettings* settings,
            [in] IScanCallback* cb);

        /**
         * Stops an ongoing Bluetooth LE scan.
         * <p>
         * Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
         *
         * @param callback
         */
        StopScan(
            [in] IScanCallback* cb);

        /**
         * Flush pending batch scan results stored in Bluetooth controller. This will return Bluetooth
         * LE scan results batched on bluetooth controller. Returns immediately, batch scan results data
         * will be delivered through the {@code callback}.
         *
         * @param callback Callback of the Bluetooth LE Scan, it has to be the same instance as the one
         *            used to start scan.
         */
        FlushPendingScanResults(
            [in] IScanCallback* cb);

        /**
         * Start truncated scan.
         *
         * @hide
         */
        //@SystemApi
        StartTruncatedScan(
            [in] IList* truncatedFilters,
            [in] IScanSettings* settings,
            [in] IScanCallback* cb);

        /**
         * Cleans up scan clients. Should be called when bluetooth is down.
         *
         * @hide
         */
        Cleanup();
    }


    } // LE
    } // Bluetooth
    } // Droid
    } // Elastos
}