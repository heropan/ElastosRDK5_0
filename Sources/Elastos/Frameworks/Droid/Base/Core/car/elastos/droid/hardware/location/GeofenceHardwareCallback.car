
module
{
    interface Elastos.Droid.Location.ILocation;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Location {

    /**
     * The callback class associated with the APIs in {@link GeofenceHardware}
     *
     * @hide
     */
    //@SystemApi
    interface IGeofenceHardwareCallback {
        /**
         * The callback called when there is a transition to report for the specific
         * geofence.
         *
         * @param geofenceId The geofence ID of the geofence
         * @param transition One of {@link GeofenceHardware#GEOFENCE_ENTERED},
         *        {@link GeofenceHardware#GEOFENCE_EXITED}, {@link GeofenceHardware#GEOFENCE_UNCERTAIN}
         * @param location The last known location according to the monitoring system.
         * @param timestamp The timestamp (elapsed real time in milliseconds) when the transition was
         *        detected
         * @param monitoringType Type of the monitoring system.
         */
        OnGeofenceTransition(
            [in] Int32 geofenceId,
            [in] Int32 transition,
            [in] ILocation* location,
            [in] Int64 timestamp,
            [in] Int32 monitoringType);

        /**
         * The callback called to notify the success or failure of the add call.
         *
         * @param geofenceId The ID of the geofence.
         * @param status One of {@link GeofenceHardware#GEOFENCE_SUCCESS},
         *        {@link GeofenceHardware#GEOFENCE_ERROR_ID_EXISTS},
         *        {@link GeofenceHardware#GEOFENCE_ERROR_INVALID_TRANSITION},
         *        {@link GeofenceHardware#GEOFENCE_ERROR_TOO_MANY_GEOFENCES},
         *        {@link GeofenceHardware#GEOFENCE_FAILURE}
         */
        OnGeofenceAdd(
            [in] Int32 geofenceId,
            [in] Int32 status);

        /**
         * The callback called to notify the success or failure of the remove call.
         *
         * @param geofenceId The ID of the geofence.
         * @param status  One of {@link GeofenceHardware#GEOFENCE_SUCCESS},
         *        {@link GeofenceHardware#GEOFENCE_ERROR_ID_UNKNOWN},
         *        {@link GeofenceHardware#GEOFENCE_FAILURE}
         */
        OnGeofenceRemove(
            [in] Int32 geofenceId,
            [in] Int32 status);

        /**
         * The callback called to notify the success or failure of the pause call.
         *
         * @param geofenceId The ID of the geofence.
         * @param status One of {@link GeofenceHardware#GEOFENCE_SUCCESS},
         *        {@link GeofenceHardware#GEOFENCE_ERROR_ID_UNKNOWN},
         *        {@link GeofenceHardware#GEOFENCE_FAILURE}
         */
        OnGeofencePause(
            [in] Int32 geofenceId,
            [in] Int32 status);

        /**
         * The callback called to notify the success or failure of the resume call.
         *
         * @param geofenceId The ID of the geofence.
         * @param status One of {@link GeofenceHardware#GEOFENCE_SUCCESS},
         *        {@link GeofenceHardware#GEOFENCE_ERROR_ID_UNKNOWN},
         *        {@link GeofenceHardware#GEOFENCE_ERROR_INVALID_TRANSITION},
         *        {@link GeofenceHardware#GEOFENCE_FAILURE}
         */
        OnGeofenceResume(
            [in] Int32 geofenceId,
            [in] Int32 status);
    }

    } // namespace Location
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
