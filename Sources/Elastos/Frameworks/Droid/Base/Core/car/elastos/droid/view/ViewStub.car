
module
{
    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IViewStub;

    namespace Elastos {
    namespace Droid {
    namespace View {

    /**
     * Listener used to receive a notification after a ViewStub has successfully
     * inflated its layout resource.
     *
     * @see android.view.ViewStub#setOnInflateListener(android.view.ViewStub.OnInflateListener)
     */
    [local]
    interface IViewStubOnInflateListener {
        /**
         * Invoked after a ViewStub successfully inflated its layout resource.
         * This method is invoked after the inflated view was added to the
         * hierarchy but before the layout pass.
         *
         * @param stub The ViewStub that initiated the inflation.
         * @param inflated The inflated View.
         */
        OnInflate(
            [in] IViewStub* stub,
            [in] IView* inflated);
    }

    /**
     * A ViewStub is an invisible, zero-sized View that can be used to lazily inflate
     * layout resources at runtime.
     *
     * When a ViewStub is made visible, or when {@link #inflate()}  is invoked, the layout resource
     * is inflated. The ViewStub then replaces itself in its parent with the inflated View or Views.
     * Therefore, the ViewStub exists in the view hierarchy until {@link #setVisibility(int)} or
     * {@link #inflate()} is invoked.
     *
     * The inflated View is added to the ViewStub's parent with the ViewStub's layout
     * parameters. Similarly, you can define/override the inflate View's id by using the
     * ViewStub's inflatedId property. For instance:
     *
     * <pre>
     *     &lt;ViewStub android:id="@+id/stub"
     *               android:inflatedId="@+id/subTree"
     *               android:layout="@layout/mySubTree"
     *               android:layout_width="120dip"
     *               android:layout_height="40dip" /&gt;
     * </pre>
     *
     * The ViewStub thus defined can be found using the id "stub." After inflation of
     * the layout resource "mySubTree," the ViewStub is removed from its parent. The
     * View created by inflating the layout resource "mySubTree" can be found using the
     * id "subTree," specified by the inflatedId property. The inflated View is finally
     * assigned a width of 120dip and a height of 40dip.
     *
     * The preferred way to perform the inflation of the layout resource is the following:
     *
     * <pre>
     *     ViewStub stub = (ViewStub) findViewById(R.id.stub);
     *     View inflated = stub.inflate();
     * </pre>
     *
     * When {@link #inflate()} is invoked, the ViewStub is replaced by the inflated View
     * and the inflated View is returned. This lets applications get a reference to the
     * inflated View without executing an extra findViewById().
     *
     * @attr ref android.R.styleable#ViewStub_inflatedId
     * @attr ref android.R.styleable#ViewStub_layout
     */
    //@RemoteView
    /**
     * @Involve
     * interface IView
     * interface IDrawableCallback
     * interface IKeyEventCallback
     * interface IAccessibilityEventSource
     */
    [local]
    interface IViewStub {
        /**
         * Returns the id taken by the inflated view. If the inflated id is
         * {@link View#NO_ID}, the inflated view keeps its original id.
         *
         * @return A positive integer used to identify the inflated view or
         *         {@link #NO_ID} if the inflated view should keep its id.
         *
         * @see #setInflatedId(int)
         * @attr ref android.R.styleable#ViewStub_inflatedId
         */
        GetInflatedId(
            [out] Int32* id);

        /**
         * Defines the id taken by the inflated view. If the inflated id is
         * {@link View#NO_ID}, the inflated view keeps its original id.
         *
         * @param inflatedId A positive integer used to identify the inflated view or
         *                   {@link #NO_ID} if the inflated view should keep its id.
         *
         * @see #getInflatedId()
         * @attr ref android.R.styleable#ViewStub_inflatedId
         */
        //@android.view.RemotableViewMethod
        SetInflatedId(
            [in] Int32 inflatedId);

        /**
         * Returns the layout resource that will be used by {@link #setVisibility(int)} or
         * {@link #inflate()} to replace this StubbedView
         * in its parent by another view.
         *
         * @return The layout resource identifier used to inflate the new View.
         *
         * @see #setLayoutResource(int)
         * @see #setVisibility(int)
         * @see #inflate()
         * @attr ref android.R.styleable#ViewStub_layout
         */
        GetLayoutResource(
            [out] Int32* resource);

        /**
         * Specifies the layout resource to inflate when this StubbedView becomes visible or invisible
         * or when {@link #inflate()} is invoked. The View created by inflating the layout resource is
         * used to replace this StubbedView in its parent.
         *
         * @param layoutResource A valid layout resource identifier (different from 0.)
         *
         * @see #getLayoutResource()
         * @see #setVisibility(int)
         * @see #inflate()
         * @attr ref android.R.styleable#ViewStub_layout
         */
        //@android.view.RemotableViewMethod
        SetLayoutResource(
            [in] Int32 layoutResource);

        /**
         * Set {@link LayoutInflater} to use in {@link #inflate()}, or {@code null}
         * to use the default.
         */
        SetLayoutInflater(
            [in] ILayoutInflater* inflater);

        /**
         * Get current {@link LayoutInflater} used in {@link #inflate()}.
         */
        GetLayoutInflater(
            [out] ILayoutInflater** inflater);

        /**
         * Inflates the layout resource identified by {@link #getLayoutResource()}
         * and replaces this StubbedView in its parent by the inflated layout resource.
         *
         * @return The inflated layout resource.
         *
         */
        Inflate(
            [out] IView** view);

        /**
         * Specifies the inflate listener to be notified after this ViewStub successfully
         * inflated its layout resource.
         *
         * @param inflateListener The OnInflateListener to notify of successful inflation.
         *
         * @see android.view.ViewStub.OnInflateListener
         */
        SetOnInflateListener(
            [in] IViewStubOnInflateListener* inflateListener);
    }

    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
