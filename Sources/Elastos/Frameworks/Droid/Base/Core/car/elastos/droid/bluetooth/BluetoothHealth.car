
module
{
    using interface Elastos.Droid.Os.IParcelFileDescriptor;

    interface Elastos.Droid.Bluetooth.IBluetoothHealthAppConfiguration;
    interface Elastos.Droid.Bluetooth.IBluetoothHealthCallback;

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {

        /**
         * Public API for Bluetooth Health Profile.
         *
         * <p>BluetoothHealth is a proxy object for controlling the Bluetooth
         * Service via IPC.
         *
         * <p> How to connect to a health device which is acting in the source role.
         *  <li> Use BluetoothAdapter#getProfileProxy to get
         *  the BluetoothHealth proxy object. </li>
         *  <li> Create an BluetoothHealth callback and call
         *  #registerSinkAppConfiguration to register an application
         *  configuration </li>
         *  <li> Pair with the remote device. This currently needs to be done manually
         *  from Bluetooth Settings </li>
         *  <li> Connect to a health device using #connectChannelToSource. Some
         *  devices will connect the channel automatically. The BluetoothHealth
         *  callback will inform the application of channel state change. </li>
         *  <li> Use the file descriptor provided with a connected channel to read and
         *  write data to the health channel. </li>
         *  <li> The received data needs to be interpreted using a health manager which
         *  implements the IEEE 11073-xxxxx specifications.
         *  <li> When done, close the health channel by calling #disconnectChannel
         *  and unregister the application configuration calling
         *  #unregisterAppConfiguration
         *
         * @sa BluetoothAdapter#getProfileProxy
         * @sa BluetoothHealth
         * @sa #registerSinkAppConfiguration
         * @sa #connectChannelToSource
         * @sa BluetoothHealth
         * @sa #disconnectChannel
         * @sa #unregisterAppConfiguration
         *
         * @implements Elastos.Droid.IBluetoothProfile
         */
        /**
         * @Involve
         * interface IBluetoothProfile
         */
        [deprecated, local]
        interface IBluetoothHealth {

            /**
             * Health Profile Source Role - the health device.
             */
            const Int32 SOURCE_ROLE = 0x1; //1 << 0;

            /**
             * Health Profile Sink Role the device talking to the health device.
             */
            const Int32 SINK_ROLE = 0x2; //1 << 1;

            /**
             * Health Profile - Channel Type used - Reliable
             */
            const Int32 CHANNEL_TYPE_RELIABLE = 10;

            /**
             * Health Profile - Channel Type used - Streaming
             */
            const Int32 CHANNEL_TYPE_STREAMING = 11;

            /**
             * @hide
             */
            const Int32 CHANNEL_TYPE_ANY = 12;

            /** @hide */
            const Int32 HEALTH_OPERATION_SUCCESS = 6000;

            /** @hide */
            const Int32 HEALTH_OPERATION_ERROR = 6001;

            /** @hide */
            const Int32 HEALTH_OPERATION_INVALID_ARGS = 6002;

            /** @hide */
            const Int32 HEALTH_OPERATION_GENERIC_FAILURE = 6003;

            /** @hide */
            const Int32 HEALTH_OPERATION_NOT_FOUND = 6004;

            /** @hide */
            const Int32 HEALTH_OPERATION_NOT_ALLOWED = 6005;

            /** Health Channel Connection State - Disconnected */
            const Int32 STATE_CHANNEL_DISCONNECTED  = 0;

            /** Health Channel Connection State - Connecting */
            const Int32 STATE_CHANNEL_CONNECTING    = 1;

            /** Health Channel Connection State - Connected */
            const Int32 STATE_CHANNEL_CONNECTED     = 2;

            /** Health Channel Connection State - Disconnecting */
            const Int32 STATE_CHANNEL_DISCONNECTING = 3;

            /** Health App Configuration registration success */
            const Int32 APP_CONFIG_REGISTRATION_SUCCESS = 0;

            /** Health App Configuration registration failure */
            const Int32 APP_CONFIG_REGISTRATION_FAILURE = 1;

            /** Health App Configuration un-registration success */
            const Int32 APP_CONFIG_UNREGISTRATION_SUCCESS = 2;

            /** Health App Configuration un-registration failure */
            const Int32 APP_CONFIG_UNREGISTRATION_FAILURE = 3;

            /**
             * Register an application configuration that acts as a Health SINK.
             * This is the configuration that will be used to communicate with health devices
             * which will act as the #SOURCE_ROLE. This is an asynchronous call and so
             * the callback is used to notify success or failure if the function returns true.
             *
             * @sa #SOURCE_ROLE
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param name The friendly name associated with the application or configuration.
             * @param dataType The dataType of the Source role of Health Profile to which
             *                   the sink wants to connect to.
             * @param callback A callback to indicate success or failure of the registration and
             *               all operations done on this application configuration.
             * @return If true, callback will be called.
             */
            RegisterSinkAppConfiguration(
                [in] String name,
                [in] Int32 dataType,
                [in] IBluetoothHealthCallback* healthCallback,
                [out] Boolean* result);

            /**
             * Register an application configuration that acts as a Health SINK or in a Health
             * SOURCE role.This is an asynchronous call and so
             * the callback is used to notify success or failure if the function returns true.
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param name The friendly name associated with the application or configuration.
             * @param dataType The dataType of the Source role of Health Profile.
             * @param channelType The channel type. Will be one of
             *                              #CHANNEL_TYPE_RELIABLE  or
             *                              #CHANNEL_TYPE_STREAMING
             * @param callback - A callback to indicate success or failure.
             * @return If true, callback will be called.
             *
             * @sa #CHANNEL_TYPE_RELIABLE
             * @sa #CHANNEL_TYPE_STREAMING
             * @hide
             */
            RegisterAppConfiguration(
                [in] String name,
                [in] Int32 dataType,
                [in] Int32 role,
                [in] Int32 channelType,
                [in] IBluetoothHealthCallback* healthCallback,
                [out] Boolean* result);

            /**
             * Unregister an application configuration that has been registered using
             * #registerSinkAppConfiguration
             *
             * @sa #registerSinkAppConfiguration
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param config  The health app configuration
             * @return Success or failure.
             */
            UnregisterAppConfiguration(
                [in] IBluetoothHealthAppConfiguration* config,
                [out] Boolean* result);

            /**
             * Connect to a health device which has the #SOURCE_ROLE.
             * This is an asynchronous call. If this function returns true, the callback
             * associated with the application configuration will be called.
             *
             * @sa #SOURCE_ROLE
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param device The remote Bluetooth device.
             * @param config The application configuration which has been registered using
             *         #registerSinkAppConfiguration(String, Int32, BluetoothHealthCallback)
             *
             * @sa #registerSinkAppConfiguration(String, Int32, BluetoothHealthCallback)
             * @return If true, the callback associated with the application config will be called.
             */
            ConnectChannelToSource(
                [in] IBluetoothDevice* device,
                [in] IBluetoothHealthAppConfiguration* config,
                [out] Boolean* result);

            /**
             * Connect to a health device which has the #SINK_ROLE.
             * This is an asynchronous call. If this function returns true, the callback
             * associated with the application configuration will be called.
             *
             * @sa #SINK_ROLE
             *
             *<p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param device The remote Bluetooth device.
             * @param config The application configuration which has been registered using
             *      #registerSinkAppConfiguration(String, Int32, BluetoothHealthCallback)
             *
             * @sa #registerSinkAppConfiguration(String, Int32, BluetoothHealthCallback)
             * @return If true, the callback associated with the application config will be called.
             * @hide
             */
            ConnectChannelToSink(
                [in] IBluetoothDevice* device,
                [in] IBluetoothHealthAppConfiguration* config,
                [in] Int32 channelType,
                [out] Boolean* result);

            /**
             * Disconnect a connected health channel.
             * This is an asynchronous call. If this function returns true, the callback
             * associated with the application configuration will be called.
             *
             *<p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param device The remote Bluetooth device.
             * @param config The application configuration which has been registered using
             *        #registerSinkAppConfiguration(String, Int32, BluetoothHealthCallback)
             *
             * @sa #registerSinkAppConfiguration(String, Int32, BluetoothHealthCallback)
             * @param channelId The channel id associated with the channel
             * @return If true, the callback associated with the application config will be called.
             */
            DisconnectChannel(
                [in] IBluetoothDevice* device,
                [in] IBluetoothHealthAppConfiguration* config,
                [in] Int32 channelId,
                [out] Boolean* result);

            /**
             * Get the file descriptor of the main channel associated with the remote device
             * and application configuration.
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * <p> Its the responsibility of the caller to close the ParcelFileDescriptor
             * when done.
             *
             * @param device The remote Bluetooth health device
             * @param config The application configuration
             * @return null on failure, ParcelFileDescriptor on success.
             */
            GetMainChannelFd(
                [in] IBluetoothDevice* device,
                [in] IBluetoothHealthAppConfiguration* config,
                [out] IParcelFileDescriptor** pfd);

            Close();
        }

    } // Bluetooth
    } // Droid
    } // Elastos
}
