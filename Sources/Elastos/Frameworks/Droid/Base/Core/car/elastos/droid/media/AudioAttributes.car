
module
{
    using interface Elastos.Utility.ISet;

    namespace Elastos {
    namespace Droid {
    namespace Media {

    /**
     * A class to encapsulate a collection of attributes describing information about an audio
     * stream.
     * <p><code>AudioAttributes</code> supersede the notion of stream types (see for instance
     * {@link AudioManager#STREAM_MUSIC} or {@link AudioManager#STREAM_ALARM}) for defining the
     * behavior of audio playback. Attributes allow an application to specify more information than is
     * conveyed in a stream type by allowing the application to define:
     * <ul>
     * <li>usage: "why" you are playing a sound, what is this sound used for. This is achieved with
     *     the "usage" information. Examples of usage are {@link #USAGE_MEDIA} and {@link #USAGE_ALARM}.
     *     These two examples are the closest to stream types, but more detailed use cases are
     *     available. Usage information is more expressive than a stream type, and allows certain
     *     platforms or routing policies to use this information for more refined volume or routing
     *     decisions. Usage is the most important information to supply in <code>AudioAttributes</code>
     *     and it is recommended to build any instance with this information supplied, see
     *     {@link AudioAttributes.Builder} for exceptions.</li>
     * <li>content type: "what" you are playing. The content type expresses the general category of
     *     the content. This information is optional. But in case it is known (for instance
     *     {@link #CONTENT_TYPE_MOVIE} for a movie streaming service or {@link #CONTENT_TYPE_MUSIC} for
     *     a music playback application) this information might be used by the audio framework to
     *     selectively configure some audio post-processing blocks.</li>
     * <li>flags: "how" is playback to be affected, see the flag definitions for the specific playback
     *     behaviors they control. </li>
     * </ul>
     * <p><code>AudioAttributes</code> are used for example in one of the {@link AudioTrack}
     * constructors (see {@link AudioTrack#AudioTrack(AudioAttributes, AudioFormat, int, int, int)}),
     * to configure a {@link MediaPlayer}
     * (see {@link MediaPlayer#setAudioAttributes(AudioAttributes)} or a
     * {@link android.app.Notification} (see {@link android.app.Notification#audioAttributes}). An
     * <code>AudioAttributes</code> instance is built through its builder,
     * {@link AudioAttributes.Builder}.
     */
    interface IAudioAttributes {
        /**
         * Content type value to use when the content type is unknown, or other than the ones defined.
         */
        const Int32 CONTENT_TYPE_UNKNOWN = 0;
        /**
         * Content type value to use when the content type is speech.
         */
        const Int32 CONTENT_TYPE_SPEECH = 1;
        /**
         * Content type value to use when the content type is music.
         */
        const Int32 CONTENT_TYPE_MUSIC = 2;
        /**
         * Content type value to use when the content type is a soundtrack, typically accompanying
         * a movie or TV program.
         */
        const Int32 CONTENT_TYPE_MOVIE = 3;
        /**
         * Content type value to use when the content type is a sound used to accompany a user
         * action, such as a beep or sound effect expressing a key click, or event, such as the
         * type of a sound for a bonus being received in a game. These sounds are mostly synthesized
         * or short Foley sounds.
         */
        const Int32 CONTENT_TYPE_SONIFICATION = 4;

        /**
         * Usage value to use when the usage is unknown.
         */
        const Int32 USAGE_UNKNOWN = 0;
        /**
         * Usage value to use when the usage is media, such as music, or movie
         * soundtracks.
         */
        const Int32 USAGE_MEDIA = 1;
        /**
         * Usage value to use when the usage is voice communications, such as telephony
         * or VoIP.
         */
        const Int32 USAGE_VOICE_COMMUNICATION = 2;
        /**
         * Usage value to use when the usage is in-call signalling, such as with
         * a "busy" beep, or DTMF tones.
         */
        const Int32 USAGE_VOICE_COMMUNICATION_SIGNALLING = 3;
        /**
         * Usage value to use when the usage is an alarm (e.g. wake-up alarm).
         */
        const Int32 USAGE_ALARM = 4;
        /**
         * Usage value to use when the usage is notification. See other
         * notification usages for more specialized uses.
         */
        const Int32 USAGE_NOTIFICATION = 5;
        /**
         * Usage value to use when the usage is telephony ringtone.
         */
        const Int32 USAGE_NOTIFICATION_RINGTONE = 6;
        /**
         * Usage value to use when the usage is a request to enter/end a
         * communication, such as a VoIP communication or video-conference.
         */
        const Int32 USAGE_NOTIFICATION_COMMUNICATION_REQUEST = 7;
        /**
         * Usage value to use when the usage is notification for an "instant"
         * communication such as a chat, or SMS.
         */
        const Int32 USAGE_NOTIFICATION_COMMUNICATION_INSTANT = 8;
        /**
         * Usage value to use when the usage is notification for a
         * non-immediate type of communication such as e-mail.
         */
        const Int32 USAGE_NOTIFICATION_COMMUNICATION_DELAYED = 9;
        /**
         * Usage value to use when the usage is to attract the user's attention,
         * such as a reminder or low battery warning.
         */
        const Int32 USAGE_NOTIFICATION_EVENT = 10;
        /**
         * Usage value to use when the usage is for accessibility, such as with
         * a screen reader.
         */
        const Int32 USAGE_ASSISTANCE_ACCESSIBILITY = 11;
        /**
         * Usage value to use when the usage is driving or navigation directions.
         */
        const Int32 USAGE_ASSISTANCE_NAVIGATION_GUIDANCE = 12;
        /**
         * Usage value to use when the usage is sonification, such as  with user
         * interface sounds.
         */
        const Int32 USAGE_ASSISTANCE_SONIFICATION = 13;
        /**
         * Usage value to use when the usage is for game audio.
         */
        const Int32 USAGE_GAME = 14;

        /**
         * Flag defining a behavior where the audibility of the sound will be ensured by the system.
         */
        const Int32 FLAG_AUDIBILITY_ENFORCED = 0x1 << 0;
        /**
         * @hide
         * Flag defining a behavior where the playback of the sound is ensured without
         * degradation only when going to a secure sink.
         */
        // FIXME not guaranteed yet
        // TODO  add in FLAG_ALL_PUBLIC when supported and in public API
        const Int32 FLAG_SECURE = 0x1 << 1;
        /**
         * @hide
         * Flag to enable when the stream is associated with SCO usage.
         * Internal use only for dealing with legacy STREAM_BLUETOOTH_SCO
         */
        const Int32 FLAG_SCO = 0x1 << 2;
        /**
         * @hide
         * Flag defining a behavior where the system ensures that the playback of the sound will
         * be compatible with its use as a broadcast for surrounding people and/or devices.
         * Ensures audibility with no or minimal post-processing applied.
         */
        // @SystemApi
        const Int32 FLAG_BEACON = 0x1 << 3;

        /**
         * Flag requesting the use of an output stream supporting hardware A/V synchronization.
         */
        const Int32 FLAG_HW_AV_SYNC = 0x1 << 4;

        /**
         * @hide
         * Flag requesting capture from the source used for hardware hotword detection.
         * To be used with capture preset MediaRecorder.AudioSource.HOTWORD or
         * MediaRecorder.AudioSource.VOICE_RECOGNITION.
         */
        // @SystemApi
        const Int32 FLAG_HW_HOTWORD = 0x1 << 5;

        /**
         * @hide
         * Used to indicate that when parcelling, the tags should be parcelled through the flattened
         * formatted string, not through the array of strings.
         * Keep in sync with frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp
         * see definition of kAudioAttributesMarshallTagFlattenTags
         */
        const Int32 FLATTEN_TAGS = 0x1;

        /**
         * Return the content type.
         * @return one of the values that can be set in {@link Builder#setContentType(int)}
         */
        GetContentType(
            [out] Int32* result);

        /**
         * Return the usage.
         * @return one of the values that can be set in {@link Builder#setUsage(int)}
         */
        GetUsage(
            [out] Int32* result);

        /**
         * @hide
         * CANDIDATE FOR PUBLIC API
         * Return the capture preset.
         * @return one of the values that can be set in {@link Builder#setCapturePreset(int)} or a
         *    negative value if none has been set.
         */
        GetCapturePreset(
            [out] Int32* result);

        /**
         * Return the flags.
         * @return a combined mask of all flags
         */
        GetFlags(
            [out] Int32* result);

        /**
         * @hide
         * Return all the flags, even the non-public ones.
         * Internal use only
         * @return a combined mask of all flags
         */
        GetAllFlags(
            [out] Int32* result);

        /**
         * @hide
         * Return the set of tags.
         * @return a read-only set of all tags stored as strings.
         */
        GetTags(
            [out] ISet** result);

        /** @hide */
        UsageToString(
            [out] String* result);
    }

    interface IAudioAttributesHelper {

        /** @hide */
        UsageToString(
            [in] Int32 usage,
            [out] String* result);

        /** @hide */
        UsageForLegacyStreamType(
            [in] Int32 streamType,
            [out] Int32* result);

        /** @hide */
        ToLegacyStreamType(
            [in] IAudioAttributes* aa,
            [out] Int32* result);

    }

    interface IAudioAttributesBuilder {

        /**
         * Combines all of the attributes that have been set and return a new
         * {@link AudioAttributes} object.
         * @return a new {@link AudioAttributes} object
         */
        // @SuppressWarnings("unchecked") // for cloning of mTags
        Build(
            [out] IAudioAttributes** result);

        /**
         * Sets the attribute describing what is the intended use of the the audio signal,
         * such as alarm or ringtone.
         * @param usage one of {@link AudioAttributes#USAGE_UNKNOWN},
         *     {@link AudioAttributes#USAGE_MEDIA},
         *     {@link AudioAttributes#USAGE_VOICE_COMMUNICATION},
         *     {@link AudioAttributes#USAGE_VOICE_COMMUNICATION_SIGNALLING},
         *     {@link AudioAttributes#USAGE_ALARM}, {@link AudioAttributes#USAGE_NOTIFICATION},
         *     {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE},
         *     {@link AudioAttributes#USAGE_NOTIFICATION_COMMUNICATION_REQUEST},
         *     {@link AudioAttributes#USAGE_NOTIFICATION_COMMUNICATION_INSTANT},
         *     {@link AudioAttributes#USAGE_NOTIFICATION_COMMUNICATION_DELAYED},
         *     {@link AudioAttributes#USAGE_NOTIFICATION_EVENT},
         *     {@link AudioAttributes#USAGE_ASSISTANCE_ACCESSIBILITY},
         *     {@link AudioAttributes#USAGE_ASSISTANCE_NAVIGATION_GUIDANCE},
         *     {@link AudioAttributes#USAGE_ASSISTANCE_SONIFICATION},
         *     {@link AudioAttributes#USAGE_GAME}.
         * @return the same Builder instance.
         */
        SetUsage(
            [in] Int32 usage);

        /**
         * Sets the attribute describing the content type of the audio signal, such as speech,
         * or music.
         * @param contentType the content type values, one of
         *     {@link AudioAttributes#CONTENT_TYPE_MOVIE},
         *     {@link AudioAttributes#CONTENT_TYPE_MUSIC},
         *     {@link AudioAttributes#CONTENT_TYPE_SONIFICATION},
         *     {@link AudioAttributes#CONTENT_TYPE_SPEECH},
         *     {@link AudioAttributes#CONTENT_TYPE_UNKNOWN}.
         * @return the same Builder instance.
         */
        SetContentType(
            [in] Int32 contentType);

        /**
         * Sets the combination of flags.
         * @param flags the {@link AudioAttributes#FLAG_AUDIBILITY_ENFORCED} flag.
         * @return the same Builder instance.
         */
        SetFlags(
            [in] Int32 flags);

        /**
         * @hide
         * Add a custom tag stored as a string
         * @param tag
         * @return the same Builder instance.
         */
        AddTag(
            [in] String tag);

        /**
         * Sets attributes as inferred from the legacy stream types.
         * Use this method when building an {@link AudioAttributes} instance to initialize some of
         * the attributes by information derived from a legacy stream type.
         * @param streamType one of {@link AudioManager#STREAM_VOICE_CALL},
         *   {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING},
         *   {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM},
         *    or {@link AudioManager#STREAM_NOTIFICATION}.
         * @return the same Builder instance.
         */
        SetLegacyStreamType(
            [in] Int32 streamType);

        /**
         * @hide
         * For internal framework use only, enables building from hidden stream types.
         * @param streamType
         * @return the same Builder instance.
         */
        SetInternalLegacyStreamType(
            [in] Int32 streamType);

        /**
         * @hide
         * Sets the capture preset.
         * Use this audio attributes configuration method when building an {@link AudioRecord}
         * instance with {@link AudioRecord#AudioRecord(AudioAttributes, AudioFormat, int)}.
         * @param preset one of {@link MediaRecorder.AudioSource#DEFAULT},
         *     {@link MediaRecorder.AudioSource#MIC}, {@link MediaRecorder.AudioSource#CAMCORDER},
         *     {@link MediaRecorder.AudioSource#VOICE_RECOGNITION} or
         *     {@link MediaRecorder.AudioSource#VOICE_COMMUNICATION}.
         * @return the same Builder instance.
         */
        SetCapturePreset(
            [in] Int32 preset);

        /**
         * @hide
         * Same as {@link #setCapturePreset(int)} but authorizes the use of HOTWORD and
         * REMOTE_SUBMIX.
         * @param preset
         * @return the same Builder instance.
         */
        SetInternalCapturePreset(
            [in] Int32 preset);
    }

    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
