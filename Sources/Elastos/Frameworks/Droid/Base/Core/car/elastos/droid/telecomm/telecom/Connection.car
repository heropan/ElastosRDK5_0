
module
{
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Telecomm.Telecom.IConnectionVideoProvider;
    interface Elastos.Droid.Telecomm.Telecom.IConnectionService;
    interface Elastos.Droid.Telecomm.Internal.IIVideoProvider;
    interface Elastos.Droid.View.ISurface;
    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Telecomm {
    namespace Telecom {

        interface IConnectionListener {
            OnStateChanged(
                [in] IConnection* c,
                [in] Int32 state);

            OnAddressChanged(
                [in] IConnection* c,
                [in] IUri* newAddress,
                [in] Int32 presentation);

            OnCallerDisplayNameChanged(
                [in] IConnection* c,
                [in] String callerDisplayName,
                [in] Int32 presentation);

            OnVideoStateChanged(
                [in] IConnection* c,
                [in] Int32 videoState);

            OnDisconnected(
                [in] IConnection* c,
                [in] IDisconnectCause* disconnectCause);

            OnPostDialWait(
                [in] IConnection* c,
                [in] String remaining);

            OnRingbackRequested(
                [in] IConnection* c,
                [in] Boolean ringback);

            OnDestroyed(
                [in] IConnection* c);

            OnCallCapabilitiesChanged(
                [in] IConnection* c,
                [in] Int32 callCapabilities);

            OnVideoProviderChanged(
                [in] IConnection* c,
                [in] IConnectionVideoProvider* videoProvider);

            OnAudioModeIsVoipChanged(
                [in] IConnection* c,
                [in] Boolean isVoip);

            OnStatusHintsChanged(
                [in] IConnection* c,
                [in] IStatusHints* statusHints);

            OnConferenceableConnectionsChanged(
                [in] IConnection* c,
                [in] IList* conferenceableConnections);

            OnConferenceChanged(
                [in] IConnection* c,
                [in] IConference* conference);
        }

        interface IConnectionVideoProvider {
            /**
             * Video is not being received (no protocol pause was issued).
             */
            const Int32 SESSION_EVENT_RX_PAUSE = 1;

            /**
             * Video reception has resumed after a SESSION_EVENT_RX_PAUSE.
             */
            const Int32 SESSION_EVENT_RX_RESUME = 2;

            /**
             * Video transmission has begun. This occurs after a negotiated start of video transmission
             * when the underlying protocol has actually begun transmitting video to the remote party.
             */
            const Int32 SESSION_EVENT_TX_START = 3;

            /**
             * Video transmission has stopped. This occurs after a negotiated stop of video transmission
             * when the underlying protocol has actually stopped transmitting video to the remote party.
             */
            const Int32 SESSION_EVENT_TX_STOP = 4;

            /**
             * A camera failure has occurred for the selected camera.  The In-Call UI can use this as a
             * cue to inform the user the camera is not available.
             */
            const Int32 SESSION_EVENT_CAMERA_FAILURE = 5;

            /**
             * Issued after {@code SESSION_EVENT_CAMERA_FAILURE} when the camera is once again ready for
             * operation.  The In-Call UI can use this as a cue to inform the user that the camera has
             * become available again.
             */
            const Int32 SESSION_EVENT_CAMERA_READY = 6;

            /**
             * Session modify request was successful.
             */
            const Int32 SESSION_MODIFY_REQUEST_SUCCESS = 1;

            /**
             * Session modify request failed.
             */
            const Int32 SESSION_MODIFY_REQUEST_FAIL = 2;

            /**
             * Session modify request ignored due to invalid parameters.
             */
            const Int32 SESSION_MODIFY_REQUEST_INVALID = 3;

            GetInterface(
                [out] IIVideoProvider** res);

            OnSetCamera(
                [in] String cameraId);

            OnSetPreviewSurface(
                [in] ISurface* surface);

            OnSetDisplaySurface(
                [in] ISurface* surface);

            OnSetDeviceOrientation(
                [in] Int32 rotation);

            OnSetZoom(
                [in] Float value);

            OnSendSessionModifyRequest(
                [in] IVideoProfile* requestProfile);

            OnSendSessionModifyResponse(
                [in] IVideoProfile* responseProfile);

            OnRequestCameraCapabilities();

            OnRequestCallDataUsage();

            OnSetPauseImage(
                [in] String uri);

            ReceiveSessionModifyRequest(
                [in] IVideoProfile* videoProfile);

            ReceiveSessionModifyResponse(
                [in] Int32 status,
                [in] IVideoProfile* requestedProfile,
                [in] IVideoProfile* responseProfile);

            HandleCallSessionEvent(
                [in] Int32 event);

            ChangePeerDimensions(
                [in] Int32 width,
                [in] Int32 height);

            ChangeCallDataUsage(
                [in] Int32 dataUsage);

            ChangeCameraCapabilities(
                [in] ICameraCapabilities* cameraCapabilities);
        }

        /**
         * Represents a connection to a remote endpoint that carries voice traffic.
         * <p>
         * Implementations create a custom subclass of {@code Connection} and return it to the framework
         * as the return value of
         * {@link ConnectionService#onCreateIncomingConnection(PhoneAccountHandle, ConnectionRequest)}
         * or
         * {@link ConnectionService#onCreateOutgoingConnection(PhoneAccountHandle, ConnectionRequest)}.
         * Implementations are then responsible for updating the state of the {@code Connection}, and
         * must call {@link #destroy()} to signal to the framework that the {@code Connection} is no
         * longer used and associated resources may be recovered.
         * @hide
         */
        interface IConnection {

            const Int32 STATE_INITIALIZING = 0;

            const Int32 STATE_NEW = 1;

            const Int32 STATE_RINGING = 2;

            const Int32 STATE_DIALING = 3;

            const Int32 STATE_ACTIVE = 4;

            const Int32 STATE_HOLDING = 5;

            const Int32 STATE_DISCONNECTED = 6;

            GetAddress(
                [out] IUri** res);

            GetAddressPresentation(
                [out] Int32* res);

            GetCallerDisplayName(
                [out] String* res);

            GetCallerDisplayNamePresentation(
                [out] Int32* res);

            GetState(
                [out] Int32* res);

            GetVideoState(
                [out] Int32* res);

            GetAudioState(
                [out] IAudioState** res);

            GetConference(
                [out] IConference** res);

            IsRingbackRequested(
                [out] Boolean* res);

            GetAudioModeIsVoip(
                [out] Boolean* res);

            GetStatusHints(
                [out] IStatusHints** res);

            AddConnectionListener(
                [in] IConnectionListener* l,
                [out] IConnection** res);

            RemoveConnectionListener(
                [in] IConnectionListener* l,
                [out] IConnection** res);

            GetDisconnectCause(
                [out] IDisconnectCause** res);

            GetCallCapabilities(
                [out] Int32* res);

            SetAddress(
                [in] IUri* address,
                [in] Int32 presentation);

            SetCallerDisplayName(
                [in] String callerDisplayName,
                [in] Int32 presentation);

            SetVideoState(
                [in] Int32 videoState);

            SetActive();

            SetRinging();

            SetInitializing();

            SetInitialized();

            SetDialing();

            SetOnHold();

            SetVideoProvider(
                [in] IConnectionVideoProvider* videoProvider);

            SetDisconnected(
                [in] IDisconnectCause* disconnectCause);

            SetPostDialWait(
                [in] String remaining);

            SetRingbackRequested(
                [in] Boolean ringback);

            SetCallCapabilities(
                [in] Int32 callCapabilities);

            Destroy();

            SetAudioModeIsVoip(
                [in] Boolean isVoip);

            SetStatusHints(
                [in] IStatusHints* statusHints);

            SetConferenceableConnections(
                [in] IList* conferenceableConnections);

            GetConferenceableConnections(
                [out] IList** res);

            SetConnectionService(
                [in] IConnectionService* connectionService);

            UnsetConnectionService(
                [in] IConnectionService* connectionService);

            GetConnectionService(
                [out] IConnectionService** res);

            SetConference(
                [in] IConference* conference,
                [out] Boolean* res);

            ResetConference();

            OnAudioStateChanged(
                [in] IAudioState* state);

            OnStateChanged(
                [in] Int32 state);

            OnPlayDtmfTone(
                [in] Char32 c);

            OnStopDtmfTone();

            OnDisconnect();

            OnSeparate();

            OnAbort();

            OnHold();

            OnUnhold();

            OnAnswer(
                [in] Int32 videoState);

            OnAnswer();

            OnReject();

            OnPostDialContinue(
                [in] Boolean proceed);

            OnConferenceWith(
                [in] IConnection* otherConnection);
        }

        interface IConnectionHelper {
            CreateFailedConnection(
                [in] IDisconnectCause* disconnectCause,
                [out] IConnection** res);

            CreateCanceledConnection(
                [out] IConnection** res);
        }

    } // namespace Telecom
    } // namespace Telecomm
    } // namespace Droid
    } // namespace Elastos
}
