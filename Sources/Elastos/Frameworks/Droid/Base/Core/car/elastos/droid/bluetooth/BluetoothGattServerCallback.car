module
{

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {

        /**
         * This abstract class is used to implement {@link BluetoothGattServer} callbacks.
         */
        [deprecated]
        interface IBluetoothGattServerCallback {
            /**
             * Callback indicating when a remote device has been connected or disconnected.
             *
             * @param device Remote device that has been connected or disconnected.
             * @param status Status of the connect or disconnect operation.
             * @param newState Returns the new connection state. Can be one of
             *                  {@link BluetoothProfile#STATE_DISCONNECTED} or
             *                  {@link BluetoothProfile#STATE_CONNECTED}
             */
            OnConnectionStateChange(
                [in] IBluetoothDevice* device,
                [in] Int32 status,
                [in] Int32 newState);

            /**
             * Indicates whether a local service has been added successfully.
             *
             * @param status Returns {@link BluetoothGatt#GATT_SUCCESS} if the service
             *               was added successfully.
             * @param service The service that has been added
             */
            OnServiceAdded(
                [in] Int32 status,
                [in] IBluetoothGattService* service);

            /**
             * A remote client has requested to read a local characteristic.
             *
             * <p>An application must call {@link BluetoothGattServer#sendResponse}
             * to complete the request.
             *
             * @param device The remote device that has requested the read operation
             * @param requestId The Id of the request
             * @param offset Offset into the value of the characteristic
             * @param characteristic Characteristic to be read
             */
            OnCharacteristicReadRequest(
                [in] IBluetoothDevice* device,
                [in] Int32 requestId,
                [in] Int32 offset,
                [in] IBluetoothGattCharacteristic* characteristic);

            /**
             * A remote client has requested to write to a local characteristic.
             *
             * <p>An application must call {@link BluetoothGattServer#sendResponse}
             * to complete the request.
             *
             * @param device The remote device that has requested the write operation
             * @param requestId The Id of the request
             * @param characteristic Characteristic to be written to.
             * @param preparedWrite true, if this write operation should be queued for
             *                      later execution.
             * @param responseNeeded true, if the remote device requires a response
             * @param offset The offset given for the value
             * @param value The value the client wants to assign to the characteristic
             */
            OnCharacteristicWriteRequest(
                [in] IBluetoothDevice* device,
                [in] Int32 requestId,
                [in] IBluetoothGattCharacteristic* characteristic,
                [in] Boolean preparedWrite,
                [in] Boolean responseNeeded,
                [in] Int32 offset,
                [in] ArrayOf<Byte>* value);

            /**
             * A remote client has requested to read a local descriptor.
             *
             * <p>An application must call {@link BluetoothGattServer#sendResponse}
             * to complete the request.
             *
             * @param device The remote device that has requested the read operation
             * @param requestId The Id of the request
             * @param offset Offset into the value of the characteristic
             * @param descriptor Descriptor to be read
             */
            OnDescriptorReadRequest(
                [in] IBluetoothDevice* device,
                [in] Int32 requestId,
                [in] Int32 offset,
                [in] IBluetoothGattDescriptor* descriptor);

            /**
             * A remote client has requested to write to a local descriptor.
             *
             * <p>An application must call {@link BluetoothGattServer#sendResponse}
             * to complete the request.
             *
             * @param device The remote device that has requested the write operation
             * @param requestId The Id of the request
             * @param descriptor Descriptor to be written to.
             * @param preparedWrite true, if this write operation should be queued for
             *                      later execution.
             * @param responseNeeded true, if the remote device requires a response
             * @param offset The offset given for the value
             * @param value The value the client wants to assign to the descriptor
             */
            OnDescriptorWriteRequest(
                [in] IBluetoothDevice* device,
                [in] Int32 requestId,
                [in] IBluetoothGattDescriptor* descriptor,
                [in] Boolean preparedWrite,
                [in] Boolean responseNeeded,
                [in] Int32 offset,
                [in] ArrayOf<Byte>* value);

            /**
             * Execute all pending write operations for this device.
             *
             * <p>An application must call {@link BluetoothGattServer#sendResponse}
             * to complete the request.
             *
             * @param device The remote device that has requested the write operations
             * @param requestId The Id of the request
             * @param execute Whether the pending writes should be executed (true) or
             *                cancelled (false)
             */
            OnExecuteWrite(
                [in] IBluetoothDevice* device,
                [in] Int32 requestId,
                [in] Boolean execute);

            /**
             * Callback invoked when a notification or indication has been sent to
             * a remote device.
             *
             * <p>When multiple notifications are to be sent, an application must
             * wait for this callback to be received before sending additional
             * notifications.
             *
             * @param device The remote device the notification has been sent to
             * @param status {@link BluetoothGatt#GATT_SUCCESS} if the operation was successful
             */
            OnNotificationSent(
                [in] IBluetoothDevice* device,
                [in] Int32 status);
        }

    } // Bluetooth
    } // Droid
    } // Elastos
}
