
module
{
    interface Elastos.Droid.Net.ICredentials;
    interface Elastos.Droid.Net.ILocalSocketAddress;

    using interface Elastos.IO.IFileDescriptor;
    using interface Elastos.IO.IInputStream;
    using interface Elastos.IO.IOutputStream;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    /**
     * Creates a (non-server) socket in the UNIX-domain namespace. The interface
     * here is not entirely unlike that of java.net.Socket
     */
    /**
     * @Involve
     * interface Elastos.IO.ICloseable
     */
    [deprecated]
    interface ILocalSocket {

        /** Datagram socket type */
        const Int32 SOCKET_DGRAM = 1;

        /** Stream socket type */
        const Int32 SOCKET_STREAM = 2;

        /** Sequential packet socket type */
        const Int32 SOCKET_SEQPACKET = 3;

        /**
         * Connects this socket to an endpoint. May only be called on an instance
         * that has not yet been connected.
         *
         * @param endpoint endpoint address
         * @throws IOException if socket is in invalid state or the address does
         * not exist.
         */
        Connect(
            [in] ILocalSocketAddress* endpoint);

        /**
         * Binds this socket to an endpoint name. May only be called on an instance
         * that has not yet been bound.
         *
         * @param bindpoint endpoint address
         * @throws IOException
         */
        Bind(
            [in] ILocalSocketAddress* bindpoint);

        /**
         * Retrieves the name that this socket is bound to, if any.
         *
         * @return Local address or null if anonymous
         */
        GetLocalSocketAddress(
            [out] ILocalSocketAddress** result);

        /**
         * Retrieves the input stream for this instance.
         *
         * @return input stream
         * @throws IOException if socket has been closed or cannot be created.
         */
        GetInputStream(
            [out] IInputStream** result);

        /**
         * Retrieves the output stream for this instance.
         *
         * @return output stream
         * @throws IOException if socket has been closed or cannot be created.
         */
        GetOutputStream(
            [out] IOutputStream** result);

        /**
         * Shuts down the input side of the socket.
         *
         * @throws IOException
         */
        ShutdownInput();

        /**
         * Shuts down the output side of the socket.
         *
         * @throws IOException
         */
        ShutdownOutput();

        SetReceiveBufferSize(
            [in] Int32 size);

        GetReceiveBufferSize(
            [out] Int32* size);

        SetSoTimeout(
            [in] Int32 n);

        GetSoTimeout(
            [out] Int32* n);

        SetSendBufferSize(
            [in] Int32 n);

        GetSendBufferSize(
            [out] Int32* n);

        //???SEC
        GetRemoteSocketAddress(
            [out] ILocalSocketAddress** result);

        //???SEC
        IsConnected(
            [out] Boolean* result);

        //???SEC
        IsClosed(
            [out] Boolean* result);

        //???SEC
        IsBound(
            [out] Boolean* result);

        //???SEC
        IsOutputShutdown(
            [out] Boolean* result);

        //???SEC
        IsInputShutdown(
            [out] Boolean* result);

        //???SEC
        Connect(
            [in] ILocalSocketAddress* endpoint,
            [in] Int32 timeout);

        /**
         * Enqueues a set of file descriptors to send to the peer. The queue
         * is one deep. The file descriptors will be sent with the next write
         * of normal data, and will be delivered in a single ancillary message.
         * See "man 7 unix" SCM_RIGHTS on a desktop Linux machine.
         *
         * @param fds non-null; file descriptors to send.
         */
        SetFileDescriptorsForSend(
            [in] ArrayOf<IFileDescriptor*>* fds);

        /**
         * Retrieves a set of file descriptors that a peer has sent through
         * an ancillary message. This method retrieves the most recent set sent,
         * and then returns null until a new set arrives.
         * File descriptors may only be passed along with regular data, so this
         * method can only return a non-null after a read operation.
         *
         * @return null or file descriptor array
         * @throws IOException
         */
        GetAncillaryFileDescriptors(
            [out, callee] ArrayOf<IFileDescriptor*>* result);

        /**
         * Retrieves the credentials of this socket's peer. Only valid on
         * connected sockets.
         *
         * @return non-null; peer credentials
         * @throws IOException
         */
        GetPeerCredentials(
            [out] ICredentials** result);

        /**
         * Returns file descriptor or null if not yet open/already closed
         *
         * @return fd or null
         */
        GetFileDescriptor(
            [out] IFileDescriptor** result);

    }

    } // namespace Net
    } // namepsace Droid
    } // namespace Elastos
}
