
module
{
    using interface Elastos.IO.IFile;

    interface Elastos.Droid.Content.Res.IAssetManager;

    namespace Elastos {
    namespace Droid {
    namespace Graphics {

    /**
     * The Typeface class specifies the typeface and intrinsic style of a font.
     * This is used in the paint, along with optionally Paint settings like
     * textSize, textSkewX, textScaleX to specify
     * how text appears when drawn (and measured).
     */
    interface ITypeface {
        const Int32 NORMAL = 0;
        const Int32 BOLD = 1;
        const Int32 ITALIC = 2;
        const Int32 BOLD_ITALIC = 3;

        /** Returns the typeface's intrinsic style attributes */
        GetStyle(
            [out] Int32* style);

        /** Returns true if getStyle() has the BOLD bit set. */
        IsBold(
            [out] Boolean* isBold);

        /** Returns true if getStyle() has the ITALIC bit set. */
        IsItalic(
            [out] Boolean* isItalic);
    }

    [deprecated]
    interface ITypefaceHelper {
        /**
         * Create a typeface object given a family name, and option style information.
         * If null is passed for the name, then the "default" font will be chosen.
         * The resulting typeface object can be queried (getStyle()) to discover what
         * its "real" style characteristics are.
         *
         * @param familyName May be null. The name of the font family.
         * @param style  The style (normal, bold, italic) of the typeface.
         *               e.g. NORMAL, BOLD, ITALIC, BOLD_ITALIC
         * @return The best matching typeface.
         */
        Create(
            [in] String familyName,
            [in] Int32 style,
            [out] ITypeface** typeface);

        /**
         * Create a typeface object that best matches the specified existing
         * typeface and the specified Style. Use this call if you want to pick a new
         * style from the same family of an existing typeface object. If family is
         * null, this selects from the default font's family.
         *
         * @param family May be null. The name of the existing type face.
         * @param style  The style (normal, bold, italic) of the typeface.
         *               e.g. NORMAL, BOLD, ITALIC, BOLD_ITALIC
         * @return The best matching typeface.
         */
        Create(
            [in] ITypeface* family,
            [in] Int32 style,
            [out] ITypeface** typeface);

        /**
         * Create a new typeface from the specified font data.
         * @param mgr The application's asset manager
         * @param path  The file name of the font data in the assets directory
         * @return The new typeface.
         */
        CreateFromAsset(
            [in] IAssetManager* mgr,
            [in] String path,
            [out] ITypeface** typeface);

        /**
         * Create a new typeface from the specified font file.
         *
         * @param path The path to the font data.
         * @return The new typeface.
         */
        CreateFromFile(
            [in] IFile* path,
            [out] ITypeface** typeface);

        /**
         * Create a new typeface from the specified font file.
         *
         * @param path The full path to the font data.
         * @return The new typeface.
         */
        CreateFromFile(
            [in] String path,
            [out] ITypeface** typeface);

        /**
         * Returns one of the default typeface objects, based on the specified style
         *
         * @return the default typeface that corresponds to the style
         */
        DefaultFromStyle(
            [in] Int32 style,
            [out] ITypeface** typeface);

        /**
         * Create a new typeface from an array of font families.
         *
         * @param families array of font families
         * @hide
         */
        CreateFromFamilies(
            [in] ArrayOf<IFontFamily*>* families,
            [out] ITypeface** typeface);

        /**
         * Create a new typeface from an array of font families, including
         * also the font families in the fallback list.
         *
         * @param families array of font families
         * @hide
         */
        CreateFromFamiliesWithDefault(
            [in] ArrayOf<IFontFamily*>* families,
            [out] ITypeface** typeface);
    }

    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
