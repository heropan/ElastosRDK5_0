
module
{
    using interface Elastos.Utility.IList;
    using interface Elastos.Security.IKeyPair;
    using interface Elastos.Security.ICertificate;

    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Keystore.Security.IKeyStore;

    namespace Elastos {
    namespace Droid {
    namespace Keystore {
    namespace Security {

    /**
     * A provider focused on providing JCA interfaces for the Elastos KeyStore.
     *
     * @hide
     */
     [deprecated]
    interface ICredentials {

        const String INSTALL_ACTION = "android.credentials.INSTALL";

        const String INSTALL_AS_USER_ACTION = "android.credentials.INSTALL_AS_USER";

        const String UNLOCK_ACTION = "com.android.credentials.UNLOCK";

    /** Key prefix for CA certificates. */
        const String CA_CERTIFICATE = "CACERT_";

    /** Key prefix for user certificates. */
        const String USER_CERTIFICATE = "USRCERT_";

    /** Key prefix for user private keys. */
        const String USER_PRIVATE_KEY = "USRPKEY_";

    /** Key prefix for VPN. */
        const String VPN = "VPN_";

    /** Key prefix for WIFI. */
        const String WIFI = "WIFI_";

    /** Key containing suffix of lockdown VPN profile. */
        const String LOCKDOWN_VPN = "LOCKDOWN_VPN";

    /** Data type for public keys. */
        const String EXTRA_PUBLIC_KEY = "KEY";

    /** Data type for private keys. */
        const String EXTRA_PRIVATE_KEY = "PKEY";

    // historically used by Android
        const String EXTENSION_CRT = ".crt";
        const String EXTENSION_P12 = ".p12";
    // commonly used on Windows
        const String EXTENSION_CER = ".cer";
        const String EXTENSION_PFX = ".pfx";

    /**
     * Intent extra: install the certificate bundle as this UID instead of
     * system.
     */
        const String EXTRA_INSTALL_AS_UID = "install_as_uid";

    /**
     * Intent extra: name for the user's private key.
     */
        const String EXTRA_USER_PRIVATE_KEY_NAME = "user_private_key_name";

    /**
     * Intent extra: data for the user's private key in PEM-encoded PKCS#8.
     */
        const String EXTRA_USER_PRIVATE_KEY_DATA = "user_private_key_data";

    /**
     * Intent extra: name for the user's certificate.
     */
        const String EXTRA_USER_CERTIFICATE_NAME = "user_certificate_name";

    /**
     * Intent extra: data for the user's certificate in PEM-encoded X.509.
     */
        const String EXTRA_USER_CERTIFICATE_DATA = "user_certificate_data";

    /**
     * Intent extra: name for CA certificate chain
     */
        const String EXTRA_CA_CERTIFICATES_NAME = "ca_certificates_name";

    /**
     * Intent extra: data for CA certificate chain in PEM-encoded X.509.
     */
        const String EXTRA_CA_CERTIFICATES_DATA = "ca_certificates_data";

        Unlock(
            [in] IContext* context);

        Install(
            [in] IContext* context);

        Install(
            [in] IContext* context,
            [in] IKeyPair* pair);

        Install(
            [in] IContext* context,
            [in] String type,
            [in] ArrayOf<Byte>* value);
    }

    [deprecated]
    interface ICredentialsHelper {
    /**
     * Convert objects to a PEM format which is used for
     * CA_CERTIFICATE and USER_CERTIFICATE entries.
     */
        ConvertToPem(
            [in] ArrayOf<ICertificate*>* objects);

    /**
     * Convert objects from PEM format, which is used for
     * CA_CERTIFICATE and USER_CERTIFICATE entries.
     */
        ConvertFromPem(
            [in] ArrayOf<Byte>* bytes,
            [out] IList** ret);

        GetInstance(
            [out] ICredentials** instance);

    /**
     * Delete all types (private key, certificate, CA certificate) for a
     * particular {@code alias}. All three can exist for any given alias.
     * Returns {@code true} if there was at least one of those types.
     */
        DeleteAllTypesForAlias(
            [in] IKeyStore* keystore,
            [in] String alias,
            [out] Boolean* ret);

    /**
     * Delete all types (private key, certificate, CA certificate) for a
     * particular {@code alias}. All three can exist for any given alias.
     * Returns {@code true} if there was at least one of those types.
     */
        DeleteCertificateTypesForAlias(
            [in] IKeyStore* keystore,
            [in] String alias,
            [out] Boolean* ret);
    }

    }// namespace Security
    }// namespace Keystore
    }// namespace Droid
    }// namespace Elastos

}

