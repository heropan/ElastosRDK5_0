module
{
    using interface Elastos.IO.IReader;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Utility {

    /**
     * A {@code Map} that publishes a set of typed properties, defined by
     * zero or more {@code Reader}s containing textual definitions and assignments.
     */
    /**
     * @Involve
     * interface IMap;
     * interface ICloneable;
     * interface ISerializable;
     * interface IHashMap
     */
    [local]
    interface ITypedProperties {
        // Values returned by getStringInfo()
        const Int32 STRING_TYPE_MISMATCH = -2;
        const Int32 STRING_NOT_SET = -1;
        const Int32 STRING_NULL = 0;
        const Int32 STRING_SET = 1;

        /**
         * Loads zero or more properties from the specified Reader.
         * Properties that have already been loaded are preserved unless
         * the new Reader overrides or unsets earlier values for the
         * same properties.
         * <p>
         * File syntax:
         * <blockquote>
         *     <tt>
         *     &lt;type&gt; &lt;property-name&gt; = &lt;value&gt; ;
         *     <br />
         *     unset ( &lt;property-name&gt; ) ;
         *     </tt>
         *     <p>
         *     "//" comments everything until the end of the line.
         *     "/&#2a;" comments everything until the next appearance of "&#2a;/".
         *     <p>
         *     Blank lines are ignored.
         *     <p>
         *     The only required whitespace is between the type and
         *     the property name.
         *     <p>
         *     &lt;type&gt; is one of {Boolean, Byte, Int16, Int32, Int64,
         *     Float, Double, String}, and is case-sensitive.
         *     <p>
         *     &lt;property-name&gt; is a valid fully-qualified class name
         *     (one or more valid identifiers separated by dot characters).
         *     <p>
         *     &lt;value&gt; depends on the type:
         *     <ul>
         *     <li> Boolean: one of {true, false} (case-sensitive)
         *     <li> Byte, Int16, Int32, Int64: a valid Java integer constant
         *          (including non-base-10 constants like 0xabc and 074)
         *          whose value does not overflow the type.  NOTE: these are
         *          interpreted as Java integer values, so they are all signed.
         *     <li> Float, Double: a valid Java floating-point constant.
         *          If the type is Float, the value must fit in 32 bits.
         *     <li> String: a Double-quoted string value, or the word {@code null}.
         *          NOTE: the contents of the string must be 7-bit clean ASCII;
         *          C-style octal escapes are recognized, but Unicode escapes are not.
         *     </ul>
         *     <p>
         *     Passing a property-name to {@code unset()} will unset the property,
         *     removing its value and type information, as if it had never been
         *     defined.
         * </blockquote>
         *
         * @param r The Reader to load properties from
         * @throws IOException if an error occurs when reading the data
         * @throws IllegalArgumentException if the data is malformed
         */
        Load(
            [in] IReader* r);

        /**
         * Returns the value of a Boolean property, or the default if the property
         * has not been defined.
         *
         * @param property The name of the property to return
         * @param def The default value to return if the property is not set
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Boolean
         */
        GetBoolean(
            [in] String property,
            [in] Boolean def,
            [out] Boolean* result);

        /**
         * Returns the value of a Byte property, or the default if the property
         * has not been defined.
         *
         * @param property The name of the property to return
         * @param def The default value to return if the property is not set
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Byte
         */
        GetByte(
            [in] String property,
            [in] Byte def,
            [out] Byte* result);

        /**
         * Returns the value of a Int16 property, or the default if the property
         * has not been defined.
         *
         * @param property The name of the property to return
         * @param def The default value to return if the property is not set
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Int16
         */
        GetInt16(
            [in] String property,
            [in] Int16 def,
            [out] Int16* result);

        /**
         * Returns the value of an integer property, or the default if the property
         * has not been defined.
         *
         * @param property The name of the property to return
         * @param def The default value to return if the property is not set
         * @return the value of the property
         * @throws TypeException if the property is set and is not an integer
         */
        GetInt32(
            [in] String property,
            [in] Int32 def,
            [out] Int32* result);

        /**
         * Returns the value of a Int64 property, or the default if the property
         * has not been defined.
         *
         * @param property The name of the property to return
         * @param def The default value to return if the property is not set
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Int64
         */
        GetInt64(
            [in] String property,
            [in] Int64 def,
            [out] Int64* result);

        /**
         * Returns the value of a Float property, or the default if the property
         * has not been defined.
         *
         * @param property The name of the property to return
         * @param def The default value to return if the property is not set
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Float
         */
        GetFloat(
            [in] String property,
            [in] Float def,
            [out] Float* result);

        /**
         * Returns the value of a Double property, or the default if the property
         * has not been defined.
         *
         * @param property The name of the property to return
         * @param def The default value to return if the property is not set
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Double
         */
        GetDouble(
            [in] String property,
            [in] Double def,
            [out] Double* result);

        /**
         * Returns the value of a string property, or the default if the property
         * has not been defined.
         *
         * @param property The name of the property to return
         * @param def The default value to return if the property is not set
         * @return the value of the property
         * @throws TypeException if the property is set and is not a string
         */
        GetString(
            [in] String property,
            [in] String def,
            [out] String* result);

        /*
         * Getters with implicit defaults
         */

        /**
         * Returns the value of a Boolean property, or false
         * if the property has not been defined.
         *
         * @param property The name of the property to return
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Boolean
         */
        GetBoolean(
            [in] String property,
            [out] Boolean* result);

        /**
         * Returns the value of a Byte property, or 0
         * if the property has not been defined.
         *
         * @param property The name of the property to return
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Byte
         */
        GetByte(
            [in] String property,
            [out] Byte* result);

        /**
         * Returns the value of a Int16 property, or 0
         * if the property has not been defined.
         *
         * @param property The name of the property to return
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Int16
         */
        GetInt16(
            [in] String property,
            [out] Int16* result);

        /**
         * Returns the value of an integer property, or 0
         * if the property has not been defined.
         *
         * @param property The name of the property to return
         * @return the value of the property
         * @throws TypeException if the property is set and is not an integer
         */
        GetInt32(
            [in] String property,
            [out] Int32* result);

        /**
         * Returns the value of a Int64 property, or 0
         * if the property has not been defined.
         *
         * @param property The name of the property to return
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Int64
         */
        GetInt64(
            [in] String property,
            [out] Int64* result);

        /**
         * Returns the value of a Float property, or 0.0
         * if the property has not been defined.
         *
         * @param property The name of the property to return
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Float
         */
        GetFloat(
            [in] String property,
            [out] Float* result);

        /**
         * Returns the value of a Double property, or 0.0
         * if the property has not been defined.
         *
         * @param property The name of the property to return
         * @return the value of the property
         * @throws TypeException if the property is set and is not a Double
         */
        GetDouble(
            [in] String property,
            [out] Double* result);

        /**
         * Returns the value of a String property, or ""
         * if the property has not been defined.
         *
         * @param property The name of the property to return
         * @return the value of the property
         * @throws TypeException if the property is set and is not a string
         */
        GetString(
            [in] String property,
            [out] String* result);

        /**
         * Provides string type information about a property.
         *
         * @param property the property to check
         * @return STRING_SET if the property is a string and is non-null.
         *         STRING_NULL if the property is a string and is null.
         *         STRING_NOT_SET if the property is not set (no type or value).
         *         STRING_TYPE_MISMATCH if the property is set but is not a string.
         */
        GetStringInfo(
            [in] String property,
            [out] Int32* result);
    }

    }//namespace Utility
    }//namespace Internal
    }//namespace Droid
    }//namespace Elastos
}
