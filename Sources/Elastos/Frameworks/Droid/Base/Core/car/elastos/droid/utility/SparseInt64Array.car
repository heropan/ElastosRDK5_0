
module
{
    namespace Elastos {
    namespace Droid {
    namespace Utility {
    /**
     * SparseInt64Arrays map integers to booleans.
     * Unlike a normal array of booleans
     * there can be gaps in the indices.  It is intended to be more memory efficient
     * than using a HashMap to map Integers to Int64s, both because it avoids
     * auto-boxing keys and values and its data structure doesn't rely on an extra entry object
     * for each mapping.
     *
     * <p>Note that this container keeps its mappings in an array data structure,
     * using a binary search to find keys.  The implementation is not intended to be appropriate for
     * data structures
     * that may contain large numbers of items.  It is generally slower than a traditional
     * HashMap, since lookups require a binary search and adds and removes require inserting
     * and deleting entries in the array.  For containers holding up to hundreds of items,
     * the performance difference is not significant, less than 50%.</p>
     *
     * <p>It is possible to iterate over the items in this container using
     * {@link #keyAt(int)} and {@link #valueAt(int)}. Iterating over the keys using
     * <code>keyAt(int)</code> with ascending values of the index will return the
     * keys in ascending order, or the values corresponding to the keys in ascending
     * order in the case of <code>valueAt(int)</code>.</p>
     */
    /**
     * @Involve
     * interface ICloneable;
     */
    [deprecated]
    interface ISparseInt64Array {
        /**
         * Gets the boolean mapped from the specified key, or <code>false</code>
         * if no such mapping has been made.
         */
        Get(
            [in] Int32 key,
            [out] Int64* value);

        /**
         * Gets the boolean mapped from the specified key, or the specified value
         * if no such mapping has been made.
         */
        Get(
            [in] Int32 key,
            [in] Int64 valueIfKeyNotFound,
            [out] Int64* value);

        /**
         * Removes the mapping from the specified key, if there was any.
         */
        Delete(
            [in] Int32 key);

        /** @hide */
        RemoveAt(
            [in] Int32 index);

        /**
         * Adds a mapping from the specified key to the specified value,
         * replacing the previous mapping from the specified key if there
         * was one.
         */
        Put(
            [in] Int32 key,
            [in] Int64 value);

        /**
         * Returns the number of key-value mappings that this SparseInt64Array
         * currently stores.
         */
        GetSize(
            [out] Int32* value);

        /**
         * Given an index in the range <code>0...size()-1</code>, returns
         * the key from the <code>index</code>th key-value mapping that this
         * SparseInt64Array stores.
         *
         * <p>The keys corresponding to indices in ascending order are guaranteed to
         * be in ascending order, e.g., <code>keyAt(0)</code> will return the
         * smallest key and <code>keyAt(size()-1)</code> will return the largest
         * key.</p>
         */
        KeyAt(
            [in] Int32 index,
            [out] Int32* value);

        /**
         * Given an index in the range <code>0...size()-1</code>, returns
         * the value from the <code>index</code>th key-value mapping that this
         * SparseInt64Array stores.
         *
         * <p>The values corresponding to indices in ascending order are guaranteed
         * to be associated with keys in ascending order, e.g.,
         * <code>valueAt(0)</code> will return the value associated with the
         * smallest key and <code>valueAt(size()-1)</code> will return the value
         * associated with the largest key.</p>
         */
        ValueAt(
            [in] Int32 index,
            [out] Int64* value);

        /** @hide */
        SetValueAt(
            [in] Int32 index,
            [in] Int64 value);

        /**
         * Returns the index for which {@link #keyAt} would return the
         * specified key, or a negative number if the specified
         * key is not mapped.
         */
        IndexOfKey(
            [in] Int32 key,
            [out] Int32* value);

        /**
         * Returns an index for which {@link #valueAt} would return the
         * specified key, or a negative number if no keys map to the
         * specified value.
         * Beware that this is a linear search, unlike lookups by key,
         * and that multiple keys can map to the same value and this will
         * find only one of them.
         */
        IndexOfValue(
            [in] Int64 value,
            [out] Int32* outval);

        /**
         * Removes all key-value mappings from this SparseInt64Array.
         */
        Clear();

        /**
         * Puts a key/value pair into the array, optimizing for the case where
         * the key is greater than all existing keys in the array.
         */
        Append(
            [in] Int32 key,
            [in] Int64 value);

        /**
         * {@inheritDoc}
         *
         * <p>This implementation composes a string by iterating over its mappings.
         */
        // @Override
        ToString(
            [out] String* str);
    }

    } // namespace Utility
    } // namepsace Droid
    } // namespace Elastos
}
