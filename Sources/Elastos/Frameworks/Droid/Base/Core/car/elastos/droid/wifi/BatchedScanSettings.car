
module
{
    using interface Elastos.Utility.ICollection;

    namespace Elastos {
    namespace Droid {
    namespace Wifi {

    /**
     * Describes the settings for batched wifi scans where the firmware performs many
     * scans and stores the timestamped results without waking the main processor each time.
     * This can give information over time with minimal battery impact.
     * @hide pending review
     */
    /**
     * @Involved
     * interface IParcelable;
     */
    interface IBatchedScanSettings {
        /** Used to indicate no preference for an int value */
        const Int32 UNSPECIFIED = 0x7FFFFFFF;

        // TODO - make MIN/mAX as standard for wifi batch capability requirement.
        const Int32 MIN_SCANS_PER_BATCH = 2;
        const Int32 MAX_SCANS_PER_BATCH = 20;
        const Int32 DEFAULT_SCANS_PER_BATCH = MAX_SCANS_PER_BATCH;

        const Int32 MIN_AP_PER_SCAN = 2;
        const Int32 MAX_AP_PER_SCAN = 16;
        const Int32 DEFAULT_AP_PER_SCAN = 16;

        const Int32 MIN_INTERVAL_SEC = 10;
        const Int32 MAX_INTERVAL_SEC = 500;
        const Int32 DEFAULT_INTERVAL_SEC = 30;

        const Int32 MIN_AP_FOR_DISTANCE = 0;
        const Int32 MAX_AP_FOR_DISTANCE = MAX_AP_PER_SCAN;
        const Int32 DEFAULT_AP_FOR_DISTANCE = 0;

        const Int32 MAX_WIFI_CHANNEL = 196;

        /** The expected number of scans per batch.  Note that the firmware may drop scans
         *  leading to fewer scans during the normal batch scan duration.  This value need not
         *  be specified (may be set to {@link UNSPECIFIED}) by the application and we will try
         *  to scan as many times as the firmware can support.  If another app requests fewer
         *  scans per batch we will attempt to honor that.
         */
        GetMaxScansPerBatch(
            [out] Int32* result);

        SetMaxScansPerBatch(
            [in] Int32 maxScansPerBatch);

        /** The maximum desired AP listed per scan.  Fewer AP may be returned if that's all
         *  that the driver detected.  If another application requests more AP per scan that
         *  will take precedence.  The if more channels are detected than we request, the APs
         *  with the lowest signal strength will be dropped.
         */
        GetMaxApPerScan(
            [out] Int32* result);

        SetMaxApPerScan(
            [in] Int32 maxApPerScan);

        /** The channels used in the scan.  If all channels should be used, {@code null} may be
         *  specified.  If another application requests more channels or all channels, that
         *  will take precedence.
         */
        GetChannelSet(
            [out] ICollection** result);

        SetChannelSet(
            [in] ICollection* channelSet);

        /** The time between the start of two sequential scans, in seconds.  If another
         *  application requests more frequent scans, that will take precedence.  If this
         * value is less than the duration of a scan, the next scan should start immediately.
         */
        GetScanIntervalSec(
            [out] Int32* result);

        SetScanIntervalSec(
            [in] Int32 scanIntervalSec);

        /** The number of the best (strongest signal) APs for which the firmware will
         *  attempt to get distance information (RTT).  Not all firmware supports this
         *  feature, so it may be ignored.  If another application requests a greater
         *  number, that will take precedence.
         */
        GetMaxApForDistance(
            [out] Int32* result);

        SetMaxApForDistance(
            [in] Int32 maxApForDistance);

        Clear();

        /** @hide */
        IsInvalid(
            [out] Boolean* result);

        /** @hide */
        Constrain();
    }

    } // namespace Wifi
    } // namespace Droid
    } // namespace Elastos
}
