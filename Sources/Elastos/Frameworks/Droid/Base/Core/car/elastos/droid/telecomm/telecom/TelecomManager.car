
module
{

    interface Elastos.Droid.Content.IComponentName;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Os.IBundle;
    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Telecomm {
    namespace Telecom {

        /**
         * Provides access to Telecom-related functionality.
         * TODO: Move this all into PhoneManager.
         */
        interface ITelecomManager {
            /**
             * Activity action: Starts the UI for handing an incoming call. This intent starts the in-
             * call
             * UI by notifying the Telecom system that an incoming call exists for a specific call
             * service
             * (see {@link android.telecom.ConnectionService}). Telecom reads the Intent extras to
             * find
             * and bind to the appropriate {@link android.telecom.ConnectionService} which Telecom
             * will
             * ultimately use to control and get information about the call.
             * <p>
             * Input: get*Extra field {@link #EXTRA_PHONE_ACCOUNT_HANDLE} contains the component name
             * of the
             * {@link android.telecom.ConnectionService} that Telecom should bind to. Telecom will
             * then
             * ask the connection service for more information about the call prior to showing any UI.
             *
             * @hide
             */
            const String ACTION_INCOMING_CALL = "android.telecom.action.INCOMING_CALL";

            /**
             * Similar to {@link #ACTION_INCOMING_CALL}, but is used only by Telephony to add a new
             * sim-initiated MO call for carrier testing.
             * @hide
             */
            const String ACTION_NEW_UNKNOWN_CALL = "android.telecom.action.NEW_UNKNOWN_CALL";

            /**
             * The {@link android.content.Intent} action used to configure a
             * {@link android.telecom.ConnectionService}.
             * @hide
             */
           const String ACTION_CONNECTION_SERVICE_CONFIGURE =
                    "android.telecom.action.CONNECTION_SERVICE_CONFIGURE";

            /**
             * The {@link android.content.Intent} action used to show the call settings page.
             */
            const String ACTION_SHOW_CALL_SETTINGS =
                    "android.telecom.action.SHOW_CALL_SETTINGS";

            /**
             * The {@link android.content.Intent} action used to show the settings page used to
             * configure
             * {@link PhoneAccount} preferences.
             * @hide
             */
            const String ACTION_CHANGE_PHONE_ACCOUNTS =
                    "android.telecom.action.CHANGE_PHONE_ACCOUNTS";

            /**
             * Optional extra for {@link android.content.Intent#ACTION_CALL} containing a boolean that
             * determines whether the speakerphone should be automatically turned on for an outgoing
             * call.
             */
            const String EXTRA_START_CALL_WITH_SPEAKERPHONE =
                    "android.telecom.extra.START_CALL_WITH_SPEAKERPHONE";

            /**
             * Optional extra for {@link android.content.Intent#ACTION_CALL} containing an integer
             * that
             * determines the desired video state for an outgoing call.
             * Valid options:
             * {@link VideoProfile.VideoState#AUDIO_ONLY},
             * {@link VideoProfile.VideoState#BIDIRECTIONAL},
             * {@link VideoProfile.VideoState#RX_ENABLED},
             * {@link VideoProfile.VideoState#TX_ENABLED}.
             * @hide
             */
            const String EXTRA_START_CALL_WITH_VIDEO_STATE =
                    "android.telecom.extra.START_CALL_WITH_VIDEO_STATE";

            /**
             * The extra used with an {@link android.content.Intent#ACTION_CALL} and
             * {@link android.content.Intent#ACTION_DIAL} {@code Intent} to specify a
             * {@link PhoneAccountHandle} to use when making the call.
             * <p class="note">
             * Retrieve with {@link android.content.Intent#getParcelableExtra(String)}.
             * @hide
             */
            const String EXTRA_PHONE_ACCOUNT_HANDLE =
                    "android.telecom.extra.PHONE_ACCOUNT_HANDLE";

            /**
             * Optional extra for {@link #ACTION_INCOMING_CALL} containing a {@link Bundle} which contains
             * metadata about the call. This {@link Bundle} will be returned to the
             * {@link ConnectionService}.
             *
             * @hide
             */
            const String EXTRA_INCOMING_CALL_EXTRAS =
                    "android.telecom.extra.INCOMING_CALL_EXTRAS";

            /**
             * Optional extra for {@link android.content.Intent#ACTION_CALL} and
             * {@link android.content.Intent#ACTION_DIAL} {@code Intent} containing a {@link Bundle}
             * which contains metadata about the call. This {@link Bundle} will be saved into
             * {@code Call.Details}.
             *
             * @hide
             */
            const String EXTRA_OUTGOING_CALL_EXTRAS =
                    "android.telecom.extra.OUTGOING_CALL_EXTRAS";

            /**
             * @hide
             */
            const String EXTRA_UNKNOWN_CALL_HANDLE =
                    "android.telecom.extra.UNKNOWN_CALL_HANDLE";

            /**
             * Optional extra for {@link android.telephony.
             * TelephonyManager#ACTION_PHONE_STATE_CHANGED}
             * containing the disconnect code.
             */
            const String EXTRA_CALL_DISCONNECT_CAUSE =
                    "android.telecom.extra.CALL_DISCONNECT_CAUSE";

            /**
             * Optional extra for {@link android.telephony.
             * TelephonyManager#ACTION_PHONE_STATE_CHANGED}
             * containing the disconnect message.
             */
            const String EXTRA_CALL_DISCONNECT_MESSAGE =
                    "android.telecom.extra.CALL_DISCONNECT_MESSAGE";

            /**
             * Optional extra for {@link android.telephony.
             * TelephonyManager#ACTION_PHONE_STATE_CHANGED}
             * containing the component name of the associated connection service.
             * @hide
             */
            const String EXTRA_CONNECTION_SERVICE =
                    "android.telecom.extra.CONNECTION_SERVICE";

            /**
             * An optional {@link android.content.Intent#ACTION_CALL} intent extra denoting the
             * package name of the app specifying an alternative gateway for the call.
             * The value is a string.
             *
             * (The following comment corresponds to the all GATEWAY_* extras)
             * An app which sends the {@link android.content.Intent#ACTION_CALL} intent can specify an
             * alternative address to dial which is different from the one specified and displayed to
             * the user. This alternative address is referred to as the gateway address.
             */
            const String GATEWAY_PROVIDER_PACKAGE =
                    "android.telecom.extra.GATEWAY_PROVIDER_PACKAGE";

            /**
             * An optional {@link android.content.Intent#ACTION_CALL} intent extra corresponding to
             * the
             * original address to dial for the call. This is used when an alternative gateway
             * address is
             * provided to recall the original address.
             * The value is a {@link android.net.Uri}.
             *
             * (See {@link #GATEWAY_PROVIDER_PACKAGE} for details)
             */
            const String GATEWAY_ORIGINAL_ADDRESS =
                    "android.telecom.extra.GATEWAY_ORIGINAL_ADDRESS";

            /**
             * The number which the party on the other side of the line will see (and use to return
             * the
             * call).
             * <p>
             * {@link ConnectionService}s which interact with {@link RemoteConnection}s should only
             * populate
             * this if the {@link android.telephony.TelephonyManager#getLine1Number()} value, as that
             * is the
             * user's expected caller ID.
             * @hide
             */
            const String EXTRA_CALL_BACK_NUMBER = "android.telecom.extra.CALL_BACK_NUMBER";

            /**
             * The dual tone multi-frequency signaling character sent to indicate the dialing system
             * should
             * pause for a predefined period.
             */
            const Char32 DTMF_CHARACTER_PAUSE = ',';

            /**
             * The dual-tone multi-frequency signaling character sent to indicate the dialing system
             * should
             * wait for user confirmation before proceeding.
             */
            const Char32 DTMF_CHARACTER_WAIT = ';';

            /**
             * TTY (teletypewriter) mode is off.
             *
             * @hide
             */
            const Int32 TTY_MODE_OFF = 0;

            /**
             * TTY (teletypewriter) mode is on. The speaker is off and the microphone is muted. The
             * user
             * will communicate with the remote party by sending and receiving text messages.
             *
             * @hide
             */
            const Int32 TTY_MODE_FULL = 1;

            /**
             * TTY (teletypewriter) mode is in hearing carryover mode (HCO). The microphone is muted
             * but the
             * speaker is on. The user will communicate with the remote party by sending text
             * messages and
             * hearing an audible reply.
             *
             * @hide
             */
            const Int32 TTY_MODE_HCO = 2;

            /**
             * TTY (teletypewriter) mode is in voice carryover mode (VCO). The speaker is off but the
             * microphone is still on. User will communicate with the remote party by speaking and
             * receiving
             * text message replies.
             *
             * @hide
             */
            const Int32 TTY_MODE_VCO = 3;

            /**
             * Broadcast intent action indicating that the current TTY mode has changed. An intent
             * extra
             * provides this state as an int.
             *
             * @see #EXTRA_CURRENT_TTY_MODE
             * @hide
             */
            const String ACTION_CURRENT_TTY_MODE_CHANGED =
                    "android.telecom.action.CURRENT_TTY_MODE_CHANGED";

            /**
             * The lookup key for an int that indicates the current TTY mode.
             * Valid modes are:
             * - {@link #TTY_MODE_OFF}
             * - {@link #TTY_MODE_FULL}
             * - {@link #TTY_MODE_HCO}
             * - {@link #TTY_MODE_VCO}
             *
             * @hide
             */
            const String EXTRA_CURRENT_TTY_MODE =
                    "android.telecom.intent.extra.CURRENT_TTY_MODE";

            /**
             * Broadcast intent action indicating that the TTY preferred operating mode has changed.
             * An
             * intent extra provides the new mode as an int.
             *
             * @see #EXTRA_TTY_PREFERRED_MODE
             * @hide
             */
            const String ACTION_TTY_PREFERRED_MODE_CHANGED =
                    "android.telecom.action.TTY_PREFERRED_MODE_CHANGED";

            /**
             * The lookup key for an int that indicates preferred TTY mode. Valid modes are: -
             * {@link #TTY_MODE_OFF} - {@link #TTY_MODE_FULL} - {@link #TTY_MODE_HCO} -
             * {@link #TTY_MODE_VCO}
             *
             * @hide
             */
            const String EXTRA_TTY_PREFERRED_MODE =
                    "android.telecom.intent.extra.TTY_PREFERRED";

            /**
             * The following 4 constants define how properties such as phone numbers and names are
             * displayed to the user.
             */

            /** Property is displayed normally. */
            const Int32 PRESENTATION_ALLOWED = 1;

            /** Property was blocked. */
            const Int32 PRESENTATION_RESTRICTED = 2;

            /** Presentation was not specified or is unknown. */
            const Int32 PRESENTATION_UNKNOWN = 3;

            /** Property should be displayed as a pay phone. */
            const Int32 PRESENTATION_PAYPHONE = 4;

            GetDefaultOutgoingPhoneAccount(
                [in] String uriScheme,
                [out] IPhoneAccountHandle** res);

            GetUserSelectedOutgoingPhoneAccount(
                [out] IPhoneAccountHandle** res);

            SetUserSelectedOutgoingPhoneAccount(
                [in] IPhoneAccountHandle* accountHandle);

            GetSimCallManager(
                [out] IPhoneAccountHandle** res);

            SetSimCallManager(
                [in] IPhoneAccountHandle* accountHandle);

            GetSimCallManagers(
                [out] IList** res);

            GetConnectionManager(
                [out] IPhoneAccountHandle** res);

            GetPhoneAccountsSupportingScheme(
                [in] String uriScheme,
                [out] IList** res);

            GetCallCapablePhoneAccounts(
                [out] IList** res);

            HasMultipleCallCapableAccounts(
                [out] Boolean* res);

            GetPhoneAccountsForPackage(
                [out] IList** res);

            GetPhoneAccount(
                [in] IPhoneAccountHandle* account,
                [out] IPhoneAccount** res);

            GetAllPhoneAccountsCount(
                [out] Int32* res);

            GetAllPhoneAccounts(
                [out] IList** res);

            GetAllPhoneAccountHandles(
                [out] IList** res);

            RegisterPhoneAccount(
                [in] IPhoneAccount* account);

            UnregisterPhoneAccount(
                [in] IPhoneAccountHandle* accountHandle);

            ClearAccounts();

            GetDefaultPhoneApp(
                [out] IComponentName** res);

            IsInCall(
                [out] Boolean* res);

            GetCallState(
                [out] Int32* res);

            IsRinging(
                [out] Boolean* res);

            EndCall(
                [out] Boolean* res);

            AcceptRingingCall();

            SilenceRinger();

            IsTtySupported(
                [out] Boolean* res);

            GetCurrentTtyMode(
                [out] Int32* res);

            AddNewIncomingCall(
                [in] IPhoneAccountHandle* phoneAccount,
                [in] IBundle* extras);

            AddNewUnknownCall(
                [in] IPhoneAccountHandle* phoneAccount,
                [in] IBundle* extras);

            HandleMmi(
                [in] String dialString,
                [out] Boolean* res);

            CancelMissedCallsNotification();

            ShowInCallScreen(
                [in] Boolean showDialpad);
        }

        interface ITelecomManagerHelper {
            From(
                [in] IContext* ctx,
                [out] ITelecomManager** res);

        }

    } // namespace Telecom
    } // namespace Telecomm
    } // namespace Droid
    } // namespace Elastos
}
