module
{

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {

        /**
         * This class provides the APIs to control the Bluetooth Pan
         * Profile.
         *
         *<p>BluetoothPan is a proxy object for controlling the Bluetooth
         * Service via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get
         * the BluetoothPan proxy object.
         *
         *<p>Each method is protected with its appropriate permission.
         *@hide
         */
        /**
         * @Involve
         * interface IBluetoothProfile
         */
        interface IBluetoothPan {
            /**
             * Intent used to broadcast the change in connection state of the Pan
             * profile.
             *
             * <p>This intent will have 4 extras:
             * <ul>
             *   <li> {@link #EXTRA_STATE} - The current state of the profile. </li>
             *   <li> {@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.</li>
             *   <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. </li>
             *   <li> {@link #EXTRA_LOCAL_ROLE} - Which local role the remote device is
             *   bound to. </li>
             * </ul>
             *
             * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of
             * {@link #STATE_DISCONNECTED}, {@link #STATE_CONNECTING},
             * {@link #STATE_CONNECTED}, {@link #STATE_DISCONNECTING}.
             *
             * <p> {@link #EXTRA_LOCAL_ROLE} can be one of {@link #LOCAL_NAP_ROLE} or
             * {@link #LOCAL_PANU_ROLE}
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to
             * receive.
             */
            //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
            const String ACTION_CONNECTION_STATE_CHANGED =
                "android.bluetooth.pan.profile.action.CONNECTION_STATE_CHANGED";

            /**
             * Extra for {@link #ACTION_CONNECTION_STATE_CHANGED} intent
             * The local role of the PAN profile that the remote device is bound to.
             * It can be one of {@link #LOCAL_NAP_ROLE} or {@link #LOCAL_PANU_ROLE}.
             */
            const String EXTRA_LOCAL_ROLE = "android.bluetooth.pan.extra.LOCAL_ROLE";

            const Int32 PAN_ROLE_NONE = 0;
            /**
             * The local device is acting as a Network Access Point.
             */
            const Int32 LOCAL_NAP_ROLE = 1;
            const Int32 REMOTE_NAP_ROLE = 1;

            /**
             * The local device is acting as a PAN User.
             */
            const Int32 LOCAL_PANU_ROLE = 2;
            const Int32 REMOTE_PANU_ROLE = 2;

            /**
             * Return codes for the connect and disconnect Bluez / Dbus calls.
             * @hide
             */
            const Int32 PAN_DISCONNECT_FAILED_NOT_CONNECTED = 1000;

            /**
             * @hide
             */
            const Int32 PAN_CONNECT_FAILED_ALREADY_CONNECTED = 1001;

            /**
             * @hide
             */
            const Int32 PAN_CONNECT_FAILED_ATTEMPT_FAILED = 1002;

            /**
             * @hide
             */
            const Int32 PAN_OPERATION_GENERIC_FAILURE = 1003;

            /**
             * @hide
             */
            const Int32 PAN_OPERATION_SUCCESS = 1004;

            /**
             * Initiate connection to a profile of the remote bluetooth device.
             *
             * <p> This API returns false in scenarios like the profile on the
             * device is already connected or Bluetooth is not turned on.
             * When this API returns true, it is guaranteed that
             * connection state intent for the profile will be broadcasted with
             * the state. Users can get the connection state of the profile
             * from this intent.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}
             * permission.
             *
             * @param device Remote Bluetooth Device
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            Connect(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Initiate disconnection from a profile
             *
             * <p> This API will return false in scenarios like the profile on the
             * Bluetooth device is not in connected state etc. When this API returns,
             * true, it is guaranteed that the connection state change
             * intent will be broadcasted with the state. Users can get the
             * disconnection state of the profile from this intent.
             *
             * <p> If the disconnection is initiated by a remote device, the state
             * will transition from {@link #STATE_CONNECTED} to
             * {@link #STATE_DISCONNECTED}. If the disconnect is initiated by the
             * host (local) device the state will transition from
             * {@link #STATE_CONNECTED} to state {@link #STATE_DISCONNECTING} to
             * state {@link #STATE_DISCONNECTED}. The transition to
             * {@link #STATE_DISCONNECTING} can be used to distinguish between the
             * two scenarios.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}
             * permission.
             *
             * @param device Remote Bluetooth Device
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            Disconnect(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            SetBluetoothTethering(
                [in] Boolean value);

            IsTetheringOn(
                [out] Boolean* result);
        }

    } // Bluetooth
    } // Droid
    } // Elastos
}
