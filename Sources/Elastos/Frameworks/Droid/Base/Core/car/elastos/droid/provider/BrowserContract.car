module
{
    interface Elastos.Droid.Accounts.IAccount;
    interface Elastos.Droid.Content.IContentProviderClient;
    interface Elastos.Droid.Content.IContentProviderOperation;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Utility.IPair;

    namespace Elastos {
    namespace Droid {
    namespace Provider {

    interface IBrowserContract {
        /** The authority for the browser provider */
        const String AUTHORITY = "com.android.browser";

        /**
         * An optional insert, update or delete URI parameter that allows the caller
         * to specify that it is a sync adapter. The default value is false. If true
         * the dirty flag is not automatically set and the "syncToNetwork" parameter
         * is set to false when calling
         * {@link ContentResolver#notifyChange(android.net.Uri, android.database.ContentObserver, boolean)}.
         * @hide
         */
        const String CALLER_IS_SYNCADAPTER = "caller_is_syncadapter";

        /**
         * A parameter for use when querying any table that allows specifying a limit on the number
         * of rows returned.
         * @hide
         */
        const String PARAM_LIMIT = "limit";

        /** A content:// style uri to the authority for the browser provider */
        GetAUTHORITY_URI(
            [out] IUri** uri);
    }

    interface IBrowserContractBaseSyncColumns {
        /** Generic column for use by sync adapters. */
        const String SYNC1 = "sync1";
        /** Generic column for use by sync adapters. */
        const String SYNC2 = "sync2";
        /** Generic column for use by sync adapters. */
        const String SYNC3 = "sync3";
        /** Generic column for use by sync adapters. */
        const String SYNC4 = "sync4";
        /** Generic column for use by sync adapters. */
        const String SYNC5 = "sync5";
    }

    interface IBrowserContractChromeSyncColumns {
        const String FOLDER_NAME_ROOT = "google_chrome";
        const String FOLDER_NAME_BOOKMARKS = "google_chrome_bookmarks";
        const String FOLDER_NAME_BOOKMARKS_BAR = "bookmark_bar";
        const String FOLDER_NAME_OTHER_BOOKMARKS = "other_bookmarks";

        /** The server unique ID for an item */
        GetSERVER_UNIQUE(
            [out] String* result);

        /** The client unique ID for an item */
        GetCLIENT_UNIQUE(
            [out] String* result);
    }

    /**
     * @Involve
     * interface IBrowserContractBaseSyncColumns
     */
    interface IBrowserContractSyncColumns {
        /**
         * The name of the account instance to which this row belongs, which when paired with
         * {@link #ACCOUNT_TYPE} identifies a specific account.
         * <P>Type: TEXT</P>
         */
        const String ACCOUNT_NAME = "account_name";

        /**
         * The type of account to which this row belongs, which when paired with
         * {@link #ACCOUNT_NAME} identifies a specific account.
         * <P>Type: TEXT</P>
         */
        const String ACCOUNT_TYPE = "account_type";

        /**
         * String that uniquely identifies this row to its source account.
         * <P>Type: TEXT</P>
         */
        const String SOURCE_ID = "sourceid";

        /**
         * Version number that is updated whenever this row or its related data
         * changes.
         * <P>Type: INTEGER</P>
         */
        const String VERSION = "version";

        /**
         * Flag indicating that {@link #VERSION} has changed, and this row needs
         * to be synchronized by its owning account.
         * <P>Type: INTEGER (boolean)</P>
         */
        const String DIRTY = "dirty";

        /**
         * The time that this row was last modified by a client (msecs since the epoch).
         * <P>Type: INTEGER</P>
         */
        const String DATE_MODIFIED = "modified";
    }

    interface IBrowserContractCommonColumns {
        /**
         * The unique ID for a row.
         * <P>Type: INTEGER (long)</P>
         */
        const String ID = "_id";

        /**
         * This column is valid when the row is a URL. The history table's URL
         * can not be updated.
         * <P>Type: TEXT (URL)</P>
         */
        const String URL = "url";

        /**
         * The user visible title.
         * <P>Type: TEXT</P>
         */
        const String TITLE = "title";

        /**
         * The time that this row was created on its originating client (msecs
         * since the epoch).
         * <P>Type: INTEGER</P>
         * @hide
         */
        const String DATE_CREATED = "created";
    }

    interface IBrowserContractImageColumns {
        /**
         * The favicon of the bookmark, may be NULL.
         * Must decode via {@link BitmapFactory#decodeByteArray}.
         * <p>Type: BLOB (image)</p>
         */
        const String FAVICON = "favicon";

        /**
         * A thumbnail of the page,may be NULL.
         * Must decode via {@link BitmapFactory#decodeByteArray}.
         * <p>Type: BLOB (image)</p>
         */
        const String THUMBNAIL = "thumbnail";

        /**
         * The touch icon for the web page, may be NULL.
         * Must decode via {@link BitmapFactory#decodeByteArray}.
         * <p>Type: BLOB (image)</p>
         */
        const String TOUCH_ICON = "touch_icon";
    }

    interface IBrowserContractHistoryColumns {
        /**
         * The date the item was last visited, in milliseconds since the epoch.
         * <p>Type: INTEGER (date in milliseconds since January 1, 1970)</p>
         */
        const String DATE_LAST_VISITED = "date";

        /**
         * The number of times the item has been visited.
         * <p>Type: INTEGER</p>
         */
        const String VISITS = "visits";

        /**
         * @hide
         */
        const String USER_ENTERED = "user_entered";
    }

    interface IBrowserContractImageMappingColumns {
        /**
         * The ID of the image in Images. One image can map onto the multiple URLs.
         * <P>Type: INTEGER (long)</P>
         */
        const String IMAGE_ID = "image_id";

        /**
         * The URL. The URL can map onto the different type of images.
         * <P>Type: TEXT (URL)</P>
         */
        const String URL = "url";
    }

    /**
     * @Involve
     * interface IBrowserContractCommonColumns
     * interface IBrowserContractImageColumns
     * interface IBrowserContractSyncColumns
     */
    interface IBrowserContractBookmarks {
        /**
         * Used in {@link Bookmarks#TYPE} column and indicats the row is a bookmark.
         */
        const Int32 BOOKMARK_TYPE_BOOKMARK = 1;

        /**
         * Used in {@link Bookmarks#TYPE} column and indicats the row is a folder.
         */
        const Int32 BOOKMARK_TYPE_FOLDER = 2;

        /**
         * Used in {@link Bookmarks#TYPE} column and indicats the row is the bookmark bar folder.
         */
        const Int32 BOOKMARK_TYPE_BOOKMARK_BAR_FOLDER = 3;

        /**
         * Used in {@link Bookmarks#TYPE} column and indicats the row is other folder and
         */
        const Int32 BOOKMARK_TYPE_OTHER_FOLDER = 4;

        /**
         * Used in {@link Bookmarks#TYPE} column and indicats the row is other folder, .
         */
        const Int32 BOOKMARK_TYPE_MOBILE_FOLDER = 5;

        /**
         * The type of the item.
         * <P>Type: INTEGER</P>
         * <p>Allowed values are:</p>
         * <p>
         * <ul>
         * <li>{@link #BOOKMARK_TYPE_BOOKMARK}</li>
         * <li>{@link #BOOKMARK_TYPE_FOLDER}</li>
         * <li>{@link #BOOKMARK_TYPE_BOOKMARK_BAR_FOLDER}</li>
         * <li>{@link #BOOKMARK_TYPE_OTHER_FOLDER}</li>
         * <li>{@link #BOOKMARK_TYPE_MOBILE_FOLDER}</li>
         * </ul>
         * </p>
         * <p> The TYPE_BOOKMARK_BAR_FOLDER, TYPE_OTHER_FOLDER and TYPE_MOBILE_FOLDER
         * can not be updated or deleted.</p>
         */
        const String TYPE = "type";

        /**
         * Query parameter used to specify an account name
         * @hide
         */
        const String PARAM_ACCOUNT_NAME = "acct_name";

        /**
         * Query parameter used to specify an account type
         * @hide
         */
        const String PARAM_ACCOUNT_TYPE = "acct_type";

                /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of bookmarks.
         */
        const String CONTENT_TYPE = "vnd.android.cursor.dir/bookmark";

        /**
         * The MIME type of a {@link #CONTENT_URI} of a single bookmark.
         */
        const String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/bookmark";

        /**
         * Query parameter to use if you want to see deleted bookmarks that are still
         * around on the device and haven't been synced yet.
         * @see #IS_DELETED
         * @hide
         */
        const String QUERY_PARAMETER_SHOW_DELETED = "show_deleted";

        /**
         * Flag indicating if an item is a folder or bookmark. Non-zero values indicate
         * a folder and zero indicates a bookmark.
         * <P>Type: INTEGER (boolean)</P>
         * @hide
         */
        const String IS_FOLDER = "folder";

        /**
         * The ID of the parent folder. ID 0 is the root folder.
         * <P>Type: INTEGER (reference to item in the same table)</P>
         */
        const String PARENT = "parent";

        /**
         * The source ID for an item's parent. Read-only.
         * @see #PARENT
         * @hide
         */
        const String PARENT_SOURCE_ID = "parent_source";

        /**
         * The position of the bookmark in relation to it's siblings that share the same
         * {@link #PARENT}. May be negative.
         * <P>Type: INTEGER</P>
         * @hide
         */
        const String POSITION = "position";

        /**
         * The item that the bookmark should be inserted after.
         * May be negative.
         * <P>Type: INTEGER</P>
         * @hide
         */
        const String INSERT_AFTER = "insert_after";

        /**
         * The source ID for the item that the bookmark should be inserted after. Read-only.
         * May be negative.
         * <P>Type: INTEGER</P>
         * @see #INSERT_AFTER
         * @hide
         */
        const String INSERT_AFTER_SOURCE_ID = "insert_after_source";

        /**
         * A flag to indicate if an item has been deleted. Queries will not return deleted
         * entries unless you add the {@link #QUERY_PARAMETER_SHOW_DELETED} query paramter
         * to the URI when performing your query.
         * <p>Type: INTEGER (non-zero if the item has been deleted, zero if it hasn't)
         * @see #QUERY_PARAMETER_SHOW_DELETED
         * @hide
         */
        const String IS_DELETED = "deleted";

        /**
         * The content:// style URI for this table
         */
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * The content:// style URI for the default folder
         * @hide
         */
        GetCONTENT_URI_DEFAULT_FOLDER(
            [out] IUri** uri);

        /**
         * Builds a URI that points to a specific folder.
         * @param folderId the ID of the folder to point to
         * @hide
         */
        BuildFolderUri(
            [in] Int64 folderId,
            [out] IUri** uri);
    }

    interface IBrowserContractAccounts {

        /**
         * The name of the account instance to which this row belongs, which when paired with
         * {@link #ACCOUNT_TYPE} identifies a specific account.
         * <P>Type: TEXT</P>
         */
        const String ACCOUNT_NAME = "account_name";

        /**
         * The type of account to which this row belongs, which when paired with
         * {@link #ACCOUNT_NAME} identifies a specific account.
         * <P>Type: TEXT</P>
         */
        const String ACCOUNT_TYPE = "account_type";

        /**
         * The ID of the account's root folder. This will be the ID of the folder
         * returned when querying {@link Bookmarks#CONTENT_URI_DEFAULT_FOLDER}.
         * <P>Type: INTEGER</P>
         */
        const String ROOT_ID = "root_id";

        /**
         * Directory under {@link Bookmarks#CONTENT_URI}
         */
        GetCONTENT_URI(
            [out] IUri** uri);
    }

    /**
     * @Involve
     * interface IBrowserContractCommonColumns
     * interface IBrowserContractHistoryColumns
     * interface IBrowserContractImageColumns
     */
    interface IBrowserContractHistory {
        /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of browser history items.
         */
        const String CONTENT_TYPE = "vnd.android.cursor.dir/browser-history";

        /**
         * The MIME type of a {@link #CONTENT_URI} of a single browser history item.
         */
        const String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/browser-history";

        /**
         * The content:// style URI for this table
         */
        GetCONTENT_URI(
            [out] IUri** uri);
    }

    interface IBrowserContractSearches {

        /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of browser search items.
         */
        const String CONTENT_TYPE = "vnd.android.cursor.dir/searches";

        /**
         * The MIME type of a {@link #CONTENT_URI} of a single browser search item.
         */
        const String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/searches";

        /**
         * The unique ID for a row.
         * <P>Type: INTEGER (long)</P>
         */
        const String ID = "_id";

        /**
         * The user entered search term.
         */
        const String SEARCH = "search";

        /**
         * The date the search was performed, in milliseconds since the epoch.
         * <p>Type: NUMBER (date in milliseconds since January 1, 1970)</p>
         */
        const String DATE = "date";

        /**
         * The content:// style URI for this table
         */
        GetCONTENT_URI(
            [out] IUri** uri);
    }

    /**
     * @Involve
     * interface ISyncStateContractColumns
     */
    [deprecated]
    interface IBrowserContractSyncState{

        GetCONTENT_DIRECTORY(
            [out] String* result);

        /**
         * The content:// style URI for this table
         */
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * @see android.provider.SyncStateContract.Helpers#get
         */
        Get(
            [in] IContentProviderClient* provider,
            [in] IAccount* account,
            [out, callee] ArrayOf<Byte>* value);

        /**
         * @see android.provider.SyncStateContract.Helpers#get
         */
        GetWithUri(
            [in] IContentProviderClient* provider,
            [in] IAccount* account,
            [out] IPair** value);

        /**
         * @see android.provider.SyncStateContract.Helpers#set
         */
        Set(
            [in] IContentProviderClient* provider,
            [in] IAccount* account,
            [in] ArrayOf<Byte>* data);

        /**
         * @see android.provider.SyncStateContract.Helpers#newSetOperation
         */
        NewSetOperation(
            [in] IAccount* account,
            [in] ArrayOf<Byte>* data,
            [out] IContentProviderOperation** operation);
    }

    /**
     * @Involve
     * interface IBrowserContractImageColumns
     */
    interface IBrowserContractImages {

        /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of images.
         */
        const String CONTENT_TYPE = "vnd.android.cursor.dir/images";

        /**
         * The MIME type of a {@link #CONTENT_URI} of a single image.
         */
        const String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/images";

        /**
         * Used in {@link Images#TYPE} column and indicats the row is a favicon.
         */
        const Int32 IMAGE_TYPE_FAVICON = 1;

        /**
         * Used in {@link Images#TYPE} column and indicats the row is a precomposed touch icon.
         */
        const Int32 IMAGE_TYPE_PRECOMPOSED_TOUCH_ICON = 2;

        /**
         * Used in {@link Images#TYPE} column and indicats the row is a touch icon.
         */
        const Int32 IMAGE_TYPE_TOUCH_ICON = 4;

        /**
         * The type of item in the table.
         * <P>Type: INTEGER</P>
         * <p>Allowed values are:</p>
         * <p>
         * <ul>
         * <li>{@link #IMAGE_TYPE_FAVICON}</li>
         * <li>{@link #IMAGE_TYPE_PRECOMPOSED_TOUCH_ICON}</li>
         * <li>{@link #IMAGE_TYPE_TOUCH_ICON}</li>
         * </ul>
         * </p>
         */
        const String TYPE = "type";

        /**
         * The image data.
         * <p>Type: BLOB (image)</p>
         */
        const String DATA = "data";

        /**
         * The URL the images came from.
         * <P>Type: TEXT (URL)</P>
         * @hide
         */
        const String URL = "url_key";

        GetCONTENT_URI(
            [out] IUri** uri);
    }

    /**
     * @Involve
     * interface IBrowserContractImageMappingColumns
     */
    interface IBrowserContractImageMappings {

        /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of image mappings.
         */
        const String CONTENT_TYPE = "vnd.android.cursor.dir/image_mappings";

        /**
         * The MIME type of a {@link #CONTENT_URI} of a single image mapping.
         */
        const String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/image_mappings";

        /**
         * The content:// style URI for this table
         */
        GetCONTENT_URI(
            [out] IUri** uri);
    }

    /**
     * @Involve
     * interface IBrowserContractCommonColumns
     * interface IBrowserContractHistoryColumns
     * interface IBrowserContractImageColumns
     */
    interface IBrowserContractCombined {
        /**
         * Flag indicating that an item is a bookmark. A value of 1 indicates a bookmark, a value
         * of 0 indicates a history item.
         * <p>Type: INTEGER (boolean)</p>
         */
        const String IS_BOOKMARK = "bookmark";

        /**
         * The content:// style URI for this table
         */
        GetCONTENT_URI(
            [out] IUri** uri);
    }

    interface IBrowserContractSettings {

        /**
         * Key for a setting value.
         */
        const String KEY = "key";

        /**
         * Value for a setting.
         */
        const String VALUE = "value";

        /**
         * If set to non-0 the user has opted into bookmark sync.
         */
        const String KEY_SYNC_ENABLED = "sync_enabled";

        /**
         * The content:// style URI for this table
         */
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * Returns true if bookmark sync is enabled
         */
        IsSyncEnabled(
            [in] IContext* ctx,
            [out] Boolean* res);

        /**
         * Sets the bookmark sync enabled setting.
         */
        SetSyncEnabled(
            [in] IContext* ctx,
            [in] Boolean enabled);
    }

    } // namespace Provider
    } // namespace Droid
    } // namespace Elastos

}
