
module
{
    using interface Elastos.Core.ICharSequence;

    interface Elastos.Droid.Content.Pm.IPackageManager;
    interface Elastos.Droid.Content.Res.IXmlResourceParser;
    interface Elastos.Droid.Graphics.Drawable.IDrawable;
    interface Elastos.Droid.Os.IBundle;

    namespace Elastos {
    namespace Droid {
    namespace Content {
    namespace Pm {


    /**
     * Base class containing information common to all package items held by the
     * package manager. This provides a very common basic set of attributes: a
     * label, icon, and meta-data. This class is not intended to be used by itself;
     * it is simply here to share common definitions between all items returned by
     * the package manager. As such, it does not itself implement Parcelable, but
     * does provide convenience methods to assist in the implementation of
     * Parcelable in subclasses.
     */
    interface IPackageItemInfo {
        /**
         * Retrieve the current textual label associated with this item.  This
         * will call back on the given PackageManager to load the label from
         * the application.
         *
         * @param pm A PackageManager from which the label can be loaded; usually
         * the PackageManager from which you originally retrieved this item.
         *
         * @return Returns a CharSequence containing the item's label.  If the
         * item does not have a label, its name is returned.
         */
        LoadLabel(
            [in] IPackageManager* pm,
            [out] ICharSequence** label);

        /**
         * Retrieve the current graphical icon associated with this item.  This
         * will call back on the given PackageManager to load the icon from
         * the application.
         *
         * @param pm A PackageManager from which the icon can be loaded; usually
         * the PackageManager from which you originally retrieved this item.
         *
         * @return Returns a Drawable containing the item's icon.  If the
         * item does not have an icon, the item's default icon is returned
         * such as the default activity icon.
         */
        LoadIcon(
            [in] IPackageManager* pm,
            [out] IDrawable** icon);

        /**
         * Retrieve the current graphical banner associated with this item.  This
         * will call back on the given PackageManager to load the banner from
         * the application.
         *
         * @param pm A PackageManager from which the banner can be loaded; usually
         * the PackageManager from which you originally retrieved this item.
         *
         * @return Returns a Drawable containing the item's banner.  If the item
         * does not have a banner, this method will return null.
         */
        LoadBanner(
            [in] IPackageManager* pm,
            [out] IDrawable** banner);

        /**
         * Retrieve the current graphical logo associated with this item. This
         * will call back on the given PackageManager to load the logo from
         * the application.
         *
         * @param pm A PackageManager from which the logo can be loaded; usually
         * the PackageManager from which you originally retrieved this item.
         *
         * @return Returns a Drawable containing the item's logo. If the item
         * does not have a logo, this method will return null.
         */
        LoadLogo(
            [in] IPackageManager* pm,
            [out] IDrawable** icon);

        /**
         * Load an XML resource attached to the meta-data of this item.  This will
         * retrieved the name meta-data entry, and if defined call back on the
         * given PackageManager to load its XML file from the application.
         *
         * @param pm A PackageManager from which the XML can be loaded; usually
         * the PackageManager from which you originally retrieved this item.
         * @param name Name of the meta-date you would like to load.
         *
         * @return Returns an XmlPullParser you can use to parse the XML file
         * assigned as the given meta-data.  If the meta-data name is not defined
         * or the XML resource could not be found, null is returned.
         */
        LoadXmlMetaData(
            [in] IPackageManager* pm,
            [in] String name,
            [out] IXmlResourceParser** resource);

        GetName(
            [out] String* name);

        SetName(
            [in] String name);

        GetPackageName(
            [out] String* name);

        SetPackageName(
            [in] String name);

        GetLabelRes(
            [out] Int32* labelRes);

        SetLabelRes(
            [in] Int32 labelRes);

        GetNonLocalizedLabel(
            [out] ICharSequence** label);

        SetNonLocalizedLabel(
            [in] ICharSequence* label);

        GetIcon(
            [out] Int32* icon);

        SetIcon(
            [in] Int32 icon);

        GetBanner(
            [out] Int32* banner);

        SetBanner(
            [in] Int32 banner);

        GetLogo(
            [out] Int32* logo);

        SetLogo(
            [in] Int32 logo);

        GetMetaData(
            [out] IBundle** metaData);

        SetMetaData(
            [in] IBundle* metaData);
    }

    } // namespace Pm
    } // namespace Content
    } // namespace Droid
    } // namespace Elastos
}