
module
{
    namespace Elastos {
    namespace Droid {
    namespace Widget {

    interface IRatingBar;

    /**
     * A callback that notifies clients when the rating has been changed. This
     * includes changes that were initiated by the user through a touch gesture
     * or arrow key/trackball as well as changes that were initiated
     * programmatically.
     */
    interface IOnRatingBarChangeListener {

        /**
         * Notification that the rating has changed. Clients can use the
         * fromUser parameter to distinguish user-initiated changes from those
         * that occurred programmatically. This will not be called continuously
         * while the user is dragging, only when the user finalizes a rating by
         * lifting the touch.
         *
         * @param ratingBar The RatingBar whose rating has changed.
         * @param rating The current rating. This will be in the range
         *            0..numStars.
         * @param fromUser True if the rating change was initiated by a user's
         *            touch gesture or arrow key/horizontal trackbell movement.
         */
        OnRatingChanged(
            [in] IRatingBar* ratingBar,
            [in] Float rating,
            [in] Boolean fromUser);
    }

    /**
     * @Involve
     * extends Elastos.Droid.Widget.IAbsSeekBar
     * extends Elastos.Droid.Widget.IProgressBar
     * extends Elastos.Droid.View.IView
     *
     * interface Elastos.Droid.View.IKeyEventCallback
     * interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource
     * interface Elastos.Droid.Graphics.Drawable.IDrawableCallback
     */
    interface IRatingBar {
        /**
         * Sets the listener to be called when the rating changes.
         *
         * @param listener The listener.
         */
        SetOnRatingBarChangeListener(
            [in] IOnRatingBarChangeListener* listener);

        /**
         * @return The listener (may be null) that is listening for rating change
         *         events.
         */
        GetOnRatingBarChangeListener(
            [out] IOnRatingBarChangeListener** listener);

        /**
         * Whether this rating bar should only be an indicator (thus non-changeable
         * by the user).
         *
         * @param isIndicator Whether it should be an indicator.
         *
         * @attr ref android.R.styleable#RatingBar_isIndicator
         */
        SetIsIndicator(
            [in] Boolean isIndicator);

        /**
         * @return Whether this rating bar is only an indicator.
         *
         * @attr ref android.R.styleable#RatingBar_isIndicator
         */
        IsIndicator(
            [out] Boolean* isIndicator);

        /**
         * Sets the number of stars to show. In order for these to be shown
         * properly, it is recommended the layout width of this widget be wrap
         * content.
         *
         * @param numStars The number of stars.
         */
        SetNumStars(
            [in] Int32 numStars);

        /**
         * Returns the number of stars shown.
         * @return The number of stars shown.
         */
        GetNumStars(
            [out] Int32* numStars);

        /**
         * Sets the rating (the number of stars filled).
         *
         * @param rating The rating to set.
         */
        SetRating(
            [in] Float rating);

        /**
         * Gets the current rating (number of stars filled).
         *
         * @return The current rating.
         */
        GetRating(
            [out] Float* rating);

        /**
         * Sets the step size (granularity) of this rating bar.
         *
         * @param stepSize The step size of this rating bar. For example, if
         *            half-star granularity is wanted, this would be 0.5.
         */
        SetStepSize(
            [in] Float stepSize);

        /**
         * Gets the step size of this rating bar.
         *
         * @return The step size.
         */
        GetStepSize(
            [out] Float* stepSize);
    }

    } // namespace Widget
    } // namespace Droid
    } // namespace Elastos
}
