
module
{
    interface Elastos.Droid.App.IActivity;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.IUserHandle;

    namespace Elastos {
    namespace Droid {
    namespace Accounts {

    [local, deprecated]
    interface IAccountManager {
        const Int32 ERROR_CODE_REMOTE_EXCEPTION = 1;
        const Int32 ERROR_CODE_NETWORK_ERROR = 3;
        const Int32 ERROR_CODE_CANCELED = 4;
        const Int32 ERROR_CODE_INVALID_RESPONSE = 5;
        const Int32 ERROR_CODE_UNSUPPORTED_OPERATION = 6;
        const Int32 ERROR_CODE_BAD_ARGUMENTS = 7;
        const Int32 ERROR_CODE_BAD_REQUEST = 8;
        const Int32 ERROR_CODE_BAD_AUTHENTICATION = 9;

        /** @hide */
        const Int32 ERROR_CODE_USER_RESTRICTED = 100;
        /** @hide */
        const Int32 ERROR_CODE_MANAGEMENT_DISABLED_FOR_ACCOUNT_TYPE = 101;

        /**
         * Bundle key used for the {@link String} account name in results
         * from methods which return information about a particular account.
         */
        const String KEY_ACCOUNT_NAME = "authAccount";

        /**
         * Bundle key used for the {@link String} account type in results
         * from methods which return information about a particular account.
         */
        const String KEY_ACCOUNT_TYPE = "accountType";

        /**
         * Bundle key used for the auth token value in results
         * from {@link #getAuthToken} and friends.
         */
        const String KEY_AUTHTOKEN = "authtoken";

        /**
         * Bundle key used for an {@link Intent} in results from methods that
         * may require the caller to interact with the user.  The Intent can
         * be used to start the corresponding user interface activity.
         */
        const String KEY_INTENT = "intent";

        /**
         * Bundle key used to supply the password directly in options to
         * {@link #confirmCredentials}, rather than prompting the user with
         * the standard password prompt.
         */
        const String KEY_PASSWORD = "password";
        const String KEY_ACCOUNTS = "accounts";

        const String KEY_ACCOUNT_AUTHENTICATOR_RESPONSE = "accountAuthenticatorResponse";
        const String KEY_ACCOUNT_MANAGER_RESPONSE = "accountManagerResponse";
        const String KEY_AUTHENTICATOR_TYPES = "authenticator_types";
        const String KEY_AUTH_FAILED_MESSAGE = "authFailedMessage";
        const String KEY_AUTH_TOKEN_LABEL = "authTokenLabelKey";
        const String KEY_BOOLEAN_RESULT = "booleanResult";
        const String KEY_ERROR_CODE = "errorCode";
        const String KEY_ERROR_MESSAGE = "errorMessage";
        const String KEY_USERDATA = "userdata";

        /**
         * Authenticators using 'customTokens' option will also get the UID of the
         * caller
         */
        const String KEY_CALLER_UID = "callerUid";
        const String KEY_CALLER_PID = "callerPid";

        /**
         * The Android package of the caller will be set in the options bundle by the
         * {@link AccountManager} and will be passed to the AccountManagerService and
         * to the AccountAuthenticators. The uid of the caller will be known by the
         * AccountManagerService as well as the AccountAuthenticators so they will be able to
         * verify that the package is consistent with the uid (a uid might be shared by many
         * packages).
         */
        const String KEY_ELASTOS_PACKAGE_NAME = "elastosPackageName";

        /**
         * Boolean, if set and 'customTokens' the authenticator is responsible for
         * notifications.
         * @hide
         */
        const String KEY_NOTIFY_ON_FAILURE = "notifyOnAuthFailure";

        const String ACTION_AUTHENTICATOR_INTENT = "elastos.accounts.AccountAuthenticator";
        const String AUTHENTICATOR_META_DATA_NAME = "elastos.accounts.AccountAuthenticator";
        const String AUTHENTICATOR_ATTRIBUTES_NAME = "account-authenticator";

        /**
         * Action sent as a broadcast Intent by the AccountsService
         * when accounts are added, accounts are removed, or an
         * account's credentials (saved password, etc) are changed.
         *
         * @see #addOnAccountsUpdatedListener
         */
        const String LOGIN_ACCOUNTS_CHANGED_ACTION = "elastos.accounts.LOGIN_ACCOUNTS_CHANGED";

        /**
         * Gets the saved password associated with the account.
         * This is intended for authenticators and related code; applications
         * should get an auth token instead.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS}
         * and to have the same UID as the account's authenticator.
         *
         * @param account The account to query for a password
         * @return The account's password, null if none or if the account doesn't exist
         */
        GetPassword(
            [in] IAccount* account,
            [out] String* password);

        /**
         * Gets the user data named by "key" associated with the account.
         * This is intended for authenticators and related code to store
         * arbitrary metadata along with accounts.  The meaning of the keys
         * and values is up to the authenticator for the account.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS}
         * and to have the same UID as the account's authenticator.
         *
         * @param account The account to query for user data
         * @return The user data, null if the account or key doesn't exist
         */
        GetUserData(
            [in] IAccount* account,
            [in] String key,
            [out] String* userData);

        /**
         * Lists the currently registered authenticators.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>No permission is required to call this method.
         *
         * @return An array of {@link AuthenticatorDescription} for every
         *     authenticator known to the AccountManager service.  Empty (never
         *     null) if no authenticators are known.
         */
       GetAuthenticatorTypes(
           [out, callee] ArrayOf<IAuthenticatorDescription*>* authenticators);

        /**
         * @hide
         * Lists the currently registered authenticators for a given user id.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>The caller has to be in the same user or have the permission
         * {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL}.
         *
         * @return An array of {@link AuthenticatorDescription} for every
         *     authenticator known to the AccountManager service.  Empty (never
         *     null) if no authenticators are known.
         */
       GetAuthenticatorTypesAsUser(
           [in] Int32 userId,
           [out, callee] ArrayOf<IAuthenticatorDescription*>* result);

        /**
         * Lists all accounts of any type registered on the device.
         * Equivalent to getAccountsByType(null).
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#GET_ACCOUNTS}.
         *
         * @return An array of {@link Account}, one for each account.  Empty
         *     (never null) if no accounts have been added.
         */
        GetAccounts(
            [out, callee] ArrayOf<IAccount*>* accounts);

        /**
         * @hide
         * Lists all accounts of any type registered on the device for a given
         * user id. Equivalent to getAccountsByType(null).
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#GET_ACCOUNTS}.
         *
         * @return An array of {@link Account}, one for each account.  Empty
         *     (never null) if no accounts have been added.
         */
        GetAccountsAsUser(
            [in] Int32 userId,
            [out, callee] ArrayOf<IAccount*>* accs);

        /**
         * @hide
         * For use by internal activities. Returns the list of accounts that the calling package
         * is authorized to use, particularly for shared accounts.
         * @param packageName package name of the calling app.
         * @param uid the uid of the calling app.
         * @return the accounts that are available to this package and user.
         */
        GetAccountsForPackage(
            [in] String packageName,
            [in] Int32 uid,
            [out, callee] ArrayOf<IAccount*>* accs);

        /**
         * Returns the accounts visible to the specified package, in an environment where some apps
         * are not authorized to view all accounts. This method can only be called by system apps.
         * @param type The type of accounts to return, null to retrieve all accounts
         * @param packageName The package name of the app for which the accounts are to be returned
         * @return An array of {@link Account}, one per matching account.  Empty
         *     (never null) if no accounts of the specified type have been added.
         */
        GetAccountsByTypeForPackage(
            [in] String type,
            [in] String packageName,
            [out, callee] ArrayOf<IAccount*>* accs);

        /**
         * Lists all accounts of a particular type.  The account type is a
         * string token corresponding to the authenticator and useful domain
         * of the account.  For example, there are types corresponding to Google
         * and Facebook.  The exact string token to use will be published somewhere
         * associated with the authenticator in question.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#GET_ACCOUNTS}.
         *
         * @param type The type of accounts to return, null to retrieve all accounts
         * @return An array of {@link Account}, one per matching account.  Empty
         *     (never null) if no accounts of the specified type have been added.
         */
        GetAccountsByType(
            [in] String type,
            [out, callee] ArrayOf<IAccount*>* accounts);

        /**
         * Change whether or not an app (identified by its uid) is allowed to retrieve an authToken
         * for an account.
         * <p>
         * This is only meant to be used by system activities and is not in the SDK.
         * @param account The account whose permissions are being modified
         * @param authTokenType The type of token whose permissions are being modified
         * @param uid The uid that identifies the app which is being granted or revoked permission.
         * @param value true is permission is being granted, false for revoked
         * @hide
         */
        UpdateAppPermission(
            [in] IAccount* account,
            [in] String authTokenType,
            [in] Int32 uid,
            [in] Boolean value);

        /**
         * Get the user-friendly label associated with an authenticator's auth token.
         * @param accountType the type of the authenticator. must not be null.
         * @param authTokenType the token type. must not be null.
         * @param callback callback to invoke when the result is available. may be null.
         * @param handler the handler on which to invoke the callback, or null for the main thread
         * @return a future containing the label string
         * @hide
         */
        GetAuthTokenLabel(
            [in] String accountType,
            [in] String authTokenType,
            [in] IAccountManagerCallback* cb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** future);

        /**
         * Finds out whether a particular account has all the specified features.
         * Account features are authenticator-specific string tokens identifying
         * boolean account properties.  For example, features are used to tell
         * whether Google accounts have a particular service (such as Google
         * Calendar or Google Talk) enabled.  The feature names and their meanings
         * are published somewhere associated with the authenticator in question.
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#GET_ACCOUNTS}.
         *
         * @param account The {@link Account} to test
         * @param features An array of the account features to check
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to a Boolean,
         * true if the account exists and has all of the specified features.
         */
        HasFeatures(
            [in] IAccount* account,
            [in] ArrayOf<String>* features,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accountManagerFuture);

        /**
         * Lists all accounts of a type which have certain features.  The account
         * type identifies the authenticator (see {@link #getAccountsByType}).
         * Account features are authenticator-specific string tokens identifying
         * boolean account properties (see {@link #hasFeatures}).
         *
         * <p>Unlike {@link #getAccountsByType}, this method calls the authenticator,
         * which may contact the server or do other work to check account features,
         * so the method returns an {@link AccountManagerFuture}.
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#GET_ACCOUNTS}.
         *
         * @param type The type of accounts to return, must not be null
         * @param features An array of the account features to require,
         *     may be null or empty
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to an array of
         *     {@link Account}, one per account of the specified type which
         *     matches the requested features.
         */
        GetAccountsByTypeAndFeatures(
            [in] String type,
            [in] ArrayOf<String>* features,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accountManagerFuture);

        /**
         * Adds an account directly to the AccountManager.  Normally used by sign-up
         * wizards associated with authenticators, not directly by applications.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS}
         * and to have the same UID as the added account's authenticator.
         *
         * @param account The {@link Account} to add
         * @param password The password to associate with the account, null for none
         * @param userdata String values to use for the account's userdata, null for none
         * @return True if the account was successfully added, false if the account
         *     already exists, the account is null, or another error occurs.
         */
        AddAccountExplicitly(
            [in] IAccount* account,
            [in] String password,
            [in] IBundle* userdata,
            [out] Boolean* result);

        /**
         * Rename the specified {@link Account}.  This is equivalent to removing
         * the existing account and adding a new renamed account with the old
         * account's user data.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS}
         * and have the same UID as the account's authenticator.
         *
         * @param account The {@link Account} to rename
         * @param newName String name to be associated with the account.
         * @param callback Callback to invoke when the request completes, null for
         *     no callback
         * @param handler {@link Handler} identifying the callback thread, null for
         *     the main thread
         * @return An {@link AccountManagerFuture} which resolves to the Account
         *     after the name change. If successful the account's name will be the
         *     specified new name.
         */
        RenameAccount(
            [in] IAccount* account,
            [in] String newName,
            [in] IAccountManagerCallback* cb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** result);

        /**
         * Gets the previous name associated with the account or {@code null}, if
         * none. This is intended so that clients of {@link
         * #LOGIN_ACCOUNTS_CHANGED_ACTION} broadcasts can determine if an
         * authenticator has renamed an account.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * @param account The account to query for a previous name.
         * @return The account's previous name, null if the account has never been
         *         renamed.
         */
        GetPreviousName(
            [in] IAccount* account,
            [out] String* result);

        /**
         * Removes an account from the AccountManager.  Does nothing if the account
         * does not exist.  Does not delete the account from the server.
         * The authenticator may have its own policies preventing account
         * deletion, in which case the account will not be deleted.
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
         *
         * @param account The {@link Account} to remove
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to a Boolean,
         *     true if the account has been successfully removed,
         *     false if the authenticator forbids deleting this account.
         */
        RemoveAccount(
            [in] IAccount* account,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accountManagerFuture);

        /**
         * @see #removeAccount(Account, AccountManagerCallback, Handler)
         * @hide
         */
        RemoveAccountAsUser(
            [in] IAccount* account,
            [in] IAccountManagerCallback* cb,
            [in] IHandler* handler,
            [in] IUserHandle* userHandle,
            [out] IAccountManagerFuture** result);

        /**
         * Removes an auth token from the AccountManager's cache.  Does nothing if
         * the auth token is not currently in the cache.  Applications must call this
         * method when the auth token is found to have expired or otherwise become
         * invalid for authenticating requests.  The AccountManager does not validate
         * or expire cached auth tokens otherwise.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#MANAGE_ACCOUNTS} or
         * {@link android.Manifest.permission#USE_CREDENTIALS}
         *
         * @param accountType The account type of the auth token to invalidate, must not be null
         * @param authToken The auth token to invalidate, may be null
         */
        InvalidateAuthToken(
            [in] String accountType,
            [in] String authToken);

        /**
         * Gets an auth token from the AccountManager's cache.  If no auth
         * token is cached for this account, null will be returned -- a new
         * auth token will not be generated, and the server will not be contacted.
         * Intended for use by the authenticator, not directly by applications.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS}
         * and to have the same UID as the account's authenticator.
         *
         * @param account The account to fetch an auth token for
         * @param authTokenType The type of auth token to fetch, see {#getAuthToken}
         * @return The cached auth token for this account and type, or null if
         *     no auth token is cached or the account does not exist.
         */
        PeekAuthToken(
            [in] IAccount* account,
            [in] String authTokenType,
            [out] String* token);

        /**
         * Sets or forgets a saved password.  This modifies the local copy of the
         * password used to automatically authenticate the user; it does
         * not change the user's account password on the server.  Intended for use
         * by the authenticator, not directly by applications.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS}
         * and have the same UID as the account's authenticator.
         *
         * @param account The account to set a password for
         * @param password The password to set, null to clear the password
         */
        SetPassword(
            [in] IAccount* account,
            [in] String password);

        /**
         * Forgets a saved password.  This erases the local copy of the password;
         * it does not change the user's account password on the server.
         * Has the same effect as setPassword(account, null) but requires fewer
         * permissions, and may be used by applications or management interfaces
         * to "sign out" from an account.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#MANAGE_ACCOUNTS}
         *
         * @param account The account whose password to clear
         */
        ClearPassword(
            [in] IAccount* account);

        /**
         * Sets one userdata key for an account.  Intended by use for the
         * authenticator to stash state for itself, not directly by applications.
         * The meaning of the keys and values is up to the authenticator.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS}
         * and to have the same UID as the account's authenticator.
         *
         * @param account The account to set the userdata for
         * @param key The userdata key to set.  Must not be null
         * @param value The value to set, null to clear this userdata key
         */
        SetUserData(
            [in] IAccount* account,
            [in] String key,
            [in] String value);

        /**
         * Adds an auth token to the AccountManager cache for an account.
         * If the account does not exist then this call has no effect.
         * Replaces any previous auth token for this account and auth token type.
         * Intended for use by the authenticator, not directly by applications.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#AUTHENTICATE_ACCOUNTS}
         * and to have the same UID as the account's authenticator.
         *
         * @param account The account to set an auth token for
         * @param authTokenType The type of the auth token, see {#getAuthToken}
         * @param authToken The auth token to add to the cache
         */
        SetAuthToken(
            [in] IAccount* account,
            [in] String authTokenType,
            [in] String authToken);

        /**
         * This convenience helper synchronously gets an auth token with
         * {@link #getAuthToken(Account, String, boolean, AccountManagerCallback, Handler)}.
         *
         * <p>This method may block while a network request completes, and must
         * never be made from the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#USE_CREDENTIALS}.
         *
         * @param account The account to fetch an auth token for
         * @param authTokenType The auth token type, see {#link getAuthToken}
         * @param notifyAuthFailure If true, display a notification and return null
         *     if authentication fails; if false, prompt and wait for the user to
         *     re-enter correct credentials before returning
         * @return An auth token of the specified type for this account, or null
         *     if authentication fails or none can be fetched.
         * @throws AuthenticatorException if the authenticator failed to respond
         * @throws OperationCanceledException if the request was canceled for any
         *     reason, including the user canceling a credential request
         * @throws java.io.IOException if the authenticator experienced an I/O problem
         *     creating a new auth token, usually because of network trouble
         */
        BlockingGetAuthToken(
            [in] IAccount* account,
            [in] String authTokenType,
            [in] Boolean notifyAuthFailure,
            [out] String* token);

        /**
         * Gets an auth token of the specified type for a particular account,
         * prompting the user for credentials if necessary.  This method is
         * intended for applications running in the foreground where it makes
         * sense to ask the user directly for a password.
         *
         * <p>If a previously generated auth token is cached for this account and
         * type, then it is returned.  Otherwise, if a saved password is
         * available, it is sent to the server to generate a new auth token.
         * Otherwise, the user is prompted to enter a password.
         *
         * <p>Some authenticators have auth token <em>types</em>, whose value
         * is authenticator-dependent.  Some services use different token types to
         * access different functionality -- for example, Google uses different auth
         * tokens to access Gmail and Google Calendar for the same account.
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#USE_CREDENTIALS}.
         *
         * @param account The account to fetch an auth token for
         * @param authTokenType The auth token type, an authenticator-dependent
         *     string token, must not be null
         * @param options Authenticator-specific options for the request,
         *     may be null or empty
         * @param activity The {@link Activity} context to use for launching a new
         *     authenticator-defined sub-Activity to prompt the user for a password
         *     if necessary; used only to call startActivity(); must not be null.
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to a Bundle with
         *     at least the following fields:
         * <ul>
         * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied
         * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
         * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted
         * </ul>
         *
         * (Other authenticator-specific values may be returned.)  If an auth token
         * could not be fetched, {@link AccountManagerFuture#getResult()} throws:
         * <ul>
         * <li> {@link AuthenticatorException} if the authenticator failed to respond
         * <li> {@link OperationCanceledException} if the operation is canceled for
         *      any reason, incluidng the user canceling a credential request
         * <li> {@link IOException} if the authenticator experienced an I/O problem
         *      creating a new auth token, usually because of network trouble
         * </ul>
         * If the account is no longer present on the device, the return value is
         * authenticator-dependent.  The caller should verify the validity of the
         * account before requesting an auth token.
         */
        GetAuthToken(
            [in] IAccount* account,
            [in] String authTokenType,
            [in] IBundle* options,
            [in] IActivity* activity,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accoutManagerFuture);

        /**
         * Gets an auth token of the specified type for a particular account,
         * optionally raising a notification if the user must enter credentials.
         * This method is intended for background tasks and services where the
         * user should not be immediately interrupted with a password prompt.
         *
         * <p>If a previously generated auth token is cached for this account and
         * type, then it is returned.  Otherwise, if a saved password is
         * available, it is sent to the server to generate a new auth token.
         * Otherwise, an {@link Intent} is returned which, when started, will
         * prompt the user for a password.  If the notifyAuthFailure parameter is
         * set, a status bar notification is also created with the same Intent,
         * alerting the user that they need to enter a password at some point.
         *
         * <p>In that case, you may need to wait until the user responds, which
         * could take hours or days or forever.  When the user does respond and
         * supply a new password, the account manager will broadcast the
         * {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent, which applications can
         * use to try again.
         *
         * <p>If notifyAuthFailure is not set, it is the application's
         * responsibility to launch the returned Intent at some point.
         * Either way, the result from this call will not wait for user action.
         *
         * <p>Some authenticators have auth token <em>types</em>, whose value
         * is authenticator-dependent.  Some services use different token types to
         * access different functionality -- for example, Google uses different auth
         * tokens to access Gmail and Google Calendar for the same account.
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#USE_CREDENTIALS}.
         *
         * @param account The account to fetch an auth token for
         * @param authTokenType The auth token type, an authenticator-dependent
         *     string token, must not be null
         * @param notifyAuthFailure True to add a notification to prompt the
         *     user for a password if necessary, false to leave that to the caller
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to a Bundle with
         *     at least the following fields on success:
         * <ul>
         * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied
         * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
         * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted
         * </ul>
         *
         * (Other authenticator-specific values may be returned.)  If the user
         * must enter credentials, the returned Bundle contains only
         * {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.
         *
         * If an error occurred, {@link AccountManagerFuture#getResult()} throws:
         * <ul>
         * <li> {@link AuthenticatorException} if the authenticator failed to respond
         * <li> {@link OperationCanceledException} if the operation is canceled for
         *      any reason, incluidng the user canceling a credential request
         * <li> {@link IOException} if the authenticator experienced an I/O problem
         *      creating a new auth token, usually because of network trouble
         * </ul>
         * If the account is no longer present on the device, the return value is
         * authenticator-dependent.  The caller should verify the validity of the
         * account before requesting an auth token.
         */
        GetAuthToken(
            [in] IAccount* account,
            [in] String authTokenType,
            [in] Boolean notifyAuthFailure,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accoutManagerFuture);

        /**
         * Gets an auth token of the specified type for a particular account,
         * optionally raising a notification if the user must enter credentials.
         * This method is intended for background tasks and services where the
         * user should not be immediately interrupted with a password prompt.
         *
         * <p>If a previously generated auth token is cached for this account and
         * type, then it is returned.  Otherwise, if a saved password is
         * available, it is sent to the server to generate a new auth token.
         * Otherwise, an {@link Intent} is returned which, when started, will
         * prompt the user for a password.  If the notifyAuthFailure parameter is
         * set, a status bar notification is also created with the same Intent,
         * alerting the user that they need to enter a password at some point.
         *
         * <p>In that case, you may need to wait until the user responds, which
         * could take hours or days or forever.  When the user does respond and
         * supply a new password, the account manager will broadcast the
         * {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent, which applications can
         * use to try again.
         *
         * <p>If notifyAuthFailure is not set, it is the application's
         * responsibility to launch the returned Intent at some point.
         * Either way, the result from this call will not wait for user action.
         *
         * <p>Some authenticators have auth token <em>types</em>, whose value
         * is authenticator-dependent.  Some services use different token types to
         * access different functionality -- for example, Google uses different auth
         * tokens to access Gmail and Google Calendar for the same account.
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#USE_CREDENTIALS}.
         *
         * @param account The account to fetch an auth token for
         * @param authTokenType The auth token type, an authenticator-dependent
         *     string token, must not be null
         * @param options Authenticator-specific options for the request,
         *     may be null or empty
         * @param notifyAuthFailure True to add a notification to prompt the
         *     user for a password if necessary, false to leave that to the caller
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to a Bundle with
         *     at least the following fields on success:
         * <ul>
         * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied
         * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
         * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted
         * </ul>
         *
         * (Other authenticator-specific values may be returned.)  If the user
         * must enter credentials, the returned Bundle contains only
         * {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.
         *
         * If an error occurred, {@link AccountManagerFuture#getResult()} throws:
         * <ul>
         * <li> {@link AuthenticatorException} if the authenticator failed to respond
         * <li> {@link OperationCanceledException} if the operation is canceled for
         *      any reason, incluidng the user canceling a credential request
         * <li> {@link IOException} if the authenticator experienced an I/O problem
         *      creating a new auth token, usually because of network trouble
         * </ul>
         * If the account is no longer present on the device, the return value is
         * authenticator-dependent.  The caller should verify the validity of the
         * account before requesting an auth token.
         */
        GetAuthToken(
            [in] IAccount* account,
            [in] String authTokenType,
            [in] IBundle* options,
            [in] Boolean notifyAuthFailure,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accoutManagerFuture);

        /**
         * Asks the user to add an account of a specified type.  The authenticator
         * for this account type processes this request with the appropriate user
         * interface.  If the user does elect to create a new account, the account
         * name is returned.
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
         *
         * @param accountType The type of account to add; must not be null
         * @param authTokenType The type of auth token (see {@link #getAuthToken})
         *     this account will need to be able to generate, null for none
         * @param requiredFeatures The features (see {@link #hasFeatures}) this
         *     account must have, null for none
         * @param addAccountOptions Authenticator-specific options for the request,
         *     may be null or empty
         * @param activity The {@link Activity} context to use for launching a new
         *     authenticator-defined sub-Activity to prompt the user to create an
         *     account; used only to call startActivity(); if null, the prompt
         *     will not be launched directly, but the necessary {@link Intent}
         *     will be returned to the caller instead
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to a Bundle with
         *     these fields if activity was specified and an account was created:
         * <ul>
         * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account created
         * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
         * </ul>
         *
         * If no activity was specified, the returned Bundle contains only
         * {@link #KEY_INTENT} with the {@link Intent} needed to launch the
         * actual account creation process.  If an error occurred,
         * {@link AccountManagerFuture#getResult()} throws:
         * <ul>
         * <li> {@link AuthenticatorException} if no authenticator was registered for
         *      this account type or the authenticator failed to respond
         * <li> {@link OperationCanceledException} if the operation was canceled for
         *      any reason, including the user canceling the creation process
         * <li> {@link IOException} if the authenticator experienced an I/O problem
         *      creating a new account, usually because of network trouble
         * </ul>
         */
        AddAccount(
            [in] String accountType,
            [in] String authTokenType,
            [in] ArrayOf<String>* requiredFeatures,
            [in] IBundle* addAccountOptions,
            [in] IActivity* activity,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accoutManagerFuture);

        /**
         * @see #addAccount(String, String, String[], Bundle, Activity, AccountManagerCallback, Handler)
         * @hide
         */
        AddAccountAsUser(
            [in] String accountType,
            [in] String authTokenType,
            [in] ArrayOf<String>* requiredFeatures,
            [in] IBundle* addAccountOptions,
            [in] IActivity* activity,
            [in] IAccountManagerCallback* cb,
            [in] IHandler* handler,
            [in] IUserHandle* userHandle,
            [out] IAccountManagerFuture** result);

        /**
         * Adds a shared account from the primary user to a secondary user. Adding the shared account
         * doesn't take effect immediately. When the target user starts up, any pending shared accounts
         * are attempted to be copied to the target user from the primary via calls to the
         * authenticator.
         * @param account the account to share
         * @param user the target user
         * @return
         * @hide
         */
        AddSharedAccount(
            [in] IAccount* account,
            [in] IUserHandle* user,
            [out] Boolean* result);

        /**
         * @hide
         * Removes the shared account.
         * @param account the account to remove
         * @param user the user to remove the account from
         * @return
         */
        RemoveSharedAccount(
            [in] IAccount* account,
            [in] IUserHandle* user,
            [out] Boolean* result);

        /**
         * @hide
         * @param user
         * @return
         */
        GetSharedAccounts(
            [in] IUserHandle* user,
            [out, callee] ArrayOf<IAccount*>* result);

        /**
         * Confirms that the user knows the password for an account to make extra
         * sure they are the owner of the account.  The user-entered password can
         * be supplied directly, otherwise the authenticator for this account type
         * prompts the user with the appropriate interface.  This method is
         * intended for applications which want extra assurance; for example, the
         * phone lock screen uses this to let the user unlock the phone with an
         * account password if they forget the lock pattern.
         *
         * <p>If the user-entered password matches a saved password for this
         * account, the request is considered valid; otherwise the authenticator
         * verifies the password (usually by contacting the server).
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
         *
         * @param account The account to confirm password knowledge for
         * @param options Authenticator-specific options for the request;
         *     if the {@link #KEY_PASSWORD} string field is present, the
         *     authenticator may use it directly rather than prompting the user;
         *     may be null or empty
         * @param activity The {@link Activity} context to use for launching a new
         *     authenticator-defined sub-Activity to prompt the user to enter a
         *     password; used only to call startActivity(); if null, the prompt
         *     will not be launched directly, but the necessary {@link Intent}
         *     will be returned to the caller instead
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to a Bundle
         *     with these fields if activity or password was supplied and
         *     the account was successfully verified:
         * <ul>
         * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account created
         * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
         * <li> {@link #KEY_BOOLEAN_RESULT} - true to indicate success
         * </ul>
         *
         * If no activity or password was specified, the returned Bundle contains
         * only {@link #KEY_INTENT} with the {@link Intent} needed to launch the
         * password prompt.  If an error occurred,
         * {@link AccountManagerFuture#getResult()} throws:
         * <ul>
         * <li> {@link AuthenticatorException} if the authenticator failed to respond
         * <li> {@link OperationCanceledException} if the operation was canceled for
         *      any reason, including the user canceling the password prompt
         * <li> {@link IOException} if the authenticator experienced an I/O problem
         *      verifying the password, usually because of network trouble
         * </ul>
         */
        ConfirmCredentials(
            [in] IAccount* account,
            [in] IBundle* options,
            [in] IActivity* activity,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accoutManagerFuture);

        /**
         * Asks the user to enter a new password for an account, updating the
         * saved credentials for the account.  Normally this happens automatically
         * when the server rejects credentials during an auth token fetch, but this
         * can be invoked directly to ensure we have the correct credentials stored.
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
         *
         * @param account The account to update credentials for
         * @param authTokenType The credentials entered must allow an auth token
         *     of this type to be created (but no actual auth token is returned);
         *     may be null
         * @param options Authenticator-specific options for the request;
         *     may be null or empty
         * @param activity The {@link Activity} context to use for launching a new
         *     authenticator-defined sub-Activity to prompt the user to enter a
         *     password; used only to call startActivity(); if null, the prompt
         *     will not be launched directly, but the necessary {@link Intent}
         *     will be returned to the caller instead
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to a Bundle
         *     with these fields if an activity was supplied and the account
         *     credentials were successfully updated:
         * <ul>
         * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account created
         * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
         * </ul>
         *
         * If no activity was specified, the returned Bundle contains only
         * {@link #KEY_INTENT} with the {@link Intent} needed to launch the
         * password prompt.  If an error occurred,
         * {@link AccountManagerFuture#getResult()} throws:
         * <ul>
         * <li> {@link AuthenticatorException} if the authenticator failed to respond
         * <li> {@link OperationCanceledException} if the operation was canceled for
         *      any reason, including the user canceling the password prompt
         * <li> {@link IOException} if the authenticator experienced an I/O problem
         *      verifying the password, usually because of network trouble
         * </ul>
         */
        UpdateCredentials(
            [in] IAccount* account,
            [in] String authTokenType,
            [in] IBundle* options,
            [in] IActivity* activity,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accoutManagerFuture);

        /**
         * Offers the user an opportunity to change an authenticator's settings.
         * These properties are for the authenticator in general, not a particular
         * account.  Not all authenticators support this method.
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
         *
         * @param accountType The account type associated with the authenticator
         *     to adjust
         * @param activity The {@link Activity} context to use for launching a new
         *     authenticator-defined sub-Activity to adjust authenticator settings;
         *     used only to call startActivity(); if null, the settings dialog will
         *     not be launched directly, but the necessary {@link Intent} will be
         *     returned to the caller instead
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to a Bundle
         *     which is empty if properties were edited successfully, or
         *     if no activity was specified, contains only {@link #KEY_INTENT}
         *     needed to launch the authenticator's settings dialog.
         *     If an error occurred, {@link AccountManagerFuture#getResult()}
         *     throws:
         * <ul>
         * <li> {@link AuthenticatorException} if no authenticator was registered for
         *      this account type or the authenticator failed to respond
         * <li> {@link OperationCanceledException} if the operation was canceled for
         *      any reason, including the user canceling the settings dialog
         * <li> {@link IOException} if the authenticator experienced an I/O problem
         *      updating settings, usually because of network trouble
         * </ul>
         */
        EditProperties(
            [in] String accountType,
            [in] IActivity* activity,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accoutManagerFuture);

        /**
         * This convenience helper combines the functionality of
         * {@link #getAccountsByTypeAndFeatures}, {@link #getAuthToken}, and
         * {@link #addAccount}.
         *
         * <p>This method gets a list of the accounts matching the
         * specified type and feature set; if there is exactly one, it is
         * used; if there are more than one, the user is prompted to pick one;
         * if there are none, the user is prompted to add one.  Finally,
         * an auth token is acquired for the chosen account.
         *
         * <p>This method may be called from any thread, but the returned
         * {@link AccountManagerFuture} must not be used on the main thread.
         *
         * <p>This method requires the caller to hold the permission
         * {@link android.Manifest.permission#MANAGE_ACCOUNTS}.
         *
         * @param accountType The account type required
         *     (see {@link #getAccountsByType}), must not be null
         * @param authTokenType The desired auth token type
         *     (see {@link #getAuthToken}), must not be null
         * @param features Required features for the account
         *     (see {@link #getAccountsByTypeAndFeatures}), may be null or empty
         * @param activity The {@link Activity} context to use for launching new
         *     sub-Activities to prompt to add an account, select an account,
         *     and/or enter a password, as necessary; used only to call
         *     startActivity(); should not be null
         * @param addAccountOptions Authenticator-specific options to use for
         *     adding new accounts; may be null or empty
         * @param getAuthTokenOptions Authenticator-specific options to use for
         *     getting auth tokens; may be null or empty
         * @param callback Callback to invoke when the request completes,
         *     null for no callback
         * @param handler {@link Handler} identifying the callback thread,
         *     null for the main thread
         * @return An {@link AccountManagerFuture} which resolves to a Bundle with
         *     at least the following fields:
         * <ul>
         * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account
         * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
         * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted
         * </ul>
         *
         * If an error occurred, {@link AccountManagerFuture#getResult()} throws:
         * <ul>
         * <li> {@link AuthenticatorException} if no authenticator was registered for
         *      this account type or the authenticator failed to respond
         * <li> {@link OperationCanceledException} if the operation was canceled for
         *      any reason, including the user canceling any operation
         * <li> {@link IOException} if the authenticator experienced an I/O problem
         *      updating settings, usually because of network trouble
         * </ul>
         */
        GetAuthTokenByFeatures(
            [in] String accountType,
            [in] String authTokenType,
            [in] ArrayOf<String>* features,
            [in] IActivity* activity,
            [in] IBundle* addAccountOptions,
            [in] IBundle* getAuthTokenOptions,
            [in] IAccountManagerCallback* accountManagerCb,
            [in] IHandler* handler,
            [out] IAccountManagerFuture** accoutManagerFuture);

        /**
         * Adds an {@link OnAccountsUpdateListener} to this instance of the
         * {@link AccountManager}.  This listener will be notified whenever the
         * list of accounts on the device changes.
         *
         * <p>As long as this listener is present, the AccountManager instance
         * will not be garbage-collected, and neither will the {@link Context}
         * used to retrieve it, which may be a large Activity instance.  To avoid
         * memory leaks, you must remove this listener before then.  Normally
         * listeners are added in an Activity or Service's {@link Activity#onCreate}
         * and removed in {@link Activity#onDestroy}.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>No permission is required to call this method.
         *
         * @param listener The listener to send notifications to
         * @param handler {@link Handler} identifying the thread to use
         *     for notifications, null for the main thread
         * @param updateImmediately If true, the listener will be invoked
         *     (on the handler thread) right away with the current account list
         * @throws IllegalArgumentException if listener is null
         * @throws IllegalStateException if listener was already added
         */
        AddOnAccountsUpdatedListener(
            [in] IOnAccountsUpdateListener* listener,
            [in] IHandler* handler,
            [in] Boolean updateImmediately);

        /**
         * Removes an {@link OnAccountsUpdateListener} previously registered with
         * {@link #addOnAccountsUpdatedListener}.  The listener will no longer
         * receive notifications of account changes.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>No permission is required to call this method.
         *
         * @param listener The previously added listener to remove
         * @throws IllegalArgumentException if listener is null
         * @throws IllegalStateException if listener was not already added
         */
        RemoveOnAccountsUpdatedListener(
            [in] IOnAccountsUpdateListener* listener);
    }

    [local, deprecated]
    interface IAccountManagerHelper {
        /**
         * Gets an AccountManager instance associated with a Context.
         * The {@link Context} will be used as long as the AccountManager is
         * active, so make sure to use a {@link Context} whose lifetime is
         * commensurate with any listeners registered to
         * {@link #addOnAccountsUpdatedListener} or similar methods.
         *
         * <p>It is safe to call this method from the main thread.
         *
         * <p>No permission is required to call this method.
         *
         * @param context The {@link Context} to use when necessary
         * @return An {@link AccountManager} instance
         */
        Get(
            [in] IContext* ctx,
            [out] IAccountManager** accountManager);

        /**
         * Returns an intent to an {@link Activity} that prompts the user to choose from a list of
         * accounts.
         * The caller will then typically start the activity by calling
         * <code>startActivityWithResult(intent, ...);</code>.
         * <p>
         * On success the activity returns a Bundle with the account name and type specified using
         * keys {@link #KEY_ACCOUNT_NAME} and {@link #KEY_ACCOUNT_TYPE}.
         * <p>
         * The most common case is to call this with one account type, e.g.:
         * <p>
         * <pre>  newChooseAccountsIntent(null, null, new String[]{"com.google"}, false, null,
         * null, null, null);</pre>
         * @param selectedAccount if specified, indicates that the {@link Account} is the currently
         * selected one, according to the caller's definition of selected.
         * @param allowableAccounts an optional {@link ArrayList} of accounts that are allowed to be
         * shown. If not specified then this field will not limit the displayed accounts.
         * @param allowableAccountTypes an optional string array of account types. These are used
         * both to filter the shown accounts and to filter the list of account types that are shown
         * when adding an account.
         * @param alwaysPromptForAccount if set the account chooser screen is always shown, otherwise
         * it is only shown when there is more than one account from which to choose
         * @param descriptionOverrideText if non-null this string is used as the description in the
         * accounts chooser screen rather than the default
         * @param addAccountAuthTokenType this string is passed as the {@link #addAccount}
         * authTokenType parameter
         * @param addAccountRequiredFeatures this string array is passed as the {@link #addAccount}
         * requiredFeatures parameter
         * @param addAccountOptions This {@link Bundle} is passed as the {@link #addAccount} options
         * parameter
         * @return an {@link Intent} that can be used to launch the ChooseAccount activity flow.
         */
        NewChooseAccountIntent(
            [in] IAccount* selectedAccount,
            [in] ArrayOf<IAccount*>* allowableAccounts,
            [in] ArrayOf<String>* allowableAccountTypes,
            [in] Boolean alwaysPromptForAccount,
            [in] String descriptionOverrideText,
            [in] String addAccountAuthTokenType,
            [in] ArrayOf<String>*  addAccountRequiredFeatures,
            [in] IBundle* addAccountOptions,
            [out] IIntent** intent);
    }

    } // Accounts
    } // Droid
    } // Elastos
}
