module
{
    namespace Elastos {
    namespace Droid {
    namespace Security {

    /**
     * This must be kept manually in sync with system/security/keystore until AIDL
     * can generate both Java and C++ bindings.
     *
     * @hide
     *
     * public interface IKeystoreService extends IInterface {
     *   public static abstract class Stub extends Binder implements IKeystoreService {
     *       private static class Proxy implements IKeystoreService {
     *           private final IBinder mRemote;
     */
    interface IIKeystoreService {
        /**
         * throws RemoteException
         */
        Test(
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Get(
            [in] String name,
            [out] ArrayOf<Byte>* bytes);

        /**
         * throws RemoteException
         */
        Insert(
            [in] String name,
            [in] ArrayOf<Byte>* item,
            [in] Int32 uid,
            [in] Int32 flags,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Del(
            [in] String name,
            [in] Int32 uid,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Exist(
            [in] String name,
            [in] Int32 uid,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Saw(
            [in] String name,
            [in] Int32 uid,
            [out] ArrayOf<String> ret);

        /**
         * throws RemoteException
         * @Override
         */
        Reset(
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Password(
            [in] String password,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Lock(
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Unlock(
            [in] String password,
            [out] Int32* ret);

        /**
         * throws RemoteException
         * @Override
         */
        Zero(
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Generate(
            [in] String name,
            [in] Int32 uid,
            [in] Int32 keyType,
            [in] Int32 keySize,
            [in] Int32 flags,
            [in] ArrayOf<Byte>* args,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Import_key(
            String name,
            [in] ArrayOf<Byte> data,
            [in] Int32 uid,
            [in] Int32 flags,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Sign(
            [in] String name,
            [in] ArrayOf<Byte>* data,
            [out] ArrayOf<Byte>** ret);

        /**
         * throws RemoteException
         */
        Verify(
            [in] String name,
            [in] ArrayOf<Byte>* data,
            [in] ArrayOf<Byte>* signature,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Get_pubkey(
            [in] String name,
            [out] ArrayOf<Byte>** ret);

        /**
         * throws RemoteException
         */
        Del_key(
            [in] String name,
            [in] Int32 uid,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Grant(
            [in] String name,
            [in] Int32 granteeUid,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Ungrant(
            [in] String name,
            [in] Int32 granteeUid,
            [out] Int32* ret);

        /**
         * throws RemoteException
         * @Override
         */
        Getmtime(
            [in] String name,
            [out] Int64* ret);

        /**
         * throws RemoteException
         * @Override
         */
        Duplicate(
            [in] String srcKey,
            [in] Int32 srcUid,
            [in] String destKey,
            [in] Int32 destUid,
            [out] Int32* ret);

        /**
         * throws RemoteException
         * @Override
         */
        Is_hardware_backed(
            [in] String keyType,
            [out] Int32* ret);

        /**
         * throws RemoteException
         * @Override
         */
        Clear_uid(
            [in] Int64 uid,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Reset_uid(
            [in] Int32 uid,
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Sync_uid(
            [in] Int32 srcUid,
            [in] Int32 dstUid
            [out] Int32* ret);

        /**
         * throws RemoteException
         */
        Password_uid(
            [in] String password,
            [in] Int32 uid,
            [out] Int32* ret);
    }

    } // namespace Gesture
    } // namespace Droid
    } // namespace Elastos

}
