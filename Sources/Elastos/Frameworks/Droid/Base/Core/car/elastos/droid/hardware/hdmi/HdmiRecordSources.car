
module
{
    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Hdmi {

    /**
     * Base class for each record source.
     */
    [deprecated]
    interface IRecordSource {
        ExtraParamToByteArray(
            [in] ArrayOf<Byte>* data,
            [in] Int32 index,
            [out] Int32* array);

        GetDataSize(
            [in] Boolean includeType,
            [out] Int32* size);

        ToByteArray(
            [in] Boolean includeType,
            [in] ArrayOf<Byte>* data,
            [in] Int32 index,
            [out] Int32* result);
    }

    /**
     * @hide
     *
     * @Involve
     * interface IRecordSource;
     */
    //@SystemApi
    interface IHdmiRecordSourcesOwnSource  {
    }

    /**
     * Interface for digital source identification.
     */
    [deprecated]
    interface IHdmiRecordSourcesDigitalServiceIdentification {
        ToByteArray(
            [in] ArrayOf<Byte>* data,
            [in] Int32 index,
            [out] Int32* result);
    }

    /**
     * Digital service identification for ARIB.
     * <p>
     * It consists of the following fields
     * <ul>
     * <li>transport stream id: 2bytes
     * <li>service id: 2bytes
     * <li>original network id: 2bytes
     * </ul>
     * @hide
     *
     * @Involve
     * interface IHdmiRecordSourcesDigitalServiceIdentification
     */
    interface IHdmiRecordSourcesAribData {
    }

    /**
     * Digital service identification for ATSC.
     * <p>
     * It consists of the following fields
     * <ul>
     * <li>transport stream id: 2bytes
     * <li>program number: 2bytes
     * <li>reserved: 2bytes
     * </ul>
     * @hide
     *
     * @Involve
     * interface IHdmiRecordSourcesDigitalServiceIdentification
     */
    interface IHdmiRecordSourcesAtscData {
    }

    /**
     * Digital service identification for DVB.
     * <p>
     * It consists of the following fields
     * <ul>
     * <li>transport stream id: 2bytes
     * <li>service id: 2bytes
     * <li>original network id: 2bytes
     * </ul>
     * @hide
     *
     * @Involve
     * interface IHdmiRecordSourcesDigitalServiceIdentification
     */
    interface IHdmiRecordSourcesDvbData {
    }

    /**
     * Digital channel id.
     * <p>
     * It consists of the following fields
     * <ul>
     * <li>channel number format: 6bits
     * <li>major number: 10bits
     * <li>minor number: 16bits
     * <li>reserved: 2bytes
     * </ul>
     * @hide
     *
     * @Involve
     * interface IHdmiRecordSourcesDigitalServiceIdentification
     */
    interface IHdmiRecordSourcesDigitalChannelData {
    }

    interface IHdmiRecordSourcesDigitalChannelDataHelper {
        OfTwoNumbers(
            [in] Int32 majorNumber,
            [in] Int32 minorNumber,
            [out] IHdmiRecordSourcesDigitalChannelData** data);

        OfOneNumber(
            [in] Int32 number,
            [out] IHdmiRecordSourcesDigitalChannelData** data);
    }

    /**
     * Record source container for "Digital Service".
     * <ul>
     * <li>[Record Source Type] - 1 byte
     * <li>[Digital Identification] - 7 bytes
     * </ul>
     * @hide
     *
     * @Involve
     * interface IRecordSource;
     */
    //@SystemApi
    interface IHdmiRecordSourcesDigitalServiceSource {
    }

    /**
     * Record source for analogue service data. It consists of
     * <ul>
     * <li>[Record Source Type] - 1 byte
     * <li>[Analogue Broadcast Type] - 1 byte
     * <li>[Analogue Frequency] - 2 bytes
     * <li>[Broadcast System] - 1 byte
     * </ul>
     * @hide
     *
     * @Involve
     * interface IRecordSource;
     */
    //@SystemApi
    interface IHdmiRecordSourcesAnalogueServiceSource {
    }

    /**
     * Record source for external plug (external non-HDMI device connect) type.
     * <ul>
     * <li>[Record Source Type] - 1 byte
     * <li>[External Plug] - 1 byte
     * </ul>
     * @hide
     *
     * @Involve
     * interface IRecordSource;
     */
    //@SystemApi
    interface IHdmiRecordSourcesExternalPlugData {
    }

    /**
     * Record source for external physical address.
     * <ul>
     * <li>[Record Source Type] - 1 byte
     * <li>[Physical address] - 2 byte
     * </ul>
     * @hide
     *
     * @Involve
     * interface IRecordSource;
     */
    //@SystemApi
    interface IHdmiRecordSourcesExternalPhysicalAddress {
    }

    /**
     * Container for record source used for one touch record.
     * Use one of helper method by source type.
     * <ul>
     * <li>Own source: {@link #ofOwnSource()}
     * <li>Digital service(channel id): {@link #ofDigitalChannelId(int, DigitalChannelData)}
     * <li>Digital service(ARIB): {@link #ofArib(int, AribData)}
     * <li>Digital service(ATSC): {@link #ofAtsc(int, AtscData)}
     * <li>Digital service(DVB): {@link #ofDvb(int, DvbData)}
     * <li>Analogue: {@link #ofAnalogue(int, int, int)}
     * <li>External plug: {@link #ofExternalPlug(int)}
     * <li>External physical address: {@link #ofExternalPhysicalAddress(int)}.
     * <ul>
     *
     * @hide
     */
    //@SystemApi
    interface IHdmiRecordSources {
        // ---------------------------------------------------------------------------------------------
        // ---- Digital service data -------------------------------------------------------------------
        // ---------------------------------------------------------------------------------------------
        /**
         * Digital broadcast general types
         */
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_ARIB = 0x0;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_ATSC = 0x1;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_DVB = 0x2;

        /**
         * Digital broadcast specific types
         */
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_ARIB_BS = 0x8;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_ARIB_CS = 0x9;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_ARIB_T = 0xA;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_ATSC_CABLE = 0x10;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_ATSC_SATELLITE = 0x11;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_ATSC_TERRESTRIAL = 0x12;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_DVB_C = 0x18;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_DVB_S = 0x19;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_DVB_S2 = 0x1A;
        /** @hide */
        const Int32 DIGITAL_BROADCAST_TYPE_DVB_T = 0x1B;

        // ---------------------------------------------------------------------------------------------
        // ---- Analogue service data ------------------------------------------------------------------
        // ---------------------------------------------------------------------------------------------
        /**
         * Analogue broadcast types.
         */
        /** @hide */
        const Int32 ANALOGUE_BROADCAST_TYPE_CABLE = 0x0;
        /** @hide */
        const Int32 ANALOGUE_BROADCAST_TYPE_SATELLITE = 0x1;
        /** @hide */
        const Int32 ANALOGUE_BROADCAST_TYPE_TERRESTRIAL = 0x2;

        /**
         * Broadcast system values.
         */
        /** @hide */
        const Int32 BROADCAST_SYSTEM_PAL_BG = 0;
        /** @hide */
        const Int32 BROADCAST_SYSTEM_SECAM_LP = 1;
        /** @hide */
        const Int32 BROADCAST_SYSTEM_PAL_M = 2;
        /** @hide */
        const Int32 BROADCAST_SYSTEM_NTSC_M = 3;
        /** @hide */
        const Int32 BROADCAST_SYSTEM_PAL_I = 4;
        /** @hide */
        const Int32 BROADCAST_SYSTEM_SECAM_DK = 5;
        /** @hide */
        const Int32 BROADCAST_SYSTEM_SECAM_BG = 6;
        /** @hide */
        const Int32 BROADCAST_SYSTEM_SECAM_L = 7;
        /** @hide */
        const Int32 BROADCAST_SYSTEM_PAL_DK = 8;
        /** @hide */
        const Int32 BROADCAST_SYSTEM_PAL_OTHER_SYSTEM = 31;
    }

    [deprecated]
    interface IHdmiRecordSourcesHelper {
        // ---------------------------------------------------------------------------------------------
        // ---- Own source -----------------------------------------------------------------------------
        // ---------------------------------------------------------------------------------------------
        /**
         * Create {@link OwnSource} of own source.
         */
        OfOwnSource(
            [out] IHdmiRecordSourcesOwnSource**  source);

        /**
         * Create {@link DigitalServiceSource} with channel type.
         *
         * @param broadcastSystem digital broadcast system. It should be one of
         *            <ul>
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ARIB}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ATSC}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_DVB}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ARIB_BS}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ARIB_CS}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ARIB_T}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ATSC_CABLE}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ATSC_SATELLITE}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ATSC_TERRESTRIAL}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_DVB_C}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_DVB_S}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_DVB_S2}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_DVB_T}
         *            </ul>
         * @hide
         */
        OfDigitalChannelId(
            [in] Int32 broadcastSystem,
            [in] IHdmiRecordSourcesDigitalChannelData* data,
            [out] IHdmiRecordSourcesDigitalServiceSource** source);


        /**
         * Create {@link DigitalServiceSource} of ARIB type.
         *
         * @param aribType ARIB type. It should be one of
         *            <ul>
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ARIB}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ARIB_BS}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ARIB_CS}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ARIB_T}
         *            </ul>
         * @hide
         */
        //@Nullable
        OfArib(
            [in] Int32 aribType,
            [in] IHdmiRecordSourcesAribData* data,
            [out] IHdmiRecordSourcesDigitalServiceSource** source);

        /**
         * Create {@link DigitalServiceSource} of ATSC type.
         *
         * @param atscType ATSC type. It should be one of
         *            <ul>
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ATSC}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ATSC_CABLE}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ATSC_SATELLITE}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_ATSC_TERRESTRIAL}
         *            </ul>
         * @hide
         */
        //@Nullable
        OfAtsc(
            [in] Int32 atscType,
            [in] IHdmiRecordSourcesAtscData* data,
            [out] IHdmiRecordSourcesDigitalServiceSource** source);

        /**
         * Create {@link DigitalServiceSource} of ATSC type.
         *
         * @param dvbType DVB type. It should be one of
         *            <ul>
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_DVB}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_DVB_C}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_DVB_S}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_DVB_S2}
         *            <li>{@link #DIGITAL_BROADCAST_TYPE_DVB_T}
         *            </ul>
         * @hide
         */
        //@Nullable
        OfDvb(
            [in] Int32 dvbType,
            [in] IHdmiRecordSourcesDvbData* data,
            [out] IHdmiRecordSourcesDigitalServiceSource** source);

        /**
         * Create {@link AnalogueServiceSource} of analogue service.
         *
         * @param broadcastType
         * @param frequency
         * @param broadcastSystem
         * @hide
         */
        //@Nullable
        OfAnalogue(
            [in] Int32 broadcastType,
            [in] Int32 frequency,
            [in] Int32 broadcastSystem,
            [out] IHdmiRecordSourcesAnalogueServiceSource** source);

        // ---------------------------------------------------------------------------------------------
        // ---- External plug data ---------------------------------------------------------------------
        // ---------------------------------------------------------------------------------------------
        /**
         * Create {@link ExternalPlugData} of external plug type.
         *
         * @param plugNumber plug number. It should be in range of [1, 255]
         * @hide
         */
        OfExternalPlug(
            [in] Int32 plugNumber,
            [out] IHdmiRecordSourcesExternalPlugData** data);

        // ---------------------------------------------------------------------------------------------
        // ---- External physical address --------------------------------------------------------------
        // ---------------------------------------------------------------------------------------------
        /**
         * Create {@link ExternalPhysicalAddress} of external physical address.
         *
         * @param physicalAddress
         * @hide
         */
        OfExternalPhysicalAddress(
            [in] Int32 physicalAddress,
            [out] IHdmiRecordSourcesExternalPhysicalAddress** address);

         /**
         * Check the byte array of record source.
         * @hide
         */
        //@SystemApi
        CheckRecordSource(
            [in] ArrayOf<Byte>* recordSource,
            [out] Boolean* result);
    }

    } // namespace Hdmi
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
