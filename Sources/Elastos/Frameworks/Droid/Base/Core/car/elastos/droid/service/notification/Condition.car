
module
{
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Net.IUriBuilder;
    interface Elastos.Droid.Content.IContext;

    namespace Elastos {
    namespace Droid {
    namespace Service {
    namespace Notification {

    /**
     * Condition information from condition providers.
     *
     * @hide
     * @Involve
     * interface IParcelable
     */
    //@SystemApi
    interface ICondition {
        const String SCHEME = "condition";

        const Int32 STATE_FALSE = 0;
        const Int32 STATE_TRUE = 1;
        const Int32 STATE_UNKNOWN = 2;
        const Int32 STATE_ERROR = 3;

        const Int32 FLAG_RELEVANT_NOW = 1 << 0;
        const Int32 FLAG_RELEVANT_ALWAYS = 1 << 1;

        Copy(
            [out] ICondition** ret);

        GetId(
            [out] IUri** id);

        SetId(
            [in] IUri* id);

        GetSummary(
            [out] String* summary);

        SetSummary(
            [in] String summary);

        GetLine1(
            [out] String* line1);

        SetLine1(
            [in] String line1);

        GetLine2(
            [out] String* line2);

        SetLine2(
            [in] String line2);

        GetIcon(
            [out] Int32* icon);

        SetIcon(
            [in] Int32 icon);

        GetState(
            [out] Int32* state);

        SetState(
            [in] Int32 state);

        GetFlags(
            [out] Int32* flags);

        SetFlags(
            [in] Int32 flags);
    }

    interface IConditionHelper {
        StateToString(
            [in] Int32 state,
            [out] String* str);

        RelevanceToString(
            [in] Int32 flags,
            [out] String* str);

        NewId(
            [in] IContext* ctx,
            [out] IUriBuilder** id);

        IsValidId(
            [in] IUri* id,
            [in] String pkg,
            [out] Boolean* ret);
    }

    } //Notification
    } //Service
    } //Droid
    } //Elastos
}
