
module
{
    using interface Elastos.Utility.IList;
    interface Elastos.Droid.Bluetooth.IBluetoothDevice;

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {

        /**
         * Public APIs for the Bluetooth Profiles.
         *
         * <p> Clients should call BluetoothAdapter#getProfileProxy,
         * to get the Profile Proxy. Each public profile implements this
         * interface.
         *
         * @sa BluetoothAdapter#getProfileProxy
         */
        [deprecated, local]
        interface IBluetoothProfile {
            /**
             * Extra for the connection state intents of the individual profiles.
             *
             * This extra represents the current connection state of the profile of the
             * Bluetooth device.
             */
            const String EXTRA_STATE = "android.bluetooth.profile.extra.STATE";

            /**
             * Extra for the connection state intents of the individual profiles.
             *
             * This extra represents the previous connection state of the profile of the
             * Bluetooth device.
             */
            const String EXTRA_PREVIOUS_STATE = "android.bluetooth.profile.extra.PREVIOUS_STATE";

            /** The profile is in disconnected state */
            const Int32 STATE_DISCONNECTED = 0;

            /** The profile is in connecting state */
            const Int32 STATE_CONNECTING = 1;

            /** The profile is in connected state */
            const Int32 STATE_CONNECTED = 2;

            /** The profile is in disconnecting state */
            const Int32 STATE_DISCONNECTING = 3;

            /**
             * Headset and Handsfree profile
             */
            const Int32 HEADSET = 1;

            /**
             * A2DP profile.
             */
            const Int32 A2DP = 2;

            /**
             * Health Profile
             */
            const Int32 HEALTH = 3;

            /**
             * Input Device Profile
             * @hide
             */
            const Int32 INPUT_DEVICE = 4;

            /**
             * PAN Profile
             * @hide
             */
            const Int32 PAN = 5;

            /**
             * PBAP
             * @hide
             */
            const Int32 PBAP = 6;

            /**
              * GATT
              */
            const Int32 GATT = 7;

            /**
             * GATT_SERVER
             */
            const Int32 GATT_SERVER = 8;

            /**
             * MAP Profile
             * @hide
             */
            const Int32 MAP = 9;

            /**
             * A2DP Sink Profile
             * @hide
             */
            const Int32 A2DP_SINK = 10;

            /**
             * AVRCP Controller Profile
             * @hide
             */
            const Int32 AVRCP_CONTROLLER = 11;

            /**
             * Headset Client - HFP HF Role
             * @hide
             */
            const Int32 HEADSET_CLIENT = 16;

            /**
             * Default priority for devices that we try to auto-connect to and
             * and allow incoming connections for the profile
             * @hide
             **/
            const Int32 PRIORITY_AUTO_CONNECT = 1000;

            /**
             *  Default priority for devices that allow incoming
             * and outgoing connections for the profile
             * @hide
             **/
            const Int32 PRIORITY_ON = 100;

            /**
             * Default priority for devices that does not allow incoming
             * connections and outgoing connections for the profile.
             * @hide
             **/
            const Int32 PRIORITY_OFF = 0;

            /**
             * Default priority when not set or when the device is unpaired
             * @hide
             * */
            const Int32 PRIORITY_UNDEFINED = -1;

            /**
             * Get connected devices for this specific profile.
             *
             * <p> Return the set of devices which are in state #STATE_CONNECTED
             *
             * @sa #STATE_CONNECTED
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @return List of devices. The list will be empty on error.
             */
            //Mike TODO:
            GetConnectedDevices(
                [out] IList** devices);

            /**
             * Get a list of devices that match any of the given connection
             * states.
             *
             * <p> If none of the devices match any of the given states,
             * an empty list will be returned.
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param states Array of states. States can be one of
             *              #STATE_CONNECTED, #STATE_CONNECTING,
             *              #STATE_DISCONNECTED, #STATE_DISCONNECTING,
             * @return List of devices. The list will be empty on error.
             *
             * @sa #STATE_CONNECTED
             * @sa #STATE_CONNECTING
             * @sa #STATE_DISCONNECTED
             * @sa #STATE_DISCONNECTING
             */
            //Mike TODO:  Wait for List car interface
            GetDevicesMatchingConnectionStates(
                [in] ArrayOf<Int32>* states,
                [out] IList** devices);

            /**
             * Get the current connection state of the profile
             *
             * <p>Requires android.Manifest.permission#BLUETOOTH permission.
             *
             * @sa android.Manifest.permission#BLUETOOTH
             *
             * @param device Remote bluetooth device.
             * @return State of the profile connection. One of
             *               #STATE_CONNECTED, #STATE_CONNECTING,
             *               #STATE_DISCONNECTED,#STATE_DISCONNECTING
             *
             * @sa #STATE_CONNECTED
             * @sa #STATE_CONNECTING
             * @sa #STATE_DISCONNECTED
             * @sa #STATE_DISCONNECTING
             */
            GetConnectionState(
                [in] IBluetoothDevice* device,
                [out] Int32* state);
        }

        /**
         * An interface for notifying BluetoothProfile IPC clients when they have
         * been connected or disconnected to the service.
         */
        [local]
        interface IBluetoothProfileServiceListener {
            /**
             * Called to notify the client when the proxy object has been
             * connected to the service.
             * @param profile - One of #HEALTH, #HEADSET or
             *                  #A2DP
             * @param proxy - One of BluetoothHealth, BluetoothHeadset or BluetoothA2dp
             *
             * @sa BluetoothHealth
             * @sa BluetoothHeadset
             * @sa #HEALTH
             * @sa #HEADSET
             * @sa #A2DP
             * @sa BluetoothA2dp
             */
            OnServiceConnected(
                [in] Int32 profile,
                [in] IBluetoothProfile* proxy);

            /**
             * Called to notify the client that this proxy object has been
             * disconnected from the service.
             * @param profile - One of #HEALTH, #HEADSET or
             *                  #A2DP
             *
             * @sa #HEALTH
             * @sa #HEADSET
             * @sa #A2DP
             */
            OnServiceDisconnected(
                [in] Int32 profile);
        }

    } // Bluetooth
    } // Droid
    } // Elastos
}
