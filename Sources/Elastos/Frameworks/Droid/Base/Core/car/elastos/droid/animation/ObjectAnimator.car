
module
{
    interface Elastos.Droid.Utility.IProperty;

    namespace Elastos {
    namespace Droid {
    namespace Animation {

    /**
     * This subclass of ValueAnimator provides support for animating properties on
     * target objects. The constructors of this class take parameters to define the
     * target object that will be animated as well as the name of the property that
     * will be animated. Appropriate set/get functions are then determined internally
     * and the animation will call these functions as necessary to animate the property.
     *
     * @sa ValueAnimator
     * <p>
     * <strong>Developer Guides</strong>
     * <p>
     * For more information about animating with ObjectAnimator, read the Property Animation developer guide.
     *
     * @sa Property Animation
     * @sa setPropertyName(String)
     *
     * @implements Elastos.Droid.Animation.IValueAnimator
     */
    /**
     * @Involve
     * interface IValueAnimator
     * interface IAnimator
     * implements ICloneable
     */
     [local]
    interface IObjectAnimator {
        /**
         * Sets the name of the property that will be animated. This name is used to derive
         * a setter function that will be called to set animated values.
         * For example, a property name of <code>foo</code> will result
         * in a call to the function <code>setFoo()</code> on the target object. If either
         * <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
         * also be derived and called.
         *
         * <p>For best performance of the mechanism that calls the setter function determined by the
         * name of the property being animated, use <code>Float</code> or <code>Int32</code> typed values,
         * and make the setter function for those properties have a <code>void</code> return value. This
         * will cause the code to take an optimized path for these constrained circumstances. Other
         * property types and return types will work, but will have more overhead in processing
         * the requests due to normal reflection mechanisms.</p>
         *
         * <p>Note that the setter function derived from this property name
         * must take the same parameter type as the
         * <code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
         * the setter function will fail.</p>
         *
         * <p>If this ObjectAnimator has been set up to animate several properties together,
         * using more than one PropertyValuesHolder objects, then setting the propertyName simply
         * sets the propertyName in the first of those PropertyValuesHolder objects.</p>
         *
         * @param propertyName The name of the property being animated. Should not be null.
         */
        SetPropertyName(
            [in] String propertyName);

        /**
         * Sets the property that will be animated. Property objects will take precedence over
         * properties specified by the #setPropertyName(String) method. Animations should
         * be set up to use one or the other, not both.
         *
         * @sa #setPropertyName(String)
         *
         * @param property The property being animated. Should not be null.
         */
        SetProperty(
            [in] IProperty* property);

        /**
         * Gets the name of the property that will be animated. This name will be used to derive
         * a setter function that will be called to set animated values.
         * For example, a property name of <code>foo</code> will result
         * in a call to the function <code>setFoo()</code> on the target object. If either
         * <code>valueFrom</code> or <code>valueTo</code> is NULL, then a getter function will
         * also be derived and called.
         */
        GetPropertyName(
            [out] String* propertyName);

        /**
         * The target object whose property will be animated by this animation
         *
         * @return The object being animated
         */
        GetTarget(
            [out] IInterface** object);

        SetAutoCancel(
            [in] Boolean cancel);
    }

    [deprecated, local]
    interface IObjectAnimatorHelper {
        /**
         * Constructs and returns an ObjectAnimator that animates between int values. A single
         * value implies that that value is the one being animated to. Two values imply a starting
         * and ending values. More than two values imply a starting value, values to animate through
         * along the way, and an ending value (these values will be distributed evenly across
         * the duration of the animation).
         *
         * @param target The object whose property is to be animated. This object should
         * have a public method on it called <code>setName()</code>, where <code>name</code> is
         * the value of the <code>propertyName</code> parameter.
         * @param propertyName The name of the property being animated.
         * @param values A set of values that the animation will animate between over time.
         * @return An ObjectAnimator object that is set up to animate between the given values.
         */
        OfInt32(
            [in] IInterface* target,
            [in] String propertyName,
            [in] ArrayOf<Int32>* values,
            [out] IObjectAnimator** anim);

        /**
         * Constructs and returns an ObjectAnimator that animates between int values. A single
         * value implies that that value is the one being animated to. Two values imply a starting
         * and ending values. More than two values imply a starting value, values to animate through
         * along the way, and an ending value (these values will be distributed evenly across
         * the duration of the animation).
         *
         * @param target The object whose property is to be animated.
         * @param property The property being animated.
         * @param values A set of values that the animation will animate between over time.
         * @return An ObjectAnimator object that is set up to animate between the given values.
         */
        OfInt32(
            [in] IInterface* target,
            [in] IProperty* property,
            [in] ArrayOf<Int32>* values,
            [out] IObjectAnimator** anim);

        /**
         * Constructs and returns an ObjectAnimator that animates between float values. A single
         * value implies that that value is the one being animated to. Two values imply a starting
         * and ending values. More than two values imply a starting value, values to animate through
         * along the way, and an ending value (these values will be distributed evenly across
         * the duration of the animation).
         *
         * @param target The object whose property is to be animated. This object should
         * have a public method on it called <code>setName()</code>, where <code>name</code> is
         * the value of the <code>propertyName</code> parameter.
         * @param propertyName The name of the property being animated.
         * @param values A set of values that the animation will animate between over time.
         * @return An ObjectAnimator object that is set up to animate between the given values.
         */
        OfFloat(
            [in] IInterface* target,
            [in] String propertyName,
            [in] ArrayOf<Float>* values,
            [out] IObjectAnimator** anim);

        /**
         * Constructs and returns an ObjectAnimator that animates between float values. A single
         * value implies that that value is the one being animated to. Two values imply a starting
         * and ending values. More than two values imply a starting value, values to animate through
         * along the way, and an ending value (these values will be distributed evenly across
         * the duration of the animation).
         *
         * @param target The object whose property is to be animated.
         * @param property The property being animated.
         * @param values A set of values that the animation will animate between over time.
         * @return An ObjectAnimator object that is set up to animate between the given values.
         */
        OfFloat(
            [in] IInterface* target,
            [in] IProperty* property,
            [in] ArrayOf<Float>* values,
            [out] IObjectAnimator** anim);

        /**
         * Constructs and returns an ObjectAnimator that animates between Object values. A single
         * value implies that that value is the one being animated to. Two values imply a starting
         * and ending values. More than two values imply a starting value, values to animate through
         * along the way, and an ending value (these values will be distributed evenly across
         * the duration of the animation).
         *
         * @param target The object whose property is to be animated. This object should
         * have a public method on it called <code>setName()</code>, where <code>name</code> is
         * the value of the <code>propertyName</code> parameter.
         * @param propertyName The name of the property being animated.
         * @param evaluator A TypeEvaluator that will be called on each animation frame to
         * provide the necessary interpolation between the Object values to derive the animated
         * value.
         * @param values A set of values that the animation will animate between over time.
         * @return An ObjectAnimator object that is set up to animate between the given values.
         */
        OfObject(
            [in] IInterface* target,
            [in] String propertyName,
            [in] ITypeEvaluator* evaluator,
            [in] ArrayOf<IInterface*>* values,
            [out] IObjectAnimator** anim);

        /**
         * Constructs and returns an ObjectAnimator that animates between Object values. A single
         * value implies that that value is the one being animated to. Two values imply a starting
         * and ending values. More than two values imply a starting value, values to animate through
         * along the way, and an ending value (these values will be distributed evenly across
         * the duration of the animation).
         *
         * @param target The object whose property is to be animated.
         * @param property The property being animated.
         * @param evaluator A TypeEvaluator that will be called on each animation frame to
         * provide the necessary interpolation between the Object values to derive the animated
         * value.
         * @param values A set of values that the animation will animate between over time.
         * @return An ObjectAnimator object that is set up to animate between the given values.
         */
        OfObject(
            [in] IInterface* target,
            [in] IProperty* property,
            [in] ITypeEvaluator* evaluator,
            [in] ArrayOf<IInterface*>* values,
            [out] IObjectAnimator** anim);

        /**
         * Constructs and returns an ObjectAnimator that animates between the sets of values specified
         * in <code>PropertyValueHolder</code> objects. This variant should be used when animating
         * several properties at once with the same ObjectAnimator, since PropertyValuesHolder allows
         * you to associate a set of animation values with a property name.
         *
         * @param target The object whose property is to be animated. Depending on how the
         * PropertyValuesObjects were constructed, the target object should either have the {@link
         * android.util.Property} objects used to construct the PropertyValuesHolder objects or (if the
         * PropertyValuesHOlder objects were created with property names) the target object should have
         * public methods on it called <code>setName()</code>, where <code>name</code> is the name of
         * the property passed in as the <code>propertyName</code> parameter for each of the
         * PropertyValuesHolder objects.
         * @param values A set of PropertyValuesHolder objects whose values will be animated between
         * over time.
         * @return An ObjectAnimator object that is set up to animate between the given values.
         */
        OfPropertyValuesHolder(
            [in] IInterface* target,
            [in] ArrayOf<IPropertyValuesHolder*>* values,
            [out] IObjectAnimator** anim);
    }

    } // namespace Animation
    } // namepsace Droid
    } // namespace Elastos
}
