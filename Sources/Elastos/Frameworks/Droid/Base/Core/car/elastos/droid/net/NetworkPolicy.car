
module
{
    namespace Elastos {
    namespace Droid {
    namespace Net {

    /**
     * Policy for networks matching a {@link NetworkTemplate}, including usage cycle
     * and limits to be enforced.
     *
     * @hide
     */
    /**
     * @Involved
     * interface IParcelable;
     * interface IComparable;
     */
    interface INetworkPolicy {

        const Int32 CYCLE_NONE = -1;
        const Int64 WARNING_DISABLED = -1;
        const Int64 LIMIT_DISABLED = -1;
        const Int64 SNOOZE_NEVER = -1;

        IsOverWarning(
            [in] Int64 totalBytes,
            [out] Boolean* result);

        IsOverLimit(
            [in] Int64 totalBytes,
            [out] Boolean* result);

        ClearSnooze();

        HasCycle(
            [out] Boolean* result);

        GetTemplate(
            [out] INetworkTemplate** result);

        GetCycleDay(
            [out] Int32* cycleday);

        SetCycleDay(
            [in] Int32 cycleday);

        GetCycleTimezone(
            [out] String* cycleTimezone);

        SetCycleTimezone(
            [in] String cycleTimezone);

        GetWarningBytes(
            [out] Int64* warningbytes);

        SetWarningBytes(
            [in] Int64 warningbytes);

        GetLimitBytes(
            [out] Int64* limitbytes);

        SetLimitBytes(
            [in] Int64 limitbytes);

        GetLastWarningSnooze(
            [out] Int64* lastwarningsnooze);

        SetLastWarningSnooze(
            [in] Int64 lastwarningsnooze);

        GetLastLimitSnooze(
            [out] Int64* lastlimitsnooze);

        SetLastLimitSnooze(
            [in] Int64 lastlimitsnooze);

        GetMetered(
            [out] Boolean* metered);

        SetMetered(
            [in] Boolean metered);

        GetInferred(
            [out] Boolean* inferred);

        SetInferred(
            [in] Boolean inferred);
    }

    } // namespace Net
    } // namepsace Droid
    } // namespace Elastos
}
