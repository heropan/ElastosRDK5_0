
module
{
    using interface Elastos.Security.IPublicKey;

    namespace Elastos {
    namespace Droid {
    namespace Content {
    namespace Pm {


    /**
     * Opaque, immutable representation of a signature associated with an application package.
     */

    [deprecated]
    interface ISignature {
        /**
         * Encode the Signature as ASCII text.
         */
        ToChars(
            [out, callee] ArrayOf<Char32>* text);

        /**
         * Encode the Signature as ASCII text in to an existing array.
         *
         * @param existingArray Existing char array or null.
         * @param outLen Output parameter for the number of characters written in
         * to the array.
         * @return Returns either <var>existingArray</var> if it was large enough
         * to hold the ASCII representation, or a newly created char[] array if
         * needed.
         */
        ToChars(
            [in] ArrayOf<Char32>* existingArray,
            [in] ArrayOf<Int32>* outLen,
            [out, callee] ArrayOf<Char32>* text);

        /**
         * Return the result of #toChars() as a String.
         *
         * @sa #toChars()
         */
        ToCharsString(
            [out] String* str);

        /**
         * @return the contents of this signature as a byte array.
         */
        ToByteArray(
            [out, callee] ArrayOf<Byte>* bytes);

        /**
         * Returns the public key for this signature.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * CertificateException | when Signature isn't a valid X.509
         *             certificate; shouldn't happen.
         * @hide
         */
        GetPublicKey(
            [out] IPublicKey** publicKey);
    }

    } // namespace Pm
    } // namespace Content
    } // namespace Droid
    } // namespace Elastos
}
