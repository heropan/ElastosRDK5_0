module
{
    namespace Elastos {
    namespace Droid {
    namespace Speech {
    namespace Tts {

    /**
     * Listener for events relating to the progress of an utterance through
     * the synthesis queue. Each utterance is associated with a call to
     * {@link TextToSpeech#speak} or {@link TextToSpeech#synthesizeToFile} with an
     * associated utterance identifier, as per {@link TextToSpeech.Engine#KEY_PARAM_UTTERANCE_ID}.
     *
     * The callbacks specified in this method can be called from multiple threads.
     */
    //public abstract class
    interface IUtteranceProgressListener {
        /**
         * Called when an utterance "starts" as perceived by the caller. This will
         * be soon before audio is played back in the case of a {@link TextToSpeech#speak}
         * or before the first bytes of a file are written to storage in the case
         * of {@link TextToSpeech#synthesizeToFile}.
         *
         * @param utteranceId the utterance ID of the utterance.
         */
        //abstract
        OnStart(
            [in] String utteranceId);

        /**
         * Called when an utterance has successfully completed processing.
         * All audio will have been played back by this point for audible output, and all
         * output will have been written to disk for file synthesis requests.
         *
         * This request is guaranteed to be called after {@link #onStart(String)}.
         *
         * @param utteranceId the utterance ID of the utterance.
         */
        //abstract
        OnDone(
            [in] String utteranceId);

        /**
         * Called when an error has occurred during processing. This can be called
         * at any point in the synthesis process. Note that there might be calls
         * to {@link #onStart(String)} for specified utteranceId but there will never
         * be a call to both {@link #onDone(String)} and {@link #onError(String)} for
         * the same utterance.
         *
         * @param utteranceId the utterance ID of the utterance.
         */
        //abstract
        OnError(
            [in] String utteranceId);

        /**
         * Called when an error has occurred during processing. This can be called
         * at any point in the synthesis process. Note that there might be calls
         * to {@link #onStart(String)} for specified utteranceId but there will never
         * be a call to both {@link #onDone(String)} and {@link #onError(String,int)} for
         * the same utterance. The default implementation calls {@link #onError(String)}.
         *
         * @param utteranceId the utterance ID of the utterance.
         * @param errorCode one of the ERROR_* codes from {@link TextToSpeech}
         */
        OnError(
            [in] String utteranceId,
            [in] Int32 errorCode);

        /**
         * Called when an error has occurred during processing. This can be called
         * at any point in the synthesis process. Note that there might be calls
         * to {@link #onStart(String)} for specified utteranceId but there will never
         * be a call to both {@link #onDone(String)} and {@link #onError(String,int)} for
         * the same utterance. The default implementation calls {@link #onError(String)}.
         *
         * @param utteranceId the utterance ID of the utterance.
         * @param errorCode one of the ERROR_* codes from {@link TextToSpeech}
         */
        OnError(
            [in] String utteranceId,
            [in] Int32 errorCode);
    }

    } // namespace Tts
    } // namespace Speech
    } // namespace Droid
    } // namespace Elastos

}
