
module
{
    using interface Elastos.Utility.IList;

    interface Elastos.Droid.Os.IBundle;

    namespace Elastos {
    namespace Droid {
    namespace View {
    namespace Accessibility {

    [local]
    interface IAccessibilityNodeProvider {
        /**
         * The virtual id for the hosting View.
         */
        const Int32 HOST_VIEW_ID = -1;

        /**
         * Returns an {@link AccessibilityNodeInfo} representing a virtual view,
         * i.e. a descendant of the host View, with the given <code>virtualViewId</code>
         * or the host View itself if <code>virtualViewId</code> equals to {@link #HOST_VIEW_ID}.
         * <p>
         * A virtual descendant is an imaginary View that is reported as a part of the view
         * hierarchy for accessibility purposes. This enables custom views that draw complex
         * content to report them selves as a tree of virtual views, thus conveying their
         * logical structure.
         * </p>
         * <p>
         * The implementer is responsible for obtaining an accessibility node info from the
         * pool of reusable instances and setting the desired properties of the node info
         * before returning it.
         * </p>
         *
         * @param virtualViewId A client defined virtual view id.
         * @return A populated {@link AccessibilityNodeInfo} for a virtual descendant or the
         *     host View.
         *
         * @see View#createAccessibilityNodeInfo()
         * @see AccessibilityNodeInfo
         */
        CreateAccessibilityNodeInfo(
            [in] Int32 virtualViewId,
            [out] IAccessibilityNodeInfo** nodeInfo);

        /**
         * Performs an accessibility action on a virtual view, i.e. a descendant of the
         * host View, with the given <code>virtualViewId</code> or the host View itself
         * if <code>virtualViewId</code> equals to {@link #HOST_VIEW_ID}.
         *
         * @param virtualViewId A client defined virtual view id.
         * @param action The action to perform.
         * @param arguments Optional action arguments.
         * @return True if the action was performed.
         *
         * @see View#performAccessibilityAction(int, Bundle)
         * @see #createAccessibilityNodeInfo(int)
         * @see AccessibilityNodeInfo
         */
        PerformAction(
            [in] Int32 virtualViewId,
            [in] Int32 action,
            [in] IBundle* arguments,
            [out] Boolean* result);

        /**
         * Finds {@link AccessibilityNodeInfo}s by text. The match is case insensitive
         * containment. The search is relative to the virtual view, i.e. a descendant of the
         * host View, with the given <code>virtualViewId</code> or the host View itself
         * <code>virtualViewId</code> equals to {@link #HOST_VIEW_ID}.
         *
         * @param virtualViewId A client defined virtual view id which defined
         *     the root of the tree in which to perform the search.
         * @param text The searched text.
         * @return A list of node info.
         *
         * @see #createAccessibilityNodeInfo(int)
         * @see AccessibilityNodeInfo
         */
        FindAccessibilityNodeInfosByText(
            [in] String text,
            [in] Int32 virtualViewId,
            [out] IList** nodeInfos);

        /**
         * Find the virtual view, i.e. a descendant of the host View, that has the
         * specified focus type.
         *
         * @param focus The focus to find. One of
         *            {@link AccessibilityNodeInfo#FOCUS_INPUT} or
         *            {@link AccessibilityNodeInfo#FOCUS_ACCESSIBILITY}.
         * @return The node info of the focused view or null.
         * @see AccessibilityNodeInfo#FOCUS_INPUT
         * @see AccessibilityNodeInfo#FOCUS_ACCESSIBILITY
         */
        FindFocus(
            [in] Int32 focus,
            [out] IAccessibilityNodeInfo** info);

    }

    } // namespace Accessibility
    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
