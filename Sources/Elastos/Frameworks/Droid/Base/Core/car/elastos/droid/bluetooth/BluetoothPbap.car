module
{

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {

        /**
         * The Android Bluetooth API is not finalized, and *will* change. Use at your
         * own risk.
         *
         * Public API for controlling the Bluetooth Pbap Service. This includes
         * Bluetooth Phone book Access profile.
         * BluetoothPbap is a proxy object for controlling the Bluetooth Pbap
         * Service via IPC.
         *
         * Creating a BluetoothPbap object will create a binding with the
         * BluetoothPbap service. Users of this object should call close() when they
         * are finished with the BluetoothPbap, so that this proxy object can unbind
         * from the service.
         *
         * This BluetoothPbap object is not immediately bound to the
         * BluetoothPbap service. Use the ServiceListener interface to obtain a
         * notification when it is bound, this is especially important if you wish to
         * immediately call methods on BluetoothPbap after construction.
         *
         * Android only supports one connected Bluetooth Pce at a time.
         *
         * @hide
         */
        [local]
        interface IBluetoothPbap {
            /** int extra for PBAP_STATE_CHANGED_ACTION */
            const String PBAP_STATE =
                "android.bluetooth.pbap.intent.PBAP_STATE";
            /** int extra for PBAP_STATE_CHANGED_ACTION */
            const String PBAP_PREVIOUS_STATE =
                "android.bluetooth.pbap.intent.PBAP_PREVIOUS_STATE";

            /** Indicates the state of a pbap connection state has changed.
             *  This intent will always contain PBAP_STATE, PBAP_PREVIOUS_STATE and
             *  BluetoothIntent.ADDRESS extras.
             */
            const String PBAP_STATE_CHANGED_ACTION =
                "android.bluetooth.pbap.intent.action.PBAP_STATE_CHANGED";

            /** There was an error trying to obtain the state */
            const Int32 STATE_ERROR        = -1;
            /** No client currently connected */
            const Int32 STATE_DISCONNECTED = 0;
            /** Connection attempt in progress */
            const Int32 STATE_CONNECTING   = 1;
            /** Client is currently connected */
            const Int32 STATE_CONNECTED    = 2;

            const Int32 RESULT_FAILURE = 0;
            const Int32 RESULT_SUCCESS = 1;
            /** Connection canceled before completion. */
            const Int32 RESULT_CANCELED = 2;

            /**
             * Close the connection to the backing service.
             * Other public functions of BluetoothPbap will return default error
             * results once close() has been called. Multiple invocations of close()
             * are ok.
             */
            Close();

            /**
             * Get the current state of the BluetoothPbap service.
             * @return One of the STATE_ return codes, or STATE_ERROR if this proxy
             *         object is currently not connected to the Pbap service.
             */
            GetState(
                [out] Int32* state);

            /**
             * Get the currently connected remote Bluetooth device (PCE).
             * @return The remote Bluetooth device, or null if not in connected or
             *         connecting state, or if this proxy object is not connected to
             *         the Pbap service.
             */
            GetClient(
                [out] IBluetoothDevice** client);

            /**
             * Returns true if the specified Bluetooth device is connected (does not
             * include connecting). Returns false if not connected, or if this proxy
             * object is not currently connected to the Pbap service.
             */
            IsConnected(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Disconnects the current Pbap client (PCE). Currently this call blocks,
             * it may soon be made asynchronous. Returns false if this proxy object is
             * not currently connected to the Pbap service.
             */
            Disconnect(
                [out] Boolean* result);

        }

        [local]
        interface IBluetoothPbapServiceListener {
            /**
             * Called to notify the client when this proxy object has been
             * connected to the BluetoothPbap service. Clients must wait for
             * this callback before making IPC calls on the BluetoothPbap
             * service.
             */
            OnServiceConnected(
                [in] IBluetoothPbap* proxy);

            /**
             * Called to notify the client that this proxy object has been
             * disconnected from the BluetoothPbap service. Clients must not
             * make IPC calls on the BluetoothPbap service after this callback.
             * This callback will currently only occur if the application hosting
             * the BluetoothPbap service, but may be called more often in future.
             */
            OnServiceDisconnected();
        }

        interface IBluetoothPbapHelper {
            /**
             * Check class bits for possible PBAP support.
             * This is a simple heuristic that tries to guess if a device with the
             * given class bits might support PBAP. It is not accurate for all
             * devices. It tries to err on the side of false positives.
             * @return True if this device might support PBAP.
             */
            DoesClassMatchSink(
                [in] IBluetoothClass* btClass,
                [out] Boolean* result);
        }

    } // Bluetooth
    } // Droid
    } // Elastos
}
