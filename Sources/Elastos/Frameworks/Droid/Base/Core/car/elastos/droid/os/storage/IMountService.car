
module
{
    interface Elastos.Droid.Os.Storage.IObbActionListener;
    interface Elastos.Droid.Os.Storage.IMountServiceListener;
    interface Elastos.Droid.Os.Storage.IIMountShutdownObserver;
    interface Elastos.Droid.Os.Storage.IStorageVolume;

    namespace Elastos {
    namespace Droid {
    namespace Os {
    namespace Storage {

    interface IMountService {
        /** The volume is not encrypted. */
        const Int32 ENCRYPTION_STATE_NONE = 1;
        /** The volume has been encrypted succesfully. */
        const Int32 ENCRYPTION_STATE_OK = 0;
        /** The volume is in a bad state. */
        const Int32 ENCRYPTION_STATE_ERROR_UNKNOWN = -1;
        /** The volume is in a bad state - partially encrypted. Data is likely irrecoverable. */
        const Int32 ENCRYPTION_STATE_ERROR_INCOMPLETE = -2;

        /*
         * Creates a secure container with the specified parameters. Returns an Int32
         * consistent with MountServiceResultCode
         */
        CreateSecureContainer(
            [in] String id,
            [in] Int32 sizeMb,
            [in] String fstype,
            [in] String key,
            [in] Int32 ownerUid,
            [in] Boolean external,
            [out] Int32* result);

        /*
         * Destroy a secure container, and free up all resources associated with it.
         * NOTE: Ensure all references are released prior to deleting. Returns an
         * Int32 consistent with MountServiceResultCode
         */
        DestroySecureContainer(
            [in] String id,
            [in] Boolean force,
            [out] Int32* result);

        /*
         * Finalize a container which has just been created and populated. After
         * finalization, the container is immutable. Returns an Int32 consistent with
         * MountServiceResultCode
         */
        FinalizeSecureContainer(
            [in] String id,
            [out] Int32* result);

        /**
         * Call into MountService by PackageManager to notify that its done
         * processing the media status update request.
         */
        FinishMediaUpdate();

        /**
         * Format external storage given a mount point. Returns an Int32 consistent
         * with MountServiceResultCode
         */
        FormatVolume(
            [in] String mountPoint,
            [out] Int32* result);

        /**
         * Gets the path to the mounted Opaque Binary Blob (OBB).
         */
        GetMountedObbPath(
            [in] String filename,
            [out] String* obbPath);

        /**
         * Gets an Array of currently known secure container IDs
         */
        GetSecureContainerList(
            [out, callee] ArrayOf<String>* ids);

        /*
         * Returns the filesystem path of a mounted secure container.
         */
        GetSecureContainerPath(
            [in] String id,
            [out] String* path);

        /**
         * Returns an array of pids with open files on the specified path.
         */
        GetStorageUsers(
            [in] String path,
            [out, callee] ArrayOf<Int32>* pids);

        /**
         * Gets the state of a volume via its mountpoint.
         */
        GetVolumeState(
            [in] String mountPoint,
            [out] String* state);

        /**
         * Checks whether the specified Opaque Binary Blob (OBB) is mounted
         * somewhere.
         */
        IsObbMounted(
            [in] String filename,
            [out] Boolean* isMounted);

        /*
         * Returns true if the specified container is mounted
         */
        IsSecureContainerMounted(
            [in] String id,
            [out] Boolean* isMounted);

        /**
         * Returns true if a USB mass storage host is connected
         */
        IsUsbMassStorageConnected(
            [out] Boolean* isConnected);

        /**
         * Returns true if a USB mass storage host is enabled (media is shared)
         */
        IsUsbMassStorageEnabled(
            [out] Boolean* isEnabled);

        /**
         * Mounts an Opaque Binary Blob (OBB) with the specified decryption key and
         * only allows the calling process's UID access to the contents.
         * MountService will call back to the supplied IObbActionListener to inform
         * it of the terminal state of the call.
         */
        MountObb(
            [in] String rawPath,
            [in] String canonicalPath,
            [in] String key,
            [in] IObbActionListener* token,
            [in] Int32 nonce);

        /*
         * Mount a secure container with the specified key and owner UID. Returns an
         * Int32 consistent with MountServiceResultCode
         */
        MountSecureContainer(
            [in] String id,
            [in] String key,
            [in] Int32 ownerUid,
            [in] Boolean readOnly,
            [out] Int32* result);

        /**
         * Mount external storage at given mount point. Returns an Int32 consistent
         * with MountServiceResultCode
         */
        MountVolume(
            [in] String mountPoint,
            [out] Int32* result);

        /**
         * Registers an IMountServiceListener for receiving async notifications.
         */
        RegisterListener(
            [in] IMountServiceListener* listener);

        /*
         * Rename an unmounted secure container. Returns an Int32 consistent with
         * MountServiceResultCode
         */
        RenameSecureContainer(
            [in] String oldId,
            [in] String newId,
            [out] Int32* result);

        /**
         * Enables / disables USB mass storage. The caller should check actual
         * status of enabling/disabling USB mass storage via StorageEventListener.
         */
        SetUsbMassStorageEnabled(
            [in] Boolean value);

        /**
         * Shuts down the MountService and gracefully unmounts all external media.
         * Invokes call back once the shutdown is complete.
         */
        Shutdown(
            [in] IIMountShutdownObserver* observer);

        /**
         * Unmounts an Opaque Binary Blob (OBB). When the force flag is specified,
         * any program using it will be forcibly killed to unmount the image.
         * MountService will call back to the supplied IObbActionListener to inform
         * it of the terminal state of the call.
         */
        UnmountObb(
            [in] String rawPath,
            [in] Boolean force,
            [in] IObbActionListener* token,
            [in] Int32 nonce);

        /*
         * Unount a secure container. Returns an Int32 consistent with
         * MountServiceResultCode
         */
        UnmountSecureContainer(
            [in] String id,
            [in] Boolean force,
            [out] Int32* result);

        /**
         * Safely unmount external storage at given mount point. The unmount is an
         * asynchronous operation. Applications should register StorageEventListener
         * for storage related status changes.
         */
        UnmountVolume(
            [in] String mountPoint,
            [in] Boolean force,
            [in] Boolean removeEncryption);

        /**
         * Unregisters an IMountServiceListener
         */
        UnregisterListener(
            [in] IMountServiceListener* listener);

        /**
         * Returns whether or not the external storage is emulated.
         */
        IsExternalStorageEmulated(
            [out] Boolean* result);

        /**
         * Determines the encryption state of the volume.
         * @return a numerical value. See {@code ENCRYPTION_STATE_*} for possible values.
         */
        GetEncryptionState(
            [out] Int32* result);

        /**
         * Decrypts any encrypted volumes.
         */
        DecryptStorage(
            [in] String password,
            [out] Int32* result);

        /**
         * Encrypts storage.
         */
        EncryptStorage(
            [in] Int32 type,
            [in] String password,
            [out] Int32* result);

        /**
         * Changes the encryption password.
         */
        ChangeEncryptionPassword(
            [in] Int32 type,
            [in] String password,
            [out] Int32* result);

        /**
         * Verify the encryption password against the stored volume.  This method
         * may only be called by the system process.
         */
        VerifyEncryptionPassword(
            [in] String password,
            [out] Int32* result);

        /**
         * Returns list of all mountable volumes.
         */
        GetVolumeList(
            [out, callee] ArrayOf<IStorageVolume*>* result);

        /**
         * Gets the path on the filesystem for the ASEC container itself.
         *
         * @param cid ASEC container ID
         * @return path to filesystem or {@code null} if it's not found
         * @throws RemoteException
         */
        GetSecureContainerFilesystemPath(
            [in] String cid,
            [out] String* result);

        /*
         * Fix permissions in a container which has just been created and populated.
         * Returns an Int32 consistent with MountServiceResultCode
         */
        FixPermissionsSecureContainer(
            [in] String id,
            [in] Int32 gid,
            [in] String filename,
            [out] Int32* result);

        /**
         * Ensure that all directories along given path exist, creating parent
         * directories as needed. Validates that given path is absolute and that it
         * contains no relative "." or ".." paths or symlinks. Also ensures that
         * path belongs to a volume managed by vold, and that path is either
         * external storage data or OBB directory belonging to calling app.
         */
        Mkdirs(
            [in] String callingPkg,
            [in] String path,
            [out] Int32* result);

        /**
         * Determines the type of the encryption password
         * @return PasswordType
         */
        GetPasswordType(
            [out] Int32* result);

        /**
         * Get password from vold
         * @return password or empty string
         */
        GetPassword(
            [out] String* result);

        /**
         * Securely clear password from vold
         */
        ClearPassword();

        /**
         * Set a field in the crypto header.
         * @param field field to set
         * @param contents contents to set in field
         */
        SetField(
            [in] String field,
            [in] String contents);

        /**
         * Gets a field from the crypto header.
         * @param field field to get
         * @return contents of field
         */
        GetField(
            [in] String field,
            [out] String* result);

        ResizeSecureContainer(
            [in] String id,
            [in] Int32 sizeMb,
            [in] String key,
            [out] Int32* result);

        /**
         * Report the time of the last maintenance operation such as fstrim.
         * @return Timestamp of the last maintenance operation, in the
         *     System.currentTimeMillis() time base
         * @throws RemoteException
         */
        LastMaintenance(
            [out] Int64* timestamp);

        /**
         * Kick off an immediate maintenance operation
         * @throws RemoteException
         */
        RunMaintenance();
    }

    }//namespace Storage
    }//namespace Os
    }//namespace Droid
    }//namespace Elastos
}

