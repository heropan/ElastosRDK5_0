module {

    interface Elastos.Droid.Net.IUri;

    namespace Elastos {
    namespace Droid {
    namespace Provider {

    /**
     * The contract between the voicemail provider and applications. Contains
     * definitions for the supported URIs and columns.
     *
     * <P>The content providers exposes two tables through this interface:
     * <ul>
     *   <li> Voicemails table: This stores the actual voicemail records. The
     *   columns and URIs for accessing this table are defined by the
     *   {@link Voicemails} class.
     *   </li>
     *   <li> Status table: This provides a way for the voicemail source application
     *   to convey its current state to the system. The columns and URIS for
     *   accessing this table are defined by the {@link Status} class.
     *   </li>
     * </ul>
     *
     * <P> The minimum permission needed to access this content provider is
     * {@link Manifest.permission#ADD_VOICEMAIL}
     *
     * <P>Voicemails are inserted by what is called as a "voicemail source"
     * application, which is responsible for syncing voicemail data between a remote
     * server and the local voicemail content provider. "voicemail source"
     * application should always set the {@link #PARAM_KEY_SOURCE_PACKAGE} in the
     * URI to identify its package.
     *
     * <P>In addition to the {@link ContentObserver} notifications the voicemail
     * provider also generates broadcast intents to notify change for applications
     * that are not active and therefore cannot listen to ContentObserver
     * notifications. Broadcast intents with following actions are generated:
     * <ul>
     *   <li> {@link #ACTION_NEW_VOICEMAIL} is generated for each new voicemail
     *   inserted.
     *   </li>
     *   <li> {@link Intent#ACTION_PROVIDER_CHANGED} is generated for any change
     *    made into the database, including new voicemail.
     *   </li>
     * </ul>
     */
    interface IVoicemailContract {

        /** The authority used by the voicemail provider. */
        const String AUTHORITY = "com.android.voicemail";
        /**
         * Parameter key used in the URI to specify the voicemail source package name.
         * <p> This field must be set in all requests that originate from a voicemail source.
         */
        const String PARAM_KEY_SOURCE_PACKAGE = "source_package";

        /** Broadcast intent when a new voicemail record is inserted. */
        //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
        const String ACTION_NEW_VOICEMAIL = "android.intent.action.NEW_VOICEMAIL";

        /**
         * Broadcast intent to request a voicemail source to fetch voicemail content of a specific
         * voicemail from the remote server. The voicemail to fetch is specified by the data uri
         * of the intent.
         * <p>
         * All voicemail sources are expected to handle this event. After storing the content
         * the application should also set {@link Voicemails#HAS_CONTENT} to 1;
         */
        //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
        const String ACTION_FETCH_VOICEMAIL = "android.intent.action.FETCH_VOICEMAIL";

        /**
         * Extra included in {@link Intent#ACTION_PROVIDER_CHANGED} broadcast intents to indicate if the
         * receiving package made this change.
         */
        const String EXTRA_SELF_CHANGE = "com.android.voicemail.extra.SELF_CHANGE";

        /**
         * Name of the source package field, which must be same across all voicemail related tables.
         * This is an internal field.
         * @hide
         */
        const String SOURCE_PACKAGE_FIELD = "source_package";
    }

    /** Defines fields exposed through the /voicemail path of this content provider. */
    /**
     * @Involve
     * interface IBaseColumns;
     * interface IOpenableColumns;
     */
    interface IVoicemails {

        /** The MIME type for a collection of voicemails. */
        const String DIR_TYPE = "vnd.android.cursor.dir/voicemails";

        /** The MIME type for a single voicemail. */
        const String ITEM_TYPE = "vnd.android.cursor.item/voicemail";

        /**
         * Phone number of the voicemail sender.
         * <P>Type: TEXT</P>
         */
        const String NUMBER = "number";//Calls.NUMBER;
        /**
         * The date the voicemail was sent, in milliseconds since the epoch
         * <P>Type: INTEGER (long)</P>
         */
        const String DATE = "date";//Calls.DATE;
        /**
         * The duration of the voicemail in seconds.
         * <P>Type: INTEGER (long)</P>
         */
        const String DURATION = "duration";//Calls.DURATION;
        /**
         * Whether this item has been read or otherwise consumed by the user.
         * <P>Type: INTEGER (boolean)</P>
         */
        const String IS_READ = "is_read";//Calls.IS_READ;
        /**
         * The mail box state of the voicemail. This field is currently not used by the system.
         * <P> Possible values: {@link #STATE_INBOX}, {@link #STATE_DELETED},
         * {@link #STATE_UNDELETED}.
         * <P>Type: INTEGER</P>
         * @hide
         */
        const String STATE = "state";
        /**
         * Value of {@link #STATE} when the voicemail is in inbox.
         * @hide
         */
        const Int32 STATE_INBOX = 0;
        /**
         * Value of {@link #STATE} when the voicemail has been marked as deleted.
         * @hide
         */
        const Int32 STATE_DELETED = 1;
        /**
         * Value of {@link #STATE} when the voicemail has marked as undeleted.
         * @hide
         */
        const Int32 STATE_UNDELETED = 2;
        /**
         * Package name of the source application that inserted the voicemail.
         * <P>Type: TEXT</P>
         */
        const String SOURCE_PACKAGE = "source_package";//SOURCE_PACKAGE_FIELD;
        /**
         * Application-specific data available to the source application that
         * inserted the voicemail. This is typically used to store the source
         * specific message id to identify this voicemail on the remote
         * voicemail server.
         * <P>Type: TEXT</P>
         * <P> Note that this is NOT the voicemail media content data.
         */
        const String SOURCE_DATA = "source_data";
        /**
         * Whether the media content for this voicemail is available for
         * consumption.
         * <P>Type: INTEGER (boolean)</P>
         */
        const String HAS_CONTENT = "has_content";
        /**
         * MIME type of the media content for the voicemail.
         * <P>Type: TEXT</P>
         */
        const String MIME_TYPE = "mime_type";
        /**
         * The transcription of the voicemail entry. This will only be populated if the voicemail
         * entry has a valid transcription.
         * <P>Type: TEXT</P>
         */
        const String TRANSCRIPTION = "transcription";
        /**
         * Path to the media content file. Internal only field.
         * @hide
         */
        const String _DATA = "_data";

        /**
         * A convenience method to build voicemail URI specific to a source package by appending
         * {@link VoicemailContract#PARAM_KEY_SOURCE_PACKAGE} param to the base URI.
         */
        BuildSourceUri(
            [in] String packageName,
            [out] IUri** uri);

        GetCONTENT_URI(
            [out] IUri** uri);
    }

    /** Defines fields exposed through the /status path of this content provider. */
    /**
     * @Involve
     * interface IBaseColumns;
     * interface IOpenableColumns;
     */
    interface IVoicemailContractStatus {

        /** The MIME type for a collection of voicemail source statuses. */
        const String DIR_TYPE = "vnd.android.cursor.dir/voicemail.source.status";

        /** The MIME type for a single voicemail source status entry. */
        const String ITEM_TYPE = "vnd.android.cursor.item/voicemail.source.status";

        /**
         * The package name of the voicemail source. There can only be a one entry per source.
         * <P>Type: TEXT</P>
         */
        const String SOURCE_PACKAGE = "source_package";//SOURCE_PACKAGE_FIELD;
        /**
         * The URI to call to invoke source specific voicemail settings screen. On a user request
         * to setup voicemail an intent with action VIEW with this URI will be fired by the system.
         * <P>Type: TEXT</P>
         */
        const String SETTINGS_URI = "settings_uri";
        /**
         * The URI to call when the user requests to directly access the voicemail from the remote
         * server. In case of an IVR voicemail system this is typically set to the the voicemail
         * number specified using a tel:/ URI.
         * <P>Type: TEXT</P>
         */
        const String VOICEMAIL_ACCESS_URI = "voicemail_access_uri";
        /**
         * The configuration state of the voicemail source.
         * <P> Possible values:
         * {@link #CONFIGURATION_STATE_OK},
         * {@link #CONFIGURATION_STATE_NOT_CONFIGURED},
         * {@link #CONFIGURATION_STATE_CAN_BE_CONFIGURED}
         * <P>Type: INTEGER</P>
         */
        const String CONFIGURATION_STATE = "configuration_state";
        /** Value of {@link #CONFIGURATION_STATE} to indicate an all OK configuration status. */
        const Int32 CONFIGURATION_STATE_OK = 0;
        /**
         * Value of {@link #CONFIGURATION_STATE} to indicate the visual voicemail is not
         * yet configured on this device.
         */
        const Int32 CONFIGURATION_STATE_NOT_CONFIGURED = 1;
        /**
         * Value of {@link #CONFIGURATION_STATE} to indicate the visual voicemail is not
         * yet configured on this device but can be configured by the user.
         * <p> This state must be used when the source has verified that the current user can be
         * upgraded to visual voicemail and would like to show a set up invitation message.
         */
        const Int32 CONFIGURATION_STATE_CAN_BE_CONFIGURED = 2;
        /**
         * The data channel state of the voicemail source. This the channel through which the source
         * pulls voicemail data from a remote server.
         * <P> Possible values:
         * {@link #DATA_CHANNEL_STATE_OK},
         * {@link #DATA_CHANNEL_STATE_NO_CONNECTION}
         * </P>
         * <P>Type: INTEGER</P>
         */
        const String DATA_CHANNEL_STATE = "data_channel_state";
        /**
         *  Value of {@link #DATA_CHANNEL_STATE} to indicate that data channel is working fine.
         */
        const Int32 DATA_CHANNEL_STATE_OK = 0;
        /**
         * Value of {@link #DATA_CHANNEL_STATE} to indicate that data channel connection is not
         * working.
         */
        const Int32 DATA_CHANNEL_STATE_NO_CONNECTION = 1;
        /**
         * The notification channel state of the voicemail source. This is the channel through which
         * the source gets notified of new voicemails on the remote server.
         * <P> Possible values:
         * {@link #NOTIFICATION_CHANNEL_STATE_OK},
         * {@link #NOTIFICATION_CHANNEL_STATE_NO_CONNECTION},
         * {@link #NOTIFICATION_CHANNEL_STATE_MESSAGE_WAITING}
         * </P>
         * <P>Type: INTEGER</P>
         */
        const String NOTIFICATION_CHANNEL_STATE = "notification_channel_state";
        /**
         * Value of {@link #NOTIFICATION_CHANNEL_STATE} to indicate that the notification channel is
         * working fine.
         */
        const Int32 NOTIFICATION_CHANNEL_STATE_OK = 0;
        /**
         * Value of {@link #NOTIFICATION_CHANNEL_STATE} to indicate that the notification channel
         * connection is not working.
         */
        const Int32 NOTIFICATION_CHANNEL_STATE_NO_CONNECTION = 1;
        /**
         * Value of {@link #NOTIFICATION_CHANNEL_STATE} to indicate that there are messages waiting
         * on the server but the details are not known.
         * <p> Use this state when the notification can only tell that there are pending messages on
         * the server but no details of the sender/time etc are known.
         */
        const Int32 NOTIFICATION_CHANNEL_STATE_MESSAGE_WAITING = 2;

        /**
         * A convenience method to build status URI specific to a source package by appending
         * {@link VoicemailContract#PARAM_KEY_SOURCE_PACKAGE} param to the base URI.
         */
        BuildSourceUri(
            [in] String packageName,
            [out] IUri** uri);

        GetCONTENT_URI(
            [out] IUri** uri);
    }

    } // namespace Provider
    } // namespace Droid
    } // namespace Elastos
}