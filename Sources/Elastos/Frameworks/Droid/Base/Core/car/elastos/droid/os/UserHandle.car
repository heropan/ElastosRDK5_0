module
{
    namespace Elastos {
    namespace Droid {
    namespace Os {

    /**
     * @Involve
     * interface IParcelable
     */
    interface IUserHandle {
        /**
         * @hide Range of uids allocated for a user.
         */
        const Int32 PER_USER_RANGE = 100000;

        /** @hide A user id to indicate all users on the device */
        const Int32 USER_ALL = -1;

        /** @hide A user id to indicate the currently active user */
        const Int32 USER_CURRENT = -2;

        /** @hide A user id to indicate that we would like to send to the current
         *  user, but if this is calling from a user process then we will send it
         *  to the caller's user instead of failing wiht a security exception */
        const Int32 USER_CURRENT_OR_SELF = -3;

        /** @hide An undefined user id */
        const Int32 USER_NULL = -10000;

        /** @hide A user id constant to indicate the "owner" user of the device */
        const Int32 USER_OWNER = 0;

        /**
         * @hide Enable multi-user related side effects. Set this to false if
         * there are problems with single user use-cases.
         */
        const Boolean MU_ENABLED = TRUE;

        GetIdentifier(
            [out] Int32* id);

        ToString(
            [out] String* str);

        Equals(
            [in] IInterface* other,
            [out] Boolean* equals);

        Equals(
            [in] IUserHandle* other,
            [out] Boolean* equals);

        GetHashCode(
            [out] Int32* hash);
    }

    [local]
    interface IUserHandleHelper {
        /**
         * Checks to see if the user id is the same for the two uids, i.e., they belong to the same
         * user.
         * @hide
         */
        IsSameUser(
            [in] Int32 uid1,
            [in] Int32 uid2,
            [out] Boolean* isSameUser);

        /**
         * Checks to see if both uids are referring to the same app id, ignoring the user id part of the
         * uids.
         * @param uid1 uid to compare
         * @param uid2 other uid to compare
         * @return whether the appId is the same for both uids
         * @hide
         */
        IsSameApp(
            [in] Int32 uid1,
            [in] Int32 uid2,
            [out] Boolean* isSameApp);

        IsIsolated(
            [in] Int32 uid,
            [out] Boolean* isIsolated);

        IsApp(
            [in] Int32 uid,
            [out] Boolean* isApp);

        /**
         * Returns the user id for a given uid.
         * @hide
         */
        GetUserId(
            [in] Int32 uid,
            [out] Int32* userId);

        GetCallingUserId(
            [out] Int32* userId);

        /**
         * Returns the uid that is composed from the userId and the appId.
         * @hide
         */
        GetUid(
            [in] Int32 userId,
            [in] Int32 appId,
            [out] Int32* uid);

        /**
         * Returns the app id (or base uid) for a given uid, stripping out the user id from it.
         * @hide
         */
        GetAppId(
            [in] Int32 uid,
            [out] Int32* appId);

        /**
         * Returns the shared app gid for a given uid or appId.
         * @hide
         */
        GetSharedAppGid(
            [in] Int32 id,
            [out] Int32* appGid);

        /**
         * Returns the user id of the current process
         * @return user id of the current process
         * @hide
         */
        GetMyUserId(
            [out] Int32* myUserId);

        /**
         * Read a UserHandle from a Parcel that was previously written
         * with {@link #writeToParcel(UserHandle, Parcel)}, returning either
         * a null or new object as appropriate.
         *
         * @param in The Parcel from which to read the UserHandle
         * @return Returns a new UserHandle matching the previously written
         * object, or null if a null had been written.
         *
         * @see #writeToParcel(UserHandle, Parcel)
         */
        ReadFromParcel(
            [in] IParcel* parcel,
            [out] IUserHandle** h);

        /**
         * Write a UserHandle to a Parcel, handling null pointers.  Must be
         * read with {@link #readFromParcel(Parcel)}.
         *
         * @param h The UserHandle to be written.
         * @param out The Parcel in which the UserHandle will be placed.
         *
         * @see #readFromParcel(Parcel)
         */
        WriteToParcel(
            [in] IUserHandle* h,
            [in] IParcel* parcel);

        /** @hide A user handle to indicate all users on the device */
        GetALL(
            [out] IUserHandle** h);

        /** @hide A user handle to indicate the current user of the device */
        GetCURRENT(
            [out] IUserHandle** h);

        /** @hide A user handle to indicate that we would like to send to the current
         *  user, but if this is calling from a user process then we will send it
         *  to the caller's user instead of failing wiht a security exception */
        GetCURRENT_OR_SELF(
            [out] IUserHandle** h);

        /** @hide A user handle to indicate the primary/owner user of the device */
        GetOWNER(
            [out] IUserHandle** h);
    }

    } // namespace Os
    } // namespace Droid
    } // namespace Elastos

} // module
