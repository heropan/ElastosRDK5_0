module
{
    interface Elastos.Droid.Content.IIntent;

    namespace Elastos {
    namespace Droid {
    namespace Widget {

    /**
     * An interface for an adapter between a remote collection view (ListView, GridView, etc) and
     * the underlying data for that view.  The implementor is responsible for making a RemoteView
     * for each item in the data set. This interface is a thin wrapper around {@link Adapter}.
     *
     * @see android.widget.Adapter
     * @see android.appwidget.AppWidgetManager
     */

    interface IRemoteViewsFactory {
        /**
         * Called when your factory is first constructed. The same factory may be shared across
         * multiple RemoteViewAdapters depending on the intent passed.
         */
        OnCreate();

        /**
         * Called when notifyDataSetChanged() is triggered on the remote adapter. This allows a
         * RemoteViewsFactory to respond to data changes by updating any internal references.
         *
         * Note: expensive tasks can be safely performed synchronously within this method. In the
         * interim, the old data will be displayed within the widget.
         *
         * @see android.appwidget.AppWidgetManager#notifyAppWidgetViewDataChanged(Int32[], Int32)
         */
        OnDataSetChanged();

        /**
         * Called when the last RemoteViewsAdapter that is associated with this factory is
         * unbound.
         */
        OnDestroy();

        /**
         * See {@link Adapter#getCount()}
         *
         * @return Count of items.
         */
        GetCount(
            [out] Int32* count);

        /**
         * See {@link Adapter#getView(Int32, android.view.View, android.view.ViewGroup)}.
         *
         * Note: expensive tasks can be safely performed synchronously within this method, and a
         * loading view will be displayed in the interim. See {@link #getLoadingView()}.
         *
         * @param position The position of the item within the Factory's data set of the item whose
         *        view we want.
         * @return A RemoteViews object corresponding to the data at the specified position.
         */
        GetViewAt(
            [in] Int32 position,
            [out] IParcelable** view);

        /**
         * This allows for the use of a custom loading view which appears between the time that
         * {@link #getViewAt(Int32)} is called and returns. If null is returned, a default loading
         * view will be used.
         *
         * @return The RemoteViews representing the desired loading view.
         */
        GetLoadingView(
            [out] IParcelable** view);

        /**
         * See {@link Adapter#getViewTypeCount()}.
         *
         * @return The number of types of Views that will be returned by this factory.
         */
        GetViewTypeCount(
            [out] Int32* count);

        /**
         * See {@link Adapter#getItemId(Int32)}.
         *
         * @param position The position of the item within the data set whose row id we want.
         * @return The id of the item at the specified position.
         */
        GetItemId(
            [in] Int32 position,
            [out] Int64* id);

        /**
         * See {@link Adapter#hasStableIds()}.
         *
         * @return True if the same id always refers to the same object.
         */
        HasStableIds(
            [out] Boolean* res);
    }

    /**
     * @Involve
     * interface Elastos.Droid.App.IService
     */
    [local]
    interface IRemoteViewsService {
        /**
         * To be implemented by the derived service to generate appropriate factories for
         * the data.
         */
        OnGetViewFactory(
            [in] IIntent* intent,
            [out] IRemoteViewsFactory** factory);
    }

    } // namespace Widget
    } // namespace Droid
    } // namespace Elastos
}
