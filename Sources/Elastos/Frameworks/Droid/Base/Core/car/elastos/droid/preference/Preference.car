
module
{
    interface Elastos.Droid.Content.Res.ITypedArray;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.View.IView;
    interface Elastos.Utility.ISet;
    interface Elastos.Droid.Preference.IPreferenceManager;
    interface Elastos.Droid.Content.ISharedPreferences;
    interface Elastos.Droid.Content.ISharedPreferencesEditor;
    interface Elastos.Droid.Preference.IPreference;
    interface Elastos.Droid.View.IViewGroup;
    interface Elastos.Core.ICharSequence;
    interface Elastos.Droid.Preference.IPreferenceScreen;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Graphics.Drawable.IDrawable;
    interface Elastos.Droid.View.IKeyEvent;

    namespace Elastos {
    namespace Droid {
    namespace Preference {

    /**
     * Interface definition for a callback to be invoked when the value of this
     * {@link Preference} has been changed by the user and is
     * about to be set and/or persisted.  This gives the client a chance
     * to prevent setting and/or persisting the value.
     */
    interface IPreferenceOnPreferenceChangeListener {
        /**
         * Called when a Preference has been changed by the user. This is
         * called before the state of the Preference is about to be updated and
         * before the state is persisted.
         *
         * @param preference The changed Preference.
         * @param newValue The new value of the Preference.
         * @return True to update the state of the Preference with the new value.
         */
        OnPreferenceChange(
            [in] IPreference* preference,
            [in] IInterface* newValue,
            [out] Boolean* result);
    }

    /**
     * Interface definition for a callback to be invoked when a {@link Preference} is
     * clicked.
     */
    interface IPreferenceOnPreferenceClickListener
    {
        /**
         * Called when a Preference has been clicked.
         *
         * @param preference The Preference that was clicked.
         * @return True if the click was handled.
         */
        OnPreferenceClick(
            [in] IPreference* preference,
            [out] Boolean* result);
    }

    /**
     * Interface definition for a callback to be invoked when this
     * {@link Preference} is changed or, if this is a group, there is an
     * addition/removal of {@link Preference}(s). This is used internally.
     */
    interface IPreferenceOnPreferenceChangeInternalListener {
        /**
         * Called when this Preference has changed.
         *
         * @param preference This preference.
         */
        OnPreferenceChange(
            [in] IPreference* preference);

        /**
         * Called when this group has added/removed {@link Preference}(s).
         *
         * @param preference This Preference.
         */
        OnPreferenceHierarchyChange(
            [in] IPreference* preference);
    }

    /**
     * Represents the basic Preference UI building
     * block displayed by a {@link PreferenceActivity} in the form of a
     * {@link ListView}. This class provides the {@link View} to be displayed in
     * the activity and associates with a {@link SharedPreferences} to
     * store/retrieve the preference data.
     * <p>
     * When specifying a preference hierarchy in XML, each element can point to a
     * subclass of {@link Preference}, similar to the view hierarchy and layouts.
     * <p>
     * This class contains a {@code key} that will be used as the key into the
     * {@link SharedPreferences}. It is up to the subclass to decide how to store
     * the value.
     *
     * <div class="special reference">
     * <h3>Developer Guides</h3>
     * <p>For information about building a settings UI with Preferences,
     * read the <a href="{@docRoot}guide/topics/ui/settings.html">Settings</a>
     * guide.</p>
     * </div>
     *
     * @attr ref android.R.styleable#Preference_icon
     * @attr ref android.R.styleable#Preference_key
     * @attr ref android.R.styleable#Preference_title
     * @attr ref android.R.styleable#Preference_summary
     * @attr ref android.R.styleable#Preference_order
     * @attr ref android.R.styleable#Preference_fragment
     * @attr ref android.R.styleable#Preference_layout
     * @attr ref android.R.styleable#Preference_widgetLayout
     * @attr ref android.R.styleable#Preference_enabled
     * @attr ref android.R.styleable#Preference_selectable
     * @attr ref android.R.styleable#Preference_dependency
     * @attr ref android.R.styleable#Preference_persistent
     * @attr ref android.R.styleable#Preference_defaultValue
     * @attr ref android.R.styleable#Preference_shouldDisableView
     */
    /**
     * @Involved
     * interface IComparable
     */
     [deprecated, local]
    interface IPreference {
        /**
         * Specify for {@link #setOrder(int)} if a specific order is not required.
         */
        const Int32 DEFAULT_ORDER = 0x7fffffff;

        /**
         * Called when a Preference is being inflated and the default value
         * attribute needs to be read. Since different Preference types have
         * different value types, the subclass should get and return the default
         * value which will be its value type.
         * <p>
         * For example, if the value type is String, the body of the method would
         * proxy to {@link TypedArray#getString(int)}.
         *
         * @param a The set of attributes.
         * @param index The index of the default value attribute.
         * @return The default value of this preference type.
         */
        OnGetDefaultValue(
            [in] ITypedArray* a,
            [in] Int32 index,
            [out] IInterface** value);

        /**
             * Sets an {@link Intent} to be used for
             * {@link Context#startActivity(Intent)} when this Preference is clicked.
             *
             * @param intent The intent associated with this Preference.
             */
        SetIntent(
            [in] IIntent* intent);

        /**
             * Return the {@link Intent} associated with this Preference.
             *
             * @return The {@link Intent} last set via {@link #setIntent(Intent)} or XML.
             */
        GetIntent(
            [out] IIntent** result);

        /**
             * Sets the class name of a fragment to be shown when this Preference is clicked.
             *
             * @param fragment The class name of the fragment associated with this Preference.
             */
        SetFragment(
            [in] String fragment);

        /**
             * Return the fragment class name associated with this Preference.
             *
             * @return The fragment class name last set via {@link #setFragment} or XML.
             */
        GetFragment(
            [out] String* result);

        /**
             * Return the extras Bundle object associated with this preference, creating
             * a new Bundle if there currently isn't one.  You can use this to get and
             * set individual extra key/value pairs.
             */
        GetExtras(
            [out] IBundle** result);

        /**
             * Return the extras Bundle object associated with this preference,
             * returning null if there is not currently one.
             */
        PeekExtras(
            [out] IBundle** result);

        /**
             * Sets the layout resource that is inflated as the {@link View} to be shown
             * for this Preference. In most cases, the default layout is sufficient for
             * custom Preference objects and only the widget layout needs to be changed.
             * <p>
             * This layout should contain a {@link ViewGroup} with ID
             * {@link android.R.id#widget_frame} to be the parent of the specific widget
             * for this Preference. It should similarly contain
             * {@link android.R.id#title} and {@link android.R.id#summary}.
             *
             * @param layoutResId The layout resource ID to be inflated and returned as
             *            a {@link View}.
             * @see #setWidgetLayoutResource(int)
             */
        SetLayoutResource(
            [in] Int32 layoutResId);

        /**
             * Gets the layout resource that will be shown as the {@link View} for this Preference.
             *
             * @return The layout resource ID.
             */
        GetLayoutResource(
            [out] Int32* result);

        /**
             * Sets the layout for the controllable widget portion of this Preference. This
             * is inflated into the main layout. For example, a {@link CheckBoxPreference}
             * would specify a custom layout (consisting of just the CheckBox) here,
             * instead of creating its own main layout.
             *
             * @param widgetLayoutResId The layout resource ID to be inflated into the
             *            main layout.
             * @see #setLayoutResource(int)
             */
        SetWidgetLayoutResource(
            [in] Int32 widgetLayoutResId);

        /**
             * Gets the layout resource for the controllable widget portion of this Preference.
             *
             * @return The layout resource ID.
             */
        GetWidgetLayoutResource(
            [out] Int32* result);

        /**
             * Gets the View that will be shown in the {@link PreferenceActivity}.
             *
             * @param convertView The old View to reuse, if possible. Note: You should
             *            check that this View is non-null and of an appropriate type
             *            before using. If it is not possible to convert this View to
             *            display the correct data, this method can create a new View.
             * @param parent The parent that this View will eventually be attached to.
             * @return Returns the same Preference object, for chaining multiple calls
             *         into a single statement.
             * @see #onCreateView(ViewGroup)
             * @see #onBindView(View)
             */
        GetView(
            [in] IView* convertView,
            [in] IViewGroup* parent,
            [out] IView** result);

        /**
         * Creates the View to be shown for this Preference in the
         * {@link PreferenceActivity}. The default behavior is to inflate the main
         * layout of this Preference (see {@link #setLayoutResource(Int32)}. If
         * changing this behavior, please specify a {@link ViewGroup} with ID
         * {@link android.R.id#widget_frame}.
         * <p>
         * Make sure to call through to the superclass's implementation.
         *
         * @param parent The parent that this View will eventually be attached to.
         * @return The View that displays this Preference.
         * @see #onBindView(View)
         */
        OnCreateView(
            [in] IViewGroup* parent,
            [out] IView** view);

        /**
         * Binds the created View to the data for this Preference.
         * <p>
         * This is a good place to grab references to custom Views in the layout and
         * set properties on them.
         * <p>
         * Make sure to call through to the superclass's implementation.
         *
         * @param view The View that shows this Preference.
         * @see #onCreateView(ViewGroup)
         */
        OnBindView(
            [in] IView* view);

        /**
             * Sets the order of this Preference with respect to other
             * Preference objects on the same level. If this is not specified, the
             * default behavior is to sort alphabetically. The
             * {@link PreferenceGroup#setOrderingAsAdded(boolean)} can be used to order
             * Preference objects based on the order they appear in the XML.
             *
             * @param order The order for this Preference. A lower value will be shown
             *            first. Use {@link #DEFAULT_ORDER} to sort alphabetically or
             *            allow ordering from XML.
             * @see PreferenceGroup#setOrderingAsAdded(boolean)
             * @see #DEFAULT_ORDER
             */
        SetOrder(
            [in] Int32 order);

        /**
             * Gets the order of this Preference with respect to other Preference objects
             * on the same level.
             *
             * @return The order of this Preference.
             * @see #setOrder(int)
             */
        GetOrder(
            [out] Int32* result);

        /**
             * Sets the title for this Preference with a CharSequence.
             * This title will be placed into the ID
             * {@link android.R.id#title} within the View created by
             * {@link #onCreateView(ViewGroup)}.
             *
             * @param title The title for this Preference.
             */
        SetTitle(
            [in] ICharSequence* title);

        /**
             * Sets the title for this Preference with a resource ID.
             *
             * @see #setTitle(CharSequence)
             * @param titleResId The title as a resource ID.
             */
        SetTitle(
            [in] Int32 titleResId);

        /**
             * Returns the title resource ID of this Preference.  If the title did
             * not come from a resource, 0 is returned.
             *
             * @return The title resource.
             * @see #setTitle(int)
             */
        GetTitleRes(
            [out] Int32* result);

        /**
             * Returns the title of this Preference.
             *
             * @return The title.
             * @see #setTitle(CharSequence)
             */
        GetTitle(
            [out] ICharSequence** result);

        /**
             * Sets the icon for this Preference with a Drawable.
             * This icon will be placed into the ID
             * {@link android.R.id#icon} within the View created by
             * {@link #onCreateView(ViewGroup)}.
             *
             * @param icon The optional icon for this Preference.
             */
        SetIcon(
            [in] IDrawable* icon);

        /**
             * Sets the icon for this Preference with a resource ID.
             *
             * @see #setIcon(Drawable)
             * @param iconResId The icon as a resource ID.
             */
        SetIcon(
            [in] Int32 iconResId);

        /**
             * Returns the icon of this Preference.
             *
             * @return The icon.
             * @see #setIcon(Drawable)
             */
        GetIcon(
            [out] IDrawable** result);

        /**
             * Returns the summary of this Preference.
             *
             * @return The summary.
             * @see #setSummary(CharSequence)
             */
        GetSummary(
            [out] ICharSequence** result);

        /**
             * Sets the summary for this Preference with a CharSequence.
             *
             * @param summary The summary for the preference.
             */
        SetSummary(
            [in] ICharSequence* summary);

        /**
             * Sets the summary for this Preference with a resource ID.
             *
             * @see #setSummary(CharSequence)
             * @param summaryResId The summary as a resource.
             */
        SetSummary(
            [in] Int32 summaryResId);

        /**
             * Sets whether this Preference is enabled. If disabled, it will
             * not handle clicks.
             *
             * @param enabled Set true to enable it.
             */
        SetEnabled(
            [in] Boolean enabled);

        /**
             * Checks whether this Preference should be enabled in the list.
             *
             * @return True if this Preference is enabled, false otherwise.
             */
        IsEnabled(
            [out] Boolean* result);

        /**
             * Sets whether this Preference is selectable.
             *
             * @param selectable Set true to make it selectable.
             */
        SetSelectable(
            [in] Boolean selectable);

        /**
             * Checks whether this Preference should be selectable in the list.
             *
             * @return True if it is selectable, false otherwise.
             */
        IsSelectable(
            [out] Boolean* result);

        /**
             * Sets whether this Preference should disable its view when it gets
             * disabled.
             * <p>
             * For example, set this and {@link #setEnabled(boolean)} to false for
             * preferences that are only displaying information and 1) should not be
             * clickable 2) should not have the view set to the disabled state.
             *
             * @param shouldDisableView Set true if this preference should disable its view
             *            when the preference is disabled.
             */
        SetShouldDisableView(
            [in] Boolean shouldDisableView);

        /**
         * Checks whether this Preference should disable its view when it's action is disabled.
         * @see #setShouldDisableView(boolean)
         * @return True if it should disable the view.
         */
        GetShouldDisableView(
            [out] Boolean* result);

        /**
         * Returns a unique ID for this Preference.  This ID should be unique across all
         * Preference objects in a hierarchy.
         *
         * @return A unique ID for this Preference.
         */
        GetId(
            [out] Int64* id);

        /**
         * Processes a click on the preference. This includes saving the value to
         * the {@link SharedPreferences}. However, the overridden method should
         * call {@link #callChangeListener(Object)} to make sure the client wants to
         * update the preference's state with the new value.
         */
        OnClick();

        /**
         * Sets the key for this Preference, which is used as a key to the
         * {@link SharedPreferences}. This should be unique for the package.
         *
         * @param key The key for the preference.
         */
        SetKey(
            [in] String key);

        /**
             * Gets the key for this Preference, which is also the key used for storing
             * values into SharedPreferences.
             *
             * @return The key.
             */
        GetKey(
            [out] String* result);

        /**
         * Checks whether the key is present, and if it isn't throws an
         * exception. This should be called by subclasses that store preferences in
         * the {@link SharedPreferences}.
         *
         * @throws IllegalStateException If there is no key assigned.
         */
        RequireKey();

        /**
             * Checks whether this Preference has a valid key.
             *
             * @return True if the key exists and is not a blank string, false otherwise.
             */
        HasKey(
            [out] Boolean* result);

        /**
             * Checks whether this Preference is persistent. If it is, it stores its value(s) into
             * the persistent {@link SharedPreferences} storage.
             *
             * @return True if it is persistent.
             */
        IsPersistent(
            [out] Boolean* result);

        /**
         * Checks whether, at the given time this method is called,
         * this Preference should store/restore its value(s) into the
         * {@link SharedPreferences}. This, at minimum, checks whether this
         * Preference is persistent and it currently has a key. Before you
         * save/restore from the {@link SharedPreferences}, check this first.
         *
         * @return True if it should persist the value.
         */
        ShouldPersist(
            [out] Boolean* result);

        /**
             * Sets whether this Preference is persistent. When persistent,
             * it stores its value(s) into the persistent {@link SharedPreferences}
             * storage.
             *
             * @param persistent Set true if it should store its value(s) into the {@link SharedPreferences}.
             */
        SetPersistent(
            [in] Boolean persistent);

        /**
         * Call this method after the user changes the preference, but before the
         * internal state is set. This allows the client to ignore the user value.
         *
         * @param newValue The new value of this Preference.
         * @return True if the user value should be set as the preference
         *         value (and persisted).
         */
        CallChangeListener(
            [in] IInterface* newValue,
            [out] Boolean* result);

        /**
             * Sets the callback to be invoked when this Preference is changed by the
             * user (but before the internal state has been updated).
             *
             * @param onPreferenceChangeListener The callback to be invoked.
             */
        SetOnPreferenceChangeListener(
            [in] IPreferenceOnPreferenceChangeListener* onPreferenceChangeListener);

        /**
             * Returns the callback to be invoked when this Preference is changed by the
             * user (but before the internal state has been updated).
             *
             * @return The callback to be invoked.
             */
        GetOnPreferenceChangeListener(
            [out] IPreferenceOnPreferenceChangeListener** result);

        /**
             * Sets the callback to be invoked when this Preference is clicked.
             *
             * @param onPreferenceClickListener The callback to be invoked.
             */
        SetOnPreferenceClickListener(
            [in] IPreferenceOnPreferenceClickListener* onPreferenceClickListener);

        /**
             * Returns the callback to be invoked when this Preference is clicked.
             *
             * @return The callback to be invoked.
             */
        GetOnPreferenceClickListener(
            [out] IPreferenceOnPreferenceClickListener** result);

        /**
             * Called when a click should be performed.
             *
             * @param preferenceScreen A {@link PreferenceScreen} whose hierarchy click
             *            listener should be called in the proper order (between other
             *            processing). May be null.
             * @hide
             */
        PerformClick(
            [in] IPreferenceScreen* preferenceScreen);

        /**
             * Allows a Preference to intercept key events without having focus.
             * For example, SeekBarPreference uses this to intercept +/- to adjust
             * the progress.
             * @return True if the Preference handled the key. Returns false by default.
             * @hide
             */
        OnKey(
            [in] IView* v,
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* result);

        /**
             * Returns the {@link android.content.Context} of this Preference.
             * Each Preference in a Preference hierarchy can be
             * from different Context (for example, if multiple activities provide preferences into a single
             * {@link PreferenceActivity}). This Context will be used to save the Preference values.
             *
             * @return The Context of this Preference.
             */
        GetContext(
            [out] IContext** result);

        /**
             * Returns the {@link SharedPreferences} where this Preference can read its
             * value(s). Usually, it's easier to use one of the helper read methods:
             * {@link #getPersistedBoolean(boolean)}, {@link #getPersistedFloat(float)},
             * {@link #getPersistedInt(int)}, {@link #getPersistedLong(long)},
             * {@link #getPersistedString(String)}. To save values, see
             * {@link #getEditor()}.
             * <p>
             * In some cases, writes to the {@link #getEditor()} will not be committed
             * right away and hence not show up in the returned
             * {@link SharedPreferences}, this is intended behavior to improve
             * performance.
             *
             * @return The {@link SharedPreferences} where this Preference reads its
             *         value(s), or null if it isn't attached to a Preference hierarchy.
             * @see #getEditor()
             */
        GetSharedPreferences(
            [out] ISharedPreferences** result);

        /**
             * Returns an {@link SharedPreferences.Editor} where this Preference can
             * save its value(s). Usually it's easier to use one of the helper save
             * methods: {@link #persistBoolean(boolean)}, {@link #persistFloat(float)},
             * {@link #persistInt(int)}, {@link #persistLong(long)},
             * {@link #persistString(String)}. To read values, see
             * {@link #getSharedPreferences()}. If {@link #shouldCommit()} returns
             * true, it is this Preference's responsibility to commit.
             * <p>
             * In some cases, writes to this will not be committed right away and hence
             * not show up in the SharedPreferences, this is intended behavior to
             * improve performance.
             *
             * @return A {@link SharedPreferences.Editor} where this preference saves
             *         its value(s), or null if it isn't attached to a Preference
             *         hierarchy.
             * @see #shouldCommit()
             * @see #getSharedPreferences()
             */
        GetEditor(
            [out] ISharedPreferencesEditor** result);

        /**
             * Returns whether the {@link Preference} should commit its saved value(s) in
             * {@link #getEditor()}. This may return false in situations where batch
             * committing is being done (by the manager) to improve performance.
             *
             * @return Whether the Preference should commit its saved value(s).
             * @see #getEditor()
             */
        ShouldCommit(
            [out] Boolean* result);

        /**
         * Sets the internal change listener.
         *
         * @param listener The listener.
         * @see #notifyChanged()
         */
        SetOnPreferenceChangeInternalListener(
            [in] IPreferenceOnPreferenceChangeInternalListener* listener);

        /**
         * Should be called when the data of this {@link Preference} has changed.
         */
        NotifyChanged();

        /**
         * Should be called when a Preference has been
         * added/removed from this group, or the ordering should be
         * re-evaluated.
         */
        NotifyHierarchyChanged();

        /**
             * Gets the {@link PreferenceManager} that manages this Preference object's tree.
             *
             * @return The {@link PreferenceManager}.
             */
        GetPreferenceManager(
            [out] IPreferenceManager** result);

        /**
         * Called when this Preference has been attached to a Preference hierarchy.
         * Make sure to call the super implementation.
         *
         * @param preferenceManager The PreferenceManager of the hierarchy.
         */
        OnAttachedToHierarchy(
            [in] IPreferenceManager* preferenceManager);

        /**
         * Called when the Preference hierarchy has been attached to the
         * {@link PreferenceActivity}. This can also be called when this
         * Preference has been attached to a group that was already attached
         * to the {@link PreferenceActivity}.
         */
        OnAttachedToActivity();

        /**
         * Finds a Preference in this hierarchy (the whole thing,
         * even above/below your {@link PreferenceScreen} screen break) with the given
         * key.
         * <p>
         * This only functions after we have been attached to a hierarchy.
         *
         * @param key The key of the Preference to find.
         * @return The Preference that uses the given key.
         */
        FindPreferenceInHierarchy(
            [in] String key,
            [out] IPreference** pre);

        /**
             * Notifies any listening dependents of a change that affects the
             * dependency.
             *
             * @param disableDependents Whether this Preference should disable
             *            its dependents.
             */
        NotifyDependencyChange(
            [in] Boolean disableDependents);

        /**
             * Called when the dependency changes.
             *
             * @param dependency The Preference that this Preference depends on.
             * @param disableDependent Set true to disable this Preference.
             */
        OnDependencyChanged(
            [in] IPreference* dependency,
            [in] Boolean disableDependent);

        /**
             * Called when the implicit parent dependency changes.
             *
             * @param parent The Preference that this Preference depends on.
             * @param disableChild Set true to disable this Preference.
             */
        OnParentChanged(
            [in] IPreference* parent,
            [in] Boolean disableChild);

        /**
             * Checks whether this preference's dependents should currently be
             * disabled.
             *
             * @return True if the dependents should be disabled, otherwise false.
             */
        ShouldDisableDependents(
            [out] Boolean* result);

        /**
             * Sets the key of a Preference that this Preference will depend on. If that
             * Preference is not set or is off, this Preference will be disabled.
             *
             * @param dependencyKey The key of the Preference that this depends on.
             */
        SetDependency(
            [in] String dependencyKey);

        /**
             * Returns the key of the dependency on this Preference.
             *
             * @return The key of the dependency.
             * @see #setDependency(String)
             */
        GetDependency(
            [out] String* result);

        /**
         * Called when this Preference is being removed from the hierarchy. You
         * should remove any references to this Preference that you know about. Make
         * sure to call through to the superclass implementation.
         */
        OnPrepareForRemoval();

        /**
             * Sets the default value for this Preference, which will be set either if
             * persistence is off or persistence is on and the preference is not found
             * in the persistent storage.
             *
             * @param defaultValue The default value.
             */
        SetDefaultValue(
            [in] IInterface* defaultValue);

        /**
         * Implement this to set the initial value of the Preference.
         * <p>
         * If <var>restorePersistedValue</var> is true, you should restore the
         * Preference value from the {@link android.content.SharedPreferences}. If
         * <var>restorePersistedValue</var> is false, you should set the Preference
         * value to defaultValue that is given (and possibly store to SharedPreferences
         * if {@link #shouldPersist()} is true).
         * <p>
         * This may not always be called. One example is if it should not persist
         * but there is no default value given.
         *
         * @param restorePersistedValue True to restore the persisted value;
         *            false to use the given <var>defaultValue</var>.
         * @param defaultValue The default value for this Preference. Only use this
         *            if <var>restorePersistedValue</var> is false.
         */
        OnSetInitialValue(
            [in] Boolean restorePersistedValue,
            [in] IInterface* defaultValue);

        /**
         * Attempts to persist a String to the {@link android.content.SharedPreferences}.
         * <p>
         * This will check if this Preference is persistent, get an editor from
         * the {@link PreferenceManager}, put in the string, and check if we should commit (and
         * commit if so).
         *
         * @param value The value to persist.
         * @return True if the Preference is persistent. (This is not whether the
         *         value was persisted, since we may not necessarily commit if there
         *         will be a batch commit later.)
         * @see #getPersistedString(String)
         */
        PersistString(
            [in] String value,
            [out] Boolean* result);

        /**
         * Attempts to get a persisted String from the {@link android.content.SharedPreferences}.
         * <p>
         * This will check if this Preference is persistent, get the SharedPreferences
         * from the {@link PreferenceManager}, and get the value.
         *
         * @param defaultReturnValue The default value to return if either the
         *            Preference is not persistent or the Preference is not in the
         *            shared preferences.
         * @return The value from the SharedPreferences or the default return
         *         value.
         * @see #persistString(String)
         */
        GetPersistedString(
            [in] String defaultReturnValue,
            [out] String* str);

        /**
         * Attempts to persist a set of Strings to the {@link android.content.SharedPreferences}.
         * <p>
         * This will check if this Preference is persistent, get an editor from
         * the {@link PreferenceManager}, put in the strings, and check if we should commit (and
         * commit if so).
         *
         * @param values The values to persist.
         * @return True if the Preference is persistent. (This is not whether the
         *         value was persisted, since we may not necessarily commit if there
         *         will be a batch commit later.)
         * @see #getPersistedString(Set)
         *
         * @hide Pending API approval
         */
        PersistStringSet(
            [in] ISet* values,
            [out] Boolean* result);

        /**
         * Attempts to get a persisted set of Strings from the
         * {@link android.content.SharedPreferences}.
         * <p>
         * This will check if this Preference is persistent, get the SharedPreferences
         * from the {@link PreferenceManager}, and get the value.
         *
         * @param defaultReturnValue The default value to return if either the
         *            Preference is not persistent or the Preference is not in the
         *            shared preferences.
         * @return The value from the SharedPreferences or the default return
         *         value.
         * @see #persistStringSet(Set)
         *
         * @hide Pending API approval
         */
        GetPersistedStringSet(
            [in] ISet* defaultReturnValue,
            [out] ISet** pss);

        /**
         * Attempts to persist an int to the {@link android.content.SharedPreferences}.
         *
         * @param value The value to persist.
         * @return True if the Preference is persistent. (This is not whether the
         *         value was persisted, since we may not necessarily commit if there
         *         will be a batch commit later.)
         * @see #persistString(String)
         * @see #getPersistedInt(int)
         */
        PersistInt32(
            [in] Int32 value,
            [out] Boolean* result);

        /**
         * Attempts to get a persisted int from the {@link android.content.SharedPreferences}.
         *
         * @param defaultReturnValue The default value to return if either this
         *            Preference is not persistent or this Preference is not in the
         *            SharedPreferences.
         * @return The value from the SharedPreferences or the default return
         *         value.
         * @see #getPersistedString(String)
         * @see #persistInt(int)
         */
        GetPersistedInt32(
            [in] Int32 defaultReturnValue,
            [out] Int32* result);

        /**
         * Attempts to persist a float to the {@link android.content.SharedPreferences}.
         *
         * @param value The value to persist.
         * @return True if this Preference is persistent. (This is not whether the
         *         value was persisted, since we may not necessarily commit if there
         *         will be a batch commit later.)
         * @see #persistString(String)
         * @see #getPersistedFloat(float)
         */
        PersistFloat(
            [in] Float value,
            [out] Boolean* result);

        /**
         * Attempts to get a persisted float from the {@link android.content.SharedPreferences}.
         *
         * @param defaultReturnValue The default value to return if either this
         *            Preference is not persistent or this Preference is not in the
         *            SharedPreferences.
         * @return The value from the SharedPreferences or the default return
         *         value.
         * @see #getPersistedString(String)
         * @see #persistFloat(float)
         */
        GetPersistedFloat(
            [in] Float defaultReturnValue,
            [out] Float* f);

        /**
         * Attempts to persist a long to the {@link android.content.SharedPreferences}.
         *
         * @param value The value to persist.
         * @return True if this Preference is persistent. (This is not whether the
         *         value was persisted, since we may not necessarily commit if there
         *         will be a batch commit later.)
         * @see #persistString(String)
         * @see #getPersistedLong(long)
         */
        PersistInt64(
            [in] Int64 value,
            [out] Boolean* result);

        /**
         * Attempts to get a persisted long from the {@link android.content.SharedPreferences}.
         *
         * @param defaultReturnValue The default value to return if either this
         *            Preference is not persistent or this Preference is not in the
         *            SharedPreferences.
         * @return The value from the SharedPreferences or the default return
         *         value.
         * @see #getPersistedString(String)
         * @see #persistLong(long)
         */
        GetPersistedInt64(
            [in] Int64 defaultReturnValue,
            [out] Int64* l);

        /**
         * Attempts to persist a boolean to the {@link android.content.SharedPreferences}.
         *
         * @param value The value to persist.
         * @return True if this Preference is persistent. (This is not whether the
         *         value was persisted, since we may not necessarily commit if there
         *         will be a batch commit later.)
         * @see #persistString(String)
         * @see #getPersistedBoolean(boolean)
         */
        PersistBoolean(
            [in] Boolean value,
            [out] Boolean* result);

        /**
         * Attempts to get a persisted boolean from the {@link android.content.SharedPreferences}.
         *
         * @param defaultReturnValue The default value to return if either this
         *            Preference is not persistent or this Preference is not in the
         *            SharedPreferences.
         * @return The value from the SharedPreferences or the default return
         *         value.
         * @see #getPersistedString(String)
         * @see #persistBoolean(boolean)
         */
        GetPersistedBoolean(
            [in] Boolean defaultReturnValue,
            [out] Boolean* result);

        CanRecycleLayout(
            [out] Boolean* result);

        /**
         * Returns the text that will be used to filter this Preference depending on
         * user input.
         * <p>
         * If overridding and calling through to the superclass, make sure to prepend
         * your additions with a space.
         *
         * @return Text as a {@link StringBuilder} that will be used to filter this
         *         preference. By default, this is the title and summary
         *         (concatenated with a space).
         */
        GetFilterableString(
            [out] String* fsb);

        /**
             * Store this Preference hierarchy's frozen state into the given container.
             *
             * @param container The Bundle in which to save the instance of this Preference.
             *
             * @see #restoreHierarchyState
             * @see #onSaveInstanceState
             */
        SaveHierarchyState(
            [in] IBundle* container);

        /**
         * Called by {@link #saveHierarchyState} to store the instance for this Preference and its children.
         * May be overridden to modify how the save happens for children. For example, some
         * Preference objects may want to not store an instance for their children.
         *
         * @param container The Bundle in which to save the instance of this Preference.
         *
         * @see #saveHierarchyState
         * @see #onSaveInstanceState
         */
        DispatchSaveInstanceState(
            [in] IBundle* container);

        /**
         * Hook allowing a Preference to generate a representation of its internal
         * state that can later be used to create a new instance with that same
         * state. This state should only contain information that is not persistent
         * or can be reconstructed later.
         *
         * @return A Parcelable object containing the current dynamic state of
         *         this Preference, or null if there is nothing interesting to save.
         *         The default implementation returns null.
         * @see #onRestoreInstanceState
         * @see #saveHierarchyState
         */
        OnSaveInstanceState(
            [out] IParcelable** state);

        /**
             * Restore this Preference hierarchy's previously saved state from the given container.
             *
             * @param container The Bundle that holds the previously saved state.
             *
             * @see #saveHierarchyState
             * @see #onRestoreInstanceState
             */
        RestoreHierarchyState(
            [in] IBundle* container);

        /**
         * Called by {@link #restoreHierarchyState} to retrieve the saved state for this
         * Preference and its children. May be overridden to modify how restoring
         * happens to the children of a Preference. For example, some Preference objects may
         * not want to save state for their children.
         *
         * @param container The Bundle that holds the previously saved state.
         * @see #restoreHierarchyState
         * @see #onRestoreInstanceState
         */
        DispatchRestoreInstanceState(
            [in] IBundle* container);

        /**
         * Hook allowing a Preference to re-apply a representation of its internal
         * state that had previously been generated by {@link #onSaveInstanceState}.
         * This function will never be called with a null state.
         *
         * @param state The saved state that had previously been returned by
         *            {@link #onSaveInstanceState}.
         * @see #onSaveInstanceState
         * @see #restoreHierarchyState
         */
        OnRestoreInstanceState(
            [in] IParcelable* state);

    }

    /**
     * @Involve
     * interface IAbsSavedState
     * interface IParcelable
     */
    interface IPreferenceBaseSavedState {
        GetSuperState(
            [out] IParcelable** superState);
    }

    } // namespace Preference
    } // namespace Droid
    } // namespace Elastos
}

