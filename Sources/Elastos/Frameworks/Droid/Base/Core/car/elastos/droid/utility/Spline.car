
module
{
    namespace Elastos {
    namespace Droid {
    namespace Utility {

    interface ISpline {
        /**
         * Interpolates the value of Y = f(X) for given X.
         * Clamps X to the domain of the spline.
         *
         * @param x The X value.
         * @return The interpolated Y = f(X) value.
         */
        Interpolate(
            [in] Float x,
            [out] Float* result);
    }

    /**
     * Creates an appropriate spline based on the properties of the control points.
     *
     * If the control points are monotonic then the resulting spline will preserve that and
     * otherwise optimize for error bounds.
     */
    [deprecated]
    interface ISplineHelper {
        /**
         * Creates an appropriate spline based on the properties of the control points.
         *
         * If the control points are monotonic then the resulting spline will preserve that and
         * otherwise optimize for error bounds.
         */
        CreateSpline(
            [in] ArrayOf<Float>* x,
            [in] ArrayOf<Float>* y,
            [out] ISpline** spline);

        /**
         * Creates a monotone cubic spline from a given set of control points.
         *
         * The spline is guaranteed to pass through each control point exactly.
         * Moreover, assuming the control points are monotonic (Y is non-decreasing or
         * non-increasing) then the interpolated values will also be monotonic.
         *
         * This function uses the Fritsch-Carlson method for computing the spline parameters.
         * http://en.wikipedia.org/wiki/Monotone_cubic_interpolation
         *
         * @param x The X component of the control points, strictly increasing.
         * @param y The Y component of the control points, monotonic.
         * @return
         *
         * @throws IllegalArgumentException if the X or Y arrays are null, have
         * different lengths or have fewer than 2 values.
         * @throws IllegalArgumentException if the control points are not monotonic.
         */
        CreateMonotoneCubicSpline(
            [in] ArrayOf<Float>* x,
            [in] ArrayOf<Float>* y,
            [out] ISpline** spline);

        /**
         * Creates a linear spline from a given set of control points.
         *
         * Like a monotone cubic spline, the interpolated curve will be monotonic if the control points
         * are monotonic.
         *
         * @param x The X component of the control points, strictly increasing.
         * @param y The Y component of the control points.
         * @return
         *
         * @throws IllegalArgumentException if the X or Y arrays are null, have
         * different lengths or have fewer than 2 values.
         * @throws IllegalArgumentException if the X components of the control points are not strictly
         * increasing.
         */
        CreateLinearSpline(
            [in] ArrayOf<Float>* x,
            [in] ArrayOf<Float>* y,
            [out] ISpline** spline);
    }

    /**
     * @Involve
     * interface ISpline
     */
    interface IMonotoneCubicSpline {
    }

    /**
     * @Involve
     * interface ISpline
     */
    interface ILinearSpline {
    }

    } // namespace Utility
    } // namepsace Droid
    } // namespace Elastos
}
