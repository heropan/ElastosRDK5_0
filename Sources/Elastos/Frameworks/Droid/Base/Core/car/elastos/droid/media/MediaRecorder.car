
module
{
    interface Elastos.Droid.Media.IMediaRecorder;
    interface Elastos.Droid.Hardware.IHardwareCamera;
    interface Elastos.Droid.View.ISurface;
    interface Elastos.IO.IFileDescriptor;

    namespace Elastos {
    namespace Droid {
    namespace Media {

    interface IMediaRecorderAudioSource {
        /* Do not change these values without updating their counterparts
         * in system/core/include/system/audio.h!
         */

        const Int32 AUDIO_SOURCE_INVALID = -1;

        /** Default audio source **/
        const Int32 DEFAULT = 0;

        /** Microphone audio source */
        const Int32 MIC = 1;

        /** Voice call uplink (Tx) audio source */
        const Int32 VOICE_UPLINK = 2;

        /** Voice call downlink (Rx) audio source */
        const Int32 VOICE_DOWNLINK = 3;

        /** Voice call uplink + downlink audio source */
        const Int32 VOICE_CALL = 4;

        /** Microphone audio source with same orientation as camera if available, the main
         *  device microphone otherwise */
        const Int32 CAMCORDER = 5;

        /** Microphone audio source tuned for voice recognition if available, behaves like
         *  {@link #DEFAULT} otherwise. */
        const Int32 VOICE_RECOGNITION = 6;

        /** Microphone audio source tuned for voice communications such as VoIP. It
         *  will for instance take advantage of echo cancellation or automatic gain control
         *  if available. It otherwise behaves like {@link #DEFAULT} if no voice processing
         *  is applied.
         */
        const Int32 VOICE_COMMUNICATION = 7;

        /**
         * Audio source for a submix of audio streams to be presented remotely.
         * <p>
         * An application can use this audio source to capture a mix of audio streams
         * that should be transmitted to a remote receiver such as a Wifi display.
         * While recording is active, these audio streams are redirected to the remote
         * submix instead of being played on the device speaker or headset.
         * </p><p>
         * Certain streams are excluded from the remote submix, including
         * {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_ALARM},
         * and {@link AudioManager#STREAM_NOTIFICATION}.  These streams will continue
         * to be presented locally as usual.
         * </p><p>
         * Capturing the remote submix audio requires the
         * {@link android.Manifest.permission#CAPTURE_AUDIO_OUTPUT} permission.
         * This permission is reserved for use by system components and is not available to
         * third-party applications.
         * </p>
         */
        const Int32 REMOTE_SUBMIX = 8;

        /**
         * Audio source for preemptible, low-priority software hotword detection
         * It presents the same gain and pre processing tuning as {@link #VOICE_RECOGNITION}.
         * <p>
         * An application should use this audio source when it wishes to do
         * always-on software hotword detection, while gracefully giving in to any other application
         * that might want to read from the microphone.
         * </p>
         * This is a hidden audio source.
         * @hide
         */
        const Int32 HOTWORD = 1999;
    }

    interface IMediaRecorderVideoSource {
        /* Do not change these values without updating their counterparts
         * in include/media/mediarecorder.h!
         */

        const Int32 DEFAULT = 0;

        /** Camera video source
         * <p>
         * Using the {@link android.hardware.Camera} API as video source.
         * </p>
         */
        const Int32 CAMERA = 1;

        /** Surface video source
         * <p>
         * Using a Surface as video source.
         * </p><p>
         * This flag must be used when recording from an
         * {@link android.hardware.camera2} API source.
         * </p><p>
         * When using this video source type, use {@link MediaRecorder#getSurface()}
         * to retrieve the surface created by MediaRecorder.
         */
        const Int32 SURFACE = 2;
    }

    interface IMediaRecorderOutputFormat {
       /* Do not change these values without updating their counterparts
        * in include/media/mediarecorder.h!
        */

        const Int32 DEFAULT = 0;
        /** 3GPP media file format*/
        const Int32 THREE_GPP = 1;
        /** MPEG4 media file format*/
        const Int32 MPEG_4 = 2;

        /** The following formats are audio only .aac or .amr formats */

        /**
         * AMR NB file format
         * @deprecated  Deprecated in favor of MediaRecorder.OutputFormat.AMR_NB
         */
        const Int32 RAW_AMR = 3;

        /** AMR NB file format */
        const Int32 AMR_NB = 3;

        /** AMR WB file format */
        const Int32 AMR_WB = 4;

        /** @hide AAC ADIF file format */
        const Int32 AAC_ADIF = 5;

        /** AAC ADTS file format */
        const Int32 AAC_ADTS = 6;

        /** @hide Stream over a socket, limited to a single stream */
        const Int32 OUTPUT_FORMAT_RTP_AVP = 7;

        /** @hide H.264/AAC data encapsulated in MPEG2/TS */
        const Int32 OUTPUT_FORMAT_MPEG2TS = 8;

        /** VP8/VORBIS data in a WEBM container */
        const Int32 WEBM = 9;
    }

    interface IMediaRecorderAudioEncoder {
        /* Do not change these values without updating their counterparts
         * in include/media/mediarecorder.h!
         */
        const Int32 DEFAULT = 0;
        /** AMR (Narrowband) audio codec */
        const Int32 AMR_NB = 1;
        /** AMR (Wideband) audio codec */
        const Int32 AMR_WB = 2;
        /** AAC Low Complexity (AAC-LC) audio codec */
        const Int32 AAC = 3;
        /** High Efficiency AAC (HE-AAC) audio codec */
        const Int32 HE_AAC = 4;
        /** Enhanced Low Delay AAC (AAC-ELD) audio codec */
        const Int32 AAC_ELD = 5;
        /** Ogg Vorbis audio codec */
        const Int32 VORBIS = 6;
    }

    interface IMediaRecorderVideoEncoder {
      /* Do not change these values without updating their counterparts
       * in include/media/mediarecorder.h!
       */
        const Int32 DEFAULT = 0;
        const Int32 H263 = 1;
        const Int32 H264 = 2;
        const Int32 MPEG_4_SP = 3;
        const Int32 VP8 = 4;
    }

    /**
     * Interface definition for a callback to be invoked when an error
     * occurs while recording.
     */
    interface IMediaRecorderOnErrorListener {
        /**
         * Called when an error occurs while recording.
         *
         * @param mr the MediaRecorder that encountered the error
         * @param what    the type of error that has occurred:
         * <ul>
         * <li>{@link #MEDIA_RECORDER_ERROR_UNKNOWN}
         * <li>{@link #MEDIA_ERROR_SERVER_DIED}
         * </ul>
         * @param extra   an extra code, specific to the error type
         */
        OnError(
            [in] IMediaRecorder* mr,
            [in] Int32 what,
            [in] Int32 extra);
    }

    /**
     * Interface definition for a callback to be invoked when an error
     * occurs while recording.
     */
    interface IMediaRecorderOnInfoListener {
        /**
         * Called when an error occurs while recording.
         *
         * @param mr the MediaRecorder that encountered the error
         * @param what    the type of error that has occurred:
         * <ul>
         * <li>{@link #MEDIA_RECORDER_INFO_UNKNOWN}
         * <li>{@link #MEDIA_RECORDER_INFO_MAX_DURATION_REACHED}
         * <li>{@link #MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED}
         * </ul>
         * @param extra   an extra code, specific to the error type
         */
        OnInfo(
            [in] IMediaRecorder* mr,
            [in] Int32 what,
            [in] Int32 extra);
    }

    /**
     * Used to record audio and video. The recording control is based on a
     * simple state machine (see below).
     *
     * <p><img src="{@docRoot}images/mediarecorder_state_diagram.gif" border="0" />
     * </p>
     *
     * <p>A common case of using MediaRecorder to record audio works as follows:
     *
     * <pre>MediaRecorder recorder = new MediaRecorder();
     * recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
     * recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
     * recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
     * recorder.setOutputFile(PATH_NAME);
     * recorder.prepare();
     * recorder.start();   // Recording is now started
     * ...
     * recorder.stop();
     * recorder.reset();   // You can reuse the object by going back to setAudioSource() step
     * recorder.release(); // Now the object cannot be reused
     * </pre>
     *
     * <p>Applications may want to register for informational and error
     * events in order to be informed of some internal update and possible
     * runtime errors during recording. Registration for such events is
     * done by setting the appropriate listeners (via calls
     * (to {@link #setOnInfoListener(OnInfoListener)}setOnInfoListener and/or
     * {@link #setOnErrorListener(OnErrorListener)}setOnErrorListener).
     * In order to receive the respective callback associated with these listeners,
     * applications are required to create MediaRecorder objects on threads with a
     * Looper running (the main UI thread by default already has a Looper running).
     *
     * <p><strong>Note:</strong> Currently, MediaRecorder does not work on the emulator.
     *
     * <div class="special reference">
     * <h3>Developer Guides</h3>
     * <p>For more information about how to use MediaRecorder for recording video, read the
     * <a href="{@docRoot}guide/topics/media/camera.html#capture-video">Camera</a> developer guide.
     * For more information about how to use MediaRecorder for recording sound, read the
     * <a href="{@docRoot}guide/topics/media/audio-capture.html">Audio Capture</a> developer guide.</p>
     * </div>
     */
    interface IMediaRecorder {
        /* Do not change this value without updating its counterpart
         * in include/media/mediarecorder.h!
         */
        /** Unspecified media recorder error.
         * @see android.media.MediaRecorder.OnErrorListener
         */
        const Int32 MEDIA_RECORDER_ERROR_UNKNOWN = 1;

        /** Media server died. In this case, the application must release the
         * MediaRecorder object and instantiate a new one.
         * @see android.media.MediaRecorder.OnErrorListener
         */
        const Int32 MEDIA_ERROR_SERVER_DIED = 100;

        /* Do not change these values without updating their counterparts
         * in include/media/mediarecorder.h!
         */
        /** Unspecified media recorder error.
         * @see android.media.MediaRecorder.OnInfoListener
         */
        const Int32 MEDIA_RECORDER_INFO_UNKNOWN = 1;

        /** A maximum duration had been setup and has now been reached.
         * @see android.media.MediaRecorder.OnInfoListener
         */
        const Int32 MEDIA_RECORDER_INFO_MAX_DURATION_REACHED = 800;

        /** A maximum filesize had been setup and has now been reached.
         * @see android.media.MediaRecorder.OnInfoListener
         */
        const Int32 MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED = 801;

        /** informational events for individual tracks, for testing purpose.
         * The track informational event usually contains two parts in the ext1
         * arg of the onInfo() callback: bit 31-28 contains the track id; and
         * the rest of the 28 bits contains the informational event defined here.
         * For example, ext1 = (1 << 28 | MEDIA_RECORDER_TRACK_INFO_TYPE) if the
         * track id is 1 for informational event MEDIA_RECORDER_TRACK_INFO_TYPE;
         * while ext1 = (0 << 28 | MEDIA_RECORDER_TRACK_INFO_TYPE) if the track
         * id is 0 for informational event MEDIA_RECORDER_TRACK_INFO_TYPE. The
         * application should extract the track id and the type of informational
         * event from ext1, accordingly.
         *
         * FIXME:
         * Please update the comment for onInfo also when these
         * events are unhidden so that application knows how to extract the track
         * id and the informational event type from onInfo callback.
         *
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_LIST_START = 1000;

        /** Signal the completion of the track for the recording session.
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_COMPLETION_STATUS = 1000;

        /** Indicate the recording progress in time (ms) during recording.
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_PROGRESS_IN_TIME = 1001;

        /** Indicate the track type: 0 for Audio and 1 for Video.
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_TYPE = 1002;

        /** Provide the track duration information.
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_DURATION_MS = 1003;

        /** Provide the max chunk duration in time (ms) for the given track.
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_MAX_CHUNK_DUR_MS = 1004;

        /** Provide the total number of recordd frames.
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_ENCODED_FRAMES = 1005;

        /** Provide the max spacing between neighboring chunks for the given track.
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INTER_CHUNK_TIME_MS = 1006;

        /** Provide the elapsed time measuring from the start of the recording
         * till the first output frame of the given track is received, excluding
         * any intentional start time offset of a recording session for the
         * purpose of eliminating the recording sound in the recorded file.
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_INITIAL_DELAY_MS = 1007;

        /** Provide the start time difference (delay) betweeen this track and
         * the start of the movie.
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_START_OFFSET_MS = 1008;

        /** Provide the total number of data (in kilo-bytes) encoded.
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_DATA_KBYTES = 1009;

        /**
         * {@hide}
         */
        const Int32 MEDIA_RECORDER_TRACK_INFO_LIST_END = 2000;

        /**
         * Sets a Camera to use for recording. Use this function to switch
         * quickly between preview and capture mode without a teardown of
         * the camera object. {@link android.hardware.Camera#unlock()} should be
         * called before this. Must call before prepare().
         *
         * @param c the Camera to use for recording
         */
        SetCamera(
            [in] IHardwareCamera* c);

        /**
         * Gets the surface to record from when using SURFACE video source.
         *
         * <p> May only be called after {@link #prepare}. Frames rendered to the Surface before
         * {@link #start} will be discarded.</p>
         *
         * @throws IllegalStateException if it is called before {@link #prepare}, after
         * {@link #stop}, or is called when VideoSource is not set to SURFACE.
         * @see android.media.MediaRecorder.VideoSource
         */
        GetSurface(
            [out] ISurface ** result);

        /**
         * Sets a Surface to show a preview of recorded media (video). Calls this
         * before prepare() to make sure that the desirable preview display is
         * set. If {@link #setCamera(Camera)} is used and the surface has been
         * already set to the camera, application do not need to call this. If
         * this is called with non-null surface, the preview surface of the camera
         * will be replaced by the new surface. If this method is called with null
         * surface or not called at all, media recorder will not change the preview
         * surface of the camera.
         *
         * @param sv the Surface to use for the preview
         * @see android.hardware.Camera#setPreviewDisplay(android.view.SurfaceHolder)
         */
        SetPreviewDisplay(
            [in] ISurface* sv);

        /**
         * Sets the audio source to be used for recording. If this method is not
         * called, the output file will not contain an audio track. The source needs
         * to be specified before setting recording-parameters or encoders. Call
         * this only before setOutputFormat().
         *
         * @param audio_source the audio source to use
         * @throws IllegalStateException if it is called after setOutputFormat()
         * @see android.media.MediaRecorder.AudioSource
         */
        SetAudioSource(
            [in] Int32 audio_source);

        /**
         * Sets the video source to be used for recording. If this method is not
         * called, the output file will not contain an video track. The source needs
         * to be specified before setting recording-parameters or encoders. Call
         * this only before setOutputFormat().
         *
         * @param video_source the video source to use
         * @throws IllegalStateException if it is called after setOutputFormat()
         * @see android.media.MediaRecorder.VideoSource
         */
        SetVideoSource(
            [in] Int32 video_source);

        /**
         * Uses the settings from a CamcorderProfile object for recording. This method should
         * be called after the video AND audio sources are set, and before setOutputFile().
         * If a time lapse CamcorderProfile is used, audio related source or recording
         * parameters are ignored.
         *
         * @param profile the CamcorderProfile to use
         * @see android.media.CamcorderProfile
         */
        SetProfile(
            [in] ICamcorderProfile* profile);

        /**
         * Set video frame capture rate. This can be used to set a different video frame capture
         * rate than the recorded video's playback rate. This method also sets the recording mode
         * to time lapse. In time lapse video recording, only video is recorded. Audio related
         * parameters are ignored when a time lapse recording session starts, if an application
         * sets them.
         *
         * @param fps Rate at which frames should be captured in frames per second.
         * The fps can go as low as desired. However the fastest fps will be limited by the hardware.
         * For resolutions that can be captured by the video camera, the fastest fps can be computed using
         * {@link android.hardware.Camera.Parameters#getPreviewFpsRange(int[])}. For higher
         * resolutions the fastest fps may be more restrictive.
         * Note that the recorder cannot guarantee that frames will be captured at the
         * given rate due to camera/encoder limitations. However it tries to be as close as
         * possible.
         */
        SetCaptureRate(
            [in] Double fps);

        /**
         * Sets the orientation hint for output video playback.
         * This method should be called before prepare(). This method will not
         * trigger the source video frame to rotate during video recording, but to
         * add a composition matrix containing the rotation angle in the output
         * video if the output format is OutputFormat.THREE_GPP or
         * OutputFormat.MPEG_4 so that a video player can choose the proper
         * orientation for playback. Note that some video players may choose
         * to ignore the compostion matrix in a video during playback.
         *
         * @param degrees the angle to be rotated clockwise in degrees.
         * The supported angles are 0, 90, 180, and 270 degrees.
         * @throws IllegalArgumentException if the angle is not supported.
         *
         */
        SetOrientationHint(
            [in] Int32 degrees);

        /**
         * Set and store the geodata (latitude and longitude) in the output file.
         * This method should be called before prepare(). The geodata is
         * stored in udta box if the output format is OutputFormat.THREE_GPP
         * or OutputFormat.MPEG_4, and is ignored for other output formats.
         * The geodata is stored according to ISO-6709 standard.
         *
         * @param latitude latitude in degrees. Its value must be in the
         * range [-90, 90].
         * @param longitude longitude in degrees. Its value must be in the
         * range [-180, 180].
         *
         * @throws IllegalArgumentException if the given latitude or
         * longitude is out of range.
         *
         */
        SetLocation(
            [in] Float latitude,
            [in] Float longitude);

        /**
         * Sets the format of the output file produced during recording. Call this
         * after setAudioSource()/setVideoSource() but before prepare().
         *
         * <p>It is recommended to always use 3GP format when using the H.263
         * video encoder and AMR audio encoder. Using an MPEG-4 container format
         * may confuse some desktop players.</p>
         *
         * @param output_format the output format to use. The output format
         * needs to be specified before setting recording-parameters or encoders.
         * @throws IllegalStateException if it is called after prepare() or before
         * setAudioSource()/setVideoSource().
         * @see android.media.MediaRecorder.OutputFormat
         */
        SetOutputFormat(
            [in] Int32 output_format);

        /**
         * Sets the width and height of the video to be captured.  Must be called
         * after setVideoSource(). Call this after setOutFormat() but before
         * prepare().
         *
         * @param width the width of the video to be captured
         * @param height the height of the video to be captured
         * @throws IllegalStateException if it is called after
         * prepare() or before setOutputFormat()
         */
        SetVideoSize(
            [in] Int32 width,
            [in] Int32 height);

        /**
         * Sets the frame rate of the video to be captured.  Must be called
         * after setVideoSource(). Call this after setOutFormat() but before
         * prepare().
         *
         * @param rate the number of frames per second of video to capture
         * @throws IllegalStateException if it is called after
         * prepare() or before setOutputFormat().
         *
         * NOTE: On some devices that have auto-frame rate, this sets the
         * maximum frame rate, not a constant frame rate. Actual frame rate
         * will vary according to lighting conditions.
         */
        SetVideoFrameRate(
            [in] Int32 rate);

        /**
         * Sets the maximum duration (in ms) of the recording session.
         * Call this after setOutFormat() but before prepare().
         * After recording reaches the specified duration, a notification
         * will be sent to the {@link android.media.MediaRecorder.OnInfoListener}
         * with a "what" code of {@link #MEDIA_RECORDER_INFO_MAX_DURATION_REACHED}
         * and recording will be stopped. Stopping happens asynchronously, there
         * is no guarantee that the recorder will have stopped by the time the
         * listener is notified.
         *
         * @param max_duration_ms the maximum duration in ms (if zero or negative, disables the duration limit)
         *
         */
        SetMaxDuration(
            [in] Int32 max_duration_ms);

        /**
         * Sets the maximum filesize (in bytes) of the recording session.
         * Call this after setOutFormat() but before prepare().
         * After recording reaches the specified filesize, a notification
         * will be sent to the {@link android.media.MediaRecorder.OnInfoListener}
         * with a "what" code of {@link #MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED}
         * and recording will be stopped. Stopping happens asynchronously, there
         * is no guarantee that the recorder will have stopped by the time the
         * listener is notified.
         *
         * @param max_filesize_bytes the maximum filesize in bytes (if zero or negative, disables the limit)
         *
         */
        SetMaxFileSize(
            [in] Int64 max_filesize_bytes);

        /**
         * Sets the audio encoder to be used for recording. If this method is not
         * called, the output file will not contain an audio track. Call this after
         * setOutputFormat() but before prepare().
         *
         * @param audio_encoder the audio encoder to use.
         * @throws IllegalStateException if it is called before
         * setOutputFormat() or after prepare().
         * @see android.media.MediaRecorder.AudioEncoder
         */
        SetAudioEncoder(
            [in] Int32 audio_encoder);

        /**
         * Sets the video encoder to be used for recording. If this method is not
         * called, the output file will not contain an video track. Call this after
         * setOutputFormat() and before prepare().
         *
         * @param video_encoder the video encoder to use.
         * @throws IllegalStateException if it is called before
         * setOutputFormat() or after prepare()
         * @see android.media.MediaRecorder.VideoEncoder
         */
        SetVideoEncoder(
            [in] Int32 video_encoder);

        /**
         * Sets the audio sampling rate for recording. Call this method before prepare().
         * Prepare() may perform additional checks on the parameter to make sure whether
         * the specified audio sampling rate is applicable. The sampling rate really depends
         * on the format for the audio recording, as well as the capabilities of the platform.
         * For instance, the sampling rate supported by AAC audio coding standard ranges
         * from 8 to 96 kHz. Please consult with the related audio coding standard for the
         * supported audio sampling rate.
         *
         * @param samplingRate the sampling rate for audio in samples per second.
         */
        SetAudioSamplingRate(
            [in] Int32 samplingRate);

        /**
         * Sets the number of audio channels for recording. Call this method before prepare().
         * Prepare() may perform additional checks on the parameter to make sure whether the
         * specified number of audio channels are applicable.
         *
         * @param numChannels the number of audio channels. Usually it is either 1 (mono) or 2
         * (stereo).
         */
        SetAudioChannels(
            [in] Int32 numChannels);

        /**
         * Sets the audio encoding bit rate for recording. Call this method before prepare().
         * Prepare() may perform additional checks on the parameter to make sure whether the
         * specified bit rate is applicable, and sometimes the passed bitRate will be clipped
         * internally to ensure the audio recording can proceed smoothly based on the
         * capabilities of the platform.
         *
         * @param bitRate the audio encoding bit rate in bits per second.
         */
        SetAudioEncodingBitRate(
            [in] Int32 bitRate);

        /**
         * Sets the video encoding bit rate for recording. Call this method before prepare().
         * Prepare() may perform additional checks on the parameter to make sure whether the
         * specified bit rate is applicable, and sometimes the passed bitRate will be
         * clipped internally to ensure the video recording can proceed smoothly based on
         * the capabilities of the platform.
         *
         * @param bitRate the video encoding bit rate in bits per second.
         */
        SetVideoEncodingBitRate(
            [in] Int32 bitRate);

        /**
         * Currently not implemented. It does nothing.
         * @deprecated Time lapse mode video recording using camera still image capture
         * is not desirable, and will not be supported.
         * @hide
         */
        SetAuxiliaryOutputFile(
            [in] IFileDescriptor* fd);

        /**
         * Currently not implemented. It does nothing.
         * @deprecated Time lapse mode video recording using camera still image capture
         * is not desirable, and will not be supported.
         * @hide
         */
        SetAuxiliaryOutputFile(
            [in] String path);

        /**
         * Pass in the file descriptor of the file to be written. Call this after
         * setOutputFormat() but before prepare().
         *
         * @param fd an open file descriptor to be written into.
         * @throws IllegalStateException if it is called before
         * setOutputFormat() or after prepare()
         */
        SetOutputFile(
            [in] IFileDescriptor* fd);

        /**
         * Sets the path of the output file to be produced. Call this after
         * setOutputFormat() but before prepare().
         *
         * @param path The pathname to use.
         * @throws IllegalStateException if it is called before
         * setOutputFormat() or after prepare()
         */
        SetOutputFile(
            [in] String path);

        /**
         * Prepares the recorder to begin capturing and encoding data. This method
         * must be called after setting up the desired audio and video sources,
         * encoders, file format, etc., but before start().
         *
         * @throws IllegalStateException if it is called after
         * start() or before setOutputFormat().
         * @throws IOException if prepare fails otherwise.
         */
        Prepare();

        /**
         * Begins capturing and encoding data to the file specified with
         * setOutputFile(). Call this after prepare().
         *
         * <p>Since API level 13, if applications set a camera via
         * {@link #setCamera(Camera)}, the apps can use the camera after this method
         * call. The apps do not need to lock the camera again. However, if this
         * method fails, the apps should still lock the camera back. The apps should
         * not start another recording session during recording.
         *
         * @throws IllegalStateException if it is called before
         * prepare().
         */
        Start();

        /**
         * Stops recording. Call this after start(). Once recording is stopped,
         * you will have to configure it again as if it has just been constructed.
         * Note that a RuntimeException is intentionally thrown to the
         * application, if no valid audio/video data has been received when stop()
         * is called. This happens if stop() is called immediately after
         * start(). The failure lets the application take action accordingly to
         * clean up the output file (delete the output file, for instance), since
         * the output file is not properly constructed when this happens.
         *
         * @throws IllegalStateException if it is called before start()
         */
        Stop();

        /**
         * Restarts the MediaRecorder to its idle state. After calling
         * this method, you will have to configure it again as if it had just been
         * constructed.
         */
        Reset();

        /**
         * Returns the maximum absolute amplitude that was sampled since the last
         * call to this method. Call this only after the setAudioSource().
         *
         * @return the maximum absolute amplitude measured since the last call, or
         * 0 when called for the first time
         * @throws IllegalStateException if it is called before
         * the audio source has been set.
         */
        GetMaxAmplitude(
            [out] Int32* result);

        /**
         * Register a callback to be invoked when an error occurs while
         * recording.
         *
         * @param l the callback that will be run
         */
        SetOnErrorListener(
            [in] IMediaRecorderOnErrorListener* l);

        /**
         * Register a callback to be invoked when an informational event occurs while
         * recording.
         *
         * @param listener the callback that will be run
         */
        SetOnInfoListener(
            [in] IMediaRecorderOnInfoListener* listener);

        /**
         * Releases resources associated with this MediaRecorder object.
         * It is good practice to call this method when you're done
         * using the MediaRecorder. In particular, whenever an Activity
         * of an application is paused (its onPause() method is called),
         * or stopped (its onStop() method is called), this method should be
         * invoked to release the MediaRecorder object, unless the application
         * has a special need to keep the object around. In addition to
         * unnecessary resources (such as memory and instances of codecs)
         * being held, failure to call this method immediately if a
         * MediaRecorder object is no longer needed may also lead to
         * continuous battery consumption for mobile devices, and recording
         * failure for other applications if no multiple instances of the
         * same codec are supported on a device. Even if multiple instances
         * of the same codec are supported, some performance degradation
         * may be expected when unnecessary multiple instances are used
         * at the same time.
         */
        ReleaseResources();
    }

    interface IMediaRecorderHelper {
        /**
         * Gets the maximum value for audio sources.
         * @see android.media.MediaRecorder.AudioSource
         */
        GetAudioSourceMax(
            [out] Int32* result);
    }

    } // namespace Media
    } // namepsace Droid
    } // namespace Elastos
}
