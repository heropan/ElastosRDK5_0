
module
{
    using interface Elastos.Utility.IMap;
    using interface Elastos.Utility.IList;

    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.IResultReceiver;
    interface Elastos.Droid.Text.Style.ISuggestionSpan;
    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IKeyEvent;
    interface Elastos.Droid.View.IMotionEvent;
    interface Elastos.Droid.View.InputMethod.IInputConnection;
    interface Elastos.Droid.View.InputMethod.ICompletionInfo;
    interface Elastos.Droid.View.InputMethod.IExtractedText;
    interface Elastos.Droid.View.InputMethod.IInputMethodSubtype;
    interface Elastos.Droid.View.InputMethod.IInputMethodInfo;
    interface Elastos.Droid.Internal.View.IInputMethodClient;
    interface Elastos.Droid.Internal.View.IInputContext;

    namespace Elastos {
    namespace Droid {
    namespace View {
    namespace InputMethod {

    /**
     * Callback that is invoked when an input event that was dispatched to
     * the IME has been finished.
     * @hide
     */
    interface IInputMethodManagerFinishedInputEventCallback {
        OnFinishedInputEvent(
            [in] IInterface* seq,
            [in] Boolean handled);
    }

    /**
     * Central system API to the overall input method framework (IMF) architecture,
     * which arbitrates interaction between applications and the current input method.
     * You can retrieve an instance of this interface with
     * {@link Context#getSystemService(String) Context.getSystemService()}.
     *
     * <p>Topics covered here:
     * <ol>
     * <li><a href="#ArchitectureOverview">Architecture Overview</a>
     * <li><a href="#Applications">Applications</a>
     * <li><a href="#InputMethods">Input Methods</a>
     * <li><a href="#Security">Security</a>
     * </ol>
     *
     * <a name="ArchitectureOverview"></a>
     * <h3>Architecture Overview</h3>
     *
     * <p>There are three primary parties involved in the input method
     * framework (IMF) architecture:</p>
     *
     * <ul>
     * <li> The <strong>input method manager</strong> as expressed by this class
     * is the central point of the system that manages interaction between all
     * other parts.  It is expressed as the client-side API here which exists
     * in each application context and communicates with a global system service
     * that manages the interaction across all processes.
     * <li> An <strong>input method (IME)</strong> implements a particular
     * interaction model allowing the user to generate text.  The system binds
     * to the current input method that is use, causing it to be created and run,
     * and tells it when to hide and show its UI.  Only one IME is running at a time.
     * <li> Multiple <strong>client applications</strong> arbitrate with the input
     * method manager for input focus and control over the state of the IME.  Only
     * one such client is ever active (working with the IME) at a time.
     * </ul>
     *
     *
     * <a name="Applications"></a>
     * <h3>Applications</h3>
     *
     * <p>In most cases, applications that are using the standard
     * {@link android.widget.TextView} or its subclasses will have little they need
     * to do to work well with soft input methods.  The main things you need to
     * be aware of are:</p>
     *
     * <ul>
     * <li> Properly set the {@link android.R.attr#inputType} in your editable
     * text views, so that the input method will have enough context to help the
     * user in entering text into them.
     * <li> Deal well with losing screen space when the input method is
     * displayed.  Ideally an application should handle its window being resized
     * smaller, but it can rely on the system performing panning of the window
     * if needed.  You should set the {@link android.R.attr#windowSoftInputMode}
     * attribute on your activity or the corresponding values on windows you
     * create to help the system determine whether to pan or resize (it will
     * try to determine this automatically but may get it wrong).
     * <li> You can also control the preferred soft input state (open, closed, etc)
     * for your window using the same {@link android.R.attr#windowSoftInputMode}
     * attribute.
     * </ul>
     *
     * <p>More finer-grained control is available through the APIs here to directly
     * interact with the IMF and its IME -- either showing or hiding the input
     * area, letting the user pick an input method, etc.</p>
     *
     * <p>For the rare people amongst us writing their own text editors, you
     * will need to implement {@link android.view.View#onCreateInputConnection}
     * to return a new instance of your own {@link InputConnection} interface
     * allowing the IME to interact with your editor.</p>
     *
     *
     * <a name="InputMethods"></a>
     * <h3>Input Methods</h3>
     *
     * <p>An input method (IME) is implemented
     * as a {@link android.app.Service}, typically deriving from
     * {@link android.inputmethodservice.InputMethodService}.  It must provide
     * the core {@link InputMethod} interface, though this is normally handled by
     * {@link android.inputmethodservice.InputMethodService} and implementors will
     * only need to deal with the higher-level API there.</p>
     *
     * See the {@link android.inputmethodservice.InputMethodService} class for
     * more information on implementing IMEs.
     *
     *
     * <a name="Security"></a>
     * <h3>Security</h3>
     *
     * <p>There are a lot of security issues associated with input methods,
     * since they essentially have freedom to completely drive the UI and monitor
     * everything the user enters.  The Android input method framework also allows
     * arbitrary third party IMEs, so care must be taken to restrict their
     * selection and interactions.</p>
     *
     * <p>Here are some key points about the security architecture behind the
     * IMF:</p>
     *
     * <ul>
     * <li> <p>Only the system is allowed to directly access an IME's
     * {@link InputMethod} interface, via the
     * {@link android.Manifest.permission#BIND_INPUT_METHOD} permission.  This is
     * enforced in the system by not binding to an input method service that does
     * not require this permission, so the system can guarantee no other untrusted
     * clients are accessing the current input method outside of its control.</p>
     *
     * <li> <p>There may be many client processes of the IMF, but only one may
     * be active at a time.  The inactive clients can not interact with key
     * parts of the IMF through the mechanisms described below.</p>
     *
     * <li> <p>Clients of an input method are only given access to its
     * {@link InputMethodSession} interface.  One instance of this interface is
     * created for each client, and only calls from the session associated with
     * the active client will be processed by the current IME.  This is enforced
     * by {@link android.inputmethodservice.AbstractInputMethodService} for normal
     * IMEs, but must be explicitly handled by an IME that is customizing the
     * raw {@link InputMethodSession} implementation.</p>
     *
     * <li> <p>Only the active client's {@link InputConnection} will accept
     * operations.  The IMF tells each client process whether it is active, and
     * the framework enforces that in inactive processes calls on to the current
     * InputConnection will be ignored.  This ensures that the current IME can
     * only deliver events and text edits to the UI that the user sees as
     * being in focus.</p>
     *
     * <li> <p>An IME can never interact with an {@link InputConnection} while
     * the screen is off.  This is enforced by making all clients inactive while
     * the screen is off, and prevents bad IMEs from driving the UI when the user
     * can not be aware of its behavior.</p>
     *
     * <li> <p>A client application can ask that the system let the user pick a
     * new IME, but can not programmatically switch to one itself.  This avoids
     * malicious applications from switching the user to their own IME, which
     * remains running when the user navigates away to another application.  An
     * IME, on the other hand, <em>is</em> allowed to programmatically switch
     * the system to another IME, since it already has full control of user
     * input.</p>
     *
     * <li> <p>The user must explicitly enable a new IME in settings before
     * they can switch to it, to confirm with the system that they know about it
     * and want to make it available for use.</p>
     * </ul>
     */

    [local, deprecated]
    interface IInputMethodManager {

        /**
         * @hide Flag for IInputMethodManager.windowGainedFocus: a view in
         * the window has input focus.
         */
        const Int32 CONTROL_WINDOW_VIEW_HAS_FOCUS = 1<<0;

        /**
         * @hide Flag for IInputMethodManager.windowGainedFocus: the focus
         * is a text editor.
         */
        const Int32 CONTROL_WINDOW_IS_TEXT_EDITOR = 1<<1;

        /**
         * @hide Flag for IInputMethodManager.windowGainedFocus: this is the first
         * time the window has gotten focus.
         */
        const Int32 CONTROL_WINDOW_FIRST = 1<<2;

        /**
         * @hide Flag for IInputMethodManager.startInput: this is the first
         * time the window has gotten focus.
         */
        const Int32 CONTROL_START_INITIAL = 1<<8;

        /** @hide */
        const Int32 DISPATCH_IN_PROGRESS = -1;

        /** @hide */
        const Int32 DISPATCH_NOT_HANDLED = 0;

        /** @hide */
        const Int32 DISPATCH_HANDLED = 1;

        /**
         * Flag for {@link #showSoftInput} to indicate that this is an implicit
         * request to show the input window, not as the result of a direct request
         * by the user.  The window may not be shown in this case.
         */
        const Int32 SHOW_IMPLICIT = 0x0001;

        /**
         * Flag for {@link #showSoftInput} to indicate that the user has forced
         * the input method open (such as by long-pressing menu) so it should
         * not be closed until they explicitly do so.
         */
        const Int32 SHOW_FORCED = 0x0002;

        /**
         * Flag for the {@link ResultReceiver} result code from
         * {@link #showSoftInput(View, int, ResultReceiver)} and
         * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
         * state of the soft input window was unchanged and remains shown.
         */
        const Int32 RESULT_UNCHANGED_SHOWN = 0;

        /**
         * Flag for the {@link ResultReceiver} result code from
         * {@link #showSoftInput(View, int, ResultReceiver)} and
         * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
         * state of the soft input window was unchanged and remains hidden.
         */
        const Int32 RESULT_UNCHANGED_HIDDEN = 1;

        /**
         * Flag for the {@link ResultReceiver} result code from
         * {@link #showSoftInput(View, int, ResultReceiver)} and
         * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
         * state of the soft input window changed from hidden to shown.
         */
        const Int32 RESULT_SHOWN = 2;

        /**
         * Flag for the {@link ResultReceiver} result code from
         * {@link #showSoftInput(View, int, ResultReceiver)} and
         * {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
         * state of the soft input window changed from shown to hidden.
         */
        const Int32 RESULT_HIDDEN = 3;

        /**
         * Flag for {@link #hideSoftInputFromWindow} to indicate that the soft
         * input window should only be hidden if it was not explicitly shown
         * by the user.
         */
        const Int32 HIDE_IMPLICIT_ONLY = 0x0001;

        /**
         * Flag for {@link #hideSoftInputFromWindow} to indicate that the soft
         * input window should normally be hidden, unless it was originally
         * shown with {@link #SHOW_FORCED}.
         */
        const Int32 HIDE_NOT_ALWAYS = 0x0002;

        /** @hide */
        GetClient(
            [out] IInputMethodClient** client);

        /** @hide */
        GetInputContext(
            [out] IInputContext** context);

        GetInputMethodList(
            [out] IList** infos);

        GetEnabledInputMethodList(
            [out] IList** infos);

        /**
         * Returns a list of enabled input method subtypes for the specified input method info.
         * @param imi An input method info whose subtypes list will be returned.
         * @param allowsImplicitlySelectedSubtypes A boolean flag to allow to return the implicitly
         * selected subtypes. If an input method info doesn't have enabled subtypes, the framework
         * will implicitly enable subtypes according to the current system language.
         */
        GetEnabledInputMethodSubtypeList(
            [in] IInputMethodInfo* imi,
            [in] Boolean allowsImplicitlySelectedSubtypes,
            [out] IList** infos);

        ShowStatusIcon(
            [in] IBinder* imeToken,
            [in] String capsuleName,
            [in] Int32 iconId);

        HideStatusIcon(
            [in] IBinder* imeToken);

        /** @hide */
        SetImeWindowStatus(
            [in] IBinder* imeToken,
            [in] Int32 vis,
            [in] Int32 backDisposition);

        /** @hide */
        SetFullscreenMode(
            [in] Boolean fullScreen);

        /** @hide */
        RegisterSuggestionSpansForNotification(
            [in] ArrayOf<ISuggestionSpan*>* spans);

        /** @hide */
        NotifySuggestionPicked(
            [in] ISuggestionSpan* span,
            [in] String originalString,
            [in] Int32 index);

        /**
         * Allows you to discover whether the attached input method is running
         * in fullscreen mode.  Return true if it is fullscreen, entirely covering
         * your UI, else returns false.
         */
        IsFullscreenMode(
            [out] Boolean* mode);

        /**
         * Return true if the given view is the currently active view for the
         * input method.
         */
        IsActive(
            [in] IView* view,
            [out] Boolean* active);

        /**
         * Return true if any view is currently active in the input method.
         */
        IsActive(
            [out] Boolean* active);

        /**
         * Return true if the currently served view is accepting full text edits.
         * If false, it has no input connection, so can only handle raw key events.
         */
        IsAcceptingText(
            [out] Boolean* accept);

        /**
         * Called from the FINISH_INPUT_CONNECTION message above.
         * @hide
         */
        ReportFinishInputConnection(
            [in] IInputConnection* ic);

        DisplayCompletions(
            [in] IView* view,
            [in] ArrayOf<ICompletionInfo*>* completions);

        UpdateExtractedText(
            [in] IView* view,
            [in] Int32 token,
            [in] IExtractedText* text);

        /**
         * Synonym for {@link #showSoftInput(View, int, ResultReceiver)} without
         * a result receiver: explicitly request that the current input method's
         * soft input area be shown to the user, if needed.
         *
         * @param view The currently focused view, which would like to receive
         * soft keyboard input.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #SHOW_IMPLICIT} bit set.
         */
        ShowSoftInput(
            [in] IView* view,
            [in] Int32 flags,
            [out] Boolean* ret);

        /**
         * Explicitly request that the current input method's soft input area be
         * shown to the user, if needed.  Call this if the user interacts with
         * your view in such a way that they have expressed they would like to
         * start performing input into it.
         *
         * @param view The currently focused view, which would like to receive
         * soft keyboard input.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #SHOW_IMPLICIT} bit set.
         * @param resultReceiver If non-null, this will be called by the IME when
         * it has processed your request to tell you what it has done.  The result
         * code you receive may be either {@link #RESULT_UNCHANGED_SHOWN},
         * {@link #RESULT_UNCHANGED_HIDDEN}, {@link #RESULT_SHOWN}, or
         * {@link #RESULT_HIDDEN}.
         */
        ShowSoftInput(
            [in] IView* view,
            [in] Int32 flags,
            [in] IResultReceiver* resultReceiver,
            [out] Boolean* ret);

        /** @hide */
        ShowSoftInputUnchecked(
            [in] Int32 flags,
            [in] IResultReceiver* resultReceiver);

        /**
         * Synonym for {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)
         * without a result: request to hide the soft input window from the
         * context of the window that is currently accepting input.
         *
         * @param windowToken The token of the window that is making the request,
         * as returned by {@link View#getWindowToken() View.getWindowToken()}.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #HIDE_IMPLICIT_ONLY} bit set.
         */
        HideSoftInputFromWindow(
            [in] IBinder* windowToken,
            [in] Int32 flags,
            [out] Boolean* ret);

        /**
         * Request to hide the soft input window from the context of the window
         * that is currently accepting input.  This should be called as a result
         * of the user  doing some actually than fairly explicitly requests to
         * have the input window hidden.
         *
         * @param windowToken The token of the window that is making the request,
         * as returned by {@link View#getWindowToken() View.getWindowToken()}.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #HIDE_IMPLICIT_ONLY} bit set.
         * @param resultReceiver If non-null, this will be called by the IME when
         * it has processed your request to tell you what it has done.  The result
         * code you receive may be either {@link #RESULT_UNCHANGED_SHOWN},
         * {@link #RESULT_UNCHANGED_HIDDEN}, {@link #RESULT_SHOWN}, or
         * {@link #RESULT_HIDDEN}.
         */
        HideSoftInputFromWindow(
            [in] IBinder* windowToken,
            [in] Int32 flags,
            [in] IResultReceiver* resultReceiver,
            [out] Boolean* ret);

        /**
         * This method toggles the input method window display.
         * If the input window is already displayed, it gets hidden.
         * If not the input window will be displayed.
         * @param windowToken The token of the window that is making the request,
         * as returned by {@link View#getWindowToken() View.getWindowToken()}.
         * @param showFlags Provides additional operating flags.  May be
         * 0 or have the {@link #SHOW_IMPLICIT},
         * {@link #SHOW_FORCED} bit set.
         * @param hideFlags Provides additional operating flags.  May be
         * 0 or have the {@link #HIDE_IMPLICIT_ONLY},
         * {@link #HIDE_NOT_ALWAYS} bit set.
         **/
        ToggleSoftInputFromWindow(
            [in] IBinder* windowToken,
            [in] Int32 showFlags,
            [in] Int32 hideFlags);

        /*
         * This method toggles the input method window display.
         * If the input window is already displayed, it gets hidden.
         * If not the input window will be displayed.
         * @param showFlags Provides additional operating flags.  May be
         * 0 or have the {@link #SHOW_IMPLICIT},
         * {@link #SHOW_FORCED} bit set.
         * @param hideFlags Provides additional operating flags.  May be
         * 0 or have the {@link #HIDE_IMPLICIT_ONLY},
         * {@link #HIDE_NOT_ALWAYS} bit set.
         * @hide
         */
        ToggleSoftInput(
            [in] Int32 showFlags,
            [in] Int32 hideFlags);

        /**
         * If the input method is currently connected to the given view,
         * restart it with its new contents.  You should call this when the text
         * within your view changes outside of the normal input method or key
         * input flow, such as when an application calls TextView.setText().
         *
         * @param view The view whose text has changed.
         */
        RestartInput(
            [in] IView* view);

        /**
         * When the focused window is dismissed, this method is called to finish the
         * input method started before.
         * @hide
         */
        WindowDismissed(
            [in] IBinder* appWindowToken);

        /**
         * Call this when a view receives focus.
         * @hide
         */
        FocusIn(
            [in] IView* view);

        /**
         * Call this when a view loses focus.
         * @hide
         */
        FocusOut(
            [in] IView* view);

        /**
         * @hide
         */
        CheckFocus();

        /**
         * Called by ViewRoot when its window gets input focus.
         * @hide
         */
        OnWindowFocus(
            [in] IView* rootView,
            [in] IView* focusedView,
            [in] Int32 softInputMode,
            [in] Boolean first,
            [in] Int32 windowFlags);

        /** @hide */
        StartGettingWindowFocus(
            [in] IView* rootView);

        /**
         * Report the current selection range.
         */
        UpdateSelection(
            [in] IView* view,
            [in] Int32 selStart,
            [in] Int32 selEnd,
            [in] Int32 candidatesStart,
            [in] Int32 candidatesEnd);

        /**
         * Notify the event when the user tapped or clicked the text view.
         */
        ViewClicked(
            [in] IView* view);

        /**
         * Returns true if the current input method wants to watch the location
         * of the input editor's cursor in its window.
         */
        IsWatchingCursor(
            [in] IView* view,
            [out] Boolean* ret);

        /**
         * Return true if the current input method wants to be notified when cursor/anchor location
         * is changed.
         *
         * @hide
         */
        IsCursorAnchorInfoEnabled(
            [out] Boolean* result);

        /**
         * Set the requested mode for {@link #updateCursorAnchorInfo(View, CursorAnchorInfo)}.
         *
         * @hide
         */
        SetUpdateCursorAnchorInfoMode(
            [in] Int32 flags);

        /**
         * Report the current cursor location in its window.
         */
        UpdateCursor(
            [in] IView* view,
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom);

        /**
         * Report positional change of the text insertion point and/or characters in the composition
         * string.
         */
        UpdateCursorAnchorInfo(
            [in] IView* view,
            [in] ICursorAnchorInfo* cursorAnchorInfo);

        /**
         * Call {@link InputMethodSession#appPrivateCommand(String, Bundle)
         * InputMethodSession.appPrivateCommand()} on the current Input Method.
         * @param view Optional View that is sending the command, or null if
         * you want to send the command regardless of the view that is attached
         * to the input method.
         * @param action Name of the command to be performed.  This <em>must</em>
         * be a scoped name, i.e. prefixed with a package name you own, so that
         * different developers will not create conflicting commands.
         * @param data Any data to include with the command.
         */
        SendAppPrivateCommand(
            [in] IView* view,
            [in] String action,
            [in] IBundle* data);

        /**
         * Force switch to a new input method component.  This can only be called
         * from the currently active input method, as validated by the given token.
         * @param token Supplies the identifying token given to an input method
         * when it was started, which allows it to perform this operation on
         * itself.
         * @param id The unique identifier for the new input method to be switched to.
         */
        SetInputMethod(
            [in] IBinder* token,
            [in] String id);

        /**
         * Force switch to a new input method and subtype. This can only be called
         * from an application or a service which has a token of the currently active input method.
         * @param token Supplies the identifying token given to an input method
         * when it was started, which allows it to perform this operation on
         * itself.
         * @param id The unique identifier for the new input method to be switched to.
         * @param subtype The new subtype of the new input method to be switched to.
         */
        SetInputMethodAndSubtype(
            [in] IBinder* token,
            [in] String id,
            [in] IInputMethodSubtype* subtype);

        /**
         * Close/hide the input method's soft input area, so the user no longer
         * sees it or can interact with it.  This can only be called
         * from the currently active input method, as validated by the given token.
         *
         * @param token Supplies the identifying token given to an input method
         * when it was started, which allows it to perform this operation on
         * itself.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #HIDE_IMPLICIT_ONLY},
         * {@link #HIDE_NOT_ALWAYS} bit set.
         */
        HideSoftInputFromInputMethod(
            [in] IBinder* token,
            [in] Int32 flags);

        /**
         * Show the input method's soft input area, so the user
         * sees the input method window and can interact with it.
         * This can only be called from the currently active input method,
         * as validated by the given token.
         *
         * @param token Supplies the identifying token given to an input method
         * when it was started, which allows it to perform this operation on
         * itself.
         * @param flags Provides additional operating flags.  Currently may be
         * 0 or have the {@link #SHOW_IMPLICIT} or
         * {@link #SHOW_FORCED} bit set.
         */
        ShowSoftInputFromInputMethod(
            [in] IBinder* token,
            [in] Int32 flags);

        /**
         * @hide
         */
        DispatchKeyEvent(
            [in] IContext* ctx,
            [in] Int32 seq,
            [in] IKeyEvent* key,
            [in] IInputMethodManagerFinishedInputEventCallback* cback);

        /**
         * @hide
         */
        DispatchTrackballEvent(
            [in] IContext* ctx,
            [in] Int32 seq,
            [in] IMotionEvent* motion,
            [in] IInputMethodManagerFinishedInputEventCallback* cb);

        /**
         * @hide
         */
        DispatchGenericMotionEvent(
            [in] IContext* ctx,
            [in] Int32 seq,
            [in] IMotionEvent* motion,
            [in] IInputMethodManagerFinishedInputEventCallback* cb);

        ShowInputMethodPicker();

        /**
         * Show the settings for enabling subtypes of the specified input method.
         * @param imiId An input method, whose subtypes settings will be shown. If imiId is null,
         * subtypes of all input methods will be shown.
         */
        ShowInputMethodAndSubtypeEnabler(
            [in] String imiId);

        /**
         * Returns the current input method subtype. This subtype is one of the subtypes in
         * the current input method. This method returns null when the current input method doesn't
         * have any input method subtype.
         */
        GetCurrentInputMethodSubtype(
            [out] IInputMethodSubtype** subType);

        /**
         * Switch to a new input method subtype of the current input method.
         * @param subtype A new input method subtype to switch.
         * @return true if the current subtype was successfully switched. When the specified subtype is
         * null, this method returns false.
         */
        SetCurrentInputMethodSubtype(
            [in] IInputMethodSubtype* subtype,
            [out] Boolean* swithed);

        /**
         * Notify that a user took some action with this input method.
         * @hide
         */
        NotifyUserAction();

        /**
         * Returns a map of all shortcut input method info and their subtypes.
         */
        //Map<InputMethodInfo, List<InputMethodSubtype>>
        GetShortcutInputMethodsAndSubtypes(
            [out] IMap** map);

        /**
         * @return The current height of the input method window.
         * @hide
         */
        GetInputMethodWindowVisibleHeight(
            [out] Int32* height);

        /**
         * Force switch to the last used input method and subtype. If the last input method didn't have
         * any subtypes, the framework will simply switch to the last input method with no subtype
         * specified.
         * @param imeToken Supplies the identifying token given to an input method when it was started,
         * which allows it to perform this operation on itself.
         * @return true if the current input method and subtype was successfully switched to the last
         * used input method and subtype.
         */
        SwitchToLastInputMethod(
            [in] IBinder* imeToken,
            [out] Boolean* switched);

        /**
         * Force switch to the next input method and subtype. If there is no IME enabled except
         * current IME and subtype, do nothing.
         * @param imeToken Supplies the identifying token given to an input method when it was started,
         * which allows it to perform this operation on itself.
         * @param onlyCurrentIme if true, the framework will find the next subtype which
         * belongs to the current IME
         * @return true if the current input method and subtype was successfully switched to the next
         * input method and subtype.
         */
        SwitchToNextInputMethod(
            [in] IBinder* imeToken,
            [in] Boolean onlyCurrentIme,
            [out] Boolean* switched);

        /**
         * Returns true if the current IME needs to offer the users ways to switch to a next input
         * method (e.g. a globe key.).
         * When an IME sets supportsSwitchingToNextInputMethod and this method returns true,
         * the IME has to offer ways to to invoke {@link #switchToNextInputMethod} accordingly.
         * <p> Note that the system determines the most appropriate next input method
         * and subtype in order to provide the consistent user experience in switching
         * between IMEs and subtypes.
         * @param imeToken Supplies the identifying token given to an input method when it was started,
         * which allows it to perform this operation on itself.
         */
        ShouldOfferSwitchingToNextInputMethod(
            [in] IBinder* imeToken,
            [out] Boolean* result);

        /**
         * Set additional input method subtypes. Only a process which shares the same uid with the IME
         * can add additional input method subtypes to the IME.
         * Please note that a subtype's status is stored in the system.
         * For example, enabled subtypes are remembered by the framework even after they are removed
         * by using this method. If you re-add the same subtypes again,
         * they will just get enabled. If you want to avoid such conflicts, for instance, you may
         * want to create a "different" new subtype even with the same locale and mode,
         * by changing its extra value. The different subtype won't get affected by the stored past
         * status. (You may want to take a look at {@link InputMethodSubtype#hashCode()} to refer
         * to the current implementation.)
         * @param imiId Id of InputMethodInfo which additional input method subtypes will be added to.
         * @param subtypes subtypes will be added as additional subtypes of the current input method.
         */
        SetAdditionalInputMethodSubtypes(
            [in] String imiId,
            [in] ArrayOf<IInputMethodSubtype*>* subTypes);

        GetLastInputMethodSubtype(
            [out] IInputMethodSubtype** subTypes);
    }

    } // namespace InputMethod
    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
