module
{
    using interface Elastos.Utility.ICollection;
    using interface Elastos.Utility.ISet;
    using interface Elastos.Utility.IMap;

    namespace Elastos {
    namespace Droid {
    namespace Utility {

    /**
     * ArrayMap is a generic key->value mapping data structure that is
     * designed to be more memory efficient than a traditional {@link java.util.HashMap}.
     * It keeps its mappings in an array data structure -- an integer array of hash
     * codes for each item, and an Object array of the key/value pairs.  This allows it to
     * avoid having to create an extra object for every entry put in to the map, and it
     * also tries to control the growth of the size of these arrays more aggressively
     * (since growing them only requires copying the entries in the array, not rebuilding
     * a hash map).
     *
     * <p>Note that this implementation is not intended to be appropriate for data structures
     * that may contain large numbers of items.  It is generally slower than a traditional
     * HashMap, since lookups require a binary search and adds and removes require inserting
     * and deleting entries in the array.  For containers holding up to hundreds of items,
     * the performance difference is not significant, less than 50%.</p>
     *
     * <p>Because this container is intended to better balance memory use, unlike most other
     * standard Java containers it will shrink its array as items are removed from it.  Currently
     * you have no control over this shrinking -- if you set a capacity and then remove an
     * item, it may reduce the capacity to better match the current size.  In the future an
     * explicit call to set the capacity should turn off this aggressive shrinking behavior.</p>
     */
    /**
     * @Involved
     * interface IMap;
     */
    interface IArrayMap {
        /**
         * @hide
         * Like {@link #clear}, but doesn't reduce the capacity of the ArrayMap.
         */
        Erase();

        /**
         * Ensure the array map can hold at least <var>minimumCapacity</var>
         * items.
         */
        EnsureCapacity(
            [in] Int32 minimumCapacity);

        /**
         * Returns the index of a key in the set.
         *
         * @param key The key to search for.
         * @return Returns the index of the key if it exists, else a negative integer.
         */
        GetIndexOfKey(
            [in] IInterface* key,
            [out] Int32* value);

        /**
         * Return the key at the given index in the array.
         * @param index The desired index, must be between 0 and {@link #size()}-1.
         * @return Returns the key stored at the given index.
         */
        GetKeyAt(
            [in] Int32 index,
            [out] IInterface** outface);

        /**
         * Return the value at the given index in the array.
         * @param index The desired index, must be between 0 and {@link #size()}-1.
         * @return Returns the value stored at the given index.
         */
        GetValueAt(
            [in] Int32 index,
            [out] IInterface** outface);

        /**
         * Set the value at a given index in the array.
         * @param index The desired index, must be between 0 and {@link #size()}-1.
         * @param value The new value to store at this index.
         * @return Returns the previous value at the given index.
         */
        SetValueAt(
            [in] Int32 index,
            [in] IInterface* value,
            [out] IInterface** outface);

        SetValueAt(
            [in] Int32 index,
            [in] IInterface* value);

        /**
         * Special fast path for appending items to the end of the array without validation.
         * The array must already be large enough to contain the item.
         * @hide
         */
        Append(
            [in] IInterface* key,
            [in] IInterface* value);

        /**
         * The use of the {@link #append} function can result in invalid array maps, in particular
         * an array map where the same key appears multiple times.  This function verifies that
         * the array map is valid, throwing IllegalArgumentException if a problem is found.  The
         * main use for this method is validating an array map after unpacking from an IPC, to
         * protect against malicious callers.
         * @hide
         */
        Validate();

        /**
         * Perform a {@link #put(Object, Object)} of all key/value pairs in <var>array</var>
         * @param array The array whose contents are to be retrieved.
         */
        PutAll(
            [in] IArrayMap* array);

        /**
         * Remove the key/value mapping at the given index.
         * @param index The desired index, must be between 0 and {@link #size()}-1.
         * @return Returns the value that was stored at this index.
         */
        RemoveAt(
            [in] Int32 index,
            [out] IInterface** outface);

        /**
         * Determine if the array map contains all of the keys in the given collection.
         * @param collection The collection whose contents are to be checked against.
         * @return Returns true if this array map contains a key for every entry
         * in <var>collection</var>, else returns false.
         */
        ContainsAll(
            [in] ICollection* collection,
            [out] Boolean* value);

        /**
         * Remove all keys in the array map that exist in the given collection.
         * @param collection The collection whose contents are to be used to remove keys.
         * @return Returns true if any keys were removed from the array map, else false.
         */
        RemoveAll(
            [in] ICollection* collection,
            [out] Boolean* value);

        /**
         * Remove all keys in the array map that do <b>not</b> exist in the given collection.
         * @param collection The collection whose contents are to be used to determine which
         * keys to keep.
         * @return Returns true if any keys were removed from the array map, else false.
         */
        RetainAll(
            [in] ICollection* collection,
            [out] Boolean* value);

        /**
         * interfaces from IMap
         */
        Clear();

        ContainsKey(
            [in] IInterface* key,
            [out] Boolean* result);

        ContainsValue(
            [in] IInterface* value,
            [out] Boolean* result);

        GetEntrySet(
            [out] ISet** entries);

        Equals(
            [in] IInterface* object,
            [out] Boolean* result);

        Get(
            [in] IInterface* key,
            [out] IInterface** value);

        GetHashCode(
            [out] Int32* hashCode);

        IsEmpty(
            [out] Boolean* result);

        GetKeySet(
            [out] ISet** keySet);

        Put(
            [in] IInterface* key,
            [in] IInterface* value,
            [out] IInterface** oldValue);

        Put(
            [in] IInterface* key,
            [in] IInterface* value);

        PutAll(
            [in] IMap* map);

        Remove(
            [in] IInterface* key,
            [out] IInterface** value);

        Remove(
            [in] IInterface* key);

        GetSize(
            [out] Int32* size);

        GetValues(
            [out] ICollection** value);
    }

    } // namespace Utility
    } // namespace Droid
    } // namespace Elastos
}
