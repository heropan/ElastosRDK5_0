
module
{
    using interface Elastos.IO.IByteBuffer;

    interface Elastos.Droid.Hardware.Camera2.Utils.ITypeReference;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Camera2 {
    namespace Marshal {

    /**
     * Base class to marshal data to/from managed/native metadata byte buffers.
     *
     * <p>This class should not be created directly; an instance of it can be obtained
     * using {@link MarshalQueryable#createMarshaler} for the same type {@code T} if the native type
     * mapping for {@code T} {@link MarshalQueryable#isTypeMappingSupported supported}.</p>
     *
     * @param <T> the compile-time managed type
     */
    interface IMarshaler {
        /**
         * Used to denote variable-length data structures.
         *
         * <p>If the size is dynamic then we can't know ahead of time how big of a data structure
         * to preallocate for e.g. arrays, so one object must be unmarshaled at a time.</p>
         */
        const Int32 NATIVE_SIZE_DYNAMIC = -1;

        /**
         * Marshal the specified object instance (value) into a byte buffer.
         *
         * <p>Upon completion, the {@link ByteBuffer#position()} will have advanced by
         * the {@link #calculateMarshalSize marshal size} of {@code value}.</p>
         *
         * @param value the value of type T that we wish to write into the byte buffer
         * @param buffer the byte buffer into which the marshaled object will be written
         */
        Marshal(
            [in] IInterface* value,
            [in] IByteBuffer* buffer);

        /**
         * Get the size in bytes for how much space would be required to write this {@code value}
         * into a byte buffer using the given {@code nativeType}.
         *
         * <p>If the size of this {@code T} instance when serialized into a buffer is always constant,
         * then this method will always return the same value (and particularly, it will return
         * an equivalent value to {@link #getNativeSize()}.</p>
         *
         * <p>Overriding this method is a must when the size is {@link NATIVE_SIZE_DYNAMIC dynamic}.</p>
         *
         * @param value the value of type T that we wish to write into the byte buffer
         * @return the size that would need to be written to the byte buffer
         */
        CalculateMarshalSize(
            [in] IInterface* value,
            [out] Int32* outvalue);

        /**
         * Unmarshal a new object instance from the byte buffer into its managed type.
         *
         * <p>Upon completion, the {@link ByteBuffer#position()} will have advanced by
         * the {@link #calculateMarshalSize marshal size} of the returned {@code T} instance.</p>
         *
         * @param buffer the byte buffer, from which we will read the object
         * @return a new instance of type T read from the byte buffer
         */
        Unmarshal(
            [in] IByteBuffer* buffer,
            [out] IInterface** outface);

        /**
         * How many bytes a single instance of {@code T} will take up if marshalled to/from
         * {@code nativeType}.
         *
         * <p>When unmarshaling data from native to managed, the instance {@code T} is not yet
         * available. If the native size is always a fixed mapping regardless of the instance of
         * {@code T} (e.g. if the type is not a container of some sort), it can be used to preallocate
         * containers for {@code T} to avoid resizing them.</p>
         *
         * <p>In particular, the array marshaler takes advantage of this (when size is not dynamic)
         * to preallocate arrays of the right length when unmarshaling an array {@code T[]}.</p>
         *
         * @return a size in bytes, or {@link #NATIVE_SIZE_DYNAMIC} if the size is dynamic
         */
        GetNativeSize(
            [out] Int32* value);

        /**
         * The type reference for {@code T} for the managed type side of this marshaler.
         */
        GetTypeReference(
            [out] ITypeReference** outtr);

        /** The native type corresponding to this marshaler for the native side of this marshaler.*/
        GetNativeType(
            [out] Int32* value);
    }

    } // namespace Marshal
    } // namespace Camera2
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
