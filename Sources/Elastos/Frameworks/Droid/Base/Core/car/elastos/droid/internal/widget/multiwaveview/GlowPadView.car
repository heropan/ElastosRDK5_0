
module
{
    interface Elastos.Droid.Content.IComponentName;
    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IMotionEvent;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Widget {
    namespace Multiwaveview {

    [local]
    interface IOnTriggerListener
    {
        const Int32 NO_HANDLE = 0;

        const Int32 CENTER_HANDLE = 1;

        OnGrabbed(
            [in] IView* v,
            [in] Int32 handle);

        OnReleased(
            [in] IView* v,
            [in] Int32 handle);

        OnTrigger(
            [in] IView* v,
            [in] Int32 target);

        OnGrabbedStateChange(
            [in] IView* v,
            [in] Int32 handle);

        OnFinishFinalAnimation();
    }

    /**
     * @Involve
     * interface IIterable;
     * interface ICollection;
     * interface IList;
     * interface IArrayList;
     */
    interface IAnimationBundle
    {
        Start();

        Cancel();

        Stop();

        SetSuspended(
            [in] Boolean suspend);
    }

    /**
     * A re-usable widget containing a center, outer ring and wave animation.
     */
    /**
     * @Involve
     * interface IView;
     */
    [local]
    interface IGlowPadView
    {
        SuspendAnimations();

        ResumeAnimations();

        /**
         * Loads an array of drawables from the given resourceId.
         *
         * @param resourceId
         */
        SetTargetResources(
            [in] Int32 resourceId);

        GetTargetResourceId(
            [out] Int32* result);

        /**
         * Sets the resource id specifying the target descriptions for accessibility.
         *
         * @param resourceId The resource id.
         */
        SetTargetDescriptionsResourceId(
            [in] Int32 resourceId);

        /**
         * Gets the resource id specifying the target descriptions for accessibility.
         *
         * @return The resource id.
         */
        GetTargetDescriptionsResourceId(
            [out] Int32* result);

        /**
         * Sets the resource id specifying the target direction descriptions for accessibility.
         *
         * @param resourceId The resource id.
         */
        SetDirectionDescriptionsResourceId(
            [in] Int32 resourceId);

        /**
         * Gets the resource id specifying the target direction descriptions.
         *
         * @return The resource id.
         */
        GetDirectionDescriptionsResourceId(
            [out] Int32* result);

        /**
         * Enable or disable vibrate on touch.
         *
         * @param enabled
         */
        SetVibrateEnabled(
            [in] Boolean enabled);

        /**
         * Starts wave animation.
         *
         */
        Ping();

        /**
         * Resets the widget to default state and cancels all animation. If animate is 'true', will
         * animate objects into place. Otherwise, objects will snap back to place.
         *
         * @param animate
         */
        Reset(
            [in] Boolean animate);

        OnTouchEvent(
            [in] IMotionEvent* event,
            [out] Boolean* result);

        OnHoverEvent(
            [in] IMotionEvent* event,
            [out] Boolean* result);

        SetOnTriggerListener(
            [in] IOnTriggerListener* listener);

        GetResourceIdForTarget(
            [in] Int32 index,
            [out] Int32* result);

        SetEnableTarget(
            [in] Int32 resourceId,
            [in] Boolean enabled);

        /**
         * Gets the position of a target in the array that matches the given resource.
         * @param resourceId
         * @return the index or -1 if not found
         */
        GetTargetPosition(
            [in] Int32 resourceId,
            [out] Int32* result);

        /**
         * Searches the given package for a resource to use to replace the Drawable on the
         * target with the given resource id
         * @param component of the .apk that contains the resource
         * @param name of the metadata in the .apk
         * @param existingResId the resource id of the target to search for
         * @return true if found in the given package and replaced at least one target Drawables
         */
        ReplaceTargetDrawablesIfPresent(
            [in] IComponentName* component,
            [in] String name,
            [in] Int32 existingResId,
            [out] Boolean* result);
    }

    } // namespace Multiwaveview
    } // namespace Widget
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}
