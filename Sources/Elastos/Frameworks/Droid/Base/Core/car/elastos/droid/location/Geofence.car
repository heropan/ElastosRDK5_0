
module
{
    namespace Elastos {
    namespace Droid {
    namespace Location {

    /**
     * Represents a geographical boundary, also known as a geofence.
     *
     * <p>Currently only circular geofences are supported and they do not support altitude changes.
     *
     * @hide
     * @Involve interface IParcelable
     */
    interface IGeofence {
        /** @hide */
        const Int32 TYPE_HORIZONTAL_CIRCLE = 1;

        /** @hide */
        GetType(
            [out] Int32* type);

        /** @hide */
        GetLatitude(
            [out] Double* latitude);

        /** @hide */
        GetLongitude(
            [out] Double* longitude);

        /** @hide */
        GetRadius(
            [out] Float* radius);
    }

    interface IGeofenceHelper {
        /**
         * Create a circular geofence (on a flat, horizontal plane).
         *
         * @param latitude latitude in degrees
         * @param longitude longitude in degrees
         * @param radius radius in meters
         * @return a new geofence
         * @throws IllegalArgumentException if any parameters are out of range
         */
        CreateCircle(
            [in] Double latitude,
            [in] Double longitude,
            [in] Float radius,
            [out] IGeofence** geofence);
    }

    }//namespace Location
    }//namespace Droid
    }//namespace Elastos
}
