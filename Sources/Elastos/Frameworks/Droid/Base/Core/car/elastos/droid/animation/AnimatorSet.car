
module
{
    using interface Elastos.Utility.ICollection;
    using interface Elastos.Utility.IArrayList;
    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Animation {

    interface IAnimatorSetBuilder;

    /**
     * This class plays a set of Animator objects in the specified order. Animations
     * can be set up to play together, in sequence, or after a specified delay.
     *
     * @sa Animator
     * <p>
     * There are two different approaches to adding animations to a AnimatorSet: either
     * the playTogether() or playSequentially() methods can be called to add a set of
     * animations all at once, or the play(Animator) can be used in conjunction with
     * methods in the Builder class to add animations one by one.
     *
     * @sa playTogether()
     * @sa playSequentially()
     * @sa play(Animator)
     * @sa Builder
     * <p>
     * It is possible to set up a AnimatorSet with circular dependencies between its
     * animations. For example, an animation a1 could be set up to start before
     * animation a2, a2 before a3, and a3 before a1. The results of this configuration
     * are undefined, but will typically result in none of the affected animations
     * being played. Because of this (and because circular dependencies do not make
     * logical sense anyway), circular dependencies should be avoided, and the
     * dependency flow of animations should only be in one direction.
     * <p>
     * <strong>Developer Guides</strong>
     * <p>
     * For more information about animating with AnimatorSet, read the Property
     * Animation developer guide.
     *
     * @sa Property Animation
     *
     * @implements Elastos.Droid.Animation.IAnimator
     */
    /**
     * @Involve
     * interface IAnimator
     */
    [deprecated]
    interface IAnimatorSet {
        /**
         * Sets up this AnimatorSet to play all of the supplied animations at the same time.
         *
         * @param items The animations that will be started simultaneously.
         */
        PlayTogether(
            [in] ArrayOf<IAnimator*>* items);

        /**
         * Sets up this AnimatorSet to play all of the supplied animations at the same time.
         *
         * @param items The animations that will be started simultaneously.
         */
        PlayTogether(
            [in] ICollection* items);

        /**
         * Sets up this AnimatorSet to play each of the supplied animations when the
         * previous animation ends.
         *
         * @param items The animations that will be started one after another.
         */
        PlaySequentially(
            [in] ArrayOf<IAnimator*>* items);

        /**
         * Sets up this AnimatorSet to play each of the supplied animations when the
         * previous animation ends.
         *
         * @param items The animations that will be started one after another.
         */
        PlaySequentially(
            [in] IList* items);

        /**
         * Returns the current list of child Animator objects controlled by this
         * AnimatorSet. This is a copy of the internal list; modifications to the returned list
         * will not affect the AnimatorSet, although changes to the underlying Animator objects
         * will affect those objects being managed by the AnimatorSet.
         *
         * @return ArrayList<Animator> The list of child animations of this AnimatorSet.
         */
        GetChildAnimations(
            [out, callee] ArrayOf<IAnimator*>* childAnimations);

        GetChildAnimations(
            [out] IArrayList** childAnimations);

        /**
         * This method creates a <code>Builder</code> object, which is used to
         * set up playing constraints. This initial <code>play()</code> method
         * tells the <code>Builder</code> the animation that is the dependency for
         * the succeeding commands to the <code>Builder</code>. For example,
         * calling <code>play(a1).with(a2)</code> sets up the AnimatorSet to play
         * <code>a1</code> and <code>a2</code> at the same time,
         * <code>play(a1).before(a2)</code> sets up the AnimatorSet to play
         * <code>a1</code> first, followed by <code>a2</code>, and
         * <code>play(a1).after(a2)</code> sets up the AnimatorSet to play
         * <code>a2</code> first, followed by <code>a1</code>.
         *
         * <p>Note that <code>play()</code> is the only way to tell the
         * <code>Builder</code> the animation upon which the dependency is created,
         * so successive calls to the various functions in <code>Builder</code>
         * will all refer to the initial parameter supplied in <code>play()</code>
         * as the dependency of the other animations. For example, calling
         * <code>play(a1).before(a2).before(a3)</code> will play both <code>a2</code>
         * and <code>a3</code> when a1 ends; it does not set up a dependency between
         * <code>a2</code> and <code>a3</code>.</p>
         *
         * @param anim The animation that is the dependency used in later calls to the
         * methods in the returned <code>Builder</code> object. A null parameter will result
         * in a null <code>Builder</code> return value.
         * @return Builder The object that constructs the AnimatorSet based on the dependencies
         * outlined in the calls to <code>play</code> and the other methods in the
         * <code>Builder</code object.
         */
        Play(
            [in] IAnimator* anim,
            [out] IAnimatorSetBuilder** builder);
    }

    /**
     * The <code>Builder</code> object is a utility class to facilitate adding animations to a
     * <code>AnimatorSet</code> along with the relationships between the various animations. The
     * intention of the <code>Builder</code> methods, along with the {@link
     * AnimatorSet#play(Animator) play()} method of <code>AnimatorSet</code> is to make it possible
     * to express the dependency relationships of animations in a natural way. Developers can also
     * use the {@link AnimatorSet#playTogether(Animator[]) playTogether()} and {@link
     * AnimatorSet#playSequentially(Animator[]) playSequentially()} methods if these suit the need,
     * but it might be easier in some situations to express the AnimatorSet of animations in pairs.
     * <p/>
     * <p>The <code>Builder</code> object cannot be constructed directly, but is rather constructed
     * internally via a call to {@link AnimatorSet#play(Animator)}.</p>
     * <p/>
     * <p>For example, this sets up a AnimatorSet to play anim1 and anim2 at the same time, anim3 to
     * play when anim2 finishes, and anim4 to play when anim3 finishes:</p>
     * <pre>
     *     AnimatorSet s = new AnimatorSet();
     *     s.play(anim1).with(anim2);
     *     s.play(anim2).before(anim3);
     *     s.play(anim4).after(anim3);
     * </pre>
     * <p/>
     * <p>Note in the example that both {@link Builder#before(Animator)} and {@link
     * Builder#after(Animator)} are used. These are just different ways of expressing the same
     * relationship and are provided to make it easier to say things in a way that is more natural,
     * depending on the situation.</p>
     * <p/>
     * <p>It is possible to make several calls into the same <code>Builder</code> object to express
     * multiple relationships. However, note that it is only the animation passed into the initial
     * {@link AnimatorSet#play(Animator)} method that is the dependency in any of the successive
     * calls to the <code>Builder</code> object. For example, the following code starts both anim2
     * and anim3 when anim1 ends; there is no direct dependency relationship between anim2 and
     * anim3:
     * <pre>
     *   AnimatorSet s = new AnimatorSet();
     *   s.play(anim1).before(anim2).before(anim3);
     * </pre>
     * If the desired result is to play anim1 then anim2 then anim3, this code expresses the
     * relationship correctly:</p>
     * <pre>
     *   AnimatorSet s = new AnimatorSet();
     *   s.play(anim1).before(anim2);
     *   s.play(anim2).before(anim3);
     * </pre>
     * <p/>
     * <p>Note that it is possible to express relationships that cannot be resolved and will not
     * result in sensible results. For example, <code>play(anim1).after(anim1)</code> makes no
     * sense. In general, circular dependencies like this one (or more indirect ones where a depends
     * on b, which depends on c, which depends on a) should be avoided. Only create AnimatorSets
     * that can boil down to a simple, one-way relationship of animations starting with, before, and
     * after other, different, animations.</p>
     */
    interface IAnimatorSetBuilder {
        /**
         * Sets up the given animation to play at the same time as the animation supplied in the
         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object.
         *
         * @param anim The animation that will play when the animation supplied to the
         * {@link AnimatorSet#play(Animator)} method starts.
         */
        With(
            [in] IAnimator* anim);

        /**
         * Sets up the given animation to play when the animation supplied in the
         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
         * ends.
         *
         * @param anim The animation that will play when the animation supplied to the
         * {@link AnimatorSet#play(Animator)} method ends.
         */
        Before(
            [in] IAnimator* anim);

        /**
         * Sets up the given animation to play when the animation supplied in the
         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
         * to start when the animation supplied in this method call ends.
         *
         * @param anim The animation whose end will cause the animation supplied to the
         * {@link AnimatorSet#play(Animator)} method to play.
         */
        After(
            [in] IAnimator* anim);

        /**
         * Sets up the animation supplied in the
         * {@link AnimatorSet#play(Animator)} call that created this <code>Builder</code> object
         * to play when the given amount of time elapses.
         *
         * @param delay The number of milliseconds that should elapse before the
         * animation starts.
         */
        After(
            [in] Int64 delay);
    }

    /**
     * @Involve
     * interface IAnimatorListener
     */
    interface IDependencyListener {
    }

    /**
     * @Involve
     * interface IAnimatorListener
     */
    interface IAnimatorSetListener {
    }

    }   //namespace Animation
    }   //namespace Droid
    }   //namespace Elastos
}
