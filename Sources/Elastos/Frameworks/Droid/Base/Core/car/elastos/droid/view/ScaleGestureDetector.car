
module
{
    namespace Elastos {
    namespace Droid {
    namespace View {

    /**
     * Detects scaling transformation gestures using the supplied {@link MotionEvent}s.
     * The {@link OnScaleGestureListener} callback will notify users when a particular
     * gesture event has occurred.
     *
     * This class should only be used with {@link MotionEvent}s reported via touch.
     *
     * To use this class:
     * <ul>
     *  <li>Create an instance of the {@code ScaleGestureDetector} for your
     *      {@link View}
     *  <li>In the {@link View#onTouchEvent(MotionEvent)} method ensure you call
     *          {@link #onTouchEvent(MotionEvent)}. The methods defined in your
     *          callback will be executed when the events occur.
     * </ul>
     */
    interface IScaleGestureDetector {
        /**
         * Accepts MotionEvents and dispatches events to a {@link OnScaleGestureListener}
         * when appropriate.
         *
         * <p>Applications should pass a complete and consistent event stream to this method.
         * A complete and consistent event stream involves all MotionEvents from the initial
         * ACTION_DOWN to the final ACTION_UP or ACTION_CANCEL.</p>
         *
         * @param event The event to process
         * @return true if the event was processed and the detector wants to receive the
         *         rest of the MotionEvents in this event stream.
         */
        OnTouchEvent(
            [in] IMotionEvent* event,
            [out] Boolean* result);

        /**
         * Set whether the associated {@link OnScaleGestureListener} should receive onScale callbacks
         * when the user performs a doubleTap followed by a swipe. Note that this is enabled by default
         * if the app targets API 19 and newer.
         * @param scales true to enable quick scaling, false to disable
         */
        SetQuickScaleEnabled(
            [in] Boolean scales);

        /**
         * Return whether the quick scale gesture, in which the user performs a double tap followed by a
         * swipe, should perform scaling. {@see #setQuickScaleEnabled(boolean)}.
         */
        IsQuickScaleEnabled(
            [out] Boolean* result);

        /**
         * Returns {@code true} if a scale gesture is in progress.
         */
        IsInProgress(
            [out] Boolean* result);

        /**
         * Get the X coordinate of the current gesture's focal point.
         * If a gesture is in progress, the focal point is between
         * each of the pointers forming the gesture.
         *
         * If {@link #isInProgress()} would return false, the result of this
         * function is undefined.
         *
         * @return X coordinate of the focal point in pixels.
         */
        GetFocusX(
            [out] Float* result);

        /**
         * Get the Y coordinate of the current gesture's focal point.
         * If a gesture is in progress, the focal point is between
         * each of the pointers forming the gesture.
         *
         * If {@link #isInProgress()} would return false, the result of this
         * function is undefined.
         *
         * @return Y coordinate of the focal point in pixels.
         */
        GetFocusY(
            [out] Float* result);

        /**
         * Return the average distance between each of the pointers forming the
         * gesture in progress through the focal point.
         *
         * @return Distance between pointers in pixels.
         */
        GetCurrentSpan(
            [out] Float* span);

        /**
         * Return the average X distance between each of the pointers forming the
         * gesture in progress through the focal point.
         *
         * @return Distance between pointers in pixels.
         */
        GetCurrentSpanX(
            [out] Float* spanX);

        /**
         * Return the average Y distance between each of the pointers forming the
         * gesture in progress through the focal point.
         *
         * @return Distance between pointers in pixels.
         */
        GetCurrentSpanY(
            [out] Float* spanY);

        /**
         * Return the previous average distance between each of the pointers forming the
         * gesture in progress through the focal point.
         *
         * @return Previous distance between pointers in pixels.
         */
        GetPreviousSpan(
            [out] Float* span);

        /**
         * Return the previous average X distance between each of the pointers forming the
         * gesture in progress through the focal point.
         *
         * @return Previous distance between pointers in pixels.
         */
        GetPreviousSpanX(
            [out] Float* spanX);

        /**
         * Return the previous average Y distance between each of the pointers forming the
         * gesture in progress through the focal point.
         *
         * @return Previous distance between pointers in pixels.
         */
        GetPreviousSpanY(
            [out] Float* spanY);

        /**
         * Return the scaling factor from the previous scale event to the current
         * event. This value is defined as
         * ({@link #getCurrentSpan()} / {@link #getPreviousSpan()}).
         *
         * @return The current scaling factor.
         */
        GetScaleFactor(
            [out] Float* factor);

        /**
         * Return the time difference in milliseconds between the previous
         * accepted scaling event and the current scaling event.
         *
         * @return Time difference since the last scaling event in milliseconds.
         */
        GetTimeDelta(
            [out] Int64* delta);

        /**
         * Return the event time of the current event being processed.
         *
         * @return Current event time in milliseconds.
         */
        GetEventTime(
            [out] Int64* delta);
    }

    /**
     * The listener for receiving notifications when gestures occur.
     * If you want to listen for all the different gestures then implement
     * this interface. If you only want to listen for a subset it might
     * be easier to extend {@link SimpleOnScaleGestureListener}.
     *
     * An application will receive events in the following order:
     * <ul>
     *  <li>One {@link OnScaleGestureListener#onScaleBegin(ScaleGestureDetector)}
     *  <li>Zero or more {@link OnScaleGestureListener#onScale(ScaleGestureDetector)}
     *  <li>One {@link OnScaleGestureListener#onScaleEnd(ScaleGestureDetector)}
     * </ul>
     */
    interface IScaleGestureDetectorOnScaleGestureListener {
        /**
         * Responds to scaling events for a gesture in progress.
         * Reported by pointer motion.
         *
         * @param detector The detector reporting the event - use this to
         *          retrieve extended info about event state.
         * @return Whether or not the detector should consider this event
         *          as handled. If an event was not handled, the detector
         *          will continue to accumulate movement until an event is
         *          handled. This can be useful if an application, for example,
         *          only wants to update scaling factors if the change is
         *          greater than 0.01.
         */
        OnScale(
            [in] IScaleGestureDetector* detector,
            [out] Boolean* res);

        /**
         * Responds to the beginning of a scaling gesture. Reported by
         * new pointers going down.
         *
         * @param detector The detector reporting the event - use this to
         *          retrieve extended info about event state.
         * @return Whether or not the detector should continue recognizing
         *          this gesture. For example, if a gesture is beginning
         *          with a focal point outside of a region where it makes
         *          sense, onScaleBegin() may return false to ignore the
         *          rest of the gesture.
         */
        OnScaleBegin(
            [in] IScaleGestureDetector* detector,
            [out] Boolean* res);

        /**
         * Responds to the end of a scale gesture. Reported by existing
         * pointers going up.
         *
         * Once a scale has ended, {@link ScaleGestureDetector#getFocusX()}
         * and {@link ScaleGestureDetector#getFocusY()} will return focal point
         * of the pointers remaining on the screen.
         *
         * @param detector The detector reporting the event - use this to
         *          retrieve extended info about event state.
         */
        OnScaleEnd(
            [in] IScaleGestureDetector* detector);
    }

    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
