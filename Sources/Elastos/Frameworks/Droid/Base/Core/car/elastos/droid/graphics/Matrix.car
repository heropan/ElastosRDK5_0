
module
{
    using interface Elastos.Core.IStringBuilder;
    using interface Elastos.IO.IPrintWriter;

    interface Elastos.Droid.Graphics.IRectF;

    namespace Elastos {
    namespace Droid {
    namespace Graphics {

    /**
     * Controlls how the src rect should align into the dst rect for
     * setRectToRect().
     */
    enum MatrixScaleToFit {
        /**
         * Scale in X and Y independently, so that src matches dst exactly.
         * This may change the aspect ratio of the src.
         */
        MatrixScaleToFit_FILL = 0,

        /**
         * Compute a scale that will maintain the original src aspect ratio,
         * but will also ensure that src fits entirely inside dst. At least one
         * axis (X or Y) will fit exactly. START aligns the result to the
         * left and top edges of dst.
         */
        MatrixScaleToFit_START = 1,

        /**
         * Compute a scale that will maintain the original src aspect ratio,
         * but will also ensure that src fits entirely inside dst. At least one
         * axis (X or Y) will fit exactly. The result is centered inside dst.
         */
        MatrixScaleToFit_CENTER = 2,

        /**
         * Compute a scale that will maintain the original src aspect ratio,
         * but will also ensure that src fits entirely inside dst. At least one
         * axis (X or Y) will fit exactly. END aligns the result to the
         * right and bottom edges of dst.
         */
        MatrixScaleToFit_END = 3,
    }

    /**
     * The Matrix class holds a 3x3 matrix for transforming coordinates.
     * Matrix does not have a constructor, so it must be explicitly initialized
     * using either reset() - to construct an identity matrix, or one of the set..()
     * functions (e.g. setTranslate, setRotate, etc.).
     */

    [deprecated]
    interface IMatrix {
        const Int32 MSCALE_X = 0;   //!< use with getValues/setValues
        const Int32 MSKEW_X  = 1;   //!< use with getValues/setValues
        const Int32 MTRANS_X = 2;   //!< use with getValues/setValues
        const Int32 MSKEW_Y  = 3;   //!< use with getValues/setValues
        const Int32 MSCALE_Y = 4;   //!< use with getValues/setValues
        const Int32 MTRANS_Y = 5;   //!< use with getValues/setValues
        const Int32 MPERSP_0 = 6;   //!< use with getValues/setValues
        const Int32 MPERSP_1 = 7;   //!< use with getValues/setValues
        const Int32 MPERSP_2 = 8;   //!< use with getValues/setValues

        /**
         * Copy 9 values from the matrix into the array.
         */
        GetValues(
            [in /* out */] ArrayOf<Float>* values);

        /**
         * If this matrix can be inverted, return true and if inverse is not null,
         * set inverse to be the inverse of this matrix. If this matrix cannot be
         * inverted, ignore inverse and return false.
         */
        Invert(
            [in] IMatrix* inverse,
            [out] Boolean* result);

        /**
         * Returns true if the matrix is identity.
         * This maybe faster than testing if (getType() == 0)
         */
        IsIdentity(
            [out] Boolean* isIdentity);

        /**
         * Gets whether this matrix is affine. An affine matrix preserves
         * straight lines and has no perspective.
         *
         * @return Whether the matrix is affine.
         */
        IsAffine(
            [out] Boolean* isAffine);

        /**
         * Apply this matrix to the array of 2D points specified by src, and write
         * the transformed points into the array of points specified by dst. The
         * two arrays represent their "points" as pairs of floats [x, y].
         *
         * @param dst   The array of dst points (x,y pairs)
         * @param dstIndex The index of the first [x,y] pair of dst floats
         * @param src   The array of src points (x,y pairs)
         * @param srcIndex The index of the first [x,y] pair of src floats
         * @param pointCount The number of points (x,y pairs) to transform
         */
        MapPoints(
            [in] ArrayOf<Float>* dst,
            [in] Int32 dstIndex,
            [in] ArrayOf<Float>* src,
            [in] Int32 srcIndex,
            [in] Int32 pointCount);

        /**
         * Apply this matrix to the array of 2D points specified by src, and write
         * the transformed points into the array of points specified by dst. The
         * two arrays represent their "points" as pairs of floats [x, y].
         *
         * @param dst   The array of dst points (x,y pairs)
         * @param src   The array of src points (x,y pairs)
         */
        MapPoints(
            [in /* out*/] ArrayOf<Float>* dst,
            [in] ArrayOf<Float>* src);

        /**
         * Apply this matrix to the array of 2D points, and write the transformed
         * points back into the array
         *
         * @param pts The array [x0, y0, x1, y1, ...] of points to transform.
         */
        MapPoints(
            [in /* out */] ArrayOf<Float>* pts);

        /**
         * Return the mean radius of a circle after it has been mapped by
         * this matrix. NOTE: in perspective this value assumes the circle
         * has its center at the origin.
         */
        MapRadius(
            [in] Float radius,
            [out] Float* result);

        /**
         * Apply this matrix to the src rectangle, and write the transformed
         * rectangle into dst. This is accomplished by transforming the 4 corners of
         * src, and then setting dst to the bounds of those points.
         *
         * @param dst Where the transformed rectangle is written.
         * @param src The original rectangle to be transformed.
         * @return the result of calling rectStaysRect()
         */
        MapRect(
            [in] IRectF* dst,
            [in] IRectF* src,
            [out] Boolean* result);

        /**
         * Apply this matrix to the rectangle, and write the transformed rectangle
         * back into it. This is accomplished by transforming the 4 corners of rect,
         * and then setting it to the bounds of those points
         *
         * @param rect The rectangle to transform.
         * @return the result of calling rectStaysRect()
         */
        MapRect(
            [in] IRectF* rect,
            [out] Boolean* result);

        /**
         * Apply this matrix to the array of 2D vectors specified by src, and write
         * the transformed vectors into the array of vectors specified by dst. The
         * two arrays represent their "vectors" as pairs of floats [x, y].
         *
         * Note: this method does not apply the translation associated with the matrix.
         * Use Matrix#mapPoints(float[], int, float[], int, int) if you want the translation to be applied.
         *
         * @sa Matrix#mapPoints(float[], int, float[], int, int)
         *
         * @param dst   The array of dst vectors (x,y pairs)
         * @param dstIndex The index of the first [x,y] pair of dst floats
         * @param src   The array of src vectors (x,y pairs)
         * @param srcIndex The index of the first [x,y] pair of src floats
         * @param vectorCount The number of vectors (x,y pairs) to transform
         */
        MapVectors(
            [in /* out */] ArrayOf<Float>* dst,
            [in] Int32 dstIndex,
            [in] ArrayOf<Float>* src,
            [in] Int32 srcIndex,
            [in] Int32 vectorCount);

        /**
         * Apply this matrix to the array of 2D vectors specified by src, and write
         * the transformed vectors into the array of vectors specified by dst. The
         * two arrays represent their "vectors" as pairs of floats [x, y].
         *
         * Note: this method does not apply the translation associated with the matrix. Use
         * Matrix#mapPoints(float[],float[]) if you want the translation to be applied.
         *
         * @sa Matrix#mapPoints(float[], float[])
         *
         * @param dst   The array of dst vectors (x,y pairs)
         * @param src   The array of src vectors (x,y pairs)
         */
        MapVectors(
            [in /* out */] ArrayOf<Float>* dst,
            [in] ArrayOf<Float>* src);

        /**
         * Apply this matrix to the array of 2D vectors, and write the transformed
         * vectors back into the array.
         *
         * Note: this method does not apply the translation associated with the matrix. Use
         * Matrix#mapPoints(float[]) if you want the translation to be applied.
         *
         * @sa Matrix#mapPoints(float[])
         *
         * @param vecs The array [x0, y0, x1, y1, ...] of vectors to transform.
         */
        MapVectors(
            [in /* out */] ArrayOf<Float>* vecs);

        /**
         * Postconcats the matrix with the specified matrix.
         * M' = other * M
         */
        PostConcat(
            [in] IMatrix* other,
            [out] Boolean* result);

        /**
         * Postconcats the matrix with the specified rotation.
         * M' = R(degrees, px, py) * M
         */
        PostRotate(
            [in] Float degrees,
            [in] Float px,
            [in] Float py,
            [out] Boolean* result);

        /**
         * Postconcats the matrix with the specified rotation.
         * M' = R(degrees) * M
         */
        PostRotate(
            [in] Float degrees,
            [out] Boolean* result);

        /**
         * Postconcats the matrix with the specified scale.
         * M' = S(sx, sy, px, py) * M
         */
        PostScale(
            [in] Float sx,
            [in] Float sy,
            [in] Float px,
            [in] Float py,
            [out] Boolean* result);

        /**
         * Postconcats the matrix with the specified scale.
         * M' = S(sx, sy) * M
         */
        PostScale(
            [in] Float sx,
            [in] Float sy,
            [out] Boolean* result);

        /**
         * Postconcats the matrix with the specified skew.
         * M' = K(kx, ky, px, py) * M
         */
        PostSkew(
            [in] Float kx,
            [in] Float ky,
            [in] Float px,
            [in] Float py,
            [out] Boolean* result);

        /**
         * Postconcats the matrix with the specified skew.
         * M' = K(kx, ky) * M
         */
        PostSkew(
            [in] Float kx,
            [in] Float ky,
            [out] Boolean* result);

        /**
         * Postconcats the matrix with the specified translation.
         * M' = T(dx, dy) * M
         */
        PostTranslate(
            [in] Float dx,
            [in] Float dy,
            [out] Boolean* result);

        /**
         * Preconcats the matrix with the specified matrix.
         * M' = M * other
         */
        PreConcat(
            [in] IMatrix* other,
            [out] Boolean* result);

        /**
         * Preconcats the matrix with the specified rotation.
         * M' = M * R(degrees, px, py)
         */
        PreRotate(
            [in] Float degrees,
            [in] Float px,
            [in] Float py,
            [out] Boolean* result);

        /**
         * Preconcats the matrix with the specified rotation.
         * M' = M * R(degrees)
         */
        PreRotate(
            [in] Float degrees,
            [out] Boolean* result);

        /**
         * Preconcats the matrix with the specified scale.
         * M' = M * S(sx, sy, px, py)
         */
        PreScale(
            [in] Float sx,
            [in] Float sy,
            [in] Float px,
            [in] Float py,
            [out] Boolean* result);

        /**
         * Preconcats the matrix with the specified scale.
         * M' = M * S(sx, sy)
         */
        PreScale(
            [in] Float sx,
            [in] Float sy,
            [out] Boolean* result);

        /**
         * Preconcats the matrix with the specified skew.
         * M' = M * K(kx, ky, px, py)
         */
        PreSkew(
            [in] Float kx,
            [in] Float ky,
            [in] Float px,
            [in] Float py,
            [out] Boolean* result);

        /**
         * Preconcats the matrix with the specified skew.
         * M' = M * K(kx, ky)
         */
        PreSkew(
            [in] Float kx,
            [in] Float ky,
            [out] Boolean* result);

        /**
         * Preconcats the matrix with the specified translation.
         * M' = M * T(dx, dy)
         */
        PreTranslate(
            [in] Float dx,
            [in] Float dy,
            [out] Boolean* result);

        /**
         * Print short string, to optimize dumping.
         * @hide
         */
        PrintShortString(
            [in] IPrintWriter* pw);

        /**
         * Returns true if will map a rectangle to another rectangle. This can be
         * true if the matrix is identity, scale-only, or rotates a multiple of 90
         * degrees.
         */
        RectStaysRect(
            [out] Boolean* result);

        /**
         * Set the matrix to identity
         */
        Reset();

        /**
         * (deep) copy the src matrix into this matrix. If src is null, reset this
         * matrix to the identity matrix.
         */
        Set(
            [in] IMatrix* src);

        /**
         * Set the matrix to the concatenation of the two specified matrices,
         * returning true if the the result can be represented. Either of the two
         * matrices may also be the target matrix. this = a * b
         */
        SetConcat(
            [in] IMatrix* a,
            [in] IMatrix* b,
            [out] Boolean* result);

        /**
         * Set the matrix such that the specified src points would map to the
         * specified dst points. The "points" are represented as an array of floats,
         * order [x0, y0, x1, y1, ...], where each "point" is 2 float values.
         *
         * @param src   The array of src [x,y] pairs (points)
         * @param srcIndex Index of the first pair of src values
         * @param dst   The array of dst [x,y] pairs (points)
         * @param dstIndex Index of the first pair of dst values
         * @param pointCount The number of pairs/points to be used. Must be [0..4]
         * @return true if the matrix was set to the specified transformation
         */
        SetPolyToPoly(
            [in] ArrayOf<Float>* src,
            [in] Int32 srcIndex,
            [in] ArrayOf<Float>* dst,
            [in] Int32 dstIndex,
            [in] Int32 pointCount,
            [out] Boolean* result);

        /**
         * Set the matrix to the scale and translate values that map the source
         * rectangle to the destination rectangle, returning true if the the result
         * can be represented.
         *
         * @param src the source rectangle to map from.
         * @param dst the destination rectangle to map to.
         * @param stf the ScaleToFit option
         * @return true if the matrix can be represented by the rectangle mapping.
         */
        SetRectToRect(
            [in] IRectF* src,
            [in] IRectF* dst,
            [in] MatrixScaleToFit stf,
            [out] Boolean* result);

        /**
         * Set the matrix to rotate by the specified number of degrees, with a pivot
         * point at (px, py). The pivot point is the coordinate that should remain
         * unchanged by the specified transformation.
         */
        SetRotate(
            [in] Float degrees,
            [in] Float px,
            [in] Float py);

        /**
         * Set the matrix to rotate about (0,0) by the specified number of degrees.
         */
        SetRotate(
            [in] Float degrees);

        /**
         * Set the matrix to scale by sx and sy, with a pivot point at (px, py).
         * The pivot point is the coordinate that should remain unchanged by the
         * specified transformation.
         */
        SetScale(
            [in] Float sx,
            [in] Float sy,
            [in] Float px,
            [in] Float py);

        /**
         * Set the matrix to scale by sx and sy.
         */
        SetScale(
            [in] Float sx,
            [in] Float sy);

        /**
         * Set the matrix to rotate by the specified sine and cosine values, with a
         * pivot point at (px, py). The pivot point is the coordinate that should
         * remain unchanged by the specified transformation.
         */
        SetSinCos(
            [in] Float sinValue,
            [in] Float cosValue,
            [in] Float px,
            [in] Float py);

        /**
         * Set the matrix to rotate by the specified sine and cosine values.
         */
        SetSinCos(
            [in] Float sinValue,
            [in] Float cosValue);

        /**
         * Set the matrix to skew by sx and sy, with a pivot point at (px, py).
         * The pivot point is the coordinate that should remain unchanged by the
         * specified transformation.
         */
        SetSkew(
            [in] Float kx,
            [in] Float ky,
            [in] Float px,
            [in] Float py);

        /**
         * Set the matrix to skew by sx and sy.
         */
        SetSkew(
            [in] Float kx,
            [in] Float ky);

        /**
         * Set the matrix to translate by (dx, dy).
         */
        SetTranslate(
            [in] Float dx,
            [in] Float dy);

        /**
         * Copy 9 values from the array into the matrix.
         * Depending on the implementation of Matrix, these may be
         * transformed into 16.16 integers in the Matrix, such that
         * a subsequent call to getValues() will not yield exactly
         * the same values.
         */
        SetValues(
            [in] ArrayOf<Float>* values);

        ToShortString(
            [out] String* str);

        /**
         * @hide
         */
        ToShortString(
            [in] IStringBuilder* sb);
    }

    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
