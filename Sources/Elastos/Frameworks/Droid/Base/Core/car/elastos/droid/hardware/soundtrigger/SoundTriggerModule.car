
module
{
    interface Elastos.Droid.Hardware.Soundtrigger.ISoundTriggerSoundModel;
    interface Elastos.Droid.Hardware.Soundtrigger.ISoundTriggerRecognitionConfig;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Soundtrigger {

    /**
     * The SoundTriggerModule provides APIs to control sound models and sound detection
     * on a given sound trigger hardware module.
     *
     * @hide
     */
    [deprecated]
    interface ISoundTriggerModule {
        /**
         * Detach from this module. The {@link SoundTrigger.StatusListener} callback will not be called
         * anymore and associated resources will be released.
         * */
        NativeDetach();

        /**
         * Load a {@link SoundTrigger.SoundModel} to the hardware. A sound model must be loaded in
         * order to start listening to a key phrase in this model.
         * @param model The sound model to load.
         * @param soundModelHandle an array of int where the sound model handle will be returned.
         * @return - {@link SoundTrigger#STATUS_OK} in case of success
         *         - {@link SoundTrigger#STATUS_ERROR} in case of unspecified error
         *         - {@link SoundTrigger#STATUS_PERMISSION_DENIED} if the caller does not have
         *         system permission
         *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached
         *         - {@link SoundTrigger#STATUS_BAD_VALUE} if parameters are invalid
         *         - {@link SoundTrigger#STATUS_DEAD_OBJECT} if the binder transaction to the native
         *         service fails
         *         - {@link SoundTrigger#STATUS_INVALID_OPERATION} if the call is out of sequence
         */
        NativeLoadSoundModel(
            [in] ISoundTriggerSoundModel* model,
            [in] ArrayOf<Int32>* soundModelHandle,
            [out] Int32* result);

        /**
         * Unload a {@link SoundTrigger.SoundModel} and abort any pendiong recognition
         * @param soundModelHandle The sound model handle
         * @return - {@link SoundTrigger#STATUS_OK} in case of success
         *         - {@link SoundTrigger#STATUS_ERROR} in case of unspecified error
         *         - {@link SoundTrigger#STATUS_PERMISSION_DENIED} if the caller does not have
         *         system permission
         *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached
         *         - {@link SoundTrigger#STATUS_BAD_VALUE} if the sound model handle is invalid
         *         - {@link SoundTrigger#STATUS_DEAD_OBJECT} if the binder transaction to the native
         *         service fails
         */
        NativeUnloadSoundModel(
            [in] Int32 soundModelHandle,
            [out] Int32* result);

        /**
         * Start listening to all key phrases in a {@link SoundTrigger.SoundModel}.
         * Recognition must be restarted after each callback (success or failure) received on
         * the {@link SoundTrigger.StatusListener}.
         * @param soundModelHandle The sound model handle to start listening to
         * @param config contains configuration information for this recognition request:
         *  recognition mode, keyphrases, users, minimum confidence levels...
         * @return - {@link SoundTrigger#STATUS_OK} in case of success
         *         - {@link SoundTrigger#STATUS_ERROR} in case of unspecified error
         *         - {@link SoundTrigger#STATUS_PERMISSION_DENIED} if the caller does not have
         *         system permission
         *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached
         *         - {@link SoundTrigger#STATUS_BAD_VALUE} if the sound model handle is invalid
         *         - {@link SoundTrigger#STATUS_DEAD_OBJECT} if the binder transaction to the native
         *         service fails
         *         - {@link SoundTrigger#STATUS_INVALID_OPERATION} if the call is out of sequence
         */
        NativeStartRecognition(
            [in] Int32 soundModelHandle,
            [in] ISoundTriggerRecognitionConfig* config,
            [out] Int32* result);

        /**
         * Stop listening to all key phrases in a {@link SoundTrigger.SoundModel}
         * @param soundModelHandle The sound model handle to stop listening to
         * @return - {@link SoundTrigger#STATUS_OK} in case of success
         *         - {@link SoundTrigger#STATUS_ERROR} in case of unspecified error
         *         - {@link SoundTrigger#STATUS_PERMISSION_DENIED} if the caller does not have
         *         system permission
         *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached
         *         - {@link SoundTrigger#STATUS_BAD_VALUE} if the sound model handle is invalid
         *         - {@link SoundTrigger#STATUS_DEAD_OBJECT} if the binder transaction to the native
         *         service fails
         *         - {@link SoundTrigger#STATUS_INVALID_OPERATION} if the call is out of sequence
         */
        NativeStopRecognition(
            [in] Int32 soundModelHandle,
            [out] Int32* result);
    }

    } // namespace Soundtrigger
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
