
module
{
    interface Elastos.Droid.Graphics.IPoint;
    interface Elastos.Droid.Graphics.IRect;
    interface Elastos.Droid.Utility.IDisplayMetrics;
    interface Elastos.Droid.View.IDisplayInfo;
    interface Elastos.Droid.View.IDisplayAdjustments;

    namespace Elastos {
    namespace Droid {
    namespace View {

    /**
     * Provides information about the size and density of a logical display.
     * <p>
     * The display area is described in two different ways.
     * <ul>
     * <li>The application display area specifies the part of the display that may contain
     * an application window, excluding the system decorations.  The application display area may
     * be smaller than the real display area because the system subtracts the space needed
     * for decor elements such as the status bar.  Use the following methods to query the
     * application display area: {@link #getSize}, {@link #getRectSize} and {@link #getMetrics}.</li>
     * <li>The real display area specifies the part of the display that contains content
     * including the system decorations.  Even so, the real display area may be smaller than the
     * physical size of the display if the window manager is emulating a smaller display
     * using (adb shell am display-size).  Use the following methods to query the
     * real display area: {@link #getRealSize}, {@link #getRealMetrics}.</li>
     * </ul>
     * </p><p>
     * A logical display does not necessarily represent a particular physical display device
     * such as the built-in screen or an external monitor.  The contents of a logical
     * display may be presented on one or more physical displays according to the devices
     * that are currently attached and whether mirroring has been enabled.
     * </p>
     */
    interface IDisplay {
        /**
         * The default Display id, which is the id of the built-in primary display
         * assuming there is one.
         */
        const Int32 DEFAULT_DISPLAY = 0;

        /**
         * Display flag: Indicates that the display supports compositing content
         * that is stored in protected graphics buffers.
         * <p>
         * If this flag is set then the display device supports compositing protected buffers.
         * </p><p>
         * If this flag is not set then the display device may not support compositing
         * protected buffers; the user may see a blank region on the screen instead of
         * the protected content.
         * </p><p>
         * Secure (DRM) video decoders may allocate protected graphics buffers to request that
         * a hardware-protected path be provided between the video decoder and the external
         * display sink.  If a hardware-protected path is not available, then content stored
         * in protected graphics buffers may not be composited.
         * </p><p>
         * An application can use the absence of this flag as a hint that it should not use protected
         * buffers for this display because the content may not be visible.  For example,
         * if the flag is not set then the application may choose not to show content on this
         * display, show an informative error message, select an alternate content stream
         * or adopt a different strategy for decoding content that does not rely on
         * protected buffers.
         * </p>
         *
         * @see #getFlags
         */
        const Int32 FLAG_SUPPORTS_PROTECTED_BUFFERS = 1 << 0;

        /**
         * Display flag: Indicates that the display has a secure video output and
         * supports compositing secure surfaces.
         * <p>
         * If this flag is set then the display device has a secure video output
         * and is capable of showing secure surfaces.  It may also be capable of
         * showing {@link #FLAG_SUPPORTS_PROTECTED_BUFFERS protected buffers}.
         * </p><p>
         * If this flag is not set then the display device may not have a secure video
         * output; the user may see a blank region on the screen instead of
         * the contents of secure surfaces or protected buffers.
         * </p><p>
         * Secure surfaces are used to prevent content rendered into those surfaces
         * by applications from appearing in screenshots or from being viewed
         * on non-secure displays.  Protected buffers are used by secure video decoders
         * for a similar purpose.
         * </p><p>
         * An application creates a window with a secure surface by specifying the
         * {@link WindowManager.LayoutParams#FLAG_SECURE} window flag.
         * Likewise, an application creates a {@link SurfaceView} with a secure surface
         * by calling {@link SurfaceView#setSecure} before attaching the secure view to
         * its containing window.
         * </p><p>
         * An application can use the absence of this flag as a hint that it should not create
         * secure surfaces or protected buffers on this display because the content may
         * not be visible.  For example, if the flag is not set then the application may
         * choose not to show content on this display, show an informative error message,
         * select an alternate content stream or adopt a different strategy for decoding
         * content that does not rely on secure surfaces or protected buffers.
         * </p>
         *
         * @see #getFlags
         */
        const Int32 FLAG_SECURE = 1 << 1;

        /**
         * Display flag: Indicates that the display is private.  Only the application that
         * owns the display can create windows on it.
         *
         * @see #getFlags
         */
        const Int32 FLAG_PRIVATE = 1 << 2;

        /**
         * Display flag: Indicates that the display is a presentation display.
         * <p>
         * This flag identifies secondary displays that are suitable for
         * use as presentation displays such as HDMI or Wireless displays.  Applications
         * may automatically project their content to presentation displays to provide
         * richer second screen experiences.
         * </p>
         *
         * @see #getFlags
         */
        const Int32 FLAG_PRESENTATION = 1 << 3;

        /**
         * Display type: Unknown display type.
         * @hide
         */
        const Int32 TYPE_UNKNOWN = 0;

        /**
         * Display type: Built-in display.
         * @hide
         */
        const Int32 TYPE_BUILT_IN = 1;

        /**
         * Display type: HDMI display.
         * @hide
         */
        const Int32 TYPE_HDMI = 2;

        /**
         * Display type: WiFi display.
         * @hide
         */
        const Int32 TYPE_WIFI = 3;

        /**
         * Display type: Overlay display.
         * @hide
         */
        const Int32 TYPE_OVERLAY = 4;

        /**
         * Display type: Virtual display.
         * @hide
         */
        const Int32 TYPE_VIRTUAL = 5;

        /**
         * Display state: The display state is unknown.
         *
         * @see #getState
         */
        const Int32 STATE_UNKNOWN = 0;

        /**
         * Display state: The display is off.
         *
         * @see #getState
         */
        const Int32 STATE_OFF = 1;

        /**
         * Display state: The display is on.
         *
         * @see #getState
         */
        const Int32 STATE_ON = 2;

        /**
         * Display state: The display is dozing in a low power state; it is still
         * on but is optimized for showing system-provided content while the
         * device is non-interactive.
         *
         * @see #getState
         * @see android.os.PowerManager#isInteractive
         */
        const Int32 STATE_DOZE = 3;

        /**
         * Display state: The display is dozing in a suspended low power state; it is still
         * on but is optimized for showing static system-provided content while the device
         * is non-interactive.  This mode may be used to conserve even more power by allowing
         * the hardware to stop applying frame buffer updates from the graphics subsystem or
         * to take over the display and manage it autonomously to implement low power always-on
         * display functionality.
         *
         * @see #getState
         * @see android.os.PowerManager#isInteractive
         */
        const Int32 STATE_DOZE_SUSPEND = 4;

        /**
         * Gets the display id.
         * <p>
         * Each logical display has a unique id.
         * The default display has id {@link #DEFAULT_DISPLAY}.
         * </p>
         */
        GetDisplayId(
            [out] Int32* displayId);

        /**
         * Returns true if this display is still valid, FALSE if the display has been removed.
         *
         * If the display is invalid, then the methods of this class will
         * continue to report the most recently observed display information.
         * However, it is unwise (and rather fruitless) to continue using a
         * {@link Display} object after the display's demise.
         *
         * It's possible for a display that was previously invalid to become
         * valid again if a display with the same id is reconnected.
         *
         * @return True if the display is still valid.
         */
        IsValid(
            [out] Boolean* isValid);

        /**
         * Gets a full copy of the display information.
         *
         * @param outDisplayInfo The object to receive the copy of the display information.
         * @return True if the display is still valid.
         * @hide
         */
        GetDisplayInfo(
            [in] IDisplayInfo* outDisplayInfo,
            [out] Boolean* isValid);

        /**
         * Gets the display's layer stack.
         *
         * Each display has its own independent layer stack upon which surfaces
         * are placed to be managed by surface flinger.
         *
         * @return The display's layer stack number.
         * @hide
         */
        GetLayerStack(
            [out] Int32* layerStack);

        /**
         * Returns a combination of flags that describe the capabilities of the display.
         *
         * @return The display flags.
         *
         * @see #FLAG_SUPPORTS_PROTECTED_BUFFERS
         * @see #FLAG_SECURE
         */
        GetFlags(
            [out] Int32* flags);

        /**
         * Gets the display type.
         *
         * @return The display type.
         *
         * @see #TYPE_UNKNOWN
         * @see #TYPE_BUILT_IN
         * @see #TYPE_HDMI
         * @see #TYPE_WIFI
         * @see #TYPE_OVERLAY
         * @hide
         */
        GetType(
            [out] Int32* type);

        /**
         * Gets the display address, or NULL if none.
         * Interpretation varies by display type.
         *
         * @return The display address.
         * @hide
         */
        GetAddress(
            [out] String* address);

        /**
         * Gets the UID of the application that owns this display, or zero if it is
         * owned by the system.
         * <p>
         * If the display is private, then only the owner can use it.
         * </p>
         *
         * @hide
         */
        GetOwnerUid(
            [out] Int32* result);

        /**
         * Gets the package name of the application that owns this display, or null if it is
         * owned by the system.
         * <p>
         * If the display is private, then only the owner can use it.
         * </p>
         *
         * @hide
         */
        GetOwnerPackageName(
            [out] String* result);

        /**
         * Gets the compatibility info used by this display instance.
         *
         * @return The display adjustments holder, or null if none is required.
         * @hide
         */
        GetDisplayAdjustments(
            [out] IDisplayAdjustments** result);

        /**
         * Gets the name of the display.
         * <p>
         * Note that some displays may be renamed by the user.
         * </p>
         *
         * @return The display's name.
         */
        GetName(
            [out] String* name);

        /**
         * Gets the size of the display, in pixels.
         * <p>
         * Note that this value should <em>not</em> be used for computing layouts,
         * since a device will typically have screen decoration (such as a status bar)
         * along the edges of the display that reduce the amount of application
         * space available from the size returned here.  Layouts should instead use
         * the window size.
         * </p><p>
         * The size is adjusted based on the current rotation of the display.
         * </p><p>
         * The size returned by this method does not necessarily represent the
         * actual raw size (native resolution) of the display.  The returned size may
         * be adjusted to exclude certain system decoration elements that are always visible.
         * It may also be scaled to provide compatibility with older applications that
         * were originally designed for smaller displays.
         * </p>
         *
         * @param outSize A {@link Point} object to receive the size information.
         */
        GetSize(
            [in] IPoint* outSize);

        /**
         * Gets the size of the display as a rectangle, in pixels.
         *
         * @param outSize A {@link Rect} object to receive the size information.
         * @see #getSize(Point)
         */
        GetRectSize(
            [in] IRect* outSize);

        /**
         * Return the range of display sizes an application can expect to encounter
         * under normal operation, as Int64 as there is no physical change in screen
         * size.  This is basically the sizes you will see as the orientation
         * changes, taking into account whatever screen decoration there is in
         * each rotation.  For example, the status bar is always at the top of the
         * screen, so it will reduce the height both in landscape and portrait, and
         * the smallest height returned here will be the smaller of the two.
         *
         * This is intended for applications to get an idea of the range of sizes
         * they will encounter while going through device rotations, to provide a
         * stable UI through rotation.  The sizes here take into account all standard
         * system decorations that reduce the size actually available to the
         * application: the status bar, navigation bar, system bar, etc.  It does
         * <em>not</em> take into account more transient elements like an IME
         * soft keyboard.
         *
         * @param outSmallestSize Filled in with the smallest width and height
         * that the application will encounter, in pixels (not dp units).  The x
         * (width) dimension here directly corresponds to
         * {@link android.content.res.Configuration#smallestScreenWidthDp
         * Configuration.smallestScreenWidthDp}, except the value here is in raw
         * screen pixels rather than dp units.  Your application may of course
         * still get smaller space yet if, for example, a soft keyboard is
         * being displayed.
         * @param outLargestSize Filled in with the largest width and height
         * that the application will encounter, in pixels (not dp units).  Your
         * application may of course still get larger space than this if,
         * for example, screen decorations like the status bar are being hidden.
         */
        GetCurrentSizeRange(
            [in] IPoint* outSmallestSize,
            [in] IPoint* outLargestSize);

        /**
         * Return the maximum screen size dimension that will happen.  This is
         * mostly for wallpapers.
         * @hide
         */
        GetMaximumSizeDimension(
            [out] Int32* maximumSizeDimension);

        /**
         * @deprecated Use {@link #getSize(Point)} instead.
         */
        //@Deprecated
        GetWidth(
            [out] Int32* width);

        /**
         * @deprecated Use {@link #getSize(Point)} instead.
         */
        //@Deprecated
        GetHeight(
            [out] Int32* height);

        /**
         * @hide
         * Return a rectangle defining the insets of the overscan region of the display.
         * Each field of the rectangle is the number of pixels the overscan area extends
         * into the display on that side.
         */
         GetOverscanInsets(
            [in] IRect* outRect);

        /**
         * Returns the rotation of the screen from its "natural" orientation.
         * The returned value may be {@link Surface#ROTATION_0 Surface.ROTATION_0}
         * (no rotation), {@link Surface#ROTATION_90 Surface.ROTATION_90},
         * {@link Surface#ROTATION_180 Surface.ROTATION_180}, or
         * {@link Surface#ROTATION_270 Surface.ROTATION_270}.  For
         * example, if a device has a naturally tall screen, and the user has
         * turned it on its side to go into a landscape orientation, the value
         * returned here may be either {@link Surface#ROTATION_90 Surface.ROTATION_90}
         * or {@link Surface#ROTATION_270 Surface.ROTATION_270} depending on
         * the direction it was turned.  The angle is the rotation of the drawn
         * graphics on the screen, which is the opposite direction of the physical
         * rotation of the device.  For example, if the device is rotated 90
         * degrees counter-clockwise, to compensate rendering will be rotated by
         * 90 degrees clockwise and thus the returned value here will be
         * {@link Surface#ROTATION_90 Surface.ROTATION_90}.
         */
        GetRotation(
            [out] Int32* rotation);

        /**
         * @deprecated use {@link #getRotation}
         * @return orientation of this display.
         */
        //@Deprecated
        GetOrientation(
            [out] Int32* orientation);

        /**
         * Gets the pixel format of the display.
         * @return One of the constants defined in {@link android.graphics.PixelFormat}.
         *
         * @deprecated This method is no longer supported.
         * The result is always {@link PixelFormat#RGBA_8888}.
         */
        //@Deprecated
        GetPixelFormat(
            [out] Int32* pixelFormat);

        /**
         * Gets the refresh rate of this display in frames per second.
         */
        GetRefreshRate(
            [out] Float* refreshRate);

        /**
         * Get the supported refresh rates of this display in frames per second.
         */
        GetSupportedRefreshRates(
            [out, callee] ArrayOf<Float>* rates);

        /**
         * Gets the app VSYNC offset, in nanoseconds.  This is a positive value indicating
         * the phase offset of the VSYNC events provided by Choreographer relative to the
         * display refresh.  For example, if Choreographer reports that the refresh occurred
         * at time N, it actually occurred at (N - appVsyncOffset).
         * <p>
         * Apps generally do not need to be aware of this.  It's only useful for fine-grained
         * A/V synchronization.
         */
        GetAppVsyncOffsetNanos(
            [out] Int64* result);

        /**
         * This is how far in advance a buffer must be queued for presentation at
         * a given time.  If you want a buffer to appear on the screen at
         * time N, you must submit the buffer before (N - presentationDeadline).
         * <p>
         * The desired presentation time for GLES rendering may be set with
         * {@link android.opengl.EGLExt#eglPresentationTimeANDROID}.  For video decoding, use
         * {@link android.media.MediaCodec#releaseOutputBuffer(int, long)}.  Times are
         * expressed in nanoseconds, using the system monotonic clock
         * ({@link System#nanoTime}).
         */
        GetPresentationDeadlineNanos(
            [out] Int64* result);

        /**
         * Gets display metrics that describe the size and density of this display.
         * <p>
         * The size is adjusted based on the current rotation of the display.
         * </p><p>
         * The size returned by this method does not necessarily represent the
         * actual raw size (native resolution) of the display.  The returned size may
         * be adjusted to exclude certain system decor elements that are always visible.
         * It may also be scaled to provide compatibility with older applications that
         * were originally designed for smaller displays.
         * </p>
         *
         * @param outMetrics A {@link DisplayMetrics} object to receive the metrics.
         */
        GetMetrics(
            [in] IDisplayMetrics* outMetrics);

        /**
         * Gets the real size of the display without subtracting any window decor or
         * applying any compatibility scale factors.
         * <p>
         * The size is adjusted based on the current rotation of the display.
         * </p><p>
         * The real size may be smaller than the physical size of the screen when the
         * window manager is emulating a smaller display (using adb shell am display-size).
         * </p>
         *
         * @param outSize Set to the real size of the display.
         */
        GetRealSize(
            [in] IPoint* outSize);

        /**
         * Gets display metrics based on the real size of this display.
         * <p>
         * The size is adjusted based on the current rotation of the display.
         * </p><p>
         * The real size may be smaller than the physical size of the screen when the
         * window manager is emulating a smaller display (using adb shell am display-size).
         * </p>
         *
         * @param outMetrics A {@link DisplayMetrics} object to receive the metrics.
         */
        GetRealMetrics(
            [in] IDisplayMetrics* outMetrics);

        /**
         * Gets the state of the display, such as whether it is on or off.
         *
         * @return The state of the display: one of {@link #STATE_OFF}, {@link #STATE_ON},
         * {@link #STATE_DOZE}, {@link #STATE_DOZE_SUSPEND}, or {@link #STATE_UNKNOWN}.
         */
        GetState(
            [out] Int32* width);

        /**
         * Returns true if the specified UID has access to this display.
         * @hide
         */
        HasAccess(
            [in] Int32 width,
            [out] Boolean* result);

        /**
         * Returns true if the display is a public presentation display.
         * @hide
         */
        IsPublicPresentation(
            [out] Boolean* result);
    }


    interface IDisplayHelper {
        /**
         * @hide
         */
        TypeToString(
            [in] Int32 type,
            [out] String* str);

        StateToString(
            [in] Int32 state,
            [out] String* str);
    }

    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
