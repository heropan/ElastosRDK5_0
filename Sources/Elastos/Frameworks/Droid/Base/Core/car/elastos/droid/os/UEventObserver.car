
module
{
    namespace Elastos {
    namespace Droid {
    namespace Os {

    interface IUEvent {

        Get(
            [in] String key,
            [out] String* str);

        Get(
            [in] String key,
            [in] String defaultValue,
            [out] String* str);
    }

    /**
     * UEventObserver is an abstract class that receives UEvent's from the kernel.<p>
     *
     * Subclass UEventObserver, implementing onUEvent(UEvent event), then call
     * startObserving() with a match string. The UEvent thread will then call your
     * onUEvent() method when a UEvent occurs that contains your match string.<p>
     *
     * Call stopObserving() to stop receiving UEvent's.<p>
     *
     * There is only one UEvent thread per process, even if that process has
     * multiple UEventObserver subclass instances. The UEvent thread starts when
     * the startObserving() is called for the first time in that process. Once
     * started the UEvent thread will not stop (although it can stop notifying
     * UEventObserver's via stopObserving()).<p>
     *
     * @hide
    */
    interface IUEventObserver {

        /**
         * Begin observation of UEvent's.<p>
         * This method will cause the UEvent thread to start if this is the first
         * invocation of startObserving in this process.<p>
         * Once called, the UEvent thread will call onUEvent() when an incoming
         * UEvent matches the specified string.<p>
         * This method can be called multiple times to register multiple matches.
         * Only one call to stopObserving is required even with multiple registered
         * matches.
         *
         * @param match A substring of the UEvent to match.  Try to be as specific
         * as possible to avoid incurring unintended additional cost from processing
         * irrelevant messages.  Netlink messages can be moderately high bandwidth and
         * are expensive to parse.  For example, some devices may send one netlink message
         * for each vsync period.
         */
        StartObserving(
            [in] String match);

        /**
         * End observation of UEvent's.<p>
         * This process's UEvent thread will never call onUEvent() on this
         * UEventObserver after this call. Repeated calls have no effect.
         */
        StopObserving();

        /**
         * Subclasses of UEventObserver should override this method to handle
         * UEvents.
         */
        OnUEvent(
            [in] IUEvent* event);
    }

    } //Os
    } //Droid
    } //Elastos
}