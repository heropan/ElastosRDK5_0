
module
{

    interface Elastos.Droid.Net.Http.ISslCertificate;

    namespace Elastos {
    namespace Droid {
    namespace Net {
    namespace Http {

    /**
     * Callbacks in this interface are made as an HTTP request is
     * processed. The normal order of callbacks is status(), headers(),
     * then multiple data() then endData().  handleSslErrorRequest(), if
     * there is an SSL certificate error. error() can occur anywhere
     * in the transaction.
     *
     * {@hide}
     */
    /**
     * @Involved
     * no super interface ;
     */
    [deprecated]
    interface IEventHandler {
        /** Success */
        const Int32 OK = 0;

        /** Generic error */
        const Int32 ERROR = -1;

        /** Server or proxy hostname lookup failed */
        const Int32 ERROR_LOOKUP = -2;

        /** Unsupported authentication scheme (ie, not basic or digest) */
        const Int32 ERROR_UNSUPPORTED_AUTH_SCHEME = -3;

        /** User authentication failed on server */
        const Int32 ERROR_AUTH = -4;

        /** User authentication failed on proxy */
        const Int32 ERROR_PROXYAUTH = -5;

        /** Could not connect to server */
        const Int32 ERROR_CONNECT = -6;

        /** Failed to write to or read from server */
        const Int32 ERROR_IO = -7;

        /** Connection timed out */
        const Int32 ERROR_TIMEOUT = -8;

        /** Too many redirects */
        const Int32 ERROR_REDIRECT_LOOP = -9;

        /** Unsupported URI scheme (ie, not http, https, etc) */
        const Int32 ERROR_UNSUPPORTED_SCHEME = -10;

        /** Failed to perform SSL handshake */
        const Int32 ERROR_FAILED_SSL_HANDSHAKE = -11;

        /** Bad URL */
        const Int32 ERROR_BAD_URL = -12;

        /** Generic file error for file:/// loads */
        const Int32 FILE_ERROR = -13;

        /** File not found error for file:/// loads */
        const Int32 FILE_NOT_FOUND_ERROR = -14;

        /** Too many requests queued */
        const Int32 TOO_MANY_REQUESTS_ERROR = -15;

        /**
         * Called after status line has been sucessfully processed.
         * @param major_version HTTP version advertised by server.  major
         * is the part before the "."
         * @param minor_version HTTP version advertised by server.  minor
         * is the part after the "."
         * @param code HTTP Status code.  See RFC 2616.
         * @param reason_phrase Textual explanation sent by server
         */
        Status(
            [in] Int32 major_version,
            [in] Int32 minor_version,
            [in] Int32 code,
            [in] String reason_phrase);

        /**
         * Called after all headers are successfully processed.
         */
        Headers(
            [in] IHeaders* headers);

        /**
         * An array containing all or part of the http body as read from
         * the server.
         * @param data A byte array containing the content
         * @param len The length of valid content in data
         *
         * Note: chunked and compressed encodings are handled within
         * android.net.http.  Decoded data is passed through this
         * interface.
         */
        Data(
            [in] ArrayOf<Byte>* data,
            [in] Int32 len);

        /**
         * Called when the document is completely read.  No more data()
         * callbacks will be made after this call
         */
        EndData();

        /**
         * SSL certificate callback called before resource request is
         * made, which will be null for insecure connection.
         */
        Certificate(
            [in] ISslCertificate* certificate);

        /**
         * There was trouble.
         * @param id One of the error codes defined below
         * @param description of error
         */
        Error(
            [in] Int32 id,
            [in] String description);

        /**
         * SSL certificate error callback. Handles SSL error(s) on the way
         * up to the user. The callback has to make sure that restartConnection() is called,
         * otherwise the connection will be suspended indefinitely.
         * @return True if the callback can handle the error, which means it will
         *              call restartConnection() to unblock the thread later,
         *              otherwise return false.
         */
        HandleSslErrorRequest(
            [in] ISslError* error,
            [out] Boolean* result);

    }

    } // namespace Http
    } // namespace Net
    } // namespace Droid
    } // namespace Elastos
}
