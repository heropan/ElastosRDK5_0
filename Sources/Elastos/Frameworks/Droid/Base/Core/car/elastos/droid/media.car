
module
{
    merge("mtp/MtpConstants.car");
    merge("mtp/MtpDatabase.car");
    merge("mtp/MtpDevice.car");
    merge("mtp/MtpDeviceInfo.car");
    merge("mtp/MtpObjectInfo.car");
    merge("mtp/MtpPropertyGroup.car");
    merge("mtp/MtpPropertyList.car");
    merge("mtp/MtpServer.car");
    merge("mtp/MtpStorage.car");
    merge("mtp/MtpStorageInfo.car");

    merge("media/audiofx/AudioEffect.car");
    merge("media/audiofx/AcousticEchoCanceler.car");
    merge("media/audiofx/AutomaticGainControl.car");
    merge("media/audiofx/BassBoost.car");
    merge("media/audiofx/EnvironmentalReverb.car");
    merge("media/audiofx/Equalizer.car");
    merge("media/audiofx/LoudnessEnhancer.car");
    merge("media/audiofx/NoiseSuppressor.car");
    merge("media/audiofx/PresetReverb.car");
    merge("media/audiofx/Virtualizer.car");
    merge("media/audiofx/Visualizer.car");

    merge("media/audiopolicy/AudioMix.car");
    merge("media/audiopolicy/AudioMixingRule.car");
    merge("media/audiopolicy/AudioPolicy.car");
    merge("media/audiopolicy/AudioPolicyConfig.car");

    merge("media/browse/MediaBrowser.car");

    merge("media/projection/IMediaProjection.car");
    merge("media/projection/IMediaProjectionCallback.car");
    merge("media/projection/IMediaProjectionManager.car");
    merge("media/projection/IMediaProjectionWatcherCallback.car");
    merge("media/projection/MediaProjection.car");
    merge("media/projection/MediaProjectionInfo.car");
    merge("media/projection/MediaProjectionManager.car");

    merge("media/session/IActiveSessionsListener.car");
    merge("media/session/ISession.car");
    merge("media/session/ISessionCallback.car");
    merge("media/session/ISessionController.car");
    merge("media/session/ISessionControllerCallback.car");
    merge("media/session/ISessionManager.car");
    merge("media/session/MediaController.car");
    merge("media/session/MediaSession.car");
    merge("media/session/MediaSessionLegacyHelper.car");
    merge("media/session/MediaSessionManager.car");
    merge("media/session/ParcelableVolumeInfo.car");
    merge("media/session/PlaybackState.car");

    merge("media/tv/ITvInputClient.car");
    merge("media/tv/ITvInputHardware.car");
    merge("media/tv/ITvInputHardwareCallback.car");
    merge("media/tv/ITvInputManager.car");
    merge("media/tv/ITvInputManagerCallback.car");
    merge("media/tv/ITvInputService.car");
    merge("media/tv/ITvInputServiceCallback.car");
    merge("media/tv/ITvInputSession.car");
    merge("media/tv/ITvInputSessionCallback.car");
    merge("media/tv/ITvInputSessionWrapper.car");
    merge("media/tv/TvContentRating.car");
    merge("media/tv/TvContentRatingSystemInfo.car");
    merge("media/tv/TvContract.car");
    merge("media/tv/TvInputHardwareInfo.car");
    merge("media/tv/TvInputInfo.car");
    merge("media/tv/TvInputManager.car");
    merge("media/tv/TvInputService.car");
    merge("media/tv/TvStreamConfig.car");
    merge("media/tv/TvTrackInfo.car");
    merge("media/tv/TvView.car");

    merge("media/AmrInputStream.car");
    merge("media/AsyncPlayer.car");
    merge("media/AudioAttributes.car");
    merge("media/AudioDevice.car");
    merge("media/AudioDevicePort.car");
    merge("media/AudioDevicePortConfig.car");
    merge("media/AudioFormat.car");
    merge("media/AudioGain.car");
    merge("media/AudioGainConfig.car");
    merge("media/AudioHandle.car");
    merge("media/AudioManager.car");
    merge("media/AudioManagerInternal.car");
    merge("media/AudioMixPort.car");
    merge("media/AudioMixPortConfig.car");
    merge("media/AudioPatch.car");
    merge("media/AudioPort.car");
    merge("media/AudioPortConfig.car");
    merge("media/AudioRecord.car");
    merge("media/AudioRoutesInfo.car");
    merge("media/AudioService.car");
    merge("media/AudioSystem.car");
    merge("media/AudioTimestamp.car");
    merge("media/AudioTrack.car");
    merge("media/CamcorderProfile.car");
    merge("media/CameraProfile.car");
    merge("media/ClosedCaptionRenderer.car");
    merge("media/DataSource.car");
    merge("media/DecoderCapabilities.car");
    merge("media/EncoderCapabilities.car");
    merge("media/ExifInterface.car");
    merge("media/FaceDetector.car");
    merge("media/FocusRequester.car");
    merge("media/IAudioFocusDispatcher.car");
    merge("media/IAudioRoutesObserver.car");
    merge("media/IAudioService.car");
    merge("media/IMediaHTTPConnection.car");
    merge("media/IMediaHTTPService.car");
    merge("media/IMediaRouterClient.car");
    merge("media/IMediaRouterService.car");
    merge("media/IMediaScannerListener.car");
    merge("media/IMediaScannerService.car");
    merge("media/IRemoteControlClient.car");
    merge("media/IRemoteControlDisplay.car");
    merge("media/IRemoteDisplayCallback.car");
    merge("media/IRemoteDisplayProvider.car");
    merge("media/IRemoteVolumeController.car");
    merge("media/IRemoteVolumeObserver.car");
    merge("media/IRingtonePlayer.car");
    merge("media/IVolumeController.car");
    merge("media/Image.car");
    merge("media/ImageReader.car");
    merge("media/JetPlayer.car");
    merge("media/MediaActionSound.car");
    merge("media/MediaCodec.car");
    merge("media/MediaCodecInfo.car");
    merge("media/MediaCodecList.car");
    merge("media/MediaCrypto.car");
    merge("media/MediaDescription.car");
    merge("media/MediaDrm.car");
    merge("media/MediaExtractor.car");
    merge("media/MediaFile.car");
    merge("media/MediaFormat.car");
    merge("media/MediaInserter.car");
    merge("media/MediaMetadata.car");
    merge("media/MediaMetadataEditor.car");
    merge("media/MediaMetadataRetriever.car");
    merge("media/MediaMuxer.car");
    merge("media/MediaPlayer.car");
    merge("media/MediaRecorder.car");
    merge("media/MediaRouter.car");
    merge("media/MediaRouterClientState.car");
    merge("media/MediaScanner.car");
    merge("media/MediaScannerClient.car");
    merge("media/MediaScannerConnection.car");
    merge("media/MediaSyncEvent.car");
    merge("media/MediaTimeProvider.car");
    merge("media/Metadata.car");
    merge("media/MiniThumbFile.car");
    merge("media/PlayerRecord.car");
    merge("media/Rating.car");
    merge("media/RemoteControlClient.car");
    merge("media/RemoteController.car");
    merge("media/RemoteDisplay.car");
    merge("media/RemoteDisplayState.car");
    merge("media/ResampleInputStream.car");
    merge("media/Ringtone.car");
    merge("media/RingtoneManager.car");
    merge("media/SoundPool.car");
    merge("media/SRTRenderer.car");
    merge("media/SubtitleData.car");
    merge("media/SubtitleController.car");
    merge("media/SubtitleTrack.car");
    merge("media/ThumbnailUtils.car");
    merge("media/TimedText.car");
    merge("media/TtmlRenderer.car");
    merge("media/ToneGenerator.car");
    merge("media/VolumeProvider.car");
    merge("media/WebVttRenderer.car");

    interface Elastos.Droid.App.IActivity;
    interface Elastos.Droid.App.IPendingIntent;
    interface Elastos.Droid.Content.IComponentName;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIContentProvider;
    interface Elastos.Droid.Content.Pm.IApplicationInfo;
    interface Elastos.Droid.Content.Pm.IResolveInfo;
    interface Elastos.Droid.Graphics.Drawable.IDrawableCallback;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Graphics.IRect;
    interface Elastos.Droid.Hardware.Usb.IUsbDevice;
    interface Elastos.Droid.Internal.Os.IHandlerCallerCallback;
    interface Elastos.Droid.Media.IAudioAttributes;
    interface Elastos.Droid.Media.IAudioFormat;
    interface Elastos.Droid.Media.IMediaDescription;
    interface Elastos.Droid.Media.IMediaTimeProvider;
    interface Elastos.Droid.Media.ISubtitleController;
    interface Elastos.Droid.Media.ISubtitleControllerListener;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.ILooper;
    interface Elastos.Droid.Os.IUserHandle;
    interface Elastos.Droid.Os.Storage.IStorageVolume;
    interface Elastos.Droid.Utility.IAttributeSet;
    interface Elastos.Droid.Utility.ISparseArray;
    interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource;
    interface Elastos.Droid.View.IInputChannel;
    interface Elastos.Droid.View.IKeyEventCallback;
    interface Elastos.Droid.View.IViewManager;
    interface Elastos.Droid.View.IViewGroup;
    interface Elastos.Droid.View.IViewParent;
    interface Elastos.Droid.View.IView;
    interface Elastos.Core.ICharSequence;
    interface Elastos.Core.IRunnable;
    interface Elastos.IO.ICloseable;
    interface Elastos.IO.IByteBuffer;
    interface Elastos.IO.IInputStream;
    interface Elastos.Utility.IArrayList;
    interface Elastos.Utility.IList;
    interface Elastos.Utility.IMap;
    interface Elastos.Utility.IUUID;

//        // media/media/AudioManager
//        [local]
//        class CAudioManager {
//            constructor(
//                [in] IContext* ctx);
//
//            interface IAudioManager;
//        }
//
//        singleton class CAudioManagerHelper{
//            interface IAudioManagerHelper;
//        }
//
//        // media/media/AudioRecord
//        class CAudioRecord {
//            constructor(
//                [in] Int32 audioSource,
//                [in] Int32 sampleRateInHz,
//                [in] Int32 channelConfig,
//                [in] Int32 audioFormat,
//                [in] Int32 bufferSizeInBytes);
//
//            interface IAudioRecord;
//        }
//
//        singleton class CAudioRecordHelper {
//            interface IAudioRecordHelper;
//        }
//
//        // media/media/AudioRoutesInfo
//        class CAudioRoutesInfo{
//            constructor();
//
//            constructor(
//                [in] IAudioRoutesInfo* o);
//
//            interface IAudioRoutesInfo;
//            interface IParcelable;
//        }
//
//        // media/media/AudioService
//        [local]
//        class CAudioService {
//            constructor(
//                [in] IContext* ctx);
//
//            interface IAudioService;
//            interface IPendingIntentOnFinished;
//        }
//
//        singleton class CAudioServiceHelper{
//            interface IAudioServiceHelper;
//        }
//
//        // media/media/AudioSystem
//        class CAudioSystem {
//            interface IAudioSystem;
//        }
//
//        singleton class CAudioSystemHelper {
//            interface IAudioSystemHelper;
//        }
//
//        // media/media/AudioTrack
//        class CAudioTrack {
//            constructor(
//                [in] Int32 streamType,
//                [in] Int32 sampleRateInHz,
//                [in] Int32 channelConfig,
//                [in] Int32 audioFormat,
//                [in] Int32 bufferSizeInBytes,
//                [in] Int32 mode);
//
//            constructor(
//                [in] Int32 streamType,
//                [in] Int32 sampleRateInHz,
//                [in] Int32 channelConfig,
//                [in] Int32 audioFormat,
//                [in] Int32 bufferSizeInBytes,
//                [in] Int32 mode,
//                [in] Int32 sessionId);
//
//            interface IAudioTrack;
//        }
//
//        singleton class CAudioTrackHelper {
//            interface IAudioTrackHelper;
//        }
//
//        // media/media/CamcorderProfile
//        class CCamcorderProfile {
//            constructor(
//                [in] Int32 duration,
//                [in] Int32 quality,
//                [in] Int32 fileFormat,
//                [in] Int32 videoCodec,
//                [in] Int32 videoBitRate,
//                [in] Int32 videoFrameRate,
//                [in] Int32 videoWidth,
//                [in] Int32 videoHeight,
//                [in] Int32 audioCodec,
//                [in] Int32 audioBitRate,
//                [in] Int32 audioSampleRate,
//                [in] Int32 audioChannels);
//
//            interface ICamcorderProfile;
//        }
//
//        singleton class CCamcorderProfileHelper {
//            interface ICamcorderProfileHelper;
//        }
//
//        singleton class CCameraProfileHelper {
//            interface ICameraProfileHelper;
//        }
//
//        // media/media/DecoderCapabilities
//        class CDecoderCapabilities {
//            constructor();
//
//            interface IDecoderCapabilities;
//        }
//
//        singleton class CDecoderCapabilitiesHelper {
//            interface IDecoderCapabilitiesHelper;
//        }
//
//        // media/media/EncoderCapabilities
//        class CEncoderCapabilities {
//            constructor();
//
//            interface IEncoderCapabilities;
//        }
//
//        singleton class CEncoderCapabilitiesHelper {
//            interface IEncoderCapabilitiesHelper;
//        }
//
//        // media/media/ExifInterface
//        class CExifInterface {
//            constructor(
//                [in] String fileName);
//
//            interface IExifInterface;
//        }
//
//        class CFace {
//            interface IFace;
//        }
//
//        class CFaceDetector {
//            constructor(
//                [in] Int32 width,
//                [in] Int32 height,
//                [in] Int32 maxFaces);
//
//            interface IFaceDetector;
//        }
//
//        class CJetPlayer {
//            constructor();
//
//            interface IJetPlayer;
//        }
//
//        singleton class CJetPlayerHelper {
//            interface IJetPlayerHelper;
//        }
//
//        class CMediaActionSound {
//            constructor();
//            interface IMediaActionSound;
//        }
//
//        // media/media/TrackInfoVendor
//        [deprecated]
//        class CTrackInfoVendor {
//            constructor(
//                [in] ArrayOf<Byte>* name,
//                [in] String charset);
//
//            interface ITrackInfoVendor;
//        }
//
//        // media/media/SubInfo
//        [deprecated]
//        class CMediaPlayerSubInfo {
//            constructor(
//                [in] ArrayOf<Byte>* name,
//                [in] String charset,
//                [in] Int32 type);
//
//            interface IMediaPlayerSubInfo;
//        }
//
//        class CMediaPlayer {
//            constructor();
//
//            interface IMediaPlayer;
//        }
//
//        singleton class CMediaPlayerHelper {
//            interface IMediaPlayerHelper;
//        }
//
//        // media/media/MediaPlayer.TrackInfo
//        class CMediaPlayerTrackInfo {
//            constructor();
//
//            interface IMediaPlayerTrackInfo;
//            interface IParcelable;
//        }
//
//        // media/media/MediaRecorder
//        class CMediaRecorder {
//            constructor();
//
//            interface IMediaRecorder;
//        }
//
//        singleton class CMediaRecorderHelper {
//            interface IMediaRecorderHelper;
//        }
//
//        // media/media/MediaRouter
//        [local]
//        class CMediaRouter {
//            constructor(
//                [in] IContext* ctx);
//
//            interface IMediaRouter;
//        }
//
//        [local]
//        class CMediaRouteInfo {
//            constructor(
//                [in] IRouteCategory* category);
//
//            interface IRouteInfo;
//        }
//
//        class CRouteCategory {
//            constructor(
//                [in] ICharSequence* name,
//                [in] Int32 types,
//                [in] Boolean groupable);
//
//            constructor(
//                [in] Int32 nameResId,
//                [in] Int32 types,
//                [in] Boolean groupable);
//
//            interface IRouteCategory;
//        }
//
//        [local]
//        class CUserRouteInfo {
//            constructor(
//                [in] IRouteCategory* category);
//
//            interface IUserRouteInfo;
//        }
//
//        [local]
//        class CRouteGroup {
//            constructor(
//                [in] IRouteCategory* category);
//
//            interface IRouteGroup;
//        }
//
//        // media/media/MediaScanner
//        [local]
//        class CMediaScanner {
//            constructor(
//                [in] IContext* c);
//
//            interface IMediaScanner;
//        }
//
//        singleton class CMediaScannerHelper {
//            interface IMediaScannerHelper;
//        }
//
////      class CMediaScannerClient {
////          interface IMediaScannerClient;
////      }
//
//        // media/media/SoundPool
//        class CSoundPool {
//            constructor(
//                [in] Int32 maxStreams,
//                [in] Int32 streamType,
//                [in] Int32 srcQuality);
//
//            interface ISoundPool;
//        }
//
//        class CMediaCodec {
//            constructor(
//                [in] String name,
//                [in] Boolean nameIsType,
//                [in] Boolean encoder);
//
//            interface IMediaCodec;
//        }
//
//        singleton class CMediaCodecHelper {
//
//            interface IMediaCodecHelper;
//        }
//
//        class CMediaCodecCryptoInfo {
//            interface IMediaCodecCryptoInfo;
//        }
//
//        class CMediaCodecBufferInfo {
//            interface IMediaCodecBufferInfo;
//        }
//
//        class CMediaCodecInfo {
//            constructor(
//                [in] Int32 index);
//
//            interface IMediaCodecInfo;
//        }
//
//        class CCodecCapabilities {
//            interface ICodecCapabilities;
//        }
//
//        class CCodecProfileLevel {
//            interface ICodecProfileLevel;
//        }
//
//        singleton class CMediaCodecList {
//            interface IMediaCodecList;
//        }
//
//        [deprecated]
//        class CMediaCrypto {
//            constructor(
//                [in] IUUID* uuid,
//                [in] ArrayOf<Byte>* initData);
//
//            interface IMediaCrypto;
//        }
//
//        singleton class CMediaCryptoHelper {
//            interface IMediaCryptoHelper;
//        }
//
//        class CMediaExtractor {
//            constructor();
//
//            interface IMediaExtractor;
//        }
//
//        // media/media/MediaFile
//        singleton class CMediaFile {
//            interface IMediaFile;
//        }
//
//        class CMediaFileType {
//            constructor(
//                [in] Int32 fileType,
//                [in] String mimeType);
//
//            interface IMediaFileType;
//        }
//
//        // media/media/MediaFormat
//        class CMediaFormat {
//            constructor();
//
//            constructor(
//                [in] IObjectStringMap* inputmap);
//
//            interface IMediaFormat;
//        }
//
//        singleton class CMediaFormatHelper {
//            interface IMediaFormatHelper;
//        }
//
//        // media/media/MediaInserter
//        class CMediaInserter {
//            constructor(
//                [in] IIContentProvider* provider,
//                [in] Int32 bufferSizePerUri);
//
//            interface IMediaInserter;
//        }
//
//        class CMediaMetadataRetriever {
//            constructor();
//
//            interface IMediaMetadataRetriever;
//        }

    namespace Elastos {
    namespace Droid {
    namespace Media {

    class CAmrInputStream {
        constructor(
            [in] IInputStream* inputStream);

        interface IAmrInputStream;
        interface IInputStream;
        interface ICloseable;
    }

    class CAsyncPlayer {
        constructor(
            [in] String tag);

        interface IAsyncPlayer;
    }

    class CAudioAttributesBuilder {
        constructor();

        constructor(
            [in] IAudioAttributes* aa);

        interface IAudioAttributesBuilder;
    }

    class CAudioAttributes {
        constructor();

        interface IAudioAttributes;
        interface IParcelable;
    }

    singleton class CAudioAttributesHelper {
        interface IAudioAttributesHelper;
    }

    class CAudioDevice {
        constructor(
            [in] IAudioDevicePortConfig* config);

        interface IAudioDevice;
    }

    class CAudioPortConfig {
        constructor(
            [in] IAudioPort* port,
            [in] Int32 samplingRate,
            [in] Int32 channelMask,
            [in] Int32 format,
            [in] IAudioGainConfig* gain);

        interface IAudioPortConfig;
    }

    class CAudioDevicePortConfig {
        constructor(
            [in] IAudioDevicePort* devicePort,
            [in] Int32 samplingRate,
            [in] Int32 channelMask,
            [in] Int32 format,
            [in] IAudioGainConfig* gain);

        constructor(
            [in] IAudioDevicePortConfig* config);

        interface IAudioDevicePortConfig;
    }

    class CAudioMixPortConfig {
        constructor(
            [in] IAudioMixPort* mixPort,
            [in] Int32 samplingRate,
            [in] Int32 channelMask,
            [in] Int32 format,
            [in] IAudioGainConfig* gain);

        interface IAudioMixPortConfig;
    }

    [deprecated]
    class CAudioPort {
        constructor(
            [in] IAudioHandle* handle,
            [in] Int32 role,
            [in] ArrayOf<Int32>* samplingRates,
            [in] ArrayOf<Int32>* channelMasks,
            [in] ArrayOf<Int32>* formats,
            [in] ArrayOf<IAudioGain*>* gains);

        interface IAudioPort;
    }

    [deprecated]
    class CAudioDevicePort {
        constructor(
            [in] IAudioHandle* handle,
            [in] ArrayOf<Int32>* samplingRates,
            [in] ArrayOf<Int32>* channelMasks,
            [in] ArrayOf<Int32>* formats,
            [in] ArrayOf<IAudioGain*>* gains,
            [in] Int32 type,
            [in] String address);

        interface IAudioDevicePort;
    }

    [deprecated]
    class CAudioMixPort {
        constructor(
            [in] IAudioHandle* handle,
            [in] Int32 role,
            [in] ArrayOf<Int32>* samplingRates,
            [in] ArrayOf<Int32>* channelMasks,
            [in] ArrayOf<Int32>* formats,
            [in] ArrayOf<IAudioGain*>* gains);

        interface IAudioMixPort;
    }

    class CAudioFormatBuilder {
        constructor();

        constructor(
            [in] IAudioFormat* af);

        interface IAudioFormatBuilder;
    }

    class CAudioFormat {
        constructor();

        constructor(
            [in] Int32 ignoredArgument);

        constructor(
            [in] Int32 encoding,
            [in] Int32 sampleRate,
            [in] Int32 channelMask);

        interface IAudioFormat;
    }

    singleton class CAudioFormatHelper {
        interface IAudioFormatHelper;
    }

    class CAudioGain {
        constructor(
            [in] Int32 index,
            [in] Int32 mode,
            [in] Int32 channelMask,
            [in] Int32 minValue,
            [in] Int32 maxValue,
            [in] Int32 defaultValue,
            [in] Int32 stepValue,
            [in] Int32 rampDurationMinMs,
            [in] Int32 rampDurationMaxMs);

        interface IAudioGain;
    }

    [deprecated]
    class CAudioGainConfig {
        constructor(
            [in] Int32 index,
            [in] IAudioGain* gain,
            [in] Int32 mode,
            [in] Int32 channelMask,
            [in] ArrayOf<Int32>* values,
            [in] Int32 rampDurationMs);

        interface IAudioGainConfig;
    }

    class CAudioHandle {
        constructor(
            [in] Int32 id);

        interface IAudioHandle;
    }

   class CAudioManagerAudioFocusDispatcher {
       constructor(
           [in] IAudioManager* owner);

       interface IIAudioFocusDispatcher;
       interface IBinder;
   }

    class CAudioManager {
        constructor(
            [in] IContext* context);

        interface IAudioManager;
    }

    [deprecated]
    class CAudioPatch {
        constructor(
            [in] IAudioHandle* patchHandle,
            [in] ArrayOf<IAudioPortConfig*>* sources,
            [in] ArrayOf<IAudioPortConfig*>* sinks);

        interface IAudioPatch;
    }

    class CAudioRecord {
        constructor(
            [in] Int32 audioSource,
            [in] Int32 sampleRateInHz,
            [in] Int32 channelConfig,
            [in] Int32 audioFormat,
            [in] Int32 bufferSizeInBytes);

        constructor(
            [in] IAudioAttributes* attributes,
            [in] IAudioFormat* format,
            [in] Int32 bufferSizeInBytes,
            [in] Int32 sessionId);

        interface IAudioRecord;
    }

    class CAudioRoutesInfo {
        constructor();

        constructor(
            [in] IAudioRoutesInfo* o);

        interface IAudioRoutesInfo;
    }

    singleton class CAudioSystem {
        interface IAudioSystem;
    }

    class CAudioTimestamp {
        constructor();

        interface IAudioTimestamp;
    }

    class CAudioTrack {
        constructor(
            [in] Int32 streamType,
            [in] Int32 sampleRateInHz,
            [in] Int32 channelConfig,
            [in] Int32 audioFormat,
            [in] Int32 bufferSizeInBytes,
            [in] Int32 mode);

        constructor(
            [in] Int32 streamType,
            [in] Int32 sampleRateInHz,
            [in] Int32 channelConfig,
            [in] Int32 audioFormat,
            [in] Int32 bufferSizeInBytes,
            [in] Int32 mode,
            [in] Int32 sessionId);

        constructor(
            [in] IAudioAttributes* attributes,
            [in] IAudioFormat* format,
            [in] Int32 bufferSizeInBytes,
            [in] Int32 mode,
            [in] Int32 sessionId);

        interface IAudioTrack;
    }

    singleton class CAudioTrackHelper {
        interface IAudioTrackHelper;
    }

    class CCamcorderProfile {
        constructor(
            [in] Int32 duration,
            [in] Int32 quality,
            [in] Int32 fileFormat,
            [in] Int32 videoCodec,
            [in] Int32 videoBitRate,
            [in] Int32 videoFrameRate,
            [in] Int32 videoWidth,
            [in] Int32 videoHeight,
            [in] Int32 audioCodec,
            [in] Int32 audioBitRate,
            [in] Int32 audioSampleRate,
            [in] Int32 audioChannels);

        interface ICamcorderProfile;
    }

    singleton class CCamcorderProfileHelper {
        interface ICamcorderProfileHelper;
    }

    singleton class CCameraProfile {
        interface ICameraProfile;
    }

    class CClosedCaptionRenderer {
        constructor(
            [in] IContext* context);

        interface IClosedCaptionRenderer;
        interface ISubtitleControllerRenderer;
    }

    singleton class CDecoderCapabilities {
        interface IDecoderCapabilities;
    }

    singleton class CEncoderCapabilities {
        interface IEncoderCapabilities;
    }

    class CExifInterface {
        constructor(
            [in] String filename);

        interface IExifInterface;
    }

    class CFace {
        constructor();

        interface IFace;
    }

    class CFaceDetector {
        constructor(
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 maxFaces);

        interface IFaceDetector;
    }

    class CImageReader {
        constructor(
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 format,
            [in] Int32 maxImages);

        interface IImageReader;
// TODO: Need IAutoCloseable
//        interface IAutoCloseable;
    }

    class CJetPlayer {
        constructor();

        interface IJetPlayer;
    }

    singleton class CJetPlayerHelper {
        interface IJetPlayerHelper;
    }

    class CMediaActionSound {
        constructor();

        interface IMediaActionSound;
    }

    [deprecated]
    class CMediaCodecInfo {
        constructor(
            [in] String name,
            [in] Boolean isEncoder,
            [in] ArrayOf<IMediaCodecInfoCodecCapabilities*>* caps);

        interface IMediaCodecInfo;
    }

    class CMediaCodecInfoCodecProfileLevel {
        constructor();

        interface IMediaCodecInfoCodecProfileLevel;
    }

    [deprecated]
    class CMediaCodecInfoCodecCapabilities {
        constructor();

        constructor(
            [in] ArrayOf<IMediaCodecInfoCodecProfileLevel*>* profLevs,
            [in] ArrayOf<Int32>* colFmts,
            [in] Boolean encoder,
            [in] Int32 flags,
            [in] IMap* defaultFormatMap,
            [in] IMap* capabilitiesMap);

        constructor(
            [in] ArrayOf<IMediaCodecInfoCodecProfileLevel*>* profLevs,
            [in] ArrayOf<Int32>* colFmts,
            [in] Boolean encoder,
            [in] Int32 flags,
            [in] IMediaFormat* defaultFormat,
            [in] IMediaFormat* info);

        interface IMediaCodecInfoCodecCapabilities;
    }

    singleton class CMediaCodecInfoCodecCapabilitiesHelper {
        interface IMediaCodecInfoCodecCapabilitiesHelper;
    }

    class CMediaCodecInfoAudioCapabilities {
        constructor();

        interface IMediaCodecInfoAudioCapabilities;
    }

    singleton class CMediaCodecInfoAudioCapabilitiesHelper {
        interface IMediaCodecInfoAudioCapabilitiesHelper;
    }

    class CMediaCodecInfoEncoderCapabilities {
        constructor();

        interface IMediaCodecInfoEncoderCapabilities;
    }

    singleton class CMediaCodecInfoEncoderCapabilitiesHelper {
        interface IMediaCodecInfoEncoderCapabilitiesHelper;
    }

    class CMediaCodecInfoVideoCapabilities {
        constructor();

        interface IMediaCodecInfoVideoCapabilities;
    }

    singleton class CMediaCodecInfoVideoCapabilitiesHelper {
        interface IMediaCodecInfoVideoCapabilitiesHelper;
    }

    class CMediaCodecList {
        constructor();

        constructor(
            [in] Int32 kind);

        interface IMediaCodecList;
    }

    class CMediaCodecBufferInfo {
        constructor();

        interface IMediaCodecBufferInfo;
    }

    class CMediaCodecCryptoInfo {
        constructor();

        interface IMediaCodecCryptoInfo;
    }

    class CMediaCodecMediaImage {
        constructor();

        constructor(
            [in] IByteBuffer* buffer,
            [in] IByteBuffer* info,
            [in] Boolean readOnly,
            [in] Int64 timestamp,
            [in] Int32 xOffset,
            [in] Int32 yOffset,
            [in] IRect* cropRect);

        interface IMediaCodecMediaImage;
    }

    class CMediaCodec {
        constructor();

        constructor(
            [in] String name,
            [in] Boolean nameIsType,
            [in] Boolean encoder);

        interface IMediaCodec;
    }

//    [deprecated]
//    class CMediaCrypto {
//        constructor();
//
//        constructor(
//            [in] IUUID* uuid,
//            [in] ArrayOf<Byte>* initData);
//
//        interface IMediaCrypto;
//    }
//
//    singleton class CMediaCryptoHelper {
//        interface IMediaCryptoHelper;
//    }

    class CMediaDescription {
        constructor();

        constructor(
            [in] String mediaId,
            [in] ICharSequence* title,
            [in] ICharSequence* subtitle,
            [in] ICharSequence* description,
            [in] IBitmap* icon,
            [in] IUri* iconUri,
            [in] IBundle* extras);

        interface IMediaDescription;
        interface IParcelable;
    }

    class CMediaDescriptionBuilder {
        constructor();

        interface IMediaDescriptionBuilder;
    }

    class CMediaDrm {
        constructor();

        constructor(
            [in] IUUID* uuid);

        interface IMediaDrm;
    }

//    class CMediaExtractor {
//        constructor();
//
//        interface IMediaExtractor;
//    }

    singleton class CMediaFile {
        interface IMediaFile;
    }

    class CMediaFileType {
        constructor();

        constructor(
            [in] Int32 fileType,
            [in] String mimeType);

        interface IMediaFileType;
    }

    class CMediaFormat {
        constructor();

        constructor(
            [in] IMap* map);

        interface IMediaFormat;
    }

    singleton class CMediaFormatHelper {
        interface IMediaFormatHelper;
    }

    class CMediaHTTPConnection {
        constructor();

        interface IIMediaHTTPConnection;
        interface IBinder;
    }

    class CMediaHTTPService {
        constructor();

        interface IIMediaHTTPService;
        interface IBinder;
    }

    class CMediaInserter {
        constructor();

        constructor(
            [in] IIContentProvider* provider,
            [in] String packageName,
            [in] Int32 bufferSizePerUri);

        interface IMediaInserter;
    }

    class CMediaMetadataBuilder {
        constructor();

        constructor(
            [in] IMediaMetadata* aa);

        interface IMediaMetadataBuilder;
    }

    class CMediaMetadata {
        constructor();

        constructor(
            [in] IBundle* bundle);

        interface IMediaMetadata;
        interface IParcelable;
    }

    singleton class CMediaMetadataHelper {
        interface IMediaMetadataHelper;
    }

//    class CMediaMetadataRetriever {
//        constructor();
//
//        interface IMediaMetadataRetriever;
//    }

    class CMediaMuxer {
        constructor();

        constructor(
            [in] String bundle,
            [in] Int32 format);

        interface IMediaMuxer;
    }

    class CMediaRecorder {
        constructor();

        interface IMediaRecorder;
    }

    singleton class CMediaRecorderHelper {
        interface IMediaRecorderHelper;
    }

    class CMediaPlayerTrackInfo {
        constructor();

        constructor(
            [in] Int32 type,
            [in] IMediaFormat* format);

        interface IMediaPlayerTrackInfo;
        interface IParcelable;
    }

    class CMediaPlayer {
        constructor();

        interface IMediaPlayer;
        interface ISubtitleControllerListener;
    }

    class CMediaRouterSimpleCallback {
        constructor();

        interface IMediaRouterSimpleCallback;
        interface IMediaRouterCallback;
    }

    [deprecated]
    class CSubtitleController {

        constructor(
            [in] IContext* context,
            [in] IMediaTimeProvider* timeProvider,
            [in] ISubtitleControllerListener* listener);

        interface ISubtitleController;
    }

    class CSubtitleData {

        constructor();

        interface ISubtitleData;
    }

    class CWebVttRenderer {

        constructor(
            [in] IContext* context);

        interface ISubtitleControllerRenderer;
    }

    class CTextTrackCueSpan {

        constructor(
            [in] String text,
            [in] Int64 timestamp);

        interface ITextTrackCueSpan;
    }

    class CWebVttRendererTokenizer {

        constructor(
            [in] ITokenizerOnTokenListener* listener);

        interface ITokenizer;
    }

    class CWebVttRendererTokenizerDataTokenizer {

        constructor(
            [in] ITokenizer* host);

        interface ITokenizerDataTokenizer;
        interface ITokenizerTokenizerPhase;
    }

    class CWebVttRendererTokenizerTagTokenizer {

        constructor(
            [in] ITokenizer* host);

        interface ITokenizerTagTokenizer;
        interface ITokenizerTokenizerPhase;
    }

    class CWebVttRendererTextTrackCue {

        constructor();

        interface ITextTrackCue;
        interface ISubtitleTrackCue;
    }

    class CWebVttParser {

        constructor(
            [in] IWebVttCueListener* listener);

        interface IWebVttParser;
    }

    singleton class CWebVttParserHelper {
        interface IWebVttParserHelper;
    }

    class CTextTrackRegion {

        constructor();

        interface ITextTrackRegion;
    }

    class CWebVttRenderingWidget {

        constructor(
            [in] IContext* context);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyleAttr);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyleAttr,
            [in] Int32 defStyleRes);

        interface IWebVttRenderingWidget;
        interface ISubtitleTrackRenderingWidget;
        interface IView;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
        interface IViewParent;
        interface IViewManager;
    }

    class CTextTrackCue {

        constructor();

        interface ITextTrackCue;
        interface ISubtitleTrackCue;
    }

    class CUnstyledTextExtractor {

        constructor();

        interface IUnstyledTextExtractor;
        interface ITokenizerOnTokenListener;
    }

    class CMediaSyncEvent {

        constructor(
            [in] Int32 eventType);

        interface IMediaSyncEvent;
    }

    singleton class CMediaSyncEventHelper {
        interface IMediaSyncEventHelper;
    }

    class CResampleInputStream {

        constructor(
            [in] IInputStream* inputStream,
            [in] Int32 rateIn,
            [in] Int32 rateOut);

        interface IResampleInputStream;
    }

    class CSRTRenderer {

        constructor(
            [in] IContext* context);

        constructor(
            [in] IContext* context,
            [in] IHandler* eventHandler);

        interface ISubtitleControllerRenderer;
    }

    class CSRTTrack {

        constructor(
            [in] IWebVttRenderingWidget* renderingWidget,
            [in] IMediaFormat* format);

        constructor(
            [in] IHandler* eventHandler,
            [in] IMediaFormat* format);

        interface IWebVttCueListener;
        interface ISubtitleTrack;
        interface IMediaTimeProviderOnMediaTimeListener;
        interface ISRTTrack;
    }

    class CWebVttTrack {

        constructor(
            [in] IWebVttRenderingWidget* renderingWidget,
            [in] IMediaFormat* format);

        interface IWebVttCueListener;
        interface ISubtitleTrack;
        interface IMediaTimeProviderOnMediaTimeListener;
    }

    class CMediaRouterClientState {

        constructor();

        interface IMediaRouterClientState;
        interface IParcelable;
    }

    class CMediaRouterClientStateRouteInfo {

        constructor(
            [in] String id);

        constructor(
            [in] IMediaRouterClientStateRouteInfo* other);

        constructor();

        interface IMediaRouterClientStateRouteInfo;
        interface IParcelable;
    }

    class CRemoteDisplayState {

        constructor();

        interface IRemoteDisplayState;
        interface IParcelable;
    }

    class CRemoteDisplayInfo {

        constructor();

        constructor(
            [in] String id);

        constructor(
            [in] IRemoteDisplayStateRemoteDisplayInfo* other);

        interface IRemoteDisplayStateRemoteDisplayInfo;
        interface IParcelable;
    }

    class CToneGenerator {

        constructor(
            [in] Int32 streamType,
            [in] Int32 volume);

        interface IToneGenerator;
    }

    singleton class CThumbnailUtils {
        interface IThumbnailUtils;
    }

    class CMiniThumbFile {

        constructor(
            [in] IUri* uri);

        interface IMiniThumbFile;
    }

    singleton class CMiniThumbFileHelper {
        interface IMiniThumbFileHelper;
    }

    class CMetadata {

        constructor();

        interface IMetadata;
    }

    singleton class CMetadataHelper {
        interface IMetadataHelper;
    }

    [local]
    class CMediaScannerConnection {
        constructor(
            [in] IContext* ctx,
            [in] IMediaScannerConnectionClient* client);

        interface IMediaScannerConnection;
    }

    singleton class CMediaScannerConnectionHelper {

        interface IMediaScannerConnectionHelper;
    }

    //class CRemoteDisplay {

        //constructor(
        //    [in] IRemoteDisplayListener* listener,
        //    [in] IHandler* handler);

      //  interface IRemoteDisplay;
    //}

    //singleton class CRemoteDisplayHelper {

      //  interface IRemoteDisplayHelper;
    //}

    singleton class CRatingHelper {
        interface IRatingHelper;
    }

    [local]
    class CRingtoneManager {
        constructor(
            [in] IActivity* activity);

        constructor(
            [in] IContext* ctx);

        interface IRingtoneManager;
    }

    singleton class CRingtoneManagerHelper {
        interface IRingtoneManagerHelper;
    }

    [local]
    class CRingtone {
        constructor(
            [in] IContext* ctx,
            [in] Boolean allowRemote);

        interface IRingtone;
    }

    class CTimedText {
        constructor(
            [in] IParcel* parcel);

        interface ITimedText;
    }

    class CRemoteControlClient {
        constructor(
            [in] IPendingIntent* mediaButtonIntent);

        constructor(
            [in] IPendingIntent* mediaButtonIntent,
            [in] ILooper* looper);

        interface IRemoteControlClient;
    }

    } // namespace media
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Audiofx {

    class CAudioEffectDescriptor {
        constructor(
            [in] String type,
            [in] String uuid,
            [in] String connectMode,
            [in] String name,
            [in] String implementor);

        interface IAudioEffectDescriptor;
    }

    class CAudioEffect {
        constructor(
            [in] IUUID* type,
            [in] IUUID* uuid,
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IAudioEffect;
    }

    singleton class CAudioEffectHelper {
        interface IAudioEffectHelper;
    }

    class CAcousticEchoCanceler {
        constructor(
            [in] Int32 audioSession);

        interface IAcousticEchoCanceler;
        interface IAudioEffect;
    }

    singleton class CAcousticEchoCancelerHelper {
        interface IAcousticEchoCancelerHelper;
    }

    class CAutomaticGainControl {
        constructor(
            [in] Int32 audioSession);

        interface IAutomaticGainControl;
        interface IAudioEffect;
    }

    singleton class CAutomaticGainControlHelper {
        interface IAutomaticGainControlHelper;
    }

    class CBassBoostSettings {
        constructor();

        constructor(
            [in] String settings);

        interface IBassBoostSettings;
    }

    class CBassBoost {
        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IBassBoost;
        interface IAudioEffect;
    }

    class CEnvironmentalReverbSettings {
        constructor();

        constructor(
            [in] String settings);

        interface IEnvironmentalReverbSettings;
    }

    class CEnvironmentalReverb {
        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IEnvironmentalReverb;
        interface IAudioEffect;
    }

    class CEqualizerSettings {
        constructor();

        constructor(
            [in] String settings);

        interface IEqualizerSettings;
    }

    class CEqualizer {
        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IEqualizer;
    }

    class CLoudnessEnhancerSettings {
        constructor();

        constructor(
            [in] String settings);

        interface ILoudnessEnhancerSettings;
        interface IAudioEffect;
    }

    class CLoudnessEnhancer {
        constructor(
            [in] Int32 audioSession);

        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface ILoudnessEnhancer;
        interface IAudioEffect;
    }

    class CNoiseSuppressor {
        constructor(
            [in] Int32 audioSession);

        interface INoiseSuppressor;
        interface IAudioEffect;
    }

    singleton class CNoiseSuppressorHelper {
        interface INoiseSuppressorHelper;
    }

    class CPresetReverbSettings {
        constructor();

        constructor(
            [in] String settings);

        interface IPresetReverbSettings;
    }

    class CPresetReverb {
        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IPresetReverb;
        interface IAudioEffect;
    }

    class CVirtualizerSettings {
        constructor();

        constructor(
            [in] String settings);

        interface IVirtualizerSettings;
    }

    class CVirtualizer {
        constructor(
            [in] Int32 priority,
            [in] Int32 audioSession);

        interface IVirtualizer;
        interface IAudioEffect;
    }

    class CVisualizerMeasurementPeakRms {

        interface IVisualizerMeasurementPeakRms;
    }

    class CVisualizer {
        constructor(
            [in] Int32 audioSession);

        interface IVisualizer;
    }

    singleton class CVisualizerHelper {
        interface IVisualizerHelper;
    }

    } // namespace audiofx
    } // namespace Media
    } // namespace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace AudioPolicy {

    class CAudioMix {
        constructor(
            [in] IAudioMixingRule* rule,
            [in] IAudioFormat* format,
            [in] Int32 routeFlags);

       interface IAudioMix;
    }

    class CAudioMixBuilder {
        constructor();

        constructor(
            [in] IAudioMixingRule* rule);

        interface IAudioMixBuilder;
    }

    class CAudioMixingRule {
        constructor(
            [in] IArrayList* criteria);

        interface IAudioMixingRule;
    }

    class CAudioMixingRuleBuilder {
        constructor();

        interface IAudioMixingRuleBuilder;
    }

    class CAudioPolicy {
        constructor(
            [in] IAudioPolicyConfig* config);

        interface IAudioPolicy;
    }

    class CAudioPolicyBuilder {
        constructor();

        interface IAudioPolicyBuilder;
    }

    class CAudioPolicyConfig {
        constructor(
            [in] IArrayList* mixes);

        interface IAudioPolicyConfig;
        interface IParcelable;
    }

    } // namespace AudioPolicy
    } // namespace Media
    } // namespace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Browse {

    class CMediaBrowserMediaItem {
        constructor(
            [in] IMediaDescription* description,
            [in] Int32 flags);

        interface IMediaBrowserMediaItem;
        interface IParcelable;
    }

    class CMediaBrowserConnectionCallback {
        interface IMediaBrowserConnectionCallback;
    }

    class CMediaBrowserSubscriptionCallback {
        interface IMediaBrowserSubscriptionCallback;
    }

    class CMediaBrowser {
        constructor(
            [in] IContext* context,
            [in] IComponentName* serviceComponent,
            [in] IMediaBrowserConnectionCallback* cb,
            [in] IBundle* rootHints);

        interface IMediaBrowser;
    }

    } // namespace Browse
    } // namespace Media
    } // namespace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Projection {

    class CMediaProjectionCallback {
        interface IMediaProjectionCallback;
    }

    class CMediaProjection {
        constructor(
            [in] IContext* context,
            [in] IIMediaProjection* impl);

        interface IMediaProjection;
    }

    class CMediaProjectionInfo {
        constructor(
            [in] String packageName,
            [in] IUserHandle* handle);

        interface IMediaProjectionInfo;
        interface IParcelable;
    }

    class CMediaProjectionManager {
        constructor(
            [in] IContext* context);

        interface IMediaProjectionManager;
    }

    } // namespace Projection
    } // namespace Media
    } // namespace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Session {

    class CMediaControllerPlaybackInfo {
        constructor(
            [in] Int32 type,
            [in] IAudioAttributes* attrs,
            [in] Int32 control,
            [in] Int32 max,
            [in] Int32 current);

        interface IMediaControllerPlaybackInfo;
    }

    class CMediaControllerTransportControls {
        constructor(
            [in] IMediaController* host);

        interface IMediaControllerTransportControls;
    }

    class CMediaController {
        constructor(
            [in] IContext* context,
            [in] IISessionController* sessionBinder);

        constructor(
            [in] IContext* context,
            [in] IMediaSessionToken* token);

        interface IMediaController;
    }

    class CMediaSessionToken {
        constructor(
            [in] IISessionController* binder);

        interface IMediaSessionToken;
        interface IParcelable;
    }

    class CMediaSessionQueueItem {
        constructor(
            [in] IMediaDescription* description,
            [in] Int64 id);

        interface IMediaSessionQueueItem;
        interface IParcelable;
    }

    class CMediaSessionCallbackStub {
        constructor(
            [in] IMediaSession* session);

        interface IISessionCallback;
        interface IBinder;
    }

    class CMediaSessionCallback {
        constructor();

        interface IMediaSessionCallback;
    }

    class CMediaSession {
        constructor(
            [in] IContext* context,
            [in] String tag);

        constructor(
            [in] IContext* context,
            [in] String tag,
            [in] Int32 userId);

        interface IMediaSession;
    }

    singleton class CMediaSessionHelper {
        interface IMediaSessionHelper;
    }

    class CParcelableVolumeInfo {
        constructor(
            [in] Int32 volumeType,
            [in] IAudioAttributes* audioAttrs,
            [in] Int32 controlType,
            [in] Int32 maxVolume,
            [in] Int32 currentVolume);

        interface IParcelableVolumeInfo;
        interface IParcelable;
    }

    class CMediaSessionManager {
        constructor(
            [in] IContext* context);

        interface IMediaSessionManager;
    }

    class CMediaSessionLegacyHelper {
        constructor(
            [in] IContext* context);

        interface IMediaSessionLegacyHelper;
    }

    singleton class CMediaSessionLegacyHelperHelper {
        interface IMediaSessionLegacyHelperHelper;
    }

    class CPlaybackStateBuilder {
        constructor();

        constructor(
            [in] IPlaybackState* from);

        interface IPlaybackStateBuilder;
    }

    class CPlaybackStateCustomAction {
        constructor(
            [in] String action,
            [in] ICharSequence* name,
            [in] Int32 icon,
            [in] IBundle* extras);

        interface IPlaybackStateCustomAction;
    }

    class CPlaybackStateCustomActionBuilder {
        constructor(
            [in] String action,
            [in] ICharSequence* name,
            [in] Int32 icon);

        interface IPlaybackStateCustomActionBuilder;
    }

    class CPlaybackState {
        constructor(
            [in] Int32 state,
            [in] Int64 position,
            [in] Int64 updateTime,
            [in] Float speed,
            [in] Int64 bufferedPosition,
            [in] Int64 transportControls,
            [in] IList* customActions,
            [in] Int64 activeItemId,
            [in] ICharSequence* error);

        interface IPlaybackState;
    }

    singleton class CPlaybackStateHelper {
        interface IPlaybackStateHelper;
    }

    } // namespace Session
    } // namespace Media
    } // namespace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Tv {

    [local]
    class CITvInputSessionWrapper {
        constructor(
            [in] IContext* context,
            [in] ITvInputServiceSession* sessionImpl,
            [in] IInputChannel* channel);

        interface IITvInputSessionWrapper;
        interface IITvInputSession;
        interface IHandlerCallerCallback;
    }

    [deprecated]
    class CTvContentRating {
        constructor(
            [in] String domainStr,
            [in] String ratingSystem,
            [in] String rating,
            [in] ArrayOf<String>* subRatings);

        interface ITvContentRating;
    }

    singleton class CTvContentRatingHelper {
        interface ITvContentRatingHelper;
    }

    class CTvContentRatingSystemInfo {
        constructor(
            [in] IUri* xmlUri,
            [in] IApplicationInfo* applicationInfo);

        interface ITvContentRatingSystemInfo;
        interface IParcelable;
    }

    singleton class CTvContentRatingSystemInfoHelper {
        interface ITvContentRatingSystemInfoHelper;
    }

    class CTvInputHardwareInfo {
        constructor();

        interface ITvInputHardwareInfo;
        interface IParcelable;
    }

    class CTvInputHardwareInfoBuilder {
        constructor();

        interface ITvInputHardwareInfoBuilder;
    }

    class CTvStreamConfig {
        constructor();

        interface ITvStreamConfig;
        interface IParcelable;
    }

    class CTvStreamConfigBuilder {
        constructor();

        interface ITvStreamConfigBuilder;
    }

    class CTvTrackInfo {
        constructor(
            [in] Int32 type,
            [in] String id,
            [in] String language,
            [in] Int32 audioChannelCount,
            [in] Int32 audioSampleRate,
            [in] Int32 videoWidth,
            [in] Int32 videoHeight,
            [in] Float videoFrameRate,
            [in] IBundle* extra);

        interface ITvTrackInfo;
        interface IParcelable;
    }

    class CTvTrackInfoBuilder {
        constructor(
            [in] Int32 type,
            [in] String id);

        interface ITvTrackInfoBuilder;
    }

    singleton class CTvInputInfoTvInputSettings {
        interface ITvInputInfoTvInputSettings;
    }

    class CTvInputInfo {
        constructor(
            [in] IResolveInfo * service,
            [in] String id,
            [in] String parentId,
            [in] Int32 type);

        interface ITvInputInfo;
        interface IParcelable;
    }

    singleton class CTvInputInfoHelper {
        interface ITvInputInfoHelper;
    }

    class CTvInputManagerSession {
        constructor(
            [in] IBinder* token,
            [in] IInputChannel* channel,
            [in] IITvInputManager* service,
            [in] Int32 userId,
            [in] Int32 seq,
            [in] ISparseArray* sessionCallbackRecordMap);

        interface ITvInputManagerSession;
    }

    class CTvInputManagerHardware {
        constructor(
            [in] IITvInputHardware* hardwareInterfacep);

        interface ITvInputManagerHardware;
    }

    class CTvInputManager {
        constructor(
            [in] IITvInputManager* service,
            [in] Int32 userId);

        interface ITvInputManager;
    }

    class CTvView {
        constructor(
            [in] IContext* context);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs);

        constructor(
            [in] IContext* context,
            [in] IAttributeSet* attrs,
            [in] Int32 defStyleAttr);

        interface ITvView;
        interface IViewGroup;
        interface IView;
        interface IDrawableCallback;
        interface IKeyEventCallback;
        interface IAccessibilityEventSource;
    }

    } // namespace Tv
    } // namespace Media
    } // namespace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Mtp {

    singleton class CMtpConstants {
        interface IMtpConstants;
    }

    [local, deprecated]
    class CMtpDatabase {
        constructor(
            [in] IContext* ctx,
            [in] String volumeName,
            [in] String storagePath,
            [in] ArrayOf<String>* subDirectories);

        interface IMtpDatabase;
     }

    class CMtpDevice {
        constructor(
            [in] IUsbDevice* device);

        interface IMtpDevice;
    }

    class CMtpDeviceInfo {
        interface IMtpDeviceInfo;
    }

    class CMtpObjectInfo {
        interface IMtpObjectInfo;
    }

    [deprecated]
    class CMtpPropertyGroup {
        constructor(
            [in] IMtpDatabase* database,
            [in] IIContentProvider* provider,
            [in] String packageName,
            [in] String volume,
            [in] ArrayOf<Int32>* properties);

        interface IMtpPropertyGroup;
    }

    class CMtpPropertyList {
        constructor(
            [in] Int32 maxCount,
            [in] Int32 result);

        interface IMtpPropertyList;
    }

    class CMtpServer {
        constructor(
            [in] IMtpDatabase* database,
            [in] Boolean usePtp);

        interface IMtpServer;
        interface IRunnable;
    }

    [local]
    class CMtpStorage {
        constructor(
            [in] IStorageVolume* volume,
            [in] IContext* ctx);

        interface IMtpStorage;
    }

    class CMtpStorageInfo {
        interface IMtpStorageInfo;
    }

    } // namespace mtp
    } // namespace Droid
    } // namespace Elastos
}
