
module
{
    interface Elastos.Droid.Net.IDhcpInfo;
    interface Elastos.Droid.Net.Wifi.IWifiConfiguration;
    interface Elastos.Droid.Net.Wifi.IWifiInfo;
    interface Elastos.Droid.Os.IWorkSource;
    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Os.IMessenger;

    namespace Elastos {
    namespace Droid {
    namespace Wifi {

    /**
     * Interface that allows controlling and querying Wi-Fi connectivity.
     *
     * {@hide}
     */
    interface IIWifiManager {
        GetConfiguredNetworks(
            [out] IObjectContainer** configList);

        AddOrUpdateNetwork(
            [in] IWifiConfiguration* config,
            [out] Int32* result);

        RemoveNetwork(
            [in] Int32 netId,
            [out] Boolean* state);

        EnableNetwork(
            [in] Int32 netId,
            [in] Boolean disableOthers,
            [out] Boolean* enabled);

        DisableNetwork(
            [in] Int32 netId,
            [out] Boolean* disabled);

        PingSupplicant(
            [out] Boolean* state);

        StartScan(
            [in] Boolean forceActive);

        GetScanResults(
            [out] IObjectContainer** results);

        Disconnect();

        Reconnect();

        Reassociate();

        GetConnectionInfo(
            [out] IWifiInfo** info);

        SetWifiEnabled(
            [in] Boolean enabled,
            [out] Boolean* result);

        GetWifiEnabledState(
            [out] Int32* state);

        SetCountryCode(
            [in] String country,
            [in] Boolean persist);

        SetFrequencyBand(
            [in] Int32 band,
            [in] Boolean persist);

        GetFrequencyBand(
            [out] Int32* band);

        IsDualBandSupported(
            [out] Boolean* supported);

        SaveConfiguration(
            [out] Boolean* state);

        GetDhcpInfo(
            [out] IDhcpInfo** info);

        AcquireWifiLock(
            [in] IBinder* lock,
            [in] Int32 lockType,
            [in] String tag,
            [in] IWorkSource* ws,
            [out] Boolean* result);

        UpdateWifiLockWorkSource(
            [in] IBinder* lock,
            [in] IWorkSource* ws);

        ReleaseWifiLock(
            [in] IBinder* lock,
            [out] Boolean* result);

        InitializeMulticastFiltering();

        IsMulticastEnabled(
            [out] Boolean* enabled);

        AcquireMulticastLock(
            [in] IBinder* binder,
            [in] String tag);

        ReleaseMulticastLock();

        SetWifiApEnabled(
            [in] IWifiConfiguration* wifiConfig,
            [in] Boolean enabled);

        GetWifiApEnabledState(
            [out] Int32* state);

        GetWifiApConfiguration(
            [out] IWifiConfiguration** apConfig);

        SetWifiApConfiguration(
            [in] IWifiConfiguration* wifiConfig);

        StartWifi();

        StopWifi();

        AddToBlacklist(
            [in] String bssid);

        ClearBlacklist();

        GetWifiServiceMessenger(
            [out] IMessenger** msg);

        GetWifiStateMachineMessenger(
            [out] IMessenger** msg);

        GetConfigFile(
            [out] String* file);

        CaptivePortalCheckComplete();
    }

    } // namespace Wifi
    } // namespace Droid
    } // namespace Elastos
}
