
module
{
    enum Elastos.Droid.Net.IpConfigurationIpAssignment;
    enum Elastos.Droid.Net.IpConfigurationProxySettings;
    interface Elastos.Droid.Net.IIpConfiguration;
    interface Elastos.Droid.Net.IProxyInfo;
    interface Elastos.Droid.Net.IStaticIpConfiguration;
    interface Elastos.Droid.Wifi.IWifiConfigurationVisibility;
    interface Elastos.Droid.Wifi.IWifiEnterpriseConfig;

    using interface Elastos.Utility.IBitSet;
    using interface Elastos.Utility.IHashMap;

    namespace Elastos {
    namespace Droid {
    namespace Wifi {

    /**
     * A class representing a configured Wi-Fi network, including the
     * security configuration.
     */
    /**
     * @Involved
     * interface IParcelable;
     */
    [deprecated, local]
    interface IWifiConfiguration {
        /** {@hide} */
        const String ssidVarName = "ssid";
        /** {@hide} */
        const String bssidVarName = "bssid";
        /** {@hide} */
        const String pskVarName = "psk";
        /** {@hide} */
        const String wepTxKeyIdxVarName = "wep_tx_keyidx";
        /** {@hide} */
        const String priorityVarName = "priority";
        /** {@hide} */
        const String hiddenSSIDVarName = "scan_ssid";
        /** {@hide} */
        const String pmfVarName = "ieee80211w";
        /** {@hide} */
        const String updateIdentiferVarName = "update_identifier";
        /** {@hide} */
        const Int32 INVALID_NETWORK_ID = -1;

        /** @hide */
        const Int32 DISABLED_UNKNOWN_REASON         = 0;
        /** @hide */
        const Int32 DISABLED_DNS_FAILURE            = 1;
        /** @hide */
        const Int32 DISABLED_DHCP_FAILURE           = 2;
        /** @hide */
        const Int32 DISABLED_AUTH_FAILURE           = 3;
        /** @hide */
        const Int32 DISABLED_ASSOCIATION_REJECT     = 4;
        /** @hide */
        const Int32 DISABLED_BY_WIFI_MANAGER        = 5;

        /** @hide */
        const Int32 AUTO_JOIN_ENABLED = 0;
        /**
         * if this is set, the WifiConfiguration cannot use linkages so as to bump
         * it's relative priority.
         * - status between and 128 indicate various level of blacklisting depending
         * on the severity or frequency of the connection error
         * - deleted status indicates that the user is deleting the configuration, and so
         * although it may have been self added we will not re-self-add it, ignore it,
         * not return it to applications, and not connect to it
         * */

        /** @hide
         * network was temporary disabled due to bad connection, most likely due
         * to weak RSSI */
        const Int32 AUTO_JOIN_TEMPORARY_DISABLED = 1;
        /** @hide
         * network was temporary disabled due to bad connection, which cant be attributed
         * to weak RSSI */
        const Int32 AUTO_JOIN_TEMPORARY_DISABLED_LINK_ERRORS = 32;
        /** @hide */
        const Int32 AUTO_JOIN_TEMPORARY_DISABLED_AT_SUPPLICANT = 64;
        /** @hide */
        const Int32 AUTO_JOIN_DISABLED_ON_AUTH_FAILURE = 128;
        /** @hide */
        const Int32 AUTO_JOIN_DISABLED_NO_CREDENTIALS = 160;
        /** @hide */
        const Int32 AUTO_JOIN_DISABLED_USER_ACTION = 161;

        /** @hide */
        const Int32 AUTO_JOIN_DELETED = 200;

        /**
         * The ID number that the supplicant uses to identify this
         * network configuration entry. This must be passed as an argument
         * to most calls into the supplicant.
         */
        GetNetworkId(
            [out] Int32* result);

        SetNetworkId(
            [in] Int32 networkId);

        /**
         * The current status of this network configuration entry.
         * @see Status
         */
        GetStatus(
            [out] Int32* result);

        SetStatus(
            [in] Int32 status);

        /**
         * The configuration needs to be written to networkHistory.txt
         * @hide
         */
        GetDirty(
            [out] Boolean* result);

        SetDirty(
            [in] Boolean dirty);

        /**
         * The code referring to a reason for disabling the network
         * Valid when {@link #status} == Status.DISABLED
         * @hide
         */
        GetDisableReason(
            [out] Int32* result);

        SetDisableReason(
            [in] Int32 disableReason);

        /**
         * The network's SSID. Can either be an ASCII string,
         * which must be enclosed in double quotation marks
         * (e.g., {@code "MyNetwork"}, or a string of
         * hex digits,which are not enclosed in quotes
         * (e.g., {@code 01a243f405}).
         */
        GetSSID(
            [out] String* result);

        SetSSID(
            [in] String SSID);

        /**
         * When set, this network configuration entry should only be used when
         * associating with the AP having the specified BSSID. The value is
         * a string in the format of an Ethernet MAC address, e.g.,
         * <code>XX:XX:XX:XX:XX:XX</code> where each <code>X</code> is a hex digit.
         */
        GetBSSID(
            [out] String* result);

        SetBSSID(
            [in] String BSSID);

        /**
         * Fully qualified domain name (FQDN) of AAA server or RADIUS server
         * e.g. {@code "mail.example.com"}.
         */
        GetFQDN(
            [out] String* result);

        SetFQDN(
            [in] String FQDN);

        /**
         * Network access identifier (NAI) realm, for Passpoint credential.
         * e.g. {@code "myhost.example.com"}.
         * @hide
         */
        GetNaiRealm(
            [out] String* result);

        SetNaiRealm(
            [in] String naiRealm);

        /**
         * Pre-shared key for use with WPA-PSK.
         * <p/>
         * When the value of this key is read, the actual key is
         * not returned, just a "*" if the key has a value, or the null
         * string otherwise.
         */
        GetPreSharedKey(
            [out] String* result);

        SetPreSharedKey(
            [in] String preSharedKey);

        /**
         * Up to four WEP keys. Either an ASCII string enclosed in double
         * quotation marks (e.g., {@code "abcdef"} or a string
         * of hex digits (e.g., {@code 0102030405}).
         * <p/>
         * When the value of one of these keys is read, the actual key is
         * not returned, just a "*" if the key has a value, or the null
         * string otherwise.
         */
        GetWepKeys(
            [out, callee] ArrayOf<String>* result);

        SetWepKeys(
            [in] ArrayOf<String>* wepKeys);

        /** Default WEP key index, ranging from 0 to 3. */
        GetWepTxKeyIndex(
            [out] Int32* result);

        SetWepTxKeyIndex(
            [in] Int32 wepTxKeyIndex);

        /**
         * Priority determines the preference given to a network by {@code wpa_supplicant}
         * when choosing an access point with which to associate.
         */
        GetPriority(
            [out] Int32* result);

        SetPriority(
            [in] Int32 priority);

        /**
         * This is a network that does not broadcast its SSID, so an
         * SSID-specific probe request must be used for scans.
         */
        GetHiddenSSID(
            [out] Boolean* result);

        SetHiddenSSID(
            [in] Boolean hiddenSSID);

        /**
         * This is a network that requries Protected Management Frames (PMF).
         * @hide
         */
        GetRequirePMF(
            [out] Boolean* result);

        SetRequirePMF(
            [in] Boolean requirePMF);

        /**
         * Update identifier, for Passpoint network.
         * @hide
         */
        GetUpdateIdentifier(
            [out] String* result);

        SetUpdateIdentifier(
            [in] String updateIdentifier);

        /**
         * The set of key management protocols supported by this configuration.
         * See {@link KeyMgmt} for descriptions of the values.
         * Defaults to WPA-PSK WPA-EAP.
         */
        GetAllowedKeyManagement(
            [out] IBitSet** result);

        SetAllowedKeyManagement(
            [in] IBitSet* allowedKeyManagement);

        /**
         * The set of security protocols supported by this configuration.
         * See {@link Protocol} for descriptions of the values.
         * Defaults to WPA RSN.
         */
        GetAllowedProtocols(
            [out] IBitSet** result);

        SetAllowedProtocols(
            [in] IBitSet* allowedProtocols);

        /**
         * The set of authentication protocols supported by this configuration.
         * See {@link AuthAlgorithm} for descriptions of the values.
         * Defaults to automatic selection.
         */
        GetAllowedAuthAlgorithms(
            [out] IBitSet** result);

        SetAllowedAuthAlgorithms(
            [in] IBitSet* allowedAuthAlgorithms);

        /**
         * The set of pairwise ciphers for WPA supported by this configuration.
         * See {@link PairwiseCipher} for descriptions of the values.
         * Defaults to CCMP TKIP.
         */
        GetAllowedPairwiseCiphers(
            [out] IBitSet** result);

        SetAllowedPairwiseCiphers(
            [in] IBitSet* allowedPairwiseCiphers);

        /**
         * The set of group ciphers supported by this configuration.
         * See {@link GroupCipher} for descriptions of the values.
         * Defaults to CCMP TKIP WEP104 WEP40.
         */
        GetAllowedGroupCiphers(
            [out] IBitSet** result);

        SetAllowedGroupCiphers(
            [in] IBitSet* allowedGroupCiphers);

        /**
         * The enterprise configuration details specifying the EAP method,
         * certificates and other settings associated with the EAP.
         */
        GetEnterpriseConfig(
            [out] IWifiEnterpriseConfig** result);

        SetEnterpriseConfig(
            [in] IWifiEnterpriseConfig* enterpriseConfig);

        /**
         * @hide
         * dhcp server MAC address if known
         */
        GetDhcpServer(
            [out] String* result);

        SetDhcpServer(
            [in] String dhcpServer);

        /**
         * @hide
         * default Gateway MAC address if known
         */
        GetDefaultGwMacAddress(
            [out] String* result);

        SetDefaultGwMacAddress(
            [in] String defaultGwMacAddress);

        /**
         * @hide
         * last failure
         */
        GetLastFailure(
            [out] String* result);

        SetLastFailure(
            [in] String lastFailure);

        /**
         * @hide
         * last time we connected, this configuration had no internet access
         */
        GetNoInternetAccess(
            [out] Boolean* result);

        SetNoInternetAccess(
            [in] Boolean noInternetAccess);

        /**
         * @hide
         * Uid of app creating the configuration
         */
        // @SystemApi
        GetCreatorUid(
            [out] Int32* result);

        SetCreatorUid(
            [in] Int32 creatorUid);

        /**
         * @hide
         * Uid of last app issuing a connection related command
         */
        GetLastConnectUid(
            [out] Int32* result);

        SetLastConnectUid(
            [in] Int32 lastConnectUid);

        /**
         * @hide
         * Uid of last app modifying the configuration
         */
        // @SystemApi
        GetLastUpdateUid(
            [out] Int32* result);

        SetLastUpdateUid(
            [in] Int32 lastUpdateUid);

        /**
         * @hide
         * Uid used by autoJoin
         */
        GetAutoJoinBSSID(
            [out] String* result);

        SetAutoJoinBSSID(
            [in] String autoJoinBSSID);

        /**
         * @hide
         * BSSID list on which this configuration was seen.
         * TODO: prevent this list to grow infinitely, age-out the results
         */
        GetScanResultCache(
            [out] IHashMap** result);

        SetScanResultCache(
            [in] IHashMap* scanResultCache);

        /** @hide
         * Cache the visibility status of this configuration.
         * Visibility can change at any time depending on scan results availability.
         * Owner of the WifiConfiguration is responsible to set this field based on
         * recent scan results.
         ***/
        GetVisibility(
            [out] IWifiConfigurationVisibility** result);

        SetVisibility(
            [in] IWifiConfigurationVisibility* visibility);

        /**
         * @hide
         */
        GetAutoJoinStatus(
            [out] Int32* result);

        /**
         * @hide
         * Number of connection failures
         */
        GetNumConnectionFailures(
            [out] Int32* result);

        SetNumConnectionFailures(
            [in] Int32 numConnectionFailures);

        /**
         * @hide
         * Number of IP config failures
         */
        GetNumIpConfigFailures(
            [out] Int32* result);

        SetNumIpConfigFailures(
            [in] Int32 numIpConfigFailures);

        /**
         * @hide
         * Number of Auth failures
         */
        GetNumAuthFailures(
            [out] Int32* result);

        SetNumAuthFailures(
            [in] Int32 numAuthFailures);

        /**
         * @hide
         * Last time we blacklisted the configuration
         */
        GetBlackListTimestamp(
            [out] Int64* result);

        SetBlackListTimestamp(
            [in] Int64 blackListTimestamp);

        /**
         * @hide
         * Last time the system was connected to this configuration.
         */
        GetLastConnected(
            [out] Int64* result);

        SetLastConnected(
            [in] Int64 lastConnected);

        /**
         * @hide
         * Last time the system tried to connect and failed.
         */
        GetLastConnectionFailure(
            [out] Int64* result);

        SetLastConnectionFailure(
            [in] Int64 lastConnectionFailure);

        /**
         * @hide
         * Last time the system was disconnected to this configuration.
         */
        GetLastDisconnected(
            [out] Int64* result);

        SetLastDisconnected(
            [in] Int64 lastDisconnected);

        /**
         * Set if the configuration was self added by the framework
         * This boolean is cleared if we get a connect/save/ update or
         * any wifiManager command that indicate the user interacted with the configuration
         * since we will now consider that the configuration belong to him.
         * @hide
         */
        GetSelfAdded(
            [out] Boolean* result);

        SetSelfAdded(
            [in] Boolean selfAdded);

        /**
         * Set if the configuration was self added by the framework
         * This boolean is set once and never cleared. It is used
         * so as we never loose track of who created the
         * configuration in the first place.
         * @hide
         */
        GetDidSelfAdd(
            [out] Boolean* result);

        SetDidSelfAdd(
            [in] Boolean didSelfAdd);

        /**
         * Peer WifiConfiguration this WifiConfiguration was added for
         * @hide
         */
        GetPeerWifiConfiguration(
            [out] String* result);

        SetPeerWifiConfiguration(
            [in] String peerWifiConfiguration);

        /**
         * @hide
         * Indicate that a WifiConfiguration is temporary and should not be saved
         * nor considered by AutoJoin.
         */
        GetEphemeral(
            [out] Boolean* result);

        SetEphemeral(
            [in] Boolean ephemeral);

        /**
         * @hide
         * Indicate that we didn't auto-join because rssi was too low
         */
        GetAutoJoinBailedDueToLowRssi(
            [out] Boolean* result);

        SetAutoJoinBailedDueToLowRssi(
            [in] Boolean autoJoinBailedDueToLowRssi);

        /**
         * @hide
         * AutoJoin even though RSSI is 10dB below threshold
         */
        GetAutoJoinUseAggressiveJoinAttemptThreshold(
            [out] Int32* result);

        SetAutoJoinUseAggressiveJoinAttemptThreshold(
            [in] Int32 autoJoinUseAggressiveJoinAttemptThreshold);

        /**
         * @hide
         * Number of time the scorer overrode a the priority based choice, when comparing two
         * WifiConfigurations, note that since comparing WifiConfiguration happens very often
         * potentially at every scan, this number might become very large, even on an idle
         * system.
         */
        // @SystemApi
        GetNumScorerOverride(
            [out] Int32* result);

        SetNumScorerOverride(
            [in] Int32 numScorerOverride);

        /**
         * @hide
         * Number of time the scorer overrode a the priority based choice, and the comparison
         * triggered a network switch
         */
        // @SystemApi
        GetNumScorerOverrideAndSwitchedNetwork(
            [out] Int32* result);

        SetNumScorerOverrideAndSwitchedNetwork(
            [in] Int32 numScorerOverrideAndSwitchedNetwork);

        /**
         * @hide
         * Number of time we associated to this configuration.
         */
        // @SystemApi
        GetNumAssociation(
            [out] Int32* result);

        SetNumAssociation(
            [in] Int32 numAssociation);

        /**
         * @hide
         * Number of time user disabled WiFi while associated to this configuration with Low RSSI.
         */
        GetNumUserTriggeredWifiDisableLowRSSI(
            [out] Int32* result);

        SetNumUserTriggeredWifiDisableLowRSSI(
            [in] Int32 numUserTriggeredWifiDisableLowRSSI);

        /**
         * @hide
         * Number of time user disabled WiFi while associated to this configuration with Bad RSSI.
         */
        GetNumUserTriggeredWifiDisableBadRSSI(
            [out] Int32* result);

        SetNumUserTriggeredWifiDisableBadRSSI(
            [in] Int32 numUserTriggeredWifiDisableBadRSSI);

        /**
         * @hide
         * Number of time user disabled WiFi while associated to this configuration
         * and RSSI was not HIGH.
         */
        GetNumUserTriggeredWifiDisableNotHighRSSI(
            [out] Int32* result);

        SetNumUserTriggeredWifiDisableNotHighRSSI(
            [in] Int32 numUserTriggeredWifiDisableNotHighRSSI);

        /**
         * @hide
         * Number of ticks associated to this configuration with Low RSSI.
         */
        GetNumTicksAtLowRSSI(
            [out] Int32* result);

        SetNumTicksAtLowRSSI(
            [in] Int32 numTicksAtLowRSSI);

        /**
         * @hide
         * Number of ticks associated to this configuration with Bad RSSI.
         */
        GetNumTicksAtBadRSSI(
            [out] Int32* result);

        SetNumTicksAtBadRSSI(
            [in] Int32 numTicksAtBadRSSI);

        /**
         * @hide
         * Number of ticks associated to this configuration
         * and RSSI was not HIGH.
         */
        GetNumTicksAtNotHighRSSI(
            [out] Int32* result);

        SetNumTicksAtNotHighRSSI(
            [in] Int32 numTicksAtNotHighRSSI);

        /**
         * @hide
         * Number of time user (WifiManager) triggered association to this configuration.
         * TODO: count this only for Wifi Settings uuid, so as to not count 3rd party apps
         */
        GetNumUserTriggeredJoinAttempts(
            [out] Int32* result);

        SetNumUserTriggeredJoinAttempts(
            [in] Int32 numUserTriggeredJoinAttempts);

        /**
         * @hide
         * Connect choices
         *
         * remember the keys identifying the known WifiConfiguration over which this configuration
         * was preferred by user or a "WiFi Network Management app", that is,
         * a WifiManager.CONNECT_NETWORK or SELECT_NETWORK was received while this configuration
         * was visible to the user:
         * configKey is : "SSID"-WEP-WPA_PSK-WPA_EAP
         *
         * The integer represents the configuration's RSSI at that time (useful?)
         *
         * The overall auto-join algorithm make use of past connect choice so as to sort configuration,
         * the exact algorithm still fluctuating as of 5/7/2014
         *
         */
        GetConnectChoices(
            [out] IHashMap** result);

        SetConnectChoices(
            [in] IHashMap* connectChoices);

        /**
         * @hide
         * Linked Configurations: represent the set of Wificonfigurations that are equivalent
         * regarding roaming and auto-joining.
         * The linked configuration may or may not have same SSID, and may or may not have same
         * credentials.
         * For instance, linked configurations will have same defaultGwMacAddress or same dhcp server.
         */
        GetLinkedConfigurations(
            [out] IHashMap** result);

        SetLinkedConfigurations(
            [in] IHashMap* linkedConfigurations);

        /** {@hide} */
        GetWepKeyVarNames(
            [out, callee] ArrayOf<String>* result);

        /** @hide
         * calculate and set Visibility for that configuration.
         *
         * age in milliseconds: we will consider only ScanResults that are more recent,
         * i.e. younger.
         ***/
        SetVisibility(
            [in] Int64 age,
            [out] IWifiConfigurationVisibility** result);

        /**
         * indicates whether the configuration is valid
         * @return true if valid, false otherwise
         * @hide
         */
        IsValid(
            [out] Boolean* result);

        /**
         * Helper function, identify if a configuration is linked
         * @hide
         */
        IsLinked(
            [in] IWifiConfiguration* config,
            [out] Boolean* result);

        /**
         * most recent time we have seen this configuration
         * @return most recent scanResult
         * @hide
         */
        LastSeen(
            [out] IScanResult** result);

        /** @hide **/
        SetAutoJoinStatus(
            [in] Int32 status);

        /** {@hide} */
        GetPrintableSsid(
            [out] String* result);

        /**
         * Get an identifier for associating credentials with this config
         * @param current configuration contains values for additional fields
         *                that are not part of this configuration. Used
         *                when a config with some fields is passed by an application.
         * @throws IllegalStateException if config is invalid for key id generation
         * @hide
         */
        GetKeyIdForCredentials(
            [in] IWifiConfiguration* current,
            [out] String* result);

        /** @hide */
        GetAuthType(
            [out] Int32* result);

        /** @hide
         *  return the string used to calculate the hash in WifiConfigStore
         *  and uniquely identify this WifiConfiguration
         */
        ConfigKey(
            [in] Boolean allowCached,
            [out] String* result);

        /** @hide
         * get configKey, force calculating the config string
         */
        ConfigKey(
            [out] String* result);

        /** @hide */
        GetIpConfiguration(
            [out] IIpConfiguration** result);

        /** @hide */
        SetIpConfiguration(
            [in] IIpConfiguration* ipConfiguration);

        /** @hide */
        GetStaticIpConfiguration(
            [out] IStaticIpConfiguration** result);

        /** @hide */
        SetStaticIpConfiguration(
            [in] IStaticIpConfiguration* staticIpConfiguration);

        /** @hide */
        GetIpAssignment(
            [out] IpConfigurationIpAssignment* result);

        /** @hide */
        SetIpAssignment(
            [in] IpConfigurationIpAssignment ipAssignment);

        /** @hide */
        GetProxySettings(
            [out] IpConfigurationProxySettings* result);

        /** @hide */
        SetProxySettings(
            [in] IpConfigurationProxySettings proxySettings);

        /** @hide */
        GetHttpProxy(
            [out] IProxyInfo** result);

        /** @hide */
        SetHttpProxy(
            [in] IProxyInfo* httpProxy);

        /** @hide */
        SetProxy(
            [in] IpConfigurationProxySettings settings,
            [in] IProxyInfo* proxy);
    }


    interface IWifiConfigurationHelper {
        /** @hide **/
        GetINVALID_RSSI(
            [out] Int32* result);

        SetINVALID_RSSI(
            [in] Int32 INVALID_RSSI);

        /** @hide **/
        GetUNWANTED_BLACKLIST_SOFT_RSSI_24(
            [out] Int32* result);

        SetUNWANTED_BLACKLIST_SOFT_RSSI_24(
            [in] Int32 UNWANTED_BLACKLIST_SOFT_RSSI_24);

        /** @hide **/
        GetUNWANTED_BLACKLIST_SOFT_RSSI_5(
            [out] Int32* result);

        SetUNWANTED_BLACKLIST_SOFT_RSSI_5(
            [in] Int32 UNWANTED_BLACKLIST_SOFT_RSSI_5);

        /** @hide **/
        GetGOOD_RSSI_24(
            [out] Int32* result);

        SetGOOD_RSSI_24(
            [in] Int32 GOOD_RSSI_24);

        /** @hide **/
        GetLOW_RSSI_24(
            [out] Int32* result);

        SetLOW_RSSI_24(
            [in] Int32 LOW_RSSI_24);

        /** @hide **/
        GetBAD_RSSI_24(
            [out] Int32* result);

        SetBAD_RSSI_24(
            [in] Int32 BAD_RSSI_24);

        /** @hide **/
        GetGOOD_RSSI_5(
            [out] Int32* result);

        SetGOOD_RSSI_5(
            [in] Int32 GOOD_RSSI_5);

        /** @hide **/
        GetLOW_RSSI_5(
            [out] Int32* result);

        SetLOW_RSSI_5(
            [in] Int32 LOW_RSSI_5);

        /** @hide **/
        GetBAD_RSSI_5(
            [out] Int32* result);

        SetBAD_RSSI_5(
            [in] Int32 BAD_RSSI_5);

        /** @hide **/
        GetUNWANTED_BLACKLIST_SOFT_BUMP(
            [out] Int32* result);

        SetUNWANTED_BLACKLIST_SOFT_BUMP(
            [in] Int32 UNWANTED_BLACKLIST_SOFT_BUMP);

        /** @hide **/
        GetUNWANTED_BLACKLIST_HARD_BUMP(
            [out] Int32* result);

        SetUNWANTED_BLACKLIST_HARD_BUMP(
            [in] Int32 UNWANTED_BLACKLIST_HARD_BUMP);

        /** @hide **/
        GetUNBLACKLIST_THRESHOLD_24_SOFT(
            [out] Int32* result);

        SetUNBLACKLIST_THRESHOLD_24_SOFT(
            [in] Int32 UNBLACKLIST_THRESHOLD_24_SOFT);

        /** @hide **/
        GetUNBLACKLIST_THRESHOLD_24_HARD(
            [out] Int32* result);

        SetUNBLACKLIST_THRESHOLD_24_HARD(
            [in] Int32 UNBLACKLIST_THRESHOLD_24_HARD);

        /** @hide **/
        GetUNBLACKLIST_THRESHOLD_5_SOFT(
            [out] Int32* result);

        SetUNBLACKLIST_THRESHOLD_5_SOFT(
            [in] Int32 UNBLACKLIST_THRESHOLD_5_SOFT);

        /** @hide **/
        GetUNBLACKLIST_THRESHOLD_5_HARD(
            [out] Int32* result);

        SetUNBLACKLIST_THRESHOLD_5_HARD(
            [in] Int32 UNBLACKLIST_THRESHOLD_5_HARD);

        /** @hide **/
        GetINITIAL_AUTO_JOIN_ATTEMPT_MIN_24(
            [out] Int32* result);

        SetINITIAL_AUTO_JOIN_ATTEMPT_MIN_24(
            [in] Int32 INITIAL_AUTO_JOIN_ATTEMPT_MIN_24);

        /** @hide **/
        GetINITIAL_AUTO_JOIN_ATTEMPT_MIN_5(
            [out] Int32* result);

        SetINITIAL_AUTO_JOIN_ATTEMPT_MIN_5(
            [in] Int32 INITIAL_AUTO_JOIN_ATTEMPT_MIN_5);

        /** @hide
         * 5GHz band is prefered low over 2.4 if the 5GHz RSSI is higher than this threshold */
        GetA_BAND_PREFERENCE_RSSI_THRESHOLD(
            [out] Int32* result);

        SetA_BAND_PREFERENCE_RSSI_THRESHOLD(
            [in] Int32 A_BAND_PREFERENCE_RSSI_THRESHOLD);

        /** @hide
         * 5GHz band is penalized if the 5GHz RSSI is lower than this threshold **/
        GetG_BAND_PREFERENCE_RSSI_THRESHOLD(
            [out] Int32* result);

        SetG_BAND_PREFERENCE_RSSI_THRESHOLD(
            [in] Int32 G_BAND_PREFERENCE_RSSI_THRESHOLD);

        /** @hide
         * Boost given to RSSI on a home network for the purpose of calculating the score
         * This adds stickiness to home networks, as defined by:
         * - less than 4 known BSSIDs
         * - PSK only
         * - TODO: add a test to verify that all BSSIDs are behind same gateway
         ***/
        GetHOME_NETWORK_RSSI_BOOST(
            [out] Int32* result);

        SetHOME_NETWORK_RSSI_BOOST(
            [in] Int32 HOME_NETWORK_RSSI_BOOST);

        /** @hide
         * RSSI boost for configuration which use autoJoinUseAggressiveJoinAttemptThreshold
         * To be more aggressive when initially attempting to auto join
         */
        GetMAX_INITIAL_AUTO_JOIN_RSSI_BOOST(
            [out] Int32* result);

        SetMAX_INITIAL_AUTO_JOIN_RSSI_BOOST(
            [in] Int32 MAX_INITIAL_AUTO_JOIN_RSSI_BOOST);

        /** @hide
         * return the config key string based on a scan result
         */
        ConfigKey(
            [in] IScanResult* scanResult,
            [out] String* result);
    }

    /**
     * Recognized key management schemes.
     */
    /**
     * @Involved
     * no super interface
     */
    interface IWifiConfigurationKeyMgmt {
        /** WPA is not used; plaintext or static WEP could be used. */
        const Int32 NONE = 0;
        /** WPA pre-shared key (requires {@code preSharedKey} to be specified). */
        const Int32 WPA_PSK = 1;
        /** WPA using EAP authentication. Generally used with an external authentication server. */
        const Int32 WPA_EAP = 2;
        /** IEEE 802.1X using EAP authentication and (optionally) dynamically
         * generated WEP keys. */
        const Int32 IEEE8021X = 3;

        /** WPA2 pre-shared key for use with soft access point
         * (requires {@code preSharedKey} to be specified).
         * @hide
         */
        const Int32 WPA2_PSK = 4;

        const String VAR_NAME = "key_mgmt";

        GetStrings(
            [out, callee] ArrayOf<String>* result);
    }

    /**
     * Recognized security protocols.
     */
    /**
     * @Involved
     * no super interface
     */
    interface IWifiConfigurationProtocol {
        /** WPA/IEEE 802.11i/D3.0 */
        const Int32 WPA = 0;
        /** WPA2/IEEE 802.11i */
        const Int32 RSN = 1;
        const String VAR_NAME = "proto";

        GetStrings(
            [out, callee] ArrayOf<String>* result);
    }

    /**
     * Recognized IEEE 802.11 authentication algorithms.
     */
    /**
     * @Involved
     * no super interface
     */
    interface IWifiConfigurationAuthAlgorithm {
        /** Open System authentication (required for WPA/WPA2) */
        const Int32 OPEN = 0;
        /** Shared Key authentication (requires static WEP keys) */
        const Int32 SHARED = 1;
        /** LEAP/Network EAP (only used with LEAP) */
        const Int32 LEAP = 2;
        const String VAR_NAME = "auth_alg";

        GetStrings(
            [out, callee] ArrayOf<String>* result);
    }

    /**
     * Recognized pairwise ciphers for WPA.
     */
    /**
     * @Involved
     * no super interface
     */
    interface IWifiConfigurationPairwiseCipher {
        /** Use only Group keys (deprecated) */
        const Int32 NONE = 0;
        /** Temporal Key Integrity Protocol [IEEE 802.11i/D7.0] */
        const Int32 TKIP = 1;
        /** AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] */
        const Int32 CCMP = 2;

        const String VAR_NAME = "pairwise";

        GetStrings(
            [out, callee] ArrayOf<String>* result);
    }


    /**
     * Recognized group ciphers.
     * <pre>
     * CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0]
     * TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]
     * WEP104 = WEP (Wired Equivalent Privacy) with 104-bit key
     * WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key (original 802.11)
     * </pre>
     */
    /**
     * @Involved
     * no super interface
     */
    interface IWifiConfigurationGroupCipher {
        /** WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key (original 802.11) */
        const Int32 WEP40 = 0;
        /** WEP104 = WEP (Wired Equivalent Privacy) with 104-bit key */
        const Int32 WEP104 = 1;
        /** Temporal Key Integrity Protocol [IEEE 802.11i/D7.0] */
        const Int32 TKIP = 2;
        /** AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] */
        const Int32 CCMP = 3;
        const String VAR_NAME = "group";

        GetStrings(
            [out, callee] ArrayOf<String>* result);
    }


    /** Possible status of a network configuration. */
    /**
     * @Involved
     * no super interface
     */
    interface IWifiConfigurationStatus {
        /** this is the network we are currently connected to */
        const Int32 CURRENT = 0;
        /** supplicant will not attempt to use this network */
        const Int32 DISABLED = 1;
        /** supplicant will consider this network available for association */
        const Int32 ENABLED = 2;

        GetStrings(
            [out, callee] ArrayOf<String>* result);
    }


    /**
     * @hide
     * A summary of the RSSI and Band status for that configuration
     * This is used as a temporary value by the auto-join controller
     */
    /**
     * @Involved
     * no super interface
     */
    interface IWifiConfigurationVisibility {
        GetRssi5(
            [out] Int32* result);

        SetRssi5(
            [in] Int32 rssi5);

        // strongest 5GHz RSSI
        GetRssi24(
            [out] Int32* result);

        SetRssi24(
            [in] Int32 rssi24);

        // strongest 2.4GHz RSSI
        GetNum5(
            [out] Int32* result);

        SetNum5(
            [in] Int32 num5);

        // number of BSSIDs on 5GHz
        GetNum24(
            [out] Int32* result);

        SetNum24(
            [in] Int32 num24);

        // number of BSSIDs on 2.4GHz
        GetAge5(
            [out] Int64* result);

        SetAge5(
            [in] Int64 age5);

        // timestamp of the strongest 5GHz BSSID (last time it was seen)
        GetAge24(
            [out] Int64* result);

        SetAge24(
            [in] Int64 age24);

        // timestamp of the strongest 2.4GHz BSSID (last time it was seen)
        GetBSSID24(
            [out] String* result);

        SetBSSID24(
            [in] String BSSID24);

        GetBSSID5(
            [out] String* result);

        SetBSSID5(
            [in] String BSSID5);
    }

    } // namespace Wifi
    } // namespace Droid
    } // namespace Elastos
}
