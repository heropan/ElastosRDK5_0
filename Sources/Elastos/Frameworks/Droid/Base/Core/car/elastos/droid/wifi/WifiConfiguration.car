
module
{
    using interface Elastos.Utility.IBitSet;
    interface Elastos.Droid.Net.ILinkProperties;

    namespace Elastos {
    namespace Droid {
    namespace Wifi {

    /** {@hide} */
    interface IWifiConfigurationEnterpriseField {
        SetValue(
            [in] String value);

        GetVarName(
            [out] String* varName);

        GetValue(
            [out] String* value);
    }

    /**
     * Recognized key management schemes.
     */
    interface IWifiConfigurationKeyMgmt {
        /** WPA is not used; plaintext or static WEP could be used. */
        const Int32 NONE = 0;
        /** WPA pre-shared key (requires {@code preSharedKey} to be specified). */
        const Int32 WPA_PSK = 1;
        /** WPA using EAP authentication. Generally used with an external authentication server. */
        const Int32 WPA_EAP = 2;
        /** IEEE 802.1X using EAP authentication and (optionally) dynamically
         * generated WEP keys. */
        const Int32 IEEE8021X = 3;

        /** WPA2 pre-shared key for use with soft access point
          * (requires {@code preSharedKey} to be specified).
          * @hide
          */
        const Int32 WPA2_PSK = 4;

        const String varName = "key_mgmt";

        // public static final String[] strings = { "NONE", "WPA_PSK", "WPA_EAP", "IEEE8021X",
        //        "WPA2_PSK" };
        GetStrings(
            [out, callee] ArrayOf<String>* strings);

        ToString(
            [in] Int32 index,
            [out] String* strValue);
    }

    /**
     * Recognized security protocols.
     */
    interface IWifiConfigurationProtocol {
        /** WPA/IEEE 802.11i/D3.0 */
        const Int32 WPA = 0;
        /** WPA2/IEEE 802.11i */
        const Int32 RSN = 1;

        const String varName = "proto";

        // public static final String[] strings = { "WPA", "RSN" };
        GetStrings(
            [out, callee] ArrayOf<String>* strings);

        ToString(
            [in] Int32 index,
            [out] String* strValue);
    }

    /**
     * Recognized IEEE 802.11 authentication algorithms.
     */
    interface IWifiConfigurationAuthAlgorithm {
        /** Open System authentication (required for WPA/WPA2) */
        const Int32 OPEN = 0;
        /** Shared Key authentication (requires static WEP keys) */
        const Int32 SHARED = 1;
        /** LEAP/Network EAP (only used with LEAP) */
        const Int32 LEAP = 2;

        const String varName = "auth_alg";

        // public static final String[] strings = { "OPEN", "SHARED", "LEAP" };
        GetStrings(
            [out, callee] ArrayOf<String>* strings);

        ToString(
            [in] Int32 index,
            [out] String* strValue);
    }

    /**
     * Recognized pairwise ciphers for WPA.
     */
    interface IWifiConfigurationPairwiseCipher {
        /** Use only Group keys (deprecated) */
        const Int32 NONE = 0;
        /** Temporal Key Integrity Protocol [IEEE 802.11i/D7.0] */
        const Int32 TKIP = 1;
        /** AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] */
        const Int32 CCMP = 2;

        const String varName = "pairwise";

        // public static final String[] strings = { "NONE", "TKIP", "CCMP" };
        GetStrings(
            [out, callee] ArrayOf<String>* strings);

        ToString(
            [in] Int32 index,
            [out] String* strValue);
    }

    /**
     * Recognized group ciphers.
     * <pre>
     * CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0]
     * TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]
     * WEP104 = WEP (Wired Equivalent Privacy) with 104-bit key
     * WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key (original 802.11)
     * </pre>
     */
    interface IWifiConfigurationGroupCipher {
        /** WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key (original 802.11) */
        const Int32 WEP40 = 0;
        /** WEP104 = WEP (Wired Equivalent Privacy) with 104-bit key */
        const Int32 WEP104 = 1;
        /** Temporal Key Integrity Protocol [IEEE 802.11i/D7.0] */
        const Int32 TKIP = 2;
        /** AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] */
        const Int32 CCMP = 3;

        const String varName = "group";

        // public static final String[] strings = { "WEP40", "WEP104", "TKIP", "CCMP" };
        GetStrings(
            [out, callee] ArrayOf<String>* strings);

        ToString(
            [in] Int32 index,
            [out] String* strValue);
    }

    /** Possible status of a network configuration. */
    interface IWifiConfigurationStatus {
        /** this is the network we are currently connected to */
        const Int32 CURRENT = 0;
        /** supplicant will not attempt to use this network */
        const Int32 DISABLED = 1;
        /** supplicant will consider this network available for association */
        const Int32 ENABLED = 2;

        // public static final String[] strings = { "current", "disabled", "enabled" };
        GetStrings(
            [out, callee] ArrayOf<String>* strings);

        ToString(
            [in] Int32 index,
            [out] String* strValue);
    }

    /**
     * @hide
     */
    enum IpAssignment {
        /* Use statically configured IP settings. Configuration can be accessed
         * with linkProperties */
        IpAssignment_STATIC,
        /* Use dynamically configured IP settigns */
        IpAssignment_DHCP,
        /* no IP details are assigned, this is used to indicate
         * that any existing IP settings should be retained */
        IpAssignment_UNASSIGNED
    }

    /**
     * @hide
     */
    enum ProxySettings {
        /* No proxy is to be used. Any existing proxy settings
         * should be cleared. */
        ProxySettings_NONE,
        /* Use statically configured proxy. Configuration can be accessed
         * with linkProperties */
        ProxySettings_STATIC,
        /* no proxy details are assigned, this is used to indicate
         * that any existing proxy settings should be retained */
        ProxySettings_UNASSIGNED
    }

    /**
     * A class representing a configured Wi-Fi network, including the
     * security configuration. Android will not necessarily support
     * all of these security schemes initially.
     */
    [deprecated]
    interface IWifiConfiguration {
        /**
         * In old configurations, the "private_key" field was used. However, newer
         * configurations use the key_id field with the engine_id set to "keystore".
         * If this field is found in the configuration, the migration code is
         * triggered.
         * @hide
         */
        const String OLD_PRIVATE_KEY_NAME = "private_key";

        /**
         * String representing the keystore OpenSSL ENGINE's ID.
         * @hide
         */
        const String KEYSTORE_ENGINE_ID = "keystore";

        /**
         * String representing the keystore URI used for wpa_supplicant.
         * @hide
         */
        const String KEYSTORE_URI = "keystore://";

        /**
         * String to set the engine value to when it should be enabled.
         * @hide
         */
        const String ENGINE_ENABLE = "1";

        /**
         * String to set the engine value to when it should be disabled.
         * @hide
         */
        const String ENGINE_DISABLE = "0";

        /** {@hide} */
        const String ssidVarName = "ssid";
        /** {@hide} */
        const String bssidVarName = "bssid";
        /** {@hide} */
        const String pskVarName = "psk";

        /** {@hide} */
        const String wepTxKeyIdxVarName = "wep_tx_keyidx";
        /** {@hide} */
        const String priorityVarName = "priority";
        /** {@hide} */
        const String hiddenSSIDVarName = "scan_ssid";
        /** {@hide} */
        const Int32 INVALID_NETWORK_ID = -1;

        /** @hide */
        const Int32 DISABLED_UNKNOWN_REASON                         = 0;
        /** @hide */
        const Int32 DISABLED_DNS_FAILURE                            = 1;
        /** @hide */
        const Int32 DISABLED_DHCP_FAILURE                           = 2;
        /** @hide */
        const Int32 DISABLED_AUTH_FAILURE                           = 3;

        /** {@hide} */
        GetEap(
            [out] IWifiConfigurationEnterpriseField ** eap);

        /** {@hide} */
        GetPhase2(
            [out] IWifiConfigurationEnterpriseField ** phase2);

        /** {@hide} */
        GetIdentity(
            [out] IWifiConfigurationEnterpriseField ** identity);

        /** {@hide} */
        GetAnonymousIdentity(
            [out] IWifiConfigurationEnterpriseField ** anonymousIdentity);

        /** {@hide} */
        GetPassword(
            [out] IWifiConfigurationEnterpriseField ** password);

        /** {@hide} */
        GetClientCert(
            [out] IWifiConfigurationEnterpriseField ** clientCert);

        /** {@hide} */
        GetEngine(
            [out] IWifiConfigurationEnterpriseField ** engine);

        /** {@hide} */
        GetEngineId(
            [out] IWifiConfigurationEnterpriseField ** engineId);

        /** {@hide} */
        GetKeyId(
            [out] IWifiConfigurationEnterpriseField ** keyId);

        /** {@hide} */
        GetCaCert(
            [out] IWifiConfigurationEnterpriseField ** caCert);

        /** {@hide} */
        GetEnterpriseFields(
            [out, callee] ArrayOf<IWifiConfigurationEnterpriseField*>* fields);

        /**
         * The ID number that the supplicant uses to identify this
         * network configuration entry. This must be passed as an argument
         * to most calls into the supplicant.
         */
        GetNetworkId(
            [out] Int32* networkId);

        SetNetworkId(
            [in] Int32 networkId);

        /**
         * The current status of this network configuration entry.
         * @see Status
         */
        GetStatus(
            [out] Int32* status);

        SetStatus(
            [in] Int32 status);

        /**
         * The code referring to a reason for disabling the network
         * Valid when {@link #status} == Status.DISABLED
         * @hide
         */
        GetDisableReason(
            [out] Int32* disableReason);

        SetDisableReason(
            [in] Int32 disableReason);

        /**
         * The network's SSID. Can either be an ASCII string,
         * which must be enclosed in double quotation marks
         * (e.g., {@code "MyNetwork"}, or a string of
         * hex digits,which are not enclosed in quotes
         * (e.g., {@code 01a243f405}).
         */
        GetSSID(
            [out] String* SSID);

        SetSSID(
            [in] String SSID);

        /**
         * When set, this network configuration entry should only be used when
         * associating with the AP having the specified BSSID. The value is
         * a string in the format of an Ethernet MAC address, e.g.,
         * <code>XX:XX:XX:XX:XX:XX</code> where each <code>X</code> is a hex digit.
         */
        GetBSSID(
            [out] String* BSSID);

        SetBSSID(
            [in] String BSSID);

        /**
         * Pre-shared key for use with WPA-PSK.
         * <p/>
         * When the value of this key is read, the actual key is
         * not returned, just a "*" if the key has a value, or the null
         * string otherwise.
         */
        GetPreSharedKey(
            [out] String* preSharedKey);

        SetPreSharedKey(
            [in] String preSharedKey);

        /**
         * Up to four WEP keys. Either an ASCII string enclosed in double
         * quotation marks (e.g., {@code "abcdef"} or a string
         * of hex digits (e.g., {@code 0102030405}).
         * <p/>
         * When the value of one of these keys is read, the actual key is
         * not returned, just a "*" if the key has a value, or the null
         * string otherwise.
         */
        GetWepKeys(
            [out, callee] ArrayOf<String>* wepKeys);

        SetWepKeys(
            [in] ArrayOf<String>* wepKeys);

        /** Default WEP key index, ranging from 0 to 3. */
        GetWepTxKeyIndex(
            [out] Int32* wepTxKeyIndex);

        SetWepTxKeyIndex(
            [in] Int32 wepTxKeyIndex);

        /**
         * Priority determines the preference given to a network by {@code wpa_supplicant}
         * when choosing an access point with which to associate.
         */
        GetPriority(
            [out] Int32* priority);

        SetPriority(
            [in] Int32 priority);

        /**
         * This is a network that does not broadcast its SSID, so an
         * SSID-specific probe request must be used for scans.
         */
        GetHiddenSSID(
            [out] Boolean* hiddenSSID);

        SetHiddenSSID(
            [in] Boolean hiddenSSID);

        /**
         * The set of key management protocols supported by this configuration.
         * See {@link KeyMgmt} for descriptions of the values.
         * Defaults to WPA-PSK WPA-EAP.
         */
        GetAllowedKeyManagement(
            [out] IBitSet** allowedKeyManagement);

        SetAllowedKeyManagement(
            [in] IBitSet* allowedKeyManagement);

        /**
         * The set of security protocols supported by this configuration.
         * See {@link Protocol} for descriptions of the values.
         * Defaults to WPA RSN.
         */
        GetAllowedProtocols(
            [out] IBitSet** allowedProtocols);

        SetAllowedProtocols(
            [in] IBitSet* allowedProtocols);

        /**
         * The set of authentication protocols supported by this configuration.
         * See {@link AuthAlgorithm} for descriptions of the values.
         * Defaults to automatic selection.
         */
        GetAllowedAuthAlgorithms(
            [out] IBitSet** allowedAuthAlgorithms);

        SetAllowedAuthAlgorithms(
            [in] IBitSet* allowedAuthAlgorithms);

        /**
         * The set of pairwise ciphers for WPA supported by this configuration.
         * See {@link PairwiseCipher} for descriptions of the values.
         * Defaults to CCMP TKIP.
         */
        // public BitSet allowedPairwiseCiphers; = new BitSet()
        GetAllowedPairwiseCiphers(
            [out] IBitSet** allowedPairwiseCiphers);

        SetAllowedPairwiseCiphers(
            [in] IBitSet* allowedPairwiseCiphers);

        /**
         * The set of group ciphers supported by this configuration.
         * See {@link GroupCipher} for descriptions of the values.
         * Defaults to CCMP TKIP WEP104 WEP40.
         */
        // public BitSet allowedGroupCiphers; = new BitSet()
        GetAllowedGroupCiphers(
            [out] IBitSet** allowedGroupCiphers);

        SetAllowedGroupCiphers(
            [in] IBitSet* allowedGroupCiphers);

        /**
         * @hide
         */
        GetIpAssignment(
            [out] IpAssignment* ipAssignment);

        SetIpAssignment(
            [in] IpAssignment ipAssignment);

        /**
         * @hide
         */
        GetProxySettings(
            [out] ProxySettings* proxySettings);

        SetProxySettings(
            [in] ProxySettings proxySettings);

        /**
         * @hide
         */
        GetLinkProperties(
            [out] ILinkProperties** linkProperties);

        SetLinkProperties(
            [in] ILinkProperties* linkProperties);

        ToString(
            [out] String* value);

        /** {@hide} */
        GetPrintableSsid(
            [out] String* printableSsid);

        /** @hide */
        GetAuthType(
            [out] Int32* authType);
    }

    interface IWifiConfigurationHelper {
        /** {@hide} */
        // public static final String[] wepKeyVarNames = { "wep_key0", "wep_key1", "wep_key2", "wep_key3" };
        GetWepKeyVarName(
            [in] Int32 index,
            [out] String* wepKeyVarName);
    }

    } // namespace Wifi
    } // namespace Droid
    } // namespace Elastos
}
