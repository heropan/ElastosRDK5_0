
module
{
    using interface Elastos.Core.IArrayOf;

    namespace Elastos {
    namespace Droid {
    namespace KeyStore {
    namespace Security {

        // States
    enum KeyStoreState {
        KeyStoreState_UNLOCKED = 0,
        KeyStoreState_LOCKED = 1,
        KeyStoreState_UNINITIALIZED = 2
    }

    /**
     * @hide This should not be made public in its present form because it
     * assumes that private and secret key bytes are available and would
     * preclude the use of hardware crypto.
     */
     [deprecated]
    interface IKeyStore {

    // ResponseCodes
        const Int32 NO_ERROR = 1;
        const Int32 LOCKED = 2;
        const Int32 UNINITIALIZED = 3;
        const Int32 SYSTEM_ERROR = 4;
        const Int32 PROTOCOL_ERROR = 5;
        const Int32 PERMISSION_DENIED = 6;
        const Int32 KEY_NOT_FOUND = 7;
        const Int32 VALUE_CORRUPTED = 8;
        const Int32 UNDEFINED_ACTION = 9;
        const Int32 WRONG_PASSWORD = 10;

    // Used for UID field to indicate the calling UID.
        const Int32 UID_SELF = -1;

    // Flags for "put" "import" and "generate"
        const Int32 FLAG_NONE = 0;
        const Int32 FLAG_ENCRYPTED = 1;

        State(
            [out] KeyStoreState* state);

        IsUnlocked(
            [out] Boolean* unlocked);

        Get(
            [in] String key,
            [out, callee] ArrayOf<Byte>* array);

        Put(
            [in] String key,
            [in] ArrayOf<Byte>* value,
            [in] Int32 uid,
            [in] Int32 flags,
            [out] Boolean* ret);

        Delete(
            [in] String key,
            [in] Int32 uid,
            [out] Boolean* ret);

        Delete(
            [in] String key,
            [out] Boolean* ret);

        Contains(
            [in] String key,
            [in] Int32 uid,
            [out] Boolean* ret);

        Contains(
            [in] String key,
            [out] Boolean* ret);

        Saw(
            [in] String prefix,
            [in] Int32 uid,
            [out, callee] ArrayOf<String>* ret);

        Saw(
            [in] String prefix,
            [out, callee] ArrayOf<String>* ret);

        Reset(
            [out] Boolean* ret);

        Password(
            [in] String password,
            [out] Boolean* ret);

        Lock(
            [out] Boolean* ret);

        Unlock(
            [in] String password,
            [out] Boolean* ret);

        IsEmpty(
            [out] Boolean* ret);

        Generate(
            [in] String key,
            [in] Int32 uid,
            [in] Int32 keyType,
            [in] Int32 keySize,
            [in] Int32 flags,
            [in] ArrayOf<IArrayOf*>* args,
            [out] Boolean* ret);

        ImportKey(
            [in] String keyName,
            [in] ArrayOf<Byte>* key,
            [in] Int32 uid,
            [in] Int32 flags,
            [out] Boolean* ret);

        GetPubkey(
            [in] String key,
            [out, callee] ArrayOf<Byte>* args);

        DelKey(
            [in] String key,
            [in] Int32 uid,
            [out] Boolean* ret);

        DelKey(
            [in] String key,
            [out] Boolean* ret);

        Sign(
            [in] String key,
            [in] ArrayOf<Byte>* data,
            [out, callee] ArrayOf<Byte>* args);

        Verify(
            [in] String key,
            [in] ArrayOf<Byte>* data,
            [in] ArrayOf<Byte>* signature,
            [out] Boolean* ret);

        Grant(
            [in] String key,
            [in] Int32 uid,
            [out] Boolean* ret);

        Ungrant(
            [in] String key,
            [in] Int32 uid,
            [out] Boolean* ret);

    /**
     * Returns the last modification time of the key in milliseconds since the
     * epoch. Will return -1L if the key could not be found or other error.
     */
        Getmtime(
            [in] String key,
            [in] Int64 time);

        Duplicate(
            [in] String srcKey,
            [in] Int32 srcUid,
            [in] String destKey,
            [in] Int32 destUid,
            [out] Boolean* ret);

    // TODO remove this when it's removed from Settings
        IsHardwareBacked(
            [out] Boolean* ret);

        IsHardwareBacked(
            [in] String srcKey,
            [out] Boolean* ret);

        ClearUid(
            [in] Int32 uid,
            [out] Boolean* ret);

        ResetUid(
            [in] Int32 uid,
            [out] Boolean* ret);

        SyncUid(
            [in] Int32 sourceUid,
            [in] Int32 targetUid,
            [out] Boolean* ret);

        PasswordUid(
            [in] String password,
            [in] Int32 uid,
            [out] Boolean* ret);

        GetLastError(
            [out] Int32* err);
    }

    interface IKeyStoreHelper {
        GetInstance(
            [out] IKeyStore** store);

        GetKeyTypeForAlgorithm(
            [in] String keyType,
            [out] Int32* algorithm);
    }

    }// namespace Security
    }// namespace KeyStore
    }// namespace Droid
    }// namespace Elastos

}

