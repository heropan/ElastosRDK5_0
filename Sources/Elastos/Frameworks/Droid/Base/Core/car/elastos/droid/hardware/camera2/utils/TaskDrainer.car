
module
{
    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Camera2 {
    namespace Utils {

    /**
     * Fired asynchronously after draining has begun with {@link TaskDrainer#beginDrain}
     * <em>and</em> all tasks that were started have finished.
     */
    interface ITaskDrainerDrainListener {
        /** All tasks have fully finished draining; there will be no more pending tasks. */
        OnDrained();
    }

    /**
     * Keep track of multiple concurrent tasks starting and finishing by their key;
     * allow draining existing tasks and figuring out when all tasks have finished
     * (and new ones won't begin).
     *
     * <p>The initial state is to allow all tasks to be started and finished. A task may only be started
     * once, after which it must be finished before starting again. Likewise, finishing a task
     * that hasn't been started is also not allowed.</p>
     *
     * <p>When draining begins, no more new tasks can be started. This guarantees that at some
     * point when all the tasks are finished there will be no more collective new tasks,
     * at which point the {@link DrainListener#onDrained} callback will be invoked.</p>
     *
     *
     * @param <T>
     *          a type for the key that will represent tracked tasks;
     *          must implement {@code Object#equals}
     */
    interface ITaskDrainer {
        /**
         * Mark an asynchronous task as having started.
         *
         * <p>A task cannot be started more than once without first having finished. Once
         * draining begins with {@link #beginDrain}, no new tasks can be started.</p>
         *
         * @param task a key to identify a task
         *
         * @see #taskFinished
         * @see #beginDrain
         *
         * @throws IllegalStateException
         *          If attempting to start a task which is already started (and not finished),
         *          or if attempting to start a task after draining has begun.
         */
        TaskStarted(
            [in] IInterface* task);

        /**
         * Mark an asynchronous task as having finished.
         *
         * <p>A task cannot be finished if it hasn't started. Once finished, a task
         * cannot be finished again (unless it's started again).</p>
         *
         * @param task a key to identify a task
         *
         * @see #taskStarted
         * @see #beginDrain
         *
         * @throws IllegalStateException
         *          If attempting to start a task which is already finished (and not re-started),
         */
        TaskFinished(
            [in] IInterface* task);

        /**
         * Do not allow any more tasks to be started; once all existing started tasks are finished,
         * fire the {@link DrainListener#onDrained} callback asynchronously.
         *
         * <p>This operation is idempotent; calling it more than once has no effect.</p>
         */
        BeginDrain();
    }

    } // namespace Utils
    } // namespace Camera2
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
