
module
{
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Media.IAudioAttributes;
    interface Elastos.Droid.Media.IMediaFormat;
    interface Elastos.Droid.Media.IMediaPlayer;
    interface Elastos.Droid.Media.IMediaTimeProvider;
    interface Elastos.Droid.Media.IMetadata;
    interface Elastos.Droid.Media.ISubtitleController;
    interface Elastos.Droid.Media.ISubtitleControllerAnchor;
    interface Elastos.Droid.Media.ISubtitleData;
    interface Elastos.Droid.Media.ITimedText;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Os.IParcel;
    interface Elastos.Droid.View.ISurface;
    interface Elastos.Droid.View.ISurfaceHolder;
    interface Elastos.IO.IFileDescriptor;
    interface Elastos.IO.IInputStream;
    interface Elastos.Net.IInetSocketAddress;
    interface Elastos.Utility.IMap;
    interface Elastos.Utility.ISet;

    namespace Elastos {
    namespace Droid {
    namespace Media {

    /**
     * Interface definition for a callback to be invoked when the media
     * source is ready for playback.
     */
    interface IMediaPlayerOnPreparedListener {
        /**
         * Called when the media file is ready for playback.
         *
         * @param mp the MediaPlayer that is ready for playback
         */
        OnPrepared(
            [in] IMediaPlayer* mp);
    }

    /**
     * Interface definition for a callback to be invoked when playback of
     * a media source has completed.
     */
    interface IMediaPlayerOnCompletionListener {
        /**
         * Called when the end of a media source is reached during playback.
         *
         * @param mp the MediaPlayer that reached the end of the file
         */
        OnCompletion(
            [in] IMediaPlayer* mp);
    }

    /**
     * Interface definition of a callback to be invoked indicating buffering
     * status of a media resource being streamed over the network.
     */
    interface IMediaPlayerOnBufferingUpdateListener {
        /**
         * Called to update status in buffering a media stream received through
         * progressive HTTP download. The received buffering percentage
         * indicates how much of the content has been buffered or played.
         * For example a buffering update of 80 percent when half the content
         * has already been played indicates that the next 30 percent of the
         * content to play has been buffered.
         *
         * @param mp      the MediaPlayer the update pertains to
         * @param percent the percentage (0-100) of the content
         *                that has been buffered or played thus far
         */
        OnBufferingUpdate(
            [in] IMediaPlayer* mp,
            [in] Int32 percent);
    }

    /**
     * Interface definition of a callback to be invoked indicating
     * the completion of a seek operation.
     */
    interface IMediaPlayerOnSeekCompleteListener {
        /**
         * Called to indicate the completion of a seek operation.
         *
         * @param mp the MediaPlayer that issued the seek operation
         */
        OnSeekComplete(
            [in] IMediaPlayer* mp);
    }

    /**
     * Interface definition of a callback to be invoked when the
     * video size is first known or updated
     */
    interface IMediaPlayerOnVideoSizeChangedListener {
        /**
         * Called to indicate the video size
         *
         * The video size (width and height) could be 0 if there was no video,
         * no display surface was set, or the value was not determined yet.
         *
         * @param mp        the MediaPlayer associated with this callback
         * @param width     the width of the video
         * @param height    the height of the video
         */
        OnVideoSizeChanged(
            [in] IMediaPlayer* mp,
            [in] Int32 width,
            [in] Int32 height);
    }

    /**
     * Interface definition of a callback to be invoked when a
     * timed text is available for display.
     */
    interface IMediaPlayerOnTimedTextListener {
        /**
         * Called to indicate an avaliable timed text
         *
         * @param mp             the MediaPlayer associated with this callback
         * @param text           the timed text sample which contains the text
         *                       needed to be displayed and the display format.
         */
        OnTimedText(
            [in] IMediaPlayer* mp,
            [in] ITimedText* text);
    }

    /**
     * Interface definition of a callback to be invoked when a
     * track has data available.
     *
     * @hide
     */
    interface IMediaPlayerOnSubtitleDataListener {
        OnSubtitleData(
            [in] IMediaPlayer* mp,
            [in] ISubtitleData* data);
    }

    /**
     * Interface definition of a callback to be invoked when there
     * has been an error during an asynchronous operation (other errors
     * will throw exceptions at method call time).
     */
    interface IMediaPlayerOnErrorListener {
        /**
         * Called to indicate an error.
         *
         * @param mp      the MediaPlayer the error pertains to
         * @param what    the type of error that has occurred:
         * <ul>
         * <li>{@link #MEDIA_ERROR_UNKNOWN}
         * <li>{@link #MEDIA_ERROR_SERVER_DIED}
         * </ul>
         * @param extra an extra code, specific to the error. Typically
         * implementation dependent.
         * <ul>
         * <li>{@link #MEDIA_ERROR_IO}
         * <li>{@link #MEDIA_ERROR_MALFORMED}
         * <li>{@link #MEDIA_ERROR_UNSUPPORTED}
         * <li>{@link #MEDIA_ERROR_TIMED_OUT}
         * </ul>
         * @return True if the method handled the error, false if it didn't.
         * Returning false, or not having an OnErrorListener at all, will
         * cause the OnCompletionListener to be called.
         */
        OnError(
            [in] IMediaPlayer* mp,
            [in] Int32 what,
            [in] Int32 extra,
            [out] Boolean* result);
    }

    /**
     * Interface definition of a callback to be invoked to communicate some
     * info and/or warning about the media or its playback.
     */
    interface IMediaPlayerOnInfoListener {
        /**
         * Called to indicate an info or a warning.
         *
         * @param mp      the MediaPlayer the info pertains to.
         * @param what    the type of info or warning.
         * <ul>
         * <li>{@link #MEDIA_INFO_UNKNOWN}
         * <li>{@link #MEDIA_INFO_VIDEO_TRACK_LAGGING}
         * <li>{@link #MEDIA_INFO_VIDEO_RENDERING_START}
         * <li>{@link #MEDIA_INFO_BUFFERING_START}
         * <li>{@link #MEDIA_INFO_BUFFERING_END}
         * <li>{@link #MEDIA_INFO_BAD_INTERLEAVING}
         * <li>{@link #MEDIA_INFO_NOT_SEEKABLE}
         * <li>{@link #MEDIA_INFO_METADATA_UPDATE}
         * <li>{@link #MEDIA_INFO_UNSUPPORTED_SUBTITLE}
         * <li>{@link #MEDIA_INFO_SUBTITLE_TIMED_OUT}
         * </ul>
         * @param extra an extra code, specific to the info. Typically
         * implementation dependent.
         * @return True if the method handled the info, false if it didn't.
         * Returning false, or not having an OnErrorListener at all, will
         * cause the info to be discarded.
         */
        OnInfo(
            [in] IMediaPlayer* mp,
            [in] Int32 what,
            [in] Int32 extra,
            [out] Boolean* result);
    }

    /**
     * Class for MediaPlayer to return each audio/video/subtitle track's metadata.
     *
     * @see android.media.MediaPlayer#getTrackInfo
     */
    interface IMediaPlayerTrackInfo {
        const Int32 MEDIA_TRACK_TYPE_UNKNOWN = 0;
        const Int32 MEDIA_TRACK_TYPE_VIDEO = 1;
        const Int32 MEDIA_TRACK_TYPE_AUDIO = 2;
        const Int32 MEDIA_TRACK_TYPE_TIMEDTEXT = 3;
        const Int32 MEDIA_TRACK_TYPE_SUBTITLE = 4;

        /**
         * Gets the track type.
         * @return TrackType which indicates if the track is video, audio, timed text.
         */
        GetTrackType(
            [out] Int32* result);

        /**
         * Gets the language code of the track.
         * @return a language code in either way of ISO-639-1 or ISO-639-2.
         * When the language is unknown or could not be determined,
         * ISO-639-2 language code, "und", is returned.
         */
        GetLanguage(
            [out] String* result);

        /**
         * Gets the {@link MediaFormat} of the track.  If the format is
         * unknown or could not be determined, null is returned.
         */
        GetFormat(
            [out] IMediaFormat** result);
    }

    /**
     * MediaPlayer class can be used to control playback
     * of audio/video files and streams. An example on how to use the methods in
     * this class can be found in {@link android.widget.VideoView}.
     *
     * <p>Topics covered here are:
     * <ol>
     * <li><a href="#StateDiagram">State Diagram</a>
     * <li><a href="#Valid_and_Invalid_States">Valid and Invalid States</a>
     * <li><a href="#Permissions">Permissions</a>
     * <li><a href="#Callbacks">Register informational and error callbacks</a>
     * </ol>
     *
     * <div class="special reference">
     * <h3>Developer Guides</h3>
     * <p>For more information about how to use MediaPlayer, read the
     * <a href="{@docRoot}guide/topics/media/mediaplayer.html">Media Playback</a> developer guide.</p>
     * </div>
     *
     * <a name="StateDiagram"></a>
     * <h3>State Diagram</h3>
     *
     * <p>Playback control of audio/video files and streams is managed as a state
     * machine. The following diagram shows the life cycle and the states of a
     * MediaPlayer object driven by the supported playback control operations.
     * The ovals represent the states a MediaPlayer object may reside
     * in. The arcs represent the playback control operations that drive the object
     * state transition. There are two types of arcs. The arcs with a single arrow
     * head represent synchronous method calls, while those with
     * a double arrow head represent asynchronous method calls.</p>
     *
     * <p><img src="../../../images/mediaplayer_state_diagram.gif"
     *         alt="MediaPlayer State diagram"
     *         border="0" /></p>
     *
     * <p>From this state diagram, one can see that a MediaPlayer object has the
     *    following states:</p>
     * <ul>
     *     <li>When a MediaPlayer object is just created using <code>new</code> or
     *         after {@link #reset()} is called, it is in the <em>Idle</em> state; and after
     *         {@link #release()} is called, it is in the <em>End</em> state. Between these
     *         two states is the life cycle of the MediaPlayer object.
     *         <ul>
     *         <li>There is a subtle but important difference between a newly constructed
     *         MediaPlayer object and the MediaPlayer object after {@link #reset()}
     *         is called. It is a programming error to invoke methods such
     *         as {@link #getCurrentPosition()},
     *         {@link #getDuration()}, {@link #getVideoHeight()},
     *         {@link #getVideoWidth()}, {@link #setAudioStreamType(int)},
     *         {@link #setLooping(boolean)},
     *         {@link #setVolume(float, float)}, {@link #pause()}, {@link #start()},
     *         {@link #stop()}, {@link #seekTo(int)}, {@link #prepare()} or
     *         {@link #prepareAsync()} in the <em>Idle</em> state for both cases. If any of these
     *         methods is called right after a MediaPlayer object is constructed,
     *         the user supplied callback method OnErrorListener.onError() won't be
     *         called by the internal player engine and the object state remains
     *         unchanged; but if these methods are called right after {@link #reset()},
     *         the user supplied callback method OnErrorListener.onError() will be
     *         invoked by the internal player engine and the object will be
     *         transfered to the <em>Error</em> state. </li>
     *         <li>It is also recommended that once
     *         a MediaPlayer object is no longer being used, call {@link #release()} immediately
     *         so that resources used by the internal player engine associated with the
     *         MediaPlayer object can be released immediately. Resource may include
     *         singleton resources such as hardware acceleration components and
     *         failure to call {@link #release()} may cause subsequent instances of
     *         MediaPlayer objects to fallback to software implementations or fail
     *         altogether. Once the MediaPlayer
     *         object is in the <em>End</em> state, it can no longer be used and
     *         there is no way to bring it back to any other state. </li>
     *         <li>Furthermore,
     *         the MediaPlayer objects created using <code>new</code> is in the
     *         <em>Idle</em> state, while those created with one
     *         of the overloaded convenient <code>create</code> methods are <em>NOT</em>
     *         in the <em>Idle</em> state. In fact, the objects are in the <em>Prepared</em>
     *         state if the creation using <code>create</code> method is successful.
     *         </li>
     *         </ul>
     *         </li>
     *     <li>In general, some playback control operation may fail due to various
     *         reasons, such as unsupported audio/video format, poorly interleaved
     *         audio/video, resolution too high, streaming timeout, and the like.
     *         Thus, error reporting and recovery is an important concern under
     *         these circumstances. Sometimes, due to programming errors, invoking a playback
     *         control operation in an invalid state may also occur. Under all these
     *         error conditions, the internal player engine invokes a user supplied
     *         OnErrorListener.onError() method if an OnErrorListener has been
     *         registered beforehand via
     *         {@link #setOnErrorListener(android.media.MediaPlayer.OnErrorListener)}.
     *         <ul>
     *         <li>It is important to note that once an error occurs, the
     *         MediaPlayer object enters the <em>Error</em> state (except as noted
     *         above), even if an error listener has not been registered by the application.</li>
     *         <li>In order to reuse a MediaPlayer object that is in the <em>
     *         Error</em> state and recover from the error,
     *         {@link #reset()} can be called to restore the object to its <em>Idle</em>
     *         state.</li>
     *         <li>It is good programming practice to have your application
     *         register a OnErrorListener to look out for error notifications from
     *         the internal player engine.</li>
     *         <li>IllegalStateException is
     *         thrown to prevent programming errors such as calling {@link #prepare()},
     *         {@link #prepareAsync()}, or one of the overloaded <code>setDataSource
     *         </code> methods in an invalid state. </li>
     *         </ul>
     *         </li>
     *     <li>Calling
     *         {@link #setDataSource(FileDescriptor)}, or
     *         {@link #setDataSource(String)}, or
     *         {@link #setDataSource(Context, Uri)}, or
     *         {@link #setDataSource(FileDescriptor, long, long)} transfers a
     *         MediaPlayer object in the <em>Idle</em> state to the
     *         <em>Initialized</em> state.
     *         <ul>
     *         <li>An IllegalStateException is thrown if
     *         setDataSource() is called in any other state.</li>
     *         <li>It is good programming
     *         practice to always look out for <code>IllegalArgumentException</code>
     *         and <code>IOException</code> that may be thrown from the overloaded
     *         <code>setDataSource</code> methods.</li>
     *         </ul>
     *         </li>
     *     <li>A MediaPlayer object must first enter the <em>Prepared</em> state
     *         before playback can be started.
     *         <ul>
     *         <li>There are two ways (synchronous vs.
     *         asynchronous) that the <em>Prepared</em> state can be reached:
     *         either a call to {@link #prepare()} (synchronous) which
     *         transfers the object to the <em>Prepared</em> state once the method call
     *         returns, or a call to {@link #prepareAsync()} (asynchronous) which
     *         first transfers the object to the <em>Preparing</em> state after the
     *         call returns (which occurs almost right way) while the internal
     *         player engine continues working on the rest of preparation work
     *         until the preparation work completes. When the preparation completes or when {@link #prepare()} call returns,
     *         the internal player engine then calls a user supplied callback method,
     *         onPrepared() of the OnPreparedListener interface, if an
     *         OnPreparedListener is registered beforehand via {@link
     *         #setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)}.</li>
     *         <li>It is important to note that
     *         the <em>Preparing</em> state is a transient state, and the behavior
     *         of calling any method with side effect while a MediaPlayer object is
     *         in the <em>Preparing</em> state is undefined.</li>
     *         <li>An IllegalStateException is
     *         thrown if {@link #prepare()} or {@link #prepareAsync()} is called in
     *         any other state.</li>
     *         <li>While in the <em>Prepared</em> state, properties
     *         such as audio/sound volume, screenOnWhilePlaying, looping can be
     *         adjusted by invoking the corresponding set methods.</li>
     *         </ul>
     *         </li>
     *     <li>To start the playback, {@link #start()} must be called. After
     *         {@link #start()} returns successfully, the MediaPlayer object is in the
     *         <em>Started</em> state. {@link #isPlaying()} can be called to test
     *         whether the MediaPlayer object is in the <em>Started</em> state.
     *         <ul>
     *         <li>While in the <em>Started</em> state, the internal player engine calls
     *         a user supplied OnBufferingUpdateListener.onBufferingUpdate() callback
     *         method if a OnBufferingUpdateListener has been registered beforehand
     *         via {@link #setOnBufferingUpdateListener(OnBufferingUpdateListener)}.
     *         This callback allows applications to keep track of the buffering status
     *         while streaming audio/video.</li>
     *         <li>Calling {@link #start()} has not effect
     *         on a MediaPlayer object that is already in the <em>Started</em> state.</li>
     *         </ul>
     *         </li>
     *     <li>Playback can be paused and stopped, and the current playback position
     *         can be adjusted. Playback can be paused via {@link #pause()}. When the call to
     *         {@link #pause()} returns, the MediaPlayer object enters the
     *         <em>Paused</em> state. Note that the transition from the <em>Started</em>
     *         state to the <em>Paused</em> state and vice versa happens
     *         asynchronously in the player engine. It may take some time before
     *         the state is updated in calls to {@link #isPlaying()}, and it can be
     *         a number of seconds in the case of streamed content.
     *         <ul>
     *         <li>Calling {@link #start()} to resume playback for a paused
     *         MediaPlayer object, and the resumed playback
     *         position is the same as where it was paused. When the call to
     *         {@link #start()} returns, the paused MediaPlayer object goes back to
     *         the <em>Started</em> state.</li>
     *         <li>Calling {@link #pause()} has no effect on
     *         a MediaPlayer object that is already in the <em>Paused</em> state.</li>
     *         </ul>
     *         </li>
     *     <li>Calling  {@link #stop()} stops playback and causes a
     *         MediaPlayer in the <em>Started</em>, <em>Paused</em>, <em>Prepared
     *         </em> or <em>PlaybackCompleted</em> state to enter the
     *         <em>Stopped</em> state.
     *         <ul>
     *         <li>Once in the <em>Stopped</em> state, playback cannot be started
     *         until {@link #prepare()} or {@link #prepareAsync()} are called to set
     *         the MediaPlayer object to the <em>Prepared</em> state again.</li>
     *         <li>Calling {@link #stop()} has no effect on a MediaPlayer
     *         object that is already in the <em>Stopped</em> state.</li>
     *         </ul>
     *         </li>
     *     <li>The playback position can be adjusted with a call to
     *         {@link #seekTo(int)}.
     *         <ul>
     *         <li>Although the asynchronuous {@link #seekTo(int)}
     *         call returns right way, the actual seek operation may take a while to
     *         finish, especially for audio/video being streamed. When the actual
     *         seek operation completes, the internal player engine calls a user
     *         supplied OnSeekComplete.onSeekComplete() if an OnSeekCompleteListener
     *         has been registered beforehand via
     *         {@link #setOnSeekCompleteListener(OnSeekCompleteListener)}.</li>
     *         <li>Please
     *         note that {@link #seekTo(int)} can also be called in the other states,
     *         such as <em>Prepared</em>, <em>Paused</em> and <em>PlaybackCompleted
     *         </em> state.</li>
     *         <li>Furthermore, the actual current playback position
     *         can be retrieved with a call to {@link #getCurrentPosition()}, which
     *         is helpful for applications such as a Music player that need to keep
     *         track of the playback progress.</li>
     *         </ul>
     *         </li>
     *     <li>When the playback reaches the end of stream, the playback completes.
     *         <ul>
     *         <li>If the looping mode was being set to <var>true</var>with
     *         {@link #setLooping(boolean)}, the MediaPlayer object shall remain in
     *         the <em>Started</em> state.</li>
     *         <li>If the looping mode was set to <var>false
     *         </var>, the player engine calls a user supplied callback method,
     *         OnCompletion.onCompletion(), if a OnCompletionListener is registered
     *         beforehand via {@link #setOnCompletionListener(OnCompletionListener)}.
     *         The invoke of the callback signals that the object is now in the <em>
     *         PlaybackCompleted</em> state.</li>
     *         <li>While in the <em>PlaybackCompleted</em>
     *         state, calling {@link #start()} can restart the playback from the
     *         beginning of the audio/video source.</li>
     * </ul>
     *
     *
     * <a name="Valid_and_Invalid_States"></a>
     * <h3>Valid and invalid states</h3>
     *
     * <table border="0" cellspacing="0" cellpadding="0">
     * <tr><td>Method Name </p></td>
     *     <td>Valid Sates </p></td>
     *     <td>Invalid States </p></td>
     *     <td>Comments </p></td></tr>
     * <tr><td>attachAuxEffect </p></td>
     *     <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted} </p></td>
     *     <td>{Idle, Error} </p></td>
     *     <td>This method must be called after setDataSource.
     *     Calling it does not change the object state. </p></td></tr>
     * <tr><td>getAudioSessionId </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state. </p></td></tr>
     * <tr><td>getCurrentPosition </p></td>
     *     <td>{Idle, Initialized, Prepared, Started, Paused, Stopped,
     *         PlaybackCompleted} </p></td>
     *     <td>{Error}</p></td>
     *     <td>Successful invoke of this method in a valid state does not change the
     *         state. Calling this method in an invalid state transfers the object
     *         to the <em>Error</em> state. </p></td></tr>
     * <tr><td>getDuration </p></td>
     *     <td>{Prepared, Started, Paused, Stopped, PlaybackCompleted} </p></td>
     *     <td>{Idle, Initialized, Error} </p></td>
     *     <td>Successful invoke of this method in a valid state does not change the
     *         state. Calling this method in an invalid state transfers the object
     *         to the <em>Error</em> state. </p></td></tr>
     * <tr><td>getVideoHeight </p></td>
     *     <td>{Idle, Initialized, Prepared, Started, Paused, Stopped,
     *         PlaybackCompleted}</p></td>
     *     <td>{Error}</p></td>
     *     <td>Successful invoke of this method in a valid state does not change the
     *         state. Calling this method in an invalid state transfers the object
     *         to the <em>Error</em> state.  </p></td></tr>
     * <tr><td>getVideoWidth </p></td>
     *     <td>{Idle, Initialized, Prepared, Started, Paused, Stopped,
     *         PlaybackCompleted}</p></td>
     *     <td>{Error}</p></td>
     *     <td>Successful invoke of this method in a valid state does not change
     *         the state. Calling this method in an invalid state transfers the
     *         object to the <em>Error</em> state. </p></td></tr>
     * <tr><td>isPlaying </p></td>
     *     <td>{Idle, Initialized, Prepared, Started, Paused, Stopped,
     *          PlaybackCompleted}</p></td>
     *     <td>{Error}</p></td>
     *     <td>Successful invoke of this method in a valid state does not change
     *         the state. Calling this method in an invalid state transfers the
     *         object to the <em>Error</em> state. </p></td></tr>
     * <tr><td>pause </p></td>
     *     <td>{Started, Paused, PlaybackCompleted}</p></td>
     *     <td>{Idle, Initialized, Prepared, Stopped, Error}</p></td>
     *     <td>Successful invoke of this method in a valid state transfers the
     *         object to the <em>Paused</em> state. Calling this method in an
     *         invalid state transfers the object to the <em>Error</em> state.</p></td></tr>
     * <tr><td>prepare </p></td>
     *     <td>{Initialized, Stopped} </p></td>
     *     <td>{Idle, Prepared, Started, Paused, PlaybackCompleted, Error} </p></td>
     *     <td>Successful invoke of this method in a valid state transfers the
     *         object to the <em>Prepared</em> state. Calling this method in an
     *         invalid state throws an IllegalStateException.</p></td></tr>
     * <tr><td>prepareAsync </p></td>
     *     <td>{Initialized, Stopped} </p></td>
     *     <td>{Idle, Prepared, Started, Paused, PlaybackCompleted, Error} </p></td>
     *     <td>Successful invoke of this method in a valid state transfers the
     *         object to the <em>Preparing</em> state. Calling this method in an
     *         invalid state throws an IllegalStateException.</p></td></tr>
     * <tr><td>release </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>After {@link #release()}, the object is no longer available. </p></td></tr>
     * <tr><td>reset </p></td>
     *     <td>{Idle, Initialized, Prepared, Started, Paused, Stopped,
     *         PlaybackCompleted, Error}</p></td>
     *     <td>{}</p></td>
     *     <td>After {@link #reset()}, the object is like being just created.</p></td></tr>
     * <tr><td>seekTo </p></td>
     *     <td>{Prepared, Started, Paused, PlaybackCompleted} </p></td>
     *     <td>{Idle, Initialized, Stopped, Error}</p></td>
     *     <td>Successful invoke of this method in a valid state does not change
     *         the state. Calling this method in an invalid state transfers the
     *         object to the <em>Error</em> state. </p></td></tr>
     * <tr><td>setAudioAttributes </p></td>
     *     <td>{Idle, Initialized, Stopped, Prepared, Started, Paused,
     *          PlaybackCompleted}</p></td>
     *     <td>{Error}</p></td>
     *     <td>Successful invoke of this method does not change the state. In order for the
     *         target audio attributes type to become effective, this method must be called before
     *         prepare() or prepareAsync().</p></td></tr>
     * <tr><td>setAudioSessionId </p></td>
     *     <td>{Idle} </p></td>
     *     <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted,
     *          Error} </p></td>
     *     <td>This method must be called in idle state as the audio session ID must be known before
     *         calling setDataSource. Calling it does not change the object state. </p></td></tr>
     * <tr><td>setAudioStreamType </p></td>
     *     <td>{Idle, Initialized, Stopped, Prepared, Started, Paused,
     *          PlaybackCompleted}</p></td>
     *     <td>{Error}</p></td>
     *     <td>Successful invoke of this method does not change the state. In order for the
     *         target audio stream type to become effective, this method must be called before
     *         prepare() or prepareAsync().</p></td></tr>
     * <tr><td>setAuxEffectSendLevel </p></td>
     *     <td>any</p></td>
     *     <td>{} </p></td>
     *     <td>Calling this method does not change the object state. </p></td></tr>
     * <tr><td>setDataSource </p></td>
     *     <td>{Idle} </p></td>
     *     <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted,
     *          Error} </p></td>
     *     <td>Successful invoke of this method in a valid state transfers the
     *         object to the <em>Initialized</em> state. Calling this method in an
     *         invalid state throws an IllegalStateException.</p></td></tr>
     * <tr><td>setDisplay </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state. </p></td></tr>
     * <tr><td>setSurface </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state. </p></td></tr>
     * <tr><td>setVideoScalingMode </p></td>
     *     <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted} </p></td>
     *     <td>{Idle, Error}</p></td>
     *     <td>Successful invoke of this method does not change the state.</p></td></tr>
     * <tr><td>setLooping </p></td>
     *     <td>{Idle, Initialized, Stopped, Prepared, Started, Paused,
     *         PlaybackCompleted}</p></td>
     *     <td>{Error}</p></td>
     *     <td>Successful invoke of this method in a valid state does not change
     *         the state. Calling this method in an
     *         invalid state transfers the object to the <em>Error</em> state.</p></td></tr>
     * <tr><td>isLooping </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state. </p></td></tr>
     * <tr><td>setOnBufferingUpdateListener </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state. </p></td></tr>
     * <tr><td>setOnCompletionListener </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state. </p></td></tr>
     * <tr><td>setOnErrorListener </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state. </p></td></tr>
     * <tr><td>setOnPreparedListener </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state. </p></td></tr>
     * <tr><td>setOnSeekCompleteListener </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state. </p></td></tr>
     * <tr><td>setScreenOnWhilePlaying</></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state.  </p></td></tr>
     * <tr><td>setVolume </p></td>
     *     <td>{Idle, Initialized, Stopped, Prepared, Started, Paused,
     *          PlaybackCompleted}</p></td>
     *     <td>{Error}</p></td>
     *     <td>Successful invoke of this method does not change the state.
     * <tr><td>setWakeMode </p></td>
     *     <td>any </p></td>
     *     <td>{} </p></td>
     *     <td>This method can be called in any state and calling it does not change
     *         the object state.</p></td></tr>
     * <tr><td>start </p></td>
     *     <td>{Prepared, Started, Paused, PlaybackCompleted}</p></td>
     *     <td>{Idle, Initialized, Stopped, Error}</p></td>
     *     <td>Successful invoke of this method in a valid state transfers the
     *         object to the <em>Started</em> state. Calling this method in an
     *         invalid state transfers the object to the <em>Error</em> state.</p></td></tr>
     * <tr><td>stop </p></td>
     *     <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</p></td>
     *     <td>{Idle, Initialized, Error}</p></td>
     *     <td>Successful invoke of this method in a valid state transfers the
     *         object to the <em>Stopped</em> state. Calling this method in an
     *         invalid state transfers the object to the <em>Error</em> state.</p></td></tr>
     * <tr><td>getTrackInfo </p></td>
     *     <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</p></td>
     *     <td>{Idle, Initialized, Error}</p></td>
     *     <td>Successful invoke of this method does not change the state.</p></td></tr>
     * <tr><td>addTimedTextSource </p></td>
     *     <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</p></td>
     *     <td>{Idle, Initialized, Error}</p></td>
     *     <td>Successful invoke of this method does not change the state.</p></td></tr>
     * <tr><td>selectTrack </p></td>
     *     <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</p></td>
     *     <td>{Idle, Initialized, Error}</p></td>
     *     <td>Successful invoke of this method does not change the state.</p></td></tr>
     * <tr><td>deselectTrack </p></td>
     *     <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</p></td>
     *     <td>{Idle, Initialized, Error}</p></td>
     *     <td>Successful invoke of this method does not change the state.</p></td></tr>
     *
     * </table>
     *
     * <a name="Permissions"></a>
     * <h3>Permissions</h3>
     * <p>One may need to declare a corresponding WAKE_LOCK permission {@link
     * android.R.styleable#AndroidManifestUsesPermission &lt;uses-permission&gt;}
     * element.
     *
     * <p>This class requires the {@link android.Manifest.permission#INTERNET} permission
     * when used with network-based content.
     *
     * <a name="Callbacks"></a>
     * <h3>Callbacks</h3>
     * <p>Applications may want to register for informational and error
     * events in order to be informed of some internal state update and
     * possible runtime errors during playback or streaming. Registration for
     * these events is done by properly setting the appropriate listeners (via calls
     * to
     * {@link #setOnPreparedListener(OnPreparedListener)}setOnPreparedListener,
     * {@link #setOnVideoSizeChangedListener(OnVideoSizeChangedListener)}setOnVideoSizeChangedListener,
     * {@link #setOnSeekCompleteListener(OnSeekCompleteListener)}setOnSeekCompleteListener,
     * {@link #setOnCompletionListener(OnCompletionListener)}setOnCompletionListener,
     * {@link #setOnBufferingUpdateListener(OnBufferingUpdateListener)}setOnBufferingUpdateListener,
     * {@link #setOnInfoListener(OnInfoListener)}setOnInfoListener,
     * {@link #setOnErrorListener(OnErrorListener)}setOnErrorListener, etc).
     * In order to receive the respective callback
     * associated with these listeners, applications are required to create
     * MediaPlayer objects on a thread with its own Looper running (main UI
     * thread by default has a Looper running).
     *
     */
    /**
     * @Involve
     * interface Elastos.Droid.Media.ISubtitleControllerListener
     */
    [local]
    interface IMediaPlayer {
        /**
           Constant to retrieve only the new metadata since the last
           call.
           // FIXME: unhide.
           // FIXME: add link to getMetadata(boolean, boolean)
           {@hide}
         */
        const Boolean METADATA_UPDATE_ONLY = TRUE;

        /**
           Constant to retrieve all the metadata.
           // FIXME: unhide.
           // FIXME: add link to getMetadata(boolean, boolean)
           {@hide}
         */
        const Boolean METADATA_ALL = FALSE;

        /**
           Constant to enable the metadata filter during retrieval.
           // FIXME: unhide.
           // FIXME: add link to getMetadata(boolean, boolean)
           {@hide}
         */
        const Boolean APPLY_METADATA_FILTER = TRUE;

        /**
           Constant to disable the metadata filter during retrieval.
           // FIXME: unhide.
           // FIXME: add link to getMetadata(boolean, boolean)
           {@hide}
         */
        const Boolean BYPASS_METADATA_FILTER = FALSE;

        /* Do not change these video scaling mode values below without updating
         * their counterparts in system/window.h! Please do not forget to update
         * {@link #isVideoScalingModeSupported} when new video scaling modes
         * are added.
         */
        /**
         * Specifies a video scaling mode. The content is stretched to the
         * surface rendering area. When the surface has the same aspect ratio
         * as the content, the aspect ratio of the content is maintained;
         * otherwise, the aspect ratio of the content is not maintained when video
         * is being rendered. Unlike {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING},
         * there is no content cropping with this video scaling mode.
         */
        const Int32 VIDEO_SCALING_MODE_SCALE_TO_FIT = 1;

        /**
         * Specifies a video scaling mode. The content is scaled, maintaining
         * its aspect ratio. The whole surface area is always used. When the
         * aspect ratio of the content is the same as the surface, no content
         * is cropped; otherwise, content is cropped to fit the surface.
         */
        const Int32 VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING = 2;

        /* Do not change these values without updating their counterparts
         * in include/media/stagefright/MediaDefs.h and media/libstagefright/MediaDefs.cpp!
         */
        /**
         * MIME type for SubRip (SRT) container. Used in addTimedTextSource APIs.
         */
        const String MEDIA_MIMETYPE_TEXT_SUBRIP = "application/x-subrip";

        /**
         * MIME type for WebVTT subtitle data.
         * @hide
         */
        const String MEDIA_MIMETYPE_TEXT_VTT = "text/vtt";

        /**
         * MIME type for CEA-608 closed caption data.
         * @hide
         */
        const String MEDIA_MIMETYPE_TEXT_CEA_608 = "text/cea-608";

        /* Do not change these values without updating their counterparts
         * in include/media/mediaplayer.h!
         */
        /** Unspecified media player error.
         * @see android.media.MediaPlayer.OnErrorListener
         */
        const Int32 MEDIA_ERROR_UNKNOWN = 1;

        /** Media server died. In this case, the application must release the
         * MediaPlayer object and instantiate a new one.
         * @see android.media.MediaPlayer.OnErrorListener
         */
        const Int32 MEDIA_ERROR_SERVER_DIED = 100;

        /** The video is streamed and its container is not valid for progressive
         * playback i.e the video's index (e.g moov atom) is not at the start of the
         * file.
         * @see android.media.MediaPlayer.OnErrorListener
         */
        const Int32 MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK = 200;

        /** File or network related operation errors. */
        const Int32 MEDIA_ERROR_IO = -1004;
        /** Bitstream is not conforming to the related coding standard or file spec. */
        const Int32 MEDIA_ERROR_MALFORMED = -1007;
        /** Bitstream is conforming to the related coding standard or file spec, but
         * the media framework does not support the feature. */
        const Int32 MEDIA_ERROR_UNSUPPORTED = -1010;
        /** Some operation takes too long to complete, usually more than 3-5 seconds. */
        const Int32 MEDIA_ERROR_TIMED_OUT = -110;

        /* Do not change these values without updating their counterparts
         * in include/media/mediaplayer.h!
         */
        /** Unspecified media player info.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_UNKNOWN = 1;

        /** The player was started because it was used as the next player for another
         * player, which just completed playback.
         * @see android.media.MediaPlayer.OnInfoListener
         * @hide
         */
        const Int32 MEDIA_INFO_STARTED_AS_NEXT = 2;

        /** The player just pushed the very first video frame for rendering.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_VIDEO_RENDERING_START = 3;

        /** The video is too complex for the decoder: it can't decode frames fast
         *  enough. Possibly only the audio plays fine at this stage.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_VIDEO_TRACK_LAGGING = 700;

        /** MediaPlayer is temporarily pausing playback internally in order to
         * buffer more data.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_BUFFERING_START = 701;

        /** MediaPlayer is resuming playback after filling buffers.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_BUFFERING_END = 702;

        /** Bad interleaving means that a media has been improperly interleaved or
         * not interleaved at all, e.g has all the video samples first then all the
         * audio ones. Video is playing but a lot of disk seeks may be happening.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_BAD_INTERLEAVING = 800;

        /** The media cannot be seeked (e.g live stream)
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_NOT_SEEKABLE = 801;

        /** A new set of metadata is available.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_METADATA_UPDATE = 802;

        /** A new set of external-only metadata is available.  Used by
         *  JAVA framework to avoid triggering track scanning.
         * @hide
         */
        const Int32 MEDIA_INFO_EXTERNAL_METADATA_UPDATE = 803;

        /** Failed to handle timed text track properly.
         * @see android.media.MediaPlayer.OnInfoListener
         *
         * {@hide}
         */
        const Int32 MEDIA_INFO_TIMED_TEXT_ERROR = 900;

        /** Subtitle track was not supported by the media framework.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_UNSUPPORTED_SUBTITLE = 901;

        /** Reading the subtitle track takes too long.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_SUBTITLE_TIMED_OUT = 902;

        /**
         * Create a request parcel which can be routed to the native media
         * player using {@link #invoke(Parcel, Parcel)}. The Parcel
         * returned has the proper InterfaceToken set. The caller should
         * not overwrite that token, i.e it can only append data to the
         * Parcel.
         *
         * @return A parcel suitable to hold a request for the native
         * player.
         * {@hide}
         */
        NewRequest(
            [out] IParcel** result);

        /**
         * Invoke a generic method on the native player using opaque
         * parcels for the request and reply. Both payloads' format is a
         * convention between the java caller and the native player.
         * Must be called after setDataSource to make sure a native player
         * exists. On failure, a RuntimeException is thrown.
         *
         * @param request Parcel with the data for the extension. The
         * caller must use {@link #newRequest()} to get one.
         *
         * @param reply Output parcel with the data returned by the
         * native player.
         * {@hide}
         */
        Invoke(
            [in] IParcel* request,
            [in] IParcel* reply);

        /**
         * Sets the {@link SurfaceHolder} to use for displaying the video
         * portion of the media.
         *
         * Either a surface holder or surface must be set if a display or video sink
         * is needed.  Not calling this method or {@link #setSurface(Surface)}
         * when playing back a video will result in only the audio track being played.
         * A null surface holder or surface will result in only the audio track being
         * played.
         *
         * @param sh the SurfaceHolder to use for video display
         */
        SetDisplay(
            [in] ISurfaceHolder* sh);

        /**
         * Sets the {@link Surface} to be used as the sink for the video portion of
         * the media. This is similar to {@link #setDisplay(SurfaceHolder)}, but
         * does not support {@link #setScreenOnWhilePlaying(boolean)}.  Setting a
         * Surface will un-set any Surface or SurfaceHolder that was previously set.
         * A null surface will result in only the audio track being played.
         *
         * If the Surface sends frames to a {@link SurfaceTexture}, the timestamps
         * returned from {@link SurfaceTexture#getTimestamp()} will have an
         * unspecified zero point.  These timestamps cannot be directly compared
         * between different media sources, different instances of the same media
         * source, or multiple runs of the same program.  The timestamp is normally
         * monotonically increasing and is unaffected by time-of-day adjustments,
         * but it is reset when the position is set.
         *
         * @param surface The {@link Surface} to be used for the video portion of
         * the media.
         */
        SetSurface(
            [in] ISurface* surface);

        /**
         * Sets video scaling mode. To make the target video scaling mode
         * effective during playback, this method must be called after
         * data source is set. If not called, the default video
         * scaling mode is {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT}.
         *
         * <p> The supported video scaling modes are:
         * <ul>
         * <li> {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT}
         * <li> {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING}
         * </ul>
         *
         * @param mode target video scaling mode. Most be one of the supported
         * video scaling modes; otherwise, IllegalArgumentException will be thrown.
         *
         * @see MediaPlayer#VIDEO_SCALING_MODE_SCALE_TO_FIT
         * @see MediaPlayer#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING
         */
        SetVideoScalingMode(
            [in] Int32 mode);

        /**
         * Sets the data source as a content Uri.
         *
         * @param context the Context to use when resolving the Uri
         * @param uri the Content URI of the data you want to play
         * @throws IllegalStateException if it is called in an invalid state
         */
        SetDataSource(
            [in] IContext* ctx,
            [in] IUri* uri);

        /**
         * Sets the data source as a content Uri.
         *
         * @param context the Context to use when resolving the Uri
         * @param uri the Content URI of the data you want to play
         * @param headers the headers to be sent together with the request for the data
         *                Note that the cross domain redirection is allowed by default, but that can be
         *                changed with key/value pairs through the headers parameter with
         *                "android-allow-cross-domain-redirect" as the key and "0" or "1" as the value
         *                to disallow or allow cross domain redirection.
         * @throws IllegalStateException if it is called in an invalid state
         */
        SetDataSource(
            [in] IContext* ctx,
            [in] IUri* uri,
            [in] IMap* headers);

        /**
         * Sets the data source (file-path or http/rtsp URL) to use.
         *
         * @param path the path of the file, or the http/rtsp URL of the stream you want to play
         * @throws IllegalStateException if it is called in an invalid state
         *
         * <p>When <code>path</code> refers to a local file, the file may actually be opened by a
         * process other than the calling application.  This implies that the pathname
         * should be an absolute path (as any other process runs with unspecified current working
         * directory), and that the pathname should reference a world-readable file.
         * As an alternative, the application could first open the file for reading,
         * and then use the file descriptor form {@link #setDataSource(FileDescriptor)}.
         */
        SetDataSource(
            [in] String path);

        /**
         * Sets the data source (file-path or http/rtsp URL) to use.
         *
         * @param path the path of the file, or the http/rtsp URL of the stream you want to play
         * @param headers the headers associated with the http request for the stream you want to play
         * @throws IllegalStateException if it is called in an invalid state
         * @hide pending API council
         */
        SetDataSource(
            [in] String path,
            [in] IMap* headers);

        /**
         * Sets the data source (FileDescriptor) to use. It is the caller's responsibility
         * to close the file descriptor. It is safe to do so as soon as this call returns.
         *
         * @param fd the FileDescriptor for the file you want to play
         * @throws IllegalStateException if it is called in an invalid state
         */
        SetDataSource(
            [in] IFileDescriptor* fd);

        /**
         * Sets the data source (FileDescriptor) to use.  The FileDescriptor must be
         * seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility
         * to close the file descriptor. It is safe to do so as soon as this call returns.
         *
         * @param fd the FileDescriptor for the file you want to play
         * @param offset the offset into the file where the data to be played starts, in bytes
         * @param length the length in bytes of the data to be played
         * @throws IllegalStateException if it is called in an invalid state
         */
        SetDataSource(
            [in] IFileDescriptor* fd,
            [in] Int64 offset,
            [in] Int64 length);

        /**
         * Prepares the player for playback, synchronously.
         *
         * After setting the datasource and the display surface, you need to either
         * call prepare() or prepareAsync(). For files, it is OK to call prepare(),
         * which blocks until MediaPlayer is ready for playback.
         *
         * @throws IllegalStateException if it is called in an invalid state
         */
        Prepare();

        /**
         * Prepares the player for playback, asynchronously.
         *
         * After setting the datasource and the display surface, you need to either
         * call prepare() or prepareAsync(). For streams, you should call prepareAsync(),
         * which returns immediately, rather than blocking until enough data has been
         * buffered.
         *
         * @throws IllegalStateException if it is called in an invalid state
         */
        PrepareAsync();

        /**
         * Starts or resumes playback. If playback had previously been paused,
         * playback will continue from where it was paused. If playback had
         * been stopped, or never started before, playback will start at the
         * beginning.
         *
         * @throws IllegalStateException if it is called in an invalid state
         */
        Start();

        /**
         * Stops playback after playback has been stopped or paused.
         *
         * @throws IllegalStateException if the internal player engine has not been
         * initialized.
         */
        Stop();

        /**
         * Pauses playback. Call start() to resume.
         *
         * @throws IllegalStateException if the internal player engine has not been
         * initialized.
         */
        Pause();

        /**
         * Set the low-level power management behavior for this MediaPlayer.  This
         * can be used when the MediaPlayer is not playing through a SurfaceHolder
         * set with {@link #setDisplay(SurfaceHolder)} and thus can use the
         * high-level {@link #setScreenOnWhilePlaying(boolean)} feature.
         *
         * <p>This function has the MediaPlayer access the low-level power manager
         * service to control the device's power usage while playing is occurring.
         * The parameter is a combination of {@link android.os.PowerManager} wake flags.
         * Use of this method requires {@link android.Manifest.permission#WAKE_LOCK}
         * permission.
         * By default, no attempt is made to keep the device awake during playback.
         *
         * @param context the Context to use
         * @param mode    the power/wake mode to set
         * @see android.os.PowerManager
         */
        SetWakeMode(
            [in] IContext* ctx,
            [in] Int32 mode);

        /**
         * Control whether we should use the attached SurfaceHolder to keep the
         * screen on while video playback is occurring.  This is the preferred
         * method over {@link #setWakeMode} where possible, since it doesn't
         * require that the application have permission for low-level wake lock
         * access.
         *
         * @param screenOn Supply true to keep the screen on, false to allow it
         * to turn off.
         */
        SetScreenOnWhilePlaying(
            [in] Boolean screenOn);

        /**
         * Returns the width of the video.
         *
         * @return the width of the video, or 0 if there is no video,
         * no display surface was set, or the width has not been determined
         * yet. The OnVideoSizeChangedListener can be registered via
         * {@link #setOnVideoSizeChangedListener(OnVideoSizeChangedListener)}
         * to provide a notification when the width is available.
         */
        GetVideoWidth(
            [out] Int32* result);

        /**
         * Returns the height of the video.
         *
         * @return the height of the video, or 0 if there is no video,
         * no display surface was set, or the height has not been determined
         * yet. The OnVideoSizeChangedListener can be registered via
         * {@link #setOnVideoSizeChangedListener(OnVideoSizeChangedListener)}
         * to provide a notification when the height is available.
         */
        GetVideoHeight(
            [out] Int32* result);

        /**
         * Checks whether the MediaPlayer is playing.
         *
         * @return true if currently playing, false otherwise
         * @throws IllegalStateException if the internal player engine has not been
         * initialized or has been released.
         */
        IsPlaying(
            [out] Boolean* result);

        /**
         * Seeks to specified time position.
         *
         * @param msec the offset in milliseconds from the start to seek to
         * @throws IllegalStateException if the internal player engine has not been
         * initialized
         */
        SeekTo(
            [in] Int32 msec);

        /**
         * Gets the current playback position.
         *
         * @return the current position in milliseconds
         */
        GetCurrentPosition(
            [out] Int32* result);

        /**
         * Gets the duration of the file.
         *
         * @return the duration in milliseconds, if no duration is available
         *         (for example, if streaming live content), -1 is returned.
         */
        GetDuration(
            [out] Int32* result);

        /**
         * Gets the media metadata.
         *
         * @param update_only controls whether the full set of available
         * metadata is returned or just the set that changed since the
         * last call. See {@see #METADATA_UPDATE_ONLY} and {@see
         * #METADATA_ALL}.
         *
         * @param apply_filter if true only metadata that matches the
         * filter is returned. See {@see #APPLY_METADATA_FILTER} and {@see
         * #BYPASS_METADATA_FILTER}.
         *
         * @return The metadata, possibly empty. null if an error occured.
         // FIXME: unhide.
         * {@hide}
         */
        GetMetadata(
            [in] Boolean update_only,
            [in] Boolean apply_filter,
            [out] IMetadata** result);

        /**
         * Set a filter for the metadata update notification and update
         * retrieval. The caller provides 2 set of metadata keys, allowed
         * and blocked. The blocked set always takes precedence over the
         * allowed one.
         * Metadata.MATCH_ALL and Metadata.MATCH_NONE are 2 sets available as
         * shorthands to allow/block all or no metadata.
         *
         * By default, there is no filter set.
         *
         * @param allow Is the set of metadata the client is interested
         *              in receiving new notifications for.
         * @param block Is the set of metadata the client is not interested
         *              in receiving new notifications for.
         * @return The call status code.
         *
         // FIXME: unhide.
         * {@hide}
         */
        SetMetadataFilter(
            [in] ISet* allow,
            [in] ISet* block,
            [out] Int32* result);

        /**
         * Set the MediaPlayer to start when this MediaPlayer finishes playback
         * (i.e. reaches the end of the stream).
         * The media framework will attempt to transition from this player to
         * the next as seamlessly as possible. The next player can be set at
         * any time before completion. The next player must be prepared by the
         * app, and the application should not call start() on it.
         * The next MediaPlayer must be different from 'this'. An exception
         * will be thrown if next == this.
         * The application may call setNextMediaPlayer(null) to indicate no
         * next player should be started at the end of playback.
         * If the current player is looping, it will keep looping and the next
         * player will not be started.
         *
         * @param next the player to start after this one completes playback.
         *
         */
        SetNextMediaPlayer(
            [in] IMediaPlayer* next);

        /**
         * Releases resources associated with this MediaPlayer object.
         * It is considered good practice to call this method when you're
         * done using the MediaPlayer. In particular, whenever an Activity
         * of an application is paused (its onPause() method is called),
         * or stopped (its onStop() method is called), this method should be
         * invoked to release the MediaPlayer object, unless the application
         * has a special need to keep the object around. In addition to
         * unnecessary resources (such as memory and instances of codecs)
         * being held, failure to call this method immediately if a
         * MediaPlayer object is no longer needed may also lead to
         * continuous battery consumption for mobile devices, and playback
         * failure for other applications if no multiple instances of the
         * same codec are supported on a device. Even if multiple instances
         * of the same codec are supported, some performance degradation
         * may be expected when unnecessary multiple instances are used
         * at the same time.
         */
        ReleaseResources();

        /**
         * Resets the MediaPlayer to its uninitialized state. After calling
         * this method, you will have to initialize it again by setting the
         * data source and calling prepare().
         */
        Reset();

        /**
         * Sets the audio stream type for this MediaPlayer. See {@link AudioManager}
         * for a list of stream types. Must call this method before prepare() or
         * prepareAsync() in order for the target stream type to become effective
         * thereafter.
         *
         * @param streamtype the audio stream type
         * @see android.media.AudioManager
         */
        SetAudioStreamType(
            [in] Int32 streamtype);

        /**
         * Sets the audio attributes for this MediaPlayer.
         * See {@link AudioAttributes} for how to build and configure an instance of this class.
         * You must call this method before {@link #prepare()} or {@link #prepareAsync()} in order
         * for the audio attributes to become effective thereafter.
         * @param attributes a non-null set of audio attributes
         */
        SetAudioAttributes(
            [in] IAudioAttributes* attributes);

        /**
         * Sets the player to be looping or non-looping.
         *
         * @param looping whether to loop or not
         */
        SetLooping(
            [in] Boolean looping);

        /**
         * Checks whether the MediaPlayer is looping or non-looping.
         *
         * @return true if the MediaPlayer is currently looping, false otherwise
         */
        IsLooping(
            [out] Boolean* result);

        /**
         * Sets the volume on this player.
         * This API is recommended for balancing the output of audio streams
         * within an application. Unless you are writing an application to
         * control user settings, this API should be used in preference to
         * {@link AudioManager#setStreamVolume(int, int, int)} which sets the volume of ALL streams of
         * a particular type. Note that the passed volume values are raw scalars in range 0.0 to 1.0.
         * UI controls should be scaled logarithmically.
         *
         * @param leftVolume left volume scalar
         * @param rightVolume right volume scalar
         */
        /*
         * FIXME: Merge this into javadoc comment above when setVolume(float) is not @hide.
         * The single parameter form below is preferred if the channel volumes don't need
         * to be set independently.
         */
        SetVolume(
            [in] Float leftVolume,
            [in] Float rightVolume);

        /**
         * Similar, excepts sets volume of all channels to same value.
         * @hide
         */
        SetVolume(
            [in] Float volume);

        /**
         * Sets the audio session ID.
         *
         * @param sessionId the audio session ID.
         * The audio session ID is a system wide unique identifier for the audio stream played by
         * this MediaPlayer instance.
         * The primary use of the audio session ID  is to associate audio effects to a particular
         * instance of MediaPlayer: if an audio session ID is provided when creating an audio effect,
         * this effect will be applied only to the audio content of media players within the same
         * audio session and not to the output mix.
         * When created, a MediaPlayer instance automatically generates its own audio session ID.
         * However, it is possible to force this player to be part of an already existing audio session
         * by calling this method.
         * This method must be called before one of the overloaded <code> setDataSource </code> methods.
         * @throws IllegalStateException if it is called in an invalid state
         */
        SetAudioSessionId(
            [in] Int32 sessionId);

        /**
         * Returns the audio session ID.
         *
         * @return the audio session ID. {@see #setAudioSessionId(int)}
         * Note that the audio session ID is 0 only if a problem occured when the MediaPlayer was contructed.
         */
        GetAudioSessionId(
            [out] Int32* result);

        /**
         * Attaches an auxiliary effect to the player. A typical auxiliary effect is a reverberation
         * effect which can be applied on any sound source that directs a certain amount of its
         * energy to this effect. This amount is defined by setAuxEffectSendLevel().
         * {@see #setAuxEffectSendLevel(float)}.
         * <p>After creating an auxiliary effect (e.g.
         * {@link android.media.audiofx.EnvironmentalReverb}), retrieve its ID with
         * {@link android.media.audiofx.AudioEffect#getId()} and use it when calling this method
         * to attach the player to the effect.
         * <p>To detach the effect from the player, call this method with a null effect id.
         * <p>This method must be called after one of the overloaded <code> setDataSource </code>
         * methods.
         * @param effectId system wide unique id of the effect to attach
         */
        AttachAuxEffect(
            [in] Int32 effectId);


        /**
         * Sets the send level of the player to the attached auxiliary effect
         * {@see #attachAuxEffect(int)}. The level value range is 0 to 1.0.
         * <p>By default the send level is 0, so even if an effect is attached to the player
         * this method must be called for the effect to be applied.
         * <p>Note that the passed level value is a raw scalar. UI controls should be scaled
         * logarithmically: the gain applied by audio framework ranges from -72dB to 0dB,
         * so an appropriate conversion from linear UI input x to level is:
         * x == 0 -> level = 0
         * 0 < x <= R -> level = 10^(72*(x-R)/20/R)
         * @param level send level scalar
         */
        SetAuxEffectSendLevel(
            [in] Float level);

        /**
         * Returns an array of track information.
         *
         * @return Array of track info. The total number of tracks is the array length.
         * Must be called again if an external timed text source has been added after any of the
         * addTimedTextSource methods are called.
         * @throws IllegalStateException if it is called in an invalid state.
         */
        GetTrackInfo(
            [out, callee] ArrayOf<IMediaPlayerTrackInfo*>* result);

        /** @hide */
        SetSubtitleAnchor(
            [in] ISubtitleController* controller,
            [in] ISubtitleControllerAnchor* anchor);

        /** @hide */
        AddSubtitleSource(
            [in] IInputStream* is,
            [in] IMediaFormat* format);

        /* TODO: Limit the total number of external timed text source to a reasonable number.
         */
        /**
         * Adds an external timed text source file.
         *
         * Currently supported format is SubRip with the file extension .srt, case insensitive.
         * Note that a single external timed text source may contain multiple tracks in it.
         * One can find the total number of available tracks using {@link #getTrackInfo()} to see what
         * additional tracks become available after this method call.
         *
         * @param path The file path of external timed text source file.
         * @param mimeType The mime type of the file. Must be one of the mime types listed above.
         * @throws IOException if the file cannot be accessed or is corrupted.
         * @throws IllegalArgumentException if the mimeType is not supported.
         * @throws IllegalStateException if called in an invalid state.
         */
        AddTimedTextSource(
            [in] String path,
            [in] String mimeType);

        /**
         * Adds an external timed text source file (Uri).
         *
         * Currently supported format is SubRip with the file extension .srt, case insensitive.
         * Note that a single external timed text source may contain multiple tracks in it.
         * One can find the total number of available tracks using {@link #getTrackInfo()} to see what
         * additional tracks become available after this method call.
         *
         * @param context the Context to use when resolving the Uri
         * @param uri the Content URI of the data you want to play
         * @param mimeType The mime type of the file. Must be one of the mime types listed above.
         * @throws IOException if the file cannot be accessed or is corrupted.
         * @throws IllegalArgumentException if the mimeType is not supported.
         * @throws IllegalStateException if called in an invalid state.
         */
        AddTimedTextSource(
            [in] IContext* ctx,
            [in] IUri* uri,
            [in] String mimeType);

        /**
         * Adds an external timed text source file (FileDescriptor).
         *
         * It is the caller's responsibility to close the file descriptor.
         * It is safe to do so as soon as this call returns.
         *
         * Currently supported format is SubRip. Note that a single external timed text source may
         * contain multiple tracks in it. One can find the total number of available tracks
         * using {@link #getTrackInfo()} to see what additional tracks become available
         * after this method call.
         *
         * @param fd the FileDescriptor for the file you want to play
         * @param mimeType The mime type of the file. Must be one of the mime types listed above.
         * @throws IllegalArgumentException if the mimeType is not supported.
         * @throws IllegalStateException if called in an invalid state.
         */
        AddTimedTextSource(
            [in] IFileDescriptor* fd,
            [in] String mimeType);

        /**
         * Adds an external timed text file (FileDescriptor).
         *
         * It is the caller's responsibility to close the file descriptor.
         * It is safe to do so as soon as this call returns.
         *
         * Currently supported format is SubRip. Note that a single external timed text source may
         * contain multiple tracks in it. One can find the total number of available tracks
         * using {@link #getTrackInfo()} to see what additional tracks become available
         * after this method call.
         *
         * @param fd the FileDescriptor for the file you want to play
         * @param offset the offset into the file where the data to be played starts, in bytes
         * @param length the length in bytes of the data to be played
         * @param mime The mime type of the file. Must be one of the mime types listed above.
         * @throws IllegalArgumentException if the mimeType is not supported.
         * @throws IllegalStateException if called in an invalid state.
         */
        AddTimedTextSource(
            [in] IFileDescriptor* fd,
            [in] Int64 offset,
            [in] Int64 length,
            [in] String mime);

        /**
         * Returns the index of the audio, video, or subtitle track currently selected for playback,
         * The return value is an index into the array returned by {@link #getTrackInfo()}, and can
         * be used in calls to {@link #selectTrack(int)} or {@link #deselectTrack(int)}.
         *
         * @param trackType should be one of {@link TrackInfo#MEDIA_TRACK_TYPE_VIDEO},
         * {@link TrackInfo#MEDIA_TRACK_TYPE_AUDIO}, or
         * {@link TrackInfo#MEDIA_TRACK_TYPE_SUBTITLE}
         * @return index of the audio, video, or subtitle track currently selected for playback;
         * a negative integer is returned when there is no selected track for {@code trackType} or
         * when {@code trackType} is not one of audio, video, or subtitle.
         * @throws IllegalStateException if called after {@link #release()}
         *
         * @see {@link #getTrackInfo()}
         * @see {@link #selectTrack(int)}
         * @see {@link #deselectTrack(int)}
         */
        GetSelectedTrack(
            [in] Int32 trackType,
            [out] Int32* result);

        /**
         * Selects a track.
         * <p>
         * If a MediaPlayer is in invalid state, it throws an IllegalStateException exception.
         * If a MediaPlayer is in <em>Started</em> state, the selected track is presented immediately.
         * If a MediaPlayer is not in Started state, it just marks the track to be played.
         * </p>
         * <p>
         * In any valid state, if it is called multiple times on the same type of track (ie. Video,
         * Audio, Timed Text), the most recent one will be chosen.
         * </p>
         * <p>
         * The first audio and video tracks are selected by default if available, even though
         * this method is not called. However, no timed text track will be selected until
         * this function is called.
         * </p>
         * <p>
         * Currently, only timed text tracks or audio tracks can be selected via this method.
         * In addition, the support for selecting an audio track at runtime is pretty limited
         * in that an audio track can only be selected in the <em>Prepared</em> state.
         * </p>
         * @param index the index of the track to be selected. The valid range of the index
         * is 0..total number of track - 1. The total number of tracks as well as the type of
         * each individual track can be found by calling {@link #getTrackInfo()} method.
         * @throws IllegalStateException if called in an invalid state.
         *
         * @see android.media.MediaPlayer#getTrackInfo
         */
        SelectTrack(
            [in] Int32 index);

        /**
         * Deselect a track.
         * <p>
         * Currently, the track must be a timed text track and no audio or video tracks can be
         * deselected. If the timed text track identified by index has not been
         * selected before, it throws an exception.
         * </p>
         * @param index the index of the track to be deselected. The valid range of the index
         * is 0..total number of tracks - 1. The total number of tracks as well as the type of
         * each individual track can be found by calling {@link #getTrackInfo()} method.
         * @throws IllegalStateException if called in an invalid state.
         *
         * @see android.media.MediaPlayer#getTrackInfo
         */
        DeselectTrack(
            [in] Int32 index);

        /**
         * Sets the target UDP re-transmit endpoint for the low level player.
         * Generally, the address portion of the endpoint is an IP multicast
         * address, although a unicast address would be equally valid.  When a valid
         * retransmit endpoint has been set, the media player will not decode and
         * render the media presentation locally.  Instead, the player will attempt
         * to re-multiplex its media data using the Android@Home RTP profile and
         * re-transmit to the target endpoint.  Receiver devices (which may be
         * either the same as the transmitting device or different devices) may
         * instantiate, prepare, and start a receiver player using a setDataSource
         * URL of the form...
         *
         * aahRX://&lt;multicastIP&gt;:&lt;port&gt;
         *
         * to receive, decode and render the re-transmitted content.
         *
         * setRetransmitEndpoint may only be called before setDataSource has been
         * called; while the player is in the Idle state.
         *
         * @param endpoint the address and UDP port of the re-transmission target or
         * null if no re-transmission is to be performed.
         * @throws IllegalStateException if it is called in an invalid state
         * @throws IllegalArgumentException if the retransmit endpoint is supplied,
         * but invalid.
         *
         * {@hide} pending API council
         */
        SetRetransmitEndpoint(
            [in] IInetSocketAddress* endpoint);

        /** @hide */
        GetMediaTimeProvider(
            [out] IMediaTimeProvider** result);

        /**
         * Register a callback to be invoked when the media source is ready
         * for playback.
         *
         * @param listener the callback that will be run
         */
        SetOnPreparedListener(
            [in] IMediaPlayerOnPreparedListener* listener);

        /**
         * Register a callback to be invoked when the end of a media source
         * has been reached during playback.
         *
         * @param listener the callback that will be run
         */
        SetOnCompletionListener(
            [in] IMediaPlayerOnCompletionListener* listener);

        /**
         * Register a callback to be invoked when the status of a network
         * stream's buffer has changed.
         *
         * @param listener the callback that will be run.
         */
        SetOnBufferingUpdateListener(
            [in] IMediaPlayerOnBufferingUpdateListener* listener);

        /**
         * Register a callback to be invoked when a seek operation has been
         * completed.
         *
         * @param listener the callback that will be run
         */
        SetOnSeekCompleteListener(
            [in] IMediaPlayerOnSeekCompleteListener* listener);

        /**
         * Register a callback to be invoked when the video size is
         * known or updated.
         *
         * @param listener the callback that will be run
         */
        SetOnVideoSizeChangedListener(
            [in] IMediaPlayerOnVideoSizeChangedListener* listener);

        /**
         * Register a callback to be invoked when a timed text is available
         * for display.
         *
         * @param listener the callback that will be run
         */
        SetOnTimedTextListener(
            [in] IMediaPlayerOnTimedTextListener* listener);

        /**
         * Register a callback to be invoked when a track has data available.
         *
         * @param listener the callback that will be run
         *
         * @hide
         */
        SetOnSubtitleDataListener(
            [in] IMediaPlayerOnSubtitleDataListener* listener);

        /**
         * Register a callback to be invoked when an error has happened
         * during an asynchronous operation.
         *
         * @param listener the callback that will be run
         */
        SetOnErrorListener(
            [in] IMediaPlayerOnErrorListener* listener);

        /**
         * Register a callback to be invoked when an info/warning is available.
         *
         * @param listener the callback that will be run
         */
        SetOnInfoListener(
            [in] IMediaPlayerOnInfoListener* listener);

    }

    [local]
    interface IMediaPlayerHelper {
        /**
         * Convenience method to create a MediaPlayer for a given Uri.
         * On success, {@link #prepare()} will already have been called and must not be called again.
         * <p>When done with the MediaPlayer, you should call  {@link #release()},
         * to free the resources. If not released, too many MediaPlayer instances will
         * result in an exception.</p>
         * <p>Note that since {@link #prepare()} is called automatically in this method,
         * you cannot change the audio stream type (see {@link #setAudioStreamType(int)}), audio
         * session ID (see {@link #setAudioSessionId(int)}) or audio attributes
         * (see {@link #setAudioAttributes(AudioAttributes)} of the new MediaPlayer.</p>
         *
         * @param context the Context to use
         * @param uri the Uri from which to get the datasource
         * @return a MediaPlayer object, or null if creation failed
         */
        Create(
            [in] IContext* ctx,
            [in] IUri* uri,
            [out] IMediaPlayer** result);

        /**
         * Convenience method to create a MediaPlayer for a given Uri.
         * On success, {@link #prepare()} will already have been called and must not be called again.
         * <p>When done with the MediaPlayer, you should call  {@link #release()},
         * to free the resources. If not released, too many MediaPlayer instances will
         * result in an exception.</p>
         * <p>Note that since {@link #prepare()} is called automatically in this method,
         * you cannot change the audio stream type (see {@link #setAudioStreamType(int)}), audio
         * session ID (see {@link #setAudioSessionId(int)}) or audio attributes
         * (see {@link #setAudioAttributes(AudioAttributes)} of the new MediaPlayer.</p>
         *
         * @param context the Context to use
         * @param uri the Uri from which to get the datasource
         * @param holder the SurfaceHolder to use for displaying the video
         * @return a MediaPlayer object, or null if creation failed
         */
        Create(
            [in] IContext* ctx,
            [in] IUri* uri,
            [in] ISurfaceHolder* holder,
            [out] IMediaPlayer** result);

        /**
         * Same factory method as {@link #create(Context, Uri, SurfaceHolder)} but that lets you specify
         * the audio attributes and session ID to be used by the new MediaPlayer instance.
         * @param context the Context to use
         * @param uri the Uri from which to get the datasource
         * @param holder the SurfaceHolder to use for displaying the video, may be null.
         * @param audioAttributes the {@link AudioAttributes} to be used by the media player.
         * @param audioSessionId the audio session ID to be used by the media player,
         *     see {@link AudioManager#generateAudioSessionId()} to obtain a new session.
         * @return a MediaPlayer object, or null if creation failed
         */
        Create(
            [in] IContext* ctx,
            [in] IUri* uri,
            [in] ISurfaceHolder* holder,
            [in] IAudioAttributes* audioAttributes,
            [in] Int32 audioSessionId,
            [out] IMediaPlayer** result);

        /**
         * Convenience method to create a MediaPlayer for a given resource id.
         * On success, {@link #prepare()} will already have been called and must not be called again.
         * <p>When done with the MediaPlayer, you should call  {@link #release()},
         * to free the resources. If not released, too many MediaPlayer instances will
         * result in an exception.</p>
         * <p>Note that since {@link #prepare()} is called automatically in this method,
         * you cannot change the audio stream type (see {@link #setAudioStreamType(int)}), audio
         * session ID (see {@link #setAudioSessionId(int)}) or audio attributes
         * (see {@link #setAudioAttributes(AudioAttributes)} of the new MediaPlayer.</p>
         *
         * @param context the Context to use
         * @param resid the raw resource id (<var>R.raw.&lt;something></var>) for
         *              the resource to use as the datasource
         * @return a MediaPlayer object, or null if creation failed
         */
        Create(
            [in] IContext* ctx,
            [in] Int32 resid,
            [out] IMediaPlayer** result);

        /**
         * Same factory method as {@link #create(Context, int)} but that lets you specify the audio
         * attributes and session ID to be used by the new MediaPlayer instance.
         * @param context the Context to use
         * @param resid the raw resource id (<var>R.raw.&lt;something></var>) for
         *              the resource to use as the datasource
         * @param audioAttributes the {@link AudioAttributes} to be used by the media player.
         * @param audioSessionId the audio session ID to be used by the media player,
         *     see {@link AudioManager#generateAudioSessionId()} to obtain a new session.
         * @return a MediaPlayer object, or null if creation failed
         */
        Create(
            [in] IContext* ctx,
            [in] Int32 resid,
            [in] IAudioAttributes* audioAttributes,
            [in] Int32 audioSessionId,
            [out] IMediaPlayer** result);

        /**
         * @param reply Parcel with audio/video duration info for battery
                        tracking usage
         * @return The status code.
         * {@hide}
         */
        NativePullBatteryData(
            [in] IParcel* reply,
            [out] Int32* result);
    }

    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
