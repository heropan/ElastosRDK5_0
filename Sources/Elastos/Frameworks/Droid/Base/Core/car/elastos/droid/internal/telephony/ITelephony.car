
module
{
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Telephony.ICellInfo;
    interface Elastos.Droid.Telephony.INeighboringCellInfo;
    interface Elastos.Droid.Telephony.IIccOpenLogicalChannelResponse;
    using interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    /**
     * Interface used to interact with the phone.  Mostly this is used by the
     * TelephonyManager class.  A few places are still using this directly.
     * Please clean them up if possible and use TelephonyManager insteadl.
     *
     * {@hide}
     */
    [deprecated]
    interface IITelephony {
        /**
         * Dial a number. This doesn't place the call. It displays
         * the Dialer screen.
         * @param number the number to be dialed. If null, this
         * would display the Dialer screen with no number pre-filled.
         */
        Dial(
            [in] String number);

        /**
         * Place a call to the specified number.
         * @param number the number to be called.
         */
        Call(
            [in] String callingPackage,
            [in] String number);

        /**
         * End call if there is a call in progress, otherwise does nothing.
         *
         * @return whether it hung up
         */
        EndCall(
            [out] Boolean* result);

        /**
         * End call on particular subId or go to the Home screen
         * @param subId user preferred subId.
         * @return whether it hung up
         */
        EndCallForSubscriber(
            [in] Int64 subId,
            [out] Boolean* result);

        /**
         * Answer the currently-ringing call.
         *
         * If there's already a current active call, that call will be
         * automatically put on hold.  If both lines are currently in use, the
         * current active call will be ended.
         *
         * TODO: provide a flag to let the caller specify what policy to use
         * if both lines are in use.  (The current behavior is hardwired to
         * "answer incoming, end ongoing", which is how the CALL button
         * is specced to behave.)
         *
         * TODO: this should be a oneway call (especially since it's called
         * directly from the key queue thread).
         */
        AnswerRingingCall();

        /**
         * Silence the ringer if an incoming call is currently ringing.
         * (If vibrating, stop the vibrator also.)
         *
         * It's safe to call this if the ringer has already been silenced, or
         * even if there's no incoming call.  (If so, this method will do nothing.)
         *
         * TODO: this should be a oneway call too (see above).
         *       (Actually *all* the methods here that return Can
         *       probably be oneway.)
         */
        SilenceRinger();

        /**
         * Check if we are in either an active or holding call
         * @return true if the phone state is OFFHOOK.
         */
        IsOffhook(
            [out] Boolean* result);

        /**
         * Check if a particular subId has an active or holding call
         *
         * @param subId user preferred subId.
         * @return true if the phone state is OFFHOOK.
         */
        IsOffhookForSubscriber(
            [in] Int64 subId,
            [out] Boolean* result);

        /**
         * Check if an incoming phone call is ringing or call waiting
         * on a particular subId.
         *
         * @param subId user preferred subId.
         * @return true if the phone state is RINGING.
         */
        IsRingingForSubscriber(
            [in] Int64 subId,
            [out] Boolean* result);

        /**
         * Check if an incoming phone call is ringing or call waiting.
         * @return true if the phone state is RINGING.
         */
        IsRinging(
            [out] Boolean* result);

        /**
         * Check if the phone is idle.
         * @return true if the phone state is IDLE.
         */
        IsIdle(
            [out] Boolean* result);

        /**
         * Check if the phone is idle on a particular subId.
         *
         * @param subId user preferred subId.
         * @return true if the phone state is IDLE.
         */
        IsIdleForSubscriber(
            [in] Int64 subId,
            [out] Boolean* result);

        /**
         * Check to see if the radio is on or not.
         * @return returns true if the radio is on.
         */
        IsRadioOn(
            [out] Boolean* result);

        /**
         * Check to see if the radio is on or not on particular subId.
         * @param subId user preferred subId.
         * @return returns true if the radio is on.
         */
        IsRadioOnForSubscriber(
            [in] Int64 subId,
            [out] Boolean* result);

        /**
         * Check if the SIM pin lock is enabled.
         * @return true if the SIM pin lock is enabled.
         */
        IsSimPinEnabled(
            [out] Boolean* result);

        /**
         * Supply a pin to unlock the SIM.  Blocks until a result is determined.
         * @param pin The pin to check.
         * @return whether the operation was a success.
         */
        SupplyPin(
            [in] String pin,
            [out] Boolean* result);

        /**
         * Supply a pin to unlock the SIM for particular subId.
         * Blocks until a result is determined.
         * @param pin The pin to check.
         * @param subId user preferred subId.
         * @return whether the operation was a success.
         */
        SupplyPinForSubscriber(
            [in] Int64 subId,
            [in] String pin,
            [out] Boolean* result);

        /**
         * Supply puk to unlock the SIM and set SIM pin to new pin.
         *  Blocks until a result is determined.
         * @param puk The puk to check.
         *        pin The new pin to be set in SIM
         * @return whether the operation was a success.
         */
        SupplyPuk(
            [in] String puk,
            [in] String pin,
            [out] Boolean* result);

        /**
         * Supply puk to unlock the SIM and set SIM pin to new pin.
         *  Blocks until a result is determined.
         * @param puk The puk to check.
         *        pin The new pin to be set in SIM
         * @param subId user preferred subId.
         * @return whether the operation was a success.
         */
        SupplyPukForSubscriber(
            [in] Int64 subId,
            [in] String puk,
            [in] String pin,
            [out] Boolean* result);

        /**
         * Supply a pin to unlock the SIM.  Blocks until a result is determined.
         * Returns a specific success/error code.
         * @param pin The pin to check.
         * @return retValue[0] = Phone.PIN_RESULT_SUCCESS on success. Otherwise error code
         *         retValue[1] = number of attempts remaining if known otherwise -1
         */
        SupplyPinReportResult(
            [in] String pin,
            [out, callee] ArrayOf<Int32>* array);

        /**
         * Supply a pin to unlock the SIM.  Blocks until a result is determined.
         * Returns a specific success/error code.
         * @param pin The pin to check.
         * @return retValue[0] = Phone.PIN_RESULT_SUCCESS on success. Otherwise error code
         *         retValue[1] = number of attempts remaining if known otherwise -1
         */
        SupplyPinReportResultForSubscriber(
            [in] Int64 subId,
            [in] String pin,
            [out, callee] ArrayOf<Int32>* array);

        /**
         * Supply puk to unlock the SIM and set SIM pin to new pin.
         * Blocks until a result is determined.
         * Returns a specific success/error code
         * @param puk The puk to check
         *        pin The pin to check.
         * @return retValue[0] = Phone.PIN_RESULT_SUCCESS on success. Otherwise error code
         *         retValue[1] = number of attempts remaining if known otherwise -1
         */
        SupplyPukReportResult(
            [in] String puk,
            [in] String pin,
            [out, callee] ArrayOf<Int32>* array);

        /**
         * Supply puk to unlock the SIM and set SIM pin to new pin.
         * Blocks until a result is determined.
         * Returns a specific success/error code
         * @param puk The puk to check
         *        pin The pin to check.
         * @return retValue[0] = Phone.PIN_RESULT_SUCCESS on success. Otherwise error code
         *         retValue[1] = number of attempts remaining if known otherwise -1
         */
        SupplyPukReportResultForSubscriber(
            [in] Int64 subId,
            [in] String puk,
            [in] String pin,
            [out, callee] ArrayOf<Int32>* array);

        /**
         * Handles PIN MMI commands (PIN/PIN2/PUK/PUK2), which are initiated
         * without SEND (so <code>dial</code> is not appropriate).
         *
         * @param dialString the MMI command to be executed.
         * @return true if MMI command is executed.
         */
        HandlePinMmi(
            [in] String dialString,
            [out] Boolean* result);

        /**
         * Handles PIN MMI commands (PIN/PIN2/PUK/PUK2), which are initiated
         * without SEND (so <code>dial</code> is not appropriate) for
         * a particular subId.
         * @param dialString the MMI command to be executed.
         * @param subId user preferred subId.
         * @return true if MMI command is executed.
         */
        HandlePinMmiForSubscriber(
            [in] Int64 subId,
            [in] String dialString,
            [out] Boolean* result);

        /**
         * Toggles the radio on or off.
         */
        ToggleRadioOnOff();

        /**
         * Toggles the radio on or off on particular subId.
         * @param subId user preferred subId.
         */
        ToggleRadioOnOffForSubscriber(
            [in] Int64 subId);

        /**
         * Set the radio to on or off
         */
        SetRadio(
            [in] Boolean turnOn,
            [out] Boolean* result);

        /**
         * Set the radio to on or off on particular subId.
         * @param subId user preferred subId.
         */
        SetRadioForSubscriber(
            [in] Int64 subId,
            [in] Boolean turnOn,
            [out] Boolean* result);

        /**
         * Set the radio to on or off unconditionally
         */
        SetRadioPower(
            [in] Boolean turnOn,
            [out] Boolean* result);

        /**
         * Request to update location information in service state
         */
        UpdateServiceLocation();

        /**
         * Request to update location information for a subscrition in service state
         * @param subId user preferred subId.
         */
        UpdateServiceLocationForSubscriber(
            [in] Int64 subId);

        /**
         * Enable location update notifications.
         */
        EnableLocationUpdates();

        /**
         * Enable location update notifications.
         * @param subId user preferred subId.
         */
        EnableLocationUpdatesForSubscriber(
            [in] Int64 subId);

        /**
         * Disable location update notifications.
         */
        DisableLocationUpdates();

        /**
         * Disable location update notifications.
         * @param subId user preferred subId.
         */
        DisableLocationUpdatesForSubscriber(
            [in] Int64 subId);

        /**
         * Allow mobile data connections.
         */
        EnableDataConnectivity(
            [out] Boolean* result);

        /**
         * Disallow mobile data connections.
         */
        DisableDataConnectivity(
            [out] Boolean* result);

        /**
         * Report whether data connectivity is possible.
         */
        IsDataConnectivityPossible(
            [out] Boolean* result);

        GetCellLocation(
            [out] IBundle** bundle);

        /**
         * Returns the neighboring cell information of the device.
         */
        GetNeighboringCellInfo(
            [in] String callingPkg,
            [out] IList** array);

        GetCallState(
            [out] Int32* result);

        /**
         * Returns the call state for a subId.
         */
        GetCallStateForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);

        GetDataActivity(
            [out] Int32* result);

        GetDataState(
            [out] Int32* result);

        /**
         * Returns the current active phone type as integer.
         * Returns TelephonyManager.PHONE_TYPE_CDMA if RILConstants.CDMA_PHONE
         * and TelephonyManager.PHONE_TYPE_GSM if RILConstants.GSM_PHONE
         */
        GetActivePhoneType(
            [out] Int32* result);

        /**
         * Returns the current active phone type as integer for particular subId.
         * Returns TelephonyManager.PHONE_TYPE_CDMA if RILConstants.CDMA_PHONE
         * and TelephonyManager.PHONE_TYPE_GSM if RILConstants.GSM_PHONE
         * @param subId user preferred subId.
         */
        GetActivePhoneTypeForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);

        /**
         * Returns the CDMA ERI icon index to display
         */
        GetCdmaEriIconIndex(
            [out] Int32* result);

        /**
         * Returns the CDMA ERI icon index to display on particular subId.
         * @param subId user preferred subId.
         */
        GetCdmaEriIconIndexForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);

        /**
         * Returns the CDMA ERI icon mode,
         * 0 - ON
         * 1 - FLASHING
         */
        GetCdmaEriIconMode(
            [out] Int32* result);

        /**
         * Returns the CDMA ERI icon mode on particular subId,
         * 0 - ON
         * 1 - FLASHING
         * @param subId user preferred subId.
         */
        GetCdmaEriIconModeForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);

        /**
         * Returns the CDMA ERI text,
         */
        GetCdmaEriText(
            [out] String* result);

        /**
         * Returns the CDMA ERI text for particular subId,
         * @param subId user preferred subId.
         */
        GetCdmaEriTextForSubscriber(
            [in] Int64 subId,
            [out] String* result);

        /**
         * Returns true if OTA service provisioning needs to run.
         * Only relevant on some technologies, others will always
         * return false.
         */
        NeedsOtaServiceProvisioning(
            [out] Boolean* result);

        /**
          * Returns the unread count of voicemails
          */
        GetVoiceMessageCount(
            [out] Int32* result);

        /**
         * Returns the unread count of voicemails for a subId.
         * @param subId user preferred subId.
         * Returns the unread count of voicemails
         */
        GetVoiceMessageCountForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);

        /**
          * Returns the network type for data transmission
          */
        GetNetworkType(
            [out] Int32* result);

        /**
         * Returns the network type of a subId.
         * @param subId user preferred subId.
         * Returns the network type
         */
        GetNetworkTypeForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);

        /**
          * Returns the network type for data transmission
          */
        GetDataNetworkType(
            [out] Int32* result);

        /**
          * Returns the data network type of a subId
          * @param subId user preferred subId.
          * Returns the network type
          */
        GetDataNetworkTypeForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);

        /**
          * Returns the network type for voice
          */
        GetVoiceNetworkType(
            [out] Int32* result);

        /**
          * Returns the voice network type of a subId
          * @param subId user preferred subId.
          * Returns the network type
          */
        GetVoiceNetworkTypeForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);

        /**
         * Return true if an ICC card is present
         */
        HasIccCard(
            [out] Boolean* result);

        /**
         * Return true if an ICC card is present for a subId.
         * @param slotId user preferred slotId.
         * Return true if an ICC card is present
         */
        HasIccCardUsingSlotId(
            [in] Int64 slotId,
            [out] Boolean* result);

        /**
         * Return if the current radio is LTE on CDMA. This
         * is a tri-state return value as for a period of time
         * the mode may be unknown.
         *
         * @return {@link Phone#LTE_ON_CDMA_UNKNOWN}, {@link Phone#LTE_ON_CDMA_FALSE}
         * or {@link PHone#LTE_ON_CDMA_TRUE}
         */
        GetLteOnCdmaMode(
            [out] Int32* result);

        /**
         * Return if the current radio is LTE on CDMA. This
         * is a tri-state return value as for a period of time
         * the mode may be unknown.
         *
         * @return {@link Phone#LTE_ON_CDMA_UNKNOWN}, {@link Phone#LTE_ON_CDMA_FALSE}
         * or {@link PHone#LTE_ON_CDMA_TRUE}
         */
        GetLteOnCdmaModeForSubscriber(
            [in] Int64 subId,
            [out] Int32* result);

        /**
         * Returns the all observed cell information of the device.
         */
        GetAllCellInfo(
            [out] IList** list);

        /**
         * Sets minimum time in milli-seconds between onCellInfoChanged
         */
        SetCellInfoListRate(
            [in] Int32 rateInMillis);

        /**
         * get default sim
         * @return sim id
         */
        GetDefaultSim(
            [out] Int32* result);

        /**
         * Opens a logical channel to the ICC card.
         *
         * Input parameters equivalent to TS 27.007 AT+CCHO command.
         *
         * @param AID Application id. See ETSI 102.221 and 101.220.
         * @return an IccOpenLogicalChannelResponse object.
         */
        IccOpenLogicalChannel(
            [in] String AID,
            [out] IIccOpenLogicalChannelResponse** response);

        /**
         * Closes a previously opened logical channel to the ICC card.
         *
         * Input parameters equivalent to TS 27.007 AT+CCHC command.
         *
         * @param channel is the channel id to be closed as retruned by a
         *            successful iccOpenLogicalChannel.
         * @return true if the channel was closed successfully.
         */
        IccCloseLogicalChannel(
            [in] Int32 channel,
            [out] Boolean* result);

        /**
         * Transmit an APDU to the ICC card over a logical channel.
         *
         * Input parameters equivalent to TS 27.007 AT+CGLA command.
         *
         * @param channel is the channel id to be closed as retruned by a
         *            successful iccOpenLogicalChannel.
         * @param cla Class of the APDU command.
         * @param instruction Instruction of the APDU command.
         * @param p1 P1 value of the APDU command.
         * @param p2 P2 value of the APDU command.
         * @param p3 P3 value of the APDU command. If p3 is negative a 4 byte APDU
         *            is sent to the SIM.
         * @param data Data to be sent with the APDU.
         * @return The APDU response from the ICC card with the status appended at
         *            the end.
         */
        IccTransmitApduLogicalChannel(
            [in] Int32 channel,
            [in] Int32 cla,
            [in] Int32 instruction,
            [in] Int32 p1,
            [in] Int32 p2,
            [in] Int32 p3,
            [in] String data,
            [out] String* result);

        /**
         * Transmit an APDU to the ICC card over the basic channel.
         *
         * Input parameters equivalent to TS 27.007 AT+CSIM command.
         *
         * @param cla Class of the APDU command.
         * @param instruction Instruction of the APDU command.
         * @param p1 P1 value of the APDU command.
         * @param p2 P2 value of the APDU command.
         * @param p3 P3 value of the APDU command. If p3 is negative a 4 byte APDU
         *            is sent to the SIM.
         * @param data Data to be sent with the APDU.
         * @return The APDU response from the ICC card with the status appended at
         *            the end.
         */
        IccTransmitApduBasicChannel(
            [in] Int32 cla,
            [in] Int32 instruction,
            [in] Int32 p1,
            [in] Int32 p2,
            [in] Int32 p3,
            [in] String data,
            [out] String* result);

        /**
         * Returns the response APDU for a command APDU sent through SIM_IO.
         *
         * @param fileID
         * @param command
         * @param p1 P1 value of the APDU command.
         * @param p2 P2 value of the APDU command.
         * @param p3 P3 value of the APDU command.
         * @param filePath
         * @return The APDU response.
         */
        IccExchangeSimIO(
            [in] Int32 fileID,
            [in] Int32 command,
            [in] Int32 p1,
            [in] Int32 p2,
            [in] Int32 p3,
            [in] String filePath,
            [out, callee] ArrayOf<Byte>* result);

        /**
         * Send ENVELOPE to the SIM and returns the response.
         *
         * @param contents  String containing SAT/USAT response in hexadecimal
         *                  format starting with command tag. See TS 102 223 for
         *                  details.
         * @return The APDU response from the ICC card, with the last 4 bytes
         *         being the status word. If the command fails, returns an empty
         *         string.
         */
        SendEnvelopeWithStatus(
            [in] String content,
            [out] String* result);

        /**
         * Read one of the NV items defined in {@link RadioNVItems} / {@code ril_nv_items.h}.
         * Used for device configuration by some CDMA operators.
         *
         * @param itemID the ID of the item to read.
         * @return the NV item as a String, or null on any failure.
         */
        NvReadItem(
            [in] Int32 itemID,
            [out] String* result);

        /**
         * Write one of the NV items defined in {@link RadioNVItems} / {@code ril_nv_items.h}.
         * Used for device configuration by some CDMA operators.
         *
         * @param itemID the ID of the item to read.
         * @param itemValue the value to write, as a String.
         * @return true on success; false on any failure.
         */
        NvWriteItem(
            [in] Int32 itemID,
            [in] String itemValue,
            [out] Boolean* result);

        /**
         * Update the CDMA Preferred Roaming List (PRL) in the radio NV storage.
         * Used for device configuration by some CDMA operators.
         *
         * @param preferredRoamingList byte array containing the new PRL.
         * @return true on success; false on any failure.
         */
        NvWriteCdmaPrl(
            [in] ArrayOf<Byte>* preferredRoamingList,
            [out] Boolean* result);

        /**
         * Perform the specified type of NV config reset. The radio will be taken offline
         * and the device must be rebooted after the operation. Used for device
         * configuration by some CDMA operators.
         *
         * @param resetType the type of reset to perform (1 == factory reset; 2 == NV-only reset).
         * @return true on success; false on any failure.
         */
        NvResetConfig(
            [in] Int32 resetType,
            [out] Boolean* result);

        /*
         * Get the calculated preferred network type.
         * Used for device configuration by some CDMA operators.
         *
         * @return the calculated preferred network type, defined in RILConstants.java.
         */
        GetCalculatedPreferredNetworkType(
            [out] Int32* result);

        /*
         * Get the preferred network type.
         * Used for device configuration by some CDMA operators.
         *
         * @return the preferred network type, defined in RILConstants.java.
         */
        GetPreferredNetworkType(
            [out] Int32* result);

        /**
         * Set the preferred network type.
         * Used for device configuration by some CDMA operators.
         *
         * @param networkType the preferred network type, defined in RILConstants.java.
         * @return true on success; false on any failure.
         */
        SetPreferredNetworkType(
            [in] Int32 networkType,
            [out] Boolean* result);

        /**
         * User enable/disable Mobile Data.
         *
         * @param enable true to turn on, else false
         */
        SetDataEnabled(
            [in] Boolean enabled);

        /**
         * Get the user enabled state of Mobile Data.
         *
         * @return true on enabled
         */
        GetDataEnabled(
            [out] Boolean* result);

        /**
         * Get P-CSCF address from PCO after data connection is established or modified.
         * @param apnType the apnType, "ims" for IMS APN, "emergency" for EMERGENCY APN
         */
        GetPcscfAddress(
            [in] String apnType,
            [out, callee] ArrayOf<String>* result);

        /**
         * Set IMS registration state
         */
        SetImsRegistrationState(
            [in] Boolean registered);

        /**
         * Return MDN string for CDMA phone.
         * @param subId user preferred subId.
         */
        GetCdmaMdn(
            [in] Int64 subId,
            [out] String* result);

        /**
         * Return MIN string for CDMA phone.
         * @param subId user preferred subId.
         */
        GetCdmaMin(
            [in] Int64 subId,
            [out] String* result);

        /**
         * Has the calling application been granted special privileges by the carrier.
         *
         * If any of the packages in the calling UID has carrier privileges, the
         * call will return true. This access is granted by the owner of the UICC
         * card and does not depend on the registered carrier.
         *
         * TODO: Add a link to documentation.
         *
         * @return carrier privilege status defined in TelephonyManager.
         */
        HasCarrierPrivileges(
            [out] Int32* result);

        /**
         * Similar to above, but check for pkg whose name is pkgname.
         */
        CheckCarrierPrivilegesForPackage(
            [in] String pkgname,
            [out] Int32* result);

        /**
         * Returns the package name of the carrier apps that should handle the input intent.
         *
         * @param packageManager PackageManager for getting receivers.
         * @param intent Intent that will be sent.
         * @return list of carrier app package names that can handle the intent.
         *         Returns null if there is an error and an empty list if there
         *         are no matching packages.
         */
        GetCarrierPackageNamesForIntent(
            [in] IIntent* intent,
            [out] IList** list);

        /**
         * Set whether Android should display a simplified Mobile Network Settings UI
         * for the current ICCID.
         *
         * @param subId for which the simplified UI should be enabled or disabled.
         * @param enable true means enabling the simplified UI.
         */
        EnableSimplifiedNetworkSettingsForSubscriber(
            [in] Int64 subId,
            [in] Boolean enabled);

        /**
         * Get whether a simplified Mobile Network Settings UI is enabled for the
         * current ICCID.
         *
         * @param subId for which the simplified UI should be enabled or disabled.
         * @return true if the simplified UI is enabled.
         */
        GetSimplifiedNetworkSettingsEnabledForSubscriber(
            [in] Int64 subId,
            [out] Boolean* result);

        /**
         * Set the line 1 phone number string and its alphatag for the current ICCID
         * for display purpose only, for example, displayed in Phone Status. It won't
         * change the actual MSISDN/MDN. To unset alphatag or number, pass in a null
         * value.
         *
         * @param subId the subscriber that the alphatag and dialing number belongs to.
         * @param alphaTag alpha-tagging of the dailing nubmer
         * @param number The dialing number
         */
        SetLine1NumberForDisplayForSubscriber(
            [in] Int64 subId,
            [in] String alphaTag,
            [in] String number);

        /**
         * Returns the displayed dialing number string if it was set previously via
         * {@link #setLine1NumberForDisplay}. Otherwise returns null.
         *
         * @param subId whose dialing number for line 1 is returned.
         * @return the displayed dialing number if set, or null if not set.
         */
        GetLine1NumberForDisplay(
            [in] Int64 subId,
            [out] String* result);

        /**
         * Returns the displayed alphatag of the dialing number if it was set
         * previously via {@link #setLine1NumberForDisplay}. Otherwise returns null.
         *
         * @param subId whose alphatag associated with line 1 is returned.
         * @return the displayed alphatag of the dialing number if set, or null if
         *         not set.
         */
        GetLine1AlphaTagForDisplay(
            [in] Int64 subId,
            [out] String* result);

        /**
         * Override the operator branding for the current ICCID.
         *
         * Once set, whenever the SIM is present in the device, the service
         * provider name (SPN) and the operator name will both be replaced by the
         * brand value input. To unset the value, the same function should be
         * called with a null brand value.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         *  or has to be carrier app - see #hasCarrierPrivileges.
         *
         * @param brand The brand name to display/set.
         * @return true if the operation was executed correctly.
         */
        SetOperatorBrandOverride(
            [in] String brand,
            [out] Boolean* result);

        /**
         * Returns the result and response from RIL for oem request
         *
         * @param oemReq the data is sent to ril.
         * @param oemResp the respose data from RIL.
         * @return negative value request was not handled or get error
         *         0 request was handled succesfully, but no response data
         *         positive value success, data length of response
         */
        InvokeOemRilRequestRaw(
            [in] ArrayOf<Byte>* oemReq,
            [out, callee] ArrayOf<Byte>* oemResp,
            [out] Int32* result);

        /**
         * Check if any mobile Radios need to be shutdown.
         *
         * @return true is any mobile radio needs to be shutdown
         */
        NeedMobileRadioShutdown(
            [out] Boolean* result);

        /**
         * Shutdown Mobile Radios
         */
        ShutdownMobileRadios();
    }

    } // namespace Telephony
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}
