module
{
    interface Elastos.Utility.IList;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.ISurface;
    interface Elastos.Droid.View.IMotionEvent;
    interface Elastos.Droid.Hardware.Hdmi.IHdmiDeviceInfo;

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Tv {

    /**
     * Base class for derived classes to implement to provide a TV input session.
     */
    /**
     * @Involve
     * interface Elastos.Droid.View.IKeyEventCallback
     */
    [local, deprecated]
    interface ITvInputServiceSession {
        /**
         * Enables or disables the overlay view. By default, the overlay view is disabled. Must be
         * called explicitly after the session is created to enable the overlay view.
         *
         * @param enable {@code true} if you want to enable the overlay view. {@code false}
         *            otherwise.
         */
        SetOverlayViewEnabled(
            [in] Boolean value);

        /**
         * Dispatches an event to the application using this session.
         *
         * @param eventType The type of the event.
         * @param eventArgs Optional arguments of the event.
         * @hide
         */
        NotifySessionEvent(
            [in] String eventType,
            [in] IBundle * eventArgs);

        /**
         * Notifies the channel of the session is retuned by TV input.
         *
         * @param channelUri The URI of a channel.
         */
        NotifyChannelRetuned(
            [in] IUri * channelUri);

        /**
         * Sends the change on the track information. This is expected to be called whenever a track
         * is added/removed and the metadata of a track is modified.
         *
         * @param tracks A list which includes track information.
         * @throws IllegalArgumentException if {@code tracks} contains redundant tracks.
         */
        NotifyTracksChanged(
            [in] IList * tracks);

        /**
         * Sends the ID of the selected track for a given track type. This is expected to be called
         * whenever there is a change on track selection.
         *
         * @param type The type of the selected track. The type can be
         *            {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or
         *            {@link TvTrackInfo#TYPE_SUBTITLE}.
         * @param trackId The ID of the selected track.
         * @see #onSelectTrack
         */
        NotifyTrackSelected(
            [in] Int32 type,
            [in] String trackId);

        /**
         * Informs the application that the video is now available for watching. This is primarily
         * used to signal the application to unblock the screen. The TV input service must call this
         * method as soon as the content rendered onto its surface gets ready for viewing.
         *
         * @see #notifyVideoUnavailable
         */
        NotifyVideoAvailable();

        /**
         * Informs the application that the video became unavailable for some reason. This is
         * primarily used to signal the application to block the screen not to show any intermittent
         * video artifacts.
         *
         * @param reason The reason why the video became unavailable:
         *            <ul>
         *            <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN}
         *            <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING}
         *            <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL}
         *            <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING}
         *            </ul>
         * @see #notifyVideoAvailable
         */
        NotifyVideoUnavailable(
            [in] Int32 reason);

        /**
         * Informs the application that the user is allowed to watch the current program content.
         * <p>
         * Each TV input service is required to query the system whether the user is allowed to
         * watch the current program before showing it to the user if the parental controls is
         * enabled (i.e. {@link TvInputManager#isParentalControlsEnabled
         * TvInputManager.isParentalControlsEnabled()} returns {@code true}). Whether the TV input
         * service should block the content or not is determined by invoking
         * {@link TvInputManager#isRatingBlocked TvInputManager.isRatingBlocked(TvContentRating)}
         * with the content rating for the current program. Then the {@link TvInputManager} makes a
         * judgment based on the user blocked ratings stored in the secure settings and returns the
         * result. If the rating in question turns out to be allowed by the user, the TV input
         * service must call this method to notify the application that is permitted to show the
         * content.
         * </p><p>
         * Each TV input service also needs to continuously listen to any changes made to the
         * parental controls settings by registering a broadcast receiver to receive
         * {@link TvInputManager#ACTION_BLOCKED_RATINGS_CHANGED} and
         * {@link TvInputManager#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED} and immediately
         * reevaluate the current program with the new parental controls settings.
         * </p>
         *
         * @see #notifyContentBlocked
         * @see TvInputManager
         */
        NotifyContentAllowed();

        /**
         * Informs the application that the current program content is blocked by parent controls.
         * <p>
         * Each TV input service is required to query the system whether the user is allowed to
         * watch the current program before showing it to the user if the parental controls is
         * enabled (i.e. {@link TvInputManager#isParentalControlsEnabled
         * TvInputManager.isParentalControlsEnabled()} returns {@code true}). Whether the TV input
         * service should block the content or not is determined by invoking
         * {@link TvInputManager#isRatingBlocked TvInputManager.isRatingBlocked(TvContentRating)}
         * with the content rating for the current program. Then the {@link TvInputManager} makes a
         * judgment based on the user blocked ratings stored in the secure settings and returns the
         * result. If the rating in question turns out to be blocked, the TV input service must
         * immediately block the content and call this method with the content rating of the current
         * program to prompt the PIN verification screen.
         * </p><p>
         * Each TV input service also needs to continuously listen to any changes made to the
         * parental controls settings by registering a broadcast receiver to receive
         * {@link TvInputManager#ACTION_BLOCKED_RATINGS_CHANGED} and
         * {@link TvInputManager#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED} and immediately
         * reevaluate the current program with the new parental controls settings.
         * </p>
         *
         * @param rating The content rating for the current TV program.
         * @see #notifyContentAllowed
         * @see TvInputManager
         */
        NotifyContentBlocked(
            [in] ITvContentRating * rating);

        /**
         * Assigns a position of the {@link Surface} passed by {@link #onSetSurface}. The position
         * is relative to an overlay view.
         *
         * @param left Left position in pixels, relative to the overlay view.
         * @param top Top position in pixels, relative to the overlay view.
         * @param right Right position in pixels, relative to the overlay view.
         * @param bottm Bottom position in pixels, relative to the overlay view.
         * @see #onOverlayViewSizeChanged
         * @hide
         */
        // @SystemApi
        LayoutSurface(
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottm);

        /**
         * Called when the session is released.
         */
        OnRelease();

        /**
         * Sets the current session as the main session. The main session is a session whose
         * corresponding TV input determines the HDMI-CEC active source device.
         * <p>
         * TV input service that manages HDMI-CEC logical device should implement {@link
         * #onSetMain} to (1) select the corresponding HDMI logical device as the source device
         * when {@code isMain} is {@code true}, and to (2) select the internal device (= TV itself)
         * as the source device when {@code isMain} is {@code false} and the session is still main.
         * Also, if a surface is passed to a non-main session and active source is changed to
         * initiate the surface, the active source should be returned to the main session.
         * </p><p>
         * {@link TvView} guarantees that, when tuning involves a session transition, {@code
         * onSetMain(true)} for new session is called first, {@code onSetMain(false)} for old
         * session is called afterwards. This allows {@code onSetMain(false)} to be no-op when TV
         * input service knows that the next main session corresponds to another HDMI logical
         * device. Practically, this implies that one TV input service should handle all HDMI port
         * and HDMI-CEC logical devices for smooth active source transition.
         * </p>
         *
         * @param isMain If true, session should become main.
         * @see TvView#setMain
         * @hide
         */
        // @SystemApi
        OnSetMain(
            [in] Boolean isMain);

        /**
         * Sets the {@link Surface} for the current input session on which the TV input renders
         * video.
         *
         * @param surface {@link Surface} an application passes to this TV input session.
         * @return {@code true} if the surface was set, {@code false} otherwise.
         */
        OnSetSurface(
            [in] ISurface * surface);

        /**
         * Called after any structural changes (format or size) have been made to the
         * {@link Surface} passed by {@link #onSetSurface}. This method is always called
         * at least once, after {@link #onSetSurface} with non-null {@link Surface} is called.
         *
         * @param format The new PixelFormat of the {@link Surface}.
         * @param width The new width of the {@link Surface}.
         * @param height The new height of the {@link Surface}.
         */
        OnSurfaceChanged(
            [in] Int32 format,
            [in] Int32 width,
            [in] Int32 height);

        /**
         * Called when a size of an overlay view is changed by an application. Even when the overlay
         * view is disabled by {@link #setOverlayViewEnabled}, this is called. The size is same as
         * the size of {@link Surface} in general. Once {@link #layoutSurface} is called, the sizes
         * of {@link Surface} and the overlay view can be different.
         *
         * @param width The width of the overlay view.
         * @param height The height of the overlay view.
         * @hide
         */
        // @SystemApi
        OnOverlayViewSizeChanged(
            [in] Int32 width,
            [in] Int32 height);

        /**
         * Sets the relative stream volume of the current TV input session to handle the change of
         * audio focus by setting.
         *
         * @param volume Volume scale from 0.0 to 1.0.
         */
        OnSetStreamVolume(
            [in] Float volume);

        /**
         * Tunes to a given channel. When the video is available, {@link #notifyVideoAvailable()}
         * should be called. Also, {@link #notifyVideoUnavailable(int)} should be called when the
         * TV input cannot continue playing the given channel.
         *
         * @param channelUri The URI of the channel.
         * @return {@code true} the tuning was successful, {@code false} otherwise.
         */
        OnTune(
            [in] IUri * channelUri);

        /**
         * Calls {@link #onTune(Uri)}. Override this method in order to handle {@code params}.
         *
         * @param channelUri The URI of the channel.
         * @param params The extra parameters from other applications.
         * @return {@code true} the tuning was successful, {@code false} otherwise.
         * @hide
         */
        // @SystemApi
        OnTune(
            [in] IUri * channelUri,
            [in] IBundle * params);

        /**
         * Enables or disables the caption.
         * <p>
         * The locale for the user's preferred captioning language can be obtained by calling
         * {@link CaptioningManager#getLocale CaptioningManager.getLocale()}.
         *
         * @param enabled {@code true} to enable, {@code false} to disable.
         * @see CaptioningManager
         */
        OnSetCaptionEnabled(
            [in] Boolean enabled);

        /**
         * Requests to unblock the content according to the given rating.
         * <p>
         * The implementation should unblock the content.
         * TV input service has responsibility to decide when/how the unblock expires
         * while it can keep previously unblocked ratings in order not to ask a user
         * to unblock whenever a content rating is changed.
         * Therefore an unblocked rating can be valid for a channel, a program,
         * or certain amount of time depending on the implementation.
         * </p>
         *
         * @param unblockedRating An unblocked content rating
         */
        OnUnblockContent(
            [in] ITvContentRating * unblockedRating);

        /**
         * Select a given track.
         * <p>
         * If this is done successfully, the implementation should call {@link #notifyTrackSelected}
         * to help applications maintain the selcted track lists.
         * </p>
         *
         * @param trackId The ID of the track to select. {@code null} means to unselect the current
         *            track for a given type.
         * @param type The type of the track to select. The type can be
         *            {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or
         *            {@link TvTrackInfo#TYPE_SUBTITLE}.
         * @see #notifyTrackSelected
         */
        OnSelectTrack(
            [in] Int32 type,
            [in] String trackId);

        /**
         * Processes a private command sent from the application to the TV input. This can be used
         * to provide domain-specific features that are only known between certain TV inputs and
         * their clients.
         *
         * @param action Name of the command to be performed. This <em>must</em> be a scoped name,
         *            i.e. prefixed with a package name you own, so that different developers will
         *            not create conflicting commands.
         * @param data Any data to include with the command.
         * @hide
         */
        // @SystemApi
        OnAppPrivateCommand(
            [in] String action,
            [in] IBundle * data);

        /**
         * Called when an application requests to create an overlay view. Each session
         * implementation can override this method and return its own view.
         *
         * @return a view attached to the overlay window
         */
        OnCreateOverlayView(
            [out] IView ** result);

        /**
         * Implement this method to handle touch screen motion events on the current input session.
         *
         * @param event The motion event being received.
         * @return If you handled the event, return {@code true}. If you want to allow the event to
         *         be handled by the next receiver, return {@code false}.
         * @see View#onTouchEvent
         */
        OnTouchEvent(
            [in] IMotionEvent * event);

        /**
         * Implement this method to handle trackball events on the current input session.
         *
         * @param event The motion event being received.
         * @return If you handled the event, return {@code true}. If you want to allow the event to
         *         be handled by the next receiver, return {@code false}.
         * @see View#onTrackballEvent
         */
        OnTrackballEvent(
            [in] IMotionEvent * event);

        /**
         * Implement this method to handle generic motion events on the current input session.
         *
         * @param event The motion event being received.
         * @return If you handled the event, return {@code true}. If you want to allow the event to
         *         be handled by the next receiver, return {@code false}.
         * @see View#onGenericMotionEvent
         */
        OnGenericMotionEvent(
            [in] IMotionEvent * event);

    }

    /**
     * Base class for a TV input session which represents an external device connected to a
     * hardware TV input. Once TV input returns an implementation of this class on
     * {@link #onCreateSession(String)}, the framework will create a hardware session and forward
     * the application's surface to the hardware TV input.
     * @see #onCreateSession(String)
     */
    /**
     * @Involve
     * interface ITvInputServiceSession
     */
    interface ITvInputServiceHardwareSession {
        /**
         * Returns the hardware TV input ID the external device is connected to.
         * <p>
         * TV input is expected to provide {@link android.R.attr#setupActivity} so that
         * the application can launch it before using this TV input. The setup activity may let
         * the user select the hardware TV input to which the external device is connected. The ID
         * of the selected one should be stored in the TV input so that it can be returned here.
         * </p>
         */
        GetHardwareInputId(
            [out] String * result);

        /**
         * Called when the underlying hardware TV input session calls
         * {@link TvInputService.Session#notifyVideoAvailable()}.
         */
        OnHardwareVideoAvailable();

        /**
         * Called when the underlying hardware TV input session calls
         * {@link TvInputService.Session#notifyVideoUnavailable(int)}.
         *
         * @param reason The reason that the hardware TV input stopped the playback:
         * <ul>
         * <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN}
         * <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING}
         * <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL}
         * <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING}
         * </ul>
         */
        OnHardwareVideoUnavailable(
            [in] Int32 reason);

    }

    /**
     * The TvInputService class represents a TV input or source such as HDMI or built-in tuner which
     * provides pass-through video or broadcast TV programs.
     * <p>
     * Applications will not normally use this service themselves, instead relying on the standard
     * interaction provided by {@link TvView}. Those implementing TV input services should normally do
     * so by deriving from this class and providing their own session implementation based on
     * {@link TvInputService.Session}. All TV input services must require that clients hold the
     * {@link android.Manifest.permission#BIND_TV_INPUT} in order to interact with the service; if this
     * permission is not specified in the manifest, the system will refuse to bind to that TV input
     * service.
     * </p>
     */
    /**
     * @Involve
     * interface Elastos.Droid.App.IService
     */
    [local]
    interface ITvInputService {
        /**
         * This is the interface name that a service implementing a TV input should say that it support
         * -- that is, this is the action it uses for its intent filter. To be supported, the service
         * must also require the {@link android.Manifest.permission#BIND_TV_INPUT} permission so that
         * other applications cannot abuse it.
         */
        const String SERVICE_INTERFACE = "android.media.tv.TvInputService";

        /**
         * Name under which a TvInputService component publishes information about itself.
         * This meta-data must reference an XML resource containing an
         * <code>&lt;{@link android.R.styleable#TvInputService tv-input}&gt;</code>
         * tag.
         */
        const String SERVICE_META_DATA = "android.media.tv.input";

        /**
         * Get the number of callbacks that are registered.
         * @hide
         */
        // @VisibleForTesting
        GetRegisteredCallbackCount(
            [out] Int32 * result);

        /**
         * Returns a concrete implementation of {@link Session}.
         * <p>
         * May return {@code null} if this TV input service fails to create a session for some reason.
         * If TV input represents an external device connected to a hardware TV input,
         * {@link HardwareSession} should be returned.
         * </p>
         * @param inputId The ID of the TV input associated with the session.
         */
        OnCreateSession(
            [in] String inputId,
            [out] ITvInputServiceSession ** result);

        /**
         * Returns a new {@link TvInputInfo} object if this service is responsible for
         * {@code hardwareInfo}; otherwise, return {@code null}. Override to modify default behavior of
         * ignoring all hardware input.
         *
         * @param hardwareInfo {@link TvInputHardwareInfo} object just added.
         * @hide
         */
        // @SystemApi
        OnHardwareAdded(
            [in] ITvInputHardwareInfo * hardwareInfo,
            [out] ITvInputInfo ** result);

        /**
         * Returns the input ID for {@code deviceId} if it is handled by this service;
         * otherwise, return {@code null}. Override to modify default behavior of ignoring all hardware
         * input.
         *
         * @param hardwareInfo {@link TvInputHardwareInfo} object just removed.
         * @hide
         */
        // @SystemApi
        OnHardwareRemoved(
            [in] ITvInputHardwareInfo * hardwareInfo,
            [out] String * result);

        /**
         * Returns a new {@link TvInputInfo} object if this service is responsible for
         * {@code deviceInfo}; otherwise, return {@code null}. Override to modify default behavior of
         * ignoring all HDMI logical input device.
         *
         * @param deviceInfo {@link HdmiDeviceInfo} object just added.
         * @hide
         */
        // @SystemApi
        OnHdmiDeviceAdded(
            [in] IHdmiDeviceInfo * deviceInfo,
            [out] ITvInputInfo ** result);

        /**
         * Returns the input ID for {@code deviceInfo} if it is handled by this service; otherwise,
         * return {@code null}. Override to modify default behavior of ignoring all HDMI logical input
         * device.
         *
         * @param deviceInfo {@link HdmiDeviceInfo} object just removed.
         * @hide
         */
        // @SystemApi
        OnHdmiDeviceRemoved(
            [in] IHdmiDeviceInfo * deviceInfo,
            [out] String * result);

    }

    interface ITvInputServiceHelper {
        /** @hide */
        IsNavigationKey(
            [in] Int32 keyCode,
            [out] Boolean * result);

    }

    } // namespace Tv
    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
