
module
{
    interface Elastos.Droid.Graphics.IRect;
    interface Elastos.Droid.Graphics.IPoint;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Camera2 {
    namespace Params {

    /**
     * Describes a face detected in an image.
     */
    interface IFace {
        /**
         * The ID is {@code -1} when the optional set of fields is unsupported.
         *
         * @see Face#Face(Rect, int)
         * @see #getId()
         */
        const Int32 ID_UNSUPPORTED = -1;

        /**
         * The minimum possible value for the confidence level.
         *
         * @see #getScore()
         */
        const Int32 SCORE_MIN = 1;

        /**
         * The maximum possible value for the confidence level.
         *
         * @see #getScore()
         */
        const Int32 SCORE_MAX = 100;

        /**
         * Bounds of the face.
         *
         * <p>A rectangle relative to the sensor's
         * {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE}, with (0,0)
         * representing the top-left corner of the active array rectangle.</p>
         *
         * <p>There is no constraints on the the Rectangle value other than it
         * is not-{@code null}.</p>
         */
        GetBounds(
            [out] IRect** outrect);

        /**
         * The confidence level for the detection of the face.
         *
         * <p>The range is {@value #SCORE_MIN} to {@value #SCORE_MAX}.
         * {@value #SCORE_MAX} is the highest confidence.</p>
         *
         * <p>Depending on the device, even very low-confidence faces may be
         * listed, so applications should filter out faces with low confidence,
         * depending on the use case. For a typical point-and-shoot camera
         * application that wishes to display rectangles around detected faces,
         * filtering out faces with confidence less than half of {@value #SCORE_MAX}
         * is recommended.</p>
         *
         * @see #SCORE_MAX
         * @see #SCORE_MIN
         */
        GetScore(
            [out] Int32* value);

        /**
         * An unique id per face while the face is visible to the tracker.
         *
         * <p>
         * If the face leaves the field-of-view and comes back, it will get a new
         * id.</p>
         *
         * <p>This is an optional field, may not be supported on all devices.
         * If the id is {@value #ID_UNSUPPORTED} then the leftEyePosition, rightEyePosition, and
         * mouthPositions are guaranteed to be {@code null}. Otherwise, each of leftEyePosition,
         * rightEyePosition, and mouthPosition may be independently null or not-null. When devices
         * report the value of key {@link CaptureResult#STATISTICS_FACE_DETECT_MODE} as
         * {@link CameraMetadata#STATISTICS_FACE_DETECT_MODE_SIMPLE} in {@link CaptureResult},
         * the face id of each face is expected to be {@value #ID_UNSUPPORTED}.</p>
         *
         * <p>This value will either be {@value #ID_UNSUPPORTED} or
         * otherwise greater than {@code 0}.</p>
         *
         * @see #ID_UNSUPPORTED
         */
        GetId(
            [out] Int32* value);

        /**
         * The coordinates of the center of the left eye.
         *
         * <p>The coordinates are in
         * the same space as the ones for {@link #getBounds}. This is an
         * optional field, may not be supported on all devices. If not
         * supported, the value will always be set to null.
         * This value will  always be null only if {@link #getId()} returns
         * {@value #ID_UNSUPPORTED}.</p>
         *
         * @return The left eye position, or {@code null} if unknown.
         */
        GetLeftEyePosition(
            [out] IPoint** outpoint);

        /**
         * The coordinates of the center of the right eye.
         *
         * <p>The coordinates are
         * in the same space as the ones for {@link #getBounds}.This is an
         * optional field, may not be supported on all devices. If not
         * supported, the value will always be set to null.
         * This value will  always be null only if {@link #getId()} returns
         * {@value #ID_UNSUPPORTED}.</p>
         *
         * @return The right eye position, or {@code null} if unknown.
         */
        GetRightEyePosition(
            [out] IPoint** outpoint);

        /**
         * The coordinates of the center of the mouth.
         *
         * <p>The coordinates are in
         * the same space as the ones for {@link #getBounds}. This is an optional
         * field, may not be supported on all devices. If not
         * supported, the value will always be set to null.
         * This value will  always be null only if {@link #getId()} returns
         * {@value #ID_UNSUPPORTED}.</p>
         * </p>
         *
         * @return The mouth position, or {@code null} if unknown.
         */
        GetMouthPosition(
            [out] IPoint** outpoint);

        /**
         * Represent the Face as a string for debugging purposes.
         */
        // @Override
        ToString(
            [out] String* str);
    }

    } // namespace Params
    } // namespace Camera2
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
