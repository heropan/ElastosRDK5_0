
module
{
    using interface Elastos.Core.ICharSequence;

    enum Elastos.Droid.Graphics.PorterDuffMode;
    enum Elastos.Droid.Graphics.RegionOp;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Graphics.INinePatch;
    interface Elastos.Droid.Graphics.IDrawFilter;
    interface Elastos.Droid.Graphics.IMatrix;
    interface Elastos.Droid.Graphics.IPaint;
    interface Elastos.Droid.Graphics.IPath;
    interface Elastos.Droid.Graphics.IPicture;
    interface Elastos.Droid.Graphics.IRect;
    interface Elastos.Droid.Graphics.IRectF;
    interface Elastos.Droid.Graphics.IRegion;

    namespace Elastos {
    namespace Droid {
    namespace Graphics {

    enum CanvasEdgeType {
        CanvasEdgeType_AA = 0x01,  //!< treat edges by rounding-out, since they may be antialiased
        CanvasEdgeType_BW = 0x00,  //!< treat edges by just rounding to nearest pixel boundary
    }

    enum CanvasVertexMode {
        CanvasVertexMode_TRIANGLES = 0x00,
        CanvasVertexMode_TRIANGLE_STRIP = 0x01,
        CanvasVertexMode_TRIANGLE_FAN = 0x02,
    }

    /**
     * The Canvas class holds the "draw" calls. To draw something, you need
     * 4 basic components: A Bitmap to hold the pixels, a Canvas to host
     * the draw calls (writing into the bitmap), a drawing primitive (e.g. Rect,
     * Path, text, Bitmap), and a paint (to describe the colors and styles for the
     * drawing).
     *
     * <div class="special reference">
     * <h3>Developer Guides</h3>
     * <p>For more information about how to use Canvas, read the
     * <a href="{@docRoot}guide/topics/graphics/2d-graphics.html">
     * Canvas and Drawables</a> developer guide.</p></div>
     */
    [deprecated]
    interface ICanvas {
        /**
         * Flag for drawTextRun indicating left-to-right run direction.
         * @hide
         */
        const Int32 DIRECTION_LTR = 0;

        /**
         * Flag for drawTextRun indicating right-to-left run direction.
         * @hide
         */
        const Int32 DIRECTION_RTL = 1;

        /**
         * restore everything when restore() is called
         */
        const Int32 ALL_SAVE_FLAG = 0x1F;

        /**
         * restore the current clip when restore() is called
         */
        const Int32 CLIP_SAVE_FLAG = 0x02;

        /**
         * clip against the layer's bounds
         */
        const Int32 CLIP_TO_LAYER_SAVE_FLAG = 0x10;

        /**
         * the layer needs to 8-bits per color component
         */
        const Int32 FULL_COLOR_LAYER_SAVE_FLAG = 0x08;

        /**
         * the layer needs to per-pixel alpha
         */
        const Int32 HAS_ALPHA_LAYER_SAVE_FLAG = 0x04;

        /**
         * restore the current matrix when restore() is called
         */
        const Int32 MATRIX_SAVE_FLAG = 0x01;

        /**
         * Modify the current clip with the specified path.
         *
         * @param path The path to operate on the current clip
         * @param op   How the clip is modified
         * @return     true if the resulting is non-empty
         */
        ClipPath(
            [in] IPath* path,
            [in] RegionOp op,
            [out] Boolean* isNonEmpty);

        /**
         * Intersect the current clip with the specified path.
         *
         * @param path The path to intersect with the current clip
         * @return     true if the resulting is non-empty
         */
        ClipPath(
            [in] IPath* path,
            [out] Boolean* IsNonEmpty);

        /**
         * Modify the current clip with the specified rectangle.
         *
         * @param rect The rect to intersect with the current clip
         * @param op How the clip is modified
         * @return true if the resulting clip is non-empty
         */
        ClipRect(
            [in] IRectF* rect,
            [in] RegionOp op,
            [out] Boolean* isNonEmpty);

        /**
         * Modify the current clip with the specified rectangle, which is
         * expressed in local coordinates.
         *
         * @param rect The rectangle to intersect with the current clip.
         * @param op How the clip is modified
         * @return true if the resulting clip is non-empty
         */
        ClipRect(
            [in] IRect* rect,
            [in] RegionOp op,
            [out] Boolean* isNonEmpty);

        /**
         * Intersect the current clip with the specified rectangle, which is
         * expressed in local coordinates.
         *
         * @param rect The rectangle to intersect with the current clip.
         * @return true if the resulting clip is non-empty
         */
        ClipRect(
            [in] IRectF* rect,
            [out] Boolean* isNonEmpty);

        /**
         * Intersect the current clip with the specified rectangle, which is
         * expressed in local coordinates.
         *
         * @param rect The rectangle to intersect with the current clip.
         * @return true if the resulting clip is non-empty
         */
        ClipRect(
            [in] IRect* rect,
            [out] Boolean* isNonEmpty);

        /**
         * Modify the current clip with the specified rectangle, which is
         * expressed in local coordinates.
         *
         * @param left   The left side of the rectangle to intersect with the
         *               current clip
         * @param top    The top of the rectangle to intersect with the current
         *               clip
         * @param right  The right side of the rectangle to intersect with the
         *               current clip
         * @param bottom The bottom of the rectangle to intersect with the current
         *               clip
         * @param op     How the clip is modified
         * @return       true if the resulting clip is non-empty
         */
        ClipRect(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [in] RegionOp op,
            [out] Boolean* isNonEmpty);

        /**
         * Intersect the current clip with the specified rectangle, which is
         * expressed in local coordinates.
         *
         * @param left   The left side of the rectangle to intersect with the
         *               current clip
         * @param top    The top of the rectangle to intersect with the current clip
         * @param right  The right side of the rectangle to intersect with the
         *               current clip
         * @param bottom The bottom of the rectangle to intersect with the current
         *               clip
         * @return       true if the resulting clip is non-empty
         */
        ClipRect(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [out] Boolean* isNonEmpty);

        /**
         * Intersect the current clip with the specified rectangle, which is
         * expressed in local coordinates.
         *
         * @param left   The left side of the rectangle to intersect with the
         *               current clip
         * @param top    The top of the rectangle to intersect with the current clip
         * @param right  The right side of the rectangle to intersect with the
         *               current clip
         * @param bottom The bottom of the rectangle to intersect with the current
         *               clip
         * @return       true if the resulting clip is non-empty
         */
        ClipRect(
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom,
            [out] Boolean* isNonEmpty);

        /**
         * Modify the current clip with the specified region. Note that unlike
         * clipRect() and clipPath() which transform their arguments by the
         * current matrix, clipRegion() assumes its argument is already in the
         * coordinate system of the current layer's bitmap, and so not
         * transformation is performed.
         *
         * @param region The region to operate on the current clip, based on op
         * @param op How the clip is modified
         * @return true if the resulting is non-empty
         */
        ClipRegion(
            [in] IRegion* region,
            [in] RegionOp op,
            [out] Boolean* IsNonEmpty);

        /**
         * Intersect the current clip with the specified region. Note that unlike
         * clipRect() and clipPath() which transform their arguments by the
         * current matrix, clipRegion() assumes its argument is already in the
         * coordinate system of the current layer's bitmap, and so not
         * transformation is performed.
         *
         * @param region The region to operate on the current clip, based on op
         * @return true if the resulting is non-empty
         */
        ClipRegion(
            [in] IRegion* region,
            [out] Boolean* IsNonEmpty);

        /**
         * Preconcat the current matrix with the specified matrix.
         *
         * @param matrix The matrix to preconcatenate with the current matrix
         */
        Concat(
            [in] IMatrix* matrix);

        /**
         * Fill the entire canvas' bitmap (restricted to the current clip) with the
         * specified ARGB color, using srcover porterduff mode.
         *
         * @param a alpha component (0..255) of the color to draw onto the canvas
         * @param r red component (0..255) of the color to draw onto the canvas
         * @param g green component (0..255) of the color to draw onto the canvas
         * @param b blue component (0..255) of the color to draw onto the canvas
         */
        DrawARGB(
            [in] Int32 a,
            [in] Int32 r,
            [in] Int32 g,
            [in] Int32 b);

        /**
         * Draw the specified arc, which will be scaled to fit inside the
         * specified oval. If the sweep angle is >= 360, then the oval is drawn
         * completely. Note that this differs slightly from SkPath::arcTo, which
         * treats the sweep angle mod 360.
         *
         * @param oval       The bounds of oval used to define the shape and size
         *                   of the arc
         * @param startAngle Starting angle (in degrees) where the arc begins
         * @param sweepAngle Sweep angle (in degrees) measured clockwise
         * @param useCenter  If true, include the center of the oval in the arc, and
         *                   close it if it is being stroked. This will draw a wedge
         * @param paint      The paint used to draw the arc
         */
        DrawArc(
            [in] IRectF* oval,
            [in] Float startAngle,
            [in] Float sweepAngle,
            [in] Boolean useCenter,
            [in] IPaint* paint);

        /**
         * <p>Draw the specified arc, which will be scaled to fit inside the
         * specified oval.</p>
         *
         * <p>If the start angle is negative or >= 360, the start angle is treated
         * as start angle modulo 360.</p>
         *
         * <p>If the sweep angle is >= 360, then the oval is drawn
         * completely. Note that this differs slightly from SkPath::arcTo, which
         * treats the sweep angle modulo 360. If the sweep angle is negative,
         * the sweep angle is treated as sweep angle modulo 360</p>
         *
         * <p>The arc is drawn clockwise. An angle of 0 degrees correspond to the
         * geometric angle of 0 degrees (3 o'clock on a watch.)</p>
         *
         * @param startAngle Starting angle (in degrees) where the arc begins
         * @param sweepAngle Sweep angle (in degrees) measured clockwise
         * @param useCenter If true, include the center of the oval in the arc, and
                            close it if it is being stroked. This will draw a wedge
         * @param paint      The paint used to draw the arc
         */
        DrawArc(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [in] Float startAngle,
            [in] Float sweepAngle,
            [in] Boolean useCenter,
            [in] IPaint* paint);

        /**
         * Draw the specified bitmap, with its top/left corner at (x,y), using
         * the specified paint, transformed by the current matrix.
         *
         * <p>Note: if the paint contains a maskfilter that generates a mask which
         * extends beyond the bitmap's original width/height (e.g. BlurMaskFilter),
         * then the bitmap will be drawn as if it were in a Shader with CLAMP mode.
         * Thus the color outside of the original width/height will be the edge
         * color replicated.
         *
         * <p>If the bitmap and canvas have different densities, this function
         * will take care of automatically scaling the bitmap to draw at the
         * same density as the canvas.
         *
         * @param bitmap The bitmap to be drawn
         * @param left   The position of the left side of the bitmap being drawn
         * @param top    The position of the top side of the bitmap being drawn
         * @param paint  The paint used to draw the bitmap (may be null)
         */
        DrawBitmap(
            [in] IBitmap* bitmap,
            [in] Float left,
            [in] Float top,
            [in] IPaint* paint);

        /**
         * Draw the specified bitmap, scaling/translating automatically to fill
         * the destination rectangle. If the source rectangle is not null, it
         * specifies the subset of the bitmap to draw.
         *
         * <p>Note: if the paint contains a maskfilter that generates a mask which
         * extends beyond the bitmap's original width/height (e.g. BlurMaskFilter),
         * then the bitmap will be drawn as if it were in a Shader with CLAMP mode.
         * Thus the color outside of the original width/height will be the edge
         * color replicated.
         *
         * <p>This function <em>ignores the density associated with the bitmap</em>.
         * This is because the source and destination rectangle coordinate
         * spaces are in their respective densities, so must already have the
         * appropriate scaling factor applied.
         *
         * @param bitmap The bitmap to be drawn
         * @param src    May be null. The subset of the bitmap to be drawn
         * @param dst    The rectangle that the bitmap will be scaled/translated
         *               to fit into
         * @param paint  May be null. The paint used to draw the bitmap
         */
        DrawBitmap(
            [in] IBitmap* bitmap,
            [in] IRect* src,
            [in] IRectF* dst,
            [in] IPaint* paint);

        /**
         * Draw the specified bitmap, scaling/translating automatically to fill
         * the destination rectangle. If the source rectangle is not null, it
         * specifies the subset of the bitmap to draw.
         *
         * <p>Note: if the paint contains a maskfilter that generates a mask which
         * extends beyond the bitmap's original width/height (e.g. BlurMaskFilter),
         * then the bitmap will be drawn as if it were in a Shader with CLAMP mode.
         * Thus the color outside of the original width/height will be the edge
         * color replicated.
         *
         * <p>This function <em>ignores the density associated with the bitmap</em>.
         * This is because the source and destination rectangle coordinate
         * spaces are in their respective densities, so must already have the
         * appropriate scaling factor applied.
         *
         * @param bitmap The bitmap to be drawn
         * @param src    May be null. The subset of the bitmap to be drawn
         * @param dst    The rectangle that the bitmap will be scaled/translated
         *               to fit into
         * @param paint  May be null. The paint used to draw the bitmap
         */
        DrawBitmap(
            [in] IBitmap* bitmap,
            [in] IRect* src,
            [in] IRect* dst,
            [in] IPaint* paint);

        /**
         * Treat the specified array of colors as a bitmap, and draw it. This gives
         * the same result as first creating a bitmap from the array, and then
         * drawing it, but this method avoids explicitly creating a bitmap object
         * which can be more efficient if the colors are changing often.
         *
         * @param colors   Array of colors representing the pixels of the bitmap
         * @param offset   Offset into the array of colors for the first pixel
         * @param stride   The number of colors in the array between rows (must be
         *                 >= width or <= -width).
         * @param x        The X coordinate for where to draw the bitmap
         * @param y        The Y coordinate for where to draw the bitmap
         * @param width    The width of the bitmap
         * @param height   The height of the bitmap
         * @param hasAlpha True if the alpha channel of the colors contains valid
         *                 values. If false, the alpha byte is ignored (assumed to
         *                 be 0xFF for every pixel).
         * @param paint    May be null. The paint used to draw the bitmap
         */
        DrawBitmap(
            [in] ArrayOf<Int32>* colors,
            [in] Int32 offset,
            [in] Int32 stride,
            [in] Float x,
            [in] Float y,
            [in] Int32 width,
            [in] Int32 height,
            [in] Boolean hasAlpha,
            [in] IPaint* paint);

        /**
         * Legacy version of drawBitmap(int[] colors, ...) that took ints for x,y
         */
        DrawBitmap(
            [in] ArrayOf<Int32>* colors,
            [in] Int32 offset,
            [in] Int32 stride,
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 width,
            [in] Int32 height,
            [in] Boolean hasAlpha,
            [in] IPaint* paint);

        /**
         * Draw the bitmap using the specified matrix.
         *
         * @param bitmap The bitmap to draw
         * @param matrix The matrix used to transform the bitmap when it is drawn
         * @param paint  May be null. The paint used to draw the bitmap
         */
        DrawBitmap(
            [in] IBitmap* bitmap,
            [in] IMatrix* matrix,
            [in] IPaint* paint);

        /**
         * Draw the bitmap through the mesh, where mesh vertices are evenly
         * distributed across the bitmap. There are meshWidth+1 vertices across, and
         * meshHeight+1 vertices down. The verts array is accessed in row-major
         * order, so that the first meshWidth+1 vertices are distributed across the
         * top of the bitmap from left to right. A more general version of this
         * methid is drawVertices().
         *
         * @param bitmap      The bitmap to draw using the mesh
         * @param meshWidth   The number of columns in the mesh. Nothing is drawn if
         *                    this is 0
         * @param meshHeight  The number of rows in the mesh. Nothing is drawn if
         *                    this is 0
         * @param verts       Array of x,y pairs, specifying where the mesh should be
         *                    drawn. There must be at least
         *                    (meshWidth+1) * (meshHeight+1) * 2 + meshOffset values
         *                    in the array
         * @param vertOffset  Number of verts elements to skip before drawing
         * @param colors      May be null. Specifies a color at each vertex, which is
         *                    interpolated across the cell, and whose values are
         *                    multiplied by the corresponding bitmap colors. If not null,
         *                    there must be at least (meshWidth+1) * (meshHeight+1) +
         *                    colorOffset values in the array.
         * @param colorOffset Number of color elements to skip before drawing
         * @param paint       May be null. The paint used to draw the bitmap
         */
        DrawBitmapMesh(
            [in] IBitmap* bitmap,
            [in] Int32 meshWidth,
            [in] Int32 meshHeight,
            [in] ArrayOf<Float>* verts,
            [in] Int32 vertOffset,
            [in] ArrayOf<Int32>* colors,
            [in] Int32 colorOffset,
            [in] IPaint* paint);

        /**
         * Draw the specified circle using the specified paint. If radius is <= 0,
         * then nothing will be drawn. The circle will be filled or framed based
         * on the Style in the paint.
         *
         * @param cx     The x-coordinate of the center of the cirle to be drawn
         * @param cy     The y-coordinate of the center of the cirle to be drawn
         * @param radius The radius of the cirle to be drawn
         * @param paint  The paint used to draw the circle
         */
        DrawCircle(
            [in] Float cx,
            [in] Float cy,
            [in] Float radius,
            [in] IPaint* paint);

        /**
         * Fill the entire canvas' bitmap (restricted to the current clip) with the
         * specified color, using srcover porterduff mode.
         *
         * @param color the color to draw onto the canvas
         */
        DrawColor(
            [in] Int32 color);

        /**
         * Fill the entire canvas' bitmap (restricted to the current clip) with the
         * specified color and porter-duff xfermode.
         *
         * @param color the color to draw with
         * @param mode  the porter-duff mode to apply to the color
         */
        DrawColor(
            [in] Int32 color,
            [in] PorterDuffMode mode);

        /**
         * Draw a line segment with the specified start and stop x,y coordinates,
         * using the specified paint. NOTE: since a line is always "framed", the
         * Style is ignored in the paint.
         *
         * @param startX The x-coordinate of the start point of the line
         * @param startY The y-coordinate of the start point of the line
         * @param paint  The paint used to draw the line
         */
        DrawLine(
            [in] Float startX,
            [in] Float startY,
            [in] Float stopX,
            [in] Float stopY,
            [in] IPaint* paint);

        /**
         * Draw a series of lines. Each line is taken from 4 consecutive values
         * in the pts array. Thus to draw 1 line, the array must contain at least 4
         * values. This is logically the same as drawing the array as follows:
         * drawLine(pts[0], pts[1], pts[2], pts[3]) followed by
         * drawLine(pts[4], pts[5], pts[6], pts[7]) and so on.
         *
         * @param pts      Array of points to draw [x0 y0 x1 y1 x2 y2 ...]
         * @param offset   Number of values in the array to skip before drawing.
         * @param count    The number of values in the array to process, after
         *                 skipping "offset" of them. Since each line uses 4 values,
         *                 the number of "lines" that are drawn is really
         *                 (count >> 2).
         * @param paint    The paint used to draw the points
         */
        DrawLines(
            [in] ArrayOf<Float>* pts,
            [in] Int32 offset,
            [in] Int32 count,
            [in] IPaint* paint);

        DrawLines(
            [in] ArrayOf<Float>* pts,
            [in] IPaint* paint);

        /**
         * Draw the specified oval using the specified paint. The oval will be
         * filled or framed based on the Style in the paint.
         *
         * @param oval The rectangle bounds of the oval to be drawn
         */
        DrawOval(
            [in] IRectF* oval,
            [in] IPaint* paint);

        /**
         * Draw the specified oval using the specified paint. The oval will be
         * filled or framed based on the Style in the paint.
         */
        DrawOval(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [in] IPaint* paint);

        /**
         * Fill the entire canvas' bitmap (restricted to the current clip) with
         * the specified paint. This is equivalent (but faster) to drawing an
         * infinitely large rectangle with the specified paint.
         *
         * @param paint The paint used to draw onto the canvas
         */
        DrawPaint(
            [in] IPaint* paint);

        /**
         * Draws the specified bitmap as an N-patch (most often, a 9-patches.)
         *
         * @param patch The ninepatch object to render
         * @param dst The destination rectangle.
         * @param paint The paint to draw the bitmap with. may be null
         *
         * @hide
         */
        DrawPatch(
            [in] INinePatch* patch,
            [in] IRect* dst,
            [in] IPaint* paint);

        /**
         * Draws the specified bitmap as an N-patch (most often, a 9-patches.)
         *
         * @param patch The ninepatch object to render
         * @param dst The destination rectangle.
         * @param paint The paint to draw the bitmap with. may be null
         *
         * @hide
         */
        DrawPatch(
            [in] INinePatch* patch,
            [in] IRectF* dst,
            [in] IPaint* paint);

        /**
         * Draw the specified path using the specified paint. The path will be
         * filled or framed based on the Style in the paint.
         *
         * @param path  The path to be drawn
         * @param paint The paint used to draw the path
         */
        DrawPath(
            [in] IPath* path,
            [in] IPaint* paint);

        /**
         * Save the canvas state, draw the picture, and restore the canvas state.
         * This differs from picture.draw(canvas), which does not perform any
         * save/restore.
         *
         * @param picture  The picture to be drawn
         */
        DrawPicture(
            [in] IPicture* picture);

        /**
         * Draw the picture, stretched to fit into the dst rectangle.
         */
        DrawPicture(
            [in] IPicture* picture,
            [in] IRectF* dst);

        /**
         * Draw the picture, stretched to fit into the dst rectangle.
         */
        DrawPicture(
            [in] IPicture* picture,
            [in] IRect* dst);

        /**
         * Helper for drawPoints() for drawing a single point.
         */
        DrawPoint(
            [in] Float x,
            [in] Float y,
            [in] IPaint* paint);

        /**
         * Draw a series of points. Each point is centered at the coordinate
         * specified by pts[], and its diameter is specified by the paint's stroke
         * width (as transformed by the canvas' CTM), with special treatment for
         * a stroke width of 0, which always draws exactly 1 pixel (or at most 4
         * if antialiasing is enabled). The shape of the point is controlled by
         * the paint's Cap type. The shape is a square, unless the cap type is
         * Round, in which case the shape is a circle.
         *
         * @param pts      Array of points to draw [x0 y0 x1 y1 x2 y2 ...]
         * @param offset   Number of values to skip before starting to draw.
         * @param count    The number of values to process, after skipping offset
         *                 of them. Since one point uses two values, the number of
         *                 "points" that are drawn is really (count >> 1).
         * @param paint    The paint used to draw the points
         */
        DrawPoints(
            [in] ArrayOf<Float>* pts,
            [in] Int32 offset,
            [in] Int32 count,
            [in] IPaint* paint);

        /**
         * Helper for drawPoints() that assumes you want to draw the entire array
         */
        DrawPoints(
            [in] ArrayOf<Float>* pts,
            [in] IPaint* paint);

        /**
         * Draw the text in the array, with each character's origin specified by
         * the pos array.
         *
         * @param text     The text to be drawn
         * @param index    The index of the first character to draw
         * @param count    The number of characters to draw, starting from index.
         * @param pos      Array of [x,y] positions, used to position each
         *                 character
         * @param paint    The paint used for the text (e.g. color, size, style)
         */
        DrawPosText(
            [in] ArrayOf<Char32>* text,
            [in] Int32 index,
            [in] Int32 count,
            [in] ArrayOf<Float>* pos,
            [in] IPaint* paint);

        /**
         * Draw the text in the array, with each character's origin specified by
         * the pos array.
         *
         * @param text  The text to be drawn
         * @param pos   Array of [x,y] positions, used to position each character
         * @param paint The paint used for the text (e.g. color, size, style)
         */
        DrawPosText(
            [in] String text,
            [in] ArrayOf<Float>* pos,
            [in] IPaint* paint);

        /**
         * Fill the entire canvas' bitmap (restricted to the current clip) with the
         * specified RGB color, using srcover porterduff mode.
         *
         * @param r red component (0..255) of the color to draw onto the canvas
         * @param g green component (0..255) of the color to draw onto the canvas
         * @param b blue component (0..255) of the color to draw onto the canvas
         */
        DrawRGB(
            [in] Int32 r,
            [in] Int32 g,
            [in] Int32 b);

        /**
         * Draw the specified Rect using the specified paint. The rectangle will
         * be filled or framed based on the Style in the paint.
         *
         * @param rect  The rect to be drawn
         * @param paint The paint used to draw the rect
         */
        DrawRect(
            [in] IRectF* rect,
            [in] IPaint* paint);

        /**
         * Draw the specified Rect using the specified Paint. The rectangle
         * will be filled or framed based on the Style in the paint.
         *
         * @param r        The rectangle to be drawn.
         * @param paint    The paint used to draw the rectangle
         */
        DrawRect(
            [in] IRect* rect,
            [in] IPaint* paint);

        /**
         * Draw the specified Rect using the specified paint. The rectangle will
         * be filled or framed based on the Style in the paint.
         *
         * @param left   The left side of the rectangle to be drawn
         * @param top    The top side of the rectangle to be drawn
         * @param right  The right side of the rectangle to be drawn
         * @param bottom The bottom side of the rectangle to be drawn
         * @param paint  The paint used to draw the rect
         */
        DrawRect(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [in] IPaint* paint);

        /**
         * Draw the specified round-rect using the specified paint. The roundrect
         * will be filled or framed based on the Style in the paint.
         *
         * @param rect  The rectangular bounds of the roundRect to be drawn
         * @param rx    The x-radius of the oval used to round the corners
         * @param ry    The y-radius of the oval used to round the corners
         * @param paint The paint used to draw the roundRect
         */
        DrawRoundRect(
            [in] IRectF* rect,
            [in] Float rx,
            [in] Float ry,
            [in] IPaint* paint);

        /**
         * Draw the specified round-rect using the specified paint. The roundrect
         * will be filled or framed based on the Style in the paint.
         *
         * @param rx    The x-radius of the oval used to round the corners
         * @param ry    The y-radius of the oval used to round the corners
         * @param paint The paint used to draw the roundRect
         */
        DrawRoundRect(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [in] Float rx,
            [in] Float ry,
            [in] IPaint* paint);
        /**
         * Draw the text, with origin at (x,y), using the specified paint. The
         * origin is interpreted based on the Align setting in the paint.
         *
         * @param text  The text to be drawn
         * @param x     The x-coordinate of the origin of the text being drawn
         * @param y     The y-coordinate of the origin of the text being drawn
         * @param paint The paint used for the text (e.g. color, size, style)
         */
        DrawText(
            [in] ArrayOf<Char32>* text,
            [in] Int32 index,
            [in] Int32 count,
            [in] Float x,
            [in] Float y,
            [in] IPaint* paint);

        /**
         * Draw the text, with origin at (x,y), using the specified paint. The
         * origin is interpreted based on the Align setting in the paint.
         *
         * @param text  The text to be drawn
         * @param x     The x-coordinate of the origin of the text being drawn
         * @param y     The y-coordinate of the origin of the text being drawn
         * @param paint The paint used for the text (e.g. color, size, style)
         */
        DrawText(
            [in] String text,
            [in] Float x,
            [in] Float y,
            [in] IPaint* paint);

        /**
         * Draw the text, with origin at (x,y), using the specified paint.
         * The origin is interpreted based on the Align setting in the paint.
         *
         * @param text  The text to be drawn
         * @param start The index of the first character in text to draw
         * @param end   (end - 1) is the index of the last character in text to draw
         * @param x     The x-coordinate of the origin of the text being drawn
         * @param y     The y-coordinate of the origin of the text being drawn
         * @param paint The paint used for the text (e.g. color, size, style)
         */
        DrawText(
            [in] String text,
            [in] Int32 start,
            [in] Int32 end,
            [in] Float x,
            [in] Float y,
            [in] IPaint* paint);

        /**
         * Draw the specified range of text, specified by start/end, with its
         * origin at (x,y), in the specified Paint. The origin is interpreted
         * based on the Align setting in the Paint.
         *
         * @param text     The text to be drawn
         * @param start    The index of the first character in text to draw
         * @param end      (end - 1) is the index of the last character in text
         *                 to draw
         * @param x        The x-coordinate of origin for where to draw the text
         * @param y        The y-coordinate of origin for where to draw the text
         * @param paint The paint used for the text (e.g. color, size, style)
         */
        DrawText(
            [in] ICharSequence* text,
            [in] Int32 start,
            [in] Int32 end,
            [in] Float x,
            [in] Float y,
            [in] IPaint* paint);

        /**
         * Draw the text, with origin at (x,y), using the specified paint, along
         * the specified path. The paint's Align setting determins where along the
         * path to start the text.
         *
         * @param text     The text to be drawn
         * @param path     The path the text should follow for its baseline
         * @param hOffset  The distance along the path to add to the text's
         *                 starting position
         * @param vOffset  The distance above(-) or below(+) the path to position
         *                 the text
         * @param paint    The paint used for the text (e.g. color, size, style)
         */
        DrawTextOnPath(
            [in] ArrayOf<Char32>* text,
            [in] Int32 index,
            [in] Int32 count,
            [in] IPath* path,
            [in] Float hOffset,
            [in] Float vOffset,
            [in] IPaint* paint);

        /**
         * Draw the text, with origin at (x,y), using the specified paint, along
         * the specified path. The paint's Align setting determins where along the
         * path to start the text.
         *
         * @param text     The text to be drawn
         * @param path     The path the text should follow for its baseline
         * @param hOffset  The distance along the path to add to the text's
         *                 starting position
         * @param vOffset  The distance above(-) or below(+) the path to position
         *                 the text
         * @param paint    The paint used for the text (e.g. color, size, style)
         */
        DrawTextOnPath(
            [in] String text,
            [in] IPath* path,
            [in] Float hOffset,
            [in] Float vOffset,
            [in] IPaint* paint);

        /**
         * Render a run of all LTR or all RTL text, with shaping. This does not run
         * bidi on the provided text, but renders it as a uniform right-to-left or
         * left-to-right run, as indicated by dir. Alignment of the text is as
         * determined by the Paint's TextAlign value.
         *
         * @param text the text to render
         * @param index the start of the text to render
         * @param count the count of chars to render
         * @param contextIndex the start of the context for shaping.  Must be
         *         no greater than index.
         * @param contextCount the number of characters in the context for shaping.
         *         ContexIndex + contextCount must be no less than index
         *         + count.
         * @param x the x position at which to draw the text
         * @param y the y position at which to draw the text
         * @param dir the run direction, either DIRECTION_LTR or DIRECTION_RTL.
         * @param paint the paint
         *
         * @sa DIRECTION_LTR
         * @sa DIRECTION_RTL
         * @hide
         */
        DrawTextRun(
            [in] ArrayOf<Char32>* text,
            [in] Int32 index,
            [in] Int32 count,
            [in] Int32 contextIndex,
            [in] Int32 contextCount,
            [in] Float x,
            [in] Float y,
            [in] Boolean isRtl,
            [in] IPaint* paint);

        /**
         * Render a run of all LTR or all RTL text, with shaping. This does not run
         * bidi on the provided text, but renders it as a uniform right-to-left or
         * left-to-right run, as indicated by dir. Alignment of the text is as
         * determined by the Paint's TextAlign value.
         *
         * @param text the text to render
         * @param start the start of the text to render. Data before this position
         *            can be used for shaping context.
         * @param end the end of the text to render. Data at or after this
         *            position can be used for shaping context.
         * @param x the x position at which to draw the text
         * @param y the y position at which to draw the text
         * @param dir the run direction, either 0 for LTR or 1 for RTL.
         * @param paint the paint
         * @hide
         */
        DrawTextRun(
            [in] ICharSequence* text,
            [in] Int32 start,
            [in] Int32 end,
            [in] Int32 contextStart,
            [in] Int32 contextEnd,
            [in] Float x,
            [in] Float y,
            [in] Boolean isRtl,
            [in] IPaint* paint);

        /**
         * Draw the array of vertices, interpreted as triangles (based on mode). The
         * verts array is required, and specifies the x,y pairs for each vertex. If
         * texs is non-null, then it is used to specify the coordinate in shader
         * coordinates to use at each vertex (the paint must have a shader in this
         * case). If there is no texs array, but there is a color array, then each
         * color is interpolated across its corresponding triangle in a gradient. If
         * both texs and colors arrays are present, then they behave as before, but
         * the resulting color at each pixels is the result of multiplying the
         * colors from the shader and the color-gradient together. The indices array
         * is optional, but if it is present, then it is used to specify the index
         * of each triangle, rather than just walking through the arrays in order.
         *
         * @param mode How to interpret the array of vertices
         * @param vertexCount The number of values in the vertices array (and
         *      corresponding texs and colors arrays if non-null). Each logical
         *      vertex is two values (x, y), vertexCount must be a multiple of 2.
         * @param verts Array of vertices for the mesh
         * @param vertOffset Number of values in the verts to skip before drawing.
         * @param texs May be null. If not null, specifies the coordinates to sample
         *      into the current shader (e.g. bitmap tile or gradient)
         * @param texOffset Number of values in texs to skip before drawing.
         * @param colors May be null. If not null, specifies a color for each
         *      vertex, to be interpolated across the triangle.
         * @param colorOffset Number of values in colors to skip before drawing.
         * @param indices If not null, array of indices to reference into the
         *      vertex (texs, colors) array.
         * @param indexCount number of entries in the indices array (if not null).
         * @param paint Specifies the shader to use if the texs array is non-null.
         */
        DrawVertices(
            [in] CanvasVertexMode mode,
            [in] Int32 vertexCount,
            [in] ArrayOf<Float>* verts,
            [in] Int32 vertOffset,
            [in] ArrayOf<Float>* texs,
            [in] Int32 texOffset,
            [in] ArrayOf<Int32>* colors,
            [in] Int32 colorOffset,
            [in] ArrayOf<Int16>* indices,
            [in] Int32 indexOffset,
            [in] Int32 indexCount,
            [in] IPaint* paint);

        /**
         * Retrieve the clip bounds, returning true if they are non-empty.
         *
         * @param bounds Return the clip bounds here. If it is null, ignore it but
         *               still return true if the current clip is non-empty.
         * @return true  if the current clip is non-empty.
         */
        GetClipBounds(
            [in] IRect* bounds,
            [out] Boolean* isNonEmpty);

        /**
         * Retrieve the clip bounds.
         *
         * @return the clip bounds, or [0, 0, 0, 0] if the clip is empty.
         */
        GetClipBounds(
            [out] IRect** bounds);

        /**
         * <p>Returns the target density of the canvas.  The default density is
         * derived from the density of its backing bitmap, or
         * Bitmap#DENSITY_NONE if there is not one.</p>
         *
         * @sa Bitmap#DENSITY_NONE
         *
         * @return Returns the current target density of the canvas, which is used
         * to determine the scaling factor when drawing a bitmap into it.
         *
         * @see setDensity
         * @see Bitmap#getDensity
         */
        GetDensity(
            [out] Int32* density);

        GetDrawFilter(
            [out] IDrawFilter** filter);

        /**
         * Returns the height of the current drawing layer
         *
         * @return the height of the current drawing layer
         */
        GetHeight(
            [out] Int32* height);

        /**
         * Return, in ctm, the current transformation matrix. This does not alter
         * the matrix in the canvas, but just returns a copy of it.
         */
        GetMatrix(
            [in/*, out*/] IMatrix* ctm);

        /**
         * Return a new matrix with a copy of the canvas' current transformation
         * matrix.
         */
        GetMatrix(
            [out] IMatrix** metrix);

        /**
         * Returns the maximum allowed height for bitmaps drawn with this canvas.
         * Attempting to draw with a bitmap taller than this value will result
         * in an error.
         *
         * @see #getMaximumBitmapWidth()
         */
        GetMaximumBitmapHeight(
            [out] Int32* height);

        /**
         * Returns the maximum allowed width for bitmaps drawn with this canvas.
         * Attempting to draw with a bitmap wider than this value will result
         * in an error.
         *
         * @see #getMaximumBitmapHeight()
         */
        GetMaximumBitmapWidth(
            [out] Int32* width);

        /**
         * Returns the number of matrix/clip states on the Canvas' private stack.
         * This will equal # save() calls - # restore() calls.
         */
        GetSaveCount(
            [out] Int32* count);

        /**
         * Returns the width of the current drawing layer
         *
         * @return the width of the current drawing layer
         */
        GetWidth(
            [out] Int32* width);

        /**
         * Indicates whether this Canvas uses hardware acceleration.
         *
         * Note that this method does not define what type of hardware acceleration
         * may or may not be used.
         *
         * @return True if drawing operations are hardware accelerated,
         *         false otherwise.
         */
        IsHardwareAccelerated(
            [out] Boolean* result);

        /**
         * Return true if the device that the current layer draws into is opaque
         * (i.e. does not support per-pixel alpha).
         *
         * @return true if the device that the current layer draws into is opaque
         */
        IsOpaque(
            [out] Boolean* isOpaque);

        /**
         * Return true if the specified rectangle, after being transformed by the
         * current matrix, would lie completely outside of the current clip. Call
         * this to check if an area you intend to draw into is clipped out (and
         * therefore you can skip making the draw calls).
         *
         * @param rect  the rect to compare with the current clip
         * @param type  specifies how to treat the edges (BW or antialiased)
         * @return      true if the rect (transformed by the canvas' matrix)
         *              does not intersect with the canvas' clip
         */
        QuickReject(
            [in] IRectF* rect,
            [in] CanvasEdgeType type,
            [out] Boolean* result);

        /**
         * Return true if the specified path, after being transformed by the
         * current matrix, would lie completely outside of the current clip. Call
         * this to check if an area you intend to draw into is clipped out (and
         * therefore you can skip making the draw calls). Note: for speed it may
         * return false even if the path itself might not intersect the clip
         * (i.e. the bounds of the path intersects, but the path does not).
         *
         * @param path        The path to compare with the current clip
         * @param type        true if the path should be considered antialiased,
         *                    since that means it may
         *                    affect a larger area (more pixels) than
         *                    non-antialiased.
         * @return            true if the path (transformed by the canvas' matrix)
         *                    does not intersect with the canvas' clip
         */
        QuickReject(
            [in] IPath* path,
            [in] CanvasEdgeType type,
            [out] Boolean* result);

        /**
         * Return true if the specified rectangle, after being transformed by the
         * current matrix, would lie completely outside of the current clip. Call
         * this to check if an area you intend to draw into is clipped out (and
         * therefore you can skip making the draw calls).
         *
         * @param left        The left side of the rectangle to compare with the
         *                    current clip
         * @param top         The top of the rectangle to compare with the current
         *                    clip
         * @param right       The right side of the rectangle to compare with the
         *                    current clip
         * @param bottom      The bottom of the rectangle to compare with the
         *                    current clip
         * @param type        true if the rect should be considered antialiased,
         *                    since that means it may affect a larger area (more
         *                    pixels) than non-antialiased.
         * @return            true if the rect (transformed by the canvas' matrix)
         *                    does not intersect with the canvas' clip
         */
        QuickReject(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [in] CanvasEdgeType type,
            [out] Boolean* result);

        /**
         * This call balances a previous call to save(), and is used to remove all
         * modifications to the matrix/clip state since the last save call. It is
         * an error to call restore() more times than save() was called.
         */
        Restore();

        /**
         * Efficient way to pop any calls to save() that happened after the save
         * count reached saveCount. It is an error for saveCount to be less than 1.
         *
         * Example:
         *    int count = canvas.save();
         *    ... // more calls potentially to save()
         *    canvas.restoreToCount(count);
         *    // now the canvas is back in the same state it was before the initial
         *    // call to save().
         *
         * @param saveCount The save level to restore to.
         */
        RestoreToCount(
            [in] Int32 saveCount);

        /**
         * Preconcat the current matrix with the specified rotation.
         *
         * @param degrees The amount to rotate, in degrees
         */
        Rotate(
            [in] Float degrees);

        /**
         * Preconcat the current matrix with the specified rotation.
         *
         * @param degrees The amount to rotate, in degrees
         * @param px The x-coord for the pivot point (unchanged by the rotation)
         * @param py The y-coord for the pivot point (unchanged by the rotation)
         */
        Rotate(
            [in] Float degrees,
            [in] Float px,
            [in] Float py);

        /**
         * Saves the current matrix and clip onto a private stack. Subsequent
         * calls to translate,scale,rotate,skew,concat or clipRect,clipPath
         * will all operate as usual, but when the balancing call to restore()
         * is made, those calls will be forgotten, and the settings that existed
         * before the save() will be reinstated.
         *
         * @return The value to pass to restoreToCount() to balance this save()
         */
        Save(
            [out] Int32* result);

        /**
         * Based on saveFlags, can save the current matrix and clip onto a private
         * stack. Subsequent calls to translate,scale,rotate,skew,concat or
         * clipRect,clipPath will all operate as usual, but when the balancing
         * call to restore() is made, those calls will be forgotten, and the
         * settings that existed before the save() will be reinstated.
         *
         * @param saveFlags flag bits that specify which parts of the Canvas state
         *                  to save/restore
         * @return The value to pass to restoreToCount() to balance this save()
         */
        Save(
            [in] Int32 saveFlags,
            [out] Int32* result);

        /**
         * This behaves the same as save(), but in addition it allocates an
         * offscreen bitmap. All drawing calls are directed there, and only when
         * the balancing call to restore() is made is that offscreen transfered to
         * the canvas (or the previous layer). Subsequent calls to translate,
         * scale, rotate, skew, concat or clipRect, clipPath all operate on this
         * copy. When the balancing call to restore() is made, this copy is
         * deleted and the previous matrix/clip state is restored.
         *
         * @param bounds     May be null. The maximum size the offscreen bitmap
         *                   needs to be (in local coordinates)
         * @param paint      This is copied, and is applied to the offscreen when
         *                   restore() is called.
         * @param saveFlags  see _SAVE_FLAG constants
         * @return           value to pass to restoreToCount() to balance this save()
         */
        SaveLayer(
            [in] IRectF* bounds,
            [in] IPaint* paint,
            [in] Int32 saveFlags,
            [out] Int32* result);

        /**
         * Convenience for saveLayer(bounds, paint, {@link #ALL_SAVE_FLAG})
         */
        SaveLayer(
            [in] IRectF* bounds,
            [in] IPaint* paint,
            [out] Int32* result);

        /**
         * Helper version of saveLayer() that takes 4 values rather than a RectF.
         */
        SaveLayer(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [in] IPaint* paint,
            [in] Int32 saveFlags,
            [out] Int32* result);

        /**
         * Convenience for saveLayer(left, top, right, bottom, paint, {@link #ALL_SAVE_FLAG})
         */
        SaveLayer(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [in] IPaint* paint,
            [out] Int32* result);

        /**
         * This behaves the same as save(), but in addition it allocates an
         * offscreen bitmap. All drawing calls are directed there, and only when
         * the balancing call to restore() is made is that offscreen transfered to
         * the canvas (or the previous layer). Subsequent calls to translate,
         * scale, rotate, skew, concat or clipRect, clipPath all operate on this
         * copy. When the balancing call to restore() is made, this copy is
         * deleted and the previous matrix/clip state is restored.
         *
         * @param bounds    The maximum size the offscreen bitmap needs to be
         *                  (in local coordinates)
         * @param alpha     The alpha to apply to the offscreen when when it is
                            drawn during restore()
         * @param saveFlags see _SAVE_FLAG constants
         * @return          value to pass to restoreToCount() to balance this call
         */
       SaveLayerAlpha(
            [in] IRectF* bounds,
            [in] Int32 alpha,
            [in] Int32 saveFlags,
            [out] Int32* result);

        /**
         * Convenience for saveLayerAlpha(bounds, alpha, {@link #ALL_SAVE_FLAG})
         */
       SaveLayerAlpha(
            [in] IRectF* bounds,
            [in] Int32 alpha,
            [out] Int32* result);

        /**
         * Helper for saveLayerAlpha() that takes 4 values instead of a RectF.
         */
        SaveLayerAlpha(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [in] Int32 alpha,
            [in] Int32 saveFlags,
            [out] Int32* result);

        /**
         * Helper for saveLayerAlpha(left, top, right, bottom, alpha, {@link #ALL_SAVE_FLAG})
         */
        SaveLayerAlpha(
            [in] Float left,
            [in] Float top,
            [in] Float right,
            [in] Float bottom,
            [in] Int32 alpha,
            [out] Int32* result);

        /**
         * Preconcat the current matrix with the specified scale.
         *
         * @param sx The amount to scale in X
         * @param sy The amount to scale in Y
         */
        Scale(
            [in] Float sx,
            [in] Float sy);

        /**
         * Preconcat the current matrix with the specified scale.
         *
         * @param sx The amount to scale in X
         * @param sy The amount to scale in Y
         * @param px The x-coord for the pivot point (unchanged by the rotation)
         * @param py The y-coord for the pivot point (unchanged by the rotation)
         */
        Scale(
            [in] Float sx,
            [in] Float sy,
            [in] Float px,
            [in] Float py);

        /**
         * Specify a bitmap for the canvas to draw into.  As a side-effect, also
         * updates the canvas's target density to match that of the bitmap.
         *
         * @param bitmap Specifies a mutable bitmap for the canvas to draw into.
         *
         * @see #setDensity(int)
         * @see #getDensity()
         */
        SetBitmap(
            [in] IBitmap* bitmap);

        /**
         * <p>Specifies the density for this Canvas' backing bitmap.  This modifies
         * the target density of the canvas itself, as well as the density of its
         * backing bitmap via Bitmap.setDensity(int).
         *
         * @sa Bitmap#setDensity(int) Bitmap.setDensity(int)
         *
         * @param density The new target density of the canvas, which is used
         * to determine the scaling factor when drawing a bitmap into it.  Use
         * Bitmap#DENSITY_NONE to disable bitmap scaling.
         *
         * @sa Bitmap#DENSITY_NONE
         *
         * @see #getDensity()
         * @see Bitmap#setDensity(int)
         */
        SetDensity(
            [in] Int32 density);

        SetDrawFilter(
            [in] IDrawFilter* filter);

        /**
         * Completely replace the current matrix with the specified matrix. If the
         * matrix parameter is null, then the current matrix is reset to identity.
         *
         * @param matrix The matrix to replace the current matrix with. If it is
         *               null, set the current matrix to identity.
         */
        SetMatrix(
            [in] IMatrix* matrix);

        /**
         * @hide
         */
        SetScreenDensity(
            [in] Int32 density);

        /**
         * Set the viewport dimensions if this canvas is GL based. If it is not,
         * this method is ignored and no exception is thrown.
         *
         *  @param width    The width of the viewport
         *  @param height   The height of the viewport
         */
        SetViewport(
            [in] Int32 width,
            [in] Int32 height);

        SetHighContrastText(
            [in] Boolean highContrastText);

        /**
         * Preconcat the current matrix with the specified skew.
         *
         * @param sx The amount to skew in X
         * @param sy The amount to skew in Y
         */
        Skew(
            [in] Float sx,
            [in] Float sy);

        /**
         * Preconcat the current matrix with the specified translation
         *
         * @param dx The distance to translate in X
         * @param dy The distance to translate in Y
        */
        Translate(
            [in] Float dx,
            [in] Float dy);

        SetSurfaceFormat(
            [in] Int32 format);

        GetNativeCanvas(
            [out] Handle32* natvieCanvas);
    }

    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
