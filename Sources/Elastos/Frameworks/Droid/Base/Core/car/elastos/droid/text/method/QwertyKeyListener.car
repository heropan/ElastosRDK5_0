
module
{
    using interface Elastos.Core.ICharSequence;

    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IKeyEvent;
    interface Elastos.Droid.Text.ISpannable;
    interface Elastos.Droid.Text.IEditable;

    enum Elastos.Droid.Text.Method.Capitalize;

    namespace Elastos {
    namespace Droid {
    namespace Text {
    namespace Method {

    /**
     * This is the standard key listener for alphabetic input on qwerty
     * keyboards.  You should generally not need to instantiate this yourself;
     * TextKeyListener will do it for you.
     * <p></p>
     * As for all implementations of {@link KeyListener}, this class is only concerned
     * with hardware keyboards.  Software input methods have no obligation to trigger
     * the methods in this class.
     *
     * @Involve
     * interface IKeyListener
     * interface IMetaKeyKeyListener
     * interface IBaseKeyListener
     */
    interface IQwertyKeyListener {}

    /**
     * @Involve
     * interface IMetaKeyKeyListenerHelper
     * interface IBaseKeyListenerHelper
     */
    [local]
    interface IQwertyKeyListenerHelper{
        //---------IQwertyKeyListenerHelper---------
        /**
         * Returns a new or existing instance with the specified capitalization
         * and correction properties.
         */
        GetInstance(
            [in] Boolean autoText,
            [in] Capitalize cap,
            [out] IQwertyKeyListener** ret);

        /**
         * Gets an instance of the listener suitable for use with full keyboards.
         * Disables auto-capitalization, auto-text and long-press initiated on-screen
         * character pickers.
         */
        GetInstanceForFullKeyboard(
            [out] IQwertyKeyListener** ret);

        /**
         * Marks the specified region of <code>content</code> as having
         * contained <code>original</code> prior to AutoText replacement.
         * Call this method when you have done or are about to do an
         * AutoText-style replacement on a region of text and want to let
         * the same mechanism (the user pressing DEL immediately after the
         * change) undo the replacement.
         *
         * @param content the Editable text where the replacement was made
         * @param start the start of the replaced region
         * @param end the end of the replaced region; the location of the cursor
         * @param original the text to be restored if the user presses DEL
         */
        MarkAsReplaced(
            [in] ISpannable* content,
            [in] Int32 start,
            [in] Int32 end,
            [in] String original);
    }

    }//namespace Method
    }//namespace Text
    }//namespace Droid
    }//namespace Elastos
}
