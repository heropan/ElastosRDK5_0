
module
{
    using interface Elastos.IO.IInt32Buffer;
    using interface Elastos.IO.IFloatBuffer;
    using interface Elastos.IO.IBuffer;

    namespace Elastosx {
    namespace Microedition {
    namespace Khronos {
    namespace Opengles {

    /**
     * @Involve
     * interface Elastosx.Microedition.Khronos.Opengles.IGL
     */
    [deprecated]
    interface IGL10 {
        const Int32 _GL_ADD                                   = 0x0104;
        const Int32 _GL_ALIASED_LINE_WIDTH_RANGE              = 0x846E;
        const Int32 _GL_ALIASED_POINT_SIZE_RANGE              = 0x846D;
        const Int32 _GL_ALPHA                                 = 0x1906;
        const Int32 _GL_ALPHA_BITS                            = 0x0D55;
        const Int32 _GL_ALPHA_TEST                            = 0x0BC0;
        const Int32 _GL_ALWAYS                                = 0x0207;
        const Int32 _GL_AMBIENT                               = 0x1200;
        const Int32 _GL_AMBIENT_AND_DIFFUSE                   = 0x1602;
        const Int32 _GL_AND                                   = 0x1501;
        const Int32 _GL_AND_INVERTED                          = 0x1504;
        const Int32 _GL_AND_REVERSE                           = 0x1502;
        const Int32 _GL_BACK                                  = 0x0405;
        const Int32 _GL_BLEND                                 = 0x0BE2;
        const Int32 _GL_BLUE_BITS                             = 0x0D54;
        const Int32 _GL_BYTE                                  = 0x1400;
        const Int32 _GL_CCW                                   = 0x0901;
        const Int32 _GL_CLAMP_TO_EDGE                         = 0x812F;
        const Int32 _GL_CLEAR                                 = 0x1500;
        const Int32 _GL_COLOR_ARRAY                           = 0x8076;
        const Int32 _GL_COLOR_BUFFER_BIT                      = 0x4000;
        const Int32 _GL_COLOR_LOGIC_OP                        = 0x0BF2;
        const Int32 _GL_COLOR_MATERIAL                        = 0x0B57;
        const Int32 _GL_COMPRESSED_TEXTURE_FORMATS            = 0x86A3;
        const Int32 _GL_CONSTANT_ATTENUATION                  = 0x1207;
        const Int32 _GL_COPY                                  = 0x1503;
        const Int32 _GL_COPY_INVERTED                         = 0x150C;
        const Int32 _GL_CULL_FACE                             = 0x0B44;
        const Int32 _GL_CW                                    = 0x0900;
        const Int32 _GL_DECAL                                 = 0x2101;
        const Int32 _GL_DECR                                  = 0x1E03;
        const Int32 _GL_DEPTH_BITS                            = 0x0D56;
        const Int32 _GL_DEPTH_BUFFER_BIT                      = 0x0100;
        const Int32 _GL_DEPTH_TEST                            = 0x0B71;
        const Int32 _GL_DIFFUSE                               = 0x1201;
        const Int32 _GL_DITHER                                = 0x0BD0;
        const Int32 _GL_DONT_CARE                             = 0x1100;
        const Int32 _GL_DST_ALPHA                             = 0x0304;
        const Int32 _GL_DST_COLOR                             = 0x0306;
        const Int32 _GL_EMISSION                              = 0x1600;
        const Int32 _GL_EQUAL                                 = 0x0202;
        const Int32 _GL_EQUIV                                 = 0x1509;
        const Int32 _GL_EXP                                   = 0x0800;
        const Int32 _GL_EXP2                                  = 0x0801;
        const Int32 _GL_EXTENSIONS                            = 0x1F03;
        const Int32 _GL_FALSE                                 = 0;
        const Int32 _GL_FASTEST                               = 0x1101;
        const Int32 _GL_FIXED                                 = 0x140C;
        const Int32 _GL_FLAT                                  = 0x1D00;
        const Int32 _GL_FLOAT                                 = 0x1406;
        const Int32 _GL_FOG                                   = 0x0B60;
        const Int32 _GL_FOG_COLOR                             = 0x0B66;
        const Int32 _GL_FOG_DENSITY                           = 0x0B62;
        const Int32 _GL_FOG_END                               = 0x0B64;
        const Int32 _GL_FOG_HINT                              = 0x0C54;
        const Int32 _GL_FOG_MODE                              = 0x0B65;
        const Int32 _GL_FOG_START                             = 0x0B63;
        const Int32 _GL_FRONT                                 = 0x0404;
        const Int32 _GL_FRONT_AND_BACK                        = 0x0408;
        const Int32 _GL_GEQUAL                                = 0x0206;
        const Int32 _GL_GREATER                               = 0x0204;
        const Int32 _GL_GREEN_BITS                            = 0x0D53;
        const Int32 _GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES  = 0x8B9B;
        const Int32 _GL_IMPLEMENTATION_COLOR_READ_TYPE_OES    = 0x8B9A;
        const Int32 _GL_INCR                                  = 0x1E02;
        const Int32 _GL_INVALID_ENUM                          = 0x0500;
        const Int32 _GL_INVALID_OPERATION                     = 0x0502;
        const Int32 _GL_INVALID_VALUE                         = 0x0501;
        const Int32 _GL_INVERT                                = 0x150A;
        const Int32 _GL_KEEP                                  = 0x1E00;
        const Int32 _GL_LEQUAL                                = 0x0203;
        const Int32 _GL_LESS                                  = 0x0201;
        const Int32 _GL_LIGHT_MODEL_AMBIENT                   = 0x0B53;
        const Int32 _GL_LIGHT_MODEL_TWO_SIDE                  = 0x0B52;
        const Int32 _GL_LIGHT0                                = 0x4000;
        const Int32 _GL_LIGHT1                                = 0x4001;
        const Int32 _GL_LIGHT2                                = 0x4002;
        const Int32 _GL_LIGHT3                                = 0x4003;
        const Int32 _GL_LIGHT4                                = 0x4004;
        const Int32 _GL_LIGHT5                                = 0x4005;
        const Int32 _GL_LIGHT6                                = 0x4006;
        const Int32 _GL_LIGHT7                                = 0x4007;
        const Int32 _GL_LIGHTING                              = 0x0B50;
        const Int32 _GL_LINE_LOOP                             = 0x0002;
        const Int32 _GL_LINE_SMOOTH                           = 0x0B20;
        const Int32 _GL_LINE_SMOOTH_HINT                      = 0x0C52;
        const Int32 _GL_LINE_STRIP                            = 0x0003;
        const Int32 _GL_LINEAR                                = 0x2601;
        const Int32 _GL_LINEAR_ATTENUATION                    = 0x1208;
        const Int32 _GL_LINEAR_MIPMAP_LINEAR                  = 0x2703;
        const Int32 _GL_LINEAR_MIPMAP_NEAREST                 = 0x2701;
        const Int32 _GL_LINES                                 = 0x0001;
        const Int32 _GL_LUMINANCE                             = 0x1909;
        const Int32 _GL_LUMINANCE_ALPHA                       = 0x190A;
        const Int32 _GL_MAX_ELEMENTS_INDICES                  = 0x80E9;
        const Int32 _GL_MAX_ELEMENTS_VERTICES                 = 0x80E8;
        const Int32 _GL_MAX_LIGHTS                            = 0x0D31;
        const Int32 _GL_MAX_MODELVIEW_STACK_DEPTH             = 0x0D36;
        const Int32 _GL_MAX_PROJECTION_STACK_DEPTH            = 0x0D38;
        const Int32 _GL_MAX_TEXTURE_SIZE                      = 0x0D33;
        const Int32 _GL_MAX_TEXTURE_STACK_DEPTH               = 0x0D39;
        const Int32 _GL_MAX_TEXTURE_UNITS                     = 0x84E2;
        const Int32 _GL_MAX_VIEWPORT_DIMS                     = 0x0D3A;
        const Int32 _GL_MODELVIEW                             = 0x1700;
        const Int32 _GL_MODULATE                              = 0x2100;
        const Int32 _GL_MULTISAMPLE                           = 0x809D;
        const Int32 _GL_NAND                                  = 0x150E;
        const Int32 _GL_NEAREST                               = 0x2600;
        const Int32 _GL_NEAREST_MIPMAP_LINEAR                 = 0x2702;
        const Int32 _GL_NEAREST_MIPMAP_NEAREST                = 0x2700;
        const Int32 _GL_NEVER                                 = 0x0200;
        const Int32 _GL_NICEST                                = 0x1102;
        const Int32 _GL_NO_ERROR                              = 0;
        const Int32 _GL_NOOP                                  = 0x1505;
        const Int32 _GL_NOR                                   = 0x1508;
        const Int32 _GL_NORMAL_ARRAY                          = 0x8075;
        const Int32 _GL_NORMALIZE                             = 0x0BA1;
        const Int32 _GL_NOTEQUAL                              = 0x0205;
        const Int32 _GL_NUM_COMPRESSED_TEXTURE_FORMATS        = 0x86A2;
        const Int32 _GL_ONE                                   = 1;
        const Int32 _GL_ONE_MINUS_DST_ALPHA                   = 0x0305;
        const Int32 _GL_ONE_MINUS_DST_COLOR                   = 0x0307;
        const Int32 _GL_ONE_MINUS_SRC_ALPHA                   = 0x0303;
        const Int32 _GL_ONE_MINUS_SRC_COLOR                   = 0x0301;
        const Int32 _GL_OR                                    = 0x1507;
        const Int32 _GL_OR_INVERTED                           = 0x150D;
        const Int32 _GL_OR_REVERSE                            = 0x150B;
        const Int32 _GL_OUT_OF_MEMORY                         = 0x0505;
        const Int32 _GL_PACK_ALIGNMENT                        = 0x0D05;
        const Int32 _GL_PALETTE4_R5_G6_B5_OES                 = 0x8B92;
        const Int32 _GL_PALETTE4_RGB5_A1_OES                  = 0x8B94;
        const Int32 _GL_PALETTE4_RGB8_OES                     = 0x8B90;
        const Int32 _GL_PALETTE4_RGBA4_OES                    = 0x8B93;
        const Int32 _GL_PALETTE4_RGBA8_OES                    = 0x8B91;
        const Int32 _GL_PALETTE8_R5_G6_B5_OES                 = 0x8B97;
        const Int32 _GL_PALETTE8_RGB5_A1_OES                  = 0x8B99;
        const Int32 _GL_PALETTE8_RGB8_OES                     = 0x8B95;
        const Int32 _GL_PALETTE8_RGBA4_OES                    = 0x8B98;
        const Int32 _GL_PALETTE8_RGBA8_OES                    = 0x8B96;
        const Int32 _GL_PERSPECTIVE_CORRECTION_HINT           = 0x0C50;
        const Int32 _GL_POINT_SMOOTH                          = 0x0B10;
        const Int32 _GL_POINT_SMOOTH_HINT                     = 0x0C51;
        const Int32 _GL_POINTS                                = 0x0000;
        const Int32 _GL_POINT_FADE_THRESHOLD_SIZE             = 0x8128;
        const Int32 _GL_POINT_SIZE                            = 0x0B11;
        const Int32 _GL_POLYGON_OFFSET_FILL                   = 0x8037;
        const Int32 _GL_POLYGON_SMOOTH_HINT                   = 0x0C53;
        const Int32 _GL_POSITION                              = 0x1203;
        const Int32 _GL_PROJECTION                            = 0x1701;
        const Int32 _GL_QUADRATIC_ATTENUATION                 = 0x1209;
        const Int32 _GL_RED_BITS                              = 0x0D52;
        const Int32 _GL_RENDERER                              = 0x1F01;
        const Int32 _GL_REPEAT                                = 0x2901;
        const Int32 _GL_REPLACE                               = 0x1E01;
        const Int32 _GL_RESCALE_NORMAL                        = 0x803A;
        const Int32 _GL_RGB                                   = 0x1907;
        const Int32 _GL_RGBA                                  = 0x1908;
        const Int32 _GL_SAMPLE_ALPHA_TO_COVERAGE              = 0x809E;
        const Int32 _GL_SAMPLE_ALPHA_TO_ONE                   = 0x809F;
        const Int32 _GL_SAMPLE_COVERAGE                       = 0x80A0;
        const Int32 _GL_SCISSOR_TEST                          = 0x0C11;
        const Int32 _GL_SET                                   = 0x150F;
        const Int32 _GL_SHININESS                             = 0x1601;
        const Int32 _GL_SHORT                                 = 0x1402;
        const Int32 _GL_SMOOTH                                = 0x1D01;
        const Int32 _GL_SMOOTH_LINE_WIDTH_RANGE               = 0x0B22;
        const Int32 _GL_SMOOTH_POINT_SIZE_RANGE               = 0x0B12;
        const Int32 _GL_SPECULAR                              = 0x1202;
        const Int32 _GL_SPOT_CUTOFF                           = 0x1206;
        const Int32 _GL_SPOT_DIRECTION                        = 0x1204;
        const Int32 _GL_SPOT_EXPONENT                         = 0x1205;
        const Int32 _GL_SRC_ALPHA                             = 0x0302;
        const Int32 _GL_SRC_ALPHA_SATURATE                    = 0x0308;
        const Int32 _GL_SRC_COLOR                             = 0x0300;
        const Int32 _GL_STACK_OVERFLOW                        = 0x0503;
        const Int32 _GL_STACK_UNDERFLOW                       = 0x0504;
        const Int32 _GL_STENCIL_BITS                          = 0x0D57;
        const Int32 _GL_STENCIL_BUFFER_BIT                    = 0x0400;
        const Int32 _GL_STENCIL_TEST                          = 0x0B90;
        const Int32 _GL_SUBPIXEL_BITS                         = 0x0D50;
        const Int32 _GL_TEXTURE                               = 0x1702;
        const Int32 _GL_TEXTURE_2D                            = 0x0DE1;
        const Int32 _GL_TEXTURE_COORD_ARRAY                   = 0x8078;
        const Int32 _GL_TEXTURE_ENV                           = 0x2300;
        const Int32 _GL_TEXTURE_ENV_COLOR                     = 0x2201;
        const Int32 _GL_TEXTURE_ENV_MODE                      = 0x2200;
        const Int32 _GL_TEXTURE_MAG_FILTER                    = 0x2800;
        const Int32 _GL_TEXTURE_MIN_FILTER                    = 0x2801;
        const Int32 _GL_TEXTURE_WRAP_S                        = 0x2802;
        const Int32 _GL_TEXTURE_WRAP_T                        = 0x2803;
        const Int32 _GL_TEXTURE0                              = 0x84C0;
        const Int32 _GL_TEXTURE1                              = 0x84C1;
        const Int32 _GL_TEXTURE2                              = 0x84C2;
        const Int32 _GL_TEXTURE3                              = 0x84C3;
        const Int32 _GL_TEXTURE4                              = 0x84C4;
        const Int32 _GL_TEXTURE5                              = 0x84C5;
        const Int32 _GL_TEXTURE6                              = 0x84C6;
        const Int32 _GL_TEXTURE7                              = 0x84C7;
        const Int32 _GL_TEXTURE8                              = 0x84C8;
        const Int32 _GL_TEXTURE9                              = 0x84C9;
        const Int32 _GL_TEXTURE10                             = 0x84CA;
        const Int32 _GL_TEXTURE11                             = 0x84CB;
        const Int32 _GL_TEXTURE12                             = 0x84CC;
        const Int32 _GL_TEXTURE13                             = 0x84CD;
        const Int32 _GL_TEXTURE14                             = 0x84CE;
        const Int32 _GL_TEXTURE15                             = 0x84CF;
        const Int32 _GL_TEXTURE16                             = 0x84D0;
        const Int32 _GL_TEXTURE17                             = 0x84D1;
        const Int32 _GL_TEXTURE18                             = 0x84D2;
        const Int32 _GL_TEXTURE19                             = 0x84D3;
        const Int32 _GL_TEXTURE20                             = 0x84D4;
        const Int32 _GL_TEXTURE21                             = 0x84D5;
        const Int32 _GL_TEXTURE22                             = 0x84D6;
        const Int32 _GL_TEXTURE23                             = 0x84D7;
        const Int32 _GL_TEXTURE24                             = 0x84D8;
        const Int32 _GL_TEXTURE25                             = 0x84D9;
        const Int32 _GL_TEXTURE26                             = 0x84DA;
        const Int32 _GL_TEXTURE27                             = 0x84DB;
        const Int32 _GL_TEXTURE28                             = 0x84DC;
        const Int32 _GL_TEXTURE29                             = 0x84DD;
        const Int32 _GL_TEXTURE30                             = 0x84DE;
        const Int32 _GL_TEXTURE31                             = 0x84DF;
        const Int32 _GL_TRIANGLE_FAN                          = 0x0006;
        const Int32 _GL_TRIANGLE_STRIP                        = 0x0005;
        const Int32 _GL_TRIANGLES                             = 0x0004;
        const Int32 _GL_TRUE                                  = 1;
        const Int32 _GL_UNPACK_ALIGNMENT                      = 0x0CF5;
        const Int32 _GL_UNSIGNED_BYTE                         = 0x1401;
        const Int32 _GL_UNSIGNED_SHORT                        = 0x1403;
        const Int32 _GL_UNSIGNED_SHORT_4_4_4_4                = 0x8033;
        const Int32 _GL_UNSIGNED_SHORT_5_5_5_1                = 0x8034;
        const Int32 _GL_UNSIGNED_SHORT_5_6_5                  = 0x8363;
        const Int32 _GL_VENDOR                                = 0x1F00;
        const Int32 _GL_VERSION                               = 0x1F02;
        const Int32 _GL_VERTEX_ARRAY                          = 0x8074;
        const Int32 _GL_XOR                                   = 0x1506;
        const Int32 _GL_ZERO                                  = 0;

        GlActiveTexture(
            [in] Int32 texture);

        GlAlphaFunc(
            [in] Int32 func,
            [in] Float ref);

        GlAlphaFuncx(
            [in] Int32 func,
            [in] Int32 ref);

        GlBlendFunc(
            [in] Int32 sfactor,
            [in] Int32 dfactor);

        GlClear(
            [in] Int32 mask);

        GlClearColor(
            [in] Float red,
            [in] Float green,
            [in] Float blue,
            [in] Float alpha);

        GlClearColorx(
            [in] Int32 red,
            [in] Int32 green,
            [in] Int32 blue,
            [in] Int32 alpha);

        GlClearDepthf(
            [in] Float depth);

        GlClearDepthx(
            [in] Int32 depth);

        GlClearStencil(
            [in] Int32 s);

        GlClientActiveTexture(
            [in] Int32 texture);

        GlColor4f(
            [in] Float red,
            [in] Float green,
            [in] Float blue,
            [in] Float alpha);

        GlColor4x(
            [in] Int32 red,
            [in] Int32 green,
            [in] Int32 blue,
            [in] Int32 alpha);

        GlColorMask(
            [in] Boolean red,
            [in] Boolean green,
            [in] Boolean blue,
            [in] Boolean alpha);

        GlColorPointer(
            [in] Int32 size,
            [in] Int32 type,
            [in] Int32 stride,
            [in] IBuffer* pointer);

        GlCompressedTexSubImage2D(
            [in] Int32 target,
            [in] Int32 level,
            [in] Int32 xoffset,
            [in] Int32 yoffset,
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 format,
            [in] Int32 imageSize,
            [in] IBuffer* data);

        GlCopyTexSubImage2D(
            [in] Int32 target,
            [in] Int32 level,
            [in] Int32 xoffset,
            [in] Int32 yoffset,
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 width,
            [in] Int32 height);

        GlCullFace(
            [in] Int32 mode);

        GlDeleteTextures(
            [in] Int32 n,
            [in] ArrayOf<Int32>* textures,
            [in] Int32 offset);

        GlDeleteTextures(
            [in] Int32 n,
            [in] IInt32Buffer* textures);

        GlDepthFunc(
            [in] Int32 func);

        GlDepthMask(
            [in] Boolean flag);

        GlDepthRangef(
            [in] Float zNear,
            [in] Float zFar);

        GlDepthRangex(
            [in] Int32 zNear,
            [in] Int32 zFar);

        GlDisable(
            [in] Int32 cap);

        GlDisableClientState(
            [in] Int32 array);

        GlDrawArrays(
            [in] Int32 mode,
            [in] Int32 first,
            [in] Int32 count);

        GlDrawElements(
            [in] Int32 mode,
            [in] Int32 count,
            [in] Int32 type,
            [in] IBuffer* indices);

        GlFinish();

        GlFlush();

        GlFogf(
            [in] Int32 pname,
            [in] Float param);

        GlFogfv(
            [in] Int32 pname,
            [in] ArrayOf<Float>* params,
            [in] Int32 offset);

        GlFogfv(
            [in] Int32 pname,
            [in] IFloatBuffer* params);

        GlFogx(
            [in] Int32 pname,
            [in] Int32 param);

        GlFogxv(
            [in] Int32 pname,
            [in] ArrayOf<Int32>* params,
            [in] Int32 offset);

        GlFogxv(
            [in] Int32 pname,
            [in] IInt32Buffer* params);

        GlFrontFace(
            [in] Int32 mode);

        GlFrustumf(
            [in] Float left,
            [in] Float right,
            [in] Float bottom,
            [in] Float top,
            [in] Float zNear,
            [in] Float zFar);

        GlFrustumx(
            [in] Int32 left,
            [in] Int32 right,
            [in] Int32 bottom,
            [in] Int32 top,
            [in] Int32 zNear,
            [in] Int32 zFar);

        GlGenTextures(
            [in] Int32 n,
            [in] ArrayOf<Int32>* textures,
            [in] Int32 offset);

        GlGenTextures(
            [in] Int32 n,
            [in] IInt32Buffer* textures);

        GlGetError(
            [out] Int32* error);

        GlGetString(
            [in] Int32 name,
            [out] String* str);

        GlHint(
            [in] Int32 target,
            [in] Int32 mode);

        GlLightModelf(
            [in] Int32 pname,
            [in] Float param);

        GlLightModelfv(
            [in] Int32 pname,
            [in] ArrayOf<Float>* params,
            [in] Int32 offset);

        GlLightModelfv(
            [in] Int32 pname,
            [in] IFloatBuffer* params);

        GlLightModelx(
            [in] Int32 pname,
            [in] Int32 param);

        GlLightModelxv(
            [in] Int32 pname,
            [in] ArrayOf<Int32>* params,
            [in] Int32 offset);

        GlLightModelxv(
            [in] Int32 pname,
            [in] IInt32Buffer* params);

        GlLightf(
            [in] Int32 light,
            [in] Int32 pname,
            [in] Float param);

        GlLightfv(
            [in] Int32 light,
            [in] Int32 pname,
            [in] ArrayOf<Float>* params,
            [in] Int32 offset);

        GlLightfv(
            [in] Int32 light,
            [in] Int32 pname,
            [in] IFloatBuffer* params);

        GlLightx(
            [in] Int32 light,
            [in] Int32 pname,
            [in] Int32 param);

        GlLightxv(
            [in] Int32 light,
            [in] Int32 pname,
            [in] ArrayOf<Int32>* params,
            [in] Int32 offset);

        GlLightxv(
            [in] Int32 light,
            [in] Int32 pname,
            [in] IInt32Buffer* params);

        GlLineWidth(
            [in] Float width);

        GlLineWidthx(
            [in] Int32 width);

        GlLoadIdentity();

        GlLoadMatrixf(
            [in] ArrayOf<Float>* m,
            [in] Int32 offset);

        GlLoadMatrixf(
            [in] IFloatBuffer* m);

        GlLoadMatrixx(
            [in] ArrayOf<Int32>* m,
            [in] Int32 offset);

        GlLoadMatrixx(
            [in] IInt32Buffer* m);

        GlLogicOp(
            [in] Int32 opcode);

        GlMaterialf(
            [in] Int32 face,
            [in] Int32 pname,
            [in] Float param);

        GlMaterialfv(
            [in] Int32 face,
            [in] Int32 pname,
            [in] ArrayOf<Float>* params,
            [in] Int32 offset);

        GlMaterialfv(
            [in] Int32 face,
            [in] Int32 pname,
            [in] IFloatBuffer* params);

        GlMaterialx(
            [in] Int32 face,
            [in] Int32 pname,
            [in] Int32 param);

        GlMaterialxv(
            [in] Int32 face,
            [in] Int32 pname,
            [in] ArrayOf<Int32>* params,
            [in] Int32 offset);

        GlMaterialxv(
            [in] Int32 face,
            [in] Int32 pname,
            [in] IInt32Buffer* params);

        GlMatrixMode(
            [in] Int32 mode);

        GlMultMatrixf(
            [in] ArrayOf<Float>* m,
            [in] Int32 offset);

        GlMultMatrixf(
            [in] IFloatBuffer* m);

        GlMultMatrixx(
            [in] ArrayOf<Int32>* m,
            [in] Int32 offset);

        GlMultMatrixx(
            [in] IInt32Buffer* m);

        GlMultiTexCoord4f(
            [in] Int32 target,
            [in] Float s,
            [in] Float t,
            [in] Float r,
            [in] Float q);

        GlMultiTexCoord4x(
            [in] Int32 target,
            [in] Int32 s,
            [in] Int32 t,
            [in] Int32 r,
            [in] Int32 q);

        GlNormal3f(
            [in] Float nx,
            [in] Float ny,
            [in] Float nz);

        GlNormal3x(
            [in] Int32 nx,
            [in] Int32 ny,
            [in] Int32 nz);

        GlNormalPointer(
            [in] Int32 type,
            [in] Int32 stride,
            [in] IBuffer* pointer);

        GlOrthof(
            [in] Float left,
            [in] Float right,
            [in] Float bottom,
            [in] Float top,
            [in] Float zNear,
            [in] Float zFar);

        GlOrthox(
            [in] Int32 left,
            [in] Int32 right,
            [in] Int32 bottom,
            [in] Int32 top,
            [in] Int32 zNear,
            [in] Int32 zFar);

        GlPixelStorei(
            [in] Int32 pname,
            [in] Int32 param);

        GlPointSize(
            [in] Float size);

        GlPointSizex(
            [in] Int32 size);

        GlPolygonOffset(
            [in] Float factor,
            [in] Float units);

        GlPolygonOffsetx(
            [in] Int32 factor,
            [in] Int32 units);

        GlPopMatrix();

        GlPushMatrix();

        GlReadPixels(
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 format,
            [in] Int32 type,
            [in] IBuffer* pixels);

        GlRotatef(
            [in] Float angle,
            [in] Float x,
            [in] Float y,
            [in] Float z);

        GlRotatex(
            [in] Int32 angle,
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 z);

        GlSampleCoverage(
            [in] Float value,
            [in] Boolean invert);

        GlSampleCoveragex(
            [in] Int32 value,
            [in] Boolean invert);

        GlScalef(
            [in] Float x,
            [in] Float y,
            [in] Float z);

        GlScalex(
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 z);

        GlScissor(
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 width,
            [in] Int32 height);

        GlShadeModel(
            [in] Int32 mode);

        GlStencilFunc(
            [in] Int32 func,
            [in] Int32 ref,
            [in] Int32 mask);

        GlStencilMask(
            [in] Int32 mask);

        GlTexCoordPointer(
            [in] Int32 size,
            [in] Int32 type,
            [in] Int32 stride,
            [in] IBuffer* pointer);

        GlTexImage2D(
            [in] Int32 target,
            [in] Int32 level,
            [in] Int32 internalformat,
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 border,
            [in] Int32 format,
            [in] Int32 type,
            [in] IBuffer* pixels);

        GlTexParameterx(
            [in] Int32 target,
            [in] Int32 pname,
            [in] Int32 param);

        GlTexSubImage2D(
            [in] Int32 target,
            [in] Int32 level,
            [in] Int32 xoffset,
            [in] Int32 yoffset,
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 format,
            [in] Int32 type,
            [in] IBuffer* pixels);

        GlTranslatef(
            [in] Float x,
            [in] Float y,
            [in] Float z);

        GlTranslatex(
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 z);

        GlVertexPointer(
            [in] Int32 size,
            [in] Int32 type,
            [in] Int32 stride,
            [in] IBuffer* pointer);

        GlViewport(
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 width,
            [in] Int32 height);
    }

    } // namepsace Opengles
    } // namepsace Khronos
    } // namepsace Microedition
    } // namespace Elastosx
}
