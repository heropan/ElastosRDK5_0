
module
{
    interface Elastos.Droid.Content.IContext;

    namespace Elastos {
    namespace Droid {
    namespace Content {

    /**
     * Value type that contains information about a periodic sync.
     */
    /**
     * @Involve
     * interface IParcelable;
     */
    [local, deprecated]
    interface IRestrictionEntry {
        /**
         * A type of restriction. Use this type for information that needs to be transferred across
         * but shouldn't be presented to the user in the UI. Stores a single String value.
         */
        const Int32 TYPE_NULL         = 0;

        /**
         * A type of restriction. Use this for storing a boolean value, typically presented as
         * a checkbox in the UI.
         */
        const Int32 TYPE_BOOLEAN      = 1;

        /**
         * A type of restriction. Use this for storing a string value, typically presented as
         * a single-select list. Call {@link #setChoiceEntries(String[])} and
         * {@link #setChoiceValues(String[])} to set the localized list entries to present to the user
         * and the corresponding values, respectively.
         */
        const Int32 TYPE_CHOICE       = 2;

        /**
         * A type of restriction. Use this for storing a string value, typically presented as
         * a single-select list. Call {@link #setChoiceEntries(String[])} and
         * {@link #setChoiceValues(String[])} to set the localized list entries to present to the user
         * and the corresponding values, respectively.
         * The presentation could imply that values in lower array indices are included when a
         * particular value is chosen.
         * @hide
         */
        const Int32 TYPE_CHOICE_LEVEL = 3;

        /**
         * A type of restriction. Use this for presenting a multi-select list where more than one
         * entry can be selected, such as for choosing specific titles to white-list.
         * Call {@link #setChoiceEntries(String[])} and
         * {@link #setChoiceValues(String[])} to set the localized list entries to present to the user
         * and the corresponding values, respectively.
         * Use {@link #getAllSelectedStrings()} and {@link #setAllSelectedStrings(String[])} to
         * manipulate the selections.
         */
        const Int32 TYPE_MULTI_SELECT = 4;

        /**
         * A type of restriction. Use this for storing an integer value. The range of values
         * is from {@link Integer#MIN_VALUE} to {@link Integer#MAX_VALUE}.
         */
        const Int32 TYPE_INTEGER = 5;

        /**
         * A type of restriction. Use this for storing a string value.
         * @see #setSelectedString
         * @see #getSelectedString
         */
        const Int32 TYPE_STRING = 6;

        /**
         * Sets the type for this restriction.
         * @param type the type for this restriction.
         */
        SetType(
            [in] Int32 type);

        /**
         * Returns the type for this restriction.
         * @return the type for this restriction
         */
        GetType(
            [out] Int32* type);

        /**
         * Returns the currently selected string value.
         * @return the currently selected value, which can be null for types that aren't for holding
         * single string values.
         */
        GetSelectedString(
            [out] String* str);

        /**
         * Returns the list of currently selected values.
         * @return the list of current selections, if type is {@link #TYPE_MULTI_SELECT},
         *  null otherwise.
         */
        GetAllSelectedStrings(
            [out, callee] ArrayOf<String>* strs);

        /**
         * Returns the current selected state for an entry of type {@link #TYPE_BOOLEAN}.
         * @return the current selected state of the entry.
         */
        GetSelectedState(
            [out] Boolean* str);

        /**
         * Returns the value of the entry as an integer when the type is {@link #TYPE_INTEGER}.
         * @return the integer value of the entry.
         */
        GetInt32Value(
            [out] Int32* value);

        /**
         * Sets the integer value of the entry when the type is {@link #TYPE_INTEGER}.
         * @param value the integer value to set.
         */
        SetInt32Value(
            [in] Int32 value);

        /**
         * Sets the string value to use as the selected value for this restriction. This value will
         * be persisted by the system for later use by the application.
         * @param selectedString the string value to select.
         */
        SetSelectedString(
            [in] String selectedString);

        /**
         * Sets the current selected state for an entry of type {@link #TYPE_BOOLEAN}. This value will
         * be persisted by the system for later use by the application.
         * @param state the current selected state
         */
        SetSelectedState(
            [in] Boolean state);

        /**
         * Sets the current list of selected values for an entry of type {@link #TYPE_MULTI_SELECT}.
         * These values will be persisted by the system for later use by the application.
         * @param allSelectedStrings the current list of selected values.
         */
        SetAllSelectedStrings(
            [in] ArrayOf<String>* allSelectedStrings);

        /**
         * Sets a list of string values that can be selected by the user. If no user-visible entries
         * are set by a call to {@link #setChoiceEntries(String[])}, these values will be the ones
         * shown to the user. Values will be chosen from this list as the user's selection and the
         * selected values can be retrieved by a call to {@link #getAllSelectedStrings()}, or
         * {@link #getSelectedString()}, depending on whether it is a multi-select type or choice type.
         * This method is not relevant for types other than
         * {@link #TYPE_CHOICE}, and {@link #TYPE_MULTI_SELECT}.
         * @param choiceValues an array of Strings which will be the selected values for the user's
         * selections.
         * @see #getChoiceValues()
         * @see #getAllSelectedStrings()
         */
        SetChoiceValues(
            [in] ArrayOf<String>* choiceValues);

        /**
         * Sets a list of string values that can be selected by the user, similar to
         * {@link #setChoiceValues(String[])}.
         * @param context the application context for retrieving the resources.
         * @param stringArrayResId the resource id for a string array containing the possible values.
         * @see #setChoiceValues(String[])
         */
        SetChoiceValues(
            [in] IContext* ctx,
            [in] Int32 stringArrayResId);

        /**
         * Returns the list of possible string values set earlier.
         * @return the list of possible values.
         */
        GetChoiceValues(
            [out, callee] ArrayOf<String> * values);

        /**
         * Sets a list of strings that will be presented as choices to the user. When the
         * user selects one or more of these choices, the corresponding value from the possible values
         * are stored as the selected strings. The size of this array must match the size of the array
         * set in {@link #setChoiceValues(String[])}. This method is not relevant for types other
         * than {@link #TYPE_CHOICE}, and {@link #TYPE_MULTI_SELECT}.
         * @param choiceEntries the list of user-visible choices.
         * @see #setChoiceValues(String[])
         */
        SetChoiceEntries(
            [in] ArrayOf<String>* choiceEntries);

        /** Sets a list of strings that will be presented as choices to the user. This is similar to
         * {@link #setChoiceEntries(String[])}.
         * @param context the application context, used for retrieving the resources.
         * @param stringArrayResId the resource id of a string array containing the possible entries.
         */
        SetChoiceEntries(
            [in] IContext* ctx,
            [in] Int32 stringArrayResId);

        /**
         * Returns the list of strings, set earlier, that will be presented as choices to the user.
         * @return the list of choices presented to the user.
         */
        GetChoiceEntries(
            [out, callee] ArrayOf<String>* entries);

        /**
         * Returns the provided user-visible description of the entry, if any.
         * @return the user-visible description, null if none was set earlier.
         */
        GetDescription(
            [out] String* result);

        /**
         * Sets the user-visible description of the entry, as a possible sub-text for the title.
         * You can use this to describe the entry in more detail or to display the current state of
         * the restriction.
         * @param description the user-visible description string.
         */
        SetDescription(
            [in] String description);

        /**
         * This is the unique key for the restriction entry.
         * @return the key for the restriction.
         */
        GetKey(
            [out] String* result);

        /**
         * Returns the user-visible title for the entry, if any.
         * @return the user-visible title for the entry, null if none was set earlier.
         */
        GetTitle(
            [out] String* result);

        /**
         * Sets the user-visible title for the entry.
         * @param title the user-visible title for the entry.
         */
        SetTitle(
            [in] String title);
    }

    } // namespace Content
    } // namespace Droid
    } // namespace Elastos
}