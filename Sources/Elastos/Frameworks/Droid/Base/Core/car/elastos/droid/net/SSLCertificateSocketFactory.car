
module
{
    using interface Elastos.Core.IArrayOf;
    using interface Elastos.Net.ISocket;
    using interface Elastos.Security.IPrivateKey;
    using interface Elastosx.Net.ISocketFactory;
    using interface Elastosx.Net.Ssl.IKeyManager;
    using interface Elastosx.Net.Ssl.ISSLSocketFactory;
    using interface Elastosx.Net.Ssl.ITrustManager;

    interface Elastos.Droid.Net.ISSLSessionCache;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    /**
     * SSLSocketFactory implementation with several extra features:
     *
     * <ul>
     * <li>Timeout specification for SSL handshake operations
     * <li>Hostname verification in most cases (see WARNINGs below)
     * <li>Optional SSL session caching with {@link SSLSessionCache}
     * <li>Optionally bypass all SSL certificate checks
     * </ul>
     *
     * The handshake timeout does not apply to actual TCP socket connection.
     * If you want a connection timeout as well, use {@link #createSocket()}
     * and {@link Socket#connect(SocketAddress, int)}, after which you
     * must verify the identity of the server you are connected to.
     *
     * <p class="caution"><b>Most {@link SSLSocketFactory} implementations do not
     * verify the server's identity, allowing man-in-the-middle attacks.</b>
     * This implementation does check the server's certificate hostname, but only
     * for createSocket variants that specify a hostname.  When using methods that
     * use {@link InetAddress} or which return an unconnected socket, you MUST
     * verify the server's identity yourself to ensure a secure connection.</p>
     *
     * <p>One way to verify the server's identity is to use
     * {@link HttpsURLConnection#getDefaultHostnameVerifier()} to get a
     * {@link HostnameVerifier} to verify the certificate hostname.
     *
     * <p>On development devices, "setprop socket.relaxsslcheck yes" bypasses all
     * SSL certificate and hostname checks for testing purposes.  This setting
     * requires root access.
     */
    /**
     * @Involved
     * interface ISSLSocketFactory;
     * interface ISocketFactory;
     */
    [deprecated]
    interface ISSLCertificateSocketFactory {
        /**
         * Sets the {@link TrustManager}s to be used for connections made by this factory.
         */
        SetTrustManagers(
            [in] ArrayOf<ITrustManager*>* trustManager);

        /**
         * Sets the <a href="http://technotes.googlecode.com/git/nextprotoneg.html">Next
         * Protocol Negotiation (NPN)</a> protocols that this peer is interested in.
         *
         * <p>For servers this is the sequence of protocols to advertise as
         * supported, in order of preference. This list is sent unencrypted to
         * all clients that support NPN.
         *
         * <p>For clients this is a list of supported protocols to match against the
         * server's list. If there is no protocol supported by both client and
         * server then the first protocol in the client's list will be selected.
         * The order of the client's protocols is otherwise insignificant.
         *
         * @param npnProtocols a non-empty list of protocol byte arrays. All arrays
         *     must be non-empty and of length less than 256.
         */
        SetNpnProtocols(
            [in] ArrayOf<IArrayOf*>* npnProtocols);

        /**
         * Sets the
         * <a href="http://tools.ietf.org/html/draft-ietf-tls-applayerprotoneg-01">
         * Application Layer Protocol Negotiation (ALPN)</a> protocols that this peer
         * is interested in.
         *
         * <p>For servers this is the sequence of protocols to advertise as
         * supported, in order of preference. This list is sent unencrypted to
         * all clients that support ALPN.
         *
         * <p>For clients this is a list of supported protocols to match against the
         * server's list. If there is no protocol supported by both client and
         * server then the first protocol in the client's list will be selected.
         * The order of the client's protocols is otherwise insignificant.
         *
         * @param protocols a non-empty list of protocol byte arrays. All arrays
         *     must be non-empty and of length less than 256.
         * @hide
         */
        SetAlpnProtocols(
            [in] ArrayOf<IArrayOf*>* protocols);

        /**
         * Returns the <a href="http://technotes.googlecode.com/git/nextprotoneg.html">Next
         * Protocol Negotiation (NPN)</a> protocol selected by client and server, or
         * null if no protocol was negotiated.
         *
         * @param socket a socket created by this factory.
         * @throws IllegalArgumentException if the socket was not created by this factory.
         */
        GetNpnSelectedProtocol(
            [in] ISocket* socket,
            [out, callee] ArrayOf<Byte>* result);

        /**
         * Returns the
         * <a href="http://tools.ietf.org/html/draft-ietf-tls-applayerprotoneg-01">Application
         * Layer Protocol Negotiation (ALPN)</a> protocol selected by client and server, or null
         * if no protocol was negotiated.
         *
         * @param socket a socket created by this factory.
         * @throws IllegalArgumentException if the socket was not created by this factory.
         * @hide
         */
        GetAlpnSelectedProtocol(
            [in] ISocket* socket,
            [out, callee] ArrayOf<Byte>* result);

        /**
         * Sets the {@link KeyManager}s to be used for connections made by this factory.
         */
        SetKeyManagers(
            [in] ArrayOf<IKeyManager*>* keyManagers);

        /**
         * Sets the private key to be used for TLS Channel ID by connections made by this
         * factory.
         *
         * @param privateKey private key (enables TLS Channel ID) or {@code null} for no key (disables
         *        TLS Channel ID). The private key has to be an Elliptic Curve (EC) key based on the
         *        NIST P-256 curve (aka SECG secp256r1 or ANSI X9.62 prime256v1).
         *
         * @hide
         */
        SetChannelIdPrivateKey(
            [in] IPrivateKey* privateKey);

        /**
         * Enables <a href="http://tools.ietf.org/html/rfc5077#section-3.2">session ticket</a>
         * support on the given socket.
         *
         * @param socket a socket created by this factory
         * @param useSessionTickets {@code true} to enable session ticket support on this socket.
         * @throws IllegalArgumentException if the socket was not created by this factory.
         */
        SetUseSessionTickets(
            [in] ISocket* socket,
            [in] Boolean useSessionTickets);

        /**
         * Turns on <a href="http://tools.ietf.org/html/rfc6066#section-3">Server
         * Name Indication (SNI)</a> on a given socket.
         *
         * @param socket a socket created by this factory.
         * @param hostName the desired SNI hostname, null to disable.
         * @throws IllegalArgumentException if the socket was not created by this factory.
         */
        SetHostname(
            [in] ISocket* socket,
            [in] String hostName);

        /**
         * Sets this socket's SO_SNDTIMEO write timeout in milliseconds.
         * Use 0 for no timeout.
         * To take effect, this option must be set before the blocking method was called.
         *
         * @param socket a socket created by this factory.
         * @param timeout the desired write timeout in milliseconds.
         * @throws IllegalArgumentException if the socket was not created by this factory.
         *
         * @hide
         */
        SetSoWriteTimeout(
            [in] ISocket* socket,
            [in] Int32 writeTimeoutMilliseconds);
    }

    interface ISSLCertificateSocketFactoryHelper {
        /**
         * Returns a new socket factory instance with an optional handshake timeout.
         *
         * @param handshakeTimeoutMillis to use for SSL connection handshake, or 0
         *         for none.  The socket timeout is reset to 0 after the handshake.
         * @return a new SSLSocketFactory with the specified parameters
         */
        GetDefault(
            [in] Int32 handshakeTimeoutMillis,
            [out] ISocketFactory** result);

        /**
         * Returns a new socket factory instance with an optional handshake timeout
         * and SSL session cache.
         *
         * @param handshakeTimeoutMillis to use for SSL connection handshake, or 0
         *         for none.  The socket timeout is reset to 0 after the handshake.
         * @param cache The {@link SSLSessionCache} to use, or null for no cache.
         * @return a new SSLSocketFactory with the specified parameters
         */
        GetDefault(
            [in] Int32 handshakeTimeoutMillis,
            [in] ISSLSessionCache* cache,
            [out] ISSLSocketFactory** result);

        /**
         * Returns a new instance of a socket factory with all SSL security checks
         * disabled, using an optional handshake timeout and SSL session cache.
         *
         * <p class="caution"><b>Warning:</b> Sockets created using this factory
         * are vulnerable to man-in-the-middle attacks!</p>
         *
         * @param handshakeTimeoutMillis to use for SSL connection handshake, or 0
         *         for none.  The socket timeout is reset to 0 after the handshake.
         * @param cache The {@link SSLSessionCache} to use, or null for no cache.
         * @return an insecure SSLSocketFactory with the specified parameters
         */
        GetInsecure(
            [in] Int32 handshakeTimeoutMillis,
            [in] ISSLSessionCache* cache,
            [out] ISSLSocketFactory** result);

        /**
         * Returns a socket factory (also named SSLSocketFactory, but in a different
         * namespace) for use with the Apache HTTP stack.
         *
         * @param handshakeTimeoutMillis to use for SSL connection handshake, or 0
         *         for none.  The socket timeout is reset to 0 after the handshake.
         * @param cache The {@link SSLSessionCache} to use, or null for no cache.
         * @return a new SocketFactory with the specified parameters
         */
        GetHttpSocketFactory(
            [in] Int32 handshakeTimeoutMillis,
            [in] ISSLSessionCache* cache,
            [out] Org.Apache.Http.Conn.SSL.ISSLSocketFactory** result);

        /**
         * Verify the hostname of the certificate used by the other end of a
         * connected socket.  You MUST call this if you did not supply a hostname
         * to {@link #createSocket()}.  It is harmless to call this method
         * redundantly if the hostname has already been verified.
         *
         * <p>Wildcard certificates are allowed to verify any matching hostname,
         * so "foo.bar.example.com" is verified if the peer has a certificate
         * for "*.example.com".
         *
         * @param socket An SSL socket which has been connected to a server
         * @param hostname The expected hostname of the remote server
         * @throws IOException if something goes wrong handshaking with the server
         * @throws SSLPeerUnverifiedException if the server cannot prove its identity
         *
         * @hide
         */
        VerifyHostname(
            [in] ISocket* socket,
            [in] String hostname);
    }

    } // namespace Net
    } // namespace Droid
    } // namespace Elastos
}
