
module
{
    interface Elastos.Droid.Os.IParcelUuid;
    interface Elastos.Droid.Utility.ISparseArray;
    interface Elastos.Droid.Bluetooth.LE.IScanResult;

    using interface Elastos.Utility.IList;
    using interface Elastos.Utility.IMap;

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {
    namespace LE {

    /**
     * Represents a scan record from Bluetooth LE scan.
     */
    interface IScanRecord {

        /**
         * Returns the advertising flags indicating the discoverable mode and capability of the device.
         * Returns -1 if the flag field is not set.
         */
        GetAdvertiseFlags(
            [out] Int32* result);

        /**
         * Returns a list of service UUIDs within the advertisement that are used to identify the
         * bluetooth GATT services.
         */
        GetServiceUuids(
            [out] IList** uuids);

        /**
         * Returns a sparse array of manufacturer identifier and its corresponding manufacturer specific
         * data.
         */
        GetManufacturerSpecificData(
            [out] ISparseArray** array);

        /**
         * Returns the manufacturer specific data associated with the manufacturer id. Returns
         * {@code null} if the {@code manufacturerId} is not found.
         */
        //@Nullable
        GetManufacturerSpecificData(
            [in] Int32 manufacturerId,
            [out, callee] ArrayOf<Byte>* data);

        /**
         * Returns a map of service UUID and its corresponding service data.
         */
        GetServiceData(
            [out] IMap** map);

        /**
         * Returns the service data byte array associated with the {@code serviceUuid}. Returns
         * {@code null} if the {@code serviceDataUuid} is not found.
         */
        //@Nullable
        GetServiceData(
            [in] IParcelUuid* serviceDataUuid,
            [out, callee] ArrayOf<Byte>* data);

        /**
         * Returns the transmission power level of the packet in dBm. Returns {@link Integer#MIN_VALUE}
         * if the field is not set. This value can be used to calculate the path loss of a received
         * packet using the following equation:
         * <p>
         * <code>pathloss = txPowerLevel - rssi</code>
         */
        GetTxPowerLevel(
            [out] Int32* result);

        /**
         * Returns the local name of the BLE device. The is a UTF-8 encoded string.
         */
        //@Nullable
        GetDeviceName(
            [out] String* result);

        /**
         * Returns raw bytes of scan record.
         */
        GetBytes(
            [out, callee] ArrayOf<Byte>* data);
    }

    [deprecated]
    interface IScanRecordHelper {
        /**
         * Parse scan record bytes to {@link ScanRecord}.
         * <p>
         * The format is defined in Bluetooth 4.1 specification, Volume 3, Part C, Section 11 and 18.
         * <p>
         * All numerical multi-byte entities and values shall use little-endian <strong>byte</strong>
         * order.
         *
         * @param scanRecord The scan record of Bluetooth LE advertisement and/or scan response.
         * @hide
         */
        ParseFromBytes(
            [in] ArrayOf<Byte>* scanRecord,
            [out] IScanRecord** record);
    }

    } // LE
    } // Bluetooth
    } // Droid
    } // Elastos
}