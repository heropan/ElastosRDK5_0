
module
{
    merge("bluetooth/le/AdvertiseCallback.car");
    merge("bluetooth/le/AdvertiseData.car");
    merge("bluetooth/le/AdvertiseSettings.car");
    merge("bluetooth/le/BluetoothLeAdvertiser.car");
    merge("bluetooth/le/BluetoothLeScanner.car");
    merge("bluetooth/le/ResultStorageDescriptor.car");
    merge("bluetooth/le/ScanCallback.car");
    merge("bluetooth/le/ScanFilter.car");
    merge("bluetooth/le/ScanRecord.car");
    merge("bluetooth/le/ScanResult.car");
    merge("bluetooth/le/ScanSettings.car");
    merge("bluetooth/le/TruncatedFilter.car");

    merge("bluetooth/BluetoothA2dp.car");
    merge("bluetooth/BluetoothA2dpSink.car");
    merge("bluetooth/BluetoothActivityEnergyInfo.car");
    merge("bluetooth/BluetoothAdapter.car");
    merge("bluetooth/BluetoothAssignedNumbers.car");
    merge("bluetooth/BluetoothAudioConfig.car");
    merge("bluetooth/BluetoothAvrcp.car");
    merge("bluetooth/BluetoothAvrcpController.car");
    merge("bluetooth/BluetoothClass.car");
    merge("bluetooth/BluetoothDevice.car");
    merge("bluetooth/BluetoothDevicePicker.car");
    merge("bluetooth/BluetoothGattCallback.car");
    merge("bluetooth/BluetoothGatt.car");
    merge("bluetooth/BluetoothGattCharacteristic.car");
    merge("bluetooth/BluetoothGattDescriptor.car");
    merge("bluetooth/BluetoothGattServerCallback.car");
    merge("bluetooth/BluetoothGattServer.car");
    merge("bluetooth/BluetoothGattService.car");
    merge("bluetooth/BluetoothHeadset.car");
    merge("bluetooth/BluetoothHeadsetClientCall.car");
    merge("bluetooth/BluetoothHeadsetClient.car");
    merge("bluetooth/BluetoothHealthAppConfiguration.car");
    merge("bluetooth/BluetoothHealthCallback.car");
    merge("bluetooth/BluetoothHealth.car");
    merge("bluetooth/BluetoothInputDevice.car");
    merge("bluetooth/BluetoothManager.car");
    merge("bluetooth/BluetoothMap.car");
    merge("bluetooth/BluetoothMasInstance.car");
    merge("bluetooth/BluetoothPan.car");
    merge("bluetooth/BluetoothPbap.car");
    merge("bluetooth/BluetoothProfile.car");
    merge("bluetooth/BluetoothServerSocket.car");
    merge("bluetooth/BluetoothSocket.car");

    merge("bluetooth/IBluetooth.car");
    merge("bluetooth/IBluetoothA2dp.car");
    merge("bluetooth/IBluetoothA2dpSink.car");
    merge("bluetooth/IBluetoothAvrcpController.car");
    merge("bluetooth/IBluetoothCallback.car");
    merge("bluetooth/IBluetoothGatt.car");
    merge("bluetooth/IBluetoothGattCallback.car");
    merge("bluetooth/IBluetoothGattServerCallback.car");
    merge("bluetooth/IBluetoothHeadset.car");
    merge("bluetooth/IBluetoothHeadsetClient.car");
    merge("bluetooth/IBluetoothHeadsetPhone.car");
    merge("bluetooth/IBluetoothHealth.car");
    merge("bluetooth/IBluetoothHealthCallback.car");
    merge("bluetooth/IBluetoothInputDevice.car");
    merge("bluetooth/IBluetoothManager.car");
    merge("bluetooth/IBluetoothManagerCallback.car");
    merge("bluetooth/IBluetoothMap.car");
    merge("bluetooth/IBluetoothPan.car");
    merge("bluetooth/IBluetoothPbap.car");
    merge("bluetooth/IBluetoothStateChangeCallback.car");

    interface Elastos.Droid.Bluetooth.IBluetoothDevice;
    interface Elastos.Droid.Bluetooth.IIBluetoothManager;
    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Utility.ISparseArray;
    interface Elastos.Droid.Content.IContext;
    using interface Elastos.Utility.IList;
    using interface Elastos.Utility.IMap;
    using interface Elastos.Utility.IUUID;

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {

         class CBluetoothStateChangeCallbackWrapper {
             constructor(
                 [in] IInterface* cb);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

         [local]
         class CBluetoothAdapterManagerCallback {
             constructor(
                 [in] IBluetoothAdapter* host);

             interface IIBluetoothManagerCallback;
             interface IBinder;
         }

         class CBluetoothAdapter {
             /**
              * Use {@link #getDefaultAdapter} to get the BluetoothAdapter instance.
              */
             constructor(
                 [in] IIBluetoothManager* managerService);

             interface IBluetoothAdapter;
         }

         singleton class CBluetoothAdapterHelper {
             interface IBluetoothAdapterHelper;
         }

         class CBluetoothClass {

             constructor(
                 [in] Int32 classInt);

             interface IBluetoothClass;
             interface IParcelable;
         }

         class CBluetoothDevice {

             /*package*/ constructor(
                 [in] String address);

             interface IBluetoothDevice;
             interface IParcelable;
         }

         class CBluetoothDeviceManagerCallback {
             interface IIBluetoothManagerCallback;
             interface IBinder;
         }

         class CBluetoothHealthAppConfiguration {

             /**
              * Constructor to register the SINK role
              *
              * @param name Friendly name associated with the application configuration
              * @param dataType Data Type of the remote Bluetooth Health device
              * @hide
              */
             constructor(
                 [in] String name,
                 [in] Int32 dataType);

             /*
              * Constructor to register the application configuration.
              *
              * @param name Friendly name associated with the application configuration
              * @param dataType Data Type of the remote Bluetooth Health device
              * @param role {@link BluetoothHealth#SOURCE_ROLE} or
              *                     {@link BluetoothHealth#SINK_ROLE}
              * @hide
              */

             constructor(
                 [in] String name,
                 [in] Int32 dataType,
                 [in] Int32 role,
                 [in] Int32 channelType);

             interface IBluetoothHealthAppConfiguration;
             interface IParcelable;
         }

         class CBluetoothInputDeviceStateChangeCallback {
             constructor(
                 [in] IInterface* host);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

         class CBluetoothPanStateChangeCallback {
             constructor(
                 [in] IInterface* host);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

         class CBluetoothPbapStateChangeCallback {
             constructor(
                 [in] IBluetoothPbap* host);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

         class CBluetoothHeadsetStateChangeCallback {
             constructor(
                 [in] IInterface* host);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

         class CBluetoothHealthStateChangeCallback {
             constructor(
                 [in] IInterface* host);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

         class CBluetoothHealthCallbackWrapper {
             constructor(
                 [in] IBluetoothHealthCallback* cb);

             interface IIBluetoothHealthCallback;
             interface IBinder;
         }

         class CBluetoothA2dpStateChangeCallback {
             constructor(
                 [in] IInterface* host);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

         class CBluetoothA2dpSinkStateChangeCallback {
             constructor(
                 [in] IInterface* host);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

         class CBluetoothActivityEnergyInfo {
             constructor(
                [in] Int32 stackState,
                [in] Int32 txTime,
                [in] Int32 rxTime,
                [in] Int32 idleTime,
                [in] Int32 energyUsed);

             interface IBluetoothActivityEnergyInfo;
             interface IParcelable;
         }

         class CBluetoothAudioConfig {
             constructor(
                [in] Int32 sampleRate,
                [in] Int32 channelConfig,
                [in] Int32 audioFormat);

             interface IBluetoothAudioConfig;
             interface IParcelable;
         }

         class CBluetoothAvrcpControllerStateChangeCallback {
             constructor(
                 [in] IBluetoothAvrcpController* host);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

        class CBluetoothGattCallbackWrapper {

            interface IIBluetoothGattCallback;
            interface IBinder;
        }

        class  CBluetoothGattDescriptor {
            constructor(
                [in] IUUID* uuid,
                [in] Int32 permissions);
            interface IBluetoothGattDescriptor;
        }

        class CBluetoothGattCallback {
            constructor(
                [in] IBluetoothGatt* host);

            interface IIBluetoothGattCallback;
            interface IBinder;
        }

        class CBluetoothGattServerCallback {
             constructor(
                 [in] IBluetoothGattServer* host);

             interface IIBluetoothGattServerCallback;
             interface IBinder;
        }

        class CBluetoothGattService {
            constructor(
                [in] IUUID* uuid,
                [in] Int32 serviceType);

            interface IBluetoothGattService;
        }

         class CBluetoothHeadsetClientCall {
             constructor(
                [in] Int32 id,
                [in] Int32 state,
                [in] String number,
                [in] Boolean multiParty,
                [in] Boolean outgoing);

             interface IBluetoothHeadsetClientCall;
             interface IParcelable;
         }

         class CBluetoothHeadsetClientStateChangeCallback {
             constructor(
                 [in] IBluetoothHeadsetClient* host);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

         class CBluetoothManager {
             constructor(
                [in] IContext* ctx);

             interface IBluetoothManager;
         }

         class CBluetoothMasInstance {
             constructor(
                [in] Int32 id,
                [in] String name,
                [in] Int32 channel,
                [in] Int32 msgTypes);

             interface IBluetoothMasInstance;
             interface IParcelable;
         }

         class CBluetoothMapStateChangeCallback {
             constructor(
                 [in] IBluetoothMap* host);

             interface IIBluetoothStateChangeCallback;
             interface IBinder;
         }

         namespace LE {
             class CAdvertiseData {
                 constructor(
                     [in] IParcel* parcel);

                 constructor(
                     [in] IList* serviceUuids,
                     [in] ISparseArray* manufacturerData,
                     [in] IMap* serviceData,
                     [in] Boolean includeTxPowerLevel,
                     [in] Boolean includeDeviceName);

                 interface IAdvertiseData;
                 interface IParcelable;
             }

             class CAdvertiseSettings {
                constructor(
                    [in] IParcel* parcel);

                constructor(
                    [in] Int32 advertiseMode,
                    [in] Int32 advertiseTxPowerLevel,
                    [in] Boolean advertiseConnectable,
                    [in] Int32 advertiseTimeout);

                interface IAdvertiseSettings;
                interface IParcelable;
             }

             class CBluetoothLeAdvertiser {
                constructor(
                    [in] IIBluetoothManager* bluetoothManager);

                interface IBluetoothLeAdvertiser;
             }

             class CBluetoothLeScanner {
                constructor(
                    [in] IIBluetoothManager* bluetoothManager);

                interface IBluetoothLeScanner;
             }

             class CResultStorageDescriptor {
                constructor(
                    [in] IParcel* source);

                constructor(
                    [in] Int32 type,
                    [in] Int32 offset,
                    [in] Int32 length);

                interface IResultStorageDescriptor;
                interface IParcelable;
             }

             class CScanFilter {
                constructor(
                    [in] IParcel* source);

                interface IScanFilter;
                interface IParcelable;
             }

             singleton class CScanRecordHelper {
                interface IScanRecordHelper;
             }

             class CScanResult {
                constructor(
                    [in] IParcel* source);

                constructor(
                    [in] IBluetoothDevice* device,
                    [in] IScanRecord* scanRecord,
                    [in] Int32 rssi,
                    [in] Int64 timestampNanos);

                interface IScanResult;
                interface IParcelable;
             }

             class CScanSettings {
                constructor(
                    [in] IParcel* source);

                constructor(
                    [in] Int32 scanMode,
                    [in] Int32 callbackType,
                    [in] Int32 scanResultType,
                    [in] Int64 reportDelayMillis);

                interface IScanSettings;
                interface IParcelable;
             }

             class CTruncatedFilter {
                constructor(
                    [in] IScanFilter* filter,
                    [in] IList* storageDescriptors);

                interface ITruncatedFilter;
             }
         }

    } // Bluetooth
    } // Droid
    } // Elastos
}
