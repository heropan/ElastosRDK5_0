
module
{
    using interface Elastos.Security.Spec.IAlgorithmParameterSpec;
    using interface Elastosx.Security.Auth.X500.IX500Principal;
    using interface Elastos.Math.IBigInteger;
    using interface Elastos.Utility.IDate;

    interface Elastos.Droid.Keystore.Security.IKeyPairGeneratorSpec;
    interface Elastos.Droid.Content.IContext;

    namespace Elastos {
    namespace Droid {
    namespace Keystore {
    namespace Security {

    /**
     * Builder class for {@link KeyPairGeneratorSpec} objects.
     * <p>
     * This will build a parameter spec for use with the <a href="{@docRoot}
     * training/articles/keystore.html">Android KeyStore facility</a>.
     * <p>
     * The required fields must be filled in with the builder.
     * <p>
     * Example:
     *
     * <pre class="prettyprint">
     * Calendar start = new Calendar();
     * Calendar end = new Calendar();
     * end.add(1, Calendar.YEAR);
     *
     * KeyPairGeneratorSpec spec =
     *         new KeyPairGeneratorSpec.Builder(mContext).setAlias(&quot;myKey&quot;)
     *                 .setSubject(new X500Principal(&quot;CN=myKey&quot;)).setSerial(BigInteger.valueOf(1337))
     *                 .setStartDate(start.getTime()).setEndDate(end.getTime()).build();
     * </pre>
     */
    interface IKeyPairGeneratorSpecBuilder {
        /**
         * Sets the alias to be used to retrieve the key later from a
         * {@link java.security.KeyStore} instance using the
         * {@code AndroidKeyStore} provider.
         */
            SetAlias(
                [in] String alias);

        /**
         * Sets the key type (e.g., RSA, DSA, EC) of the keypair to be created.
         */
            SetKeyType(
                [in] String keyType);

        /**
         * Sets the key size for the keypair to be created. For instance, for a
         * key type of RSA this will set the modulus size and for a key type of
         * EC it will select a curve with a matching field size.
         */
            SetKeySize(
                [in] Int32 keySize);

        /**
         * Sets the underlying key type's parameters. This is required for DSA
         * where you must set this to an instance of
         * {@link java.security.spec.DSAParameterSpec}.
         */
            SetAlgorithmParameterSpec(
                [out] IAlgorithmParameterSpec** spec);

        /**
         * Sets the subject used for the self-signed certificate of the
         * generated key pair.
         */
            SetSubject(
                [in] IX500Principal* subject);

        /**
         * Sets the serial number used for the self-signed certificate of the
         * generated key pair.
         */
            SetSerialNumber(
                [out] IBigInteger** serialNumber);

        /**
         * Sets the start of the validity period for the self-signed certificate
         * of the generated key pair.
         */
            SetStartDate(
                [in] IDate* startDate);

        /**
         * Sets the end of the validity period for the self-signed certificate
         * of the generated key pair.
         */
            SetEndDate(
                [in] IDate* endDate);

        /**
         * Indicates that this key must be encrypted at rest on storage. Note
         * that enabling this will require that the user enable a strong lock
         * screen (e.g., PIN, password) before creating or using the generated
         * key is successful.
         */
            SetEncryptionRequired();

        /**
         * Builds the instance of the {@code KeyPairGeneratorSpec}.
         *
         * @throws IllegalArgumentException if a required field is missing
         * @return built instance of {@code KeyPairGeneratorSpec}
         */
            Build(
                [out] IKeyPairGeneratorSpec** spec);
    }

    /**
     * This provides the required parameters needed for initializing the
     * {@code KeyPairGenerator} that works with
     * <a href="{@docRoot}training/articles/keystore.html">Android KeyStore
     * facility</a>. The Android KeyStore facility is accessed through a
     * {@link java.security.KeyPairGenerator} API using the {@code AndroidKeyStore}
     * provider. The {@code context} passed in may be used to pop up some UI to ask
     * the user to unlock or initialize the Android KeyStore facility.
     * <p>
     * After generation, the {@code keyStoreAlias} is used with the
     * {@link java.security.KeyStore#getEntry(String, java.security.KeyStore.ProtectionParameter)}
     * interface to retrieve the {@link PrivateKey} and its associated
     * {@link Certificate} chain.
     * <p>
     * The KeyPair generator will create a self-signed certificate with the subject
     * as its X.509v3 Subject Distinguished Name and as its X.509v3 Issuer
     * Distinguished Name along with the other parameters specified with the
     * {@link Builder}.
     * <p>
     * The self-signed X.509 certificate may be replaced at a later time by a
     * certificate signed by a real Certificate Authority.
     *
     * @Involve
     * interface Elastos.Security.Spec.IAlgorithmParameterSpec
     */
    interface IKeyPairGeneratorSpec {
    /**
     * Gets the Android context used for operations with this instance.
     */
        GetContext(
            [out] IContext** context);

    /**
     * Returns the alias that will be used in the {@code java.security.KeyStore}
     * in conjunction with the {@code AndroidKeyStore}.
     */
        GetKeystoreAlias(
            [out] String* alias);

    /**
     * Returns the key type (e.g., "RSA", "DSA", "EC") specified by this
     * parameter.
     */
        GetKeyType(
            [out] String* key);

    /**
     * Returns the key size specified by this parameter. For instance, for RSA
     * this will return the modulus size and for EC it will return the field
     * size.
     */
        GetKeySize(
            [out] Int32* size);

    /**
     * Returns the {@link AlgorithmParameterSpec} that will be used for creation
     * of the key pair.
     */
        GetAlgorithmParameterSpec(
            [out] IAlgorithmParameterSpec** spec);

    /**
     * Gets the subject distinguished name to be used on the X.509 certificate
     * that will be put in the {@link java.security.KeyStore}.
     */
        GetSubjectDN(
            [out] IX500Principal** principal);

    /**
     * Gets the serial number to be used on the X.509 certificate that will be
     * put in the {@link java.security.KeyStore}.
     */
        GetSerialNumber(
            [out] IBigInteger** number);

    /**
     * Gets the start date to be used on the X.509 certificate that will be put
     * in the {@link java.security.KeyStore}.
     */
        GetStartDate(
            [out] IDate** date);

    /**
     * Gets the end date to be used on the X.509 certificate that will be put in
     * the {@link java.security.KeyStore}.
     */
        GetEndDate(
            [out] IDate** date);

    /**
     * @hide
     */
        GetFlags(
            [out] Int32* flags);

    /**
     * Returns {@code true} if this parameter will require generated keys to be
     * encrypted in the {@link java.security.KeyStore}.
     */
        IsEncryptionRequired(
            [out] Boolean* required);
    }

    }// namespace Security
    }// namespace Keystore
    }// namespace Droid
    }// namespace Elastos

}

