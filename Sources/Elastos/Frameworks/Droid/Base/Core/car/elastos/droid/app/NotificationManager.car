module
{
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.App.INotification;
    interface Elastos.Droid.App.INotificationManager;
    interface Elastos.Droid.App.IINotificationManager;
    interface Elastos.Droid.Os.IUserHandle;

    namespace Elastos {
    namespace Droid {
    namespace App {

    /**
     * Class to notify the user of events that happen.  This is how you tell
     * the user that something has happened in the background. {@more}
     *
     * Notifications can take different forms:
     * <ul>
     *      <li>A persistent icon that goes in the status bar and is accessible
     *          through the launcher, (when the user selects it, a designated Intent
     *          can be launched),</li>
     *      <li>Turning on or flashing LEDs on the device, or</li>
     *      <li>Alerting the user by flashing the backlight, playing a sound,
     *          or vibrating.</li>
     * </ul>
     *
     * <p>
     * Each of the notify methods takes an int id parameter and optionally a
     * {@link String} tag parameter, which may be {@code null}.  These parameters
     * are used to form a pair (tag, id), or ({@code null}, id) if tag is
     * unspecified.  This pair identifies this notification from your app to the
     * system, so that pair should be unique within your app.  If you call one
     * of the notify methods with a (tag, id) pair that is currently active and
     * a new set of notification parameters, it will be updated.  For example,
     * if you pass a new status bar icon, the old icon in the status bar will
     * be replaced with the new one.  This is also the same tag and id you pass
     * to the {@link #cancel(int)} or {@link #cancel(String, int)} method to clear
     * this notification.
     *
     * <p>
     * You do not instantiate this class directly; instead, retrieve it through
     * {@link android.content.Context#getSystemService}.
     *
     * <div class="special reference">
     * <h3>Developer Guides</h3>
     * <p>For a guide to creating notifications, read the
     * <a href="{@docRoot}guide/topics/ui/notifiers/notifications.html">Status Bar Notifications</a>
     * developer guide.</p>
     * </div>
     *
     * @see android.app.Notification
     * @see android.content.Context#getSystemService
     */
    interface INotificationManager {

        /**
         * Intent that is broadcast when the state of {@link #getEffectsSuppressor()} changes.
         * This broadcast is only sent to registered receivers.
         *
         * @hide
         */
        // @SdkConstant(SdkConstant.SdkConstantType.BROADCAST_INTENT_ACTION)
        const String ACTION_EFFECTS_SUPPRESSOR_CHANGED = "android.os.action.ACTION_EFFECTS_SUPPRESSOR_CHANGED";

        /**
         * Post a notification to be shown in the status bar. If a notification with
         * the same id has already been posted by your application and has not yet been canceled, it
         * will be replaced by the updated information.
         *
         * @param id An identifier for this notification unique within your
         *        application.
         * @param notification A Notification object describing what to show the user. Must not
         *        be null.
         *
         * @sa Notification
         */
        Notify(
            [in] Int32 id,
            [in] INotification* notification);

        /**
         * Post a notification to be shown in the status bar. If a notification with
         * the same tag and id has already been posted by your application and has not yet been
         * canceled, it will be replaced by the updated information.
         *
         * @param tag A string identifier for this notification.  May be {@code null}.
         * @param id An identifier for this notification.  The pair (tag, id) must be unique
         *        within your application.
         * @param notification A Notification object describing what to
         *        show the user. Must not be null.
         *
         * @sa Notification
         */
        Notify(
            [in] String tag,
            [in] Int32 id,
            [in] INotification* notification);

        /**
         * @hide
         */
        NotifyAsUser(
            [in] String tag,
            [in] Int32 id,
            [in] INotification* notification,
            [in] IUserHandle* user);

        /**
         * Cancel a previously shown notification.  If it's transient, the view
         * will be hidden.  If it's persistent, it will be removed from the status
         * bar.
         */
        Cancel(
            [in] Int32 id);

        /**
         * Cancel a previously shown notification.  If it's transient, the view
         * will be hidden.  If it's persistent, it will be removed from the status
         * bar.
         */
        Cancel(
            [in] String tag,
            [in] Int32 id);

        /**
         * @hide
         */
        CancelAsUser(
            [in] String tag,
            [in] Int32 id,
            [in] IUserHandle* user);

        /**
         * Cancel all previously shown notifications. See #cancel for the
         * detailed behavior.
         *
         * @sa #cancel
         */
        CancelAll();
    }

    interface INotificationManagerHelper {
        /** @hide */
        GetService(
            [out] IINotificationManager** mgr);

        /** @hide */
        From(
            [in] IContext* ctx,
            [out] INotificationManager** mgr);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
