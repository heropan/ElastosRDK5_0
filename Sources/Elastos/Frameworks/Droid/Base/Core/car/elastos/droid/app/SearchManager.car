module
{
    using interface Elastos.Utility.IList;

    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Database.ICursor;
    interface Elastos.Droid.App.ISearchableInfo;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Content.IComponentName;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Graphics.IRect;

    namespace Elastos {
    namespace Droid {
    namespace App {

    interface ISearchManagerOnCancelListener;
    interface ISearchManagerOnDismissListener;

    /**
     * This class provides access to the system search services.
     *
     * <p>In practice, you won't interact with this class directly, as search
     * services are provided through methods in {@link android.app.Activity Activity}
     * and the {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH}
     * {@link android.content.Intent Intent}.
     * If you do require direct access to the SearchManager, do not instantiate
     * this class directly. Instead, retrieve it through
     * {@link android.content.Context#getSystemService
     * context.getSystemService(Context.SEARCH_SERVICE)}.
     *
     * <div class="special reference">
     * <h3>Developer Guides</h3>
     * <p>For more information about using the search dialog and adding search
     * suggestions in your application, read the
     * <a href="{@docRoot}guide/topics/search/index.html">Search</a> developer guide.</p>
     * </div>
     */
    /**
     * @Invovle
     * interface IDialogInterfaceOnDismissListener
     * interface IDialogInterfaceOnCancelListener
     */
    [local]
    interface ISearchManager {
        /**
         * This is a shortcut definition for the default menu key to use for invoking search.
         *
         * See Menu.Item.setAlphabeticShortcut() for more information.
         */
        const Char32 MENU_KEY = 's';

        /**
         * This is a shortcut definition for the default menu key to use for invoking search.
         *
         * See Menu.Item.setAlphabeticShortcut() for more information.
         */
        const Int32 MENU_KEYCODE = 47;//KeyEvent.KEYCODE_S;

        /**
         * Intent extra data key: Use this key with
         * {@link android.content.Intent#getStringExtra
         *  content.Intent.getStringExtra()}
         * to obtain the query string from Intent.ACTION_SEARCH.
         */
        const String QUERY = "query";

        /**
         * Intent extra data key: Use this key with
         * {@link android.content.Intent#getStringExtra
         *  content.Intent.getStringExtra()}
         * to obtain the query string typed in by the user.
         * This may be different from the value of {@link #QUERY}
         * if the intent is the result of selecting a suggestion.
         * In that case, {@link #QUERY} will contain the value of
         * {@link #SUGGEST_COLUMN_QUERY} for the suggestion, and
         * {@link #USER_QUERY} will contain the string typed by the
         * user.
         */
        const String USER_QUERY = "user_query";

        /**
         * Intent extra data key: Use this key with Intent.ACTION_SEARCH and
         * {@link android.content.Intent#getBundleExtra
         *  content.Intent.getBundleExtra()}
         * to obtain any additional app-specific data that was inserted by the
         * activity that launched the search.
         */
        const String APP_DATA = "app_data";

        /**
         * Intent extra data key: Use {@link android.content.Intent#getBundleExtra
         * content.Intent.getBundleExtra(SEARCH_MODE)} to get the search mode used
         * to launch the intent.
         * The only current value for this is {@link #MODE_GLOBAL_SEARCH_SUGGESTION}.
         *
         * @hide
         */
        const String SEARCH_MODE = "search_mode";

        /**
         * Intent extra data key: Use this key with Intent.ACTION_SEARCH and
         * {@link android.content.Intent#getIntExtra content.Intent.getIntExtra()}
         * to obtain the keycode that the user used to trigger this query.  It will be zero if the
         * user simply pressed the "GO" button on the search UI.  This is primarily used in conjunction
         * with the keycode attribute in the actionkey element of your searchable.xml configuration
         * file.
         */
        const String ACTION_KEY = "action_key";

        /**
         * Intent extra data key: This key will be used for the extra populated by the
         * {@link #SUGGEST_COLUMN_INTENT_EXTRA_DATA} column.
         */
        const String EXTRA_DATA_KEY = "intent_extra_data_key";

        /**
         * Boolean extra data key for {@link #INTENT_ACTION_GLOBAL_SEARCH} intents. If {@code true},
         * the initial query should be selected when the global search activity is started, so
         * that the user can easily replace it with another query.
         */
        const String EXTRA_SELECT_QUERY = "select_query";

        /**
         * Boolean extra data key for {@link Intent#ACTION_WEB_SEARCH} intents.  If {@code true},
         * this search should open a new browser window, rather than using an existing one.
         */
        const String EXTRA_NEW_SEARCH = "new_search";

        /**
         * Extra data key for {@link Intent#ACTION_WEB_SEARCH}. If set, the value must be a
         * {@link PendingIntent}. The search activity handling the {@link Intent#ACTION_WEB_SEARCH}
         * intent will fill in and launch the pending intent. The data URI will be filled in with an
         * http or https URI, and {@link android.provider.Browser#EXTRA_HEADERS} may be filled in.
         */
        const String EXTRA_WEB_SEARCH_PENDINGINTENT = "web_search_pendingintent";

        /**
         * Boolean extra data key for a suggestion provider to return in {@link Cursor#getExtras} to
         * indicate that the search is not complete yet. This can be used by the search UI
         * to indicate that a search is in progress. The suggestion provider can return partial results
         * this way and send a change notification on the cursor when more results are available.
         */
        const String CURSOR_EXTRA_KEY_IN_PROGRESS = "in_progress";

        /**
         * Intent extra data key: Use this key with Intent.ACTION_SEARCH and
         * {@link android.content.Intent#getStringExtra content.Intent.getStringExtra()}
         * to obtain the action message that was defined for a particular search action key and/or
         * suggestion.  It will be null if the search was launched by typing "enter", touched the the
         * "GO" button, or other means not involving any action key.
         */
        const String ACTION_MSG = "action_msg";

        /**
         * Flag to specify that the entry can be used for query refinement, i.e., the query text
         * in the search field can be replaced with the text in this entry, when a query refinement
         * icon is clicked. The suggestion list should show such a clickable icon beside the entry.
         * <p>Use this flag as a bit-field for {@link #SUGGEST_COLUMN_FLAGS}.
         */
        const Int32 FLAG_QUERY_REFINEMENT = 1 << 0;

        /**
         * Uri path for queried suggestions data.  This is the path that the search manager
         * will use when querying your content provider for suggestions data based on user input
         * (e.g. looking for partial matches).
         * Typically you'll use this with a URI matcher.
         */
        const String SUGGEST_URI_PATH_QUERY = "search_suggest_query";

        /**
         * MIME type for suggestions data.  You'll use this in your suggestions content provider
         * in the getType() function.
         */
        const String SUGGEST_MIME_TYPE =
                "vnd.android.cursor.dir/vnd.android.search.suggest";

        /**
         * Uri path for shortcut validation.  This is the path that the search manager will use when
         * querying your content provider to refresh a shortcutted suggestion result and to check if it
         * is still valid.  When asked, a source may return an up to date result, or no result.  No
         * result indicates the shortcut refers to a no longer valid sugggestion.
         *
         * @see #SUGGEST_COLUMN_SHORTCUT_ID
         */
        const String SUGGEST_URI_PATH_SHORTCUT = "search_suggest_shortcut";

        /**
         * MIME type for shortcut validation.  You'll use this in your suggestions content provider
         * in the getType() function.
         */
        const String SHORTCUT_MIME_TYPE =
                "vnd.android.cursor.item/vnd.android.search.suggest";

        /**
         * Column name for suggestions cursor.  <i>Unused - can be null or column can be omitted.</i>
         */
        const String SUGGEST_COLUMN_FORMAT = "suggest_format";
        /**
         * Column name for suggestions cursor.  <i>Required.</i>  This is the primary line of text that
         * will be presented to the user as the suggestion.
         */
        const String SUGGEST_COLUMN_TEXT_1 = "suggest_text_1";
        /**
         * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
         *  then all suggestions will be provided in a two-line format.  The second line of text is in
         *  a much smaller appearance.
         */
        const String SUGGEST_COLUMN_TEXT_2 = "suggest_text_2";

        /**
         * Column name for suggestions cursor.  <i>Optional.</i> This is a URL that will be shown
         * as the second line of text instead of {@link #SUGGEST_COLUMN_TEXT_2}. This is a separate
         * column so that the search UI knows to display the text as a URL, e.g. by using a different
         * color. If this column is absent, or has the value {@code null},
         * {@link #SUGGEST_COLUMN_TEXT_2} will be used instead.
         */
        const String SUGGEST_COLUMN_TEXT_2_URL = "suggest_text_2_url";

        /**
         * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
         *  then all suggestions will be provided in a format that includes space for two small icons,
         *  one at the left and one at the right of each suggestion.  The data in the column must
         *  be a resource ID of a drawable, or a URI in one of the following formats:
         *
         * <ul>
         * <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li>
         * <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE})</li>
         * <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li>
         * </ul>
         *
         * See {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}
         * for more information on these schemes.
         */
        const String SUGGEST_COLUMN_ICON_1 = "suggest_icon_1";

        /**
         * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
         *  then all suggestions will be provided in a format that includes space for two small icons,
         *  one at the left and one at the right of each suggestion.  The data in the column must
         *  be a resource ID of a drawable, or a URI in one of the following formats:
         *
         * <ul>
         * <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li>
         * <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE})</li>
         * <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li>
         * </ul>
         *
         * See {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}
         * for more information on these schemes.
         */
        const String SUGGEST_COLUMN_ICON_2 = "suggest_icon_2";

        /**
         * Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
         * then the image will be displayed when forming the suggestion. The suggested dimension for
         * the image is 270x400 px for portrait mode and 400x225 px for landscape mode. The data in the
         * column must be a resource ID of a drawable, or a URI in one of the following formats:
         *
         * <ul>
         * <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li>
         * <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE})</li>
         * <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li>
         * </ul>
         *
         * See {@link android.content.ContentResolver#openAssetFileDescriptor(Uri, String)}
         * for more information on these schemes.
         */
        const String SUGGEST_COLUMN_RESULT_CARD_IMAGE = "suggest_result_card_image";

        /**
         * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
         * this element exists at the given row, this is the action that will be used when
         * forming the suggestion's intent.  If the element is not provided, the action will be taken
         * from the android:searchSuggestIntentAction field in your XML metadata.  <i>At least one of
         * these must be present for the suggestion to generate an intent.</i>  Note:  If your action is
         * the same for all suggestions, it is more efficient to specify it using XML metadata and omit
         * it from the cursor.
         */
        const String SUGGEST_COLUMN_INTENT_ACTION = "suggest_intent_action";

        /**
         * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
         * this element exists at the given row, this is the data that will be used when
         * forming the suggestion's intent.  If the element is not provided, the data will be taken
         * from the android:searchSuggestIntentData field in your XML metadata.  If neither source
         * is provided, the Intent's data field will be null.  Note:  If your data is
         * the same for all suggestions, or can be described using a constant part and a specific ID,
         * it is more efficient to specify it using XML metadata and omit it from the cursor.
         */
        const String SUGGEST_COLUMN_INTENT_DATA = "suggest_intent_data";

        /**
         * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
         * this element exists at the given row, this is the data that will be used when
         * forming the suggestion's intent. If not provided, the Intent's extra data field will be null.
         * This column allows suggestions to provide additional arbitrary data which will be included as
         * an extra under the key {@link #EXTRA_DATA_KEY}.
         */
        const String SUGGEST_COLUMN_INTENT_EXTRA_DATA = "suggest_intent_extra_data";

        /**
         * Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
         * this element exists at the given row, then "/" and this value will be appended to the data
         * field in the Intent.  This should only be used if the data field has already been set to an
         * appropriate base string.
         */
        const String SUGGEST_COLUMN_INTENT_DATA_ID = "suggest_intent_data_id";

        /**
         * Column name for suggestions cursor.  <i>Required if action is
         * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH}, optional otherwise.</i>  If this
         * column exists <i>and</i> this element exists at the given row, this is the data that will be
         * used when forming the suggestion's query.
         */
        const String SUGGEST_COLUMN_QUERY = "suggest_intent_query";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  This column is used to indicate whether
         * a search suggestion should be stored as a shortcut, and whether it should be refreshed.  If
         * missing, the result will be stored as a shortcut and never validated.  If set to
         * {@link #SUGGEST_NEVER_MAKE_SHORTCUT}, the result will not be stored as a shortcut.
         * Otherwise, the shortcut id will be used to check back for an up to date suggestion using
         * {@link #SUGGEST_URI_PATH_SHORTCUT}.
         */
        const String SUGGEST_COLUMN_SHORTCUT_ID = "suggest_shortcut_id";

        /**
         * Column name for suggestions cursor. <i>Optional.</i> This column is used to specify
         * that a spinner should be shown in lieu of an icon2 while the shortcut of this suggestion
         * is being refreshed.
         */
        const String SUGGEST_COLUMN_SPINNER_WHILE_REFRESHING =
                "suggest_spinner_while_refreshing";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content is media type, you
         * should provide this column so search app could understand more about your content. The data
         * in the column must specify the MIME type of the content.
         */
        const String SUGGEST_COLUMN_CONTENT_TYPE = "suggest_content_type";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content is media type, you
         * should provide this column to specify whether your content is live media such as live video
         * or live audio. The value in the column is of integer type with value of either 0 indicating
         * non-live content or 1 indicating live content.
         */
        const String SUGGEST_COLUMN_IS_LIVE = "suggest_is_live";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content is video, you should
         * provide this column to specify the number of vertical lines. The data in the column is of
         * integer type.
         */
        const String SUGGEST_COLUMN_VIDEO_WIDTH = "suggest_video_width";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content is video, you should
         * provide this column to specify the number of horizontal lines. The data in the column is of
         * integer type.
         */
        const String SUGGEST_COLUMN_VIDEO_HEIGHT = "suggest_video_height";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content contains audio, you
         * should provide this column to specify the audio channel configuration. The data in the
         * column is string with format like "channels.subchannels" such as "1.0" or "5.1".
         */
        const String SUGGEST_COLUMN_AUDIO_CHANNEL_CONFIG = "suggest_audio_channel_config";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content is purchasable, you
         * should provide this column to specify the displayable string representation of the purchase
         * price of your content including the currency and the amount. If it's free, you should
         * provide localized string to specify that it's free. This column can be omitted if the content
         * is not applicable to purchase.
         */
        const String SUGGEST_COLUMN_PURCHASE_PRICE = "suggest_purchase_price";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content is rentable, you
         * should provide this column to specify the displayable string representation of the rental
         * price of your content including the currency and the amount. If it's free, you should
         * provide localized string to specify that it's free. This column can be ommitted if the
         * content is not applicable to rent.
         */
        const String SUGGEST_COLUMN_RENTAL_PRICE = "suggest_rental_price";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content has a rating, you
         * should provide this column to specify the rating style of your content. The data in the
         * column must be one of the constant values specified in {@link android.media.Rating}
         */
        const String SUGGEST_COLUMN_RATING_STYLE = "suggest_rating_style";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content has a rating, you
         * should provide this column to specify the rating score of your content. The data in the
         * column is of float type. See {@link android.media.Rating} about valid rating scores for each
         * rating style.
         */
        const String SUGGEST_COLUMN_RATING_SCORE = "suggest_rating_score";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content is video or audio and
         * has a known production year, you should provide this column to specify the production year
         * of your content. The data in the column is of integer type.
         */
        const String SUGGEST_COLUMN_PRODUCTION_YEAR = "suggest_production_year";

        /**
         * Column name for suggestions cursor. <i>Optional.</i>  If your content is video or audio, you
         * should provide this column to specify the duration of your content in milliseconds. The data
         * in the column is of long type.
         */
        const String SUGGEST_COLUMN_DURATION = "suggest_duration";

        /**
         * Column name for suggestions cursor. <i>Optional.</i> This column is used to specify
         * additional flags per item. Multiple flags can be specified.
         * <p>
         * Must be one of {@link #FLAG_QUERY_REFINEMENT} or 0 to indicate no flags.
         * </p>
         */
        const String SUGGEST_COLUMN_FLAGS = "suggest_flags";

        /**
         * Column name for suggestions cursor. <i>Optional.</i> This column may be
         * used to specify the time in {@link System#currentTimeMillis
         * System.currentTImeMillis()} (wall time in UTC) when an item was last
         * accessed within the results-providing application. If set, this may be
         * used to show more-recently-used items first.
         */
        const String SUGGEST_COLUMN_LAST_ACCESS_HINT = "suggest_last_access_hint";

        /**
         * Column value for suggestion column {@link #SUGGEST_COLUMN_SHORTCUT_ID} when a suggestion
         * should not be stored as a shortcut in global search.
         */
        const String SUGGEST_NEVER_MAKE_SHORTCUT = "_-1";

        /**
         * Query parameter added to suggestion queries to limit the number of suggestions returned.
         * This limit is only advisory and suggestion providers may chose to ignore it.
         */
        const String SUGGEST_PARAMETER_LIMIT = "limit";

        /**
         * Intent action for starting the global search activity.
         * The global search provider should handle this intent.
         *
         * Supported extra data keys: {@link #QUERY},
         * {@link #EXTRA_SELECT_QUERY},
         * {@link #APP_DATA}.
         */
        const String INTENT_ACTION_GLOBAL_SEARCH
                = "android.search.action.GLOBAL_SEARCH";

        /**
         * Intent action for starting the global search settings activity.
         * The global search provider should handle this intent.
         */
        const String INTENT_ACTION_SEARCH_SETTINGS
                = "android.search.action.SEARCH_SETTINGS";

        /**
         * Intent action for starting a web search provider's settings activity.
         * Web search providers should handle this intent if they have provider-specific
         * settings to implement.
         */
        const String INTENT_ACTION_WEB_SEARCH_SETTINGS
                = "android.search.action.WEB_SEARCH_SETTINGS";

        /**
         * Intent action broadcasted to inform that the searchables list or default have changed.
         * Components should handle this intent if they cache any searchable data and wish to stay
         * up to date on changes.
         */
        const String INTENT_ACTION_SEARCHABLES_CHANGED
                = "android.search.action.SEARCHABLES_CHANGED";

        /**
         * Intent action to be broadcast to inform that the global search provider
         * has changed.
         */
        const String INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED
                = "android.search.action.GLOBAL_SEARCH_ACTIVITY_CHANGED";

        /**
         * Intent action broadcasted to inform that the search settings have changed in some way.
         * Either searchables have been enabled or disabled, or a different web search provider
         * has been chosen.
         */
        const String INTENT_ACTION_SEARCH_SETTINGS_CHANGED
                = "android.search.action.SETTINGS_CHANGED";

        /**
         * This means that context is voice, and therefore the SearchDialog should
         * continue showing the microphone until the user indicates that he/she does
         * not want to re-speak (e.g. by typing).
         *
         * @hide
         */
        const String CONTEXT_IS_VOICE = "android.search.CONTEXT_IS_VOICE";

        /**
         * This means that the voice icon should not be shown at all, because the
         * current search engine does not support voice search.
         * @hide
         */
        const String DISABLE_VOICE_SEARCH
                = "android.search.DISABLE_VOICE_SEARCH";

        /**
         * Launch search UI.
         *
         * <p>The search manager will open a search widget in an overlapping
         * window, and the underlying activity may be obscured.  The search
         * entry state will remain in effect until one of the following events:
         * <ul>
         * <li>The user completes the search.  In most cases this will launch
         * a search intent.</li>
         * <li>The user uses the back, home, or other keys to exit the search.</li>
         * <li>The application calls the #stopSearch
         * method, which will hide the search window and return focus to the
         * activity from which it was launched.</li>
         *
         * @sa #stopSearch
         *
         * <p>Most applications will <i>not</i> use this interface to invoke search.
         * The primary method for invoking search is to call
         * android.app.Activity#onSearchRequested Activity.onSearchRequested() or
         * android.app.Activity#startSearch Activity.startSearch().
         *
         * @sa android.app.Activity#onSearchRequested Activity.onSearchRequested()
         * @sa android.app.Activity#startSearch Activity.startSearch()
         *
         * @param initialQuery A search string can be pre-entered here, but this
         * is typically null or empty.
         * @param selectInitialQuery If true, the intial query will be preselected, which means that
         * any further typing will replace it.  This is useful for cases where an entire pre-formed
         * query is being inserted.  If false, the selection point will be placed at the end of the
         * inserted query.  This is useful when the inserted query is text that the user entered,
         * and the user would expect to be able to keep typing.  <i>This parameter is only meaningful
         * if initialQuery is a non-empty string.</i>
         * @param launchActivity The ComponentName of the activity that has launched this search.
         * @param appSearchData An application can insert application-specific
         * context here, in order to improve quality or specificity of its own
         * searches.  This data will be returned with SEARCH intent(s).  Null if
         * no extra data is required.
         * @param globalSearch If false, this will only launch the search that has been specifically
         * defined by the application (which is usually defined as a local search).  If no default
         * search is defined in the current application or activity, global search will be launched.
         * If true, this will always launch a platform-global (e.g. web-based) search instead.
         *
         * @see android.app.Activity#onSearchRequested
         * @see #stopSearch
         */
        StartSearch(
            [in] String initialQuery,
            [in] Boolean selectInitialQuery,
            [in] IComponentName* launchActivity,
            [in] IBundle* appSearchData,
            [in] Boolean globalSearch);

        /**
         * As #startSearch(String, boolean, ComponentName, Bundle, boolean) but including
         * source bounds for the global search intent.
         *
         * @sa #startSearch(String, boolean, ComponentName, Bundle, boolean)
         *
         * @hide
         */
        StartSearch(
            [in] String initialQuery,
            [in] Boolean selectInitialQuery,
            [in] IComponentName* launchActivity,
            [in] IBundle* appSearchData,
            [in] Boolean globalSearch,
            [in] IRect* sourceBounds);

        /**
         * Returns a list of installed apps that handle the global search
         * intent.
         *
         * @hide
         */
        GetGlobalSearchActivities(
            [out] IList** apps);

        /**
         * Gets the name of the global search activity.
         */
        GetGlobalSearchActivity(
            [out] IComponentName** name);

        /**
         * Gets the name of the web search activity.
         *
         * @return The name of the default activity for web searches. This activity
         *         can be used to get web search suggestions. Returns {null} if
         *         there is no default web search activity.
         *
         * @hide
         */
        GetWebSearchActivity(
            [out] IComponentName** name);

        /**
         * Similar to #startSearch but actually fires off the search query after invoking
         * the search dialog.  Made available for testing purposes.
         *
         * @sa #startSearch
         *
         * @param query The query to trigger.  If empty, request will be ignored.
         * @param launchActivity The ComponentName of the activity that has launched this search.
         * @param appSearchData An application can insert application-specific
         * context here, in order to improve quality or specificity of its own
         * searches.  This data will be returned with SEARCH intent(s).  Null if
         * no extra data is required.
         *
         * @see #startSearch
         */
        TriggerSearch(
            [in] String query,
            [in] IComponentName* launchActivity,
            [in] IBundle* appSearchData);

        /**
         * Terminate search UI.
         *
         * <p>Typically the user will terminate the search UI by launching a
         * search or by canceling.  This function allows the underlying application
         * or activity to cancel the search prematurely (for any reason).
         *
         * <p>This function can be safely called at any time (even if no search is active.)
         *
         * @see #startSearch
         */
        StopSearch();

        /**
         * Determine if the Search UI is currently displayed.
         *
         * This is provided primarily for application test purposes.
         *
         * @return Returns true if the search UI is currently displayed.
         *
         * @hide
         */
        IsVisible(
            [out] Boolean* visible);

        /**
         * Set or clear the callback that will be invoked whenever the search UI is dismissed.
         *
         * @param listener The OnDismissListener to use, or null.
         *
         * @sa OnDismissListener
         */
        SetOnDismissListener(
            [in] ISearchManagerOnDismissListener* listener);

        /**
         * Set or clear the callback that will be invoked whenever the search UI is canceled.
         *
         * @param listener The OnCancelListener to use, or null.
         *
         * @sa OnCancelListener
         */
        SetOnCancelListener(
            [in] ISearchManagerOnCancelListener* listener);

        /**
         * Gets information about a searchable activity.
         *
         * @param componentName The activity to get searchable information for.
         * @return Searchable information, or <code>null</code> if the activity does not
         *         exist, or is not searchable.
         */
        GetSearchableInfo(
            [in] IComponentName* componentName,
            [out] ISearchableInfo** info);

        /**
         * Gets a cursor with search suggestions.
         *
         * @param searchable Information about how to get the suggestions.
         * @param query The search text entered (so far).
         * @return a cursor with suggestions, or <code>null</null> the suggestion query failed.
         *
         * @hide because SearchableInfo is not part of the API.
         */
        GetSuggestions(
            [in] ISearchableInfo* searchable,
            [in] String query,
            [out] ICursor** cursor);

        /**
         * Gets a cursor with search suggestions.
         *
         * @param searchable Information about how to get the suggestions.
         * @param query The search text entered (so far).
         * @param limit The query limit to pass to the suggestion provider. This is advisory,
         *        the returned cursor may contain more rows. Pass {-1} for no limit.
         * @return a cursor with suggestions, or <code>null</null> the suggestion query failed.
         *
         * @hide because SearchableInfo is not part of the API.
         */
        GetSuggestions(
            [in] ISearchableInfo* searchable,
            [in] String query,
            [in] Int32 limit,
            [out] ICursor** cursor);

        /**
         * Returns a list of the searchable activities that can be included in global search.
         *
         * @return a list containing searchable information for all searchable activities
         *         that have the <code>android:includeInGlobalSearch</code> attribute set
         *         in their searchable meta-data.
         */
        GetSearchablesInGlobalSearch(
            [out] IList** info);

        /**
         * Gets an intent for launching installed assistant activity, or null if not available.
         * @return The assist intent.
         *
         * @hide
         */
        GetAssistIntent(
            [in] IContext* ctx,
            [in] Boolean inclContext,
            [out] IIntent** intent);

        /**
         * Gets an intent for launching installed assistant activity, or null if not available.
         * @return The assist intent.
         *
         * @hide
         */
        GetAssistIntent(
            [in] IContext* ctx,
            [in] Boolean inclContext,
            [in] Int32 userHandle,
            [out] IIntent** intent);

        /**
         * Launch an assist action for the current top activity.
         * @hide
         */
        LaunchAssistAction(
            [in] Int32 requestType,
            [in] String hint,
            [in] Int32 userHandle,
            [out] Boolean* result);
    }

    /**
     * See SearchManager#setOnDismissListener for configuring your activity to monitor
     * search UI state.
     *
     * @sa SearchManager#setOnDismissListener
     */
    interface ISearchManagerOnDismissListener {
        /**
         * This method will be called when the search UI is dismissed. To make use of it, you must
         * implement this method in your activity, and call
         * SearchManager#setOnDismissListener to register it.
         *
         * @sa SearchManager#setOnDismissListener
         */
        OnDismiss();
    }

    /**
     * See SearchManager#setOnCancelListener for configuring your activity to monitor
     * search UI state.
     *
     * @sa SearchManager#setOnCancelListener
     */
    interface ISearchManagerOnCancelListener {
        /**
         * This method will be called when the search UI is canceled. To make use if it, you must
         * implement this method in your activity, and call
         * SearchManager#setOnCancelListener to register it.
         *
         * @sa SearchManager#setOnCancelListener
         */
        OnCancel();
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
