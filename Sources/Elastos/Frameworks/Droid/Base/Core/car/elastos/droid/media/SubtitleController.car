
module
{
    interface Elastos.Droid.Os.ILooper;
    interface Elastos.Droid.Media.IMediaFormat;
    interface Elastos.Droid.Media.ISubtitleTrack;
    interface Elastos.Droid.Media.ISubtitleTrackRenderingWidget;

    namespace Elastos {
    namespace Droid {
    namespace Media {

    interface ISubtitleControllerListener {
        /**
         * Called when a subtitle track has been selected.
         *
         * @param track selected subtitle track or null
         * @hide
         */
        OnSubtitleTrackSelected(
            [in] ISubtitleTrack* track);
    }

    /**
     * Subtitle anchor, an object that is able to display a subtitle renderer,
     * e.g. a VideoView.
     */
    interface ISubtitleControllerAnchor {
        /**
         * Anchor should use the supplied subtitle rendering widget, or
         * none if it is null.
         * @hide
         */
        SetSubtitleWidget(
            [in] ISubtitleTrackRenderingWidget* subtitleWidget);

        /**
         * Anchors provide the looper on which all track visibility changes
         * (track.show/hide, setSubtitleWidget) will take place.
         * @hide
         */
        GetSubtitleLooper(
            [out] ILooper** result);
    }

    /**
     * Interface for supporting a single or multiple subtitle types in {@link
     * MediaPlayer}.
     */
    interface ISubtitleControllerRenderer {
        /**
         * Called by {@link MediaPlayer}'s {@link SubtitleController} when a new
         * subtitle track is detected, to see if it should use this object to
         * parse and display this subtitle track.
         *
         * @param format the format of the track that will include at least
         *               the MIME type {@link MediaFormat@KEY_MIME}.
         *
         * @return true if and only if the track format is supported by this
         * renderer
         */
        Supports(
            [in] IMediaFormat* format,
            [out] Boolean* result);

        /**
         * Called by {@link MediaPlayer}'s {@link SubtitleController} for each
         * subtitle track that was detected and is supported by this object to
         * create a {@link SubtitleTrack} object.  This object will be created
         * for each track that was found.  If the track is selected for display,
         * this object will be used to parse and display the track data.
         *
         * @param format the format of the track that will include at least
         *               the MIME type {@link MediaFormat@KEY_MIME}.
         * @return a {@link SubtitleTrack} object that will be used to parse
         * and render the subtitle track.
         */
        CreateTrack(
            [in] IMediaFormat* format,
            [out] ISubtitleTrack** result);
    }

    /**
     * The subtitle controller provides the architecture to display subtitles for a
     * media source.  It allows specifying which tracks to display, on which anchor
     * to display them, and also allows adding external, out-of-band subtitle tracks.
     *
     * @hide
     */
    interface ISubtitleController {
        /**
         * @return the available subtitle tracks for this media. These include
         * the tracks found by {@link MediaPlayer} as well as any tracks added
         * manually via {@link #addTrack}.
         */
        GetTracks(
            [out, callee] ArrayOf<ISubtitleTrack*>* result);

        /**
         * @return the currently selected subtitle track
         */
        GetSelectedTrack(
            [out] ISubtitleTrack** result);

        /**
         * Selects a subtitle track.  As a result, this track will receive
         * in-band data from the {@link MediaPlayer}.  However, this does
         * not change the subtitle visibility.
         *
         * Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper}
         *
         * @param track The subtitle track to select.  This must be one of the
         *              tracks in {@link #getTracks}.
         * @return true if the track was successfully selected.
         */
        SelectTrack(
            [in] ISubtitleTrack* track,
            [out] Boolean* result);

        /**
         * @return the default subtitle track based on system preferences, or null,
         * if no such track exists in this manager.
         *
         * Supports HLS-flags: AUTOSELECT, FORCED & DEFAULT.
         *
         * 1. If captioning is disabled, only consider FORCED tracks. Otherwise,
         * consider all tracks, but prefer non-FORCED ones.
         * 2. If user selected "Default" caption language:
         *   a. If there is a considered track with DEFAULT=yes, returns that track
         *      (favor the first one in the current language if there are more than
         *      one default tracks, or the first in general if none of them are in
         *      the current language).
         *   b. Otherwise, if there is a track with AUTOSELECT=yes in the current
         *      language, return that one.
         *   c. If there are no default tracks, and no autoselectable tracks in the
         *      current language, return null.
         * 3. If there is a track with the caption language, select that one.  Prefer
         * the one with AUTOSELECT=no.
         *
         * The default values for these flags are DEFAULT=no, AUTOSELECT=yes
         * and FORCED=no.
         */
        GetDefaultTrack(
            [out] ISubtitleTrack** result);

        /** @hide - should be called from anchor thread */
        SelectDefaultTrack();

        /** @hide - must be called from anchor thread */
        Reset();

        /**
         * Adds a new, external subtitle track to the manager.
         *
         * @param format the format of the track that will include at least
         *               the MIME type {@link MediaFormat@KEY_MIME}.
         * @return the created {@link SubtitleTrack} object
         */
        AddTrack(
            [in] IMediaFormat* format,
            [out] ISubtitleTrack** result);

        /**
         * Show the selected (or default) subtitle track.
         *
         * Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper}
         */
        Show();

        /**
         * Hide the selected (or default) subtitle track.
         *
         * Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper}
         */
        Hide();

        /**
         * Add support for a subtitle format in {@link MediaPlayer}.
         *
         * @param renderer a {@link SubtitleController.Renderer} object that adds
         *                 support for a subtitle format.
         */
        RegisterRenderer(
            [in] ISubtitleControllerRenderer* renderer);

        /** @hide */
        HasRendererFor(
            [in] IMediaFormat* format,
            [out] Boolean* result);

        /**
         *  @hide - called from anchor's looper (if any, both when unsetting and
         *  setting)
         */
        SetAnchor(
            [in] ISubtitleControllerAnchor* anchor);
    }

    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
