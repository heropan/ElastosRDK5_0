module {

    interface Elastos.Droid.Content.IContentResolver;
    interface Elastos.Droid.Content.IContentValues;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Graphics.IBitmapFactoryOptions;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Database.ICursor;
    interface Elastos.Droid.Widget.IImageView;

    using interface Elastos.IO.IInputStream;
    using interface Elastos.Core.ICharSequence;

    namespace Elastos {
    namespace Droid {
    namespace Provider {

    /**
     * The Contacts provider stores all information about contacts.
     *
     * @deprecated The APIs have been superseded by {@link ContactsContract}. The newer APIs allow
     * access multiple accounts and support aggregation of similar contacts. These APIs continue to
     * work but will only return data for the first Google account created, which matches the original
     * behavior.
     */
    //@Deprecated
    interface IContacts {
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String AUTHORITY = "contacts";

        /**
         * Signifies an email address row that is stored in the ContactMethods table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 KIND_EMAIL = 1;
        /**
         * Signifies a postal address row that is stored in the ContactMethods table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 KIND_POSTAL = 2;
        /**
         * Signifies an IM address row that is stored in the ContactMethods table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 KIND_IM = 3;
        /**
         * Signifies an Organization row that is stored in the Organizations table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 KIND_ORGANIZATION = 4;
        /**
         * Signifies a Phone row that is stored in the Phones table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 KIND_PHONE = 5;

        /**
         * The content:// style URL for this provider
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);
    }

    interface IContactsSettingsColumns {
        /**
         * The _SYNC_ACCOUNT to which this setting corresponds. This may be null.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SYNC_ACCOUNT = "_sync_account";

        /**
         * The _SYNC_ACCOUNT_TYPE to which this setting corresponds. This may be null.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SYNC_ACCOUNT_TYPE = "_sync_account_type";

        /**
         * The key of this setting.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String KEY = "key";

        /**
         * The value of this setting.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String VALUE = "value";
    }

    /**
     * @Involve
     * interface IBaseColumns;
     * interface ISettingsColumns;
     */
    interface IContactsSettings {

        /**
         * The directory twig for this sub-table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_DIRECTORY = "settings";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "key ASC";

        /**
         * A setting that is used to indicate if we should sync down all groups for the
         * specified account. For this setting the _SYNC_ACCOUNT column must be set.
         * If this isn't set then we will only sync the groups whose SHOULD_SYNC column
         * is set to true.
         * <p>
         * This is a boolean setting. It is true if it is set and it is anything other than the
         * emptry string or "0".
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SYNC_EVERYTHING = "syncEverything";

        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetSetting(
            [in] IContentResolver* cr,
            [in] String account,
            [in] String key,
            [out] String* setting);

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        SetSetting(
            [in] IContentResolver* cr,
            [in] String account,
            [in] String key,
            [in] String value);
    }

    interface IContactsPeopleColumns {
        /**
         * The person's name.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String NAME = "name";

        /**
         * Phonetic equivalent of the person's name, in a locale-dependent
         * character set (e.g. hiragana for Japanese).
         * Used for pronunciation and/or collation in some languages.
         * <p>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PHONETIC_NAME = "phonetic_name";

        /**
         * The display name. If name is not null name, else if number is not null number,
         * else if email is not null email.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DISPLAY_NAME = "display_name";

        /**
         * The field for sorting list phonetically. The content of this field
         * may not be human readable but phonetically sortable.
         * <P>Type: TEXT</p>
         * @hide Used only in Contacts application for now.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SORT_STRING = "sort_string";

        /**
         * Notes about the person.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String NOTES = "notes";

        /**
         * The number of times a person has been contacted
         * <P>Type: INTEGER</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String TIMES_CONTACTED = "times_contacted";

        /**
         * The last time a person was contacted.
         * <P>Type: INTEGER</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LAST_TIME_CONTACTED = "last_time_contacted";

        /**
         * A custom ringtone associated with a person. Not always present.
         * <P>Type: TEXT (URI to the ringtone)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CUSTOM_RINGTONE = "custom_ringtone";

        /**
         * Whether the person should always be sent to voicemail. Not always
         * present.
         * <P>Type: INTEGER (0 for false, 1 for true)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SEND_TO_VOICEMAIL = "send_to_voicemail";

        /**
         * Is the contact starred?
         * <P>Type: INTEGER (boolean)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String STARRED = "starred";

        /**
         * The server version of the photo
         * <P>Type: TEXT (the version number portion of the photo URI)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PHOTO_VERSION = "photo_version";
    }

    /**
     * @Involve
     * interface IBaseColumns;
     * interface ISyncConstValue;
     * interface IContactsPeopleColumns;
     * interface IContactsPhonesColumns;
     * interface IContactsPresenceColumns;
     *
     */
    [local, deprecated]
    interface IContactsPeople {
        /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of
         * people.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_TYPE = "vnd.android.cursor.dir/person";

        /**
         * The MIME type of a {@link #CONTENT_URI} subdirectory of a single
         * person.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/person";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        //const String DEFAULT_SORT_ORDER = fun:GetDEFAULTSORTORDER(/* [out] */ String* order);

        /**
         * The ID of the persons preferred phone number.
         * <P>Type: INTEGER (foreign key to phones table on the _ID field)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PRIMARY_PHONE_ID = "primary_phone";

        /**
         * The ID of the persons preferred email.
         * <P>Type: INTEGER (foreign key to contact_methods table on the
         * _ID field)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PRIMARY_EMAIL_ID = "primary_email";

        /**
         * The ID of the persons preferred organization.
         * <P>Type: INTEGER (foreign key to organizations table on the
         * _ID field)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PRIMARY_ORGANIZATION_ID = "primary_organization";

        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * The content:// style URL for filtering people by name. The filter
         * argument should be passed as an additional path segment after this URI.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_FILTER_URI(
            [out] IUri** uri);

        /**
         * The content:// style URL for the table that holds the deleted
         * contacts.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetDELETED_CONTENT_URI(
            [out] IUri** uri);

        /**
         * The content:// style URL for filtering people that have a specific
         * E-mail or IM address. The filter argument should be passed as an
         * additional path segment after this URI. This matches any people with
         * at least one E-mail or IM {@link ContactMethods} that match the
         * filter.
         *
         * Not exposed because we expect significant changes in the contacts
         * schema and do not want to have to support this.
         * @hide
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetWITH_EMAIL_OR_IM_FILTER_URI(
            [out] IUri** uri);

        /**
         * Mark a person as having been contacted.
         *
         * @param resolver the ContentResolver to use
         * @param personId the person who was contacted
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        MarkAsContacted(
            [in] IContentResolver* resolver,
            [in] Int64 personId);

        /**
         * @hide Used in vCard parser code.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        TryGetMyContactsGroupId(
            [in] IContentResolver* resolver,
            [out] Int64* id);

        /**
         * Adds a person to the My Contacts group.
         *
         * @param resolver the resolver to use
         * @param personId the person to add to the group
         * @return the URI of the group membership row
         * @throws IllegalStateException if the My Contacts group can't be found
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        AddToMyContactsGroup(
            [in] IContentResolver* resolver,
            [in] Int64 personId,
            [out] IUri** uri);

        /**
         * Adds a person to a group referred to by name.
         *
         * @param resolver the resolver to use
         * @param personId the person to add to the group
         * @param groupName the name of the group to add the contact to
         * @return the URI of the group membership row
         * @throws IllegalStateException if the group can't be found
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        AddToGroup(
            [in] IContentResolver* resolver,
            [in] Int64 personId,
            [in] String groupName,
            [out] IUri** uri);

        /**
         * Adds a person to a group.
         *
         * @param resolver the resolver to use
         * @param personId the person to add to the group
         * @param groupId the group to add the person to
         * @return the URI of the group membership row
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        AddToGroup(
            [in] IContentResolver* resolver,
            [in] Int64 personId,
            [in] Int64 groupId,
            [out] IUri** uri);

        /**
         * Creates a new contacts and adds it to the "My Contacts" group.
         *
         * @param resolver the ContentResolver to use
         * @param values the values to use when creating the contact
         * @return the URI of the contact, or null if the operation fails
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        CreatePersonInMyContactsGroup(
            [in] IContentResolver* resolver,
            [in] IContentValues* values,
            [out] IUri** uri);

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        QueryGroups(
            [in] IContentResolver* resolver,
            [in] Int64 person,
            [out] ICursor** cursor);

        /**
         * Set the photo for this person. data may be null
         * @param cr the ContentResolver to use
         * @param person the Uri of the person whose photo is to be updated
         * @param data the byte[] that represents the photo
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        SetPhotoData(
            [in] IContentResolver* cr,
            [in] IUri* person,
            [in] ArrayOf<Byte>* data);

        /**
         * Opens an InputStream for the person's photo and returns the photo as a Bitmap.
         * If the person's photo isn't present returns the placeholderImageResource instead.
         * @param person the person whose photo should be used
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        OpenContactPhotoInputStream(
            [in] IContentResolver* cr,
            [in] IUri* person,
            [out] IInputStream** stream);

        /**
         * Opens an InputStream for the person's photo and returns the photo as a Bitmap.
         * If the person's photo isn't present returns the placeholderImageResource instead.
         * @param context the Context
         * @param person the person whose photo should be used
         * @param placeholderImageResource the image resource to use if the person doesn't
         *   have a photo
         * @param options the decoding options, can be set to null
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        LoadContactPhoto(
            [in] IContext* ctx,
            [in] IUri* person,
            [in] Int32 placeholderImageResource,
            [in] IBitmapFactoryOptions* options,
            [out] IBitmap** bitmap);
    }

    /**
     * @Involve
     * inteface IBaseColumns;
     * inteface IContactsPhonesColumns;
     * inteface IContactsPeopleColumns;
     */
    interface IContactsPeoplePhones {
        /**
         * The directory twig for this sub-table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_DIRECTORY = "phones";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "number ASC";
    }

    /**
     * @Involve
     * inteface IBaseColumns;
     * inteface IContactsContactMethodsColumns;
     * inteface IContactsPeopleColumns;
     */
    interface IContactsPeopleContactMethods {
        /**
         * The directory twig for this sub-table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_DIRECTORY = "contact_methods";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "data ASC";
    }

    /**
     * @Involve
     * inteface IBaseColumns;
     * inteface IContactsExtensionsColumns;
     */
    interface IContactsPeopleExtensions {
        /**
         * The directory twig for this sub-table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_DIRECTORY = "extensions";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "name ASC";

        /**
         * The ID of the person this phone number is assigned to.
         * <P>Type: INTEGER (long)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PERSON_ID = "person";
    }

    interface IContactsGroupsColumns {
        /**
         * The group name.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String NAME = "name";

        /**
         * Notes about the group.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String NOTES = "notes";

        /**
         * Whether this group should be synced if the SYNC_EVERYTHING settings is false
         * for this group's account.
         * <P>Type: INTEGER (boolean)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SHOULD_SYNC = "should_sync";

        /**
         * The ID of this group if it is a System Group, null otherwise.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SYSTEM_ID = "system_id";
    }

    /**
     * @Involve
     * inteface IBaseColumns;
     * inteface IContactsGroupsColumns;
     */
    interface IContactsGroups {

        /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of
         * groups.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_TYPE = "vnd.android.cursor.dir/contactsgroup";

        /**
         * The MIME type of a {@link #CONTENT_URI} subdirectory of a single
         * group.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/contactsgroup";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "name ASC"; //IContactsGroupsColumns::NAME + " ASC";

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String GROUP_ANDROID_STARRED = "Starred in Android";

        /**
         * The "My Contacts" system group.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String GROUP_MY_CONTACTS = "Contacts";

        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * The content:// style URL for the table that holds the deleted
         * groups.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetDELETED_CONTENT_URI(
            [out] IUri** uri);
    }

    interface IContactsPhonesColumns {
        /**
         * The type of the the phone number.
         * <P>Type: INTEGER (one of the constants below)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String TYPE = "type";

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_CUSTOM = 0;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_HOME = 1;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_MOBILE = 2;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_WORK = 3;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_FAX_WORK = 4;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_FAX_HOME = 5;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_PAGER = 6;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_OTHER = 7;

        /**
         * The user provided label for the phone number, only used if TYPE is TYPE_CUSTOM.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LABEL = "label";

        /**
         * The phone number as the user entered it.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String NUMBER = "number";

        /**
         * The normalized phone number
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String NUMBER_KEY = "number_key";

        /**
         * Whether this is the primary phone number
         * <P>Type: INTEGER (if set, non-0 means true)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String ISPRIMARY = "isprimary";
    }

    /**
     * @Involve
     * interface IBaseColumns;
     * interface IContactsPhonesColumns;
     * interface IContactsPeopleColumn;
     */
    [local, deprecated]
    interface IContactsPhones {
        /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of
         * phones.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_TYPE = "vnd.android.cursor.dir/phone";

        /**
         * The MIME type of a {@link #CONTENT_URI} subdirectory of a single
         * phone.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/phone";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "name ASC";

        /**
         * The ID of the person this phone number is assigned to.
         * <P>Type: INTEGER (long)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PERSON_ID = "person";

        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * The content:// style URL for filtering phone numbers
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_FILTER_URL(
            [out] IUri** uri);

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        GetDisplayLabel(
            [in] IContext* ctx,
            [in] Int32 type,
            [in] ICharSequence* sequence,
            [in] ArrayOf<ICharSequence*>* labelArray,
            [out] ICharSequence** label);

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        GetDisplayLabel(
            [in] IContext* ctx,
            [in] Int32 type,
            [in] ICharSequence* sequence,
            [out] ICharSequence** label);
    }

    /**
     * @Involve
     * interface IBaseColumns;
     * interface IContactsGroupsColumns;
     */
    interface IContactsGroupMembership {

        /**
         * The directory twig for this sub-table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_DIRECTORY = "groupmembership";

        /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of all
         * person groups.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_TYPE = "vnd.android.cursor.dir/contactsgroupmembership";

        /**
         * The MIME type of a {@link #CONTENT_URI} subdirectory of a single
         * person group.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_ITEM_TYPE =
                "vnd.android.cursor.item/contactsgroupmembership";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "group_id ASC";

        /**
         * The row id of the accounts group.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String GROUP_ID = "group_id";

        /**
         * The sync id of the group.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String GROUP_SYNC_ID = "group_sync_id";

        /**
         * The account of the group.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String GROUP_SYNC_ACCOUNT = "group_sync_account";

        /**
         * The account type of the group.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String GROUP_SYNC_ACCOUNT_TYPE = "group_sync_account_type";

        /**
         * The row id of the person.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PERSON_ID = "person";

        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetRAW_CONTENT_URL(
            [out] IUri** uri);
    }

    interface IContactsContactMethodsColumns {
        /**
         * The kind of the the contact method. For example, email address,
         * postal address, etc.
         * <P>Type: INTEGER (one of the values below)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String KIND = "kind";

        /**
         * The type of the contact method, must be one of the types below.
         * <P>Type: INTEGER (one of the values below)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String TYPE = "type";
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_CUSTOM = 0;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_HOME = 1;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_WORK = 2;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_OTHER = 3;

        /**
         * @hide This is temporal. TYPE_MOBILE should be added to TYPE in the future.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 MOBILE_EMAIL_TYPE_INDEX = 2;

        /**
         * @hide This is temporal. TYPE_MOBILE should be added to TYPE in the future.
         * This is not "mobile" but "CELL" since vCard uses it for identifying mobile phone.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String MOBILE_EMAIL_TYPE_NAME = "_AUTO_CELL";

        /**
         * The user defined label for the the contact method.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LABEL = "label";

        /**
         * The data for the contact method.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DATA = "data";

        /**
         * Auxiliary data for the contact method.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String AUX_DATA = "aux_data";

        /**
         * Whether this is the primary organization
         * <P>Type: INTEGER (if set, non-0 means true)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String ISPRIMARY = "isprimary";
    }

    /**
     * @Involve
     * interface IBaseColumns;
     * interface IContactsContactMethodsColumns;
     * interface IContactsPeopleColumns;
     */
    [local]
    interface IContactsContactMethods {
        /**
         * The column with latitude data for postal locations
         * <P>Type: REAL</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String POSTAL_LOCATION_LATITUDE = "data"; //IContactsContactMethodsColumns::DATA;

        /**
         * The column with longitude data for postal locations
         * <P>Type: REAL</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String POSTAL_LOCATION_LONGITUDE = "aux_data"; //IContactsContactMethodsColumns::AUX_DATA;

        /**
         * The predefined IM protocol types. The protocol can either be non-present, one
         * of these types, or a free-form string. These cases are encoded in the AUX_DATA
         * column as:
         *  - null
         *  - pre:<an integer, one of the protocols below>
         *  - custom:<a string>
         *  @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 PROTOCOL_AIM = 0;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 PROTOCOL_MSN = 1;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 PROTOCOL_YAHOO = 2;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 PROTOCOL_SKYPE = 3;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 PROTOCOL_QQ = 4;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 PROTOCOL_GOOGLE_TALK = 5;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 PROTOCOL_ICQ = 6;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 PROTOCOL_JABBER = 7;

        /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of
         * @deprecated see {@link android.provider.ContactsContract}
         * phones.
         */
        //@Deprecated
        const String CONTENT_TYPE = "vnd.android.cursor.dir/contact-methods";

        /**
         * The MIME type of a {@link #CONTENT_EMAIL_URI} sub-directory of
         * multiple {@link Contacts#KIND_EMAIL} entries.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_EMAIL_TYPE = "vnd.android.cursor.dir/email";

        /**
         * The MIME type of a {@link #CONTENT_EMAIL_URI} sub-directory of
         * multiple {@link Contacts#KIND_POSTAL} entries.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_POSTAL_TYPE = "vnd.android.cursor.dir/postal-address";

        /**
         * The MIME type of a {@link #CONTENT_URI} sub-directory of a single
         * {@link Contacts#KIND_EMAIL} entry.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_EMAIL_ITEM_TYPE = "vnd.android.cursor.item/email";

        /**
         * The MIME type of a {@link #CONTENT_URI} sub-directory of a single
         * {@link Contacts#KIND_POSTAL} entry.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_POSTAL_ITEM_TYPE
                = "vnd.android.cursor.item/postal-address";

        /**
         * The MIME type of a {@link #CONTENT_URI} sub-directory of a single
         * {@link Contacts#KIND_IM} entry.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_IM_ITEM_TYPE = "vnd.android.cursor.item/jabber-im";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "name ASC";

        /**
         * The ID of the person this contact method is assigned to.
         * <P>Type: INTEGER (long)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PERSON_ID = "person";

        /**
         * Add a longitude and latitude location to a postal address.
         *
         * @param context the context to use when updating the database
         * @param postalId the address to update
         * @param latitude the latitude for the address
         * @param longitude the longitude for the address
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        AddPostalLocation(
            [in] IContext* ctx,
            [in] Int64 postalId,
            [in] Double latitude,
            [in] Double longitude);
    }

    /**
     * TODO find a place to put the canonical version of these.
     */
    interface IContactsContactMethodsProviderNames {
        //
        //NOTE: update Contacts.java with new providers when they're added.
        //
        const String YAHOO = "Yahoo";
        const String GTALK = "GTalk";
        const String MSN = "MSN";
        const String ICQ = "ICQ";
        const String AIM = "AIM";
        const String XMPP = "XMPP";
        const String JABBER = "JABBER";
        const String SKYPE = "SKYPE";
        const String QQ = "QQ";
    }

    [local]
    interface IContactsContactMethodsHelper{
        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * The content:// style URL for sub-directory of e-mail addresses.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetRAW_CONTENT_EMAIL_URL(
            [out] IUri** uri);

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        EncodePredefinedImProtocol(
            [in] Int32 protocol,
            [out] String* value);

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        EncodeCustomImProtocol(
            [in] String protocolString,
            [out] String* value);

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        DecodeImProtocol(
            [in] String encodedString,
            [out] IInterface** value);

        /**
         * This looks up the provider name defined in
         * from the predefined IM protocol id.
         * This is used for interacting with the IM application.
         *
         * @param protocol the protocol ID
         * @return the provider name the IM app uses for the given protocol, or null if no
         * provider is defined for the given protocol
         * @deprecated see {@link android.provider.ContactsContract}
         * @hide
         */
        // @Deprecated
        LookupProviderNameFromId(
            [in] Int32 protocol,
            [out] String* name);

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        GetDisplayLabel(
            [in] IContext* ctx,
            [in] Int32 kind,
            [in] Int32 type,
            [in] ICharSequence* label,
            [out] ICharSequence** lb);
    }

    interface IContactsPresenceColumns {
        /**
         * The priority, an integer, used by XMPP presence
         * <P>Type: INTEGER</P>
         */
        const String PRIORITY = "priority";

        /**
         * The server defined status.
         * <P>Type: INTEGER (one of the values below)</P>
         */
        const String PRESENCE_STATUS = "mode"; //IContactsContractStatusUpdates::PRESENCE;

        /**
         * Presence Status definition
         */
        const Int32 OFFLINE = 0; //IContactsContractStatusUpdates::OFFLINE;
        const Int32 INVISIBLE = 1; //IContactsContractStatusUpdates::INVISIBLE;
        const Int32 AWAY = 2; //IContactsContractStatusUpdates::AWAY;
        const Int32 IDLE = 3; //IContactsContractStatusUpdates::IDLE;
        const Int32 DO_NOT_DISTURB = 4; //IContactsContractStatusUpdates::DO_NOT_DISTURB;
        const Int32 AVAILABLE = 5; //IContactsContractStatusUpdates::AVAILABLE;

        /**
         * The user defined status line.
         * <P>Type: TEXT</P>
         */
        const String PRESENCE_CUSTOM_STATUS = "status"; //IContactsContractStatusUpdates::STATUS;

        /**
         * The IM service the presence is coming from. Formatted using either
         * {@link Contacts.ContactMethods#encodePredefinedImProtocol} or
         * {@link Contacts.ContactMethods#encodeCustomImProtocol}.
         * <P>Type: STRING</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String IM_PROTOCOL = "im_protocol";

        /**
         * The IM handle the presence item is for. The handle is scoped to
         * the {@link #IM_PROTOCOL}.
         * <P>Type: STRING</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String IM_HANDLE = "im_handle";

        /**
         * The IM account for the local user that the presence data came from.
         * <P>Type: STRING</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String IM_ACCOUNT = "im_account";
    }

    /**
     * @Involve
     * interface IBaseColumns;
     * interface IContactsPresenceColumns;
     * interface IContactsPeopleColumns;
     */
    [deprecated, local]
    interface IContactsPresence {

        /**
         * The ID of the person this presence item is assigned to.
         * <P>Type: INTEGER (long)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PERSON_ID = "person";

        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * Gets the resource ID for the proper presence icon.
         *
         * @param status the status to get the icon for
         * @return the resource ID for the proper presence icon
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        GetPresenceIconResourceId(
            [in] Int32 status,
            [out] Int32* id);

        /**
         * Sets a presence icon to the proper graphic
         *
         * @param icon the icon to to set
         * @param serverStatus that status
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        SetPresenceIcon(
            [in] IImageView* icon,
            [in] Int32 serverStatus);
    }

    interface IContactsOrganizationColumns {
        /**
         * The type of the organizations.
         * <P>Type: INTEGER (one of the constants below)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String TYPE = "type";

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_CUSTOM = 0;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_WORK = 1;
        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const Int32 TYPE_OTHER = 2;

        /**
         * The user provided label, only used if TYPE is TYPE_CUSTOM.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LABEL = "label";

        /**
         * The name of the company for this organization.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String COMPANY = "company";

        /**
         * The title within this organization.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String TITLE = "title";

        /**
         * The person this organization is tied to.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PERSON_ID = "person";

        /**
         * Whether this is the primary organization
         * <P>Type: INTEGER (if set, non-0 means true)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String ISPRIMARY = "isprimary";
    }

    /**
     * @Involve
     * interface IBaseColumns;
     * interface IContactsOrganizationColumns;
     */
    [local]
    interface IContactsOrganizations {
        /**
         * The directory twig for this sub-table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_DIRECTORY = "organizations";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "company, title, isprimary ASC";

        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);

        /**
         * @deprecated see {@link android.provider.ContactsContract}
         */
        // @Deprecated
        GetDisplayLabel(
            [in] IContext* ctx,
            [in] Int32 type,
            [in] ICharSequence* label,
            [out] ICharSequence** lb);
    }

    interface IContactsPhotosColumns {
        /**
         * The _SYNC_VERSION of the photo that was last downloaded
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LOCAL_VERSION = "local_version";

        /**
         * The person this photo is associated with.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PERSON_ID = "person";

        /**
         * non-zero if a download is required and the photo isn't marked as a bad resource.
         * You must specify this in the columns in order to use it in the where clause.
         * <P>Type: INTEGER(boolean)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DOWNLOAD_REQUIRED = "download_required";

        /**
         * non-zero if this photo is known to exist on the server
         * <P>Type: INTEGER(boolean)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String EXISTS_ON_SERVER = "exists_on_server";

        /**
         * Contains the description of the upload or download error from
         * the previous attempt. If null then the previous attempt succeeded.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SYNC_ERROR = "sync_error";

        /**
         * The image data, or null if there is no image.
         * <P>Type: BLOB</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DATA = "data";
    }

    /**
     * @Involve
     * interface IBaseColumns;
     * interface IContactsPhotosColumns;
     * interface ISyncConstValue;
     */
    interface IContactsPhotos {

        /**
         * The directory twig for this sub-table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_DIRECTORY = "photo";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "person ASC";

        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);
    }

    interface IContactsExtensionsColumns {
        /**
         * The name of this extension. May not be null. There may be at most one row for each name.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String NAME = "name";

        /**
         * The value of this extension. May not be null.
         * <P>Type: TEXT</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String VALUE = "value";
    }

    /**
     * @Involve
     * interface IBaseColumns;
     * interface IContactsExtensionsColumns;
     */
    interface IContactsExtensions {

        /**
         * The MIME type of {@link #CONTENT_URI} providing a directory of
         * phones.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_TYPE = "vnd.android.cursor.dir/contact_extensions";

        /**
         * The MIME type of a {@link #CONTENT_URI} subdirectory of a single
         * phone.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/contact_extensions";

        /**
         * The default sort order for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String DEFAULT_SORT_ORDER = "person, name ASC";

        /**
         * The ID of the person this phone number is assigned to.
         * <P>Type: INTEGER (long)</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PERSON_ID = "person";

        /**
         * The content:// style URL for this table
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        GetCONTENT_URI(
            [out] IUri** uri);
    }

    interface IContactsIntents {
        /**
         * This is the intent that is fired when a search suggestion is clicked on.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SEARCH_SUGGESTION_CLICKED = "android.provider.Contacts.SEARCH_SUGGESTION_CLICKED";
        //        IContactsContractIntents::SEARCH_SUGGESTION_CLICKED;

        /**
         * This is the intent that is fired when a search suggestion for dialing a number
         * is clicked on.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED = "android.provider.Contacts.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED";
        //        IContactsContractIntents::SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED;

        /**
         * This is the intent that is fired when a search suggestion for creating a contact
         * is clicked on.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED = "android.provider.Contacts.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED";
        //        IContactsContractIntents::SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED;

        /**
         * Starts an Activity that lets the user pick a contact to attach an image to.
         * After picking the contact it launches the image cropper in face detection mode.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String ATTACH_IMAGE = "com.android.contacts.action.ATTACH_IMAGE";
        //        IContactsContractIntents::ATTACH_IMAGE;

        /**
         * Takes as input a data URI with a mailto: or tel: scheme. If a single
         * contact exists with the given data it will be shown. If no contact
         * exists, a dialog will ask the user if they want to create a new
         * contact with the provided details filled in. If multiple contacts
         * share the data the user will be prompted to pick which contact they
         * want to view.
         * <p>
         * For <code>mailto:</code> URIs, the scheme specific portion must be a
         * raw email address, such as one built using
         * {@link Uri#fromParts(String, String, String)}.
         * <p>
         * For <code>tel:</code> URIs, the scheme specific portion is compared
         * to existing numbers using the standard caller ID lookup algorithm.
         * The number must be properly encoded, for example using
         * {@link Uri#fromParts(String, String, String)}.
         * <p>
         * Any extras from the {@link Insert} class will be passed along to the
         * create activity if there are no contacts to show.
         * <p>
         * Passing true for the {@link #EXTRA_FORCE_CREATE} extra will skip
         * prompting the user when the contact doesn't exist.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SHOW_OR_CREATE_CONTACT = "com.android.contacts.action.SHOW_OR_CREATE_CONTACT";
        //        IContactsContractIntents::SHOW_OR_CREATE_CONTACT;

        /**
         * Used with {@link #SHOW_OR_CREATE_CONTACT} to force creating a new
         * contact if no matching contact found. Otherwise, default behavior is
         * to prompt user with dialog before creating.
         * <p>
         * Type: BOOLEAN
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String EXTRA_FORCE_CREATE = "com.android.contacts.action.FORCE_CREATE";
        //        IContactsContractIntents::EXTRA_FORCE_CREATE;

        /**
         * Used with {@link #SHOW_OR_CREATE_CONTACT} to specify an exact
         * description to be shown when prompting user about creating a new
         * contact.
         * <p>
         * Type: STRING
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String EXTRA_CREATE_DESCRIPTION = "com.android.contacts.action.CREATE_DESCRIPTION";
        //        IContactsContractIntents::EXTRA_CREATE_DESCRIPTION;

        /**
         * Optional extra used with {@link #SHOW_OR_CREATE_CONTACT} to specify a
         * dialog location using screen coordinates. When not specified, the
         * dialog will be centered.
         *
         * @hide pending API council review
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String EXTRA_TARGET_RECT = "target_rect"; //IContactsContractIntents::EXTRA_TARGET_RECT;
    }

    interface IContactsIntentsUI {
        /**
         * The action for the default contacts list tab.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LIST_DEFAULT = "com.android.contacts.action.LIST_DEFAULT";
        //        IContactsContractIntentsUI::LIST_DEFAULT;

        /**
         * The action for the contacts list tab.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LIST_GROUP_ACTION = "com.android.contacts.action.LIST_GROUP";
        //        IContactsContractIntentsUI::LIST_GROUP_ACTION;

        /**
         * When in LIST_GROUP_ACTION mode, this is the group to display.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String GROUP_NAME_EXTRA_KEY = "com.android.contacts.extra.GROUP";
        //        IContactsContractIntentsUI::GROUP_NAME_EXTRA_KEY;
        /**
         * The action for the all contacts list tab.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LIST_ALL_CONTACTS_ACTION = "com.android.contacts.action.LIST_ALL_CONTACTS";
        //        IContactsContractIntentsUI::LIST_ALL_CONTACTS_ACTION;

        /**
         * The action for the contacts with phone numbers list tab.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LIST_CONTACTS_WITH_PHONES_ACTION = "com.android.contacts.action.LIST_CONTACTS_WITH_PHONES";
        //        IContactsContractIntentsUI::LIST_CONTACTS_WITH_PHONES_ACTION;

        /**
         * The action for the starred contacts list tab.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LIST_STARRED_ACTION = "com.android.contacts.action.LIST_STARRED";
        //        IContactsContractIntentsUI::LIST_STARRED_ACTION;

        /**
         * The action for the frequent contacts list tab.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LIST_FREQUENT_ACTION = "com.android.contacts.action.LIST_FREQUENT";
        //        IContactsContractIntentsUI::LIST_FREQUENT_ACTION;

        /**
         * The action for the "strequent" contacts list tab. It first lists the starred
         * contacts in alphabetical order and then the frequent contacts in descending
         * order of the number of times they have been contacted.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String LIST_STREQUENT_ACTION = "com.android.contacts.action.LIST_STREQUENT";
        //        IContactsContractIntentsUI::LIST_STREQUENT_ACTION;

        /**
         * A key for to be used as an intent extra to set the activity
         * title to a custom String value.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String TITLE_EXTRA_KEY = "com.android.contacts.extra.TITLE_EXTRA";
        //        IContactsContractIntentsUI::TITLE_EXTRA_KEY;

        /**
         * Activity Action: Display a filtered list of contacts
         * <p>
         * Input: Extra field {@link #FILTER_TEXT_EXTRA_KEY} is the text to use for
         * filtering
         * <p>
         * Output: Nothing.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String FILTER_CONTACTS_ACTION = "com.android.contacts.action.FILTER_CONTACTS";
        //        IContactsContractIntentsUI::FILTER_CONTACTS_ACTION;

        /**
         * Used as an int extra field in {@link #FILTER_CONTACTS_ACTION}
         * intents to supply the text on which to filter.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String FILTER_TEXT_EXTRA_KEY = "com.android.contacts.extra.FILTER_TEXT";
        //        IContactsContractIntentsUI::FILTER_TEXT_EXTRA_KEY;
    }

    interface IContactsIntentsInsert {
        /** The action code to use when adding a contact
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String ACTION = "android.intent.action.INSERT"; //IContactsContractIntentsInsert::ACTION;

        /**
         * If present, forces a bypass of quick insert mode.
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String FULL_MODE = "full_mode"; //IContactsContractIntentsInsert::FULL_MODE;

        /**
         * The extra field for the contact name.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String NAME = "name"; //IContactsContractIntentsInsert::NAME;

        /**
         * The extra field for the contact phonetic name.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PHONETIC_NAME = "phonetic_name";
        //       IContactsContractIntentsInsert::PHONETIC_NAME;

        /**
         * The extra field for the contact company.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String COMPANY = "company"; //IContactsContractIntentsInsert::COMPANY;

        /**
         * The extra field for the contact job title.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String JOB_TITLE = "job_title"; //IContactsContractIntentsInsert::JOB_TITLE;

        /**
         * The extra field for the contact notes.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String NOTES = "notes"; //IContactsContractIntentsInsert::NOTES;

        /**
         * The extra field for the contact phone number.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PHONE = "phone"; //IContactsContractIntentsInsert::PHONE;

        /**
         * The extra field for the contact phone number type.
         * <P>Type: Either an integer value from {@link android.provider.Contacts.PhonesColumns PhonesColumns},
         *  or a string specifying a custom label.</P>
         *  @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PHONE_TYPE = "phone_type"; //IContactsContractIntentsInsert::PHONE_TYPE;

        /**
         * The extra field for the phone isprimary flag.
         * <P>Type: boolean</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String PHONE_ISPRIMARY = "phone_isprimary";
        //        IContactsContractIntentsInsert::PHONE_ISPRIMARY;

        /**
         * The extra field for an optional second contact phone number.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SECONDARY_PHONE = "secondary_phone";
        //        IContactsContractIntentsInsert::SECONDARY_PHONE;

        /**
         * The extra field for an optional second contact phone number type.
         * <P>Type: Either an integer value from {@link android.provider.Contacts.PhonesColumns PhonesColumns},
         *  or a string specifying a custom label.</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SECONDARY_PHONE_TYPE = "secondary_phone_type";
        //        IContactsContractIntentsInsert::SECONDARY_PHONE_TYPE;

        /**
         * The extra field for an optional third contact phone number.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String TERTIARY_PHONE = "tertiary_phone";
        //        IContactsContractIntentsInsert::TERTIARY_PHONE;

        /**
         * The extra field for an optional third contact phone number type.
         * <P>Type: Either an integer value from {@link android.provider.Contacts.PhonesColumns PhonesColumns},
         *  or a string specifying a custom label.</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String TERTIARY_PHONE_TYPE = "tertiary_phone_type";
        //        IContactsContractIntentsInsert::TERTIARY_PHONE_TYPE;

        /**
         * The extra field for the contact email address.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String EMAIL = "email"; //IContactsContractIntentsInsert::EMAIL;

        /**
         * The extra field for the contact email type.
         * <P>Type: Either an integer value from {@link android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns}
         *  or a string specifying a custom label.</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String EMAIL_TYPE = "email_type";// IContactsContractIntentsInsert::EMAIL_TYPE;

        /**
         * The extra field for the email isprimary flag.
         * <P>Type: boolean</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String EMAIL_ISPRIMARY = "email_isprimary";
        //        IContactsContractIntentsInsert::EMAIL_ISPRIMARY;

        /**
         * The extra field for an optional second contact email address.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SECONDARY_EMAIL = "secondary_email";
        //        IContactsContractIntentsInsert::SECONDARY_EMAIL;

        /**
         * The extra field for an optional second contact email type.
         * <P>Type: Either an integer value from {@link android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns}
         *  or a string specifying a custom label.</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String SECONDARY_EMAIL_TYPE = "secondary_email_type";
        //        IContactsContractIntentsInsert::SECONDARY_EMAIL_TYPE;

        /**
         * The extra field for an optional third contact email address.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String TERTIARY_EMAIL = "tertiary_email";
        //        IContactsContractIntentsInsert::TERTIARY_EMAIL;

        /**
         * The extra field for an optional third contact email type.
         * <P>Type: Either an integer value from {@link android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns}
         *  or a string specifying a custom label.</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String TERTIARY_EMAIL_TYPE = "tertiary_email_type";
        //        IContactsContractIntentsInsert::TERTIARY_EMAIL_TYPE;

        /**
         * The extra field for the contact postal address.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String POSTAL = "postal"; //IContactsContractIntentsInsert::POSTAL;

        /**
         * The extra field for the contact postal address type.
         * <P>Type: Either an integer value from {@link android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns}
         *  or a string specifying a custom label.</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String POSTAL_TYPE = "postal_type"; //IContactsContractIntentsInsert::POSTAL_TYPE;

        /**
         * The extra field for the postal isprimary flag.
         * <P>Type: boolean</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String POSTAL_ISPRIMARY = "postal_isprimary"; //IContactsContractIntentsInsert::POSTAL_ISPRIMARY;


        /**
         * The extra field for an IM handle.
         * <P>Type: String</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String IM_HANDLE = "im_handle"; //IContactsContractIntentsInsert::IM_HANDLE;

        /**
         * The extra field for the IM protocol
         * <P>Type: the result of {@link Contacts.ContactMethods#encodePredefinedImProtocol}
         * or {@link Contacts.ContactMethods#encodeCustomImProtocol}.</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String IM_PROTOCOL = "im_protocol"; //IContactsContractIntentsInsert::IM_PROTOCOL;

        /**
         * The extra field for the IM isprimary flag.
         * <P>Type: boolean</P>
         * @deprecated see {@link android.provider.ContactsContract}
         */
        //@Deprecated
        const String IM_ISPRIMARY = "im_isprimary"; //IContactsContractIntentsInsert::IM_ISPRIMARY;
    }

    } // namespace Provider
    } // namespace Droid
    } // namespace Elastos

}
