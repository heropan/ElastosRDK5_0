module
{
    interface Elastos.Droid.Content.IComponentName;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Hardware.Soundtrigger.IKeyphraseEnrollmentInfo;
    interface Elastos.Droid.Os.IBundle;
    using interface Elastos.Utility.ILocale;

    namespace Elastos {
    namespace Droid {
    namespace Service {
    namespace Voice {

    /**
     * @hide
     *
     * @Involve
     * extends Elastos.Droid.Content.IContext
     * extends Elastos.Droid.Content.IContextWrapper
     * extends Elastos.Droid.App.IService
     *
     * interface Elastos.Droid.View.IWindowCallback
     */
    interface IVoiceInteractionService {
        /**
         * The {@link Intent} that must be declared as handled by the service.
         * To be supported, the service must also require the
         * {@link android.Manifest.permission#BIND_VOICE_INTERACTION} permission so
         * that other applications can not abuse it.
         * @SdkConstant(SdkConstant.SdkConstantType.SERVICE_ACTION)
         */
        const String SERVICE_INTERFACE =
                "android.service.voice.VoiceInteractionService";

        /**
         * Name under which a VoiceInteractionService component publishes information about itself.
         * This meta-data should reference an XML resource containing a
         * <code>&lt;{@link
         * android.R.styleable#VoiceInteractionService voice-interaction-service}&gt;</code> tag.
         */
        const String SERVICE_META_DATA = "android.voice_interaction";

        /**
         * Initiate the execution of a new {@link android.service.voice.VoiceInteractionSession}.
         * @param args Arbitrary arguments that will be propagated to the session.
         */
        StartSession(
            [in] IBundle* args);

        /**
         * Called during service initialization to tell you when the system is ready
         * to receive interaction from it. You should generally do initialization here
         * rather than in {@link #onCreate()}. Methods such as {@link #startSession(Bundle)} and
         * {@link #createAlwaysOnHotwordDetector(String, Locale, android.service.voice.AlwaysOnHotwordDetector.Callback)}
         * will not be operational until this point.
         */
        OnReady();

        /**
         * Called during service de-initialization to tell you when the system is shutting the
         * service down.
         * At this point this service may no longer be the active {@link VoiceInteractionService}.
         */
        OnShutdown();

        /**
         * Creates an {@link AlwaysOnHotwordDetector} for the given keyphrase and locale.
         * This instance must be retained and used by the client.
         * Calling this a second time invalidates the previously created hotword detector
         * which can no longer be used to manage recognition.
         *
         * @param keyphrase The keyphrase that's being used, for example "Hello Android".
         * @param locale The locale for which the enrollment needs to be performed.
         * @param callback The callback to notify of detection events.
         * @return An always-on hotword detector for the given keyphrase and locale.
         */
        CreateAlwaysOnHotwordDetector(
            [in] String keyphrase,
            [in] ILocale* locale,
            [in] IAlwaysOnHotwordDetectorCallback* cb,
            [out] IAlwaysOnHotwordDetector** detector);

        /**
         * @return Details of keyphrases available for enrollment.
         * @hide
         */
        // @VisibleForTesting
        GetKeyphraseEnrollmentInfo(
            [out] IKeyphraseEnrollmentInfo** kei);
    }

    interface IVoiceInteractionServiceHelper {
        /**
         * Check whether the given service component is the currently active
         * VoiceInteractionService.
         */
        IsActiveService(
            [in] IContext* context,
            [in] IComponentName* service,
            [out] Boolean* isActiveService);
    }


    } // namespace Voice
    } // namespace Service
    } // namespace Droid
    } // namespace Elastos
}