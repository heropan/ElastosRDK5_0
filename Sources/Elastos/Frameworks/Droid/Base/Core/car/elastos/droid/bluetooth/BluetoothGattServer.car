module
{
    using interface Elastos.Utility.IList;
    using interface Elastos.Utility.IUUID;

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {

        /**
         * Public API for the Bluetooth GATT Profile server role.
         *
         * <p>This class provides Bluetooth GATT server role functionality,
         * allowing applications to create Bluetooth Smart services and
         * characteristics.
         *
         * <p>BluetoothGattServer is a proxy object for controlling the Bluetooth Service
         * via IPC.  Use {@link BluetoothManager#openGattServer} to get an instance
         * of this class.
         */
        /**
         * @Involve
         * interface IBluetoothProfile
         */
        [deprecated]
        interface IBluetoothGattServer {
            /**
             * Close this GATT server instance.
             *
             * Application should call this method as early as possible after it is done with
             * this GATT server.
             */
            Close();

            /**
             * Initiate a connection to a Bluetooth GATT capable device.
             *
             * <p>The connection may not be established right away, but will be
             * completed when the remote device is available. A
             * {@link BluetoothGattServerCallback#onConnectionStateChange} callback will be
             * invoked when the connection state changes as a result of this function.
             *
             * <p>The autoConnect paramter determines whether to actively connect to
             * the remote device, or rather passively scan and finalize the connection
             * when the remote device is in range/available. Generally, the first ever
             * connection to a device should be direct (autoConnect set to false) and
             * subsequent connections to known devices should be invoked with the
             * autoConnect parameter set to true.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
             *
             * @param autoConnect Whether to directly connect to the remote device (false)
             *                    or to automatically connect as soon as the remote
             *                    device becomes available (true).
             * @return true, if the connection attempt was initiated successfully
             */
            Connect(
                    [in] IBluetoothDevice* device,
                    [in] Boolean autoConnect,
                    [out] Boolean* result);

            /**
             * Disconnects an established connection, or cancels a connection attempt
             * currently in progress.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
             *
             * @param device Remote device
             */
            CancelConnection(
                    [in] IBluetoothDevice* device);

            /**
             * Send a response to a read or write request to a remote device.
             *
             * <p>This function must be invoked in when a remote read/write request
             * is received by one of these callback methods:
             *
             * <ul>
             *      <li>{@link BluetoothGattServerCallback#onCharacteristicReadRequest}
             *      <li>{@link BluetoothGattServerCallback#onCharacteristicWriteRequest}
             *      <li>{@link BluetoothGattServerCallback#onDescriptorReadRequest}
             *      <li>{@link BluetoothGattServerCallback#onDescriptorWriteRequest}
             * </ul>
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
             *
             * @param device The remote device to send this response to
             * @param requestId The ID of the request that was received with the callback
             * @param status The status of the request to be sent to the remote devices
             * @param offset Value offset for partial read/write response
             * @param value The value of the attribute that was read/written (optional)
             */
            SendResponse(
                    [in] IBluetoothDevice* device,
                    [in] Int32 requestId,
                    [in] Int32 status,
                    [in] Int32 offset,
                    [in] ArrayOf<Byte>* value,
                    [out] Boolean* result);

            /**
             * Send a notification or indication that a local characteristic has been
             * updated.
             *
             * <p>A notification or indication is sent to the remote device to signal
             * that the characteristic has been updated. This function should be invoked
             * for every client that requests notifications/indications by writing
             * to the "Client Configuration" descriptor for the given characteristic.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
             *
             * @param device The remote device to receive the notification/indication
             * @param characteristic The local characteristic that has been updated
             * @param confirm true to request confirmation from the client (indication),
             *                false to send a notification
             * @throws IllegalArgumentException
             * @return true, if the notification has been triggered successfully
             */
            NotifyCharacteristicChanged(
                [in] IBluetoothDevice* device,
                [in] IBluetoothGattCharacteristic* characteristic,
                [in] Boolean confirm,
                [out] Boolean* result);

            /**
             * Add a service to the list of services to be hosted.
             *
             * <p>Once a service has been addded to the the list, the service and its
             * included characteristics will be provided by the local device.
             *
             * <p>If the local device has already exposed services when this function
             * is called, a service update notification will be sent to all clients.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
             *
             * @param service Service to be added to the list of services provided
             *                by this device.
             * @return true, if the service has been added successfully
             */
            AddService(
                [in] IBluetoothGattService* service,
                [out] Boolean* result);

            /**
             * Removes a service from the list of services to be provided.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
             *
             * @param service Service to be removed.
             * @return true, if the service has been removed
             */
            RemoveService(
                [in] IBluetoothGattService* service,
                [out] Boolean* result);

            /**
             * Remove all services from the list of provided services.
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
             */
            ClearServices();

            /**
                * Returns a list of GATT services offered by this device.
                *
                * <p>An application must call {@link #addService} to add a serice to the
                * list of services offered by this device.
                *
                * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
                *
                * @return List of IBluetoothGattService. Returns an empty list
                *         if no services have been added yet.
                */
            GetServices(
                [out] IList** services);

            /**
             * Returns a {@link BluetoothGattService} from the list of services offered
             * by this device.
             *
             * <p>If multiple instances of the same service (as identified by UUID)
             * exist, the first instance of the service is returned.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
             *
             * @param uuid UUID of the requested service
             * @return BluetoothGattService if supported, or null if the requested
             *         service is not offered by this device.
             */
            GetService(
                [in] IUUID* uuid,
                [out] IBluetoothGattService** service);
        }

    } // Bluetooth
    } // Droid
    } // Elastos
}
