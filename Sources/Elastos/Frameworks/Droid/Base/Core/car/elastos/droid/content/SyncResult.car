
module
{
    interface Elastos.Droid.Content.ISyncStats;

    namespace Elastos {
    namespace Droid {
    namespace Content {

    /**
     * @Involve
     * interface IParcelable;
     */
    [deprecated]
    interface ISyncResult {
        /**
         * Used to indicate that the SyncAdapter is already performing a sync operation, though
         * not necessarily for the requested account and authority and that it wasn't able to
         * process this request. The SyncManager will reschedule the request to run later.
         */
        GetSyncAlreadyInProgress(
            [out] Boolean* syncAlreadyInProgress);

        /**
         * Used to indicate that the SyncAdapter determined that it would need to issue
         * too many delete operations to the server in order to satisfy the request
         * (as defined by the SyncAdapter). The SyncManager will record
         * that the sync request failed and will cause a System Notification to be created
         * asking the user what they want to do about this. It will give the user a chance to
         * choose between (1) go ahead even with those deletes, (2) revert the deletes,
         * or (3) take no action. If the user decides (1) or (2) the SyncManager will issue another
         * sync request with either {@link ContentResolver#SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS}
         * or {@link ContentResolver#SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS} set in the extras.
         * It is then up to the SyncAdapter to decide how to honor that request.
         */
        GetTooManyDeletions(
            [out] Boolean* tooManyDeletions);

        SetTooManyDeletions(
            [in] Boolean tooManyDeletions);

        /**
         * Used to indicate that the SyncAdapter experienced a hard error due to trying the same
         * operation too many times (as defined by the SyncAdapter). The SyncManager will record
         * that the sync request failed and it will not reschedule the request.
         */
        GetTooManyRetries(
            [out] Boolean* tooManyRetries);

        SetTooManyRetries(
            [in] Boolean tooManyRetries);

        /**
         * Used to indicate that the SyncAdapter experienced a hard error due to an error it
         * received from interacting with the storage later. The SyncManager will record that
         * the sync request failed and it will not reschedule the request.
         */
        GetDatabaseError(
            [out] Boolean* databaseError);

        SetDatabaseError(
            [in] Boolean databaseError);

        /**
         * If set the SyncManager will request an immediate sync with the same Account and authority
         * (but empty extras Bundle) as was used in the sync request.
         */
        GetFullSyncRequested(
            [out] Boolean* fullSyncRequested);

        SetFullSyncRequested(
            [in] Boolean fullSyncRequested);

        /**
         * This field is ignored by the SyncManager.
         */
        GetPartialSyncUnavailable(
            [out] Boolean* partialSyncUnavailable);

        SetPartialSyncUnavailable(
            [in] Boolean partialSyncUnavailable);

        /**
         * This field is ignored by the SyncManager.
         */
        GetMoreRecordsToGet(
            [out] Boolean* moreRecordsToGet);

        SetMoreRecordsToGet(
            [in] Boolean moreRecordsToGet);

        /**
         * Used to indicate to the SyncManager that future sync requests that match the request's
         * Account and authority should be delayed at least this many seconds.
         */
        GetDelayUntil(
            [out] Int64* delayUntil);

        SetDelayUntil(
            [in] Int64 delayUntil);

        /**
         * Used to hold extras statistics about the sync operation. Some of these indicate that
         * the sync request resulted in a hard or soft error, others are for purely informational
         * purposes.
         */
        GetStats(
            [out] ISyncStats** stats);

        /**
         * Convenience method for determining if the SyncResult indicates that a hard error
         * occurred. See {@link #SyncResult()} for an explanation of what the SyncManager does
         * when it sees a hard error.
         * <p>
         * A hard error is indicated when any of the following is true:
         * <ul>
         * <li> {@link SyncStats#numParseExceptions} > 0
         * <li> {@link SyncStats#numConflictDetectedExceptions} > 0
         * <li> {@link SyncStats#numAuthExceptions} > 0
         * <li> {@link #tooManyDeletions}
         * <li> {@link #tooManyRetries}
         * <li> {@link #databaseError}
         * @return true if a hard error is indicated
         */
        HasHardError(
            [out] Boolean* hasError);

        /**
         * Convenience method for determining if the SyncResult indicates that a soft error
         * occurred. See {@link #SyncResult()} for an explanation of what the SyncManager does
         * when it sees a soft error.
         * <p>
         * A soft error is indicated when any of the following is true:
         * <ul>
         * <li> {@link SyncStats#numIoExceptions} > 0
         * <li> {@link #syncAlreadyInProgress}
         * </ul>
         * @return true if a hard error is indicated
         */
        HasSoftError(
            [out] Boolean* hasError);

        /**
         * A convenience method for determining of the SyncResult indicates that an error occurred.
         * @return true if either a soft or hard error occurred
         */
        HasError(
            [out] Boolean* hasError);

        MadeSomeProgress(
            [out] Boolean* result);

        /**
         * Clears the SyncResult to a clean state. Throws an {@link UnsupportedOperationException}
         * if this is called when {@link #syncAlreadyInProgress} is set.
         */
        Clear();

        ToString(
            [out] String* str);

        /**
         * Generates a debugging string indicating the status.
         * The string consist of a sequence of code letter followed by the count.
         * Code letters are f - fullSyncRequested, r - partialSyncUnavailable,
         * X - hardError, e - numParseExceptions, c - numConflictDetectedExceptions,
         * a - numAuthExceptions, D - tooManyDeletions, R - tooManyRetries,
         * b - databaseError, x - softError, l - syncAlreadyInProgress,
         * I - numIoExceptions
         * @return debugging string.
         */
        ToDebugString(
            [out] String* str);
    }

    interface ISyncResultHelper {
        /**
         * This instance of a SyncResult is returned by the SyncAdapter in response to a
         * sync request when a sync is already underway. The SyncManager will reschedule the
         * sync request to try again later.
         */
        GetALREADY_IN_PROGRESS(
            [out] ISyncResult** syncResult);
    }

    } // namespace Content
    } // namespace Droid
    } // namespace Elastos
}