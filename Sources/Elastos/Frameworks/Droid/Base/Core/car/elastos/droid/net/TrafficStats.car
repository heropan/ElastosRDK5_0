
module
{
    interface Elastos.Droid.Content.IContext;

    using interface Elastos.Net.ISocket;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    /**
     * Class that provides network traffic statistics.  These statistics include
     * bytes transmitted and received and network packets transmitted and received,
     * over all interfaces, over the mobile interface, and on a per-UID basis.
     * <p>
     * These statistics may not be available on all platforms.  If the statistics
     * are not supported by this device, {@link #UNSUPPORTED} will be returned.
     */
    /**
     * @Involved
     * no super interface
     */
    interface ITrafficStats {
        /**
         * The return value to indicate that the device does not support the statistic.
         */
        const Int32 UNSUPPORTED = -1;

        /** @hide */
        const Int64 KB_IN_BYTES = 1024;

        /** @hide */
        const Int64 MB_IN_BYTES = KB_IN_BYTES * 1024;

        /** @hide */
        const Int64 GB_IN_BYTES = MB_IN_BYTES * 1024;

        /**
         * Special UID value used when collecting {@link NetworkStatsHistory} for
         * removed applications.
         *
         * @hide
         */
        const Int32 UID_REMOVED = -4;

        /**
         * Special UID value used when collecting {@link NetworkStatsHistory} for
         * tethering traffic.
         *
         * @hide
         */
        const Int32 UID_TETHERING = -5;

        /**
         * Default tag value for {@link DownloadManager} traffic.
         *
         * @hide
         */
        const Int32 TAG_SYSTEM_DOWNLOAD = 0xFFFFFF01;

        /**
         * Default tag value for {@link MediaPlayer} traffic.
         *
         * @hide
         */
        const Int32 TAG_SYSTEM_MEDIA = 0xFFFFFF02;

        /**
         * Default tag value for {@link BackupManager} traffic.
         *
         * @hide
         */
        const Int32 TAG_SYSTEM_BACKUP = 0xFFFFFF03;

        /**
         * Set active tag to use when accounting {@link Socket} traffic originating
         * from the current thread. Only one active tag per thread is supported.
         * <p>
         * Changes only take effect during subsequent calls to
         * {@link #tagSocket(Socket)}.
         * <p>
         * Tags between {@code 0xFFFFFF00} and {@code 0xFFFFFFFF} are reserved and
         * used internally by system services like {@link DownloadManager} when
         * performing traffic on behalf of an application.
         *
         * @see #clearThreadStatsTag()
         */
        SetThreadStatsTag(
            [in] Int32 tag);

        /**
         * System API for backup-related support components to tag network traffic
         * appropriately.
         * @hide
         */
        // @SystemApi
        SetThreadStatsTagBackup();

        /**
         * Get the active tag used when accounting {@link Socket} traffic originating
         * from the current thread. Only one active tag per thread is supported.
         * {@link #tagSocket(Socket)}.
         *
         * @see #setThreadStatsTag(int)
         */
        GetThreadStatsTag(
            [out] Int32* result);

        /**
         * Clear any active tag set to account {@link Socket} traffic originating
         * from the current thread.
         *
         * @see #setThreadStatsTag(int)
         */
        ClearThreadStatsTag();

        /**
         * Set specific UID to use when accounting {@link Socket} traffic
         * originating from the current thread. Designed for use when performing an
         * operation on behalf of another application.
         * <p>
         * Changes only take effect during subsequent calls to
         * {@link #tagSocket(Socket)}.
         * <p>
         * To take effect, caller must hold
         * {@link android.Manifest.permission#UPDATE_DEVICE_STATS} permission.
         *
         * @hide
         */
        // @SystemApi
        SetThreadStatsUid(
            [in] Int32 uid);

        /** {@hide} */
        // @SystemApi
        ClearThreadStatsUid();

        /**
         * Tag the given {@link Socket} with any statistics parameters active for
         * the current thread. Subsequent calls always replace any existing
         * parameters. When finished, call {@link #untagSocket(Socket)} to remove
         * statistics parameters.
         *
         * @see #setThreadStatsTag(int)
         * @see #setThreadStatsUid(int)
         */
        TagSocket(
            [in] ISocket* socket);

        /**
         * Remove any statistics parameters from the given {@link Socket}.
         */
        UntagSocket(
            [in] ISocket* socket);

        /**
         * Start profiling data usage for current UID. Only one profiling session
         * can be active at a time.
         *
         * @hide
         */
        StartDataProfiling(
            [in] IContext* context);

        /**
         * Stop profiling data usage for current UID.
         *
         * @return Detailed {@link NetworkStats} of data that occurred since last
         *         {@link #startDataProfiling(Context)} call.
         * @hide
         */
        StopDataProfiling(
            [in] IContext* ctx,
            [out] INetworkStats** result);

        /**
         * Increment count of network operations performed under the accounting tag
         * currently active on the calling thread. This can be used to derive
         * bytes-per-operation.
         *
         * @param operationCount Number of operations to increment count by.
         */
        IncrementOperationCount(
            [in] Int32 operationCount);

        /**
         * Increment count of network operations performed under the given
         * accounting tag. This can be used to derive bytes-per-operation.
         *
         * @param tag Accounting tag used in {@link #setThreadStatsTag(int)}.
         * @param operationCount Number of operations to increment count by.
         */
        IncrementOperationCount(
            [in] Int32 tag,
            [in] Int32 operationCount);

        /** {@hide} */
        CloseQuietly(
            [in] IINetworkStatsSession* session);

        /**
         * Return number of packets transmitted across mobile networks since device
         * boot. Counts packets across all mobile network interfaces, and always
         * increases monotonically since device boot. Statistics are measured at the
         * network layer, so they include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may
         * return {@link #UNSUPPORTED} on devices where statistics aren't available.
         */
        GetMobileTxPackets(
            [out] Int64* result);

        /**
         * Return number of packets received across mobile networks since device
         * boot. Counts packets across all mobile network interfaces, and always
         * increases monotonically since device boot. Statistics are measured at the
         * network layer, so they include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may
         * return {@link #UNSUPPORTED} on devices where statistics aren't available.
         */
        GetMobileRxPackets(
            [out] Int64* result);

        /**
         * Return number of bytes transmitted across mobile networks since device
         * boot. Counts packets across all mobile network interfaces, and always
         * increases monotonically since device boot. Statistics are measured at the
         * network layer, so they include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may
         * return {@link #UNSUPPORTED} on devices where statistics aren't available.
         */
        GetMobileTxBytes(
            [out] Int64* result);

        /**
         * Return number of bytes received across mobile networks since device boot.
         * Counts packets across all mobile network interfaces, and always increases
         * monotonically since device boot. Statistics are measured at the network
         * layer, so they include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may
         * return {@link #UNSUPPORTED} on devices where statistics aren't available.
         */
        GetMobileRxBytes(
            [out] Int64* result);

        /** {@hide} */
        GetMobileTcpRxPackets(
            [out] Int64* result);

        /** {@hide} */
        GetMobileTcpTxPackets(
            [out] Int64* result);

        /** {@hide} */
        GetTxPackets(
            [in] String iface,
            [out] Int64* result);

        /** {@hide} */
        GetRxPackets(
            [in] String iface,
            [out] Int64* result);

        /** {@hide} */
        GetTxBytes(
            [in] String iface,
            [out] Int64* result);

        /** {@hide} */
        GetRxBytes(
            [in] String iface,
            [out] Int64* result);

        /**
         * Return number of packets transmitted since device boot. Counts packets
         * across all network interfaces, and always increases monotonically since
         * device boot. Statistics are measured at the network layer, so they
         * include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may
         * return {@link #UNSUPPORTED} on devices where statistics aren't available.
         */
        GetTotalTxPackets(
            [out] Int64* result);

        /**
         * Return number of packets received since device boot. Counts packets
         * across all network interfaces, and always increases monotonically since
         * device boot. Statistics are measured at the network layer, so they
         * include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may
         * return {@link #UNSUPPORTED} on devices where statistics aren't available.
         */
        GetTotalRxPackets(
            [out] Int64* result);

        /**
         * Return number of bytes transmitted since device boot. Counts packets
         * across all network interfaces, and always increases monotonically since
         * device boot. Statistics are measured at the network layer, so they
         * include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may
         * return {@link #UNSUPPORTED} on devices where statistics aren't available.
         */
        GetTotalTxBytes(
            [out] Int64* result);

        /**
         * Return number of bytes received since device boot. Counts packets across
         * all network interfaces, and always increases monotonically since device
         * boot. Statistics are measured at the network layer, so they include both
         * TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may
         * return {@link #UNSUPPORTED} on devices where statistics aren't available.
         */
        GetTotalRxBytes(
            [out] Int64* result);

        /**
         * Return number of bytes transmitted by the given UID since device boot.
         * Counts packets across all network interfaces, and always increases
         * monotonically since device boot. Statistics are measured at the network
         * layer, so they include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return
         * {@link #UNSUPPORTED} on devices where statistics aren't available.
         *
         * @see android.os.Process#myUid()
         * @see android.content.pm.ApplicationInfo#uid
         */
        GetUidTxBytes(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * Return number of bytes received by the given UID since device boot.
         * Counts packets across all network interfaces, and always increases
         * monotonically since device boot. Statistics are measured at the network
         * layer, so they include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return
         * {@link #UNSUPPORTED} on devices where statistics aren't available.
         *
         * @see android.os.Process#myUid()
         * @see android.content.pm.ApplicationInfo#uid
         */
        GetUidRxBytes(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * Return number of packets transmitted by the given UID since device boot.
         * Counts packets across all network interfaces, and always increases
         * monotonically since device boot. Statistics are measured at the network
         * layer, so they include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return
         * {@link #UNSUPPORTED} on devices where statistics aren't available.
         *
         * @see android.os.Process#myUid()
         * @see android.content.pm.ApplicationInfo#uid
         */
        GetUidTxPackets(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * Return number of packets received by the given UID since device boot.
         * Counts packets across all network interfaces, and always increases
         * monotonically since device boot. Statistics are measured at the network
         * layer, so they include both TCP and UDP usage.
         * <p>
         * Before {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, this may return
         * {@link #UNSUPPORTED} on devices where statistics aren't available.
         *
         * @see android.os.Process#myUid()
         * @see android.content.pm.ApplicationInfo#uid
         */
        GetUidRxPackets(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
         *             transport layer statistics are no longer available, and will
         *             always return {@link #UNSUPPORTED}.
         * @see #getUidTxBytes(int)
         */
        // @Deprecated
        GetUidTcpTxBytes(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
         *             transport layer statistics are no longer available, and will
         *             always return {@link #UNSUPPORTED}.
         * @see #getUidRxBytes(int)
         */
        // @Deprecated
        GetUidTcpRxBytes(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
         *             transport layer statistics are no longer available, and will
         *             always return {@link #UNSUPPORTED}.
         * @see #getUidTxBytes(int)
         */
        // @Deprecated
        GetUidUdpTxBytes(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
         *             transport layer statistics are no longer available, and will
         *             always return {@link #UNSUPPORTED}.
         * @see #getUidRxBytes(int)
         */
        // @Deprecated
        GetUidUdpRxBytes(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
         *             transport layer statistics are no longer available, and will
         *             always return {@link #UNSUPPORTED}.
         * @see #getUidTxPackets(int)
         */
        // @Deprecated
        GetUidTcpTxSegments(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
         *             transport layer statistics are no longer available, and will
         *             always return {@link #UNSUPPORTED}.
         * @see #getUidRxPackets(int)
         */
        // @Deprecated
        GetUidTcpRxSegments(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
         *             transport layer statistics are no longer available, and will
         *             always return {@link #UNSUPPORTED}.
         * @see #getUidTxPackets(int)
         */
        // @Deprecated
        GetUidUdpTxPackets(
            [in] Int32 uid,
            [out] Int64* result);

        /**
         * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
         *             transport layer statistics are no longer available, and will
         *             always return {@link #UNSUPPORTED}.
         * @see #getUidRxPackets(int)
         */
        // @Deprecated
        GetUidUdpRxPackets(
            [in] Int32 uid,
            [out] Int64* result);
    }

    } // namespace Net
    } // namespace Droid
    } // namespace Elastos
}

