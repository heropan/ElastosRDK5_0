
module
{
    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Camera2 {
    namespace Legacy {

    /**
     * GPU and CPU performance measurement for the legacy implementation.
     *
     * <p>Measures CPU and GPU processing duration for a set of operations, and dumps
     * the results into a file.</p>
     *
     * <p>Rough usage:
     * <pre>
     * {@code
     *   <set up workload>
     *   <start long-running workload>
     *   mPerfMeasurement.startTimer();
     *   ...render a frame...
     *   mPerfMeasurement.stopTimer();
     *   <end workload>
     *   mPerfMeasurement.dumpPerformanceData("/sdcard/my_data.txt");
     * }
     * </pre>
     * </p>
     *
     * <p>All calls to this object must be made within the same thread, and the same GL context.
     * PerfMeasurement cannot be used outside of a GL context.  The only exception is
     * dumpPerformanceData, which can be called outside of a valid GL context.</p>
     */
    interface IPerfMeasurement {
        const Int32 DEFAULT_MAX_QUERIES = 3;

        /**
         * Dump collected data to file, and clear the stored data.
         *
         * <p>
         * Format is a simple csv-like text file with a header,
         * followed by a 3-column list of values in nanoseconds:
         * <pre>
         *   timestamp gpu_duration cpu_duration
         *   <long> <long> <long>
         *   <long> <long> <long>
         *   <long> <long> <long>
         *   ....
         * </pre>
         * </p>
         */
        DumpPerformanceData(
            [in] String path);

        /**
         * Start a GPU/CPU timing measurement.
         *
         * <p>Call before starting a rendering pass. Only one timing measurement can be active at once,
         * so {@link #stopTimer} must be called before the next call to this method.</p>
         *
         * @throws IllegalStateException if the maximum number of queries are in progress already,
         *                               or the method is called multiple times in a row, or there is
         *                               a GPU error.
         */
        StartTimer();

        /**
         * Finish a GPU/CPU timing measurement.
         *
         * <p>Call after finishing all the drawing for a rendering pass. Only one timing measurement can
         * be active at once, so {@link #startTimer} must be called before the next call to this
         * method.</p>
         *
         * @throws IllegalStateException if no GL timer is currently started, or there is a GPU
         *                               error.
         */
        StopTimer();

        /**
         * Add a timestamp to a timing measurement. These are queued up and matched to completed
         * workload measurements as they become available.
         */
        AddTimestamp(
            [in] Int64 timestamp);

        /**
         * Returns the number of measurements so far that returned a valid duration
         * measurement.
         */
        GetCompletedQueryCount(
            [out] Int32* count);
    }

    interface IPerfMeasurementHelper {
        /**
         * Returns true if the Gl timing methods will work, false otherwise.
         *
         * <p>Must be called within a valid GL context.</p>
         */
        IsGlTimingSupported(
            [out] Boolean* result);
    }

    } // namespace Legacy
    } // namespace Camera2
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
