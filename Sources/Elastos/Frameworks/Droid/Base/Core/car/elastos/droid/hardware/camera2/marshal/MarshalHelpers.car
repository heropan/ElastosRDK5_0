
module
{
    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Camera2 {
    namespace Marshal {

    /**
     * Static functions in order to help implementing various marshaler functionality.
     *
     * <p>The intention is to statically import everything from this file into another file when
     * implementing a new marshaler (or marshal queryable).</p>
     *
     * <p>The helpers are centered around providing primitive knowledge of the native types,
     * such as the native size, the managed class wrappers, and various precondition checks.</p>
     */
    interface IMarshalHelpers {
        const Int32 SIZEOF_BYTE = 1;
        const Int32 SIZEOF_INT32 = 4;               // Integer.SIZE / Byte.SIZE; 32 / 8
        const Int32 SIZEOF_INT64 = 8;               // Long.SIZE / Byte.SIZE; 64 / 8
        const Int32 SIZEOF_FLOAT = 4;               // Float.SIZE / Byte.SIZE; 32 / 8
        const Int32 SIZEOF_DOUBLE = 8;              // Double.SIZE / Byte.SIZE; 64 / 8
        const Int32 SIZEOF_RATIONAL = 8;            // SIZEOF_INT32 * 2;

        /**
         * Get the size in bytes for the native camera metadata type.
         *
         * <p>This used to determine how many bytes it would take to encode/decode a single value
         * of that {@link nativeType}.</p>
         *
         * @param nativeType the native type, e.g.
         *        {@link android.hardware.camera2.impl.CameraMetadataNative#TYPE_BYTE TYPE_BYTE}.
         * @return size in bytes >= 1
         *
         * @throws UnsupportedOperationException if nativeType was not one of the built-in types
         */
        GetPrimitiveTypeSize(
            [in] Int32 nativeType,
            [out] Int32* value);

        /**
         * Ensure that the {@code klass} is one of the metadata-primitive classes.
         *
         * @param klass a non-{@code null} reference
         * @return {@code klass} instance
         *
         * @throws UnsupportedOperationException if klass was not one of the built-in classes
         * @throws NullPointerException if klass was null
         *
         * @see #isPrimitiveClass
         */
        CheckPrimitiveClass(
            [in] ClassID klass,
            [out] ClassID* outcla);

        /**
         * Checks whether or not {@code klass} is one of the metadata-primitive classes.
         *
         * <p>The following types (whether boxed or unboxed) are considered primitive:
         * <ul>
         * <li>byte
         * <li>int
         * <li>float
         * <li>double
         * <li>Rational
         * </ul>
         * </p>
         *
         * <p>This doesn't strictly follow the java understanding of primitive since
         * boxed objects are included, Rational is included, and other types such as char and
         * short are not included.</p>
         *
         * @param klass a {@link Class} instance; using {@code null} will return {@code false}
         * @return {@code true} if primitive, {@code false} otherwise
         */
        IsPrimitiveClass(
            [in] ClassID klass,
            [out] Boolean* value);

        /**
         * Wrap {@code klass} with its wrapper variant if it was a {@code Class} corresponding
         * to a Java primitive.
         *
         * <p>Non-primitive classes are passed through as-is.</p>
         *
         * <p>For example, for a primitive {@code int.class => Integer.class},
         * but for a non-primitive {@code Rational.class => Rational.class}.</p>
         *
         * @param klass a {@code Class} reference
         *
         * @return wrapped class object, or same class object if non-primitive
         */
        // @SuppressWarnings("unchecked")
        WrapClassIfPrimitive(
            [in] ClassID klass,
            [out] ClassID* outcl);

        /**
         * Return a human-readable representation of the {@code nativeType}, e.g. "TYPE_INT32"
         *
         * <p>Out-of-range values return a string with "UNKNOWN" as the prefix.</p>
         *
         * @param nativeType the native type
         *
         * @return human readable type name
         */
        ToStringNativeType(
            [in] Int32 nativeType,
            [out] String* str);

        /**
         * Ensure that the {@code nativeType} is one of the native types supported
         * by {@link CameraMetadataNative}.
         *
         * @param nativeType the native type
         *
         * @return the native type
         *
         * @throws UnsupportedOperationException if the native type was invalid
         */
        CheckNativeType(
            [in] Int32 nativeType,
            [out] Int32* value);

        /**
         * Ensure that the expected and actual native types are equal.
         *
         * @param expectedNativeType the expected native type
         * @param actualNativeType the actual native type
         * @return the actual native type
         *
         * @throws UnsupportedOperationException if the types are not equal
         */
        CheckNativeTypeEquals(
            [in] Int32 expectedNativeType,
            [in] Int32 actualNativeType,
            [out] Int32* value);
    }

    } // namespace Marshal
    } // namespace Camera2
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
