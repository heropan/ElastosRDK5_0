
module
{
    interface Elastos.Droid.Opengl.IEGLConfig;
    interface Elastos.Droid.Opengl.IEGLContext;
    interface Elastos.Droid.Opengl.IEGLDisplay;
    interface Elastos.Droid.Opengl.IEGLSurface;

    namespace Elastos {
    namespace Droid {
    namespace Opengl {

    [deprecated]
    interface IEGL14 {

        const Int32 _EGL_DEFAULT_DISPLAY                = 0;

        const Int32 EGL_FALSE                          = 0;
        const Int32 EGL_TRUE                           = 1;
        const Int32 EGL_SUCCESS                        = 0x3000;
        const Int32 EGL_NOT_INITIALIZED                = 0x3001;
        const Int32 EGL_BAD_ACCESS                     = 0x3002;
        const Int32 EGL_BAD_ALLOC                      = 0x3003;
        const Int32 EGL_BAD_ATTRIBUTE                  = 0x3004;
        const Int32 EGL_BAD_CONFIG                     = 0x3005;
        const Int32 EGL_BAD_CONTEXT                    = 0x3006;
        const Int32 EGL_BAD_CURRENT_SURFACE            = 0x3007;
        const Int32 EGL_BAD_DISPLAY                    = 0x3008;
        const Int32 EGL_BAD_MATCH                      = 0x3009;
        const Int32 EGL_BAD_NATIVE_PIXMAP              = 0x300A;
        const Int32 EGL_BAD_NATIVE_WINDOW              = 0x300B;
        const Int32 EGL_BAD_PARAMETER                  = 0x300C;
        const Int32 EGL_BAD_SURFACE                    = 0x300D;
        const Int32 EGL_CONTEXT_LOST                   = 0x300E;
        const Int32 EGL_BUFFER_SIZE                    = 0x3020;
        const Int32 EGL_ALPHA_SIZE                     = 0x3021;
        const Int32 EGL_BLUE_SIZE                      = 0x3022;
        const Int32 EGL_GREEN_SIZE                     = 0x3023;
        const Int32 EGL_RED_SIZE                       = 0x3024;
        const Int32 EGL_DEPTH_SIZE                     = 0x3025;
        const Int32 EGL_STENCIL_SIZE                   = 0x3026;
        const Int32 EGL_CONFIG_CAVEAT                  = 0x3027;
        const Int32 EGL_CONFIG_ID                      = 0x3028;
        const Int32 EGL_LEVEL                          = 0x3029;
        const Int32 EGL_MAX_PBUFFER_HEIGHT             = 0x302A;
        const Int32 EGL_MAX_PBUFFER_PIXELS             = 0x302B;
        const Int32 EGL_MAX_PBUFFER_WIDTH              = 0x302C;
        const Int32 EGL_NATIVE_RENDERABLE              = 0x302D;
        const Int32 EGL_NATIVE_VISUAL_ID               = 0x302E;
        const Int32 EGL_NATIVE_VISUAL_TYPE             = 0x302F;
        const Int32 EGL_SAMPLES                        = 0x3031;
        const Int32 EGL_SAMPLE_BUFFERS                 = 0x3032;
        const Int32 EGL_SURFACE_TYPE                   = 0x3033;
        const Int32 EGL_TRANSPARENT_TYPE               = 0x3034;
        const Int32 EGL_TRANSPARENT_BLUE_VALUE         = 0x3035;
        const Int32 EGL_TRANSPARENT_GREEN_VALUE        = 0x3036;
        const Int32 EGL_TRANSPARENT_RED_VALUE          = 0x3037;
        const Int32 EGL_NONE                           = 0x3038;
        const Int32 EGL_BIND_TO_TEXTURE_RGB            = 0x3039;
        const Int32 EGL_BIND_TO_TEXTURE_RGBA           = 0x303A;
        const Int32 EGL_MIN_SWAP_INTERVAL              = 0x303B;
        const Int32 EGL_MAX_SWAP_INTERVAL              = 0x303C;
        const Int32 EGL_LUMINANCE_SIZE                 = 0x303D;
        const Int32 EGL_ALPHA_MASK_SIZE                = 0x303E;
        const Int32 EGL_COLOR_BUFFER_TYPE              = 0x303F;
        const Int32 EGL_RENDERABLE_TYPE                = 0x3040;
        const Int32 EGL_MATCH_NATIVE_PIXMAP            = 0x3041;
        const Int32 EGL_CONFORMANT                     = 0x3042;
        const Int32 EGL_SLOW_CONFIG                    = 0x3050;
        const Int32 EGL_NON_CONFORMANT_CONFIG          = 0x3051;
        const Int32 EGL_TRANSPARENT_RGB                = 0x3052;
        const Int32 EGL_RGB_BUFFER                     = 0x308E;
        const Int32 EGL_LUMINANCE_BUFFER               = 0x308F;
        const Int32 EGL_NO_TEXTURE                     = 0x305C;
        const Int32 EGL_TEXTURE_RGB                    = 0x305D;
        const Int32 EGL_TEXTURE_RGBA                   = 0x305E;
        const Int32 EGL_TEXTURE_2D                     = 0x305F;
        const Int32 EGL_PBUFFER_BIT                    = 0x0001;
        const Int32 EGL_PIXMAP_BIT                     = 0x0002;
        const Int32 EGL_WINDOW_BIT                     = 0x0004;
        const Int32 EGL_VG_COLORSPACE_LINEAR_BIT       = 0x0020;
        const Int32 EGL_VG_ALPHA_FORMAT_PRE_BIT        = 0x0040;
        const Int32 EGL_MULTISAMPLE_RESOLVE_BOX_BIT    = 0x0200;
        const Int32 EGL_SWAP_BEHAVIOR_PRESERVED_BIT    = 0x0400;
        const Int32 EGL_OPENGL_ES_BIT                  = 0x0001;
        const Int32 EGL_OPENVG_BIT                     = 0x0002;
        const Int32 EGL_OPENGL_ES2_BIT                 = 0x0004;
        const Int32 EGL_OPENGL_BIT                     = 0x0008;
        const Int32 EGL_VENDOR                         = 0x3053;
        const Int32 EGL_VERSION                        = 0x3054;
        const Int32 EGL_EXTENSIONS                     = 0x3055;
        const Int32 EGL_CLIENT_APIS                    = 0x308D;
        const Int32 EGL_HEIGHT                         = 0x3056;
        const Int32 EGL_WIDTH                          = 0x3057;
        const Int32 EGL_LARGEST_PBUFFER                = 0x3058;
        const Int32 EGL_TEXTURE_FORMAT                 = 0x3080;
        const Int32 EGL_TEXTURE_TARGET                 = 0x3081;
        const Int32 EGL_MIPMAP_TEXTURE                 = 0x3082;
        const Int32 EGL_MIPMAP_LEVEL                   = 0x3083;
        const Int32 EGL_RENDER_BUFFER                  = 0x3086;
        const Int32 EGL_VG_COLORSPACE                  = 0x3087;
        const Int32 EGL_VG_ALPHA_FORMAT                = 0x3088;
        const Int32 EGL_HORIZONTAL_RESOLUTION          = 0x3090;
        const Int32 EGL_VERTICAL_RESOLUTION            = 0x3091;
        const Int32 EGL_PIXEL_ASPECT_RATIO             = 0x3092;
        const Int32 EGL_SWAP_BEHAVIOR                  = 0x3093;
        const Int32 EGL_MULTISAMPLE_RESOLVE            = 0x3099;
        const Int32 EGL_BACK_BUFFER                    = 0x3084;
        const Int32 EGL_SINGLE_BUFFER                  = 0x3085;
        const Int32 EGL_VG_COLORSPACE_sRGB             = 0x3089;
        const Int32 EGL_VG_COLORSPACE_LINEAR           = 0x308A;
        const Int32 EGL_VG_ALPHA_FORMAT_NONPRE         = 0x308B;
        const Int32 EGL_VG_ALPHA_FORMAT_PRE            = 0x308C;
        const Int32 EGL_DISPLAY_SCALING                = 10000;
        const Int32 EGL_BUFFER_PRESERVED               = 0x3094;
        const Int32 EGL_BUFFER_DESTROYED               = 0x3095;
        const Int32 EGL_OPENVG_IMAGE                   = 0x3096;
        const Int32 EGL_CONTEXT_CLIENT_TYPE            = 0x3097;
        const Int32 EGL_CONTEXT_CLIENT_VERSION         = 0x3098;
        const Int32 EGL_MULTISAMPLE_RESOLVE_DEFAULT    = 0x309A;
        const Int32 EGL_MULTISAMPLE_RESOLVE_BOX        = 0x309B;
        const Int32 EGL_OPENGL_ES_API                  = 0x30A0;
        const Int32 EGL_OPENVG_API                     = 0x30A1;
        const Int32 EGL_OPENGL_API                     = 0x30A2;
        const Int32 EGL_DRAW                           = 0x3059;
        const Int32 EGL_READ                           = 0x305A;
        const Int32 EGL_CORE_NATIVE_ENGINE             = 0x305B;

        // C function EGLint eglGetError ( void )
        EglGetError(
            [out] Int32* error);

        // C function EGLDisplay eglGetDisplay ( EGLNativeDisplayType display_id )
        EglGetDisplay(
            [in] Int32 display_id,
            [out] IEGLDisplay** display);

        // C function EGLDisplay eglGetDisplay ( EGLNativeDisplayType display_id )
        EglGetDisplay(
            [in] Int64 display_id,
            [out] IEGLDisplay** display);

        // C function EGLBoolean eglInitialize ( EGLDisplay dpy, EGLint *major, EGLint *minor )
        EglInitialize(
            [in] IEGLDisplay* dpy,
            [in] ArrayOf<Int32>* major,
            [in] Int32 majorOffset,
            [in] ArrayOf<Int32>* minor,
            [in] Int32 minorOffset,
            [out] Boolean* result);

        // C function EGLBoolean eglTerminate ( EGLDisplay dpy )
        EglTerminate(
            [in] IEGLDisplay* dpy,
            [out] Boolean* result);

        // C function const char * eglQueryString ( EGLDisplay dpy, EGLint name )
        EglQueryString(
            [in] IEGLDisplay* dpy,
            [in] Int32 name,
            [out] String* str);

        // C function EGLBoolean eglGetConfigs ( EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config )
        EglGetConfigs(
            [in] IEGLDisplay* dpy,
            [in] ArrayOf<IEGLConfig*>* configs,
            [in] Int32 configsOffset,
            [in] Int32 config_size,
            [in] ArrayOf<Int32>* num_config,
            [in] Int32 num_configOffset,
            [out] Boolean* result);

        // C function EGLBoolean eglChooseConfig ( EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config )
        EglChooseConfig(
            [in] IEGLDisplay* dpy,
            [in] ArrayOf<Int32>* attrib_list,
            [in] Int32 attrib_listOffset,
            [in] ArrayOf<IEGLConfig*>* configs,
            [in] Int32 configsOffset,
            [in] Int32 config_size,
            [in] ArrayOf<Int32>* num_config,
            [in] Int32 num_configOffset,
            [out] Boolean* result);

        // C function EGLBoolean eglGetConfigAttrib ( EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value )
        EglGetConfigAttrib(
            [in] IEGLDisplay* dpy,
            [in] IEGLConfig* config,
            [in] Int32 attribute,
            [in] ArrayOf<Int32>* value,
            [in] Int32 offset,
            [out] Boolean* result);

        EglCreateWindowSurface(
            [in] IEGLDisplay* dpy,
            [in] IEGLConfig* config,
            [in] IInterface* win,
            [in] ArrayOf<Int32>* attrib_list,
            [in] Int32 offset,
            [out] IEGLSurface** surface);

        // C function EGLSurface eglCreatePbufferSurface ( EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list )
        EglCreatePbufferSurface(
            [in] IEGLDisplay* dpy,
            [in] IEGLConfig* config,
            [in] ArrayOf<Int32>* attrib_list,
            [in] Int32 offset,
            [out] IEGLSurface** surface);

        // C function EGLSurface eglCreatePixmapSurface ( EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list )
        EglCreatePixmapSurface(
            [in] IEGLDisplay* dpy,
            [in] IEGLConfig* config,
            [in] Int32 pixmap,
            [in] ArrayOf<Int32>* attrib_list,
            [in] Int32 offset,
            [out] IEGLSurface** surface);

        // C function EGLBoolean eglDestroySurface ( EGLDisplay dpy, EGLSurface surface )
        EglDestroySurface(
            [in] IEGLDisplay* dpy,
            [in] IEGLSurface* surface,
            [out] Boolean* result);

        // C function EGLBoolean eglQuerySurface ( EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value )
        EglQuerySurface(
            [in] IEGLDisplay* dpy,
            [in] IEGLSurface* surface,
            [in] Int32 attribute,
            [in] ArrayOf<Int32>* value,
            [in] Int32 offset,
            [out] Boolean* result);

        // C function EGLBoolean eglBindAPI ( EGLenum api )
        EglBindAPI(
            [in] Int32 api,
            [out] Boolean* result);

        // C function EGLenum eglQueryAPI ( void )
        EglQueryAPI(
            [out] Int32* value);

        // C function EGLBoolean eglWaitClient ( void )
        EglWaitClient(
            [out] Boolean* result);

        // C function EGLBoolean eglReleaseThread ( void )
        EglReleaseThread(
            [out] Boolean* result);

        // C function EGLSurface eglCreatePbufferFromClientBuffer ( EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list )
        // TODO Deprecate the below method
        EglCreatePbufferFromClientBuffer(
            [in] IEGLDisplay* dpy,
            [in] Int32 buftype,
            [in] Int32 buffer,
            [in] IEGLConfig* config,
            [in] ArrayOf<Int32>* attrib_list,
            [in] Int32 offset,
            [out] IEGLSurface** surface);

        // TODO Unhide the below method
        /**
         * {@hide}
         */
        EglCreatePbufferFromClientBuffer(
            [in] IEGLDisplay* dpy,
            [in] Int32 buftype,
            [in] Int64 buffer,
            [in] IEGLConfig* config,
            [in] ArrayOf<Int32>* attrib_list,
            [in] Int32 offset,
            [out] IEGLSurface** surface);

        // C function EGLBoolean eglSurfaceAttrib ( EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value )
        EglSurfaceAttrib(
            [in] IEGLDisplay* dpy,
            [in] IEGLSurface* surface,
            [in] Int32 attribute,
            [in] Int32 value,
            [out] Boolean* result);

        // C function EGLBoolean eglBindTexImage ( EGLDisplay dpy, EGLSurface surface, EGLint buffer )
        EglBindTexImage(
            [in] IEGLDisplay* dpy,
            [in] IEGLSurface* surface,
            [in] Int32 buffer,
            [out] Boolean* result);

        // C function EGLBoolean eglReleaseTexImage ( EGLDisplay dpy, EGLSurface surface, EGLint buffer )
        EglReleaseTexImage(
            [in] IEGLDisplay* dpy,
            [in] IEGLSurface* surface,
            [in] Int32 buffer,
            [out] Boolean* result);

        // C function EGLBoolean eglSwapInterval ( EGLDisplay dpy, EGLint interval )
        EglSwapInterval(
            [in] IEGLDisplay* dpy,
            [in] Int32 interval,
            [out] Boolean* result);

        // C function EGLContext eglCreateContext ( EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list )
        EglCreateContext(
            [in] IEGLDisplay* dpy,
            [in] IEGLConfig* config,
            [in] IEGLContext* share_context,
            [in] ArrayOf<Int32>* attrib_list,
            [in] Int32 offset,
            [out] IEGLContext** context);

        // C function EGLBoolean eglDestroyContext ( EGLDisplay dpy, EGLContext ctx )
        EglDestroyContext(
            [in] IEGLDisplay* dpy,
            [in] IEGLContext* ctx,
            [out] Boolean* result);

        // C function EGLBoolean eglMakeCurrent ( EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx )
        EglMakeCurrent(
            [in] IEGLDisplay* dpy,
            [in] IEGLSurface* draw,
            [in] IEGLSurface* read,
            [in] IEGLContext* ctx,
            [out] Boolean* result);

        // C function EGLContext eglGetCurrentContext ( void )
        EglGetCurrentContext(
            [out] IEGLContext** context);

        // C function EGLSurface eglGetCurrentSurface ( EGLint readdraw )
        EglGetCurrentSurface(
            [in] Int32 readdraw,
            [out] IEGLSurface** surface);

        // C function EGLDisplay eglGetCurrentDisplay ( void )
        EglGetCurrentDisplay(
            [out] IEGLDisplay** display);

        // C function EGLBoolean eglQueryContext ( EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value )
        EglQueryContext(
            [in] IEGLDisplay* dpy,
            [in] IEGLContext* ctx,
            [in] Int32 attribute,
            [in] ArrayOf<Int32>* value,
            [in] Int32 offset,
            [out] Boolean* result);

        // C function EGLBoolean eglWaitGL ( void )
        EglWaitGL(
            [out] Boolean* result);

        // C function EGLBoolean eglWaitNative ( EGLint engine )
        EglWaitNative(
            [in] Int32 engine,
            [out] Boolean* result);

        // C function EGLBoolean eglSwapBuffers ( EGLDisplay dpy, EGLSurface surface )
        EglSwapBuffers(
            [in] IEGLDisplay* dpy,
            [in] IEGLSurface* surface,
            [out] Boolean* result);

        // C function EGLBoolean eglCopyBuffers ( EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target )
        EglCopyBuffers(
            [in] IEGLDisplay* dpy,
            [in] IEGLSurface* surface,
            [in] Int32 target,
            [out] Boolean* result);
    }

    interface IEGL14Helper {
        GetNoContext(
            [out] IEGLContext** dsp);

        SetNoContext(
            [in] IEGLContext* dsp);

        GetNoDisplay(
            [out] IEGLDisplay** dsp);

        SetNoDisplay(
            [in] IEGLDisplay* dsp);

        GetNoSurface(
            [out] IEGLSurface** dsp);

        SetNoSurface(
            [in] IEGLSurface* dsp);
    }

    } // namespace Opengl
    } // namespace Droid
    } // namespace Elastos
}
