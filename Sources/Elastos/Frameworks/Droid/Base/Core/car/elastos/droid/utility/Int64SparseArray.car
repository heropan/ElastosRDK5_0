module
{
    namespace Elastos {
    namespace Droid {
    namespace Utility {
    /**
     * @Involve
     * interface ICloneable;
     */
    interface IInt64SparseArray {
        /**
         * Gets the Object mapped from the specified key, or <code>null</code>
         * if no such mapping has been made.
         */
        Get(
            [in] Int64 key,
            [out] IInterface** outface);

        /**
         * Gets the Object mapped from the specified key, or the specified Object
         * if no such mapping has been made.
         */
        // @SuppressWarnings("unchecked")
        Get(
            [in] Int64 key,
            [in] IInterface* valueIfKeyNotFound,
            [out] IInterface** outface);

        /**
         * Removes the mapping from the specified key, if there was any.
         */
        Delete(
            [in] Int64 key);

        /**
         * Alias for {@link #delete(long)}.
         */
        Remove(
            [in] Int64 key);

        /**
         * Removes the mapping at the specified index.
         */
        RemoveAt(
            [in] Int32 index);

        /**
         * Adds a mapping from the specified key to the specified value,
         * replacing the previous mapping from the specified key if there
         * was one.
         */
        Put(
            [in] Int64 key,
            [in] IInterface* value);

        /**
         * Returns the number of key-value mappings that this LongSparseArray
         * currently stores.
         */
        GetSize(
            [out] Int32* value);

        /**
         * Given an index in the range <code>0...size()-1</code>, returns
         * the key from the <code>index</code>th key-value mapping that this
         * LongSparseArray stores.
         *
         * <p>The keys corresponding to indices in ascending order are guaranteed to
         * be in ascending order, e.g., <code>keyAt(0)</code> will return the
         * smallest key and <code>keyAt(size()-1)</code> will return the largest
         * key.</p>
         */
        KeyAt(
            [in] Int32 index,
            [out] Int64* value);

        /**
         * Given an index in the range <code>0...size()-1</code>, returns
         * the value from the <code>index</code>th key-value mapping that this
         * LongSparseArray stores.
         *
         * <p>The values corresponding to indices in ascending order are guaranteed
         * to be associated with keys in ascending order, e.g.,
         * <code>valueAt(0)</code> will return the value associated with the
         * smallest key and <code>valueAt(size()-1)</code> will return the value
         * associated with the largest key.</p>
         */
        ValueAt(
            [in] Int32 index,
            [out] IInterface** outface);

        /**
         * Given an index in the range <code>0...size()-1</code>, sets a new
         * value for the <code>index</code>th key-value mapping that this
         * LongSparseArray stores.
         */
        SetValueAt(
            [in] Int32 index,
            [in] IInterface* value);

        /**
         * Returns the index for which {@link #keyAt} would return the
         * specified key, or a negative number if the specified
         * key is not mapped.
         */
        IndexOfKey(
            [in] Int64 key,
            [out] Int32* value);

        /**
         * Returns an index for which {@link #valueAt} would return the
         * specified key, or a negative number if no keys map to the
         * specified value.
         * Beware that this is a linear search, unlike lookups by key,
         * and that multiple keys can map to the same value and this will
         * find only one of them.
         */
        IndexOfValue(
            [in] IInterface* value,
            [out] Int32* outval);

        /**
         * Removes all key-value mappings from this LongSparseArray.
         */
        Clear();

        /**
         * Puts a key/value pair into the array, optimizing for the case where
         * the key is greater than all existing keys in the array.
         */
        Append(
            [in] Int64 key,
            [in] IInterface* value);
    }

    } // namespace Utility
    } // namespace Droid
    } // namespace Elastos
}
