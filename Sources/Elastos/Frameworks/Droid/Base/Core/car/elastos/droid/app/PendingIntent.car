module
{
    interface Elastos.Droid.Content.IIntentSender;
    interface Elastos.Droid.Content.IIIntentSender;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.IUserHandle;
    interface Elastos.Droid.Os.IBundle;

    namespace Elastos {
    namespace Droid {
    namespace App {

    interface IPendingIntentOnFinished;


    /**
     * A description of an Intent and target action to perform with it. Instances
     * of this class are created with getActivity(Context, int, Intent, int),
     * getActivities(Context, int, Intent[], int), getBroadcast(Context, int,
     * Intent, int), and getService(Context, int, Intent, int); the returned object
     * can be handed to other applications so that they can perform the action you
     * described on your behalf at a later time.
     *
     * @sa getActivity(Context, int, Intent, int)
     * @sa getActivities(Context, int, Intent[], int)
     * @sa getBroadcast(Context, int, Intent, int)
     * @sa getService(Context, int, Intent, int)
     * <p>
     * By giving a PendingIntent to another application, you are granting it the
     * right to perform the operation you have specified as if the other
     * application was yourself (with the same permissions and identity). As such,
     * you should be careful about how you build the PendingIntent: almost always,
     * for example, the base Intent you supply should have the component name
     * explicitly set to one of your own components, to ensure it is ultimately
     * sent there and nowhere else.
     * <p>
     * A PendingIntent itself is simply a reference to a token maintained by the
     * system describing the original data used to retrieve it. This means that,
     * even if its owning application's process is killed, the PendingIntent itself
     * will remain usable from other processes that have been given it. If the
     * creating application later re-retrieves the same kind of PendingIntent (same
     * operation, same Intent action, data, categories, and components, and same
     * flags), it will receive a PendingIntent representing the same token if that
     * is still valid, and can thus call cancel() to remove it.
     *
     * @sa cancel()
     * <p>
     * Because of this behavior, it is important to know when two Intents are
     * considered to be the same for purposes of retrieving a PendingIntent. A
     * common mistake people make is to create multiple PendingIntent objects with
     * Intents that only vary in their "extra" contents, expecting to get a
     * different PendingIntent each time. This does not happen. The parts of the
     * Intent that are used for matching are the same ones defined by Intent.
     * filterEquals. If you use two Intent objects that are equivalent as per Intent
     *.filterEquals, then you will get the same PendingIntent for both of them.
     *
     * @sa Intent.filterEquals
     * <p>
     * There are two typical ways to deal with this.
     * <p>
     * If you truly need multiple distinct PendingIntent objects active at the same
     * time (such as to use as two notifications that are both shown at the same
     * time), then you will need to ensure there is something that is different
     * about them to associate them with different PendingIntents. This may be any
     * of the Intent attributes considered by Intent.filterEquals, or different
     * request code integers supplied to getActivity(Context, int, Intent, int),
     * getActivities(Context, int, Intent[], int), getBroadcast(Context, int,
     * Intent, int), or getService(Context, int, Intent, int).
     *
     * @sa getActivity(Context, int, Intent, int)
     * @sa getActivities(Context, int, Intent[], int)
     * @sa getBroadcast(Context, int, Intent, int)
     * @sa getService(Context, int, Intent, int)
     * <p>
     * If you only need one PendingIntent active at a time for any of the Intents
     * you will use, then you can alternatively use the flags FLAG_CANCEL_CURRENT
     * or FLAG_UPDATE_CURRENT to either cancel or modify whatever current
     * PendingIntent is associated with the Intent you are supplying.
     *
     * @sa FLAG_CANCEL_CURRENT
     * @sa FLAG_UPDATE_CURRENT
     */
    [local, parcelable]
    /**
     * @Invovle
     * inteface IParcelable
     */
    interface IPendingIntent {
        /**
         * Flag indicating that this PendingIntent can be used only once.
         * For use with {@link #getActivity}, {@link #getBroadcast}, and
         * {@link #getService}. <p>If set, after
         * {@link #send()} is called on it, it will be automatically
         * canceled for you and any future attempt to send through it will fail.
         */
        const Int32 FLAG_ONE_SHOT = 1<<30;
        /**
         * Flag indicating that if the described PendingIntent does not
         * already exist, then simply return null instead of creating it.
         * For use with {@link #getActivity}, {@link #getBroadcast}, and
         * {@link #getService}.
         */
        const Int32 FLAG_NO_CREATE = 1<<29;
        /**
         * Flag indicating that if the described PendingIntent already exists,
         * the current one should be canceled before generating a new one.
         * For use with {@link #getActivity}, {@link #getBroadcast}, and
         * {@link #getService}. <p>You can use
         * this to retrieve a new PendingIntent when you are only changing the
         * extra data in the Intent; by canceling the previous pending intent,
         * this ensures that only entities given the new data will be able to
         * launch it.  If this assurance is not an issue, consider
         * {@link #FLAG_UPDATE_CURRENT}.
         */
        const Int32 FLAG_CANCEL_CURRENT = 1<<28;
        /**
         * Flag indicating that if the described PendingIntent already exists,
         * then keep it but replace its extra data with what is in this new
         * Intent. For use with {@link #getActivity}, {@link #getBroadcast}, and
         * {@link #getService}. <p>This can be used if you are creating intents where only the
         * extras change, and don't care that any entities that received your
         * previous PendingIntent will be able to launch it with your new
         * extras even if they are not explicitly given to it.
         */
        const Int32 FLAG_UPDATE_CURRENT = 1<<27;

        /**
         * Retrieve a IntentSender object that wraps the existing sender of the PendingIntent
         *
         * @return Returns a IntentSender object that wraps the sender of PendingIntent
         *
         */
        GetIntentSender(
            [out] IIntentSender** intentSender);

        /**
         * Cancel a currently active PendingIntent.  Only the original application
         * owning a PendingIntent can cancel it.
         */
        Cancel();

        /**
         * Perform the operation associated with this PendingIntent.
         *
         * @see #send(Context, int, Intent, android.app.PendingIntent.OnFinished, Handler)
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * CanceledException Throws CanceledException | if the PendingIntent is no longer allowing more intents to be sent through it.
         */
        Send();

        /**
         * Perform the operation associated with this PendingIntent.
         *
         * @param code Result code to supply back to the PendingIntent's target.
         *
         * @see #send(Context, int, Intent, android.app.PendingIntent.OnFinished, Handler)
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * CanceledException Throws CanceledException | if the PendingIntent is no longer allowing more intents to be sent through it.
         */
        Send(
            [in] Int32 code);

        /**
         * Perform the operation associated with this PendingIntent, allowing the
         * caller to specify information about the Intent to use.
         *
         * @param context The Context of the caller.
         * @param code Result code to supply back to the PendingIntent's target.
         * @param intent Additional Intent data.  See Intent#fillIn
         * Intent.fillIn() for information on how this is applied to the
         * original Intent.
         *
         * @sa Intent#fillIn Intent.fillIn()
         *
         * @see #send(Context, int, Intent, android.app.PendingIntent.OnFinished, Handler)
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * CanceledException Throws CanceledException | if the PendingIntent is no longer allowing more intents to be sent through it.
         */
        Send(
            [in] IContext* ctx,
            [in] Int32 code,
            [in] IIntent* intent);

        /**
         * Perform the operation associated with this PendingIntent, allowing the
         * caller to be notified when the send has completed.
         *
         * @param code Result code to supply back to the PendingIntent's target.
         * @param onFinished The object to call back on when the send has
         * completed, or null for no callback.
         * @param handler Handler identifying the thread on which the callback
         * should happen.  If null, the callback will happen from the thread
         * pool of the process.
         *
         * @see #send(Context, int, Intent, android.app.PendingIntent.OnFinished, Handler)
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * CanceledException Throws CanceledException | if the PendingIntent is no longer allowing more intents to be sent through it.
         */
        Send(
            [in] Int32 code,
            [in] IPendingIntentOnFinished* onFinished,
            [in] IHandler* handler);

        /**
         * Perform the operation associated with this PendingIntent, allowing the
         * caller to specify information about the Intent to use and be notified
         * when the send has completed.
         *
         * <p>For the intent parameter, a PendingIntent
         * often has restrictions on which fields can be supplied here, based on
         * how the PendingIntent was retrieved in #getActivity,
         * #getBroadcast, or #getService.
         *
         * @sa #getActivity
         * @sa #getBroadcast
         * @sa #getService
         *
         * @param context The Context of the caller.  This may be null if
         * <var>intent</var> is also null.
         * @param code Result code to supply back to the PendingIntent's target.
         * @param intent Additional Intent data.  See Intent#fillIn
         * Intent.fillIn() for information on how this is applied to the
         * original Intent.  Use null to not modify the original Intent.
         * @param onFinished The object to call back on when the send has
         * completed, or null for no callback.
         * @param handler Handler identifying the thread on which the callback
         * should happen.  If null, the callback will happen from the thread
         * pool of the process.
         *
         * @sa Intent#fillIn Intent.fillIn()
         *
         * @see #send()
         * @see #send(int)
         * @see #send(Context, int, Intent)
         * @see #send(int, android.app.PendingIntent.OnFinished, Handler)
         * @see #send(Context, int, Intent, OnFinished, Handler, String)
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * CanceledException Throws CanceledException | if the PendingIntent is no longer allowing more intents to be sent through it.
         */
        Send(
            [in] IContext* ctx,
            [in] Int32 code,
            [in] IIntent* intent,
            [in] IPendingIntentOnFinished* onFinished,
            [in] IHandler* handler);

        /**
         * Perform the operation associated with this PendingIntent, allowing the
         * caller to specify information about the Intent to use and be notified
         * when the send has completed.
         *
         * <p>For the intent parameter, a PendingIntent
         * often has restrictions on which fields can be supplied here, based on
         * how the PendingIntent was retrieved in #getActivity,
         * #getBroadcast, or #getService.
         *
         * @sa #getActivity
         * @sa #getBroadcast
         * @sa #getService
         *
         * @param context The Context of the caller.  This may be null if
         * <var>intent</var> is also null.
         * @param code Result code to supply back to the PendingIntent's target.
         * @param intent Additional Intent data.  See Intent#fillIn
         * Intent.fillIn() for information on how this is applied to the
         * original Intent.  Use null to not modify the original Intent.
         * @param onFinished The object to call back on when the send has
         * completed, or null for no callback.
         * @param handler Handler identifying the thread on which the callback
         * should happen.  If null, the callback will happen from the thread
         * pool of the process.
         * @param requiredPermission Name of permission that a recipient of the PendingIntent
         * is required to hold.  This is only valid for broadcast intents, and
         * corresponds to the permission argument in
         * Context#sendBroadcast(Intent, String) Context.sendOrderedBroadcast(Intent, String).
         * If null, no permission is required.
         *
         * @sa Intent#fillIn Intent.fillIn()
         * @sa Context#sendBroadcast(Intent, String) Context.sendOrderedBroadcast(Intent, String)
         *
         * @see #send()
         * @see #send(int)
         * @see #send(Context, int, Intent)
         * @see #send(int, android.app.PendingIntent.OnFinished, Handler)
         * @see #send(Context, int, Intent, OnFinished, Handler)
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * CanceledException Throws CanceledException | if the PendingIntent is no longer allowing more intents to be sent through it.
         */
        Send(
            [in] IContext* ctx,
            [in] Int32 code,
            [in] IIntent* intent,
            [in] IPendingIntentOnFinished* onFinished,
            [in] IHandler* handler,
            [in] String requiredPermission);

        /**
         * @deprecated Renamed to #getCreatorPackage().
         *
         * @sa #getCreatorPackage()
         */
        //@Deprecated
        GetTargetPackage(
            [out] String* pkg);

        /**
         * Return the package name of the application that created this
         * PendingIntent, that is the identity under which you will actually be
         * sending the Intent.  The returned string is supplied by the system, so
         * that an application can not spoof its package.
         *
         * @return The package name of the PendingIntent, or null if there is
         * none associated with it.
         */
        GetCreatorPackage(
            [out] String* pkgName);

        /**
         * Return the uid of the application that created this
         * PendingIntent, that is the identity under which you will actually be
         * sending the Intent.  The returned integer is supplied by the system, so
         * that an application can not spoof its uid.
         *
         * @return The uid of the PendingIntent, or -1 if there is
         * none associated with it.
         */
        GetCreatorUid(
            [out] Int32* uid);

        /**
         * Return the user handle of the application that created this
         * PendingIntent, that is the user under which you will actually be
         * sending the Intent.  The returned UserHandle is supplied by the system, so
         * that an application can not spoof its user.  See
         * android.os.Process#myUserHandle() Process.myUserHandle() for
         * more explanation of user handles.
         *
         * @sa android.os.Process#myUserHandle() Process.myUserHandle()
         *
         * @return The user handle of the PendingIntent, or null if there is
         * none associated with it.
         */
        GetCreatorUserHandle(
            [out] IUserHandle** handle);

        /**
         * @hide
         * Check to verify that this PendingIntent targets a specific package.
         */
        IsTargetedToPackage(
            [out] Boolean* targeted);

        /**
         * @hide
         * Check whether this PendingIntent will launch an Activity.
         */
        IsActivity(
            [out] Boolean* launched);

        /**
         * @hide
         * Return the Intent of this PendingIntent.
         */
        GetIntent(
            [out] IIntent** intent);

        /**
         * @hide
         * Return descriptive tag for this PendingIntent.
         */
        GetTag(
            [in] String prefix,
            [out] String* str);

        /** @hide */
        GetTarget(
            [out] IIIntentSender** target);
    }

    [deprecated, local]
    interface IPendingIntentHelper {
        /**
         * Retrieve a PendingIntent that will start a new activity, like calling
         * Context#startActivity(Intent) Context.startActivity(Intent).
         * Note that the activity will be started outside of the context of an
         * existing activity, so you must use the Intent#FLAG_ACTIVITY_NEW_TASK
         * Intent.FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.
         *
         * @sa Context#startActivity(Intent) Context.startActivity(Intent)
         * @sa Intent#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK
         *
         * @param context The Context in which this PendingIntent should start
         * the activity.
         * @param requestCode Private request code for the sender (currently
         * not used).
         * @param intent Intent of the activity to be launched.
         * @param flags May be #FLAG_ONE_SHOT, #FLAG_NO_CREATE,
         * #FLAG_CANCEL_CURRENT, #FLAG_UPDATE_CURRENT,
         * or any of the flags as supported by
         * Intent#fillIn Intent.fillIn() to control which unspecified parts
         * of the intent that can be supplied when the actual send happens.
         *
         * @sa #FLAG_ONE_SHOT
         * @sa #FLAG_NO_CREATE
         * @sa #FLAG_CANCEL_CURRENT
         * @sa #FLAG_UPDATE_CURRENT
         * @sa Intent#fillIn Intent.fillIn()
         *
         * @return Returns an existing or new PendingIntent matching the given
         * parameters.  May return null only if #FLAG_NO_CREATE has been
         * supplied.
         *
         * @sa #FLAG_NO_CREATE
         */
         GetActivity(
            [in] IContext* ctx,
            [in] Int32 requestCode,
            [in] IIntent* intent,
            [in] Int32 flags,
            [out] IPendingIntent** pendingIntent);

        /**
         * Retrieve a PendingIntent that will start a new activity, like calling
         * Context#startActivity(Intent) Context.startActivity(Intent).
         * Note that the activity will be started outside of the context of an
         * existing activity, so you must use the Intent#FLAG_ACTIVITY_NEW_TASK
         * Intent.FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.
         *
         * @sa Context#startActivity(Intent) Context.startActivity(Intent)
         * @sa Intent#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK
         *
         * @param context The Context in which this PendingIntent should start
         * the activity.
         * @param requestCode Private request code for the sender (currently
         * not used).
         * @param intent Intent of the activity to be launched.
         * @param flags May be #FLAG_ONE_SHOT}, #FLAG_NO_CREATE,
         * #FLAG_CANCEL_CURRENT, #FLAG_UPDATE_CURRENT,
         * or any of the flags as supported by
         * Intent#fillIn Intent.fillIn() to control which unspecified parts
         * of the intent that can be supplied when the actual send happens.
         * @param options Additional options for how the Activity should be started.
         * May be null if there are no options.
         *
         * @sa #FLAG_ONE_SHOT
         * @sa #FLAG_NO_CREATE
         * @sa #FLAG_CANCEL_CURRENT
         * @sa #FLAG_UPDATE_CURRENT
         * @sa Intent#fillIn Intent.fillIn()
         *
         * @return Returns an existing or new PendingIntent matching the given
         * parameters.  May return null only if #FLAG_NO_CREATE has been
         * supplied.
         *
         * @sa #FLAG_NO_CREATE
         */
        GetActivity(
            [in] IContext* ctx,
            [in] Int32 requestCode,
            [in] IIntent* intent,
            [in] Int32 flags,
            [in] IBundle* options,
            [out] IPendingIntent** pendingIntent);

        /**
         * @hide
         * Note that UserHandle.CURRENT will be interpreted at the time the
         * activity is started, not when the pending intent is created.
         */
        GetActivityAsUser(
            [in] IContext* ctx,
            [in] Int32 requestCode,
            [in] IIntent* intent,
            [in] Int32 flags,
            [in] IBundle* options,
            [in] IUserHandle* user,
            [out] IPendingIntent** pendingIntent);

        /**
         * Like #getActivity(Context, int, Intent, int), but allows an
         * array of Intents to be supplied.  The first Intent in the array is
         * taken as the primary key for the PendingIntent, like the single Intent
         * given to #getActivity(Context, int, Intent, int).  Upon sending
         * the resulting PendingIntent, all of the Intents are started in the same
         * way as they would be by passing them to Context#startActivities(Intent[]).
         *
         * @sa #getActivity(Context, int, Intent, int)
         * @sa #getActivity(Context, int, Intent, int)
         * @sa Context#startActivities(Intent[])
         *
         * <p class="note">
         * The <em>first</em> intent in the array will be started outside of the context of an
         * existing activity, so you must use the Intent#FLAG_ACTIVITY_NEW_TASK
         * Intent.FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.  (Activities after
         * the first in the array are started in the context of the previous activity
         * in the array, so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.)
         *
         * @sa Intent#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK
         * </p>
         *
         * <p class="note">
         * The <em>last</em> intent in the array represents the key for the
         * PendingIntent.  In other words, it is the significant element for matching
         * (as done with the single intent given to #getActivity(Context, int, Intent, int),
         * its content will be the subject of replacement by
         * #send(Context, int, Intent) and #FLAG_UPDATE_CURRENT, etc.
         * This is because it is the most specific of the supplied intents, and the
         * UI the user actually sees when the intents are started.
         *
         * @sa #getActivity(Context, int, Intent, int)
         * @sa #send(Context, int, Intent)
         * @sa #FLAG_UPDATE_CURRENT
         * </p>
         *
         * @param context The Context in which this PendingIntent should start
         * the activity.
         * @param requestCode Private request code for the sender (currently
         * not used).
         * @param intents Array of Intents of the activities to be launched.
         * @param flags May be #FLAG_ONE_SHOT, #FLAG_NO_CREATE,
         * #FLAG_CANCEL_CURRENT, #FLAG_UPDATE_CURRENT,
         * or any of the flags as supported by
         * Intent#fillIn Intent.fillIn() to control which unspecified parts
         * of the intent that can be supplied when the actual send happens.
         *
         * @sa #FLAG_ONE_SHOT
         * @sa #FLAG_NO_CREATE
         * @sa #FLAG_CANCEL_CURRENT
         * @sa #FLAG_UPDATE_CURRENT
         * @sa Intent#fillIn Intent.fillIn()
         *
         * @return Returns an existing or new PendingIntent matching the given
         * parameters.  May return null only if #FLAG_NO_CREATE has been
         * supplied.
         *
         * @sa #FLAG_NO_CREATE
         */
        GetActivities(
            [in] IContext* ctx,
            [in] Int32 requestCode,
            [in] ArrayOf<IIntent*>* intents,
            [in] Int32 flags,
            [out] IPendingIntent** pendingIntent);

        /**
         * Like #getActivity(Context, int, Intent, int), but allows an
         * array of Intents to be supplied.  The first Intent in the array is
         * taken as the primary key for the PendingIntent, like the single Intent
         * given to #getActivity(Context, int, Intent, int).  Upon sending
         * the resulting PendingIntent, all of the Intents are started in the same
         * way as they would be by passing them to Context#startActivities(Intent[]).
         *
         * @sa #getActivity(Context, int, Intent, int)
         * @sa #getActivity(Context, int, Intent, int)
         * @sa Context#startActivities(Intent[])
         *
         * <p class="note">
         * The <em>first</em> intent in the array will be started outside of the context of an
         * existing activity, so you must use the Intent#FLAG_ACTIVITY_NEW_TASK
         * Intent.FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.  (Activities after
         * the first in the array are started in the context of the previous activity
         * in the array, so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.)
         *
         * @sa Intent#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK
         * </p>
         *
         * <p class="note">
         * The <em>last</em> intent in the array represents the key for the
         * PendingIntent.  In other words, it is the significant element for matching
         * (as done with the single intent given to #getActivity(Context, int, Intent, int),
         * its content will be the subject of replacement by
         * #send(Context, int, Intent)} and #FLAG_UPDATE_CURRENT, etc.
         * This is because it is the most specific of the supplied intents, and the
         * UI the user actually sees when the intents are started.
         *
         * @sa #getActivity(Context, int, Intent, int)
         * @sa #send(Context, int, Intent)
         * @sa #FLAG_UPDATE_CURRENT
         * </p>
         *
         * @param context The Context in which this PendingIntent should start
         * the activity.
         * @param requestCode Private request code for the sender (currently
         * not used).
         * @param intents Array of Intents of the activities to be launched.
         * @param flags May be #FLAG_ONE_SHOT, #FLAG_NO_CREATE,
         * #FLAG_CANCEL_CURRENT, #FLAG_UPDATE_CURRENT,
         * or any of the flags as supported by
         * Intent#fillIn Intent.fillIn() to control which unspecified parts
         * of the intent that can be supplied when the actual send happens.
         *
         * @sa #FLAG_ONE_SHOT
         * @sa #FLAG_NO_CREATE
         * @sa #FLAG_CANCEL_CURRENT
         * @sa #FLAG_UPDATE_CURRENT
         * @sa Intent#fillIn Intent.fillIn()
         *
         * @return Returns an existing or new PendingIntent matching the given
         * parameters.  May return null only if #FLAG_NO_CREATE has been
         * supplied.
         *
         * @sa #FLAG_NO_CREATE
         */
        GetActivities(
            [in] IContext* ctx,
            [in] Int32 requestCode,
            [in] ArrayOf<IIntent*>* intents,
            [in] Int32 flags,
            [in] IBundle* options,
            [out] IPendingIntent** pendingIntent);

         /**
         * @hide
         * Note that UserHandle.CURRENT will be interpreted at the time the
         * activity is started, not when the pending intent is created.
         */
        GetActivitiesAsUser(
            [in] IContext* ctx,
            [in] Int32 requestCode,
            [in] ArrayOf<IIntent*>* intents,
            [in] Int32 flags,
            [in] IBundle* options,
            [in] IUserHandle* user,
            [out] IPendingIntent** pendingIntent);

        /**
         * Retrieve a PendingIntent that will perform a broadcast, like calling
         * Context#sendBroadcast(Intent) Context.sendBroadcast().
         *
         * @sa Context#sendBroadcast(Intent) Context.sendBroadcast()
         *
         * @param context The Context in which this PendingIntent should perform
         * the broadcast.
         * @param requestCode Private request code for the sender (currently
         * not used).
         * @param intent The Intent to be broadcast.
         * @param flags May be #FLAG_ONE_SHOT, #FLAG_NO_CREATE,
         * #FLAG_CANCEL_CURRENT, #FLAG_UPDATE_CURRENT,
         * or any of the flags as supported by
         * Intent#fillIn Intent.fillIn()} to control which unspecified parts
         * of the intent that can be supplied when the actual send happens.
         *
         * @sa #FLAG_ONE_SHOT
         * @sa #FLAG_NO_CREATE
         * @sa #FLAG_CANCEL_CURRENT
         * @sa #FLAG_UPDATE_CURRENT
         * @sa Intent#fillIn Intent.fillIn()
         *
         * @return Returns an existing or new PendingIntent matching the given
         * parameters.  May return null only if #FLAG_NO_CREATE has been
         * supplied.
         *
         * @sa #FLAG_NO_CREATE
         */
        GetBroadcast(
            [in] IContext* ctx,
            [in] Int32 requestCode,
            [in] IIntent* intent,
            [in] Int32 flags,
            [out] IPendingIntent** pendingIntent);

        /**
         * @hide
         * Note that UserHandle.CURRENT will be interpreted at the time the
         * broadcast is sent, not when the pending intent is created.
         */
        GetBroadcastAsUser(
            [in] IContext* ctx,
            [in] Int32 requestCode,
            [in] IIntent* intent,
            [in] Int32 flags,
            [in] IUserHandle* userHandle,
            [out] IPendingIntent** pendingIntent);

         /**
         * Retrieve a PendingIntent that will perform a broadcast, like calling
         * Context#sendBroadcast(Intent) Context.sendBroadcast().
         *
         * @sa Context#sendBroadcast(Intent) Context.sendBroadcast()
         *
         * @param context The Context in which this PendingIntent should perform
         * the broadcast.
         * @param requestCode Private request code for the sender (currently
         * not used).
         * @param intent The Intent to be broadcast.
         * @param flags May be #FLAG_ONE_SHOT, #FLAG_NO_CREATE,
         * #FLAG_CANCEL_CURRENT, #FLAG_UPDATE_CURRENT,
         * or any of the flags as supported by
         * Intent#fillIn Intent.fillIn()} to control which unspecified parts
         * of the intent that can be supplied when the actual send happens.
         *
         * @sa #FLAG_ONE_SHOT
         * @sa #FLAG_NO_CREATE
         * @sa #FLAG_CANCEL_CURRENT
         * @sa #FLAG_UPDATE_CURRENT
         * @sa Intent#fillIn Intent.fillIn()
         *
         * @return Returns an existing or new PendingIntent matching the given
         * parameters.  May return null only if #FLAG_NO_CREATE has been
         * supplied.
         *
         * @sa #FLAG_NO_CREATE
         */
        GetService(
            [in] IContext* ctx,
            [in] Int32 requestCode,
            [in] IIntent* intent,
            [in] Int32 flags,
            [out] IPendingIntent** pendingIntent);

        /**
         * Convenience function for writing either a PendingIntent or null pointer to
         * a Parcel.  You must use this with #readPendingIntentOrNullFromParcel
         * for later reading it.
         *
         * @sa #readPendingIntentOrNullFromParcel
         *
         * @param sender The PendingIntent to write, or null.
         * @param out Where to write the PendingIntent.
         */
        WritePendingIntentOrNullToParcel(
            [in] IPendingIntent* sender,
            [in] IParcel* dest);

        /**
         * Convenience function for reading either a Messenger or null pointer from
         * a Parcel.  You must have previously written the Messenger with
         * #writePendingIntentOrNullToParcel.
         *
         * @sa #writePendingIntentOrNullToParcel
         *
         * @param in The Parcel containing the written Messenger.
         *
         * @return Returns the Messenger read from the Parcel, or null if null had
         * been written.
         */
        ReadPendingIntentOrNullFromParcel(
            [in] IParcel* src,
            [out] IPendingIntent** messenger);
    }

    /**
     * Callback interface for discovering when a send operation has
     * completed.  Primarily for use with a PendingIntent that is
     * performing a broadcast, this provides the same information as
     * calling Context#sendOrderedBroadcast(Intent, String,
     * android.content.BroadcastReceiver, Handler, int, String, Bundle)
     * Context.sendBroadcast() with a final BroadcastReceiver.
     *
     * @sa Context#sendOrderedBroadcast(Intent, String, android.content.BroadcastReceiver, Handler, int, String, Bundle) Context.sendBroadcast()
     */
    interface IPendingIntentOnFinished {
        /**
         * Called when a send operation as completed.
         *
         * @param pendingIntent The PendingIntent this operation was sent through.
         * @param intent The original Intent that was sent.
         * @param resultCode The final result code determined by the send.
         * @param resultData The final data collected by a broadcast.
         * @param resultExtras The final extras collected by a broadcast.
         */
        OnSendFinished(
            [in] IPendingIntent* pendingIntent,
            [in] IIntent* intent,
            [in] Int32 resultCode,
            [in] String resultData,
            [in] IBundle* resultExtras);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
