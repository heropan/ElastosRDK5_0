
module
{
    using interface Elastos.IO.IOutputStream;
    using interface Elastos.IO.IBuffer;

    interface Elastos.Droid.Graphics.ICanvas;
    interface Elastos.Droid.Graphics.IRect;
    interface Elastos.Droid.Graphics.IPaint;
    interface Elastos.Droid.Graphics.IMatrix;
    interface Elastos.Droid.Graphics.INinePatchInsetStruct;
    interface Elastos.Droid.Utility.IDisplayMetrics;

    namespace Elastos {
    namespace Droid {
    namespace Graphics {

    /**
     * Possible bitmap configurations. A bitmap configuration describes
     * how pixels are stored. This affects the quality (color depth) as
     * well as the ability to display transparent/translucent colors.
     */
    enum BitmapConfig {
        BitmapConfig_NONE       = 0,

        // these native values must match up with the enum in SkBitmap.h
        /**
         * Each pixel is stored as a single translucency (alpha) channel.
         * This is very useful to efficiently store masks for instance.
         * No color information is stored.
         * With this configuration, each pixel requires 1 byte of memory.
         */
        BitmapConfig_ALPHA_8     = 1,
        /**
         * Each pixel is stored on 2 bytes and only the RGB channels are
         * encoded: red is stored with 5 bits of precision (32 possible
         * values), green is stored with 6 bits of precision (64 possible
         * values) and blue is stored with 5 bits of precision.
         *
         * This configuration can produce slight visual artifacts depending
         * on the configuration of the source. For instance, without
         * dithering, the result might show a greenish tint. To get better
         * results dithering should be applied.
         *
         * This configuration may be useful when using opaque bitmaps
         * that do not require high color fidelity.
         */
        BitmapConfig_RGB_565     = 3,
        /**
         * Each pixel is stored on 2 bytes. The three RGB color channels
         * and the alpha channel (translucency) are stored with a 4 bits
         * precision (16 possible values.)
         *
         * This configuration is mostly useful if the application needs
         * to store translucency information but also needs to save
         * memory.
         *
         * It is recommended to use #ARGB_8888 instead of this
         * configuration.
         *
         * @sa #ARGB_8888
         *
         * @deprecated Because of the poor quality of this configuration,
         *             it is advised to use #ARGB_8888 instead.
         *
         * @sa #ARGB_8888
         */
        //@Deprecated
        BitmapConfig_ARGB_4444   = 4,
        /**
         * Each pixel is stored on 4 bytes. Each channel (RGB and alpha
         * for translucency) is stored with 8 bits of precision (256
         * possible values.)
         *
         * This configuration is very flexible and offers the best
         * quality. It should be used whenever possible.
         */

        BitmapConfig_ARGB_8888   = 5
    }

    /**
     * Specifies the known formats a bitmap can be compressed into
     */
    enum BitmapCompressFormat {
        BitmapCompressFormat_JPEG    = 0,
        BitmapCompressFormat_PNG     = 1,
        BitmapCompressFormat_WEBP    = 2,
    }

    /**
     * @Involve
     * interface IParcelable
     */
    [deprecated]
    interface IBitmap {
        /**
         * Indicates that the bitmap was created for an unknown pixel density.
         *
         * @see Bitmap#getDensity()
         * @see Bitmap#setDensity(int)
         */
        const Int32 DENSITY_NONE = 0;

        /**
         * <p>Returns the density for this bitmap.</p>
         *
         * <p>The default density is the same density as the current display,
         * unless the current application does not support different screen
         * densities in which case it is DENSITY_DEFAULT.
         *
         * @sa android.util.DisplayMetrics#DENSITY_DEFAULT
         * Note that
         * compatibility mode is determined by the application that was initially
         * loaded into a process -- applications that share the same process should
         * all have the same compatibility, or ensure they explicitly set the
         * density of their bitmaps appropriately.</p>
         *
         * @return A scaling factor of the default density or DENSITY_NONE
         *         if the scaling factor is unknown.
         *
         * @sa #DENSITY_NONE
         *
         * @see #setDensity(int)
         * @see android.util.DisplayMetrics#DENSITY_DEFAULT
         * @see android.util.DisplayMetrics#densityDpi
         * @see #DENSITY_NONE
         */
        GetDensity(
            [out] Int32* density);

        /**
         * <p>Specifies the density for this bitmap.  When the bitmap is
         * drawn to a Canvas that also has a density, it will be scaled
         * appropriately.</p>
         *
         * @param density The density scaling factor to use with this bitmap or
         *        DENSITY_NONE if the density is unknown.
         *
         * @sa #DENSITY_NONE
         *
         * @see #getDensity()
         * @see android.util.DisplayMetrics#DENSITY_DEFAULT
         * @see android.util.DisplayMetrics#densityDpi
         * @see #DENSITY_NONE
         */
        SetDensity(
            [in] Int32 density);

        /**
         * <p>Modifies the bitmap to have a specified width, height, and {@link
         * Config}, without affecting the underlying allocation backing the bitmap.
         * Bitmap pixel data is not re-initialized for the new configuration.</p>
         *
         * <p>This method can be used to avoid allocating a new bitmap, instead
         * reusing an existing bitmap's allocation for a new configuration of equal
         * or lesser size. If the Bitmap's allocation isn't large enough to support
         * the new configuration, an IllegalArgumentException will be thrown and the
         * bitmap will not be modified.</p>
         *
         * <p>The result of {@link #getByteCount()} will reflect the new configuration,
         * while {@link #getAllocationByteCount()} will reflect that of the initial
         * configuration.</p>
         *
         * <p>Note: This may change this result of hasAlpha(). When converting to 565,
         * the new bitmap will always be considered opaque. When converting from 565,
         * the new bitmap will be considered non-opaque, and will respect the value
         * set by setPremultiplied().</p>
         *
         * <p>WARNING: This method should NOT be called on a bitmap currently used
         * by the view system. It does not make guarantees about how the underlying
         * pixel buffer is remapped to the new config, just that the allocation is
         * reused. Additionally, the view system does not account for bitmap
         * properties being modifying during use, e.g. while attached to
         * drawables.</p>
         *
         * @see #setWidth(int)
         * @see #setHeight(int)
         * @see #setConfig(Config)
         */
        Reconfigure(
            [in] Int32 width,
            [in] Int32 height,
            [in] BitmapConfig config);

        /**
         * <p>Convenience method for calling {@link #reconfigure(int, int, Config)}
         * with the current height and config.</p>
         *
         * <p>WARNING: this method should not be used on bitmaps currently used by
         * the view system, see {@link #reconfigure(int, int, Config)} for more
         * details.</p>
         *
         * @see #reconfigure(int, int, Config)
         * @see #setHeight(int)
         * @see #setConfig(Config)
         */
        SetWidth(
            [in] Int32 width);

        /**
         * <p>Convenience method for calling {@link #reconfigure(int, int, Config)}
         * with the current width and config.</p>
         *
         * <p>WARNING: this method should not be used on bitmaps currently used by
         * the view system, see {@link #reconfigure(int, int, Config)} for more
         * details.</p>
         *
         * @see #reconfigure(int, int, Config)
         * @see #setWidth(int)
         * @see #setConfig(Config)
         */
        SetHeight(
            [in] Int32 height);

        /**
         * <p>Convenience method for calling {@link #reconfigure(int, int, Config)}
         * with the current height and width.</p>
         *
         * <p>WARNING: this method should not be used on bitmaps currently used by
         * the view system, see {@link #reconfigure(int, int, Config)} for more
         * details.</p>
         *
         * @see #reconfigure(int, int, Config)
         * @see #setWidth(int)
         * @see #setHeight(int)
         */
        SetConfig(
            [in] BitmapConfig config);

        /**
         * Sets the nine patch chunk.
         *
         * @param chunk The definition of the nine patch
         *
         * @hide
         */
        SetNinePatchChunk(
            [in] ArrayOf<Byte>* chunk);

        /**
         * Free the native object associated with this bitmap, and clear the
         * reference to the pixel data. This will not free the pixel data synchronously;
         * it simply allows it to be garbage collected if there are no other references.
         * The bitmap is marked as "dead", meaning it will throw an exception if
         * getPixels() or setPixels() is called, and will draw nothing. This operation
         * cannot be reversed, so it should only be called if you are sure there are no
         * further uses for the bitmap. This is an advanced call, and normally need
         * not be called, since the normal GC process will free up this memory when
         * there are no more references to this bitmap.
         */
        Recycle();

        /**
         * Returns true if this bitmap has been recycled. If so, then it is an error
         * to try to access its pixels, and the bitmap will not draw.
         *
         * @return true if the bitmap has been recycled
         */
        IsRecycled(
            [out] Boolean* isRecycled);

        /**
         * Returns the generation ID of this bitmap. The generation ID changes
         * whenever the bitmap is modified. This can be used as an efficient way to
         * check if a bitmap has changed.
         *
         * @return The current generation ID for this bitmap.
         */
        GetGenerationId(
            [out] Int32* id);

        /**
         * <p>Copy the bitmap's pixels into the specified buffer (allocated by the
         * caller). An exception is thrown if the buffer is not large enough to
         * hold all of the pixels (taking into account the number of bytes per
         * pixel) or if the Buffer subclass is not one of the support types
         * (ByteBuffer, ShortBuffer, IntBuffer).</p>
         * <p>The content of the bitmap is copied into the buffer as-is. This means
         * that if this bitmap stores its pixels pre-multiplied
         * (see isPremultiplied(), the values in the buffer will also be
         * pre-multiplied).</p>
         *
         * @sa #isPremultiplied()
         */
        CopyPixelsToBuffer(
            [in] IBuffer* dst);

        /**
         * Copy the pixels from the buffer, beginning at the current position,
         * overwriting the bitmap's pixels. The data in the buffer is not changed
         * in any way (unlike setPixels(), which converts from unpremultipled 32bit
         * to whatever the bitmap's native format is.
         */
        CopyPixelsFromBuffer(
            [in] IBuffer* src);

        /**
         * Tries to make a new bitmap based on the dimensions of this bitmap,
         * setting the new bitmap's config to the one specified, and then copying
         * this bitmap's pixels into the new bitmap. If the conversion is not
         * supported, or the allocator fails, then this returns NULL.  The returned
         * bitmap initially has the same density as the original.
         *
         * @param config    The desired config for the resulting bitmap
         * @param isMutable True if the resulting bitmap should be mutable (i.e.
         *                  its pixels can be modified)
         * @return the new bitmap, or null if the copy could not be made.
         */
        Copy(
            [in] BitmapConfig config,
            [in] Boolean isMutable,
            [out] IBitmap** bitmap);

        /**
         * Returns an optional array of private data, used by the UI system for
         * some bitmaps. Not intended to be called by applications.
         */
        GetNinePatchChunk(
            [out, callee] ArrayOf<Byte>* data);

        /**
         * Populates a rectangle with the bitmap's optical insets.
         *
         * @param outInsets Rect to populate with optical insets
         * @hide
         */
        GetOpticalInsets(
            [in] IRect* outInsets);

        /** @hide */
        GetNinePatchInsets(
            [out] INinePatchInsetStruct** inset);

        SetNinePatchInsets(
            [in] INinePatchInsetStruct* inset);

        /**
         * Write a compressed version of the bitmap to the specified outputstream.
         * If this returns true, the bitmap can be reconstructed by passing a
         * corresponding inputstream to BitmapFactory.decodeStream(). Note: not
         * all Formats support all bitmap configs directly, so it is possible that
         * the returned bitmap from BitmapFactory could be in a different bitdepth,
         * and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque
         * pixels).
         *
         * @param format   The format of the compressed image
         * @param quality  Hint to the compressor, 0-100. 0 meaning compress for
         *                 small size, 100 meaning compress for max quality. Some
         *                 formats, like PNG which is lossless, will ignore the
         *                 quality setting
         * @param stream   The outputstream to write the compressed data.
         * @return true if successfully compressed to the specified stream.
         */
        Compress(
            [in] BitmapCompressFormat format,
            [in] Int32 quality,
            [in] IOutputStream* stream,
            [out] Boolean* isSucceeded);

        /**
         * Returns true if the bitmap is marked as mutable (i.e. can be drawn into)
         */
        IsMutable(
            [out] Boolean* isMutable);

        /**
         * <p>Indicates whether pixels stored in this bitmaps are stored pre-multiplied.
         * When a pixel is pre-multiplied, the RGB components have been multiplied by
         * the alpha component. For instance, if the original color is a 50%
         * translucent red <code>(128, 255, 0, 0)</code>, the pre-multiplied form is
         * <code>(128, 128, 0, 0)</code>.</p>
         *
         * <p>This method always returns false if #getConfig() is
         * Bitmap.Config#RGB_565.</p>
         *
         * @sa #getConfig
         * @sa Bitmap.Config#RGB_565
         *
         * <p>This method only returns true if #hasAlpha() returns true.
         * A bitmap with no alpha channel can be used both as a pre-multiplied and
         * as a non pre-multiplied bitmap.</p>
         *
         * @sa #hasAlpha
         *
         * @return true if the underlying pixels have been pre-multiplied, false
         *         otherwise
         */
        IsPremultiplied(
            [out] Boolean* isPremultiplied);

        /**
         * Sets whether the bitmap should treat its data as pre-multiplied.
         *
         * <p>Bitmaps are always treated as pre-multiplied by the view system and
         * {@link Canvas} for performance reasons. Storing un-pre-multiplied data in
         * a Bitmap (through {@link #setPixel}, {@link #setPixels}, or {@link
         * BitmapFactory.Options#inPremultiplied BitmapFactory.Options.inPremultiplied})
         * can lead to incorrect blending if drawn by the framework.</p>
         *
         * <p>This method will not affect the behavior of a bitmap without an alpha
         * channel, or if {@link #hasAlpha()} returns false.</p>
         *
         * <p>Calling {@link #createBitmap} or {@link #createScaledBitmap} with a source
         * Bitmap whose colors are not pre-multiplied may result in a RuntimeException,
         * since those functions require drawing the source, which is not supported for
         * un-pre-multiplied Bitmaps.</p>
         *
         * @see Bitmap#isPremultiplied()
         * @see BitmapFactory.Options#inPremultiplied
         */
        SetPremultiplied(
            [in] Boolean premultiplied);

        /** Returns the bitmap's width */
        GetWidth(
            [out] Int32* width);

        /** Returns the bitmap's height */
        GetHeight(
            [out] Int32* height);

        /**
         * Convenience for calling getScaledWidth(int) with the target
         * density of the given Canvas.
         *
         * @sa #getScaledWidth
         * @sa Canvas
         */
        GetScaledWidth(
            [in] ICanvas* canvas,
            [out] Int32* width);

        /**
         * Convenience for calling getScaledHeight(int) with the target
         * density of the given Canvas.
         *
         * @sa #getScaledHeight
         * @sa Canvas
         */
        GetScaledHeight(
            [in] ICanvas* canvas,
            [out] Int32* height);

        /**
         * Convenience for calling getScaledWidth(int) with the target
         * density of the given DisplayMetrics.
         *
         * @sa #getScaledWidth
         * @sa DisplayMetrics
         */
        GetScaledWidth(
            [in] IDisplayMetrics* metrics,
            [out] Int32* width);

        /**
         * Convenience for calling getScaledHeight(int) with the target
         * density of the given DisplayMetrics.
         *
         * @sa #getScaledHeight
         * @sa DisplayMetrics
         */
        GetScaledHeight(
            [in] IDisplayMetrics* metrics,
            [out] Int32* height);

        /**
         * Convenience method that returns the width of this bitmap divided
         * by the density scale factor.
         *
         * @param targetDensity The density of the target canvas of the bitmap.
         * @return The scaled width of this bitmap, according to the density scale factor.
         */
        GetScaledWidth(
            [in] Int32 targetDensity,
            [out] Int32* width);

        /**
         * Convenience method that returns the height of this bitmap divided
         * by the density scale factor.
         *
         * @param targetDensity The density of the target canvas of the bitmap.
         * @return The scaled height of this bitmap, according to the density scale factor.
         */
        GetScaledHeight(
            [in] Int32 targetDensity,
            [out] Int32* height);

        /**
         * Return the number of bytes between rows in the bitmap's pixels. Note that
         * this refers to the pixels as stored natively by the bitmap. If you call
         * getPixels() or setPixels(), then the pixels are uniformly treated as
         * 32bit values, packed according to the Color class.
         *
         * @return number of bytes between rows of the native bitmap pixels.
         */
        GetRowBytes(
            [out] Int32* bytes);

        /**
         * Returns the number of bytes used to store this bitmap's pixels.
         */
        GetByteCount(
            [out] Int32* count);

        /**
         * Returns the size of the allocated memory used to store this bitmap's pixels.
         *
         * <p>This can be larger than the result of {@link #getByteCount()} if a bitmap is reused to
         * decode other bitmaps of smaller size, or by manual reconfiguration. See {@link
         * #reconfigure(int, int, Config)}, {@link #setWidth(int)}, {@link #setHeight(int)}, {@link
         * #setConfig(Bitmap.Config)}, and {@link BitmapFactory.Options#inBitmap
         * BitmapFactory.Options.inBitmap}. If a bitmap is not modified in this way, this value will be
         * the same as that returned by {@link #getByteCount()}.</p>
         *
         * <p>This value will not change over the lifetime of a Bitmap.</p>
         *
         * @see #reconfigure(int, int, Config)
         */
        GetAllocationByteCount(
            [out] Int32* count);

        /**
         * If the bitmap's internal config is in one of the public formats, return
         * that config, otherwise return null.
         */
        GetConfig(
            [out] BitmapConfig* config);

        /** Returns true if the bitmap's config supports per-pixel alpha, and
         * if the pixels may contain non-opaque alpha values. For some configs,
         * this is always false (e.g. RGB_565), since they do not support per-pixel
         * alpha. However, for configs that do, the bitmap may be flagged to be
         * known that all of its pixels are opaque. In this case hasAlpha() will
         * also return false. If a config such as ARGB_8888 is not so flagged,
         * it will return true by default.
         */
        HasAlpha(
            [out] Boolean* isAlpha);

        /**
         * Tell the bitmap if all of the pixels are known to be opaque (false)
         * or if some of the pixels may contain non-opaque alpha values (true).
         * Note, for some configs (e.g. RGB_565) this call is ignore, since it does
         * not support per-pixel alpha values.
         *
         * This is meant as a drawing hint, as in some cases a bitmap that is known
         * to be opaque can take a faster drawing case than one that may have
         * non-opaque per-pixel alpha values.
         *
         * @hide
         */
        SetHasAlpha(
            [in] Boolean hasAlpha);

        /**
         * Indicates whether the renderer responsible for drawing this
         * bitmap should attempt to use mipmaps when this bitmap is drawn
         * scaled down.
         *
         * If you know that you are going to draw this bitmap at less than
         * 50% of its original size, you may be able to obtain a higher
         * quality
         *
         * This property is only a suggestion that can be ignored by the
         * renderer. It is not guaranteed to have any effect.
         *
         * @return true if the renderer should attempt to use mipmaps,
         *         false otherwise
         *
         * @see #setHasMipMap(boolean)
         */
        HasMipMap(
            [out] Boolean* hasMipMap);

        /**
         * Set a hint for the renderer responsible for drawing this bitmap
         * indicating that it should attempt to use mipmaps when this bitmap
         * is drawn scaled down.
         *
         * If you know that you are going to draw this bitmap at less than
         * 50% of its original size, you may be able to obtain a higher
         * quality by turning this property on.
         *
         * Note that if the renderer respects this hint it might have to
         * allocate extra memory to hold the mipmap levels for this bitmap.
         *
         * This property is only a suggestion that can be ignored by the
         * renderer. It is not guaranteed to have any effect.
         *
         * @param hasMipMap indicates whether the renderer should attempt
         *                  to use mipmaps
         *
         * @see #hasMipMap()
         */
        SetHasMipMap(
            [in] Boolean hasMipMap);

        /**
         * Fills the bitmap's pixels with the specified Color.
         *
         * @sa Color
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalStateException | if the bitmap is not mutable.
         */
        EraseColor(
            [in] Int32 c);

         /**
         * Returns the Color at the specified location.
         *
         * @sa Color
         * if x or y are out of bounds (negative or >= to the width or height
         * respectively). The returned color is a non-premultiplied ARGB value.
         *
         * @param x    The x coordinate (0...width-1) of the pixel to return
         * @param y    The y coordinate (0...height-1) of the pixel to return
         * @return     The argb Color at the specified coordinate
         *
         * @sa Color
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException | if x, y exceed the bitmap's bounds
         */
        GetPixel(
            [in] Int32 x,
            [in] Int32 y,
            [out] Int32* pixel);

        /**
         * Returns in pixels[] a copy of the data in the bitmap. Each value is
         * a packed int representing a Color.
         *
         * @sa Color
         * The stride parameter allows
         * the caller to allow for gaps in the returned pixels array between
         * rows. For normal packed results, just pass width for the stride value.
         * The returned colors are non-premultiplied ARGB values.
         *
         * @param pixels   The array to receive the bitmap's colors
         * @param offset   The first index to write into pixels[]
         * @param stride   The number of entries in pixels[] to skip between
         *                 rows (must be >= bitmap's width). Can be negative.
         * @param x        The x coordinate of the first pixel to read from
         *                 the bitmap
         * @param y        The y coordinate of the first pixel to read from
         *                 the bitmap
         * @param width    The number of pixels to read from each row
         * @param height   The number of rows to read
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException |if x, y, width, height exceed the bounds of the bitmap, or if abs(stride) < width.
         * ArrayIndexOutOfBoundsException | if the pixels array is too small to receive the specified number of pixels.
         */
        GetPixels(
            [in] ArrayOf<Int32>* pixels,
            [in] Int32 offset,
            [in] Int32 stride,
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 width,
            [in] Int32 height);

        /**
         * Write the specified Color into the bitmap (assuming it is
         * mutable) at the x,y coordinate.
         *
         * @sa Color
         *
         * @param x     The x coordinate of the pixel to replace (0...width-1)
         * @param y     The y coordinate of the pixel to replace (0...height-1)
         * @param color The Color to write into the bitmap
         *
         * @sa Color
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalStateException | if the bitmap is not mutable
         * IllegalArgumentException | if x, y are outside of the bitmap's bounds.
         */
        SetPixel(
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 color);

        /**
         * <p>Replace pixels in the bitmap with the colors in the array. Each element
         * in the array is a packed int prepresenting a non-premultiplied ARGB
         * Color.</p>
         *
         * @sa Color
         * @param pixels   The colors to write to the bitmap
         * @param offset   The index of the first color to read from pixels[]
         * @param stride   The number of colors in pixels[] to skip between rows.
         *                 Normally this value will be the same as the width of
         *                 the bitmap, but it can be larger (or negative).
         * @param x        The x coordinate of the first pixel to write to in
         *                 the bitmap.
         * @param y        The y coordinate of the first pixel to write to in
         *                 the bitmap.
         * @param width    The number of colors to copy from pixels[] per row
         * @param height   The number of rows to write to the bitmap
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalStateException | if the bitmap is not mutable
         * IllegalArgumentException | if x, y, width, height are outside of the bitmap's bounds.
         * ArrayIndexOutOfBoundsException | if the pixels array is too small to receive the specified number of pixels.
         */
        SetPixels(
            [in] ArrayOf<Int32>* pixels,
            [in] Int32 offset,
            [in] Int32 stride,
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 width,
            [in] Int32 height);

        /**
         * Returns a new bitmap that captures the alpha values of the original.
         * This may be drawn with Canvas.drawBitmap(), where the color(s) will be
         * taken from the paint that is passed to the draw call.
         *
         * @return new bitmap containing the alpha channel of the original bitmap.
         */
        ExtractAlpha(
            [out] IBitmap** bitmap);

        /**
         * Returns a new bitmap that captures the alpha values of the original.
         * These values may be affected by the optional Paint parameter, which
         * can contain its own alpha, and may also contain a MaskFilter which
         * could change the actual dimensions of the resulting bitmap (e.g.
         * a blur maskfilter might enlarge the resulting bitmap). If offsetXY
         * is not null, it returns the amount to offset the returned bitmap so
         * that it will logically align with the original. For example, if the
         * paint contains a blur of radius 2, then offsetXY[] would contains
         * -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then
         * drawing the original would result in the blur visually aligning with
         * the original.
         *
         * <p>The initial density of the returned bitmap is the same as the original's.
         *
         * @param paint Optional paint used to modify the alpha values in the
         *              resulting bitmap. Pass null for default behavior.
         * @param offsetXY Optional array that returns the X (index 0) and Y
         *                 (index 1) offset needed to position the returned bitmap
         *                 so that it visually lines up with the original.
         * @return new bitmap containing the (optionally modified by paint) alpha
         *         channel of the original bitmap. This may be drawn with
         *         Canvas.drawBitmap(), where the color(s) will be taken from the
         *         paint that is passed to the draw call.
         */
        ExtractAlpha(
            [in] IPaint* paint,
            [in] ArrayOf<Int32>* offsetXY,
            [out] IBitmap** bitmap);

        /**
         *  Given another bitmap, return true if it has the same dimensions, config,
         *  and pixel data as this bitmap. If any of those differ, return false.
         *  If other is null, return false.
         */
        SameAs(
            [in] IBitmap* other,
            [out] Boolean* isSame);

        /**
         * Rebuilds any caches associated with the bitmap that are used for
         * drawing it. In the case of purgeable bitmaps, this call will attempt to
         * ensure that the pixels have been decoded.
         * If this is called on more than one bitmap in sequence, the priority is
         * given in LRU order (i.e. the last bitmap called will be given highest
         * priority).
         *
         * For bitmaps with no associated caches, this call is effectively a no-op,
         * and therefore is harmless.
         */
        PrepareToDraw();

        GetNativeBitmap(
            [out] Handle32* bitmap);

        Reinit(
            [in] Int32 width,
            [in] Int32 height,
            [in] Boolean requestPremultiplied);
    }

    [deprecated]
    interface IBitmapHelper {
        /**
         * For backwards compatibility, allows the app layer to change the default
         * density when running old apps.
         * @hide
         */
        SetDefaultDensity(
            [in] Int32 density);

        GetDefaultDensity(
            [out] Int32* density);

        /**
         * Creates a new bitmap, scaled from an existing bitmap, when possible. If the
         * specified width and height are the same as the current width and height of
         * the source bitmap, the source bitmap is returned and no new bitmap is
         * created.
         *
         * @param src       The source bitmap.
         * @param dstWidth  The new bitmap's desired width.
         * @param dstHeight The new bitmap's desired height.
         * @param filter    true if the source should be filtered.
         * @return The new scaled bitmap or the source bitmap if no scaling is required.
         * @throws IllegalArgumentException if width is <= 0, or height is <= 0
         */
        CreateScaledBitmap(
            [in] IBitmap* src,
            [in] Int32 dstWidth,
            [in] Int32 dstHeight,
            [in] Boolean filter,
            [out] IBitmap** bitmap);

        /**
         * Returns an immutable bitmap from the source bitmap. The new bitmap may
         * be the same object as source, or a copy may have been made.  It is
         * initialized with the same density as the original bitmap.
         */
        CreateBitmap(
            [in] IBitmap* src,
            [out] IBitmap** bitmap);

        /**
         * Returns an immutable bitmap from the specified subset of the source
         * bitmap. The new bitmap may be the same object as source, or a copy may
         * have been made. It is initialized with the same density as the original
         * bitmap.
         *
         * @param source   The bitmap we are subsetting
         * @param x        The x coordinate of the first pixel in source
         * @param y        The y coordinate of the first pixel in source
         * @param width    The number of pixels in each row
         * @param height   The number of rows
         * @return A copy of a subset of the source bitmap or the source bitmap itself.
         * @throws IllegalArgumentException if the x, y, width, height values are
         *         outside of the dimensions of the source bitmap, or width is <= 0,
         *         or height is <= 0
         */
        CreateBitmap(
            [in] IBitmap* src,
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 width,
            [in] Int32 height,
            [out] IBitmap** bitmap);

        /**
         * Returns an immutable bitmap from subset of the source bitmap,
         * transformed by the optional matrix. The new bitmap may be the
         * same object as source, or a copy may have been made. It is
         * initialized with the same density as the original bitmap.
         *
         * If the source bitmap is immutable and the requested subset is the
         * same as the source bitmap itself, then the source bitmap is
         * returned and no new bitmap is created.
         *
         * @param source   The bitmap we are subsetting
         * @param x        The x coordinate of the first pixel in source
         * @param y        The y coordinate of the first pixel in source
         * @param width    The number of pixels in each row
         * @param height   The number of rows
         * @param m        Optional matrix to be applied to the pixels
         * @param filter   true if the source should be filtered.
         *                   Only applies if the matrix contains more than just
         *                   translation.
         * @return A bitmap that represents the specified subset of source
         * @throws IllegalArgumentException if the x, y, width, height values are
         *         outside of the dimensions of the source bitmap, or width is <= 0,
         *         or height is <= 0
         */
        CreateBitmap(
            [in] IBitmap* src,
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 width,
            [in] Int32 height,
            [in] IMatrix* m,
            [in] Boolean filter,
            [out] IBitmap** bitmap);

        /**
         * Returns a mutable bitmap with the specified width and height.  Its
         * initial density is as per {@link #getDensity}.
         *
         * @param width    The width of the bitmap
         * @param height   The height of the bitmap
         * @param config   The bitmap config to create.
         * @throws IllegalArgumentException if the width or height are <= 0
         */
        CreateBitmap(
            [in] Int32 width,
            [in] Int32 height,
            [in] BitmapConfig config,
            [out] IBitmap** bitmap);

        /**
         * Returns a mutable bitmap with the specified width and height.  Its
         * initial density is determined from the given {@link DisplayMetrics}.
         *
         * @param display  Display metrics for the display this bitmap will be
         *                 drawn on.
         * @param width    The width of the bitmap
         * @param height   The height of the bitmap
         * @param config   The bitmap config to create.
         * @throws IllegalArgumentException if the width or height are <= 0
         */
        CreateBitmap(
            [in] IDisplayMetrics* display,
            [in] Int32 width,
            [in] Int32 height,
            [in] BitmapConfig config,
            [out] IBitmap** bitmap);

        /**
         * Returns a immutable bitmap with the specified width and height, with each
         * pixel value set to the corresponding value in the colors array.  Its
         * initial density is as per {@link #getDensity}.
         *
         * @param colors   Array of {@link Color} used to initialize the pixels.
         * @param offset   Number of values to skip before the first color in the
         *                 array of colors.
         * @param stride   Number of colors in the array between rows (must be >=
         *                 width or <= -width).
         * @param width    The width of the bitmap
         * @param height   The height of the bitmap
         * @param config   The bitmap config to create. If the config does not
         *                 support per-pixel alpha (e.g. RGB_565), then the alpha
         *                 bytes in the colors[] will be ignored (assumed to be FF)
         * @throws IllegalArgumentException if the width or height are <= 0, or if
         *         the color array's length is less than the number of pixels.
         */
        CreateBitmap(
            [in] ArrayOf<Int32>* colors,
            [in] Int32 offset,
            [in] Int32 stride,
            [in] Int32 width,
            [in] Int32 height,
            [in] BitmapConfig config,
            [out] IBitmap** bitmap);

        /**
         * Returns a immutable bitmap with the specified width and height, with each
         * pixel value set to the corresponding value in the colors array.  Its
         * initial density is determined from the given {@link DisplayMetrics}.
         *
         * @param display  Display metrics for the display this bitmap will be
         *                 drawn on.
         * @param colors   Array of {@link Color} used to initialize the pixels.
         * @param offset   Number of values to skip before the first color in the
         *                 array of colors.
         * @param stride   Number of colors in the array between rows (must be >=
         *                 width or <= -width).
         * @param width    The width of the bitmap
         * @param height   The height of the bitmap
         * @param config   The bitmap config to create. If the config does not
         *                 support per-pixel alpha (e.g. RGB_565), then the alpha
         *                 bytes in the colors[] will be ignored (assumed to be FF)
         * @throws IllegalArgumentException if the width or height are <= 0, or if
         *         the color array's length is less than the number of pixels.
         */
        CreateBitmap(
            [in] IDisplayMetrics* display,
            [in] ArrayOf<Int32>* colors,
            [in] Int32 offset,
            [in] Int32 stride,
            [in] Int32 width,
            [in] Int32 height,
            [in] BitmapConfig config,
            [out] IBitmap** bitmap);

        /**
         * Returns a immutable bitmap with the specified width and height, with each
         * pixel value set to the corresponding value in the colors array.  Its
         * initial density is as per {@link #getDensity}.
         *
         * @param colors   Array of {@link Color} used to initialize the pixels.
         *                 This array must be at least as large as width * height.
         * @param width    The width of the bitmap
         * @param height   The height of the bitmap
         * @param config   The bitmap config to create. If the config does not
         *                 support per-pixel alpha (e.g. RGB_565), then the alpha
         *                 bytes in the colors[] will be ignored (assumed to be FF)
         * @throws IllegalArgumentException if the width or height are <= 0, or if
         *         the color array's length is less than the number of pixels.
         */
        CreateBitmap(
            [in] ArrayOf<Int32>* colors,
            [in] Int32 width,
            [in] Int32 height,
            [in] BitmapConfig config,
            [out] IBitmap** bitmap);

        /**
         * Returns a immutable bitmap with the specified width and height, with each
         * pixel value set to the corresponding value in the colors array.  Its
         * initial density is determined from the given {@link DisplayMetrics}.
         *
         * @param display  Display metrics for the display this bitmap will be
         *                 drawn on.
         * @param colors   Array of {@link Color} used to initialize the pixels.
         *                 This array must be at least as large as width * height.
         * @param width    The width of the bitmap
         * @param height   The height of the bitmap
         * @param config   The bitmap config to create. If the config does not
         *                 support per-pixel alpha (e.g. RGB_565), then the alpha
         *                 bytes in the colors[] will be ignored (assumed to be FF)
         * @throws IllegalArgumentException if the width or height are <= 0, or if
         *         the color array's length is less than the number of pixels.
         */
        CreateBitmap(
            [in] IDisplayMetrics* display,
            [in] ArrayOf<Int32>* colors,
            [in] Int32 width,
            [in] Int32 height,
            [in] BitmapConfig config,
            [out] IBitmap** bitmap);

        /**
         * @hide
         */
        ScaleFromDensity(
            [in] Int32 size,
            [in] Int32 sdensity,
            [in] Int32 tdensity,
            [out] Int32* scale);
    }

    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
