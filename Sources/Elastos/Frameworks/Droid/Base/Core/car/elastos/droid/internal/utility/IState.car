module
{
    interface Elastos.Droid.Os.IMessage;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Utility {

    /**
     * {@hide}
     *
     * The interface for implementing states in a {@link StateMachine}
     */
    [local]
    interface IState {
        /**
         * Returned by processMessage to indicate the the message was processed.
         */
        const Boolean HANDLED = TRUE;

        /**
         * Returned by processMessage to indicate the the message was NOT processed.
         */
        const Boolean NOT_HANDLED = FALSE;

        /**
         * Called when a state is entered.
         */
        Enter();

        /**
         * Called when a state is exited.
         */
        Exit();

        /**
         * Called when a message is to be processed by the
         * state machine.
         *
         * This routine is never reentered thus no synchronization
         * is needed as only one processMessage method will ever be
         * executing within a state machine at any given time. This
         * does mean that processing by this routine must be completed
         * as expeditiously as possible as no subsequent messages will
         * be processed until this routine returns.
         *
         * @param msg to process
         * @return HANDLED if processing has completed and NOT_HANDLED
         *         if the message wasn't processed.
         */
        ProcessMessage(
            [in] IMessage* msg,
            [out] Boolean* result);

        /**
         * Name of State for debugging purposes.
         *
         * @return name of state.
         */
        GetName(
            [out] String* name);
    }

    }//namespace Utility
    }//namespace Internal
    }//namespace Droid
    }//namespace Elastos
}
