module
{
    using interface Elastos.IO.IInputStream;

    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.App.IIWallpaperManager;
    interface Elastos.Droid.App.IWallpaperInfo;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Graphics.IRect;
    interface Elastos.Droid.Graphics.Drawable.IDrawable;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIntent;

    namespace Elastos {
    namespace Droid {
    namespace App {

    /**
     * @Involve
     * interface Elastos.Droid.Graphics.Drawable.IDrawable
     */
    interface IFastBitmapDrawable {
    }

    /**
     * Provides access to the system wallpaper. With WallpaperManager, you can
     * get the current wallpaper, get the desired dimensions for the wallpaper, set
     * the wallpaper, and more. Get an instance of WallpaperManager with
     * {@link #getInstance(android.content.Context) getInstance()}.
     */
    [local]
    interface IWallpaperManager {
        /**
         * Activity Action: Show settings for choosing wallpaper. Do not use directly to construct
         * an intent; instead, use {@link #getCropAndSetWallpaperIntent}.
         * <p>Input:  {@link Intent#getData} is the URI of the image to crop and set as wallpaper.
         * <p>Output: RESULT_OK if user decided to crop/set the wallpaper, RESULT_CANCEL otherwise
         * Activities that support this intent should specify a MIME filter of "image/*"
         */
        const String ACTION_CROP_AND_SET_WALLPAPER =
                "elastos.service.wallpaper.CROP_AND_SET_WALLPAPER";


        /**
         * Launch an activity for the user to pick the current global live
         * wallpaper.
         */
        const String ACTION_LIVE_WALLPAPER_CHOOSER
                = "elastos.service.wallpaper.LIVE_WALLPAPER_CHOOSER";

        /**
         * Directly launch live wallpaper preview, allowing the user to immediately
         * confirm to switch to a specific live wallpaper.  You must specify
         * #EXTRA_LIVE_WALLPAPER_COMPONENT with the ComponentName of
         * a live wallpaper component that is to be shown.
         *
         * @sa #EXTRA_LIVE_WALLPAPER_COMPONENT
         */
        const String ACTION_CHANGE_LIVE_WALLPAPER
                = "elastos.service.wallpaper.CHANGE_LIVE_WALLPAPER";

        /**
         * Extra in #ACTION_CHANGE_LIVE_WALLPAPER that specifies the
         * ComponentName of a live wallpaper that should be shown as a preview,
         * for the user to confirm.
         *
         * @sa #ACTION_CHANGE_LIVE_WALLPAPER
         */
        const String EXTRA_LIVE_WALLPAPER_COMPONENT
                = "elastos.service.wallpaper.extra.LIVE_WALLPAPER_COMPONENT";

        /**
         * Manifest entry for activities that respond to Intent#ACTION_SET_WALLPAPER
         * which allows them to provide a custom large icon associated with this action.
         *
         * @sa Intent#ACTION_SET_WALLPAPER
         */
        const String WALLPAPER_PREVIEW_META_DATA = "elastos.wallpaper.preview";

        /**
         * Command for #sendWallpaperCommand: reported by the wallpaper
         * host when the user taps on an empty area (not performing an action
         * in the host).  The x and y arguments are the location of the tap in
         * screen coordinates.
         *
         * @sa #sendWallpaperCommand
         */
        const String COMMAND_TAP = "elastos.wallpaper.tap";

        /**
         * Command for #sendWallpaperCommand: reported by the wallpaper
         * host when the user releases a secondary pointer on an empty area
         * (not performing an action in the host).  The x and y arguments are
         * the location of the secondary tap in screen coordinates.
         *
         * @sa #sendWallpaperCommand
         */
        const String COMMAND_SECONDARY_TAP = "elastos.wallpaper.secondaryTap";

        /**
         * Command for #sendWallpaperCommand: reported by the wallpaper
         * host when the user drops an object into an area of the host.  The x
         * and y arguments are the location of the drop.
         *
         * @sa #sendWallpaperCommand
         */
        const String COMMAND_DROP = "elastos.home.drop";

        /** @hide */
        GetIWallpaperManager(
            [out] IIWallpaperManager** manager);

        /**
         * Retrieve the current system wallpaper; if
         * no wallpaper is set, the system default wallpaper is returned.
         * This is returned as an
         * abstract Drawable that you can install in a View to display whatever
         * wallpaper the user has currently set.
         *
         * @return Returns a Drawable object that will draw the wallpaper.
         */
        GetDrawable(
            [out] IDrawable** drawable);

        /**
         * Returns a drawable for the system built-in static wallpaper .
         *
         */
        GetBuiltInDrawable(
            [out] IDrawable** drawable);

        /**
         * Returns a drawable for the system built-in static wallpaper. Based on the parameters, the
         * drawable can be cropped and scaled
         *
         * @param outWidth The width of the returned drawable
         * @param outWidth The height of the returned drawable
         * @param scaleToFit If true, scale the wallpaper down rather than just cropping it
         * @param horizontalAlignment A float value between 0 and 1 specifying where to crop the image;
         *        0 for left-aligned, 0.5 for horizontal center-aligned, and 1 for right-aligned
         * @param verticalAlignment A float value between 0 and 1 specifying where to crop the image;
         *        0 for top-aligned, 0.5 for vertical center-aligned, and 1 for bottom-aligned
         *
         */
        GetBuiltInDrawable(
            [in] Int32 outWidth,
            [in] Int32 outHeight,
            [in] Boolean scaleToFit,
            [in] Float horizontalAlignment,
            [in] Float verticalAlignment,
            [out] IDrawable** drawable);

        /**
         * Retrieve the current system wallpaper; if there is no wallpaper set,
         * a null pointer is returned. This is returned as an
         * abstract Drawable that you can install in a View to display whatever
         * wallpaper the user has currently set.
         *
         * @return Returns a Drawable object that will draw the wallpaper or a
         * null pointer if these is none.
         */
        PeekDrawable(
            [out] IDrawable** drawable);

        /**
         * Like {@link #getDrawable()}, but the returned Drawable has a number
         * of limitations to reduce its overhead as much as possible. It will
         * never scale the wallpaper (only centering it if the requested bounds
         * do match the bitmap bounds, which should not be typical), doesn't
         * allow setting an alpha, color filter, or other attributes, etc.  The
         * bounds of the returned drawable will be initialized to the same bounds
         * as the wallpaper, so normally you will not need to touch it.  The
         * drawable also assumes that it will be used in a context running in
         * the same density as the screen (not in density compatibility mode).
         *
         * @return Returns a Drawable object that will draw the wallpaper.
         */
        GetFastDrawable(
            [out] IDrawable** drawable);

        /**
         * Like #getFastDrawable(), but if there is no wallpaper set,
         * a null pointer is returned.
         *
         * @sa #getFastDrawable()
         *
         * @return Returns an optimized Drawable object that will draw the
         * wallpaper or a null pointer if these is none.
         */
        PeekFastDrawable(
            [out] IDrawable** drawable);

        /**
         * Like #getDrawable() but returns a Bitmap.
         *
         * @sa #getDrawable()
         *
         * @hide
         */
        GetBitmap(
            [out] IBitmap** bitmap);

        /**
         * Remove all internal references to the last loaded wallpaper.  Useful
         * for apps that want to reduce memory usage when they only temporarily
         * need to have the wallpaper.  After calling, the next request for the
         * wallpaper will require reloading it again from disk.
         */
        ForgetLoadedWallpaper();

        /**
         * If the current wallpaper is a live wallpaper component, return the
         * information about that wallpaper.  Otherwise, if it is a static image,
         * simply return null.
         */
        GetWallpaperInfo(
            [out] IWallpaperInfo** info);

        /**
         * Gets an Intent that will launch an activity that crops the given
         * image and sets the device's wallpaper. If there is a default HOME activity
         * that supports cropping wallpapers, it will be preferred as the default.
         * Use this method instead of directly creating a {@link #ACTION_CROP_AND_SET_WALLPAPER}
         * intent.
         *
         * @param imageUri The image URI that will be set in the intent. The must be a content
         *                 URI and its provider must resolve its type to "image/*"
         *
         * @throws IllegalArgumentException if the URI is not a content URI or its MIME type is
         *         not "image/*"
         */
        GetCropAndSetWallpaperIntent(
            [in] IUri* imageUri,
            [out] IIntent** intent);

        /**
         * Change the current system wallpaper to the bitmap in the given resource.
         * The resource is opened as a raw data stream and copied into the
         * wallpaper; it must be a valid PNG or JPEG image.  On success, the intent
         * Intent#ACTION_WALLPAPER_CHANGED is broadcast.
         *
         * @sa Intent#ACTION_WALLPAPER_CHANGED
         *
         * <p>This method requires the caller to hold the permission
         * android.Manifest.permission#SET_WALLPAPER.
         *
         * @sa android.Manifest.permission#SET_WALLPAPER
         *
         * @param resid The bitmap to save.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | If an error occurs reverting to the default
         * wallpaper.
         */
        SetResource(
            [in] Int32 resid);

        /**
         * Change the current system wallpaper to a bitmap.  The given bitmap is
         * converted to a PNG and stored as the wallpaper.  On success, the intent
         * Intent#ACTION_WALLPAPER_CHANGED is broadcast.
         *
         * @sa Intent#ACTION_WALLPAPER_CHANGED
         *
         * <p>This method requires the caller to hold the permission
         * android.Manifest.permission#SET_WALLPAPER.
         *
         * @sa android.Manifest.permission#SET_WALLPAPER
         *
         * @param bitmap The bitmap to save.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | If an error occurs reverting to the default
         * wallpaper.
         */
        SetBitmap(
            [in] IBitmap* bitmap);

        /**
         * Change the current system wallpaper to a specific byte stream.  The
         * give InputStream is copied into persistent storage and will now be
         * used as the wallpaper.  Currently it must be either a JPEG or PNG
         * image.  On success, the intent Intent#ACTION_WALLPAPER_CHANGED
         * is broadcast.
         *
         * @sa Intent#ACTION_WALLPAPER_CHANGED
         *
         * <p>This method requires the caller to hold the permission
         * android.Manifest.permission#SET_WALLPAPER.
         *
         * @sa android.Manifest.permission#SET_WALLPAPER
         *
         * @param data A stream containing the raw data to install as a wallpaper.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | If an error occurs reverting to the default
         * wallpaper.
         */
        SetStream(
            [in] IInputStream* data);

        /**
         * Return whether any users are currently set to use the wallpaper
         * with the given resource ID.  That is, their wallpaper has been
         * set through #setResource(int) with the same resource id.
         *
         * @sa #setResource(int)
         */
        HasResourceWallpaper(
            [in] Int32 resid,
            [out] Boolean* hasResource);

        /**
         * Returns the desired minimum width for the wallpaper. Callers of
         * #setBitmap(android.graphics.Bitmap) or
         * #setStream(java.io.InputStream) should check this value
         * beforehand to make sure the supplied wallpaper respects the desired
         * minimum width.
         *
         * @sa #setBitmap(android.graphics.Bitmap)
         * @sa #setStream(java.io.InputStream)
         *
         * If the returned value is <= 0, the caller should use the width of
         * the default display instead.
         *
         * @return The desired minimum width for the wallpaper. This value should
         * be honored by applications that set the wallpaper but it is not
         * mandatory.
         */
        GetDesiredMinimumWidth(
            [out] Int32* width);

        /**
         * Returns the desired minimum height for the wallpaper. Callers of
         * #setBitmap(android.graphics.Bitmap) or
         * #setStream(java.io.InputStream) should check this value
         * beforehand to make sure the supplied wallpaper respects the desired
         * minimum height.
         *
         * @sa #setBitmap(android.graphics.Bitmap)
         * @sa #setStream(java.io.InputStream)
         *
         * If the returned value is <= 0, the caller should use the height of
         * the default display instead.
         *
         * @return The desired minimum height for the wallpaper. This value should
         * be honored by applications that set the wallpaper but it is not
         * mandatory.
         */
        GetDesiredMinimumHeight(
            [out] Int32* height);

        /**
         * For use only by the current home application, to specify the size of
         * wallpaper it would like to use.  This allows such applications to have
         * a virtual wallpaper that is larger than the physical screen, matching
         * the size of their workspace.
         *
         * <p>Note developers, who don't seem to be reading this.  This is
         * for <em>home screens</em> to tell what size wallpaper they would like.
         * Nobody else should be calling this!  Certainly not other non-home-screen
         * apps that change the wallpaper.  Those apps are supposed to
         * <b>retrieve</b> the suggested size so they can construct a wallpaper
         * that matches it.
         *
         * <p>This method requires the caller to hold the permission
         * android.Manifest.permission#SET_WALLPAPER_HINTS.
         *
         * @sa android.Manifest.permission#SET_WALLPAPER_HINTS
         *
         * @param minimumWidth Desired minimum width
         * @param minimumHeight Desired minimum height
         */
        SuggestDesiredDimensions(
            [in] Int32 minimumWidth,
            [in] Int32 minimumHeight);

        /**
         * Specify extra padding that the wallpaper should have outside of the display.
         * That is, the given padding supplies additional pixels the wallpaper should extend
         * outside of the display itself.
         * @param padding The number of pixels the wallpaper should extend beyond the display,
         * on its left, top, right, and bottom sides.
         * @hide
         */
        SetDisplayPadding(
            [in] IRect* padding);

        /**
         * Apply a raw offset to the wallpaper window.  Should only be used in
         * combination with {@link #setDisplayPadding(android.graphics.Rect)} when you
         * have ensured that the wallpaper will extend outside of the display area so that
         * it can be moved without leaving part of the display uncovered.
         * @param x The offset, in pixels, to apply to the left edge.
         * @param y The offset, in pixels, to apply to the top edge.
         * @hide
         */
        SetDisplayOffset(
            [in] IBinder* windowToken,
            [in] Int32 x,
            [in] Int32 y);

        /**
         * Set the position of the current wallpaper within any larger space, when
         * that wallpaper is visible behind the given window.  The X and Y offsets
         * are floating point numbers ranging from 0 to 1, representing where the
         * wallpaper should be positioned within the screen space.  These only
         * make sense when the wallpaper is larger than the screen.
         *
         * @param windowToken The window who these offsets should be associated
         * with, as returned by android.view.View#getWindowToken() View.getWindowToken().
         *
         * @sa android.view.View#getWindowToken() View.getWindowToken()
         * @param xOffset The offset along the X dimension, from 0 to 1.
         * @param yOffset The offset along the Y dimension, from 0 to 1.
         */
        SetWallpaperOffsets(
            [in] IBinder* windowToken,
            [in] Float xOffset,
            [in] Float yOffset);

        /**
         * For applications that use multiple virtual screens showing a wallpaper,
         * specify the step size between virtual screens. For example, if the
         * launcher has 3 virtual screens, it would specify an xStep of 0.5,
         * since the X offset for those screens are 0.0, 0.5 and 1.0
         * @param xStep The X offset delta from one screen to the next one
         * @param yStep The Y offset delta from one screen to the next one
         */
        SetWallpaperOffsetSteps(
            [in] Float xStep,
            [in] Float yStep);

        /**
         * Send an arbitrary command to the current active wallpaper.
         *
         * @param windowToken The window who these offsets should be associated
         * with, as returned by android.view.View#getWindowToken() View.getWindowToken().
         *
         * @sa android.view.View#getWindowToken() View.getWindowToken()
         * @param action Name of the command to perform.  This must be a scoped
         * name to avoid collisions, such as "com.mycompany.wallpaper.DOIT".
         * @param x Arbitrary integer argument based on command.
         * @param y Arbitrary integer argument based on command.
         * @param z Arbitrary integer argument based on command.
         * @param extras Optional additional information for the command, or null.
         */
        SendWallpaperCommand(
            [in] IBinder* windowToken,
            [in] String action,
            [in] Int32 x,
            [in] Int32 y,
            [in] Int32 z,
            [in] IBundle* extras);

        /**
         * Clear the offsets previously associated with this window through
         * #setWallpaperOffsets(IBinder, float, float).  This reverts
         * the window to its default state, where it does not cause the wallpaper
         * to scroll from whatever its last offsets were.
         *
         * @sa #setWallpaperOffsets(IBinder, float, float)
         *
         * @param windowToken The window who these offsets should be associated
         * with, as returned by android.view.View#getWindowToken()
         * View.getWindowToken().
         *
         * @sa android.view.View#getWindowToken() View.getWindowToken()
         */
        ClearWallpaperOffsets(
            [in] IBinder* windowToken);

        /**
         * Remove any currently set wallpaper, reverting to the system's default
         * wallpaper. On success, the intent Intent#ACTION_WALLPAPER_CHANGED
         * is broadcast.
         *
         * @sa Intent#ACTION_WALLPAPER_CHANGED
         *
         * <p>This method requires the caller to hold the permission
         * android.Manifest.permission#SET_WALLPAPER.
         *
         * @sa android.Manifest.permission#SET_WALLPAPER
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | If an error occurs reverting to the default
         * wallpaper.
         */
        Clear();
    }

    [local]
    interface IWallpaperManagerHelper {
        /**
         * Retrieve a WallpaperManager associated with the given Context.
         */
        GetInstance(
            [in] IContext* ctx,
            [out] IWallpaperManager** manager);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
