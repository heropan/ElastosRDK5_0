
module
{
    using interface Elastos.Core.ICharSequence;
    using interface Elastos.Utility.IArrayList;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.Res.IResources;
    interface Elastos.Droid.Graphics.Drawable.IDrawable;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.View.IMenuItem;
    interface Elastos.Droid.Internal.View.Menu.IMenuBuilderCallback;
    interface Elastos.Droid.View.IContextMenuInfo;
    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IKeyEvent;
    interface Elastos.Droid.Internal.View.Menu.IMenuItemImpl;
    interface Elastos.Droid.Internal.View.Menu.IMenuPresenter;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace View {
    namespace Menu {

    /**
     * Implementation of the {@link android.view.Menu} interface for creating a
     * standard menu UI.
     */
    /**
     * @Involve
     * interface Elastos.Droid.View.IMenu
     */
    [local]
    interface IMenuBuilder {
        SetDefaultShowAsAction(
            [in] Int32 defaultShowAsAction);

        /**
         * Add a presenter to this menu. This will only hold a WeakReference;
         * you do not need to explicitly remove a presenter, but you can using
         * {@link #removeMenuPresenter(MenuPresenter)}.
         *
         * @param presenter The presenter to add
         */
        AddMenuPresenter(
            [in] IMenuPresenter* presenter);

        /**
         * Add a presenter to this menu that uses an alternate context for
         * inflating menu items. This will only hold a WeakReference; you do not
         * need to explicitly remove a presenter, but you can using
         * {@link #removeMenuPresenter(MenuPresenter)}.
         *
         * @param presenter The presenter to add
         * @param menuContext The context used to inflate menu items
         */
        AddMenuPresenter(
            [in] IMenuPresenter* presenter,
            [in] IContext* menuContext);

        /**
         * Remove a presenter from this menu. That presenter will no longer
         * receive notifications of updates to this menu's data.
         *
         * @param presenter The presenter to remove
         */
        RemoveMenuPresenter(
            [in] IMenuPresenter* presenter);

        SavePresenterStates(
            [in] IBundle* outState);

        RestorePresenterStates(
            [in] IBundle* state);

        SaveActionViewStates(
            [in] IBundle* outStates);

        RestoreActionViewStates(
            [in] IBundle* states);

        SetCallback(
            [in] IMenuBuilderCallback* menuCallback);

        RemoveItemAt(
            [in] Int32 index);

        ClearAll();

        FindItemIndex(
            [in] Int32 id,
            [out] Int32* index);

        FindGroupIndex(
            [in] Int32 group,
            [out] Int32* index);

        FindGroupIndex(
            [in] Int32 group,
            [in] Int32 start,
            [out] Int32* index);

        /**
         * Sets whether the shortcuts should be visible on menus.  Devices without hardware
         * key input will never make shortcuts visible even if this method is passed 'true'.
         *
         * @param shortcutsVisible Whether shortcuts should be visible (if true and a
         *            menu item does not have a shortcut defined, that item will
         *            still NOT show a shortcut)
         */
        SetShortcutsVisible(
            [in] Boolean shortcutsVisible);

        /**
         * @return Whether shortcuts should be visible on menus.
         */
        IsShortcutsVisible(
            [out] Boolean* qwertyMode);

        GetCallback(
            [out] IMenuBuilderCallback** menuCallback);

        GetContext(
            [out] IContext** context);

        /**
         * Dispatch a mode change event to this menu's callback.
         */
        ChangeMenuMode();

        PerformItemAction(
            [in] IMenuItem* item,
            [in] Int32 flags,
            [out] Boolean* state);

        PerformItemAction(
            [in] IMenuItem* item,
            [in] IMenuPresenter* preferredPresenter,
            [in] Int32 flags,
            [out] Boolean* state);

        /**
         * Closes the visible menu.
         *
         * @param allMenusAreClosing Whether the menus are completely closing (true),
         *            or whether there is another menu coming in this menu's place
         *            (false). For example, if the menu is closing because a
         *            sub menu is about to be shown, <var>allMenusAreClosing</var>
         *            is false.
         */
        Close(
            [in] Boolean allMenusAreClosing);

        OnItemsChanged(
            [in] Boolean structureChanged);

        /**
         * Stop dispatching item changed events to presenters until
         * {@link #startDispatchingItemsChanged()} is called. Useful when
         * many menu operations are going to be performed as a batch.
         */
        StopDispatchingItemsChanged();

        StartDispatchingItemsChanged();

        GetVisibleItems(
            [out] IArrayList** items);

        /**
         * This method determines which menu items get to be 'action items' that will appear
         * in an action bar and which items should be 'overflow items' in a secondary menu.
         * The rules are as follows:
         *
         * <p>Items are considered for inclusion in the order specified within the menu.
         * There is a limit of mMaxActionItems as a total count, optionally including the overflow
         * menu button itself. This is a soft limit; if an item shares a group ID with an item
         * previously included as an action item, the new item will stay with its group and become
         * an action item itself even if it breaks the max item count limit. This is done to
         * limit the conceptual complexity of the items presented within an action bar. Only a few
         * unrelated concepts should be presented to the user in this space, and groups are treated
         * as a single concept.
         *
         * <p>There is also a hard limit of consumed measurable space: mActionWidthLimit. This
         * limit may be broken by a single item that exceeds the remaining space, but no further
         * items may be added. If an item that is part of a group cannot fit within the remaining
         * measured width, the entire group will be demoted to overflow. This is done to ensure room
         * for navigation and other affordances in the action bar as well as reduce general UI clutter.
         *
         * <p>The space freed by demoting a full group cannot be consumed by future menu items.
         * Once items begin to overflow, all future items become overflow items as well. This is
         * to avoid inadvertent reordering that may break the app's intended design.
         */
        FlagActionItems();

        GetActionItems(
            [out] IArrayList** items);

        GetNonActionItems(
            [out] IArrayList** items);

        ClearHeader();

        GetHeaderTitle(
            [out] ICharSequence** title);

        GetHeaderIcon(
            [out] IDrawable** drawable);

        GetHeaderView(
            [out] IView** headerView);

        /**
         * Gets the root menu (if this is a submenu, find its root menu).
         * @return The root menu.
         */
        GetRootMenu(
            [out] IMenuBuilder** menu);

        /**
         * Sets the current menu info that is set on all items added to this menu
         * (until this is called again with different menu info, in which case that
         * one will be added to all subsequent item additions).
         *
         * @param menuInfo The extra menu information to add.
         */
        SetCurrentMenuInfo(
            [in] IContextMenuInfo* menuInfo);

        ExpandItemActionView(
            [in] IMenuItemImpl* item,
            [out] Boolean* expanded);

        CollapseItemActionView(
            [in] IMenuItemImpl* item,
            [out] Boolean* collapsed);

        GetExpandedItem(
            [out] IMenuItemImpl** itemImpl);
    }

    /**
     * Called by menu to notify of close and selection changes
     */
    [local]
    interface IMenuBuilderCallback {
        /**
         * Called when a menu item is selected.
         * @param menu The menu that is the parent of the item
         * @param item The menu item that is selected
         * @return whether the menu item selection was handled
         */
        OnMenuItemSelected(
            [in] IMenuBuilder* menu,
            [in] IMenuItem* item,
            [out] Boolean* state);

        /**
         * Called when the mode of the menu changes (for example, from icon to expanded).
         *
         * @param menu the menu that has changed modes
         */
        OnMenuModeChange(
            [in] IMenuBuilder* menu);
    }

    /**
     * Called by menu items to execute their associated action
     */
    [local]
    interface IMenuBuilderItemInvoker {
        InvokeItem(
            [in] IMenuItemImpl* item,
            [out] Boolean* state);
    }

    } // namespace Menu
    } // namespace View
    } // namespace Internal
    } // namepsace Droid
    } // namespace Elastos
}
