
module
{
    using interface Elastos.Utility.IList;

    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.View.Accessibility.IAccessibilityWindowInfo;
    interface Elastos.Droid.View.Accessibility.IIAccessibilityInteractionConnectionCallback;
    interface Elastos.Droid.AccessibilityService.IAccessibilityServiceInfo;

    namespace Elastos {
    namespace Droid {
    namespace AccessibilityService {

    /**
     * Interface given to an AccessibilitySerivce to talk to the AccessibilityManagerService.
     *
     * @hide
     */
    [local]
    interface IIAccessibilityServiceConnection {
        SetServiceInfo(
            [in] IAccessibilityServiceInfo* info);

        FindAccessibilityNodeInfoByAccessibilityId(
            [in] Int32 accessibilityWindowId,
            [in] Int64 accessibilityNodeId,
            [in] Int32 interactionId,
            [in] IIAccessibilityInteractionConnectionCallback* cb,
            [in] Int32 flags,
            [in] Int64 threadId,
            [out] Boolean* scale);

        FindAccessibilityNodeInfosByText(
            [in] Int32 accessibilityWindowId,
            [in] Int64 accessibilityNodeId,
            [in] String text,
            [in] Int32 interactionId,
            [in] IIAccessibilityInteractionConnectionCallback* cb,
            [in] Int64 threadId,
            [out] Boolean* scale);

        FindAccessibilityNodeInfosByViewId(
            [in] Int32 accessibilityWindowId,
            [in] Int64 accessibilityNodeId,
            [in] String viewId,
            [in] Int32 interactionId,
            [in] IIAccessibilityInteractionConnectionCallback* cb,
            [in] Int64 threadId,
            [out] Boolean* scale);

        FindFocus(
            [in] Int32 accessibilityWindowId,
            [in] Int64 accessibilityNodeId,
            [in] Int32 focusType,
            [in] Int32 interactionId,
            [in] IIAccessibilityInteractionConnectionCallback* cb,
            [in] Int64 threadId,
            [out] Boolean* scale);

        FocusSearch(
            [in] Int32 accessibilityWindowId,
            [in] Int64 accessibilityNodeId,
            [in] Int32 direction,
            [in] Int32 interactionId,
            [in] IIAccessibilityInteractionConnectionCallback* cb,
            [in] Int64 threadId,
            [out] Boolean* scale);

        PerformAccessibilityAction(
            [in] Int32 accessibilityWindowId,
            [in] Int64 accessibilityNodeId,
            [in] Int32 action,
            [in] IBundle* arguments,
            [in] Int32 interactionId,
            [in] IIAccessibilityInteractionConnectionCallback* cb,
            [in] Int64 threadId,
            [out] Boolean* result);

        ComputeClickPointInScreen(
            [in] Int32 accessibilityWindowId,
            [in] Int64 accessibilityNodeId,
            [in] Int32 interactionId,
            [in] IIAccessibilityInteractionConnectionCallback* callBack,
            [in] Int64 threadId,
            [out] Boolean* result);

        GetWindow(
            [in] Int32 windowId,
            [out] IAccessibilityWindowInfo** window);

        GetWindows(
            [out] IList** windows);

        GetServiceInfo(
            [out] IAccessibilityServiceInfo** serviceInfo);

        PerformGlobalAction(
            [in] Int32 action,
            [out] Boolean* result);

        SetOnKeyEventResult(
            [in] Boolean handled,
            [in] Int32 sequence);
    }

    } // namespace AccessibilityService
    } // namepsace Droid
    } // namespace Elastos
}
