
module
{

    using interface Elastos.Core.ICharSequence;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    interface IGsmAlphabetTextEncodingDetails {

        /**
         *The number of SMS's required to encode the text.
         */
        SetMsgCount(
            [in] Int32 msgCount);

        GetMsgCount(
            [out] Int32* msgCount);

        /**
         * The number of code units consumed so far, where code units
         * are basically characters in the encoding -- for example,
         * septets for the standard ASCII and GSM encodings, and 16
         * bits for Unicode.
         */
        SetCodeUnitCount(
            [in] Int32 codeUnitCount);

        GetCodeUnitCount(
            [out] Int32* codeUnitCount);

        /**
         * How many code units are still available without spilling
         * into an additional message.
         */
        SetCodeUnitsRemaining(
            [in] Int32 codeUnitsRemaining);

        GetCodeUnitsRemaining(
            [out] Int32* codeUnitsRemaining);

        /**
         * The encoding code unit size (specified using
         * android.telephony.SmsMessage ENCODING_*).
         */
        SetCodeUnitSize(
            [in] Int32 codeUnitSize);

        GetCodeUnitSize(
            [out] Int32* codeUnitSize);

        /**
         * The GSM national language table to use, or 0 for the default 7-bit alphabet.
         */
        SetLanguageTable(
            [in] Int32 languageTable);

        GetLanguageTable(
            [out] Int32* languageTable);

        /**
         * The GSM national language shift table to use, or 0 for the default 7-bit extension table.
         */
        SetLanguageShiftTable(
            [in] Int32 languageShiftTable);

        GetLanguageShiftTable(
            [out] Int32* languageShiftTable);
    }

    /**
     * This class implements the character set mapping between
     * the GSM SMS 7-bit alphabet specified in TS 23.038 6.2.1
     * and UTF-16
     *
     * {@hide}
     */
    [deprecated]
    interface IGsmAlphabet {

        /**
         * This escapes extended characters, and when present indicates that the
         * following character should be looked up in the "extended" table.
         *
         * gsmToChar(GSM_EXTENDED_ESCAPE) returns 0xffff
         */
        const Byte GSM_EXTENDED_ESCAPE = 0x1B;

        /**
         * User data header requires one octet for length. Count as one septet, because
         * all combinations of header elements below will have at least one free bit
         * when padding to the nearest septet boundary.
         */
        const Int32 UDH_SEPTET_COST_LENGTH = 1;

        /**
         * Using a non-default language locking shift table OR single shift table
         * requires a user data header of 3 octets, or 4 septets, plus UDH length.
         */
        const Int32 UDH_SEPTET_COST_ONE_SHIFT_TABLE = 4;

        /**
         * Using a non-default language locking shift table AND single shift table
         * requires a user data header of 6 octets, or 7 septets, plus UDH length.
         */
        const Int32 UDH_SEPTET_COST_TWO_SHIFT_TABLES = 7;

        /**
         * Multi-part messages require a user data header of 5 octets, or 6 septets,
         * plus UDH length.
         */
        const Int32 UDH_SEPTET_COST_CONCATENATED_MESSAGE = 6;

        /**
        * Converts a char to a GSM 7 bit table index.
        * Returns ' ' in GSM alphabet if there's no possible match. Returns
        * GSM_EXTENDED_ESCAPE if this character is in the extended table.
        * In this case, you must call charToGsmExtended() for the value
        * that should follow GSM_EXTENDED_ESCAPE in the GSM alphabet string.
        * @param c the character to convert
        * @return the GSM 7 bit table index for the specified character
        */
        CharToGsm(
            [in] Char32 c,
            [out] Int32* val);

        /**
        * Converts a char to a GSM 7 bit table index.
        * Returns GSM_EXTENDED_ESCAPE if this character is in the extended table.
        * In this case, you must call charToGsmExtended() for the value that
        * should follow GSM_EXTENDED_ESCAPE in the GSM alphabet string.
        *
        * @param c the character to convert
        * @param throwException If true, throws EncodeException on invalid char.
        *   If false, returns GSM alphabet ' ' char.
        * @throws EncodeException encode error when throwException is true
        * @return the GSM 7 bit table index for the specified character
        */
        CharToGsm(
            [in] Char32 c,
            [in] Boolean throwException,
            [out] Int32* val);

        /**
        * Converts a char to an extended GSM 7 bit table index.
        * Extended chars should be escaped with GSM_EXTENDED_ESCAPE.
        * Returns ' ' in GSM alphabet if there's no possible match.
        * @param c the character to convert
        * @return the GSM 7 bit extended table index for the specified character
        */
        CharToGsmExtended(
            [in] Char32 c,
            [out] Int32* val);

        /**
        * Converts a character in the GSM alphabet into a char.
        *
        * If GSM_EXTENDED_ESCAPE is passed, 0xffff is returned. In this case,
        * the following character in the stream should be decoded with
        * gsmExtendedToChar().
        *
        * If an unmappable value is passed (one greater than 127), ' ' is returned.
        *
        * @param gsmChar the GSM 7 bit table index to convert
        * @return the decoded character
        */
        GsmToChar(
            [in] Int32 gsmChar,
            [out] Char32* res);

        /**
        * Converts a character in the extended GSM alphabet into a char
        *
        * if GSM_EXTENDED_ESCAPE is passed, ' ' is returned since no second
        * extension page has yet been defined (see Note 1 in table 6.2.1.1 of
        * TS 23.038 v7.00)
        *
        * If an unmappable value is passed, the character from the GSM 7 bit
        * default table will be used (table 6.2.1.1 of TS 23.038).
        *
        * @param gsmChar the GSM 7 bit extended table index to convert
        * @return the decoded character
        */
        GsmExtendedToChar(
            [in] Int32 gsmChar,
            [out] Char32* res);

        /**
        * Converts a String into a byte array containing the 7-bit packed
        * GSM Alphabet representation of the string. If a header is provided,
        * this is included in the returned byte array and padded to a septet
        * boundary. This method is used by OEM code.
        *
        * @param data The text string to encode.
        * @param header Optional header (including length byte) that precedes
        * the encoded data, padded to septet boundary.
        * @return Byte array containing header and encoded data.
        * @throws EncodeException if String is too large to encode
        * @see #stringToGsm7BitPackedWithHeader(String, byte[], int, int)
        */
        StringToGsm7BitPackedWithHeader(
            [in] String data,
            [in] ArrayOf<Byte>* header,
            [out, callee] ArrayOf<Byte>* res);

        /**
        * Converts a String into a byte array containing the 7-bit packed
        * GSM Alphabet representation of the string. If a header is provided,
        * this is included in the returned byte array and padded to a septet
        * boundary.
        *
        * Unencodable chars are encoded as spaces
        *
        * Byte 0 in the returned byte array is the count of septets used,
        * including the header and header padding. The returned byte array is
        * the minimum size required to store the packed septets. The returned
        * array cannot contain more than 255 septets.
        *
        * @param data The text string to encode.
        * @param header Optional header (including length byte) that precedes
        * the encoded data, padded to septet boundary.
        * @param languageTable the 7 bit language table, or 0 for the default GSM alphabet
        * @param languageShiftTable the 7 bit single shift language table, or 0 for the default
        *     GSM extension table
        * @return Byte array containing header and encoded data.
        * @throws EncodeException if String is too large to encode
        */
        StringToGsm7BitPackedWithHeader(
            [in] String data,
            [in] ArrayOf<Byte>* header,
            [in] Int32 languageTable,
            [in] Int32 languageShiftTable,
            [out, callee] ArrayOf<Byte>* res);

        /**
        * Converts a String into a byte array containing
        * the 7-bit packed GSM Alphabet representation of the string.
        *
        * Unencodable chars are encoded as spaces
        *
        * Byte 0 in the returned byte array is the count of septets used
        * The returned byte array is the minimum size required to store
        * the packed septets. The returned array cannot contain more than 255
        * septets.
        *
        * @param data the data string to encode
        * @return the encoded string
        * @throws EncodeException if String is too large to encode
        */
        StringToGsm7BitPacked(
            [in] String data,
            [out, callee] ArrayOf<Byte>* res);

        /**
        * Converts a String into a byte array containing
        * the 7-bit packed GSM Alphabet representation of the string.
        *
        * Unencodable chars are encoded as spaces
        *
        * Byte 0 in the returned byte array is the count of septets used
        * The returned byte array is the minimum size required to store
        * the packed septets. The returned array cannot contain more than 255
        * septets.
        *
        * @param data the data string to encode
        * @param languageTable the 7 bit language table, or 0 for the default GSM alphabet
        * @param languageShiftTable the 7 bit single shift language table, or 0 for the default
        *     GSM extension table
        * @return the encoded string
        * @throws EncodeException if String is too large to encode
        */
        StringToGsm7BitPacked(
            [in] String data,
            [in] Int32 languageTable,
            [in] Int32 languageShiftTable,
            [out, callee] ArrayOf<Byte>* res);

        /**
        * Converts a String into a byte array containing
        * the 7-bit packed GSM Alphabet representation of the string.
        *
        * Byte 0 in the returned byte array is the count of septets used
        * The returned byte array is the minimum size required to store
        * the packed septets. The returned array cannot contain more than 255
        * septets.
        *
        * @param data the text to convert to septets
        * @param startingSeptetOffset the number of padding septets to put before
        *  the character data at the beginning of the array
        * @param throwException If true, throws EncodeException on invalid char.
        *   If false, replaces unencodable char with GSM alphabet space char.
        * @param languageTable the 7 bit language table, or 0 for the default GSM alphabet
        * @param languageShiftTable the 7 bit single shift language table, or 0 for the default
        *     GSM extension table
        * @return the encoded message
        *
        * @throws EncodeException if String is too large to encode
        */
        StringToGsm7BitPacked(
            [in] String data,
            [in] Int32 startingSeptetOffset,
            [in] Boolean throwException,
            [in] Int32 languageTable,
            [in] Int32 languageShiftTable,
            [out, callee] ArrayOf<Byte>* res);

        /**
        * Convert a GSM alphabet 7 bit packed string (SMS string) into a
        * {@link java.lang.String}.
        *
        * See TS 23.038 6.1.2.1 for SMS Character Packing
        *
        * @param pdu the raw data from the pdu
        * @param offset the byte offset of
        * @param lengthSeptets string length in septets, not bytes
        * @return String representation or null on decoding exception
        */
        Gsm7BitPackedToString(
            [in] ArrayOf<Byte>* pdu,
            [in] Int32 offset,
            [in] Int32 lengthSeptets,
            [out] String* res);

        /**
        * Convert a GSM alphabet 7 bit packed string (SMS string) into a
        * {@link java.lang.String}.
        *
        * See TS 23.038 6.1.2.1 for SMS Character Packing
        *
        * @param pdu the raw data from the pdu
        * @param offset the byte offset of
        * @param lengthSeptets string length in septets, not bytes
        * @param numPaddingBits the number of padding bits before the start of the
        *  string in the first byte
        * @param languageTable the 7 bit language table, or 0 for the default GSM alphabet
        * @param shiftTable the 7 bit single shift language table, or 0 for the default
        *     GSM extension table
        * @return String representation or null on decoding exception
        */
        Gsm7BitPackedToString(
            [in] ArrayOf<Byte>* pdu,
            [in] Int32 offset,
            [in] Int32 lengthSeptets,
            [in] Int32 numPaddingBits,
            [in] Int32 languageTable,
            [in] Int32 shiftTable,
            [out] String* res);

        /**
        * Convert a GSM alphabet string that's stored in 8-bit unpacked
        * format (as it often appears in SIM records) into a String
        *
        * Field may be padded with trailing 0xff's. The decode stops
        * at the first 0xff encountered.
        *
        * @param data the byte array to decode
        * @param offset array offset for the first character to decode
        * @param length the number of bytes to decode
        * @return the decoded string
        */
        Gsm8BitUnpackedToString(
            [in] ArrayOf<Byte>* data,
            [in] Int32 offset,
            [in] Int32 length,
            [out] String* res);

        /**
        * Convert a GSM alphabet string that's stored in 8-bit unpacked
        * format (as it often appears in SIM records) into a String
        *
        * Field may be padded with trailing 0xff's. The decode stops
        * at the first 0xff encountered.
        *
        * Additionally, in some country(ex. Korea), there are non-ASCII or MBCS characters.
        * If a character set is given, characters in data are treat as MBCS.
        */
        Gsm8BitUnpackedToString(
            [in] ArrayOf<Byte>* data,
            [in] Int32 offset,
            [in] Int32 length,
            [in] String characterset,
            [out] String* res);

        /**
        * Convert a string into an 8-bit unpacked GSM alphabet byte array.
        * Always uses GSM default 7-bit alphabet and extension table.
        * @param s the string to encode
        * @return the 8-bit GSM encoded byte array for the string
        */
        StringToGsm8BitPacked(
            [in] String s,
            [out, callee] ArrayOf<Byte>* res);

        /**
        * Write a String into a GSM 8-bit unpacked field of
        * Field is padded with 0xff's, string is truncated if necessary
        *
        * @param s the string to encode
        * @param dest the destination byte array
        * @param offset the starting offset for the encoded string
        * @param length the maximum number of bytes to write
        */
        StringToGsm8BitUnpackedField(
            [in] String s,
            [in] ArrayOf<Byte>* dest,
            [in] Int32 offset,
            [in] Int32 length);

        /**
        * Returns the count of 7-bit GSM alphabet characters
        * needed to represent this character. Counts unencodable char as 1 septet.
        * @param c the character to examine
        * @return the number of septets for this character
        */
        CountGsmSeptets(
            [in] Char32 c,
            [out] Int32* val);

        /**
        * Returns the count of 7-bit GSM alphabet characters
        * needed to represent this character using the default 7 bit GSM alphabet.
        * @param c the character to examine
        * @param throwsException If true, throws EncodeException if unencodable
        * char. Otherwise, counts invalid char as 1 septet.
        * @return the number of septets for this character
        * @throws EncodeException the character can't be encoded and throwsException is true
        */
        CountGsmSeptets(
            [in] Char32 c,
            [in] Boolean throwsException,
            [out] Int32* val);

        IsGsmSeptets(
            [in] Char32 c,
            [out] Boolean* result);

        /**
        * Returns the count of 7-bit GSM alphabet characters needed
        * to represent this string, using the specified 7-bit language table
        * and extension table (0 for GSM default tables).
        * @param s the Unicode string that will be encoded
        * @param use7bitOnly allow using space in place of unencodable character if true,
        *     otherwise, return -1 if any characters are unencodable
        * @param languageTable the 7 bit language table, or 0 for the default GSM alphabet
        * @param languageShiftTable the 7 bit single shift language table, or 0 for the default
        *     GSM extension table
        * @return the septet count for s using the specified language tables, or -1 if any
        *     characters are unencodable and use7bitOnly is false
        */
        CountGsmSeptetsUsingTables(
            [in] ICharSequence* s,
            [in] Boolean use7bitOnly,
            [in] Int32 languageTable,
            [in] Int32 languageShiftTable,
            [out] Int32* val);

        /**
        * Returns the count of 7-bit GSM alphabet characters
        * needed to represent this string, and the language table and
        * language shift table used to achieve this result.
        * For multi-part text messages, each message part may use its
        * own language table encoding as specified in the message header
        * for that message. However, this method will only return the
        * optimal encoding for the message as a whole. When the individual
        * pieces are encoded, a more optimal encoding may be chosen for each
        * piece of the message, but the message will be split into pieces
        * based on the encoding chosen for the message as a whole.
        * @param s the Unicode string that will be encoded
        * @param use7bitOnly allow using space in place of unencodable character if true,
        *     using the language table pair with the fewest unencodable characters
        * @return a TextEncodingDetails object containing the message and
        *     character counts for the most efficient 7-bit encoding,
        *     or null if there are no suitable language tables to encode the string.
        */
        CountGsmSeptets(
            [in] ICharSequence* s,
            [in] Boolean use7bitOnly,
            [out] IGsmAlphabetTextEncodingDetails** res);

        /**
        * Returns the index into <code>s</code> of the first character
        * after <code>limit</code> septets have been reached, starting at
        * index <code>start</code>.  This is used when dividing messages
        * into units within the SMS message size limit.
        *
        * @param s source string
        * @param start index of where to start counting septets
        * @param limit maximum septets to include,
        *   e.g. <code>MAX_USER_DATA_SEPTETS</code>
        * @param langTable the 7 bit character table to use (0 for default GSM 7-bit alphabet)
        * @param langShiftTable the 7 bit shift table to use (0 for default GSM extension table)
        * @return index of first character that won't fit, or the length
        *   of the entire string if everything fits
        */
        FindGsmSeptetLimitIndex(
            [in] String s,
            [in] Int32 start,
            [in] Int32 limit,
            [in] Int32 langTable,
            [in] Int32 langShiftTable,
            [out] Int32* val);


        /**
        * Modify the array of enabled national language single shift tables for SMS
        * encoding. This is used for unit testing, but could also be used to
        * modify the enabled encodings based on the active MCC/MNC, for example.
        *
        * @param tables the new list of enabled single shift tables
        */
        SetEnabledSingleShiftTables(
            [in] ArrayOf<Int32>* tables);

        /**
        * Modify the array of enabled national language locking shift tables for SMS
        * encoding. This is used for unit testing, but could also be used to
        * modify the enabled encodings based on the active MCC/MNC, for example.
        *
        * @param tables the new list of enabled locking shift tables
        */
        SetEnabledLockingShiftTables(
            [in] ArrayOf<Int32>* tables);

        /**
        * Return the array of enabled national language single shift tables for SMS
        * encoding. This is used for unit testing. The returned array is not a copy, so
        * the caller should be careful not to modify it.
        *
        * @return the list of enabled single shift tables
        */
        GetEnabledSingleShiftTables(
            [out, callee] ArrayOf<Int32>* res);

        /**
        * Return the array of enabled national language locking shift tables for SMS
        * encoding. This is used for unit testing. The returned array is not a copy, so
        * the caller should be careful not to modify it.
        *
        * @return the list of enabled locking shift tables
        */
        GetEnabledLockingShiftTables(
            [out, callee] ArrayOf<Int32>* res);
    }

    } // namespace Telephony
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}
