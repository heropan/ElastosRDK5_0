
module
{
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IComponentName;

    namespace Elastos {
    namespace Droid {
    namespace Service {
    namespace Notification {

    /**
     * Stores ranking related information on a currently active notification.
     *
     * <p>
     * Ranking objects aren't automatically updated as notification events
     * occur. Instead, ranking information has to be retrieved again via the
     * current {@link RankingMap}.
     */
    interface INotificationListenerServiceRanking {
        /** Value signifying that the user has not expressed a per-app visibility override value.
         * @hide */
        const Int32 VISIBILITY_NO_OVERRIDE = -1000;

        /**
         * Returns the key of the notification this Ranking applies to.
         */
        GetKey(
            [out] String* key);

        /**
         * Returns the rank of the notification.
         *
         * @return the rank of the notification, that is the 0-based index in
         *     the list of active notifications.
         */
        GetRank(
            [out] Int32* rank);

        /**
         * Returns whether the notification is an ambient notification, that is
         * a notification that doesn't require the user's immediate attention.
         */
        IsAmbient(
            [out] Boolean* ret);

        /**
         * Returns the user specificed visibility for the package that posted
         * this notification, or
         * {@link NotificationListenerService.Ranking#VISIBILITY_NO_OVERRIDE} if
         * no such preference has been expressed.
         * @hide
         */
        GetVisibilityOverride(
            [out] Int32* ret);


        /**
         * Returns whether the notification matches the user's interruption
         * filter.
         *
         * @return {@code true} if the notification is allowed by the filter, or
         * {@code false} if it is blocked.
         */
        MatchesInterruptionFilter(
            [out] Boolean* ret);
    }

    /**
     * Provides access to ranking information on currently active
     * notifications.
     *
     * <p>
     * Note that this object represents a ranking snapshot that only applies to
     * notifications active at the time of retrieval.
     * @Involve
     * interface IParcelable
     */
    interface INotificationListenerServiceRankingMap {
        /**
         * Request the list of notification keys in their current ranking
         * order.
         *
         * @return An array of active notification keys, in their ranking order.
         */
        GetOrderedKeys(
            [out, callee] ArrayOf<String>* keys);

        /**
         * Populates outRanking with ranking information for the notification
         * with the given key.
         *
         * @return true if a valid key has been passed and outRanking has
         *     been populated; false otherwise
         */
        GetRanking(
            [in] String key,
            [in] INotificationListenerServiceRanking* outRanking,
            [out] Boolean* ret);
    }

    /**
     * A service that receives calls from the system when new notifications are
     * posted or removed, or their ranking changed.
     * <p>To extend this class, you must declare the service in your manifest file with
     * the {@link android.Manifest.permission#BIND_NOTIFICATION_LISTENER_SERVICE} permission
     * and include an intent filter with the {@link #SERVICE_INTERFACE} action. For example:</p>
     * <pre>
     * &lt;service android:name=".NotificationListener"
     *          android:label="&#64;string/service_name"
     *          android:permission="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE">
     *     &lt;intent-filter>
     *         &lt;action android:name="android.service.notification.NotificationListenerService" />
     *     &lt;/intent-filter>
     * &lt;/service></pre>
     *
     * @hide
     * @Involve
     * extends Elastos.Droid.Content.IContext
     * extends Elastos.Droid.Content.IContextWrapper
     * extends Elastos.Droid.App.IService
     *
     * interface Elastos.Droid.View.IWindowCallback
     */
    [deprecated, local]
    interface INotificationListenerService {
        /**
         * {@link #getCurrentInterruptionFilter() Interruption filter} constant -
         *     Normal interruption filter.
         */
        const Int32 INTERRUPTION_FILTER_ALL = 1;

        /**
         * {@link #getCurrentInterruptionFilter() Interruption filter} constant -
         *     Priority interruption filter.
         */
        const Int32 INTERRUPTION_FILTER_PRIORITY = 2;

        /**
         * {@link #getCurrentInterruptionFilter() Interruption filter} constant -
         *     No interruptions filter.
         */
        const Int32 INTERRUPTION_FILTER_NONE = 3;

        /** {@link #getCurrentListenerHints() Listener hints} constant - the primary device UI
         * should disable notification sound, vibrating and other visual or aural effects.
         * This does not change the interruption filter, only the effects. **/
        const Int32 HINT_HOST_DISABLE_EFFECTS = 1;

        /**
         * The full trim of the StatusBarNotification including all its features.
         *
         * @hide
         */
        //@SystemApi
        const Int32 TRIM_FULL = 0;

        /**
         * A light trim of the StatusBarNotification excluding the following features:
         *
         * <ol>
         *     <li>{@link Notification#tickerView tickerView}</li>
         *     <li>{@link Notification#contentView contentView}</li>
         *     <li>{@link Notification#largeIcon largeIcon}</li>
         *     <li>{@link Notification#bigContentView bigContentView}</li>
         *     <li>{@link Notification#headsUpContentView headsUpContentView}</li>
         *     <li>{@link Notification#EXTRA_LARGE_ICON extras[EXTRA_LARGE_ICON]}</li>
         *     <li>{@link Notification#EXTRA_LARGE_ICON_BIG extras[EXTRA_LARGE_ICON_BIG]}</li>
         *     <li>{@link Notification#EXTRA_PICTURE extras[EXTRA_PICTURE]}</li>
         *     <li>{@link Notification#EXTRA_BIG_TEXT extras[EXTRA_BIG_TEXT]}</li>
         * </ol>
         *
         * @hide
         */
        //@SystemApi
        const Int32 TRIM_LIGHT = 1;

        /**
         * The {@link Intent} that must be declared as handled by the service.
         */
        //@SdkConstant(SdkConstant.SdkConstantType.SERVICE_ACTION)
        const String SERVICE_INTERFACE = "android.service.notification.NotificationListenerService";

        /**
         * Implement this method to learn about new notifications as they are posted by apps.
         *
         * @param sbn A data structure encapsulating the original {@link android.app.Notification}
         *            object as well as its identifying information (tag and id) and source
         *            (package name).
         */
        OnNotificationPosted(
            [in] IStatusBarNotification* sbn);

        /**
         * Implement this method to learn about new notifications as they are posted by apps.
         *
         * @param sbn A data structure encapsulating the original {@link android.app.Notification}
         *            object as well as its identifying information (tag and id) and source
         *            (package name).
         * @param rankingMap The current ranking map that can be used to retrieve ranking information
         *                   for active notifications, including the newly posted one.
         */
        OnNotificationPosted(
            [in] IStatusBarNotification* sbn,
            [in] INotificationListenerServiceRankingMap* rankingMap);

        /**
         * Implement this method to learn when notifications are removed.
         * <P>
         * This might occur because the user has dismissed the notification using system UI (or another
         * notification listener) or because the app has withdrawn the notification.
         * <P>
         * NOTE: The {@link StatusBarNotification} object you receive will be "light"; that is, the
         * result from {@link StatusBarNotification#getNotification} may be missing some heavyweight
         * fields such as {@link android.app.Notification#contentView} and
         * {@link android.app.Notification#largeIcon}. However, all other fields on
         * {@link StatusBarNotification}, sufficient to match this call with a prior call to
         * {@link #onNotificationPosted(StatusBarNotification)}, will be intact.
         *
         * @param sbn A data structure encapsulating at least the original information (tag and id)
         *            and source (package name) used to post the {@link android.app.Notification} that
         *            was just removed.
         */
        OnNotificationRemoved(
            [in] IStatusBarNotification* sbn);

        /**
         * Implement this method to learn when notifications are removed.
         * <P>
         * This might occur because the user has dismissed the notification using system UI (or another
         * notification listener) or because the app has withdrawn the notification.
         * <P>
         * NOTE: The {@link StatusBarNotification} object you receive will be "light"; that is, the
         * result from {@link StatusBarNotification#getNotification} may be missing some heavyweight
         * fields such as {@link android.app.Notification#contentView} and
         * {@link android.app.Notification#largeIcon}. However, all other fields on
         * {@link StatusBarNotification}, sufficient to match this call with a prior call to
         * {@link #onNotificationPosted(StatusBarNotification)}, will be intact.
         *
         * @param sbn A data structure encapsulating at least the original information (tag and id)
         *            and source (package name) used to post the {@link android.app.Notification} that
         *            was just removed.
         * @param rankingMap The current ranking map that can be used to retrieve ranking information
         *                   for active notifications.
         *
         */
        OnNotificationRemoved(
            [in] IStatusBarNotification* sbn,
            [in] INotificationListenerServiceRankingMap* rankingMap);

        /**
         * Implement this method to learn about when the listener is enabled and connected to
         * the notification manager.  You are safe to call {@link #getActiveNotifications()}
         * at this time.
         */
        OnListenerConnected();

        /**
         * Implement this method to be notified when the notification ranking changes.
         *
         * @param rankingMap The current ranking map that can be used to retrieve ranking information
         *                   for active notifications.
         */
        OnNotificationRankingUpdate(
            [in] INotificationListenerServiceRankingMap* rankingMap);

        /**
         * Implement this method to be notified when the
         * {@link #getCurrentListenerHints() Listener hints} change.
         *
         * @param hints The current {@link #getCurrentListenerHints() listener hints}.
         */
        OnListenerHintsChanged(
            [in] Int32 hints);

        /**
         * Implement this method to be notified when the
         * {@link #getCurrentInterruptionFilter() interruption filter} changed.
         *
         * @param interruptionFilter The current
         *     {@link #getCurrentInterruptionFilter() interruption filter}.
         */
        OnInterruptionFilterChanged(
            [in] Int32 interruptionFilter);

        /**
         * Inform the notification manager about dismissal of a single notification.
         * <p>
         * Use this if your listener has a user interface that allows the user to dismiss individual
         * notifications, similar to the behavior of Android's status bar and notification panel.
         * It should be called after the user dismisses a single notification using your UI;
         * upon being informed, the notification manager will actually remove the notification
         * and you will get an {@link #onNotificationRemoved(StatusBarNotification)} callback.
         * <P>
         * <b>Note:</b> If your listener allows the user to fire a notification's
         * {@link android.app.Notification#contentIntent} by tapping/clicking/etc., you should call
         * this method at that time <i>if</i> the Notification in question has the
         * {@link android.app.Notification#FLAG_AUTO_CANCEL} flag set.
         *
         * @param pkg Package of the notifying app.
         * @param tag Tag of the notification as specified by the notifying app in
         *     {@link android.app.NotificationManager#notify(String, int, android.app.Notification)}.
         * @param id  ID of the notification as specified by the notifying app in
         *     {@link android.app.NotificationManager#notify(String, int, android.app.Notification)}.
         * <p>
         * @deprecated Use {@link #cancelNotification(String key)}
         * instead. Beginning with {@link android.os.Build.VERSION_CODES#LOLLIPOP} this method will no longer
         * cancel the notification. It will continue to cancel the notification for applications
         * whose {@code targetSdkVersion} is earlier than {@link android.os.Build.VERSION_CODES#LOLLIPOP}.
         */
        CancelNotification(
            [in] String pkg,
            [in] String tag,
            [in] Int32 id);

        /**
         * Inform the notification manager about dismissal of a single notification.
         * <p>
         * Use this if your listener has a user interface that allows the user to dismiss individual
         * notifications, similar to the behavior of Android's status bar and notification panel.
         * It should be called after the user dismisses a single notification using your UI;
         * upon being informed, the notification manager will actually remove the notification
         * and you will get an {@link #onNotificationRemoved(StatusBarNotification)} callback.
         * <P>
         * <b>Note:</b> If your listener allows the user to fire a notification's
         * {@link android.app.Notification#contentIntent} by tapping/clicking/etc., you should call
         * this method at that time <i>if</i> the Notification in question has the
         * {@link android.app.Notification#FLAG_AUTO_CANCEL} flag set.
         * <p>
         * @param key Notification to dismiss from {@link StatusBarNotification#getKey()}.
         */
        CancelNotification(
            [in] String key);

        /**
         * Inform the notification manager about dismissal of all notifications.
         * <p>
         * Use this if your listener has a user interface that allows the user to dismiss all
         * notifications, similar to the behavior of Android's status bar and notification panel.
         * It should be called after the user invokes the "dismiss all" function of your UI;
         * upon being informed, the notification manager will actually remove all active notifications
         * and you will get multiple {@link #onNotificationRemoved(StatusBarNotification)} callbacks.
         *
         * {@see #cancelNotification(String, String, int)}
         */
        CancelAllNotifications();

        /**
         * Inform the notification manager about dismissal of specific notifications.
         * <p>
         * Use this if your listener has a user interface that allows the user to dismiss
         * multiple notifications at once.
         *
         * @param keys Notifications to dismiss, or {@code null} to dismiss all.
         *
         * {@see #cancelNotification(String, String, int)}
         */
        CancelNotifications(
            [in] ArrayOf<String>* keys);

        /**
         * Sets the notification trim that will be received via {@link #onNotificationPosted}.
         *
         * <p>
         * Setting a trim other than {@link #TRIM_FULL} enables listeners that don't need access to the
         * full notification features right away to reduce their memory footprint. Full notifications
         * can be requested on-demand via {@link #getActiveNotifications(int)}.
         *
         * <p>
         * Set to {@link #TRIM_FULL} initially.
         *
         * @hide
         *
         * @param trim trim of the notifications to be passed via {@link #onNotificationPosted}.
         *             See <code>TRIM_*</code> constants.
         */
        //@SystemApi
        SetOnNotificationPostedTrim(
            [in] Int32 trim);

        /**
         * Request the list of outstanding notifications (that is, those that are visible to the
         * current user). Useful when you don't know what's already been posted.
         *
         * @return An array of active notifications, sorted in natural order.
         */
        GetActiveNotifications(
            [out, callee] ArrayOf<IStatusBarNotification*>* ret);

        /**
         * Request the list of outstanding notifications (that is, those that are visible to the
         * current user). Useful when you don't know what's already been posted.
         *
         * @hide
         *
         * @param trim trim of the notifications to be returned. See <code>TRIM_*</code> constants.
         * @return An array of active notifications, sorted in natural order.
         */
        //@SystemApi
        GetActiveNotifications(
            [in] Int32 trim,
            [out, callee] ArrayOf<IStatusBarNotification*>* ret);

         /**
         * Request one or more notifications by key. Useful if you have been keeping track of
         * notifications but didn't want to retain the bits, and now need to go back and extract
         * more data out of those notifications.
         *
         * @param keys the keys of the notifications to request
         * @return An array of notifications corresponding to the requested keys, in the
         * same order as the key list.
         */
        GetActiveNotifications(
            [in] ArrayOf<String>* keys,
            [out, callee] ArrayOf<IStatusBarNotification*>* ret);

        /**
         * Request one or more notifications by key. Useful if you have been keeping track of
         * notifications but didn't want to retain the bits, and now need to go back and extract
         * more data out of those notifications.
         *
         * @hide
         *
         * @param keys the keys of the notifications to request
         * @param trim trim of the notifications to be returned. See <code>TRIM_*</code> constants.
         * @return An array of notifications corresponding to the requested keys, in the
         * same order as the key list.
         */
        //@SystemApi
        GetActiveNotifications(
            [in] ArrayOf<String>* keys,
            [in] Int32 trim,
            [out, callee] ArrayOf<IStatusBarNotification*>* ret);

        /**
         * Gets the set of hints representing current state.
         *
         * <p>
         * The current state may differ from the requested state if the hint represents state
         * shared across all listeners or a feature the notification host does not support or refuses
         * to grant.
         *
         * @return Zero or more of the HINT_ constants.
         */
        GetCurrentListenerHints(
            [out] Int32* ret);

        /**
         * Gets the current notification interruption filter active on the host.
         *
         * <p>
         * The interruption filter defines which notifications are allowed to interrupt the user
         * (e.g. via sound &amp; vibration) and is applied globally. Listeners can find out whether
         * a specific notification matched the interruption filter via
         * {@link Ranking#matchesInterruptionFilter()}.
         * <p>
         * The current filter may differ from the previously requested filter if the notification host
         * does not support or refuses to apply the requested filter, or if another component changed
         * the filter in the meantime.
         * <p>
         * Listen for updates using {@link #onInterruptionFilterChanged(int)}.
         *
         * @return One of the INTERRUPTION_FILTER_ constants, or 0 on errors.
         */
        GetCurrentInterruptionFilter(
            [out] Int32* ret);

        /**
         * Sets the desired {@link #getCurrentListenerHints() listener hints}.
         *
         * <p>
         * This is merely a request, the host may or may not choose to take action depending
         * on other listener requests or other global state.
         * <p>
         * Listen for updates using {@link #onListenerHintsChanged(int)}.
         *
         * @param hints One or more of the HINT_ constants.
         */
        RequestListenerHints(
            [in] Int32 hints);

        /**
         * Sets the desired {@link #getCurrentInterruptionFilter() interruption filter}.
         *
         * <p>
         * This is merely a request, the host may or may not choose to apply the requested
         * interruption filter depending on other listener requests or other global state.
         * <p>
         * Listen for updates using {@link #onInterruptionFilterChanged(int)}.
         *
         * @param interruptionFilter One of the INTERRUPTION_FILTER_ constants.
         */
        RequestInterruptionFilter(
            [in] Int32 interruptionFilter);

        /**
         * Returns current ranking information.
         *
         * <p>
         * The returned object represents the current ranking snapshot and only
         * applies for currently active notifications.
         * <p>
         * Generally you should use the RankingMap that is passed with events such
         * as {@link #onNotificationPosted(StatusBarNotification, RankingMap)},
         * {@link #onNotificationRemoved(StatusBarNotification, RankingMap)}, and
         * so on. This method should only be used when needing access outside of
         * such events, for example to retrieve the RankingMap right after
         * initialization.
         *
         * @return A {@link RankingMap} object providing access to ranking information
         */
        GetCurrentRanking(
            [out] INotificationListenerServiceRankingMap** ranking);

        /**
         * Directly register this service with the Notification Manager.
         *
         * <p>Only system services may use this call. It will fail for non-system callers.
         * Apps should ask the user to add their listener in Settings.
         *
         * @param context Context required for accessing resources. Since this service isn't
         *    launched as a real Service when using this method, a context has to be passed in.
         * @param componentName the component that will consume the notification information
         * @param currentUser the user to use as the stream filter
         * @hide
         */
        //@SystemApi
        RegisterAsSystemService(
            [in] IContext* ctx,
            [in] IComponentName* componentName,
            [in] Int32 currentUser);

        /**
         * Directly unregister this service from the Notification Manager.
         *
         * <P>This method will fail for listeners that were not registered
         * with (@link registerAsService).
         * @hide
         */
        //@SystemApi
        UnregisterAsSystemService();
    }

    } //Notification
    } //Service
    } //Droid
    } //Elastos
}