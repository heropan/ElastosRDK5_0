module
{
    using interface Elastos.Utility.ICollection;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Utility {

    /**
     * Simple static methods to be called at the start of your own methods to verify
     * correct arguments and state.
     */
    [local, deprecated]
    interface IPreconditions {
        /**
         * Ensures that an object reference passed as a parameter to the calling
         * method is not null.
         *
         * @param reference an object reference
         * @return the non-null reference that was validated
         * @throws NullPointerException if {@code reference} is null
         */
        CheckNotNull(
            [in] IInterface* reference);

        /**
         * Ensures that an object reference passed as a parameter to the calling
         * method is not null.
         *
         * @param reference an object reference
         * @param errorMessage the exception message to use if the check fails; will
         *     be converted to a string using {@link String#valueOf(Object)}
         * @return the non-null reference that was validated
         * @throws NullPointerException if {@code reference} is null
         */
        CheckNotNull(
            [in] IInterface* reference,
            [in] IObject* errorMessage);

        CheckNotNull(
            [in] IInterface* reference,
            [in] String errorMessage);

        /**
         * Ensures the truth of an expression involving the state of the calling
         * instance, but not involving any parameters to the calling method.
         *
         * @param expression a boolean expression
         * @throws IllegalStateException if {@code expression} is false
         */
        CheckState(
            [in] Boolean expression);

        /**
         * Check the requested flags, throwing if any requested flags are outside
         * the allowed set.
         */
        CheckFlagsArgument(
            [in] Int32 requestedFlags,
            [in] Int32 allowedFlags);

        /**
         * Ensures that that the argument numeric value is non-negative.
         *
         * @param value a numeric Int32 value
         * @param errorMessage the exception message to use if the check fails
         * @return the validated numeric value
         * @throws IllegalArgumentException if {@code value} was negative
         */
        CheckArgumentNonnegative(
            [in] Int32 value,
            [in] String errorMessage);

        /**
         * Ensures that that the argument numeric value is non-negative.
         *
         * @param value a numeric Int64 value
         * @param errorMessage the exception message to use if the check fails
         * @return the validated numeric value
         * @throws IllegalArgumentException if {@code value} was negative
         */
        CheckArgumentNonnegative(
            [in] Int64 value,
            [in] String errorMessage);

        /**
         * Ensures that that the argument numeric value is positive.
         *
         * @param value a numeric Int32 value
         * @param errorMessage the exception message to use if the check fails
         * @return the validated numeric value
         * @throws IllegalArgumentException if {@code value} was not positive
         */
        CheckArgumentPositive(
            [in] Int32 value,
            [in] String errorMessage);

        /**
         * Ensures that the argument floating point value is a finite number.
         *
         * <p>A finite number is defined to be both representable (that is, not NaN) and
         * not infinite (that is neither positive or negative infinity).</p>
         *
         * @param value a floating point value
         * @param valueName the name of the argument to use if the check fails
         *
         * @return the validated floating point value
         *
         * @throws IllegalArgumentException if {@code value} was not finite
         */
        CheckArgumentFinite(
            [in] Float value,
            [in] String valueName);

        /**
         * Ensures that the argument floating point value is within the inclusive range.
         *
         * <p>While this can be used to range check against +/- infinity, note that all NaN numbers
         * will always be out of range.</p>
         *
         * @param value a floating point value
         * @param lower the lower endpoint of the inclusive range
         * @param upper the upper endpoint of the inclusive range
         * @param valueName the name of the argument to use if the check fails
         *
         * @return the validated floating point value
         *
         * @throws IllegalArgumentException if {@code value} was not within the range
         */
        CheckArgumentInRange(
            [in] Float value,
            [in] Float lower,
            [in] Float upper,
            [in] String valueName);

        /**
         * Ensures that the argument Int32 value is within the inclusive range.
         *
         * @param value a Int32 value
         * @param lower the lower endpoint of the inclusive range
         * @param upper the upper endpoint of the inclusive range
         * @param valueName the name of the argument to use if the check fails
         *
         * @return the validated Int32 value
         *
         * @throws IllegalArgumentException if {@code value} was not within the range
         */
        CheckArgumentInRange(
            [in] Int32 value,
            [in] Int32 lower,
            [in] Int32 upper,
            [in] String valueName);

        /**
         * Ensures that the array is not {@code null}, and none of its elements are {@code null}.
         *
         * @param value an array of boxed objects
         * @param valueName the name of the argument to use if the check fails
         *
         * @return the validated array
         *
         * @throws NullPointerException if the {@code value} or any of its elements were {@code null}
         */
        CheckArrayElementsNotNull(
            [in] ArrayOf<IInterface*>* value,
            [in] String valueName);

        /**
         * Ensures that the {@link Collection} is not {@code null}, and none of its elements are
         * {@code null}.
         *
         * @param value a {@link Collection} of boxed objects
         * @param valueName the name of the argument to use if the check fails
         *
         * @return the validated {@link Collection}
         *
         * @throws NullPointerException if the {@code value} or any of its elements were {@code null}
         */
        CheckCollectionElementsNotNull(
            [in] ICollection* value,
            [in] String valueName);

        /**
         * Ensures that the {@link Collection} is not {@code null}, and contains at least one element.
         *
         * @param value a {@link Collection} of boxed elements.
         * @param valueName the name of the argument to use if the check fails.

         * @return the validated {@link Collection}
         *
         * @throws NullPointerException if the {@code value} was {@code null}
         * @throws IllegalArgumentException if the {@code value} was empty
         */
        CheckCollectionNotEmpty(
            [in] ICollection* value,
            [in] String valueName);

        /**
         * Ensures that all elements in the argument floating point array are within the inclusive range
         *
         * <p>While this can be used to range check against +/- infinity, note that all NaN numbers
         * will always be out of range.</p>
         *
         * @param value a floating point array of values
         * @param lower the lower endpoint of the inclusive range
         * @param upper the upper endpoint of the inclusive range
         * @param valueName the name of the argument to use if the check fails
         *
         * @return the validated floating point value
         *
         * @throws IllegalArgumentException if any of the elements in {@code value} were out of range
         * @throws NullPointerException if the {@code value} was {@code null}
         */
        CheckArrayElementsInRange(
            [in] ArrayOf<Float>* value,
            [in] Float lower,
            [in] Float upper,
            [in] String valueName);
    }

    } // namespace Utility
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}
