
module
{
    interface Elastos.Droid.Os.IBundle;

    namespace Elastos {
    namespace Droid {
    namespace Location {

    /**
     * A data class representing a geographic location.
     *
     * <p>A location can consist of a latitude, longitude, timestamp,
     * and other information such as bearing, altitude and velocity.
     *
     * <p>All locations generated by the {@link LocationManager} are
     * guaranteed to have a valid latitude, longitude, and timestamp
     * (both UTC time and elapsed real-time since boot), all other
     * parameters are optional.
     */
     /**
      * @Involve IParcelable
      */
    [deprecated]
    interface ILocation {
        /**
         * Constant used to specify formatting of a latitude or longitude
         * in the form "[+-]DDD.DDDDD where D indicates degrees.
         */
        const Int32 FORMAT_DEGREES = 0;

        /**
         * Constant used to specify formatting of a latitude or longitude
         * in the form "[+-]DDD:MM.MMMMM" where D indicates degrees and
         * M indicates minutes of arc (1 minute = 1/60th of a degree).
         */
        const Int32 FORMAT_MINUTES = 1;

        /**
         * Constant used to specify formatting of a latitude or longitude
         * in the form "DDD:MM:SS.SSSSS" where D indicates degrees, M
         * indicates minutes of arc, and S indicates seconds of arc (1
         * minute = 1/60th of a degree, 1 second = 1/3600th of a degree).
         */
        const Int32 FORMAT_SECONDS = 2;

        /**
         * Bundle key for a version of the location that has been fed through
         * LocationFudger. Allows location providers to flag locations as being
         * safe for use with ACCESS_COARSE_LOCATION permission.
         *
         * @hide
         */
        const String EXTRA_COARSE_LOCATION = "coarseLocation";

        /**
         * Bundle key for a version of the location containing no GPS data.
         * Allows location providers to flag locations as being safe to
         * feed to LocationFudger.
         *
         * @hide
         */
        const String EXTRA_NO_GPS_LOCATION = "noGPSLocation";


        /**
         * Sets the contents of the location to the values from the given location.
         */
        Set(
            [in] ILocation* l);

        /**
         * Clears the contents of the location.
         */
        Reset();

        /**
         * Returns the approximate distance in meters between this
         * location and the given location.  Distance is defined using
         * the WGS84 ellipsoid.
         *
         * @param dest the destination location
         * @return the approximate distance in meters
         */
        DistanceTo(
            [in] ILocation* dest,
            [out] Float* distance);

        /**
         * Returns the approximate initial bearing in degrees East of true
         * North when traveling along the shortest path between this
         * location and the given location.  The shortest path is defined
         * using the WGS84 ellipsoid.  Locations that are (nearly)
         * antipodal may produce meaningless results.
         *
         * @param dest the destination location
         * @return the initial bearing in degrees
         */
        BearingTo(
            [in] ILocation* dest,
            [out] Float* initialBearing);

        /**
         * Returns the name of the provider that generated this fix.
         *
         * @return the provider, or null if it has not been set
         */
        GetProvider(
            [out] String* provider);

        /**
         * Sets the name of the provider that generated this fix.
         */
        SetProvider(
            [in] String provider);

        /**
         * Return the UTC time of this fix, in milliseconds since January 1, 1970.
         *
         * <p>Note that the UTC time on a device is not monotonic: it
         * can jump forwards or backwards unpredictably. So always use
         * {@link #getElapsedRealtimeNanos} when calculating time deltas.
         *
         * <p>On the other hand, {@link #getTime} is useful for presenting
         * a human readable time to the user, or for carefully comparing
         * location fixes across reboot or across devices.
         *
         * <p>All locations generated by the {@link LocationManager}
         * are guaranteed to have a valid UTC time, however remember that
         * the system time may have changed since the location was generated.
         *
         * @return time of fix, in milliseconds since January 1, 1970.
         */
        GetTime(
            [out] Int64* time);

        /**
         * Set the UTC time of this fix, in milliseconds since January 1,
         * 1970.
         *
         * @param time UTC time of this fix, in milliseconds since January 1, 1970
         */
        SetTime(
            [in] Int64 time);

        /**
         * Return the time of this fix, in elapsed real-time since system boot.
         *
         * <p>This value can be reliably compared to
         * {@link android.os.SystemClock#elapsedRealtimeNanos},
         * to calculate the age of a fix and to compare Location fixes. This
         * is reliable because elapsed real-time is guaranteed monotonic for
         * each system boot and continues to increment even when the system
         * is in deep sleep (unlike {@link #getTime}.
         *
         * <p>All locations generated by the {@link LocationManager}
         * are guaranteed to have a valid elapsed real-time.
         *
         * @return elapsed real-time of fix, in nanoseconds since system boot.
         */
        GetElapsedRealtimeNanos(
            [out] Int64* elapsedRealtimeNanos);

        /**
         * Set the time of this fix, in elapsed real-time since system boot.
         *
         * @param time elapsed real-time of fix, in nanoseconds since system boot.
         */
        SetElapsedRealtimeNanos(
            [in] Int64 time);

        /**
         * Get the latitude, in degrees.
         *
         * <p>All locations generated by the {@link LocationManager}
         * will have a valid latitude.
         */
        GetLatitude(
            [out] Double* latitude);

        /**
         * Set the latitude, in degrees.
         */
        SetLatitude(
            [in] Double latitude);

        /**
         * Get the longitude, in degrees.
         *
         * <p>All locations generated by the {@link LocationManager}
         * will have a valid longitude.
         */
        GetLongitude(
            [out] Double* longitude);

        /**
         * Set the longitude, in degrees.
         */
        SetLongitude(
            [in] Double longitude);

        /**
         * True if this location has an altitude.
         */
        HasAltitude(
            [out] Boolean* result);

        /**
         * Get the altitude if available, in meters above sea level.
         *
         * <p>If this location does not have an altitude then 0.0 is returned.
         */
        GetAltitude(
            [out] Double* altitude);

        /**
         * Set the altitude, in meters above sea level.
         *
         * <p>Following this call {@link #hasAltitude} will return true.
         */
        SetAltitude(
            [in] Double altitude);

        /**
         * Remove the altitude from this location.
         *
         * <p>Following this call {@link #hasAltitude} will return false,
         * and {@link #getAltitude} will return 0.0.
         */
        RemoveAltitude();

        /**
         * True if this location has a speed.
         */
        HasSpeed(
            [out] Boolean* result);

        /**
         * Get the speed if it is available, in meters/second over ground.
         *
         * <p>If this location does not have a speed then 0.0 is returned.
         */
        GetSpeed(
            [out] Float* speed);

        /**
         * Set the speed, in meters/second over ground.
         *
         * <p>Following this call {@link #hasSpeed} will return true.
         */
        SetSpeed(
            [in] Float speed);

        /**
         * Remove the speed from this location.
         *
         * <p>Following this call {@link #hasSpeed} will return false,
         * and {@link #getSpeed} will return 0.0.
         */
        RemoveSpeed();

        /**
         * True if this location has a bearing.
         */
        HasBearing(
            [in] Boolean* result);

        /**
         * Get the bearing, in degrees.
         *
         * <p>Bearing is the horizontal direction of travel of this device,
         * and is not related to the device orientation. It is guaranteed to
         * be in the range (0.0, 360.0] if the device has a bearing.
         *
         * <p>If this location does not have a bearing then 0.0 is returned.
         */
        GetBearing(
            [out] Float* bearing);

        /**
         * Set the bearing, in degrees.
         *
         * <p>Bearing is the horizontal direction of travel of this device,
         * and is not related to the device orientation.
         *
         * <p>The input will be wrapped into the range (0.0, 360.0].
         */
        SetBearing(
            [in] Float bearing);

        /**
         * Remove the bearing from this location.
         *
         * <p>Following this call {@link #hasBearing} will return false,
         * and {@link #getBearing} will return 0.0.
         */
        RemoveBearing();

        /**
         * True if this location has an accuracy.
         *
         * <p>All locations generated by the {@link LocationManager} have an
         * accuracy.
         */
        HasAccuracy(
            [out] Boolean* result);

        /**
         * Get the estimated accuracy of this location, in meters.
         *
         * <p>We define accuracy as the radius of 68% confidence. In other
         * words, if you draw a circle centered at this location's
         * latitude and longitude, and with a radius equal to the accuracy,
         * then there is a 68% probability that the true location is inside
         * the circle.
         *
         * <p>In statistical terms, it is assumed that location errors
         * are random with a normal distribution, so the 68% confidence circle
         * represents one standard deviation. Note that in practice, location
         * errors do not always follow such a simple distribution.
         *
         * <p>This accuracy estimation is only concerned with horizontal
         * accuracy, and does not indicate the accuracy of bearing,
         * velocity or altitude if those are included in this Location.
         *
         * <p>If this location does not have an accuracy, then 0.0 is returned.
         * All locations generated by the {@link LocationManager} include
         * an accuracy.
         */
        GetAccuracy(
            [out] Float* accuracy);

        /**
         * Set the estimated accuracy of this location, meters.
         *
         * <p>See {@link #getAccuracy} for the definition of accuracy.
         *
         * <p>Following this call {@link #hasAccuracy} will return true.
         */
        SetAccuracy(
            [in] Float accuracy);

        /**
         * Remove the accuracy from this location.
         *
         * <p>Following this call {@link #hasAccuracy} will return false, and
         * {@link #getAccuracy} will return 0.0.
         */
        RemoveAccuracy();

        /**
         * Return true if this Location object is complete.
         *
         * <p>A location object is currently considered complete if it has
         * a valid provider, accuracy, wall-clock time and elapsed real-time.
         *
         * <p>All locations supplied by the {@link LocationManager} to
         * applications must be complete.
         *
         * @see #makeComplete
         * @hide
         */
        IsComplete(
            [out] Boolean* result);

        /**
         * Helper to fill incomplete fields.
         *
         * <p>Used to assist in backwards compatibility with
         * Location objects received from applications.
         *
         * @see #isComplete
         * @hide
         */
        MakeComplete();

        /**
         * Returns additional provider-specific information about the
         * location fix as a Bundle.  The keys and values are determined
         * by the provider.  If no additional information is available,
         * null is returned.
         *
         * <p> A number of common key/value pairs are listed
         * below. Providers that use any of the keys on this list must
         * provide the corresponding value as described below.
         *
         * <ul>
         * <li> satellites - the number of satellites used to derive the fix
         * </ul>
         */
        GetExtras(
            [out] IBundle** extras);

        /**
         * Sets the extra information associated with this fix to the
         * given Bundle.
         */
        SetExtras(
            [in] IBundle* extras);

        /**
         * Returns one of the optional extra {@link Location}s that can be attached
         * to this Location.
         *
         * @param key the key associated with the desired extra Location
         * @return the extra Location, or null if unavailable
         * @hide
         */
        GetExtraLocation(
            [in] String key,
            [out] ILocation** location);

        /**
         * Attaches an extra {@link Location} to this Location.
         *
         * @param key the key associated with the Location extra
         * @param location the Location to attach
         * @hide
         */
        SetExtraLocation(
            [in] String key,
            [in] ILocation* value);
    }

    [deprecated]
    interface ILocationHelper {
        /**
         * Converts a coordinate to a String representation. The outputType
         * may be one of FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS.
         * The coordinate must be a valid double between -180.0 and 180.0.
         *
         * @throws IllegalArgumentException if coordinate is less than
         * -180.0, greater than 180.0, or is not a number.
         * @throws IllegalArgumentException if outputType is not one of
         * FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS.
         */
        Convert(
            [in] Double coordinate,
            [in] Int32 outputType,
            [out] String* str);

        /**
         * Converts a String in one of the formats described by
         * FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS into a
         * double.
         *
         * @throws NullPointerException if coordinate is null
         * @throws IllegalArgumentException if the coordinate is not
         * in one of the valid formats.
         */
        Convert(
            [in] String coordinate,
            [out] Double* d);

        /**
         * Computes the approximate distance in meters between two
         * locations, and optionally the initial and final bearings of the
         * shortest path between them.  Distance and bearing are defined using the
         * WGS84 ellipsoid.
         *
         * <p> The computed distance is stored in results[0].  If results has length
         * 2 or greater, the initial bearing is stored in results[1]. If results has
         * length 3 or greater, the final bearing is stored in results[2].
         *
         * @param startLatitude the starting latitude
         * @param startLongitude the starting longitude
         * @param endLatitude the ending latitude
         * @param endLongitude the ending longitude
         * @param results an array of floats to hold the results
         *
         * @throws IllegalArgumentException if results is null or has length < 1
         */
        DistanceBetween(
            [in] Double startLatitude,
            [in] Double startLongitude,
            [in] Double endLatitude,
            [in] Double endLongitude,
            [in] ArrayOf<Float>* results);

        /**
         * Returns true if the Location came from a mock provider.
         *
         * @return true if this Location came from a mock provider, false otherwise
         */
        IsFromMockProvider(
            [out] Boolean* result);

        /**
         * Flag this Location as having come from a mock provider or not.
         *
         * @param isFromMockProvider true if this Location came from a mock provider, false otherwise
         * @hide
         */
        //@SystemApi
        SetIsFromMockProvider(
            [in] Boolean isFromMockProvider);
    }

    }//namespace Location
    }//namespace Droid
    }//namespace Elastos

}
