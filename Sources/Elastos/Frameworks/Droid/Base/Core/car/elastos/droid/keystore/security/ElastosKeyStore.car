
module
{
    namespace Elastos {
    namespace Droid {
    namespace Keystore{
    namespace Security{

    /**
     * A java.security.KeyStore interface for the Elastos KeyStore. An instance of
     * it can be created via the {@link java.security.KeyStore#getInstance(String)
     * KeyStore.getInstance("ElastosKeyStore")} interface. This returns a
     * java.security.KeyStore backed by this "ElastosKeyStore" implementation.
     * <p>
     * This is built on top of Elastos's keystore daemon. The convention of alias
     * use is:
     * <p>
     * PrivateKeyEntry will have a Credentials.USER_PRIVATE_KEY as the private key,
     * Credentials.USER_CERTIFICATE as the first certificate in the chain (the one
     * that corresponds to the private key), and then a Credentials.CA_CERTIFICATE
     * entry which will have the rest of the chain concatenated in BER format.
     * <p>
     * TrustedCertificateEntry will just have a Credentials.CA_CERTIFICATE entry
     * with a single certificate.
     *
     * @Involve
     * interface Elastos.Security.IKeyStoreSpi
     */
     [local]
    interface IElastosKeyStore {
    }

    }// namespace Security
    }// namespace Keystore
    }// namespace Droid
    }// namespace Elastos

}

