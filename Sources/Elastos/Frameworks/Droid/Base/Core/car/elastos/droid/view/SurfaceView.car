
module
{

    namespace Elastos {
    namespace Droid {
    namespace View {
        /**
         * Provides a dedicated drawing surface embedded inside of a view hierarchy.
         * You can control the format of this surface and, if you like, its size; the
         * SurfaceView takes care of placing the surface at the correct location on the
         * screen
         *
         * <p>The surface is Z ordered so that it is behind the window holding its
         * SurfaceView; the SurfaceView punches a hole in its window to allow its
         * surface to be displayed. The view hierarchy will take care of correctly
         * compositing with the Surface any siblings of the SurfaceView that would
         * normally appear on top of it. This can be used to place overlays such as
         * buttons on top of the Surface, though note however that it can have an
         * impact on performance since a full alpha-blended composite will be performed
         * each time the Surface changes.
         *
         * <p> The transparent region that makes the surface visible is based on the
         * layout positions in the view hierarchy. If the post-layout transform
         * properties are used to draw a sibling view on top of the SurfaceView, the
         * view may not be properly composited with the surface.
         *
         * <p>Access to the underlying surface is provided via the SurfaceHolder interface,
         * which can be retrieved by calling {@link #getHolder}.
         *
         * <p>The Surface will be created for you while the SurfaceView's window is
         * visible; you should implement {@link SurfaceHolder.Callback#surfaceCreated}
         * and {@link SurfaceHolder.Callback#surfaceDestroyed} to discover when the
         * Surface is created and destroyed as the window is shown and hidden.
         *
         * <p>One of the purposes of this class is to provide a surface in which a
         * secondary thread can render into the screen. If you are going to use it
         * this way, you need to be aware of some threading semantics:
         *
         * <ul>
         * <li> All SurfaceView and
         * {@link SurfaceHolder.Callback SurfaceHolder.Callback} methods will be called
         * from the thread running the SurfaceView's window (typically the main thread
         * of the application). They thus need to correctly synchronize with any
         * state that is also touched by the drawing thread.
         * <li> You must ensure that the drawing thread only touches the underlying
         * Surface while it is valid -- between
         * {@link SurfaceHolder.Callback#surfaceCreated SurfaceHolder.Callback.surfaceCreated()}
         * and
         * {@link SurfaceHolder.Callback#surfaceDestroyed SurfaceHolder.Callback.surfaceDestroyed()}.
         * </ul>
         */
        /**
         * @Involve
         * interface Elastos.Droid.View.IView
         */
        interface ISurfaceView {

            /**
             * Return the SurfaceHolder providing access and control over this
             * SurfaceView's underlying surface.
             *
             * @return SurfaceHolder The holder of the surface.
             */
            GetHolder(
                [out] ISurfaceHolder** holder);

            /**
             * Control whether the surface view's surface is placed on top of another
             * regular surface view in the window (but still behind the window itself).
             * This is typically used to place overlays on top of an underlying media
             * surface view.
             *
             * <p>Note that this must be set before the surface view's containing
             * window is attached to the window manager.
             *
             * <p>Calling this overrides any previous call to {@link #setZOrderOnTop}.
             */
            SetZOrderMediaOverlay(
                [in] Boolean isMediaOverlay);

            /**
             * Control whether the surface view's surface is placed on top of its
             * window.  Normally it is placed behind the window, to allow it to
             * (for the most part) appear to composite with the views in the
             * hierarchy.  By setting this, you cause it to be placed above the
             * window.  This means that none of the contents of the window this
             * SurfaceView is in will be visible on top of its surface.
             *
             * <p>Note that this must be set before the surface view's containing
             * window is attached to the window manager.
             *
             * <p>Calling this overrides any previous call to {@link #setZOrderMediaOverlay}.
             */
            SetZOrderOnTop(
                [in] Boolean onTop);

            /**
             * Control whether the surface view's content should be treated as secure,
             * preventing it from appearing in screenshots or from being viewed on
             * non-secure displays.
             *
             * <p>Note that this must be set before the surface view's containing
             * window is attached to the window manager.
             *
             * <p>See {@link android.view.Display#FLAG_SECURE} for details.
             *
             * @param isSecure True if the surface view is secure.
             */
            SetSecure(
                [in] Boolean isSecure);

            /**
             * Hack to allow special layering of windows.  The type is one of the
             * types in WindowManager.LayoutParams.  This is a hack so:
             * @hide
             */
            SetWindowType(
                [in] Int32 type);

            /**
             * Check to see if the surface has fixed size dimensions or if the surface's
             * dimensions are dimensions are dependent on its current layout.
             *
             * @return TRUE if the surface has dimensions that are fixed in size
             * @hide
             */
            IsFixedSize(
                [out] Boolean* size);
        }

    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
