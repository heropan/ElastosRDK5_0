module
{
    interface Elastos.IO.IInputStream;
    interface Elastos.IO.IOutputStream;

    namespace Elastos {
    namespace Droid {
    namespace Speech {
    namespace Srec {

    /**
     * This class represents the header of a WAVE format audio file, which usually
     * have a .wav suffix.  The following integer valued fields are contained:
     * <ul>
     * <li> format - usually PCM, ALAW or ULAW.
     * <li> numChannels - 1 for mono, 2 for stereo.
     * <li> sampleRate - usually 8000, 11025, 16000, 22050, or 44100 hz.
     * <li> bitsPerSample - usually 16 for PCM, 8 for ALAW, or 8 for ULAW.
     * <li> numBytes - size of audio data after this header, in bytes.
     * </ul>
     *
     * Not yet ready to be supported, so
     * @hide
     */
    interface IWaveHeader {
        /** Indicates PCM format. */
        const Int16 FORMAT_PCM = 1;
        /** Indicates ALAW format. */
        const Int16 FORMAT_ALAW = 6;
        /** Indicates ULAW format. */
        const Int16 FORMAT_ULAW = 7;

        /**
         * Get the format field.
         * @return format field,
         * one of {@link #FORMAT_PCM}, {@link #FORMAT_ULAW}, or {@link #FORMAT_ALAW}.
         */
        GetFormat(
            [out] Int16* ret);

        /**
         * Set the format field.
         * @param format
         * one of {@link #FORMAT_PCM}, {@link #FORMAT_ULAW}, or {@link #FORMAT_ALAW}.
         * @return reference to this WaveHeader instance.
         */
        SetFormat(
            [in] Int16 format);

        /**
         * Get the number of channels.
         * @return number of channels, 1 for mono, 2 for stereo.
         */
        GetNumChannels(
            [out] Int16* ret);

        /**
         * Set the number of channels.
         * @param numChannels 1 for mono, 2 for stereo.
         * @return reference to this WaveHeader instance.
         */
        SetNumChannels(
            [in] Int16 numChannels);

        /**
         * Get the sample rate.
         * @return sample rate, typically 8000, 11025, 16000, 22050, or 44100 hz.
         */
        GetSampleRate(
            [out] Int32* ret);

        /**
         * Set the sample rate.
         * @param sampleRate sample rate, typically 8000, 11025, 16000, 22050, or 44100 hz.
         * @return reference to this WaveHeader instance.
         */
        SetSampleRate(
            [in] Int32 sampleRate);

        /**
         * Get the number of bits per sample.
         * @return number of bits per sample,
         * usually 16 for PCM, 8 for ULAW or 8 for ALAW.
         */
        GetBitsPerSample(
            [out] Int16* ret);

        /**
         * Set the number of bits per sample.
         * @param bitsPerSample number of bits per sample,
         * usually 16 for PCM, 8 for ULAW or 8 for ALAW.
         * @return reference to this WaveHeader instance.
         */
        SetBitsPerSample(
            [in] Int16 bitsPerSample);

        /**
         * Get the size of audio data after this header, in bytes.
         * @return size of audio data after this header, in bytes.
         */
        GetNumBytes(
            [out] Int32* ret);

        /**
         * Set the size of audio data after this header, in bytes.
         * @param numBytes size of audio data after this header, in bytes.
         * @return reference to this WaveHeader instance.
         */
        SetNumBytes(
            [in] Int32 numBytes);

        /**
         * Read and initialize a WaveHeader.
         * @param in {@link java.io.InputStream} to read from.
         * @return number of bytes consumed.
         * @throws IOException
         */
        Read(
            [in] IInputStream* inStream,
            [out] Int32* ret);

        /**
         * Write a WAVE file header.
         * @param out {@link java.io.OutputStream} to receive the header.
         * @return number of bytes written.
         * @throws IOException
         */
        Write(
            [in] IOutputStream* outStream,
            [out] Int32* ret);
    }

    } // namespace Srec
    } // namespace Speech
    } // namespace Droid
    } // namespace Elastos

}
