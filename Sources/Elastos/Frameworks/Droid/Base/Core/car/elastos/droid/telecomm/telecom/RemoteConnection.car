
module
{

    interface Elastos.Droid.Telecomm.Telecom.IRemoteConnectionVideoProvider;
    interface Elastos.Droid.View.ISurface;
    interface Elastos.Droid.Net.IUri;
    using interface Elastos.Utility.IList;
    using interface Elastos.Core.ICharSequence;

    namespace Elastos {
    namespace Droid {
    namespace Telecomm {
    namespace Telecom {

        interface IRemoteConnectionListener {
            OnReceiveSessionModifyRequest(
                [in] IRemoteConnectionVideoProvider* videoProvider,
                [in] IVideoProfile* videoProfile);

            OnReceiveSessionModifyResponse(
                [in] IRemoteConnectionVideoProvider* videoProvider,
                [in] Int32 status,
                [in] IVideoProfile* requestedProfile,
                [in] IVideoProfile* responseProfile);

            OnHandleCallSessionEvent(
                [in] IRemoteConnectionVideoProvider* videoProvider,
                [in] Int32 event);

            OnPeerDimensionsChanged(
                [in] IRemoteConnectionVideoProvider* videoProvider,
                [in] Int32 width,
                [in] Int32 height);

            OnCallDataUsageChanged(
                [in] IRemoteConnectionVideoProvider* videoProvider,
                [in] Int32 dataUsage);

            OnCameraCapabilitiesChanged(
                [in] IRemoteConnectionVideoProvider* videoProvider,
                [in] ICameraCapabilities* cameraCapabilities);
        }

        interface IRemoteConnectionVideoProvider {
            AddListener(
                [in] IRemoteConnectionListener* l);

            RemoveListener(
                [in] IRemoteConnectionListener* l);

            SetCamera(
                [in] String cameraId);

            SetPreviewSurface(
                [in] ISurface* surface);

            SetDisplaySurface(
                [in] ISurface* surface);

            SetDeviceOrientation(
                [in] Int32 rotation);

            SetZoom(
                [in] Float value);

            SendSessionModifyRequest(
                [in] IVideoProfile* reqProfile);

            SendSessionModifyResponse(
                [in] IVideoProfile* responseProfile);

            RequestCameraCapabilities();

            RequestCallDataUsage();

            SetPauseImage(
                [in] String uri);
        }

        interface IRemoteConnectionCallback {
            OnStateChanged(
                [in] IRemoteConnection* connection,
                [in] Int32 state);

            OnDisconnected(
                [in] IRemoteConnection* connection,
                [in] IDisconnectCause* disconnectCause);

            OnRingbackRequested(
                [in] IRemoteConnection* connection,
                [in] Boolean ringback);

            OnCallCapabilitiesChanged(
                [in] IRemoteConnection* connection,
                [in] Int32 callCapabilities);

            OnPostDialWait(
                [in] IRemoteConnection* connection,
                [in] String remainingPostDialSequence);

            OnVoipAudioChanged(
                [in] IRemoteConnection* connection,
                [in] Boolean isVoip);

            OnStatusHintsChanged(
                [in] IRemoteConnection* connection,
                [in] IStatusHints* statusHints);

            OnAddressChanged(
                [in] IRemoteConnection* connection,
                [in] IUri* address,
                [in] Int32 presentation);

            OnCallerDisplayNameChanged(
                [in] IRemoteConnection* connection,
                [in] String callerDisplayName,
                [in] Int32 presentation);

            OnVideoStateChanged(
                [in] IRemoteConnection* connection,
                [in] Int32 videoState);

            OnDestroyed(
                [in] IRemoteConnection* connection);

            OnConferenceableConnectionsChanged(
                [in] IRemoteConnection* connection,
                [in] IList* conferenceableConnections);

            OnVideoProviderChanged(
                [in] IRemoteConnection* connection,
                [in] IRemoteConnectionVideoProvider* videoProvider);

            OnConferenceChanged(
                [in] IRemoteConnection* connection,
                [in] IRemoteConference* conference);
        }

        /**
         * A connection provided to a {@link ConnectionService} by another {@code ConnectionService}
         * running in a different process.
         *
         * @see ConnectionService#createRemoteOutgoingConnection(PhoneAccountHandle, ConnectionRequest)
         * @see ConnectionService#createRemoteIncomingConnection(PhoneAccountHandle, ConnectionRequest)
         * @hide
         */
        interface IRemoteConnection {
            RegisterCallback(
                [in] IRemoteConnectionCallback* cb);

            UnregisterCallback(
                [in] IRemoteConnectionCallback* cb);

            GetState(
                [out] Int32* res);

            GetDisconnectCause(
                [out] IDisconnectCause** res);

            GetCallCapabilities(
                [out] Int32* res);

            IsVoipAudioMode(
                [out] Boolean* res);

             GetStatusHints(
                [out] IStatusHints** res);

            GetAddress(
                [out] IUri** res);

            GetAddressPresentation(
                [out] Int32* res);

            GetCallerDisplayName(
                [out] ICharSequence** res);

            GetCallerDisplayNamePresentation(
                [out] Int32* res);

            GetVideoState(
                [out] Int32* res);

            GetVideoProvider(
                [out] IRemoteConnectionVideoProvider** res);

            IsRingbackRequested(
                [out] Boolean* res);

            Abort();

            Answer();

            Vnswer(
                [in] Int32 videoState);

            Reject();

            Hold();

            Unhold();

            Disconnect();

            PlayDtmfTone(
                [in] Char32 digit);

            StopDtmfTone();

            PostDialContinue(
                [in] Boolean proceed);

            SetAudioState(
                [in] IAudioState* state);

            GetConferenceableConnections(
                [out] IList** res);

            GetConference(
                [out] IRemoteConference** res);
        }

        interface IRemoteConnectionHelper {
             Failure(
                [in] IDisconnectCause* disconnectCause,
                [out] IRemoteConnection** res);
        }

    } // namespace Telecom
    } // namespace Telecomm
    } // namespace Droid
    } // namespace Elastos
}
