// SettingInjectorService.car
module
{
    namespace Elastos {
    namespace Droid {
    namespace Location {
    /**
     * @Involve
     * interface Elastos.Droid.App.IService
     * interface Elastos.Droid.Content.IContext
     * interface Elastos.Droid.Content.IContextWrapper
     * interface IComponentCallbacks
     * interface IComponentCallbacks2
     */
    interface ISettingInjectorService {
        /**
             * Intent action that must be declared in the manifest for the subclass. Used to start the
             * service to read the dynamic status for the setting.
             */
        const String ACTION_SERVICE_INTENT = "android.location.SettingInjectorService";

        /**
             * Name of the meta-data tag used to specify the resource file that includes the settings
             * attributes.
             */
        const String META_DATA_NAME = "android.location.SettingInjectorService";

        /**
             * Name of the XML tag that includes the attributes for the setting.
             */
        const String ATTRIBUTES_NAME = "injected-location-setting";

        /**
             * Intent action a client should broadcast when the value of one of its injected settings has
             * changed, so that the setting can be updated in the UI.
             */
        const String ACTION_INJECTED_SETTING_CHANGED = "android.location.InjectedSettingChanged";

        /**
             * Name of the bundle key for the string specifying whether the setting is currently enabled.
             *
             * @hide
             */
        const String ENABLED_KEY = "enabled";

        /**
             * Name of the intent key used to specify the messenger
             *
             * @hide
             */
        const String MESSENGER_KEY = "messenger";

        /**
         * This method is no longer called, because status values are no longer shown for any injected
         * setting.
         *
         * @return ignored
         *
         * @deprecated not called any more
         */
        //@Deprecated
        OnGetSummary(
            [out] String* result);

        /**
         * Returns the {@link android.preference.Preference#isEnabled()} value. Should not perform
         * unpredictably-long operations such as network access--see the running-time comments in the
         * class-level javadoc.
         * <p/>
         * Note that to prevent churn in the settings list, there is no support for dynamically choosing
         * to hide a setting. Instead you should have this method return false, which will disable the
         * setting and its link to your setting activity. One reason why you might choose to do this is
         * if {@link android.provider.Settings.Secure#LOCATION_MODE} is {@link
         * android.provider.Settings.Secure#LOCATION_MODE_OFF}.
         * <p/>
         * It is possible that the user may click on the setting before this method returns, so your
         * settings activity must handle the case where it is invoked even though the setting is
         * disabled. The simplest approach may be to simply call {@link android.app.Activity#finish()}
         * when disabled.
         *
         * @return the {@link android.preference.Preference#isEnabled()} value
         */
        OnGetEnabled(
            [out] Boolean* result);
    }

    } // namespace Location
    } // namespace Droid
    } // namespace Elastos
}

