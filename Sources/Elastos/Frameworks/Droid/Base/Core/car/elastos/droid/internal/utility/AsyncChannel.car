module
{
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.IMessage;
    interface Elastos.Droid.Os.IMessenger;
    interface Elastos.Droid.Internal.Utility.IAsyncService;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Utility {

    /**
     * <p>An asynchronous channel between two handlers.</p>
     *
     * <p>The handlers maybe in the same process or in another process. There
     * are two protocol styles that can be used with an AysncChannel. The
     * first is a simple request/reply protocol where the server does
     * not need to know which client is issuing the request.</p>
     *
     * <p>In a simple request/reply protocol the client/source sends requests to the
     * server/destination. And the server uses the replyToMessage methods.
     * In this usage model there is no need for the destination to
     * use the connect methods. The typical sequence of operations is:</p>
     *<ol>
     *   <li>Client calls AsyncChannel#connectSync or Asynchronously:</li>
     *      <ol>For an asynchronous half connection client calls AsyncChannel#connect.</ol>
     *          <li>Client receives CMD_CHANNEL_HALF_CONNECTED from AsyncChannel</li>
     *      </ol>
     *   <li><code>comm-loop:</code></li>
     *   <li>Client calls AsyncChannel#sendMessage</li>
     *   <li>Server processes messages and optionally replies using AsyncChannel#replyToMessage
     *   <li>Loop to <code>comm-loop</code> until done</li>
     *   <li>When done Client calls {@link AsyncChannel#disconnect}</li>
     *   <li>Client/Server receives CMD_CHANNEL_DISCONNECTED from AsyncChannel</li>
     *</ol>
     *<br/>
     * <p>A second usage model is where the server/destination needs to know
     * which client it's connected too. For example the server needs to
     * send unsolicited messages back to the client. Or the server keeps
     * different state for each client. In this model the server will also
     * use the connect methods. The typical sequence of operation is:</p>
     *<ol>
     *   <li>Client calls AsyncChannel#fullyConnectSync or Asynchronously:<li>
     *      <ol>For an asynchronous full connection it calls AsyncChannel#connect</li>
     *          <li>Client receives CMD_CHANNEL_HALF_CONNECTED from AsyncChannel</li>
     *          <li>Client calls AsyncChannel#sendMessage(CMD_CHANNEL_FULL_CONNECTION)</li>
     *      </ol>
     *   <li>Server receives CMD_CHANNEL_FULL_CONNECTION</li>
     *   <li>Server calls AsyncChannel#connected</li>
     *   <li>Server sends AsyncChannel#sendMessage(CMD_CHANNEL_FULLY_CONNECTED)</li>
     *   <li>Client receives CMD_CHANNEL_FULLY_CONNECTED</li>
     *   <li><code>comm-loop:</code></li>
     *   <li>Client/Server uses AsyncChannel#sendMessage/replyToMessage
     *       to communicate and perform work</li>
     *   <li>Loop to <code>comm-loop</code> until done</li>
     *   <li>When done Client/Server calls {@link AsyncChannel#disconnect}</li>
     *   <li>Client/Server receives CMD_CHANNEL_DISCONNECTED from AsyncChannel</li>
     *</ol>
     *
     * TODO: Consider simplifying where we have connect and fullyConnect with only one response
     * message RSP_CHANNEL_CONNECT instead of two, CMD_CHANNEL_HALF_CONNECTED and
     * CMD_CHANNEL_FULLY_CONNECTED. We'd also change CMD_CHANNEL_FULL_CONNECTION to REQ_CHANNEL_CONNECT.
     */
    [local]
    interface IAsyncChannel {
        /**
         * Command sent when the channel is half connected. Half connected
         * means that the channel can be used to send commends to the destination
         * but the destination is unaware that the channel exists. The first
         * command sent to the destination is typically CMD_CHANNEL_FULL_CONNECTION if
         * it is desired to establish a long term connection, but any command maybe
         * sent.
         *
         * msg.arg1 == 0 : STATUS_SUCCESSFUL
         *             1 : STATUS_BINDING_UNSUCCESSFUL
         * msg.obj  == the AsyncChannel
         * msg.replyTo == dstMessenger if successful
         */
        const Int32 CMD_CHANNEL_HALF_CONNECTED = 0x00011000;//BASE + 0;

        /**
         * Command typically sent when after receiving the CMD_CHANNEL_HALF_CONNECTED.
         * This is used to initiate a long term connection with the destination and
         * typically the destination will reply with CMD_CHANNEL_FULLY_CONNECTED.
         *
         * msg.replyTo = srcMessenger.
         */
        const Int32 CMD_CHANNEL_FULL_CONNECTION = 0x00011001;// BASE + 1;

        /**
         * Command typically sent after the destination receives a CMD_CHANNEL_FULL_CONNECTION.
         * This signifies the acceptance or rejection of the channel by the sender.
         *
         * msg.arg1 == 0 : Accept connection
         *               : All other values signify the destination rejected the connection
         *                 and {@link AsyncChannel#disconnect} would typically be called.
         */
        const Int32 CMD_CHANNEL_FULLY_CONNECTED = 0x00011002;// BASE + 2;

        /**
         * Command sent when one side or the other wishes to disconnect. The sender
         * may or may not be able to receive a reply depending upon the protocol and
         * the state of the connection. The receiver should call {@link AsyncChannel#disconnect}
         * to close its side of the channel and it will receive a CMD_CHANNEL_DISCONNECTED
         * when the channel is closed.
         *
         * msg.replyTo = messenger that is disconnecting
         */
        const Int32 CMD_CHANNEL_DISCONNECT = 0x00011003;//BASE + 3;

        /**
         * Command sent when the channel becomes disconnected. This is sent when the
         * channel is forcibly disconnected by the system or as a reply to CMD_CHANNEL_DISCONNECT.
         *
         * msg.arg1 == 0 : STATUS_SUCCESSFUL
         *             1 : STATUS_BINDING_UNSUCCESSFUL
         *             2 : STATUS_SEND_UNSUCCESSFUL
         *               : All other values signify failure and the channel state is indeterminate
         * msg.obj  == the AsyncChannel
         * msg.replyTo = messenger disconnecting or null if it was never connected.
         */
        const Int32 CMD_CHANNEL_DISCONNECTED = 0x00011004;//BASE + 4;

        /** Successful status always 0, !0 is an unsuccessful status */
        const Int32 STATUS_SUCCESSFUL = 0;

        /** Error attempting to bind on a connect */
        const Int32 STATUS_BINDING_UNSUCCESSFUL = 1;

        /** Error attempting to send a message */
        const Int32 STATUS_SEND_UNSUCCESSFUL = 2;

        /** CMD_FULLY_CONNECTED refused because a connection already exists*/
        const Int32 STATUS_FULL_CONNECTION_REFUSED_ALREADY_CONNECTED = 3;

        /** Error indicating abnormal termination of destination messenger */
        const Int32 STATUS_REMOTE_DISCONNECTION = 4;

        /**
         * Connect handler to named package/class synchronously.
         *
         * @param srcContext is the context of the source
         * @param srcHandler is the hander to receive CONNECTED & DISCONNECTED
         *            messages
         * @param dstPackageName is the destination package name
         * @param dstClassName is the fully qualified class name (i.e. contains
         *            package name)
         *
         * @return STATUS_SUCCESSFUL on success any other value is an error.
         */
        ConnectSrcHandlerToPackageSync(
            [in] IContext* srcContext,
            [in] IHandler* srcHandler,
            [in] String dstPackageName,
            [in] String dstClassName,
            [out] Int32* status);

        /**
         * Connect a handler to Messenger synchronously.
         *
         * @param srcContext is the context of the source
         * @param srcHandler is the hander to receive CONNECTED & DISCONNECTED
         *            messages
         * @param dstMessenger is the hander to send messages to.
         *
         * @return STATUS_SUCCESSFUL on success any other value is an error.
         */
        ConnectSync(
            [in] IContext* srcContext,
            [in] IHandler* srcHandler,
            [in] IMessenger* dstMessenger,
            [out] Int32* status);

        /**
         * connect two local Handlers synchronously.
         *
         * @param srcContext is the context of the source
         * @param srcHandler is the hander to receive CONNECTED & DISCONNECTED
         *            messages
         * @param dstHandler is the hander to send messages to.
         *
         * @return STATUS_SUCCESSFUL on success any other value is an error.
         */
        ConnectSync(
            [in] IContext* srcContext,
            [in] IHandler* srcHandler,
            [in] IHandler* dstHandler,
            [out] Int32* status);

        /**
         * Connect handler and messenger.
         *
         * Sends a CMD_CHANNEL_HALF_CONNECTED message to srcHandler when complete.
         *      msg.arg1 = status
         *      msg.obj = the AsyncChannel
         *
         * @param srcContext
         * @param srcHandler
         * @param dstMessenger
         */
        Connect(
            [in] IContext* srcContext,
            [in] IHandler* srcHandler,
            [in] IMessenger* dstMessenger);

        /**
         * Connect handler to messenger. This method is typically called
         * when a server receives a CMD_CHANNEL_FULL_CONNECTION request
         * and initializes the internal instance variables to allow communication
         * with the dstMessenger.
         *
         * @param srcContext
         * @param srcHandler
         * @param dstMessenger
         */
        Connected(
            [in] IContext* srcContext,
            [in] IHandler* srcHandler,
            [in] IMessenger* dstMessenger);

        /**
         * Connect two local Handlers.
         *
         * @param srcContext is the context of the source
         * @param srcHandler is the hander to receive CONNECTED & DISCONNECTED
         *            messages
         * @param dstHandler is the hander to send messages to.
         */
        Connect(
            [in] IContext* srcContext,
            [in] IHandler* srcHandler,
            [in] IHandler* dstHandler);

        Connect(
            [in] IAsyncService* srcAsyncService,
            [in] IMessenger* dstMessenger);

        /**
         * Fully connect two local Handlers synchronously.
         *
         * @param srcContext is the context of the source
         * @param srcHandler is the hander to receive CONNECTED & DISCONNECTED
         *            messages
         * @param dstHandler is the hander to send messages to.
         *
         * @return STATUS_SUCCESSFUL on success any other value is an error.
         */
        FullyConnectSync(
            [in] IContext* srcContext,
            [in] IHandler* srcHandler,
            [in] IHandler* dstHandler,
            [out] Int32* status);

        /**
         * Connect handler to named package/class.
         *
         * Sends a CMD_CHANNEL_HALF_CONNECTED message to srcHandler when complete.
         *      msg.arg1 = status
         *      msg.obj = the AsyncChannel
         *
         * @param srcContext is the context of the source
         * @param srcHandler is the hander to receive CONNECTED & DISCONNECTED
         *            messages
         * @param dstPackageName is the destination package name
         * @param dstClassName is the fully qualified class name (i.e. contains
         *            package name)
         */
        Connect(
            [in] IContext* srcContext,
            [in] IHandler* srcHandler,
            [in] String dstPackageName,
            [in] String dstClassName);

        /**
         * To close the connection call when handler receives CMD_CHANNEL_DISCONNECTED
         */
        Disconnected();

        /**
         * Disconnect
         */
        Disconnect();

        /**
         * Send a message to the destination handler.
         *
         * @param msg
         */
        SendMessage(
            [in] IMessage* msg);

        /**
         * Send a message to the destination handler
         *
         * @param what
         */
        SendMessage(
            [in] Int32 what);

        /**
         * Send a message to the destination handler
         *
         * @param what
         * @param arg1
         */
        SendMessage(
            [in] Int32 what,
            [in] Int32 arg1);

        /**
         * Send a message to the destination handler
         *
         * @param what
         * @param arg1
         * @param arg2
         */
        SendMessage(
            [in] Int32 what,
            [in] Int32 arg1,
            [in] Int32 arg2);

        /**
         * Send a message to the destination handler
         *
         * @param what
         * @param arg1
         * @param arg2
         * @param obj
         */
        SendMessage(
            [in] Int32 what,
            [in] Int32 arg1,
            [in] Int32 arg2,
            [in] IInterface* obj);

        /**
         * Send a message to the destination handler
         *
         * @param what
         * @param obj
         */
        SendMessage(
            [in] Int32 what,
            [in] IInterface* obj);

        /**
         * Reply to srcMsg sending dstMsg
         *
         * @param srcMsg
         * @param dstMsg
         */
        ReplyToMessage(
            [in] IMessage* srcMsg,
            [in] IMessage* dstMsg);

        /**
         * Reply to srcMsg
         *
         * @param srcMsg
         * @param what
         */
        ReplyToMessage(
            [in] IMessage* srcMsg,
            [in] Int32 what);

        /**
         * Reply to srcMsg
         *
         * @param srcMsg
         * @param what
         * @param arg1
         */
        ReplyToMessage(
            [in] IMessage* srcMsg,
            [in] Int32 what,
            [in] Int32 arg1);

        /**
         * Reply to srcMsg
         *
         * @param srcMsg
         * @param what
         * @param arg1
         * @param arg2
         */
        ReplyToMessage(
            [in] IMessage* srcMsg,
            [in] Int32 what,
            [in] Int32 arg1,
            [in] Int32 arg2);

        /**
         * Reply to srcMsg
         *
         * @param srcMsg
         * @param what
         * @param arg1
         * @param arg2
         * @param obj
         */
        ReplyToMessage(
            [in] IMessage* srcMsg,
            [in] Int32 what,
            [in] Int32 arg1,
            [in] Int32 arg2,
            [in] IInterface* obj);

        /**
         * Reply to srcMsg
         *
         * @param srcMsg
         * @param what
         * @param obj
         */
        ReplyToMessage(
            [in] IMessage* srcMsg,
            [in] Int32 what,
            [in] IInterface* obj);

        /**
         * Send the Message synchronously.
         *
         * @param msg to send
         * @return reply message or null if an error.
         */
        SendMessageSynchronously(
            [in] IMessage* msg,
            [out] IMessage** resultMsg);

        /**
         * Send the Message synchronously.
         *
         * @param what
         * @return reply message or null if an error.
         */
        SendMessageSynchronously(
            [in] Int32 what,
            [out] IMessage** resultMsg);

        /**
         * Send the Message synchronously.
         *
         * @param what
         * @param arg1
         * @return reply message or null if an error.
         */
        SendMessageSynchronously(
            [in] Int32 what,
            [in] Int32 arg1,
            [out] IMessage** resultMsg);

        /**
         * Send the Message synchronously.
         *
         * @param what
         * @param arg1
         * @param arg2
         * @return reply message or null if an error.
         */
        SendMessageSynchronously(
            [in] Int32 what,
            [in] Int32 arg1,
            [in] Int32 arg2,
            [out] IMessage** resultMsg);

        /**
         * Send the Message synchronously.
         *
         * @param what
         * @param obj
         * @return reply message or null if an error.
         */
        SendMessageSynchronously(
            [in] Int32 what,
            [in] IInterface* obj,
            [out] IMessage** resultMsg);
    }

    } //namespace Utility
    } //namespace Internal
    } //namespace Droid
    } //namespace Elastos
}
