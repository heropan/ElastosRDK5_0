
module
{
    using interface Elastos.Utility.IList;

    interface Elastos.Droid.Accounts.IAccount;
    interface Elastos.Droid.Content.IISyncStatusObserver;
    interface Elastos.Droid.Content.ISyncAdapterType;
    interface Elastos.Droid.Database.IIContentObserver;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Os.IBundle;

    namespace Elastos {
    namespace Droid {
    namespace Content {

    [deprecated]
    interface IIContentService {
        UnregisterContentObserver(
            [in] IIContentObserver* observer);

        /**
         * Register a content observer tied to a specific user's view of the provider.
         * @param userHandle the user whose view of the provider is to be observed.  May be
         *     the calling user without requiring any permission, otherwise the caller needs to
         *     hold the INTERACT_ACROSS_USERS_FULL permission.  Pseudousers USER_ALL and
         *     USER_CURRENT are properly handled.
         */
        RegisterContentObserver(
            [in] IUri* uri,
            [in] Boolean notifyForDescendants,
            [in] IIContentObserver* observer,
            [in] Int32 userHandle);

        /**
         * Notify observers of a particular user's view of the provider.
         * @param userHandle the user whose view of the provider is to be notified.  May be
         *     the calling user without requiring any permission, otherwise the caller needs to
         *     hold the INTERACT_ACROSS_USERS_FULL permission.  Pseudousers USER_ALL
         *     USER_CURRENT are properly interpreted.
         */
        NotifyChange(
            [in] IUri* uri,
            [in] IIContentObserver* observer,
            [in] Boolean observerWantsSelfNotifications,
            [in] Boolean syncToNetwork,
            [in] Int32 userHandle);

        RequestSync(
            [in] IAccount* account,
            [in] String authority,
            [in] IBundle* extras);

        /**
         * Start a sync given a request.
         */
        Sync(
            [in] ISyncRequest* request);

        SyncAsUser(
            [in] ISyncRequest* request,
            [in] Int32 userId);

        CancelSync(
            [in] IAccount* account,
            [in] String authority,
            [in] IComponentName* cname);

        CancelSyncAsUser(
            [in] IAccount* account,
            [in] String authority,
            [in] IComponentName* cname,
            [in] Int32 userId);

        /** Cancel a sync, providing information about the sync to be cancelled. */
         CancelRequest(
            [in] ISyncRequest* request);

        /**
         * Check if the provider should be synced when a network tickle is received
         * @param providerName the provider whose setting we are querying
         * @return true if the provider should be synced when a network tickle is received
         */
        GetSyncAutomatically(
            [in] IAccount* account,
            [in] String providerName,
            [out] Boolean* result);

        GetSyncAutomaticallyAsUser(
            [in] IAccount* account,
            [in] String providerName,
            [in] Int32 userId,
            [out] Boolean* result);

        /**
         * Set whether or not the provider is synced when it receives a network tickle.
         *
         * @param providerName the provider whose behavior is being controlled
         * @param sync true if the provider should be synced when tickles are received for it
         */
        SetSyncAutomatically(
            [in] IAccount* account,
            [in] String providerName,
            [in] Boolean sync);

        SetSyncAutomaticallyAsUser(
            [in] IAccount* account,
            [in] String providerName,
            [in] Boolean sync,
            [in] Int32 userId);

        /**
         * Get the frequency of the periodic poll, if any.
         * @param providerName the provider whose setting we are querying
         * @return the frequency of the periodic sync in seconds. If 0 then no periodic syncs
         * will take place.
         */
        GetPeriodicSyncs(
            [in] IAccount* account,
            [in] String providerName,
            [out] IList** periodicSyncList);

        /**
         * Set whether or not the provider is to be synced on a periodic basis.
         *
         * @param providerName the provider whose behavior is being controlled
         * @param pollFrequency the period that a sync should be performed, in seconds. If this is
         * zero or less then no periodic syncs will be performed.
         */
        AddPeriodicSync(
            [in] IAccount* account,
            [in] String providerName,
            [in] IBundle* extras,
            [in] Int64 pollFrequency);

        /**
         * Set whether or not the provider is to be synced on a periodic basis.
         *
         * @param providerName the provider whose behavior is being controlled
         * @param pollFrequency the period that a sync should be performed, in seconds. If this is
         * zero or less then no periodic syncs will be performed.
         */
        RemovePeriodicSync(
            [in] IAccount* account,
            [in] String providerName,
            [in] IBundle* extras);

        /**
         * Check if this account/provider is syncable.
         * @return >0 if it is syncable, 0 if not, and <0 if the state isn't known yet.
         */
        GetIsSyncable(
            [in] IAccount* account,
            [in] String providerName,
            [out] Int32* value);

        GetIsSyncableAsUser(
            [in] IAccount* account,
            [in] String providerName,
            [in] Int32 userId,
            [out] Int32* value);

        /**
         * Set whether this account/provider is syncable.
         * @param syncable, >0 denotes syncable, 0 means not syncable, <0 means unknown
         */
        SetIsSyncable(
            [in] IAccount* account,
            [in] String providerName,
            [in] Int32 syncable);

        SetMasterSyncAutomatically(
            [in] Boolean flag);

        SetMasterSyncAutomaticallyAsUser(
            [in] Boolean flag,
            [in] Int32 userId);

        GetMasterSyncAutomatically(
            [out] Boolean* result);

        GetMasterSyncAutomaticallyAsUser(
            [in] Int32 userId,
            [out] Boolean* result);

        GetCurrentSyncs(
            [out] IList** syncInfoList);

        GetCurrentSyncsAsUser(
            [in] Int32 userId,
            [out] IList** syncInfoList);

        /**
         * Returns the types of the SyncAdapters that are registered with the system.
         * @return Returns the types of the SyncAdapters that are registered with the system.
         */
        GetSyncAdapterTypes(
            [out, callee] ArrayOf<ISyncAdapterType*>* result);

        GetSyncAdapterTypesAsUser(
            [in] Int32 userId,
            [out, callee] ArrayOf<ISyncAdapterType*>* result);

        /**
         * Returns true if there is currently a sync operation for the given
         * account or authority in the pending list, or actively being processed.
         */
        IsSyncActive(
            [in] IAccount* account,
            [in] String authority,
            [in] IComponentName* name,
            [out] Boolean* isActive);

        /**
         * Returns the status that matches the authority. If there are multiples accounts for
         * the authority, the one with the latest "lastSuccessTime" status is returned.
         * @param authority the authority whose row should be selected
         * @return the SyncStatusInfo for the authority, or null if none exists
         */
        GetSyncStatus(
            [in] IAccount* account,
            [in] String authority,
            [in] IComponentName* name,
            [out] ISyncStatusInfo** result);

        GetSyncStatusAsUser(
            [in] IAccount* account,
            [in] String authority,
            [in] IComponentName* name,
            [in] Int32 userId,
            [out] ISyncStatusInfo** result);

        /**
         * Return true if the pending status is true of any matching authorities.
         */
        IsSyncPending(
            [in] IAccount* account,
            [in] String authority,
            [in] IComponentName* name,
            [out] Boolean* isPending);

        IsSyncPendingAsUser(
            [in] IAccount* account,
            [in] String authority,
            [in] IComponentName* name,
            [in] Int32 userId,
            [out] Boolean* isPending);

        AddStatusChangeListener(
            [in] Int32 mask,
            [in] IISyncStatusObserver* observer);

        RemoveStatusChangeListener(
            [in] IISyncStatusObserver* observer);
    }

    } // namespace Content
    } // namespace Droid
    } // namespace Elastos
}
