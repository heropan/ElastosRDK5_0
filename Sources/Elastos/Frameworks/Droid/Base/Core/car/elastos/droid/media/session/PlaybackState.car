module
{
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Core.ICharSequence;
    interface Elastos.Utility.IList;

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Session {

    /**
     * {@link PlaybackState.CustomAction CustomActions} can be used to extend the capabilities of
     * the standard transport controls by exposing app specific actions to
     * {@link MediaController MediaControllers}.
     */
    interface IPlaybackStateCustomAction {
        /**
         * Returns the action of the {@link CustomAction}.
         *
         * @return The action of the {@link CustomAction}.
         */
        GetAction(
            [out] String * result);

        /**
         * Returns the display name of this action. e.g. "Favorite"
         *
         * @return The display name of this {@link CustomAction}.
         */
        GetName(
            [out] ICharSequence ** result);

        /**
         * Returns the resource id of the icon in the {@link MediaSession MediaSession's} package.
         *
         * @return The resource id of the icon in the {@link MediaSession MediaSession's} package.
         */
        GetIcon(
            [out] Int32 * result);

        /**
         * Returns extras which provide additional application-specific information about the
         * action, or null if none. These arguments are meant to be consumed by a
         * {@link MediaController} if it knows how to handle them.
         *
         * @return Optional arguments for the {@link CustomAction}.
         */
        GetExtras(
            [out] IBundle ** result);

    }

    /**
     * Builder for {@link CustomAction} objects.
     */
    interface IPlaybackStateCustomActionBuilder {
        /**
         * Set optional extras for the {@link CustomAction}. These extras are meant to be
         * consumed by a {@link MediaController} if it knows how to handle them.
         * Keys should be fully qualified (e.g. "com.example.MY_ARG") to avoid collisions.
         *
         * @param extras Optional extras for the {@link CustomAction}.
         * @return this.
         */
        SetExtras(
            [in] IBundle * extras,
            [out] IPlaybackStateCustomActionBuilder ** result);

        /**
         * Build and return the {@link CustomAction} instance with the specified values.
         *
         * @return A new {@link CustomAction} instance.
         */
        Build(
            [out] IPlaybackStateCustomAction ** result);

    }

    /**
     * Playback state for a {@link MediaSession}. This includes a state like
     * {@link PlaybackState#STATE_PLAYING}, the current playback position,
     * and the current control capabilities.
     */
    interface IPlaybackState {
        /**
         * Indicates this session supports the stop command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_STOP = 1 << 0;

        /**
         * Indicates this session supports the pause command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_PAUSE = 1 << 1;

        /**
         * Indicates this session supports the play command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_PLAY = 1 << 2;

        /**
         * Indicates this session supports the rewind command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_REWIND = 1 << 3;

        /**
         * Indicates this session supports the previous command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_SKIP_TO_PREVIOUS = 1 << 4;

        /**
         * Indicates this session supports the next command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_SKIP_TO_NEXT = 1 << 5;

        /**
         * Indicates this session supports the fast forward command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_FAST_FORWARD = 1 << 6;

        /**
         * Indicates this session supports the set rating command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_SET_RATING = 1 << 7;

        /**
         * Indicates this session supports the seek to command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_SEEK_TO = 1 << 8;

        /**
         * Indicates this session supports the play/pause toggle command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_PLAY_PAUSE = 1 << 9;

        /**
         * Indicates this session supports the play from media id command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_PLAY_FROM_MEDIA_ID = 1 << 10;

        /**
         * Indicates this session supports the play from search command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_PLAY_FROM_SEARCH = 1 << 11;

        /**
         * Indicates this session supports the skip to queue item command.
         *
         * @see Builder#setActions(long)
         */
        const Int64 ACTION_SKIP_TO_QUEUE_ITEM = 1 << 12;

        /**
         * This is the default playback state and indicates that no media has been
         * added yet, or the performer has been reset and has no content to play.
         *
         * @see Builder#setState(int, long, float)
         * @see Builder#setState(int, long, float, long)
         */
        const Int32 STATE_NONE = 0;

        /**
         * State indicating this item is currently stopped.
         *
         * @see Builder#setState
         */
        const Int32 STATE_STOPPED = 1;

        /**
         * State indicating this item is currently paused.
         *
         * @see Builder#setState
         */
        const Int32 STATE_PAUSED = 2;

        /**
         * State indicating this item is currently playing.
         *
         * @see Builder#setState
         */
        const Int32 STATE_PLAYING = 3;

        /**
         * State indicating this item is currently fast forwarding.
         *
         * @see Builder#setState
         */
        const Int32 STATE_FAST_FORWARDING = 4;

        /**
         * State indicating this item is currently rewinding.
         *
         * @see Builder#setState
         */
        const Int32 STATE_REWINDING = 5;

        /**
         * State indicating this item is currently buffering and will begin playing
         * when enough data has buffered.
         *
         * @see Builder#setState
         */
        const Int32 STATE_BUFFERING = 6;

        /**
         * State indicating this item is currently in an error state. The error
         * message should also be set when entering this state.
         *
         * @see Builder#setState
         */
        const Int32 STATE_ERROR = 7;

        /**
         * State indicating the class doing playback is currently connecting to a
         * new destination.  Depending on the implementation you may return to the previous
         * state when the connection finishes or enter {@link #STATE_NONE}.
         * If the connection failed {@link #STATE_ERROR} should be used.
         *
         * @see Builder#setState
         */
        const Int32 STATE_CONNECTING = 8;

        /**
         * State indicating the player is currently skipping to the previous item.
         *
         * @see Builder#setState
         */
        const Int32 STATE_SKIPPING_TO_PREVIOUS = 9;

        /**
         * State indicating the player is currently skipping to the next item.
         *
         * @see Builder#setState
         */
        const Int32 STATE_SKIPPING_TO_NEXT = 10;

        /**
         * State indicating the player is currently skipping to a specific item in
         * the queue.
         *
         * @see Builder#setState
         */
        const Int32 STATE_SKIPPING_TO_QUEUE_ITEM = 11;

        /**
         * Use this value for the position to indicate the position is not known.
         */
        const Int32 PLAYBACK_POSITION_UNKNOWN = -1;

        /**
         * Get the current state of playback. One of the following:
         * <ul>
         * <li> {@link PlaybackState#STATE_NONE}</li>
         * <li> {@link PlaybackState#STATE_STOPPED}</li>
         * <li> {@link PlaybackState#STATE_PLAYING}</li>
         * <li> {@link PlaybackState#STATE_PAUSED}</li>
         * <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li>
         * <li> {@link PlaybackState#STATE_REWINDING}</li>
         * <li> {@link PlaybackState#STATE_BUFFERING}</li>
         * <li> {@link PlaybackState#STATE_ERROR}</li>
         */
        GetState(
            [out] Int32 * result);

        /**
         * Get the current playback position in ms.
         */
        GetPosition(
            [out] Int64 * result);

        /**
         * Get the current buffered position in ms. This is the farthest playback
         * point that can be reached from the current position using only buffered
         * content.
         */
        GetBufferedPosition(
            [out] Int64 * result);

        /**
         * Get the current playback speed as a multiple of normal playback. This
         * should be negative when rewinding. A value of 1 means normal playback and
         * 0 means paused.
         *
         * @return The current speed of playback.
         */
        GetPlaybackSpeed(
            [out] Float * result);

        /**
         * Get the current actions available on this session. This should use a
         * bitmask of the available actions.
         * <ul>
         * <li> {@link PlaybackState#ACTION_SKIP_TO_PREVIOUS}</li>
         * <li> {@link PlaybackState#ACTION_REWIND}</li>
         * <li> {@link PlaybackState#ACTION_PLAY}</li>
         * <li> {@link PlaybackState#ACTION_PAUSE}</li>
         * <li> {@link PlaybackState#ACTION_STOP}</li>
         * <li> {@link PlaybackState#ACTION_FAST_FORWARD}</li>
         * <li> {@link PlaybackState#ACTION_SKIP_TO_NEXT}</li>
         * <li> {@link PlaybackState#ACTION_SEEK_TO}</li>
         * <li> {@link PlaybackState#ACTION_SET_RATING}</li>
         * </ul>
         */
        GetActions(
            [out] Int64 * result);

        /**
         * Get the list of custom actions.
         */
        GetCustomActions(
            [out] IList ** result);

        /**
         * Get a user readable error message. This should be set when the state is
         * {@link PlaybackState#STATE_ERROR}.
         */
        GetErrorMessage(
            [out] ICharSequence ** result);

        /**
         * Get the elapsed real time at which position was last updated. If the
         * position has never been set this will return 0;
         *
         * @return The last time the position was updated.
         */
        GetLastPositionUpdateTime(
            [out] Int64 * result);

        /**
         * Get the id of the currently active item in the queue. If there is no
         * queue or a queue is not supported by the session this will be
         * {@link MediaSession.QueueItem#UNKNOWN_ID}.
         *
         * @return The id of the currently active item in the queue or
         *         {@link MediaSession.QueueItem#UNKNOWN_ID}.
         */
        GetActiveQueueItemId(
            [out] Int64 * result);


    }

    interface IPlaybackStateHelper {
        /**
         * Get the {@link PlaybackState} state for the given
         * {@link RemoteControlClient} state.
         *
         * @param rccState The state used by {@link RemoteControlClient}.
         * @return The equivalent state used by {@link PlaybackState}.
         * @hide
         */
        GetStateFromRccState(
            [in] Int32 rccState,
            [out] Int32 * result);

        /**
         * Get the {@link RemoteControlClient} state for the given
         * {@link PlaybackState} state.
         *
         * @param state The state used by {@link PlaybackState}.
         * @return The equivalent state used by {@link RemoteControlClient}.
         * @hide
         */
        GetRccStateFromState(
            [in] Int32 state,
            [out] Int32 * result);

        /**
         * @hide
         */
        GetActionsFromRccControlFlags(
            [in] Int32 rccFlags,
            [out] Int64 * result);

        /**
         * @hide
         */
        GetRccControlFlagsFromActions(
            [in] Int64 actions,
            [out] Int32 * result);

    }

    /**
     * Builder for {@link PlaybackState} objects.
     */
    interface IPlaybackStateBuilder {
        /**
         * Set the current state of playback.
         * <p>
         * The position must be in ms and indicates the current playback
         * position within the item. If the position is unknown use
         * {@link #PLAYBACK_POSITION_UNKNOWN}. When not using an unknown
         * position the time at which the position was updated must be provided.
         * It is okay to use {@link SystemClock#elapsedRealtime()} if the
         * current position was just retrieved.
         * <p>
         * The speed is a multiple of normal playback and should be 0 when
         * paused and negative when rewinding. Normal playback speed is 1.0.
         * <p>
         * The state must be one of the following:
         * <ul>
         * <li> {@link PlaybackState#STATE_NONE}</li>
         * <li> {@link PlaybackState#STATE_STOPPED}</li>
         * <li> {@link PlaybackState#STATE_PLAYING}</li>
         * <li> {@link PlaybackState#STATE_PAUSED}</li>
         * <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li>
         * <li> {@link PlaybackState#STATE_REWINDING}</li>
         * <li> {@link PlaybackState#STATE_BUFFERING}</li>
         * <li> {@link PlaybackState#STATE_ERROR}</li>
         * </ul>
         *
         * @param state The current state of playback.
         * @param position The position in the current item in ms.
         * @param playbackSpeed The current speed of playback as a multiple of
         *            normal playback.
         * @param updateTime The time in the {@link SystemClock#elapsedRealtime}
         *            timebase that the position was updated at.
         * @return this
         */
        SetState(
            [in] Int32 state,
            [in] Int64 position,
            [in] Float playbackSpeed,
            [in] Int64 updateTime,
            [out] IPlaybackStateBuilder ** result);

        /**
         * Set the current state of playback.
         * <p>
         * The position must be in ms and indicates the current playback
         * position within the item. If the position is unknown use
         * {@link #PLAYBACK_POSITION_UNKNOWN}. The update time will be set to
         * the current {@link SystemClock#elapsedRealtime()}.
         * <p>
         * The speed is a multiple of normal playback and should be 0 when
         * paused and negative when rewinding. Normal playback speed is 1.0.
         * <p>
         * The state must be one of the following:
         * <ul>
         * <li> {@link PlaybackState#STATE_NONE}</li>
         * <li> {@link PlaybackState#STATE_STOPPED}</li>
         * <li> {@link PlaybackState#STATE_PLAYING}</li>
         * <li> {@link PlaybackState#STATE_PAUSED}</li>
         * <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li>
         * <li> {@link PlaybackState#STATE_REWINDING}</li>
         * <li> {@link PlaybackState#STATE_BUFFERING}</li>
         * <li> {@link PlaybackState#STATE_ERROR}</li>
         * </ul>
         *
         * @param state The current state of playback.
         * @param position The position in the current item in ms.
         * @param playbackSpeed The current speed of playback as a multiple of
         *            normal playback.
         * @return this
         */
        SetState(
            [in] Int32 state,
            [in] Int64 position,
            [in] Float playbackSpeed,
            [out] IPlaybackStateBuilder ** result);

        /**
         * Set the current actions available on this session. This should use a
         * bitmask of possible actions.
         * <ul>
         * <li> {@link PlaybackState#ACTION_SKIP_TO_PREVIOUS}</li>
         * <li> {@link PlaybackState#ACTION_REWIND}</li>
         * <li> {@link PlaybackState#ACTION_PLAY}</li>
         * <li> {@link PlaybackState#ACTION_PAUSE}</li>
         * <li> {@link PlaybackState#ACTION_STOP}</li>
         * <li> {@link PlaybackState#ACTION_FAST_FORWARD}</li>
         * <li> {@link PlaybackState#ACTION_SKIP_TO_NEXT}</li>
         * <li> {@link PlaybackState#ACTION_SEEK_TO}</li>
         * <li> {@link PlaybackState#ACTION_SET_RATING}</li>
         * </ul>
         *
         * @param actions The set of actions allowed.
         * @return this
         */
        SetActions(
            [in] Int64 actions,
            [out] IPlaybackStateBuilder ** result);

        /**
         * Add a custom action to the playback state. Actions can be used to
         * expose additional functionality to {@link MediaController
         * MediaControllers} beyond what is offered by the standard transport
         * controls.
         * <p>
         * e.g. start a radio station based on the current item or skip ahead by
         * 30 seconds.
         *
         * @param action An identifier for this action. It can be sent back to
         *            the {@link MediaSession} through
         *            {@link MediaController.TransportControls#sendCustomAction(String, Bundle)}.
         * @param name The display name for the action. If text is shown with
         *            the action or used for accessibility, this is what should
         *            be used.
         * @param icon The resource action of the icon that should be displayed
         *            for the action. The resource should be in the package of
         *            the {@link MediaSession}.
         * @return this
         */
        AddCustomAction(
            [in] String action,
            [in] String name,
            [in] Int32 icon,
            [out] IPlaybackStateBuilder ** result);

        /**
         * Add a custom action to the playback state. Actions can be used to expose additional
         * functionality to {@link MediaController MediaControllers} beyond what is offered by the
         * standard transport controls.
         * <p>
         * An example of an action would be to start a radio station based on the current item
         * or to skip ahead by 30 seconds.
         *
         * @param customAction The custom action to add to the {@link PlaybackState}.
         * @return this
         */
        AddCustomAction(
            [in] IPlaybackStateCustomAction * customAction,
            [out] IPlaybackStateBuilder ** result);

        /**
         * Set the current buffered position in ms. This is the farthest
         * playback point that can be reached from the current position using
         * only buffered content.
         *
         * @param bufferedPosition The position in ms that playback is buffered
         *            to.
         * @return this
         */
        SetBufferedPosition(
            [in] Int64 bufferedPosition,
            [out] IPlaybackStateBuilder ** result);

        /**
         * Set the active item in the play queue by specifying its id. The
         * default value is {@link MediaSession.QueueItem#UNKNOWN_ID}
         *
         * @param id The id of the active item.
         * @return this
         */
        SetActiveQueueItemId(
            [in] Int64 id,
            [out] IPlaybackStateBuilder ** result);

        /**
         * Set a user readable error message. This should be set when the state
         * is {@link PlaybackState#STATE_ERROR}.
         *
         * @param error The error message for display to the user.
         * @return this
         */
        SetErrorMessage(
            [in] ICharSequence * error,
            [out] IPlaybackStateBuilder ** result);

        /**
         * Build and return the {@link PlaybackState} instance with these values.
         *
         * @return A new state instance.
         */
        Build(
            [out] IPlaybackState ** result);

    }

    } // namespace Session
    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
