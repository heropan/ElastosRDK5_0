
module
{
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Telecomm.Telecom.ICallListener;
    interface Elastos.Droid.Telecomm.Telecom.IParcelableCall;
    using interface Elastos.Utility.IList;
    using interface Elastos.Utility.IMap;

    namespace Elastos {
    namespace Droid {
    namespace Telecomm {
    namespace Telecom {

    interface ICallDetails {
        GetHandle(
            [out] IUri** res);

        GetHandlePresentation(
            [out] Int32* res);

        GetCallerDisplayName(
            [out] String* res);

        GetCallerDisplayNamePresentation(
            [out] Int32* res);

        GetAccountHandle(
            [out] IPhoneAccountHandle** res);

        GetCallCapabilities(
            [out] Int32* res);

        GetCallProperties(
            [out] Int32* res);

        GetDisconnectCause(
            [out] IDisconnectCause** res);

        GetConnectTimeMillis(
            [out] Int64* res);

        GetGatewayInfo(
            [out] IGatewayInfo** res);

        GetVideoState(
            [out] Int32* res);

        GetStatusHints(
            [out] IStatusHints** res);

        GetExtras(
            [out] IBundle** res);
    }

    /**
     *  Encapsulates all audio states during a call.
     *  @hide
     */
    interface ICall {

        /**
         * The state of a {@code Call} when newly created.
         */
        const Int32 STATE_NEW = 0;

        /**
         * The state of an outgoing {@code Call} when dialing the remote number, but not yet connected.
         */
        const Int32 STATE_DIALING = 1;

        /**
         * The state of an incoming {@code Call} when ringing locally, but not yet connected.
         */
        const Int32 STATE_RINGING = 2;

        /**
         * The state of a {@code Call} when in a holding state.
         */
        const Int32 STATE_HOLDING = 3;

        /**
         * The state of a {@code Call} when actively supporting conversation.
         */
        const Int32 STATE_ACTIVE = 4;

        /**
         * The state of a {@code Call} when no further voice or other communication is being
         * transmitted, the remote side has been or will inevitably be informed that the {@code Call}
         * is no longer active, and the local data transport has or inevitably will release resources
         * associated with this {@code Call}.
         */
        const Int32 STATE_DISCONNECTED = 7;

        /**
         * The state of an outgoing {@code Call}, but waiting for user input before proceeding.
         */
        const Int32 STATE_PRE_DIAL_WAIT = 8;

        /**
         * The initial state of an outgoing {@code Call}.
         * Common transitions are to {@link #STATE_DIALING} state for a successful call or
         * {@link #STATE_DISCONNECTED} if it failed.
         */
        const Int32 STATE_CONNECTING = 9;

        /**
         * The state of a {@code Call} when the user has initiated a disconnection of the call, but the
         * call has not yet been disconnected by the underlying {@code ConnectionService}.  The next
         * state of the call is (potentially) {@link #STATE_DISCONNECTED}.
         */
        const Int32 STATE_DISCONNECTING = 10;

        /**
         * The key to retrieve the optional {@code PhoneAccount}s Telecom can bundle with its Call
         * extras. Used to pass the phone accounts to display on the front end to the user in order to
         * select phone accounts to (for example) place a call.
         *
         * @hide
         */
        const String AVAILABLE_PHONE_ACCOUNTS = "selectPhoneAccountAccounts";

        GetHandle(
            [out] IUri** res);

        GetHandlePresentation(
            [out] Int32* res);

        GetCallerDisplayName(
            [out] String* res);

        GetCallerDisplayNamePresentation(
            [out] Int32* res);

        GetAccountHandle(
            [out] IPhoneAccountHandle** res);

        GetCallCapabilities(
            [out] Int32* res);

        GetCallProperties(
            [out] Int32* res);

        GetDisconnectCause(
            [out] IDisconnectCause** res);

        GetConnectTimeMillis(
            [out] Int64* res);

        GetGatewayInfo(
            [out] IGatewayInfo** res);

        GetVideoState(
            [out] Int32* res);

        GetStatusHints(
            [out] IStatusHints** res);

        GetExtras(
            [out] IBundle** res);

        GetRemainingPostDialSequence(
            [out] String* res);

        Answer(
            [in] Int32 videoState);

        Reject(
            [in] Boolean rejectWithMessage,
            [in] String textMessage);

        Disconnect();

        Hold();

        Unhold();

        PlayDtmfTone(
            [in] Char32 digit);

        StopDtmfTone();

        PostDialContinue(
            [in] Boolean proceed);

        PhoneAccountSelected(
            [in] IPhoneAccountHandle* accountHandle);

        Conference(
            [in] ICall* callToConferenceWith);

        SplitFromConference();

        MergeConference();

        SwapConference();

        GetParent(
            [out] ICall** res);

        GetChildren(
            [out] IList** res);

        GetConferenceableCalls(
            [out] IList** res);

        GetState(
            [out] Int32* res);

        GetCannedTextResponses(
            [out] IList** res);

        GetVideoCall(
            [out] IInCallServiceVideoCall** res);

        GetDetails(
            [out] ICallDetails** res);

        AddListener(
            [in] ICallListener* listener);

        RemoveListener(
            [in] ICallListener* listener);

        /** {@hide} */
        InternalGetCallId(
            [out] String* result);

        /** {@hide} */
        InternalUpdate(
            [in] IParcelableCall* parcelableCall,
            [in] IMap* callIdMap);

        /** {@hide} */
        InternalSetPostDialWait(
            [in] String remaining);

        /** {@hide} */
        InternalSetDisconnected();
   }

   interface ICallListener {
        OnStateChanged(
            [in] ICall* call,
            [in] Int32 state);

        OnParentChanged(
            [in] ICall* call,
            [in] ICall* parent);

        OnChildrenChanged(
            [in] ICall* call,
            [in] IList* children);

        OnDetailsChanged(
            [in] ICall* call,
            [in] ICallDetails* details);

        OnCannedTextResponsesLoaded(
            [in] ICall* call,
            [in] IList* cannedTextResponses);

        OnPostDialWait(
            [in] ICall* call,
            [in] String remainingPostDialSequence);

        OnVideoCallChanged(
            [in] ICall* call,
            [in] IInCallServiceVideoCall* videoCall);

        OnCallDestroyed(
            [in] ICall* call);

        OnConferenceableCallsChanged(
            [in] ICall* call,
            [in] IList* conferenceableCalls);
    }

    } // namespace Telecom
    } // namespace Telecomm
    } // namespace Droid
    } // namespace Elastos
}
