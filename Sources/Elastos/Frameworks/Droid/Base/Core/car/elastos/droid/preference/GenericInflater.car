module
{
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Utility.IAttributeSet;
    interface Org.Xmlpull.V1.IXmlPullParser;

    namespace Elastos {
    namespace Droid {
    namespace Preference {

    interface IGenericInflaterParent {
        AddItemFromInflater(
            [in] IInterface* child);
    }

    [local]
    interface IGenericInflaterFactory {
        /**
         * Hook you can supply that is called when inflating from a
         * inflater. You can use this to customize the tag
         * names available in your XML files.
         * <p>
         * Note that it is good practice to prefix these custom names with your
         * package (i.e., com.coolcompany.apps) to avoid conflicts with system
         * names.
         *
         * @param name Tag name to be inflated.
         * @param context The context the item is being created in.
         * @param attrs Inflation attributes as specified in XML file.
         * @return Newly created item. Return null for the default behavior.
         */
        OnCreateItem(
            [in] String name,
            [in] IContext* ctx,
            [in] IAttributeSet* attrs,
            [out] IInterface** item);
    }

    [local, deprecated]
    interface IGenericInflater {
        /**
         * Create a copy of the existing inflater object, with the copy
         * pointing to a different Context than the original.  This is used by
         * {@link ContextThemeWrapper} to create a new inflater to go along
         * with the new Context theme.
         *
         * @param newContext The new Context to associate with the new inflater.
         * May be the same as the original Context if desired.
         *
         * @return Returns a brand spanking new inflater object associated with
         * the given Context.
         */
        CloneInContext(
            [in] IContext* newContext,
            [out] IGenericInflater** ret);

        /**
         * Sets the default package that will be searched for classes to construct
         * for tag names that have no explicit package.
         *
         * @param defaultPackage The default package. This will be prepended to the
         *            tag name, so it should end with a period.
         */
        SetDefaultPackage(
            [in] String defaultPackage);

        /**
         * Returns the default package, or null if it is not set.
         *
         * @see #setDefaultPackage(String)
         * @return The default package.
         */
        GetDefaultPackage(
            [out] String* package);

        /**
         * Return the context we are running in, for access to resources, class
         * loader, etc.
         */
        GetContext(
            [out] IContext** context);

        /**
         * Return the current factory (or null). This is called on each element
         * name. If the factory returns an item, add that to the hierarchy. If it
         * returns null, proceed to call onCreateItem(name).
         */
        GetFactory(
            [out] IGenericInflaterFactory** factory);

        /**
         * Attach a custom Factory interface for creating items while using this
         * inflater. This must not be null, and can only be set
         * once; after setting, you can not change the factory. This is called on
         * each element name as the XML is parsed. If the factory returns an item,
         * that is added to the hierarchy. If it returns null, the next factory
         * default {@link #onCreateItem} method is called.
         * <p>
         * If you have an existing inflater and want to add your
         * own factory to it, use {@link #cloneInContext} to clone the existing
         * instance and then you can use this function (once) on the returned new
         * instance. This will merge your own factory with whatever factory the
         * original instance is using.
         */
        SetFactory(
            [in] IGenericInflaterFactory* factory);


        /**
         * Inflate a new item hierarchy from the specified xml resource. Throws
         * InflaterException if there is an error.
         *
         * @param resource ID for an XML resource to load (e.g.,
         *        <code>R.layout.main_page</code>)
         * @param root Optional parent of the generated hierarchy.
         * @return The root of the inflated hierarchy. If root was supplied,
         *         this is the root item; otherwise it is the root of the inflated
         *         XML file.
         */
        Inflate(
            [in] Int32 resource,
            [in] IInterface* root,
            [out] IInterface** ret);

        /**
         * Inflate a new hierarchy from the specified xml node. Throws
         * InflaterException if there is an error. *
         * <p>
         * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance
         * reasons, inflation relies heavily on pre-processing of XML files
         * that is done at build time. Therefore, it is not currently possible to
         * use inflater with an XmlPullParser over a plain XML file at runtime.
         *
         * @param parser XML dom node containing the description of the
         *        hierarchy.
         * @param root Optional parent of the generated hierarchy.
         * @return The root of the inflated hierarchy. If root was supplied,
         *         this is the that; otherwise it is the root of the inflated
         *         XML file.
         */
        Inflate(
            [in] IXmlPullParser* parser,
            [in] IInterface* root,
            [out] IInterface** ret);

        /**
         * Inflate a new hierarchy from the specified xml resource. Throws
         * InflaterException if there is an error.
         *
         * @param resource ID for an XML resource to load (e.g.,
         *        <code>R.layout.main_page</code>)
         * @param root Optional root to be the parent of the generated hierarchy (if
         *        <em>attachToRoot</em> is true), or else simply an object that
         *        provides a set of values for root of the returned
         *        hierarchy (if <em>attachToRoot</em> is false.)
         * @param attachToRoot Whether the inflated hierarchy should be attached to
         *        the root parameter?
         * @return The root of the inflated hierarchy. If root was supplied and
         *         attachToRoot is true, this is root; otherwise it is the root of
         *         the inflated XML file.
         */
        Inflate(
            [in] Int32 resource,
            [in] IInterface* root,
            [in] Boolean attachToRoot,
            [out] IInterface** ret);

        /**
         * Inflate a new hierarchy from the specified XML node. Throws
         * InflaterException if there is an error.
         * <p>
         * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance
         * reasons, inflation relies heavily on pre-processing of XML files
         * that is done at build time. Therefore, it is not currently possible to
         * use inflater with an XmlPullParser over a plain XML file at runtime.
         *
         * @param parser XML dom node containing the description of the
         *        hierarchy.
         * @param root Optional to be the parent of the generated hierarchy (if
         *        <em>attachToRoot</em> is true), or else simply an object that
         *        provides a set of values for root of the returned
         *        hierarchy (if <em>attachToRoot</em> is false.)
         * @param attachToRoot Whether the inflated hierarchy should be attached to
         *        the root parameter?
         * @return The root of the inflated hierarchy. If root was supplied and
         *         attachToRoot is true, this is root; otherwise it is the root of
         *         the inflated XML file.
         */
        Inflate(
            [in] IXmlPullParser* parser,
            [in] IInterface* root,
            [in] Boolean attachToRoot,
            [out] IInterface** ret);

        /**
         * Low-level function for instantiating by name. This attempts to
         * instantiate class of the given <var>name</var> found in this
         * inflater's ClassLoader.
         *
         * <p>
         * There are two things that can happen in an error case: either the
         * exception describing the error will be thrown, or a null will be
         * returned. You must deal with both possibilities -- the former will happen
         * the first time createItem() is called for a class of a particular name,
         * the latter every time there-after for that class name.
         *
         * @param name The full name of the class to be instantiated.
         * @param attrs The XML attributes supplied for this instance.
         *
         * @return The newly instantied item, or null.
         */
        CreateItem(
            [in] String name,
            [in] String prefix,
            [in] IAttributeSet* attrs,
            [out] IInterface** ret);

        /**
         * This routine is responsible for creating the correct subclass of item
         * given the xml element name. Override it to handle custom item objects. If
         * you override this in your subclass be sure to call through to
         * super.onCreateItem(name) for names you do not recognize.
         *
         * @param name The fully qualified class name of the item to be create.
         * @param attrs An AttributeSet of attributes to apply to the item.
         * @return The item created.
         */
        OnCreateItem(
            [in] String name,
            [in] IAttributeSet* attrs,
            [out] IInterface** ret);

        /**
         * Before this inflater tries to create an item from the tag, this method
         * will be called. The parser will be pointing to the start of a tag, you
         * must stop parsing and return when you reach the end of this element!
         *
         * @param parser XML dom node containing the description of the hierarchy.
         * @param parent The item that should be the parent of whatever you create.
         * @param attrs An AttributeSet of attributes to apply to the item.
         * @return Whether you created a custom object (true), or whether this
         *         inflater should proceed to create an item.
         */
        OnCreateCustomFromTag(
            [in] IXmlPullParser* parser,
            [in] IInterface* parent,
            [in] IAttributeSet* attrs,
            [out] Boolean* ret);

        OnMergeRoots(
            [in] IInterface* givenRoot,
            [in] Boolean attachToGivenRoot,
            [in] IInterface* xmlRoot,
            [out] IInterface** ret);

        GetFactorySet(
            [out] Boolean* fs);

        SetFactorySet(
            [in] Boolean fs);

        GetConstructorArgs(
            [out, callee] ArrayOf<IInterface*>* ca);

        SetConstructorArgs(
            [in] ArrayOf<IInterface*>* ca);
    }

    } // Preference
    } // Droid
    } // Elastos
}
