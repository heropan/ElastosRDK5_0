module
{
    using interface Elastos.Utility.IArrayList;

    interface Elastos.Droid.Os.IRemoteCallback;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.IResultReceiver;
    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Utility.IPair;
    interface Elastos.Droid.App.IActivityOptionsOnAnimationStartedListener;

    namespace Elastos {
    namespace Droid {
    namespace App {

     /**
      * Helper class for building an options Bundle that can be used with Context.startActivity(Intent, Bundle) and related methods.
      *
      * @sa Context.startActivity(Intent, Bundle)
      */
    interface IActivityOptions {

        /**
         * The package name that created the options.
         * @hide
         */
        const String KEY_PACKAGE_NAME = "android:packageName";

        /**
         * Type of animation that arguments specify.
         * @hide
         */
        const String KEY_ANIM_TYPE = "android:animType";

        /**
         * Custom enter animation resource ID.
         * @hide
         */
        const String KEY_ANIM_ENTER_RES_ID = "android:animEnterRes";

        /**
         * Custom exit animation resource ID.
         * @hide
         */
        const String KEY_ANIM_EXIT_RES_ID = "android:animExitRes";

        /**
         * Bitmap for thumbnail animation.
         * @hide
         */
        const String KEY_ANIM_THUMBNAIL = "android:animThumbnail";

        /**
         * Start X position of thumbnail animation.
         * @hide
         */
        const String KEY_ANIM_START_X = "android:animStartX";

        /**
         * Start Y position of thumbnail animation.
         * @hide
         */
        const String KEY_ANIM_START_Y = "android:animStartY";

        /**
         * Initial width of the animation.
         * @hide
         */
        const String KEY_ANIM_WIDTH = "android:animWidth";

        /**
         * Initial height of the animation.
         * @hide
         */
        const String KEY_ANIM_HEIGHT = "android:animHeight";

        /**
         * Callback for when animation is started.
         * @hide
         */
        const String KEY_ANIM_START_LISTENER = "android:animStartListener";

        /** @hide */
        const Int32 ANIM_NONE = 0;
        /** @hide */
        const Int32 ANIM_CUSTOM = 1;
        /** @hide */
        const Int32 ANIM_SCALE_UP = 2;
        /** @hide */
        const Int32 ANIM_THUMBNAIL_SCALE_UP = 3;
        /** @hide */
        const Int32 ANIM_THUMBNAIL_SCALE_DOWN = 4;
        /** @hide */
        const Int32 ANIM_SCENE_TRANSITION = 5;
        /** @hide */
        const Int32 ANIM_DEFAULT = 6;
        /** @hide */
        const Int32 ANIM_LAUNCH_TASK_BEHIND = 7;
        /** @hide */
        const Int32 ANIM_THUMBNAIL_ASPECT_SCALE_UP = 8;
        /** @hide */
        const Int32 ANIM_THUMBNAIL_ASPECT_SCALE_DOWN = 9;

        /** @hide */
        GetLaunchTaskBehind(
            [out] Boolean* result);

        /** @hide */
        GetPackageName(
            [out] String* pkgName);

        SetPackageName(
            [in] String pkgName);

        /** @hide */
        GetAnimationType(
            [out] Int32* type);

        SetAnimationType(
            [in] Int32 type);

        /** @hide */
        GetCustomEnterResId(
            [out] Int32* id);

        SetCustomEnterResId(
            [in] Int32 id);

        /** @hide */
        GetCustomExitResId(
            [out] Int32* id);

        SetCustomExitResId(
            [in] Int32 id);

        /** @hide */
        GetThumbnail(
            [out] IBitmap** thumbnail);

        SetThumbnail(
            [in] IBitmap* thumbnail);

        /** @hide */
        GetStartX(
            [out] Int32* x);

        SetStartX(
            [in] Int32 x);

        /** @hide */
        GetStartY(
            [out] Int32* y);

        SetStartY(
            [in] Int32 y);

        /** @hide */
        GetWidth(
            [out] Int32* width);

        SetWidth(
            [in] Int32 width);

        /** @hide */
        GetHeight(
            [out] Int32* height);

        SetHeight(
            [in] Int32 height);

        /** @hide */
        GetOnAnimationStartListener(
            [out] IRemoteCallback** cb);

        SetOnAnimationStartListener(
            [in] IRemoteCallback* cb);

        /** @hide */
        GetExitCoordinatorKey(
            [out] Int32* result);

        /** @hide */
        Abort();

        /** @hide */
        IsReturning(
            [out] Boolean* result);

        /** @hide */
        GetSharedElementNames(
            [out] IArrayList** list);

        /** @hide */
        GetResultReceiver(
            [out] IResultReceiver** receiver);

        /** @hide */
        GetResultCode(
            [out] Int32* code);

        /** @hide */
        GetResultData(
            [out] IIntent** intent);

        /**
         * Update the current values in this ActivityOptions from those supplied
         * in <var>otherOptions</var>.  Any values
         * defined in <var>otherOptions</var> replace those in the base options.
         */
        Update(
            [in] IActivityOptions* otherOptions);

        /**
         * Returns the created options as a Bundle, which can be passed to
         * android.content.Context#startActivity(android.content.Intent, android.os.Bundle) Context.startActivity(Intent, Bundle) and related methods.
         *
         * @sa android.content.Context#startActivity(android.content.Intent, android.os.Bundle) Context.startActivity(Intent, Bundle)
         * Note that the returned Bundle is still owned by the ActivityOptions
         * object; you must not modify it, but can supply it to the startActivity
         * methods that take an options Bundle.
         */
        ToBundle(
            [out] IBundle** bundle);

        /**
         * Return the filtered options only meant to be seen by the target activity itself
         * @hide
         */
        ForTargetActivity(
            [out] IActivityOptions** options);
    }

    [local, deprecated]
    interface IActivityOptionsHelper {
        /**
         * Create an ActivityOptions specifying a custom animation to run when
         * the activity is displayed.
         *
         * @param context Who is defining this.  This is the application that the
         * animation resources will be loaded from.
         * @param enterResId A resource ID of the animation resource to use for
         * the incoming activity.  Use 0 for no animation.
         * @param exitResId A resource ID of the animation resource to use for
         * the outgoing activity.  Use 0 for no animation.
         * @return Returns a new ActivityOptions object that you can use to
         * supply these options as the options Bundle when starting an activity.
         */
        MakeCustomAnimation(
            [in] IContext* ctx,
            [in] Int32 enterResId,
            [in] Int32 exitResId,
            [out] IActivityOptions** options);

        /**
         * Create an ActivityOptions specifying a custom animation to run when
         * the activity is displayed.
         *
         * @param context Who is defining this.  This is the application that the
         * animation resources will be loaded from.
         * @param enterResId A resource ID of the animation resource to use for
         * the incoming activity.  Use 0 for no animation.
         * @param exitResId A resource ID of the animation resource to use for
         * the outgoing activity.  Use 0 for no animation.
         * @param handler If <var>listener</var> is non-null this must be a valid
         * Handler on which to dispatch the callback; otherwise it should be null.
         * @param listener Optional OnAnimationStartedListener to find out when the
         * requested animation has started running.  If for some reason the animation
         * is not executed, the callback will happen immediately.
         * @return Returns a new ActivityOptions object that you can use to
         * supply these options as the options Bundle when starting an activity.
         * @hide
         */
        MakeCustomAnimation(
            [in] IContext* ctx,
            [in] Int32 enterResId,
            [in] Int32 exitResId,
            [in] IHandler* handler,
            [in] IActivityOptionsOnAnimationStartedListener* listener,
            [out] IActivityOptions** options);

        /**
         * Create an ActivityOptions specifying an animation where the new
         * activity is scaled from a small originating area of the screen to
         * its final full representation.
         *
         * <p>If the Intent this is being used with has not set its
         * android.content.Intent#setSourceBounds Intent.setSourceBounds,
         * those bounds will be filled in for you based on the initial
         * bounds passed in here.
         *
         * @sa android.content.Intent#setSourceBounds Intent.setSourceBounds
         *
         * @param source The View that the new activity is animating from.  This
         * defines the coordinate space for <var>startX</var> and <var>startY</var>.
         * @param startX The x starting location of the new activity, relative to <var>source</var>.
         * @param startY The y starting location of the activity, relative to <var>source</var>.
         * @param startWidth The initial width of the new activity.
         * @param startHeight The initial height of the new activity.
         * @return Returns a new ActivityOptions object that you can use to
         * supply these options as the options Bundle when starting an activity.
         */
        MakeScaleUpAnimation(
            [in] IView* source,
            [in] Int32 startX,
            [in] Int32 startY,
            [in] Int32 startWidth,
            [in] Int32 startHeight,
            [out] IActivityOptions** options);

        /**
         * Create an ActivityOptions specifying an animation where a thumbnail
         * is scaled from a given position to the new activity window that is
         * being started.
         *
         * <p>If the Intent this is being used with has not set its
         * android.content.Intent#setSourceBounds Intent.setSourceBounds,
         * those bounds will be filled in for you based on the initial
         * thumbnail location and size provided here.
         *
         * @sa android.content.Intent#setSourceBounds Intent.setSourceBounds
         *
         * @param source The View that this thumbnail is animating from.  This
         * defines the coordinate space for <var>startX</var> and <var>startY</var>.
         * @param thumbnail The bitmap that will be shown as the initial thumbnail
         * of the animation.
         * @param startX The x starting location of the bitmap, relative to <var>source</var>.
         * @param startY The y starting location of the bitmap, relative to <var>source</var>.
         * @return Returns a new ActivityOptions object that you can use to
         * supply these options as the options Bundle when starting an activity.
         */
        MakeThumbnailScaleUpAnimation(
            [in] IView* source,
            [in] IBitmap* thumbnail,
            [in] Int32 startX,
            [in] Int32 startY,
            [out] IActivityOptions** options);

        /**
         * Create an ActivityOptions specifying an animation where a thumbnail
         * is scaled from a given position to the new activity window that is
         * being started.
         *
         * @param source The View that this thumbnail is animating from.  This
         * defines the coordinate space for <var>startX</var> and <var>startY</var>.
         * @param thumbnail The bitmap that will be shown as the initial thumbnail
         * of the animation.
         * @param startX The x starting location of the bitmap, relative to <var>source</var>.
         * @param startY The y starting location of the bitmap, relative to <var>source</var>.
         * @param listener Optional OnAnimationStartedListener to find out when the
         * requested animation has started running.  If for some reason the animation
         * is not executed, the callback will happen immediately.
         * @return Returns a new ActivityOptions object that you can use to
         * supply these options as the options Bundle when starting an activity.
         * @hide
         */
        MakeThumbnailScaleUpAnimation(
            [in] IView* source,
            [in] IBitmap* thumbnail,
            [in] Int32 startX,
            [in] Int32 startY,
            [in] IActivityOptionsOnAnimationStartedListener* listener,
            [out] IActivityOptions** options);

        /**
         * Create an ActivityOptions specifying an animation where an activity window
         * is scaled from a given position to a thumbnail at a specified location.
         *
         * @param source The View that this thumbnail is animating to.  This
         * defines the coordinate space for <var>startX</var> and <var>startY</var>.
         * @param thumbnail The bitmap that will be shown as the final thumbnail
         * of the animation.
         * @param startX The x end location of the bitmap, relative to <var>source</var>.
         * @param startY The y end location of the bitmap, relative to <var>source</var>.
         * @param listener Optional OnAnimationStartedListener to find out when the
         * requested animation has started running.  If for some reason the animation
         * is not executed, the callback will happen immediately.
         * @return Returns a new ActivityOptions object that you can use to
         * supply these options as the options Bundle when starting an activity.
         * @hide
         */
        MakeThumbnailScaleDownAnimation(
            [in] IView* source,
            [in] IBitmap* thumbnail,
            [in] Int32 startX,
            [in] Int32 startY,
            [in] IActivityOptionsOnAnimationStartedListener* listener,
            [out] IActivityOptions** options);

        /**
         * Create an ActivityOptions specifying an animation where the new activity
         * window and a thumbnail is aspect-scaled to a new location.
         *
         * @param source The View that this thumbnail is animating from.  This
         * defines the coordinate space for <var>startX</var> and <var>startY</var>.
         * @param thumbnail The bitmap that will be shown as the initial thumbnail
         * of the animation.
         * @param startX The x starting location of the bitmap, relative to <var>source</var>.
         * @param startY The y starting location of the bitmap, relative to <var>source</var>.
         * @param listener Optional OnAnimationStartedListener to find out when the
         * requested animation has started running.  If for some reason the animation
         * is not executed, the callback will happen immediately.
         * @return Returns a new ActivityOptions object that you can use to
         * supply these options as the options Bundle when starting an activity.
         * @hide
         */
        MakeThumbnailAspectScaleUpAnimation(
            [in] IView* source,
            [in] IBitmap* thumbnail,
            [in] Int32 startX,
            [in] Int32 startY,
            [in] Int32 targetWidth,
            [in] Int32 targetHeight,
            [in] IActivityOptionsOnAnimationStartedListener* listener,
            [out] IActivityOptions** options);

        /**
         * Create an ActivityOptions specifying an animation where the new activity
         * window and a thumbnail is aspect-scaled to a new location.
         *
         * @param source The View that this thumbnail is animating to.  This
         * defines the coordinate space for <var>startX</var> and <var>startY</var>.
         * @param thumbnail The bitmap that will be shown as the final thumbnail
         * of the animation.
         * @param startX The x end location of the bitmap, relative to <var>source</var>.
         * @param startY The y end location of the bitmap, relative to <var>source</var>.
         * @param listener Optional OnAnimationStartedListener to find out when the
         * requested animation has started running.  If for some reason the animation
         * is not executed, the callback will happen immediately.
         * @return Returns a new ActivityOptions object that you can use to
         * supply these options as the options Bundle when starting an activity.
         * @hide
         */
        MakeThumbnailAspectScaleDownAnimation(
            [in] IView* source,
            [in] IBitmap* thumbnail,
            [in] Int32 startX,
            [in] Int32 startY,
            [in] Int32 targetWidth,
            [in] Int32 targetHeight,
            [in] IActivityOptionsOnAnimationStartedListener* listener,
            [out] IActivityOptions** options);

        /**
         * Create an ActivityOptions to transition between Activities using cross-Activity scene
         * animations. This method carries the position of one shared element to the started Activity.
         * The position of <code>sharedElement</code> will be used as the epicenter for the
         * exit Transition. The position of the shared element in the launched Activity will be the
         * epicenter of its entering Transition.
         *
         * <p>This requires {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS} to be
         * enabled on the calling Activity to cause an exit transition. The same must be in
         * the called Activity to get an entering transition.</p>
         * @param activity The Activity whose window contains the shared elements.
         * @param sharedElement The View to transition to the started Activity.
         * @param sharedElementName The shared element name as used in the target Activity. This
         *                          must not be null.
         * @return Returns a new ActivityOptions object that you can use to
         *         supply these options as the options Bundle when starting an activity.
         * @see android.transition.Transition#setEpicenterCallback(
         *          android.transition.Transition.EpicenterCallback)
         */
        MakeSceneTransitionAnimation(
            [in] IActivity* activity,
            [in] IView* sharedElement,
            [in] String sharedElementName,
            [out] IActivityOptions** options);

        /**
         * Create an ActivityOptions to transition between Activities using cross-Activity scene
         * animations. This method carries the position of multiple shared elements to the started
         * Activity. The position of the first element in sharedElements
         * will be used as the epicenter for the exit Transition. The position of the associated
         * shared element in the launched Activity will be the epicenter of its entering Transition.
         *
         * <p>This requires {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS} to be
         * enabled on the calling Activity to cause an exit transition. The same must be in
         * the called Activity to get an entering transition.</p>
         * @param activity The Activity whose window contains the shared elements.
         * @param sharedElements The names of the shared elements to transfer to the called
         *                       Activity and their associated Views. The Views must each have
         *                       a unique shared element name.
         * @return Returns a new ActivityOptions object that you can use to
         *         supply these options as the options Bundle when starting an activity.
         * @see android.transition.Transition#setEpicenterCallback(
         *          android.transition.Transition.EpicenterCallback)
         */
        MakeSceneTransitionAnimation(
            [in] IActivity* activity,
            [in] ArrayOf<IPair*>* sharedElements,
            [out] IActivityOptions** options);

        /**
         * If set along with Intent.FLAG_ACTIVITY_NEW_DOCUMENT then the task being launched will not be
         * presented to the user but will instead be only available through the recents task list.
         * In addition, the new task wil be affiliated with the launching activity's task.
         * Affiliated tasks are grouped together in the recents task list.
         *
         * <p>This behavior is not supported for activities with {@link
         * android.R.styleable#AndroidManifestActivity_launchMode launchMode} values of
         * <code>singleInstance</code> or <code>singleTask</code>.
         */
        MakeTaskLaunchBehind(
            [in] IActivityOptions** options);

        /** @hide */
        Abort(
            [in] IBundle* options);
    }

    /**
     * Callback for use with ActivityOptions#makeThumbnailScaleUpAnimation
     * to find out when the given animation has started running.
     *
     * @sa humbnailScaleUpAnimation
     * @hide
     */
    interface IActivityOptionsOnAnimationStartedListener {
        OnAnimationStarted();
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
