
module
{

    interface Elastos.Droid.Telecomm.Telecom.IVideoProfile;
    interface Elastos.Droid.Telecomm.Telecom.ICameraCapabilities;
    interface Elastos.Droid.View.ISurface;

    namespace Elastos {
    namespace Droid {
    namespace Telecomm {
    namespace Telecom {

    /**
     *  Encapsulates all audio states during a call.
     *  @hide
     *
     * @Involve
     * interface Elastos.Droid.Content.IContext
     * interface Elastos.Droid.Content.IContextWrapper
     * interface IComponentCallbacks
     * interface IComponentCallbacks2
     * interface IService
     */
    interface IInCallService {
        /**
         * The {@link Intent} that must be declared as handled by the service.
         *
         * @SdkConstant(SdkConstant.SdkConstantType.SERVICE_ACTION)
         */
        const String SERVICE_INTERFACE = "android.telecom.InCallService";

        GetPhone(
            [out] IPhone** res);

        OnPhoneCreated(
            [in] IPhone* phone);

        OnPhoneDestroyed(
            [in] IPhone* phone);
    }

    /**
     * Listener class which invokes callbacks after video call actions occur.
     * @hide
     */
    interface IVideoCallListener {
        /**
         * Called when a session modification request is received from the remote device.
         * The remote request is sent via
         * {@link Connection.VideoProvider#onSendSessionModifyRequest}. The InCall UI
         * is responsible for potentially prompting the user whether they wish to accept the new
         * call profile (e.g. prompt user if they wish to accept an upgrade from an audio to a
         * video call) and should call
         * {@link Connection.VideoProvider#onSendSessionModifyResponse} to indicate
         * the video settings the user has agreed to.
         *
         * @param videoProfile The requested video call profile.
         */
        OnSessionModifyRequestReceived(
            [in] IVideoProfile* videoProfile);

        /**
         * Called when a response to a session modification request is received from the remote
         * device. The remote InCall UI sends the response using
         * {@link Connection.VideoProvider#onSendSessionModifyResponse}.
         *
         * @param status Status of the session modify request.  Valid values are
         *               {@link Connection.VideoProvider#SESSION_MODIFY_REQUEST_SUCCESS},
         *               {@link Connection.VideoProvider#SESSION_MODIFY_REQUEST_FAIL},
         *               {@link Connection.VideoProvider#SESSION_MODIFY_REQUEST_INVALID}
         * @param requestedProfile The original request which was sent to the remote device.
         * @param responseProfile The actual profile changes made by the remote device.
         */
        OnSessionModifyResponseReceived(
            [in] Int32 status,
            [in] IVideoProfile* requestedProfile,
            [in] IVideoProfile* responseProfile);

        /**
         * Handles events related to the current session which the client may wish to handle.
         * These are separate from requested changes to the session due to the underlying
         * protocol or connection.
         *
         * Valid values are:
         * {@link Connection.VideoProvider#SESSION_EVENT_RX_PAUSE},
         * {@link Connection.VideoProvider#SESSION_EVENT_RX_RESUME},
         * {@link Connection.VideoProvider#SESSION_EVENT_TX_START},
         * {@link Connection.VideoProvider#SESSION_EVENT_TX_STOP},
         * {@link Connection.VideoProvider#SESSION_EVENT_CAMERA_FAILURE},
         * {@link Connection.VideoProvider#SESSION_EVENT_CAMERA_READY}
         *
         * @param event The event.
         */
        OnCallSessionEvent(
            [in] Int32 event);

        /**
         * Handles a change to the video dimensions from the remote caller (peer). This could
         * happen if, for example, the peer changes orientation of their device.
         *
         * @param width  The updated peer video width.
         * @param height The updated peer video height.
         */
        OnPeerDimensionsChanged(
            [in] Int32 width,
            [in] Int32 height);

        /**
         * Handles an update to the total data used for the current session.
         *
         * @param dataUsage The updated data usage.
         */
        OnCallDataUsageChanged(
            [in] Int32 dataUsage);

        /**
         * Handles a change in camera capabilities.
         *
         * @param cameraCapabilities The changed camera capabilities.
         */
        OnCameraCapabilitiesChanged(
            [in] ICameraCapabilities* cameraCapabilities);
    }

    /**
     * Class to invoke functionality related to video calls.
     * @hide
     */
    interface IInCallServiceVideoCall {
        /**
         * Sets a listener to invoke callback methods in the InCallUI after performing video
         * telephony actions.
         *
         * @param videoCallListener The call video client.
         */
        SetVideoCallListener(
            [in] IVideoCallListener* videoCallListener);

        /**
         * Sets the camera to be used for video recording in a video call.
         *
         * @param cameraId The id of the camera.
         */
        SetCamera(
            [in] String cameraId);

        /**
         * Sets the surface to be used for displaying a preview of what the user's camera is
         * currently capturing.  When video transmission is enabled, this is the video signal which
         * is sent to the remote device.
         *
         * @param surface The surface.
         */
        SetPreviewSurface(
            [in] ISurface* surface);

        /**
         * Sets the surface to be used for displaying the video received from the remote device.
         *
         * @param surface The surface.
         */
        SetDisplaySurface(
            [in] ISurface* surface);

        /**
         * Sets the device orientation, in degrees.  Assumes that a standard portrait orientation of
         * the device is 0 degrees.
         *
         * @param rotation The device orientation, in degrees.
         */
        SetDeviceOrientation(
            [in] Int32 rotation);

        /**
         * Sets camera zoom ratio.
         *
         * @param value The camera zoom ratio.
         */
        SetZoom(
            [in] Float value);

        /**
         * Issues a request to modify the properties of the current session.  The request is sent to
         * the remote device where it it handled by
         * {@link VideoCall.Listener#onSessionModifyRequestReceived}.
         * Some examples of session modification requests: upgrade call from audio to video,
         * downgrade call from video to audio, pause video.
         *
         * @param requestProfile The requested call video properties.
         */
        SendSessionModifyRequest(
            [in] IVideoProfile* requestProfile);

        /**
         * Provides a response to a request to change the current call session video
         * properties.
         * This is in response to a request the InCall UI has received via
         * {@link VideoCall.Listener#onSessionModifyRequestReceived}.
         * The response is handled on the remove device by
         * {@link VideoCall.Listener#onSessionModifyResponseReceived}.
         *
         * @param responseProfile The response call video properties.
         */
        SendSessionModifyResponse(
            [in] IVideoProfile* responseProfile);

        /**
         * Issues a request to the video provider to retrieve the camera capabilities.
         * Camera capabilities are reported back to the caller via
         * {@link VideoCall.Listener#onCameraCapabilitiesChanged(CameraCapabilities)}.
         */
        RequestCameraCapabilities();

        /**
         * Issues a request to the video telephony framework to retrieve the cumulative data usage for
         * the current call.  Data usage is reported back to the caller via
         * {@link VideoCall.Listener#onCallDataUsageChanged}.
         */
        RequestCallDataUsage();

        /**
         * Provides the video telephony framework with the URI of an image to be displayed to remote
         * devices when the video signal is paused.
         *
         * @param uri URI of image to display.
         */
        SetPauseImage(
            [in] String uri);
    }

    } // namespace Telecom
    } // namespace Telecomm
    } // namespace Droid
    } // namespace Elastos
}
