module
{
    namespace Elastos {
    namespace Droid {
    namespace Wifi {
    namespace P2p {

    enum P2pStatus {
        /* Success. */
        P2pStatus_SUCCESS,

        /* The target device is currently unavailable. */
        P2pStatus_INFORMATION_IS_CURRENTLY_UNAVAILABLE,

        /* Protocol error. */
        P2pStatus_INCOMPATIBLE_PARAMETERS,

        /* The target device reached the limit of the number of the connectable device.
         * For example, device limit or group limit is set. */
        P2pStatus_LIMIT_REACHED,

        /* Protocol error. */
        P2pStatus_INVALID_PARAMETER,

        /* Unable to accommodate request. */
        P2pStatus_UNABLE_TO_ACCOMMODATE_REQUEST,

        /* Previous protocol error, or disruptive behavior. */
        P2pStatus_PREVIOUS_PROTOCOL_ERROR,

        /* There is no common channels the both devices can use. */
        P2pStatus_NO_COMMON_CHANNEL,

        /* Unknown p2p group. For example, Device A tries to invoke the previous persistent group,
         *  but device B has removed the specified credential already. */
        P2pStatus_UNKNOWN_P2P_GROUP,

        /* Both p2p devices indicated an intent of 15 in group owner negotiation. */
        P2pStatus_BOTH_GO_INTENT_15,

        /* Incompatible provisioning method. */
        P2pStatus_INCOMPATIBLE_PROVISIONING_METHOD,

        /* Rejected by user */
        P2pStatus_REJECTED_BY_USER,

        /* Unknown error */
        P2pStatus_UNKNOWN
    }

    /**
     * A class representing a Wi-Fi P2p configuration for setting up a connection
     *
     * {@see WifiP2pManager}
     */
    /**
     * @Involve
     * interface IIWifiP2pManager
     */
    interface IWifiP2pService {

        /* Delayed message to timeout group creation */
        const Int32 GROUP_CREATING_TIMED_OUT        = 0x00023001;   //IProtocol::BASE_WIFI_P2P_SERVICE + 1;
        /* Delayed message to timeout p2p disable */
        const Int32 DISABLE_P2P_TIMED_OUT           = 0x00023006;   //IProtocol::BASE_WIFI_P2P_SERVICE + 6;


        /* Commands to the WifiStateMachine */
        const Int32 P2P_CONNECTION_CHANGED          = 0x0002300b;   //IProtocol::BASE_WIFI_P2P_SERVICE + 11;

        /* These commands are used to tempoarily disconnect wifi when we detect
         * a frequency conflict which would make it impossible to have with p2p
         * and wifi active at the same time.
         *
         * If the user chooses to disable wifi tempoarily, we keep wifi disconnected
         * until the p2p connection is done and terminated at which point we will
         * bring back wifi up
         *
         * DISCONNECT_WIFI_REQUEST
         *      msg.arg1 = 1 enables temporary disconnect and 0 disables it.
         */
        const Int32 DISCONNECT_WIFI_REQUEST         = 0x0002300c;   //IProtocol::BASE_WIFI_P2P_SERVICE + 12;
        const Int32 DISCONNECT_WIFI_RESPONSE        = 0x0002300d;   //IProtocol::BASE_WIFI_P2P_SERVICE + 13;

        ConnectivityServiceReady();
    }

    } // namespace p2p
    } // namespace wifi
    } // namespace Droid
    } // namespace Elastos
}

