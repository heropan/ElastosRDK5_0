
module
{
    enum Elastos.Droid.Graphics.PorterDuffMode;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Graphics.IMatrix;
    interface Elastos.Droid.Graphics.IColorFilter;
    interface Elastos.Droid.Graphics.Drawable.IDrawable;
    interface Elastos.Droid.Content.Res.IColorStateList;
    interface Elastos.Droid.Net.IUri;

    namespace Elastos {
    namespace Droid {
    namespace Widget {

    /**
     * Options for scaling the bounds of an image to the bounds of this view.
     */
    enum ImageViewScaleType {
        ImageViewScaleType_NULL = -1,

        /**
         * Scale using the image matrix when drawing. The image matrix can be set using
         * {@link ImageView#setImageMatrix(Matrix)}. From XML, use this syntax:
         * <code>android:scaleType="matrix"</code>.
         */
        ImageViewScaleType_MATRIX,
        /**
         * Scale the image using {@link Matrix.ScaleToFit#FILL}.
         * From XML, use this syntax: <code>android:scaleType="fitXY"</code>.
         */
        ImageViewScaleType_FIT_XY,
        /**
         * Scale the image using {@link Matrix.ScaleToFit#START}.
         * From XML, use this syntax: <code>android:scaleType="fitStart"</code>.
         */
        ImageViewScaleType_FIT_START,
        /**
         * Scale the image using {@link Matrix.ScaleToFit#CENTER}.
         * From XML, use this syntax:
         * <code>android:scaleType="fitCenter"</code>.
         */
        ImageViewScaleType_FIT_CENTER,
        /**
         * Scale the image using {@link Matrix.ScaleToFit#END}.
         * From XML, use this syntax: <code>android:scaleType="fitEnd"</code>.
         */
        ImageViewScaleType_FIT_END,
        /**
         * Center the image in the view, but perform no scaling.
         * From XML, use this syntax: <code>android:scaleType="center"</code>.
         */
        ImageViewScaleType_CENTER,
        /**
         * Scale the image uniformly (maintain the image's aspect ratio) so
         * that both dimensions (width and height) of the image will be equal
         * to or larger than the corresponding dimension of the view
         * (minus padding). The image is then centered in the view.
         * From XML, use this syntax: <code>android:scaleType="centerCrop"</code>.
         */
        ImageViewScaleType_CENTER_CROP,
        /**
         * Scale the image uniformly (maintain the image's aspect ratio) so
         * that both dimensions (width and height) of the image will be equal
         * to or less than the corresponding dimension of the view
         * (minus padding). The image is then centered in the view.
         * From XML, use this syntax: <code>android:scaleType="centerInside"</code>.
         */
        ImageViewScaleType_CENTER_INSIDE
    }

    /**
     * Displays an arbitrary image, such as an icon.  The ImageView class
     * can load images from various sources (such as resources or content
     * providers), takes care of computing its measurement from the image so that
     * it can be used in any layout manager, and provides various display options
     * such as scaling and tinting.
     *
     * @attr ref android.R.styleable#ImageView_adjustViewBounds
     * @attr ref android.R.styleable#ImageView_src
     * @attr ref android.R.styleable#ImageView_maxWidth
     * @attr ref android.R.styleable#ImageView_maxHeight
     * @attr ref android.R.styleable#ImageView_tint
     * @attr ref android.R.styleable#ImageView_scaleType
     * @attr ref android.R.styleable#ImageView_cropToPadding
     */
    /**
     * @Involve
     * extends Elastos.Droid.View.IView
     *
     * interface Elastos.Droid.View.IKeyEventCallback
     * interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource
     * interface Elastos.Droid.Graphics.Drawable.IDrawableCallback
     */
    [deprecated]
    interface IImageView {
        /**
         * True when ImageView is adjusting its bounds
         * to preserve the aspect ratio of its drawable
         *
         * @return whether to adjust the bounds of this view
         * to presrve the original aspect ratio of the drawable
         *
         * @see #setAdjustViewBounds(boolean)
         *
         * @attr ref android.R.styleable#ImageView_adjustViewBounds
         */
        GetAdjustViewBounds(
            [out] Boolean* res);

        /**
         * Set this to true if you want the ImageView to adjust its bounds
         * to preserve the aspect ratio of its drawable.
         * @param adjustViewBounds Whether to adjust the bounds of this view
         * to presrve the original aspect ratio of the drawable
         *
         * @attr ref android.R.styleable#ImageView_adjustViewBounds
         */
        SetAdjustViewBounds(
            [in] Boolean adjustViewBounds);

        /**
         * The maximum width of this view.
         *
         * @return The maximum width of this view
         *
         * @see #setMaxWidth(int)
         *
         * @attr ref android.R.styleable#ImageView_maxWidth
         */
        GetMaxWidth(
            [out] Int32* width);

        /**
         * An optional argument to supply a maximum width for this view. Only valid if
         * {@link #setAdjustViewBounds} has been set to true. To set an image to be a maximum of 100 x
         * 100 while preserving the original aspect ratio, do the following: 1) set adjustViewBounds to
         * true 2) set maxWidth and maxHeight to 100 3) set the height and width layout params to
         * WRAP_CONTENT.
         *
         * <p>
         * Note that this view could be still smaller than 100 x 100 using this approach if the original
         * image is small. To set an image to a fixed size, specify that size in the layout params and
         * then use {@link #setScaleType} to determine how to fit the image within the bounds.
         * </p>
         *
         * @param maxWidth maximum width for this view
         *
         * @attr ref android.R.styleable#ImageView_maxWidth
         */
        SetMaxWidth(
            [in] Int32 maxWidth);

        /**
         * The maximum height of this view.
         *
         * @return The maximum height of this view
         *
         * @see #setMaxHeight(int)
         *
         * @attr ref android.R.styleable#ImageView_maxHeight
         */
        GetMaxHeight(
            [out] Int32* height);

        /**
         * An optional argument to supply a maximum height for this view. Only valid if
         * {@link #setAdjustViewBounds} has been set to true. To set an image to be a maximum of 100 x
         * 100 while preserving the original aspect ratio, do the following: 1) set adjustViewBounds to
         * true 2) set maxWidth and maxHeight to 100 3) set the height and width layout params to
         * WRAP_CONTENT.
         *
         * <p>
         * Note that this view could be still smaller than 100 x 100 using this approach if the original
         * image is small. To set an image to a fixed size, specify that size in the layout params and
         * then use {@link #setScaleType} to determine how to fit the image within the bounds.
         * </p>
         *
         * @param maxHeight maximum height for this view
         *
         * @attr ref android.R.styleable#ImageView_maxHeight
         */
        SetMaxHeight(
            [in] Int32 maxHeight);

        /** Return the view's drawable, or null if no drawable has been
         * assigned.
         */
        GetDrawable(
            [out] IDrawable** drawable);

        /**
         * Sets a drawable as the content of this ImageView.
         *
         * <p class="note">This does Bitmap reading and decoding on the UI
         * thread, which can cause a latency hiccup.  If that's a concern,
         * consider using {@link #setImageDrawable} or
         * {@link #setImageBitmap} and
         * {@link android.graphics.BitmapFactory} instead.</p>
         *
         * @param resId the resource identifier of the the drawable
         *
         * @attr ref android.R.styleable#ImageView_src
         */
        SetImageResource(
            [in] Int32 resId);

        /**
         * Sets the content of this ImageView to the specified Uri.
         *
         * <p class="note">This does Bitmap reading and decoding on the UI
         * thread, which can cause a latency hiccup.  If that's a concern,
         * consider using {@link #setImageDrawable} or
         * {@link #setImageBitmap} and
         * {@link android.graphics.BitmapFactory} instead.</p>
         *
         * @param uri The Uri of an image
         */
        SetImageURI(
            [in] IUri* uri);

        /**
         * Sets a drawable as the content of this ImageView.
         *
         * @param drawable The drawable to set
         */
        SetImageDrawable(
            [in] IDrawable* drawable);

        /**
         * Applies a tint to the image drawable. Does not modify the current tint
         * mode, which is {@link PorterDuff.Mode#SRC_IN} by default.
         * <p>
         * Subsequent calls to {@link #setImageDrawable(Drawable)} will automatically
         * mutate the drawable and apply the specified tint and tint mode using
         * {@link Drawable#setTintList(ColorStateList)}.
         *
         * @param tint the tint to apply, may be {@code null} to clear tint
         *
         * @attr ref android.R.styleable#ImageView_tint
         * @see #getImageTintList()
         * @see Drawable#setTintList(ColorStateList)
         */
        SetImageTintList(
            [in] IColorStateList* tint);

        /**
         * @return the tint applied to the image drawable
         * @attr ref android.R.styleable#ImageView_tint
         * @see #setImageTintList(ColorStateList)
         * @Nullable
         */
        GetImageTintList(
            [out] IColorStateList** tint);

        /**
         * Specifies the blending mode used to apply the tint specified by
         * {@link #setImageTintList(ColorStateList)}} to the image drawable. The default
         * mode is {@link PorterDuff.Mode#SRC_IN}.
         *
         * @param tintMode the blending mode used to apply the tint, may be
         *                 {@code null} to clear tint
         * @attr ref android.R.styleable#ImageView_tintMode
         * @see #getImageTintMode()
         * @see Drawable#setTintMode(PorterDuff.Mode)
         */
        SetImageTintMode(
            [in] PorterDuffMode tintMode);

        /**
         * @return the blending mode used to apply the tint to the image drawable
         * @attr ref android.R.styleable#ImageView_tintMode
         * @see #setImageTintMode(PorterDuff.Mode)
         * @Nullable
         */
        GetImageTintMode(
            [out] PorterDuffMode* tintMode);

        /**
         * Sets a Bitmap as the content of this ImageView.
         *
         * @param bm The bitmap to set
         */
        SetImageBitmap(
            [in] IBitmap* bm);

        SetImageState(
            [in] ArrayOf<Int32>* state,
            [in] Boolean mg);

        /**
         * Sets the image level, when it is constructed from a
         * {@link android.graphics.drawable.LevelListDrawable}.
         *
         * @param level The new level for the image.
         */
        SetImageLevel(
            [in] Int32 level);

        SetAlpha(
            [in] Int32 alpha);

        /**
         * Controls how the image should be resized or moved to match the size
         * of this ImageView.
         *
         * @param scaleType The desired scaling mode.
         *
         * @attr ref android.R.styleable#ImageView_scaleType
         */
        SetScaleType(
            [in] ImageViewScaleType scaleType);

        /**
         * Return the current scale type in use by this ImageView.
         *
         * @see ImageView.ImageViewScaleType
         *
         * @attr ref android.R.styleable#ImageView_scaleType
         */
        GetScaleType(
            [out] ImageViewScaleType* scaleType);

        /** Return the view's optional matrix. This is applied to the
         *  view's drawable when it is drawn. If there is not matrix,
         *  this method will return null.
         *  Do not change this matrix in place. If you want a different matrix
         *  applied to the drawable, be sure to call setImageMatrix().
         */
        GetImageMatrix(
            [out] IMatrix** martix);

        SetImageMatrix(
            [in] IMatrix* matrix);

        /**
         * Return whether this ImageView crops to padding.
         *
         * @return whether this ImageView crops to padding
         *
         * @see #setCropToPadding(boolean)
         *
         * @attr ref android.R.styleable#ImageView_cropToPadding
         */
        GetCropToPadding(
            [out] Boolean* padding);

        /**
         * Sets whether this ImageView will crop to padding.
         *
         * @param cropToPadding whether this ImageView will crop to padding
         *
         * @see #getCropToPadding()
         *
         * @attr ref android.R.styleable#ImageView_cropToPadding
         */
        SetCropToPadding(
            [in] Boolean cropToPadding);

        /**
         * <p>Set the offset of the widget's text baseline from the widget's top
         * boundary.  This value is overridden by the {@link #setBaselineAlignBottom(boolean)}
         * property.</p>
         *
         * @param baseline The baseline to use, or -1 if none is to be provided.
         *
         * @see #setBaseline(int)
         * @attr ref android.R.styleable#ImageView_baseline
         */
        SetBaseline(
            [in] Int32 baseline);

        /**
         * Set whether to set the baseline of this view to the bottom of the view.
         * Setting this value overrides any calls to setBaseline.
         *
         * @param aligned If true, the image view will be baseline aligned with
         *      based on its bottom edge.
         *
         * @attr ref android.R.styleable#ImageView_baselineAlignBottom
         */
        SetBaselineAlignBottom(
            [in] Boolean aligned);

        /**
         * Return whether this view's baseline will be considered the bottom of the view.
         *
         * @see #setBaselineAlignBottom(boolean)
         */
        GetBaselineAlignBottom(
            [out] Boolean* aligned);

        /**
         * Set a tinting option for the image. Assumes
         * {@link PorterDuff.Mode#SRC_ATOP} blending mode.
         *
         * @param color Color tint to apply.
         * @attr ref android.R.styleable#ImageView_tint
         */
        SetColorFilter(
            [in] Int32 color);

        /**
         * Set a tinting option for the image.
         *
         * @param color Color tint to apply.
         * @param mode How to apply the color.  The standard mode is
         * {@link PorterDuff.Mode#SRC_ATOP}
         *
         * @attr ref android.R.styleable#ImageView_tint
         */
        SetColorFilter(
            [in] Int32 color,
            [in] PorterDuffMode mode);

        ClearColorFilter();

        /**
         * Returns the active color filter for this ImageView.
         *
         * @return the active color filter for this ImageView
         *
         * @see #setColorFilter(android.graphics.ColorFilter)
         */
        GetColorFilter(
            [out] IColorFilter** filter);

        /**
         * Apply an arbitrary colorfilter to the image.
         *
         * @param cf the colorfilter to apply (may be null)
         *
         * @see #getColorFilter()
         */
        SetColorFilter(
            [in] IColorFilter* cf);

        /**
         * Returns the alpha that will be applied to the drawable of this ImageView.
         *
         * @return the alpha that will be applied to the drawable of this ImageView
         *
         * @see #setImageAlpha(int)
         */
        GetImageAlpha(
            [out] Int32* alpha);

        /**
         * Sets the alpha value that should be applied to the image.
         *
         * @param alpha the alpha value that should be applied to the image
         *
         * @see #getImageAlpha()
         */
        SetImageAlpha(
            [in] Int32 alpha);
    }

    } // namespace Widget
    } // namespace Droid
    } // namespace Elastos
}
