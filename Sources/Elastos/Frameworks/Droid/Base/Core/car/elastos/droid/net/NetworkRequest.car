
module
{
    interface Elastos.Droid.Os.IParcel;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    /**
     * Defines a request for a network, made through {@link NetworkRequest.Builder} and used
     * to request a network via {@link ConnectivityManager#requestNetwork} or listen for changes
     * via {@link ConnectivityManager#registerNetworkCallback}.
     */
    /**
     * @Involved
     * interface IParcelable;
     */
    interface INetworkRequest {

       /**
         * The {@link NetworkCapabilities} that define this request.
         * @hide
         */
        GetNetworkCapabilities(
            [out] INetworkCapabilities** result);

        /**
         * Identifies the request.  NetworkRequests should only be constructed by
         * the Framework and given out to applications as tokens to be used to identify
         * the request.
         * @hide
         */
        GetRequestId(
            [out] Int32* result);

        /**
         * Set for legacy requests and the default.  Set to TYPE_NONE for none.
         * Causes CONNECTIVITY_ACTION broadcasts to be sent.
         * @hide
         */
        GetLegacyType(
            [out] Int32* result);

    }

    /**
     * Builder used to create {@link NetworkRequest} objects.  Specify the Network features
     * needed in terms of {@link NetworkCapabilities} features
     */
    /**
     * @Involved
     * none super interface
     */
    interface INetworkRequestBuilder {
        /**
         * Build {@link NetworkRequest} give the current set of capabilities.
         */
        Build(
            [out] INetworkRequest** result);

        /**
         * Add the given capability requirement to this builder.  These represent
         * the requested network's required capabilities.  Note that when searching
         * for a network to satisfy a request, all capabilities requested must be
         * satisfied.  See {@link NetworkCapabilities} for {@code NET_CAPABILITIY_*}
         * definitions.
         *
         * @param capability The {@code NetworkCapabilities.NET_CAPABILITY_*} to add.
         * @return The builder to facilitate chaining
         *         {@code builder.addCapability(...).addCapability();}.
         */
        AddCapability(
            [in] Int32 capability,
            [out] INetworkRequestBuilder** result);

        /**
         * Removes (if found) the given capability from this builder instance.
         *
         * @param capability The {@code NetworkCapabilities.NET_CAPABILITY_*} to remove.
         * @return The builder to facilitate chaining.
         */
        RemoveCapability(
            [in] Int32 capability,
            [out] INetworkRequestBuilder** result);

        /**
         * Adds the given transport requirement to this builder.  These represent
         * the set of allowed transports for the request.  Only networks using one
         * of these transports will satisfy the request.  If no particular transports
         * are required, none should be specified here.  See {@link NetworkCapabilities}
         * for {@code TRANSPORT_*} definitions.
         *
         * @param transportType The {@code NetworkCapabilities.TRANSPORT_*} to add.
         * @return The builder to facilitate chaining.
         */
        AddTransportType(
            [in] Int32 transportType,
            [out] INetworkRequestBuilder** result);

        /**
         * Removes (if found) the given transport from this builder instance.
         *
         * @param transportType The {@code NetworkCapabilities.TRANSPORT_*} to remove.
         * @return The builder to facilitate chaining.
         */
        RemoveTransportType(
            [in] Int32 transportType,
            [out] INetworkRequestBuilder** result);

        /**
         * @hide
         */
        SetLinkUpstreamBandwidthKbps(
            [in] Int32 upKbps,
            [out] INetworkRequestBuilder** result);

        /**
         * @hide
         */
        SetLinkDownstreamBandwidthKbps(
            [in] Int32 downKbps,
            [out] INetworkRequestBuilder** result);

        /**
         * Sets the optional bearer specific network specifier.
         * This has no meaning if a single transport is also not specified, so calling
         * this without a single transport set will generate an exception, as will
         * subsequently adding or removing transports after this is set.
         * </p>
         * The interpretation of this {@code String} is bearer specific and bearers that use
         * it should document their particulars.  For example, Bluetooth may use some sort of
         * device id while WiFi could used ssid and/or bssid.  Cellular may use carrier spn.
         *
         * @param networkSpecifier An {@code String} of opaque format used to specify the bearer
         *                         specific network specifier where the bearer has a choice of
         *                         networks.
         */
        SetNetworkSpecifier(
            [in] String networkSpecifier,
            [out] INetworkRequestBuilder** result);

    }

    } // namespace Net
    } // namespace Droid
    } // namespace Elastos
}
