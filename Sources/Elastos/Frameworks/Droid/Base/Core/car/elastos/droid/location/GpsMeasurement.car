// GpsMeasurement.car
module
{
    namespace Elastos {
    namespace Droid {
    namespace Location {

    /**
     * A class representing a GPS satellite measurement, containing raw and computed information.
     *
     * @hide
     */
    /**
     * @Involve interface IParcelable
     */
    interface IGpsMeasurement {

        const Byte LOSS_OF_LOCK_UNKNOWN = 0;

        const Byte LOSS_OF_LOCK_OK = 1;

        const Byte LOSS_OF_LOCK_CYCLE_SLIP = 2;

        const Byte MULTIPATH_INDICATOR_UNKNOWN = 0;

        const Byte MULTIPATH_INDICATOR_DETECTED = 1;

        const Byte MULTIPATH_INDICATOR_NOT_USED = 2;

        const Int16 STATE_UNKNOWN = 0;

        const Int16 STATE_CODE_LOCK = 1;//(1<<0);

        const Int16 STATE_BIT_SYNC = 2;//(1<<1);

        const Int16 STATE_SUBFRAME_SYNC = 4;//(1<<2);

        const Int16 STATE_TOW_DECODED = 8;//(1<<3);

        const Int16 ADR_STATE_UNKNOWN = 0;

        const Int16 ADR_STATE_VALID = 1;//(1<<0);

        const Int16 ADR_STATE_RESET = 2;//(1<<1);

        const Int16 ADR_STATE_CYCLE_SLIP = 4;//(1<<2);

        Set(
            [in] IGpsMeasurement* measurement);

        Reset();

        GetPrn(
            [out] Byte* result);

        SetPrn(
            [in] Byte value);

        GetTimeOffsetInNs(
            [out] Double* result);

        SetTimeOffsetInNs(
            [in] Double value);

        GetState(
            [out] Int16* result);

        SetState(
            [in] Int16 value);

        GetReceivedGpsTowInNs(
            [out] Int64* result);

        SetReceivedGpsTowInNs(
            [in] Int64 value);

        GetReceivedGpsTowUncertaintyInNs(
            [out] Int64* result);

        SetReceivedGpsTowUncertaintyInNs(
            [in] Int64 value);

        GetCn0InDbHz(
            [out] Double* result);

        SetCn0InDbHz(
            [in] Double value);

        GetPseudorangeRateInMetersPerSec(
            [out] Double* result);

        SetPseudorangeRateInMetersPerSec(
            [in] Double value);

        GetPseudorangeRateUncertaintyInMetersPerSec(
            [out] Double* result);

        SetPseudorangeRateUncertaintyInMetersPerSec(
            [in] Double value);

        GetAccumulatedDeltaRangeState(
            [out] Int16* result);

        SetAccumulatedDeltaRangeState(
            [in] Int16 value);

        GetAccumulatedDeltaRangeInMeters(
            [out] Double* result);

        SetAccumulatedDeltaRangeInMeters(
            [in] Double value);

        GetAccumulatedDeltaRangeUncertaintyInMeters(
            [out] Double* result);

        SetAccumulatedDeltaRangeUncertaintyInMeters(
            [in] Double value);

        HasPseudorangeInMeters(
            [out] Boolean* result);

        GetPseudorangeInMeters(
            [out] Double* result);

        SetPseudorangeInMeters(
            [in] Double value);

        ResetPseudorangeInMeters();

        HasPseudorangeUncertaintyInMeters(
            [out] Boolean* result);

        GetPseudorangeUncertaintyInMeters(
            [out] Double* result);

        SetPseudorangeUncertaintyInMeters(
            [in] Double value);

        ResetPseudorangeUncertaintyInMeters();

        HasCodePhaseInChips(
            [out] Boolean* result);

        GetCodePhaseInChips(
            [out] Double* result);

        SetCodePhaseInChips(
            [in] Double value);

        ResetCodePhaseInChips();

        HasCodePhaseUncertaintyInChips(
            [out] Boolean* result);

        GetCodePhaseUncertaintyInChips(
            [out] Double* result);

        SetCodePhaseUncertaintyInChips(
            [in] Double value);

        ResetCodePhaseUncertaintyInChips();

        HasCarrierFrequencyInHz(
            [out] Boolean* result);

        GetCarrierFrequencyInHz(
            [out] Float* result);

        SetCarrierFrequencyInHz(
            [in] Float carrierFrequencyInHz);

        ResetCarrierFrequencyInHz();

        HasCarrierCycles(
            [out] Boolean* result);

        GetCarrierCycles(
            [out] Int64* result);

        SetCarrierCycles(
            [in] Int64 value);

        ResetCarrierCycles();

        HasCarrierPhase(
            [out] Boolean* result);

        GetCarrierPhase(
            [out] Double* result);

        SetCarrierPhase(
            [in] Double value);

        ResetCarrierPhase();

        HasCarrierPhaseUncertainty(
            [out] Boolean* result);

        GetCarrierPhaseUncertainty(
            [out] Double* result);

        SetCarrierPhaseUncertainty(
            [in] Double value);

        ResetCarrierPhaseUncertainty();

        GetLossOfLock(
            [out] Byte* result);

        SetLossOfLock(
            [in] Byte value);

        HasBitNumber(
            [out] Boolean* result);

        GetBitNumber(
            [out] Int32* result);

        SetBitNumber(
            [in] Int32 bitNumber);

        ResetBitNumber();

        HasTimeFromLastBitInMs(
            [out] Boolean* result);

        GetTimeFromLastBitInMs(
            [out] Int16* result);

        SetTimeFromLastBitInMs(
            [in] Int16 value);

        ResetTimeFromLastBitInMs();

        HasDopplerShiftInHz(
            [out] Boolean* result);

        GetDopplerShiftInHz(
            [out] Double* result);

        SetDopplerShiftInHz(
            [in] Double value);

        ResetDopplerShiftInHz();

        HasDopplerShiftUncertaintyInHz(
            [out] Boolean* result);

        GetDopplerShiftUncertaintyInHz(
            [out] Double* result);

        SetDopplerShiftUncertaintyInHz(
            [in] Double value);

        ResetDopplerShiftUncertaintyInHz();

        GetMultipathIndicator(
            [out] Byte* result);

        SetMultipathIndicator(
            [in] Byte value);

        HasSnrInDb(
            [out] Boolean* result);

        GetSnrInDb(
            [out] Double* result);

        SetSnrInDb(
            [in] Double snrInDb);

        ResetSnrInDb();

        HasElevationInDeg(
            [out] Boolean* result);

        GetElevationInDeg(
            [out] Double* result);

        SetElevationInDeg(
            [in] Double elevationInDeg);

        ResetElevationInDeg();

        HasElevationUncertaintyInDeg(
            [out] Boolean* result);

        GetElevationUncertaintyInDeg(
            [out] Double* result);

        SetElevationUncertaintyInDeg(
            [in] Double value);

        ResetElevationUncertaintyInDeg();

        HasAzimuthInDeg(
            [out] Boolean* result);

        GetAzimuthInDeg(
            [out] Double* result);

        SetAzimuthInDeg(
            [in] Double value);

        ResetAzimuthInDeg();

        HasAzimuthUncertaintyInDeg(
            [out] Boolean* result);

        GetAzimuthUncertaintyInDeg(
            [out] Double* result);

        SetAzimuthUncertaintyInDeg(
            [in] Double value);

        ResetAzimuthUncertaintyInDeg();

        IsUsedInFix(
            [out] Boolean* result);

        SetUsedInFix(
            [in] Boolean value);

        GetFlag(
            [out] Int32* flag);
    }

    } // namespace Location
    } // namespace Droid
    } // namespace Elastos
}

