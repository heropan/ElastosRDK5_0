
module
{
    interface Elastos.Droid.View.IView;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Widget {

    [local]
    interface IWaveViewOnTriggerListener {
        /**
         * Sent when the user releases the handle.
         */
        const Int32 NO_HANDLE = 0;

        /**
         * Sent when the user grabs the center handle
         */
        const Int32 CENTER_HANDLE = 10;

        /**
         * Called when the user drags the center ring beyond a threshold.
         */
        OnTrigger(
            [in] IView* v,
            [in] Int32 whichHandle);

        /**
         * Called when the "grabbed state" changes (i.e. when the user either grabs or releases
         * one of the handles.)
         *
         * @param v the view that was triggered
         * @param grabbedState the new state: {@link #NO_HANDLE}, {@link #CENTER_HANDLE},
         */
        OnGrabbedStateChange(
            [in] IView* v,
            [in] Int32 grabbedState);
    }

    /**
     * A special widget containing a center and outer ring. Moving the center ring to the outer ring
     * causes an event that can be caught by implementing OnTriggerListener.
     */
    /**
     * @Involve
     * extends Elastos.Droid.View.IView
     *
     * interface Elastos.Droid.View.IKeyEventCallback
     * interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource
     * interface Elastos.Droid.Graphics.Drawable.IDrawableCallback
     * interface Elastos.Droid.Animation.IAnimatorUpdateListener
     */
     [local]
    interface IWaveView {
        /**
         * Registers a callback to be invoked when the user triggers an event.
         *
         * @param listener the OnDialTriggerListener to attach to this view
         */
        SetOnTriggerListener(
            [in] IWaveViewOnTriggerListener* listener);

        Reset();
    }

    }// namespace Widget
    }// namespace Internal
    }// namespace Droid
    }// namespace Elastos

}
