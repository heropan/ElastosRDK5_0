module
{
    interface Elastos.Core.ICharSequence;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Graphics.Drawable.IDrawable;
    interface Elastos.Droid.Content.IComponentName;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Content.Pm.IServiceInfo;
    interface Elastos.Droid.Content.Pm.IResolveInfo;
    interface Elastos.Droid.Hardware.Hdmi.IHdmiDeviceInfo;
    interface Elastos.Utility.IMap;
    interface Elastos.Utility.ISet;

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Tv {

    /**
     * Utility class for putting and getting settings for TV input.
     *
     * @hide
     */
    // @SystemApi
    interface ITvInputInfoTvInputSettings {
        /**
         * Returns a set of TV input IDs which are marked as hidden by user in the settings.
         *
         * @param context The application context
         * @param userId The user ID for the stored hidden input set
         * @hide
         */
        // @SystemApi
        GetHiddenTvInputIds(
            [in] IContext * context,
            [in] Int32 userId,
            [out] ISet ** result);

        /**
         * Returns a map of TV input ID/custom label pairs set by the user in the settings.
         *
         * @param context The application context
         * @param userId The user ID for the stored hidden input map
         * @hide
         */
        // @SystemApi
        GetCustomLabels(
            [in] IContext * context,
            [in] Int32 userId,
            [out] IMap ** result);

        /**
         * Stores a set of TV input IDs which are marked as hidden by user. This is expected to
         * be called from the settings app.
         *
         * @param context The application context
         * @param hiddenInputIds A set including all the hidden TV input IDs
         * @param userId The user ID for the stored hidden input set
         * @hide
         */
        // @SystemApi
        PutHiddenTvInputs(
            [in] IContext * context,
            [in] ISet * hiddenInputIds,
            [in] Int32 userId);

        /**
         * Stores a map of TV input ID/custom label set by user. This is expected to be
         * called from the settings app.
         *
         * @param context The application context.
         * @param customLabels A map of TV input ID/custom label pairs
         * @param userId The user ID for the stored hidden input map
         * @hide
         */
        // @SystemApi
        PutCustomLabels(
            [in] IContext * context,
            [in] IMap * customLabels,
            [in] Int32 userId);
    }

    /**
     * This class is used to specify meta information of a TV input.
     */
    interface ITvInputInfo {
        // Should be in sync with frameworks/base/core/res/res/values/attrs.xml
        /**
         * TV input type: the TV input service is a tuner which provides channels.
         */
        const Int32 TYPE_TUNER = 0;
        /**
         * TV input type: a generic hardware TV input type.
         */
        const Int32 TYPE_OTHER = 1000;
        /**
         * TV input type: the TV input service represents a composite port.
         */
        const Int32 TYPE_COMPOSITE = 1001;
        /**
         * TV input type: the TV input service represents a SVIDEO port.
         */
        const Int32 TYPE_SVIDEO = 1002;
        /**
         * TV input type: the TV input service represents a SCART port.
         */
        const Int32 TYPE_SCART = 1003;
        /**
         * TV input type: the TV input service represents a component port.
         */
        const Int32 TYPE_COMPONENT = 1004;
        /**
         * TV input type: the TV input service represents a VGA port.
         */
        const Int32 TYPE_VGA = 1005;
        /**
         * TV input type: the TV input service represents a DVI port.
         */
        const Int32 TYPE_DVI = 1006;
        /**
         * TV input type: the TV input service is HDMI. (e.g. HDMI 1)
         */
        const Int32 TYPE_HDMI = 1007;
        /**
         * TV input type: the TV input service represents a display port.
         */
        const Int32 TYPE_DISPLAY_PORT = 1008;

        /**
         * The ID of the TV input to provide to the setup activity and settings activity.
         */
        const String EXTRA_INPUT_ID = "android.media.tv.extra.INPUT_ID";

        /**
         * Returns a unique ID for this TV input. The ID is generated from the package and class name
         * implementing the TV input service.
         */
        GetId(
            [out] String * result);

        /**
         * Returns the parent input ID.
         * <p>
         * A TV input may have a parent input if the TV input is actually a logical representation of
         * a device behind the hardware port represented by the parent input.
         * For example, a HDMI CEC logical device, connected to a HDMI port, appears as another TV
         * input. In this case, the parent input of this logical device is the HDMI port.
         * </p><p>
         * Applications may group inputs by parent input ID to provide an easier access to inputs
         * sharing the same physical port. In the example of HDMI CEC, logical HDMI CEC devices behind
         * the same HDMI port have the same parent ID, which is the ID representing the port. Thus
         * applications can group the hardware HDMI port and the logical HDMI CEC devices behind it
         * together using this method.
         * </p>
         *
         * @return the ID of the parent input, if exists. Returns {@code null} if the parent input is
         *         not specified.
         */
        GetParentId(
            [out] String * result);

        /**
         * Returns the information of the service that implements this TV input.
         */
        GetServiceInfo(
            [out] IServiceInfo ** result);

        /**
         * Returns the component of the service that implements this TV input.
         * @hide
         */
        GetComponent(
            [out] IComponentName ** result);

        /**
         * Returns an intent to start the setup activity for this TV input.
         */
        CreateSetupIntent(
            [out] IIntent ** result);

        /**
         * Returns an intent to start the settings activity for this TV input.
         */
        CreateSettingsIntent(
            [out] IIntent ** result);

        /**
         * Returns the type of this TV input.
         */
        GetType(
            [out] Int32 * result);

        /**
         * Returns the HDMI device information of this TV input.
         * @hide
         */
        // @SystemApi
        GetHdmiDeviceInfo(
            [out] IHdmiDeviceInfo ** result);

        /**
         * Returns {@code true} if this TV input is pass-though which does not have any real channels in
         * TvProvider. {@code false} otherwise.
         *
         * @see TvContract#buildChannelUriForPassthroughInput(String)
         */
        IsPassthroughInput(
            [out] Boolean * result);

        /**
         * Returns {@code true}, if a CEC device for this TV input is connected to an HDMI switch, i.e.,
         * the device isn't directly connected to a HDMI port.
         * @hide
         */
        // @SystemApi
        IsConnectedToHdmiSwitch(
            [out] Boolean * result);

        /**
         * Checks if this TV input is marked hidden by the user in the settings.
         *
         * @param context Supplies a {@link Context} used to check if this TV input is hidden.
         * @return {@code true} if the user marked this TV input hidden in settings. {@code false}
         *         otherwise.
         * @hide
         */
        // @SystemApi
        IsHidden(
            [in] IContext * context,
            [out] Boolean * result);

        /**
         * Loads the user-displayed label for this TV input.
         *
         * @param context Supplies a {@link Context} used to load the label.
         * @return a CharSequence containing the TV input's label. If the TV input does not have
         *         a label, its name is returned.
         */
        LoadLabel(
            [in] IContext * context,
            [out] ICharSequence ** result);

        /**
         * Loads the custom label set by user in settings.
         *
         * @param context Supplies a {@link Context} used to load the custom label.
         * @return a CharSequence containing the TV input's custom label. {@code null} if there is no
         *         custom label.
         * @hide
         */
        // @SystemApi
        LoadCustomLabel(
            [in] IContext * context,
            [out] ICharSequence ** result);

        /**
         * Loads the user-displayed icon for this TV input.
         *
         * @param context Supplies a {@link Context} used to load the icon.
         * @return a Drawable containing the TV input's icon. If the TV input does not have an icon,
         *         application's icon is returned. If it's unavailable too, {@code null} is returned.
         */
        LoadIcon(
            [in] IContext * context,
            [out] IDrawable ** result);
    }

    [local]
    interface ITvInputInfoHelper {

        /**
         * Create a new instance of the TvInputInfo class,
         * instantiating it from the given Context and ResolveInfo.
         *
         * @param service The ResolveInfo returned from the package manager about this TV input service.
         * @hide
         */
        CreateTvInputInfo(
            [in] IContext * context,
            [in] IResolveInfo * service,
            [out] ITvInputInfo ** result);

        /**
         * Create a new instance of the TvInputInfo class, instantiating it from the given Context,
         * ResolveInfo, and HdmiDeviceInfo.
         *
         * @param service The IResolveInfo * returned from the package manager about this TV input service.
         * @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device.
         * @param parentId The ID of this TV input's parent input. {@code null} if none exists.
         * @param iconUri The {@link android.net.Uri} to load the icon image. See
         *            {@link android.content.ContentResolver#openInputStream}. If it is {@code null},
         *            the application icon of {@code service} will be loaded.
         * @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service}
         *            label will be loaded.
         * @hide
         */
        // @SystemApi
        CreateTvInputInfo(
            [in] IContext * context,
            [in] IResolveInfo * service,
            [in] IHdmiDeviceInfo * hdmiDeviceInfo,
            [in] String parentId,
            [in] String label,
            [in] IUri * iconUri,
            [out] ITvInputInfo ** result);

        /**
         * Create a new instance of the TvInputInfo class, instantiating it from the given Context,
         * ResolveInfo, and TvInputHardwareInfo.
         *
         * @param service The IResolveInfo * returned from the package manager about this TV input service.
         * @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device.
         * @param iconUri The {@link android.net.Uri} to load the icon image. See
         *            {@link android.content.ContentResolver#openInputStream}. If it is {@code null},
         *            the application icon of {@code service} will be loaded.
         * @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service}
         *            label will be loaded.
         * @hide
         */
        // @SystemApi
        CreateTvInputInfo(
            [in] IContext * context,
            [in] IResolveInfo * service,
            [in] ITvInputHardwareInfo * hardwareInfo,
            [in] String label,
            [in] IUri * iconUri,
            [out] ITvInputInfo ** result);
    }

    } // namespace Tv
    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
