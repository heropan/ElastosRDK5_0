module
{

    interface Elastos.Droid.Os.IUserHandle;

    namespace Elastos {
    namespace Droid {
    namespace Os {

    interface IBinderProxy {
    }

    [deprecated]
    interface IBinder {

        /**
         * The first transaction code available for user commands.
         */
        const Int32 FIRST_CALL_TRANSACTION  = 0x00000001;
        /**
         * The last transaction code available for user commands.
         */
        const Int32 LAST_CALL_TRANSACTION   = 0x00ffffff;

        /**
         * IBinder protocol transaction code: pingBinder().
         */
        const Int32 PING_TRANSACTION        = 1599098439;//('_' << 24)|('P'<<16)|('N'<<8)|'G';

        /**
         * IBinder protocol transaction code: dump internal state.
         */
        const Int32 DUMP_TRANSACTION        = 1598311760;//('_'<<24)|('D'<<16)|('M'<<8)|'P';

        /**
         * IBinder protocol transaction code: interrogate the recipient side
         * of the transaction for its canonical interface descriptor.
         */
        const Int32 INTERFACE_TRANSACTION   = 1598968902;//('_'<<24)|('N'<<16)|('T'<<8)|'F';

        /**
         * IBinder protocol transaction code: send a tweet to the target
         * object.  The data in the parcel is intended to be delivered to
         * a shared messaging service associated with the object; it can be
         * anything, as long as it is not more than 130 UTF-8 characters to
         * conservatively fit within common messaging services.  As part of
         * {@link Build.VERSION_CODES#HONEYCOMB_MR2}, all Binder objects are
         * expected to support this protocol for fully integrated tweeting
         * across the platform.  To support older code, the default implementation
         * logs the tweet to the main log as a simple emulation of broadcasting
         * it publicly over the Internet.
         *
         * <p>Also, upon completing the dispatch, the object must make a cup
         * of tea, return it to the caller, and exclaim "jolly good message
         * old boy!".
         */
        const Int32 TWEET_TRANSACTION   = 1599362900;//('_' << 24)|('T'<<16)|('W'<<8)|'T';

        /**
         * IBinder protocol transaction code: tell an app asynchronously that the
         * caller likes it.  The app is responsible for incrementing and maintaining
         * its own like counter, and may display this value to the user to indicate the
         * quality of the app.  This is an optional command that applications do not
         * need to handle, so the default implementation is to do nothing.
         *
         * <p>There is no response returned and nothing about the
         * system will be functionally affected by it, but it will improve the
         * app's self-esteem.
         */
        const Int32 LIKE_TRANSACTION   = 1598835019;//('_'<<24)|('L'<<16)|('I'<<8)|'K';

        /** @hide */
        const Int32 SYSPROPS_TRANSACTION = 1599295570;//('_'<<24)|('S'<<16)|('P'<<8)|'R';

        /**
         * Flag to {@link #transact}: this is a one-way call, meaning that the
         * caller returns immediately, without waiting for a result from the
         * callee. Applies only if the caller and callee are in different
         * processes.
         */
        const Int32 FLAG_ONEWAY             = 0x00000001;

//        /**
//         * Get the canonical name of the interface supported by this binder.
//         */
//        GetInterfaceDescriptor(
//            [out] String* str);

        ToString(
            [out] String* str);
    }

    interface IBinderHelper {
        /**
         * Return the ID of the process that sent you the current transaction
         * that is being processed.  This pid can be used with higher-level
         * system services to determine its identity and check permissions.
         * If the current thread is not currently executing an incoming transaction,
         * then its own pid is returned.
         */
        GetCallingPid(
            [out] Int32* pid);

        /**
         * Return the Linux uid assigned to the process that sent you the
         * current transaction that is being processed.  This uid can be used with
         * higher-level system services to determine its identity and check
         * permissions.  If the current thread is not currently executing an
         * incoming transaction, then its own uid is returned.
         */
        GetCallingUid(
            [out] Int32* pid);

        /**
         * Return the UserHandle assigned to the process that sent you the
         * current transaction that is being processed.  This is the user
         * of the caller.  It is distinct from {@link #getCallingUid()} in that a
         * particular user will have multiple distinct apps running under it each
         * with their own uid.  If the current thread is not currently executing an
         * incoming transaction, then its own UserHandle is returned.
         */
        GetCallingUserHandle(
            [out] IUserHandle** h);

        /**
         * Reset the identity of the incoming IPC on the current thread.  This can
         * be useful if, while handling an incoming call, you will be calling
         * on interfaces of other objects that may be local to your process and
         * need to do permission checks on the calls coming into them (so they
         * will check the permission of your own local process, and not whatever
         * process originally called you).
         *
         * @return Returns an opaque token that can be used to restore the
         * original calling identity by passing it to
         * {@link #restoreCallingIdentity(long)}.
         *
         * @see #getCallingPid()
         * @see #getCallingUid()
         * @see #restoreCallingIdentity(long)
         */
        ClearCallingIdentity(
            [out] Int64* token);

        /**
         * Restore the identity of the incoming IPC on the current thread
         * back to a previously identity that was returned by {@link
         * #clearCallingIdentity}.
         *
         * @param token The opaque token that was previously returned by
         * {@link #clearCallingIdentity}.
         *
         * @see #clearCallingIdentity
         */
        RestoreCallingIdentity(
            [in] Int64 token);

        /**
         * Sets the native thread-local StrictMode policy mask.
         *
         * <p>The StrictMode settings are kept in two places: a Java-level
         * threadlocal for libcore/Dalvik, and a native threadlocal (set
         * here) for propagation via Binder calls.  This is a little
         * unfortunate, but necessary to break otherwise more unfortunate
         * dependencies either of Dalvik on Android, or Android
         * native-only code on Dalvik.
         *
         * @see StrictMode
         * @hide
         */
        SetThreadStrictModePolicy(
            [in] Int32 policyMask);

        /**
         * Gets the current native thread-local StrictMode policy mask.
         *
         * @see #setThreadStrictModePolicy
         * @hide
         */
        GetThreadStrictModePolicy(
            [out] Int32* policy);

        /**
         * Flush any Binder commands pending in the current thread to the kernel
         * driver.  This can be
         * useful to call before performing an operation that may block for a long
         * time, to ensure that any pending object references have been released
         * in order to prevent the process from holding on to objects longer than
         * it needs to.
         */
        FlushPendingCommands();

        /**
         * Add the calling thread to the IPC thread pool.  This function does
         * not return until the current process is exiting.
         */
        JoinThreadPool();
    }

    } // namespace Os
    } // namespace Droid
    } // namespace Elastos

} // module
