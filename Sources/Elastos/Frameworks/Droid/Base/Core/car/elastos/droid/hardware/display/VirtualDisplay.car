
module
{
    interface Elastos.Droid.View.IDisplay;
    interface Elastos.Droid.View.ISurface;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Display {


    /**
     * Interface for receiving information about a {@link VirtualDisplay}'s state changes.
     */
    interface IVirtualDisplayCallback {
        /**
         * Called when the virtual display video projection has been
         * paused by the system or when the surface has been detached
         * by the application by calling setSurface(null).
         * The surface will not receive any more buffers while paused.
         */
        OnPaused();

        /**
         * Called when the virtual display video projection has been
         * resumed after having been paused.
         */
        OnResumed();

        /**
         * Called when the virtual display video projection has been
         * stopped by the system.  It will no longer receive frames
         * and it will never be resumed.  It is still the responsibility
         * of the application to release() the virtual display.
         */
        OnStopped();
    }


    /**
     * Represents a virtual display. The content of a virtual display is rendered to a
     * {@link android.view.Surface} that you must provide to {@link DisplayManager#createVirtualDisplay
     * createVirtualDisplay()}.
     * <p>
     * Because a virtual display renders to a surface provided by the application, it will be
     * released automatically when the process terminates and all remaining windows on it will
     * be forcibly removed.  However, you should also explicitly call {@link #release} when
     * you're done with it.
     * </p>
     *
     * @see DisplayManager#createVirtualDisplay
     */
    interface IVirtualDisplay {
        /**
         * Gets the virtual display.
         */
        GetDisplay(
            [out] IDisplay** result);

        /**
         * Gets the surface that backs the virtual display.
         */
        GetSurface(
            [out] ISurface** result);

        /**
         * Sets the surface that backs the virtual display.
         * <p>
         * Detaching the surface that backs a virtual display has a similar effect to
         * turning off the screen.
         * </p><p>
         * It is still the caller's responsibility to destroy the surface after it has
         * been detached.
         * </p>
         *
         * @param surface The surface to set, or null to detach the surface from the virtual display.
         */
        SetSurface(
            [in] ISurface* surface);

        /**
         * Asks the virtual display to resize.
         *<p>
         * This is really just a convenience to allow applications using
         * virtual displays to adapt to changing conditions without having
         * to tear down and recreate the display.
         * </p>
         */
        Resize(
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 densityDpi);

        /**
         * Releases the virtual display and destroys its underlying surface.
         * <p>
         * All remaining windows on the virtual display will be forcibly removed
         * as part of releasing the virtual display.
         * </p>
         */
        ReleaseResources();
    }

    } // namespace Display
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
