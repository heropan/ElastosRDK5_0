
module
{
    namespace Elastos {
    namespace Droid {
    namespace View {

    interface IFallbackAction {
        Recycle();

        SetKeyCode(
            [in] Int32 keyCode);

        GetKeyCode(
            [out] Int32* keyCode);

        SetMetaState(
            [in] Int32 metaState);

        GetMetaState(
            [out] Int32* metaState);
    }

    interface IFallbackActionHelper {
        Obtain(
            [out] IFallbackAction** action);
    }

    [deprecated]
    interface IKeyData {
        const Int32 META_LENGTH = 4;

        SetDisplayLabel(
            [in] Char32 displayLabel);

        GetDisplayLabel(
            [out] Char32* displayLabel);

        SetNumber(
            [in] Char32 number);

        GetNumber(
            [out] Char32* number);

        SetMeta(
            [in] ArrayOf<Char32>* meta);

        GetMeta(
            [out, callee] ArrayOf<Char32>* meta);
    }

    /**
     * Describes the keys provided by a keyboard device and their associated labels.
     */
    /**
     * @Involve
     * interface IParcelable
     */
    [deprecated]
    interface IKeyCharacterMap {
        /**
         * The id of the device's primary built in keyboard is always 0.
         *
         * @deprecated This constant should no longer be used because there is no
         * guarantee that a device has a built-in keyboard that can be used for
         * typing text.  There might not be a built-in keyboard, the built-in keyboard
         * might be a {@link #NUMERIC} or {@link #SPECIAL_FUNCTION} keyboard, or there
         * might be multiple keyboards installed including external keyboards.
         * When interpreting key presses received from the framework, applications should
         * use the device id specified in the {@link KeyEvent} received.
         * When synthesizing key presses for delivery elsewhere or when translating key presses
         * from unknown keyboards, applications should use the special {@link #VIRTUAL_KEYBOARD}
         * device id.
         */
        //@Deprecated
        const Int32 BUILT_IN_KEYBOARD = 0;

        /**
         * The id of a generic virtual keyboard with a full layout that can be used to
         * synthesize key events.  Typically used with {@link #getEvents}.
         */
        const Int32 VIRTUAL_KEYBOARD = -1;

        /**
         * A numeric (12-key) keyboard.
         * <p>
         * A numeric keyboard supports text entry using a multi-tap approach.
         * It may be necessary to tap a key multiple times to generate the desired letter
         * or symbol.
         * </p><p>
         * This type of keyboard is generally designed for thumb typing.
         * </p>
         */
        const Int32 NUMERIC = 1;

        /**
         * A keyboard with all the letters, but with more than one letter per key.
         * <p>
         * This type of keyboard is generally designed for thumb typing.
         * </p>
         */
        const Int32 PREDICTIVE = 2;

        /**
         * A keyboard with all the letters, and maybe some numbers.
         * <p>
         * An alphabetic keyboard supports text entry directly but may have a condensed
         * layout with a small form factor.  In contrast to a {@link #FULL full keyboard}, some
         * symbols may only be accessible using special on-screen character pickers.
         * In addition, to improve typing speed and accuracy, the framework provides
         * special affordances for alphabetic keyboards such as auto-capitalization
         * and toggled / locked shift and alt keys.
         * </p><p>
         * This type of keyboard is generally designed for thumb typing.
         * </p>
         */
        const Int32 ALPHA = 3;

        /**
         * A full PC-style keyboard.
         * <p>
         * A full keyboard behaves like a PC keyboard.  All symbols are accessed directly
         * by pressing keys on the keyboard without on-screen support or affordances such
         * as auto-capitalization.
         * </p><p>
         * This type of keyboard is generally designed for full two hand typing.
         * </p>
         */
        const Int32 FULL = 4;

        /**
         * A keyboard that is only used to control special functions rather than for typing.
         * <p>
         * A special function keyboard consists only of non-printing keys such as
         * HOME and POWER that are not actually used for typing.
         * </p>
         */
        const Int32 SPECIAL_FUNCTION = 5;

        /**
         * This private-use character is used to trigger Unicode character
         * input by hex digits.
         */
        const Char32 HEX_INPUT = 0xEF00;

        /**
         * This private-use character is used to bring up a character picker for
         * miscellaneous symbols.
         */
        const Char32 PICKER_DIALOG_INPUT = 0xEF01;

        /**
         * Modifier keys may be chorded with character keys.
         *
         * @see {#link #getModifierBehavior()} for more details.
         */
        const Int32 MODIFIER_BEHAVIOR_CHORDED = 0;

        /**
         * Modifier keys may be chorded with character keys or they may toggle
         * into latched or locked states when pressed independently.
         *
         * @see {#link #getModifierBehavior()} for more details.
         */
        const Int32 MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED = 1;

        /*
         * This bit will be set in the return value of {@link #get(int, int)} if the
         * key is a "dead key."
         */
        const Int32 COMBINING_ACCENT = 0x80000000;

        /**
         * Mask the return value from {@link #get(int, int)} with this value to get
         * a printable representation of the accent character of a "dead key."
         */
        const Int32 COMBINING_ACCENT_MASK = 0x7FFFFFFF;

        /**
         * Gets the Unicode character generated by the specified key and meta
         * key state combination.
         * <p>
         * Returns the Unicode character that the specified key would produce
         * when the specified meta bits (see {@link MetaKeyKeyListener})
         * were active.
         * </p><p>
         * Returns 0 if the key is not one that is used to type Unicode
         * characters.
         * </p><p>
         * If the return value has bit {@link #COMBINING_ACCENT} set, the
         * key is a "dead key" that should be combined with another to
         * actually produce a character -- see {@link #getDeadChar} --
         * after masking with {@link #COMBINING_ACCENT_MASK}.
         * </p>
         *
         * @param keyCode The key code.
         * @param metaState The meta key modifier state.
         * @return The associated character or combining accent, or 0 if none.
         */
        Get(
            [in] Int32 keyCode,
            [in] Int32 metaState,
            [out] Int32* value);

        /**
         * Gets the fallback action to perform if the application does not
         * handle the specified key.
         * <p>
         * When an application does not handle a particular key, the system may
         * translate the key to an alternate fallback key (specified in the
         * fallback action) and dispatch it to the application.
         * The event containing the fallback key is flagged
         * with {@link KeyEvent#FLAG_FALLBACK}.
         * </p>
         *
         * @param keyCode The key code.
         * @param metaState The meta key modifier state.
         * @return The fallback action, or NULL if none.  Remember to recycle the fallback action.
         *
         * @hide
         */
        GetFallbackAction(
            [in] Int32 keyCode,
            [in] Int32 metaState,
            [out] IFallbackAction** fallbackAction);

        /**
         * Gets the number or symbol associated with the key.
         * <p>
         * The character value is returned, not the numeric value.
         * If the key is not a number, but is a symbol, the symbol is retuned.
         * </p><p>
         * This method is intended to to support dial pads and other numeric or
         * symbolic entry on keyboards where certain keys serve dual function
         * as alphabetic and symbolic keys.  This method returns the number
         * or symbol associated with the key independent of whether the user
         * has pressed the required modifier.
         * </p><p>
         * For example, on one particular keyboard the keys on the top QWERTY row generate
         * numbers when ALT is pressed such that ALT-Q maps to '1'.  So for that keyboard
         * when {@link #getNumber} is called with {@link KeyEvent#KEYCODE_Q} it returns '1'
         * so that the user can type numbers without pressing ALT when it makes sense.
         * </p>
         *
         * @param keyCode The key code.
         * @return The associated numeric or symbolic character, or 0 if none.
         */
        GetNumber(
            [in] Int32 keyCode,
            [out] Char32* number);

        /**
         * Gets the first character in the character array that can be generated
         * by the specified key code.
         * <p>
         * This is a convenience function that returns the same value as
         * {@link #getMatch(Int32,Char32[],Int32) getMatch(keyCode, chars, 0)}.
         * </p>
         *
         * @param keyCode The keycode.
         * @param chars The array of matching characters to consider.
         * @return The matching associated character, or 0 if none.
         */
        GetMatch(
            [in] Int32 keyCode,
            [in] ArrayOf<Char32>* chars,
            [out] Char32* match);

        /**
         * Gets the first character in the character array that can be generated
         * by the specified key code.  If there are multiple choices, prefers
         * the one that would be generated with the specified meta key modifier state.
         *
         * @param keyCode The key code.
         * @param chars The array of matching characters to consider.
         * @param metaState The preferred meta key modifier state.
         * @return The matching associated character, or 0 if none.
         */
        GetMatch(
            [in] Int32 keyCode,
            [in] ArrayOf<Char32>* chars,
            [in] Int32 metaState,
            [out] Char32* match);

        /**
         * Gets the primary character for this key.
         * In other words, the label that is physically printed on it.
         *
         * @param keyCode The key code.
         * @return The display label character, or 0 if none (eg. for non-printing keys).
         */
        GetDisplayLabel(
            [in] Int32 keyCode,
            [out] Char32* label);

        /**
         * Get the character conversion data for a given key code.
         *
         * @param keyCode The keyCode to query.
         * @param results A {@link KeyData} instance that will be filled with the results.
         * @return True if the key was mapped.  If the key was not mapped, results is not modified.
         *
         * @deprecated instead use {@link KeyCharacterMap#getDisplayLabel(Int32)},
         * {@link KeyCharacterMap#getNumber(Int32)} or {@link KeyCharacterMap#get(Int32, Int32)}.
         */
        //@Deprecated
        GetKeyData(
            [in] Int32 keyCode,
            [in] IKeyData* results,
            [out] Boolean* res);

        /**
         * Get an array of KeyEvent objects that if put into the input stream
         * could plausibly generate the provided sequence of characters.  It is
         * not guaranteed that the sequence is the only way to generate these
         * events or that it is optimal.
         * <p>
         * This function is primarily offered for instrumentation and testing purposes.
         * It may fail to map characters to key codes.  In particular, the key character
         * map for the {@link #BUILT_IN_KEYBOARD built-in keyboard} device id may be empty.
         * Consider using the key character map associated with the
         * {@link #VIRTUAL_KEYBOARD virtual keyboard} device id instead.
         * </p><p>
         * For robust text entry, do not use this function.  Instead construct a
         * {@link KeyEvent} with action code {@link KeyEvent#ACTION_MULTIPLE} that contains
         * the desired string using {@link KeyEvent#KeyEvent(long, String, Int32, Int32)}.
         * </p>
         *
         * @param chars The sequence of characters to generate.
         * @return An array of {@link KeyEvent} objects, or NULL if the given Char32 array
         *         can not be generated using the current key character map.
         */
        GetEvents(
            [in] ArrayOf<Char32>* chars,
            [out, callee] ArrayOf<IKeyEvent*>* keyEvents);

        /**
         * Returns true if the specified key produces a glyph.
         *
         * @param keyCode The key code.
         * @return True if the key is a printing key.
         */
        IsPrintingKey(
            [in] Int32 keyCode,
            [out] Boolean* res);

        /**
         * Gets the keyboard type.
         * Returns {@link #NUMERIC}, {@link #PREDICTIVE}, {@link #ALPHA}, {@link #FULL}
         * or {@link #SPECIAL_FUNCTION}.
         * <p>
         * Different keyboard types have different semantics.  Refer to the documentation
         * associated with the keyboard type constants for details.
         * </p>
         *
         * @return The keyboard type.
         */
        GetKeyboardType(
            [out] Int32* type);

        /**
         * Gets a constant that describes the behavior of this keyboard's modifier keys
         * such as {@link KeyEvent#KEYCODE_SHIFT_LEFT}.
         * <p>
         * Currently there are two behaviors that may be combined:
         * </p>
         * <ul>
         * <li>Chorded behavior: When the modifier key is pressed together with one or more
         * character keys, the keyboard inserts the modified keys and
         * then resets the modifier state when the modifier key is released.</li>
         * <li>Toggled behavior: When the modifier key is pressed and released on its own
         * it first toggles into a latched state.  When latched, the modifier will apply
         * to next character key that is pressed and will then reset itself to the initial state.
         * If the modifier is already latched and the modifier key is pressed and release on
         * its own again, then it toggles into a locked state.  When locked, the modifier will
         * apply to all subsequent character keys that are pressed until unlocked by pressing
         * the modifier key on its own one more time to reset it to the initial state.
         * Toggled behavior is useful for small profile keyboards designed for thumb typing.
         * </ul>
         * <p>
         * This function currently returns {@link #MODIFIER_BEHAVIOR_CHORDED} when the
         * {@link #getKeyboardType() keyboard type} is {@link #FULL} or {@link #SPECIAL_FUNCTION} and
         * {@link #MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED} otherwise.
         * In the future, the function may also take into account global keyboard
         * accessibility settings, other user preferences, or new device capabilities.
         * </p>
         *
         * @return The modifier behavior for this keyboard.
         *
         * @see {@link #MODIFIER_BEHAVIOR_CHORDED}
         * @see {@link #MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED}
         */
        GetModifierBehavior(
            [out] Int32* behavior);

        GetMap(
            [out] Int32* map);

        // add for JNI
        GetNative(
            [out] Handle64* native);

        SetNative(
            [in] Handle64 native);
    }

    [deprecated]
    interface IKeyCharacterMapHelper {
        /**
         * Loads the key character maps for the keyboard with the specified device id.
         *
         * @param deviceId The device id of the keyboard.
         * @return The associated key character map.
         * @throws {@link UnavailableException} if the key character map
         * could not be loaded because it was malformed or the default key character map
         * is missing from the system.
         */
        Load(
            [in] Int32 deviceId,
            [out] IKeyCharacterMap** kcm);

        /**
         * Queries the framework about whether any physical keys exist on the
         * any keyboard attached to the device that are capable of producing the given key code.
         *
         * @param keyCode The key code to query.
         * @return True if at least one attached keyboard supports the specified key code.
         */
        DeviceHasKey(
            [in] Int32 keyCode,
            [out] Boolean* hasKey);

        /**
         * Get the character that is produced by combining the dead key producing accent
         * with the key producing character c.
         * For example, getDeadChar('`', 'e') returns &egrave;.
         * getDeadChar('^', ' ') returns '^' and getDeadChar('^', '^') returns '^'.
         *
         * @param accent The accent character.  eg. '`'
         * @param c The basic character.
         * @return The combined character, or 0 if the characters cannot be combined.
         */
        GetDeadChar(
            [in] Int32 accent,
            [in] Int32 c,
            [out] Int32* deadChar);

        /**
         * Queries the framework about whether any physical keys exist on the
         * any keyboard attached to the device that are capable of producing the given
         * array of key codes.
         *
         * @param keyCodes The array of key codes to query.
         * @return A new array of the same size as the key codes array whose elements
         * are set to true if at least one attached keyboard supports the corresponding key code
         * at the same index in the key codes array.
         */
        DeviceHasKeys(
            [in] ArrayOf<Int32>* keyCodes,
            [out, callee] ArrayOf<Boolean>* hasKeys);
    }

    }   //namespace View
    }   //namespace Droid
    }   //namespace Elastos
}
