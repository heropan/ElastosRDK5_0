module
{
    using interface Elastos.IO.IOutputStream;
    using interface Elastos.IO.IInputStream;
    using interface Elastos.Utility.IList;
    using interface Elastos.Utility.IArrayList;

    interface Elastos.Droid.Gesture.IGesture;

    namespace Elastos {
    namespace Droid {
    namespace Gesture {

    /**
     * GestureLibrary maintains gesture examples and makes predictions on a new
     * gesture
     */
    //
    //    File format for GestureStore:
    //
    //                Nb. bytes   Java type   Description
    //                -----------------------------------
    //    Header
    //                2 bytes     short       File format version number
    //                4 bytes     int         Number of entries
    //    Entry
    //                X bytes     UTF String  Entry name
    //                4 bytes     int         Number of gestures
    //    Gesture
    //                8 bytes     long        Gesture ID
    //                4 bytes     int         Number of strokes
    //    Stroke
    //                4 bytes     int         Number of points
    //    Point
    //                4 bytes     float       X coordinate of the point
    //                4 bytes     float       Y coordinate of the point
    //                8 bytes     long        Time stamp
    //
    [local]
    interface IGestureStore {
        const Int32 GestureStore_SEQUENCE_INVARIANT = 1;
        // when SEQUENCE_SENSITIVE is used, only single stroke gestures are currently allowed
        const Int32 SEQUENCE_SENSITIVE = 2;

        // ORIENTATION_SENSITIVE and ORIENTATION_INVARIANT are only for SEQUENCE_SENSITIVE gestures
        const Int32 ORIENTATION_INVARIANT = 1;
        // at most 2 directions can be recognized
        const Int32 ORIENTATION_SENSITIVE = 2;

        // at most 4 directions can be recognized
        const Int32 ORIENTATION_SENSITIVE_4 = 4;
        // at most 8 directions can be recognized
        const Int32 ORIENTATION_SENSITIVE_8 = 8;

        /**
         * Specify how the gesture library will handle orientation.
         * Use ORIENTATION_INVARIANT or ORIENTATION_SENSITIVE
         *
         * @param style
         */
        SetOrientationStyle(
            [in] Int32 style);

        GetOrientationStyle(
            [out] Int32* style);

        /**
         * @param type SEQUENCE_INVARIANT or SEQUENCE_SENSITIVE
         */
        SetSequenceType(
            [in] Int32 type);

        /**
         * @return SEQUENCE_INVARIANT or SEQUENCE_SENSITIVE
         */
        GetSequenceType(
            [out] Int32* type);

        /**
         * Get all the gesture entry names in the library
         *
         * @return a set of strings
         */
        GetGestureEntries(
            [out] IList** entries);

        /**
         * Recognize a gesture
         *
         * @param gesture the query
         * @return a list of predictions of possible entries for a given gesture
         */
        Recognize(
            [in] IGesture* gesture,
            [out] IArrayList** list);

        /**
         * Add a gesture for the entry
         *
         * @param entryName entry name
         * @param gesture
         */
        AddGesture(
            [in] String entryName,
            [in] IGesture* gesture);

        /**
         * Remove a gesture from the library. If there are no more gestures for the
         * given entry, the gesture entry will be removed.
         *
         * @param entryName entry name
         * @param gesture
         */
        RemoveGesture(
            [in] String entryName,
            [in] IGesture* gesture);

        /**
         * Remove a entry of gestures
         *
         * @param entryName the entry name
         */
        RemoveEntry(
            [in] String entryName);

        /**
         * Get all the gestures of an entry
         *
         * @param entryName
         * @return the list of gestures that is under this name
         */
        GetGestures(
            [in] String entryName,
            [out] IArrayList** gestures);

        HasChanged(
            [out] Boolean* hasChanged);

        /**
         * Save the gesture library
         */
        Save(
            [in] IOutputStream* stream);

        Save(
            [in] IOutputStream* stream,
            [in] Boolean closeStream);

        /**
         * Load the gesture library
         */
        Load(
            [in] IInputStream* stream);

        Load(
            [in] IInputStream* stream,
            [in] Boolean closeStream);
    }

    } // namespace Gesture
    } // namespace Droid
    } // namespace Elastos
}
