module
{
    using interface Elastos.Core.ICharSequence;
    using interface Elastos.Utility.IHashMap;
    using interface Elastos.IO.IPrintWriter;
    using interface Elastos.IO.IFileDescriptor;

    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IMenu;
    interface Elastos.Droid.View.IMenuItem;
    interface Elastos.Droid.View.IViewGroup;
    interface Elastos.Droid.View.IMenuInflater;
    interface Elastos.Droid.View.ILayoutInflater;
    interface Elastos.Droid.View.IContextMenu;
    interface Elastos.Droid.View.IContextMenuInfo;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Content.Res.IResources;
    interface Elastos.Droid.Content.Res.IConfiguration;
    interface Elastos.Droid.Animation.IAnimator;
    interface Elastos.Droid.Utility.IAttributeSet;
    interface Elastos.Droid.App.IActivity;
    interface Elastos.Droid.App.IFragment;
    interface Elastos.Droid.App.IFragmentManagerImpl;
    interface Elastos.Droid.App.IFragmentSavedState;
    interface Elastos.Droid.App.ILoaderManagerImpl;
    interface Elastos.Droid.Transition.ITransition;

    namespace Elastos {
    namespace Droid {
    namespace App {

    /**
     * @Involve
     * interface IParcelable
     */
    [local]
    interface IFragmentState {
        Instantiate(
            [in] IActivity* activity,
            [in] IFragment* parent,
            [out] IFragment** result);

        GetClassName(
            [out] String* name);

        GetIndex(
            [out] Int32* result);

        IsFromLayout(
            [out] Boolean* result);

        GetFragmentId(
            [out] Int32* result);

        GetContainerId(
            [out] Int32* result);

        GetTag(
            [out] String* tag);

        IsRetainInstance(
            [out] Boolean* result);

        IsDetached(
            [out] Boolean* result);

        GetArguments(
            [out] IBundle** arguments);

        GetSavedFragmentState(
            [out] IBundle** state);

        GetInstance(
            [out] IFragment** fragment);
    }

    /**
     * State information that has been retrieved from a fragment instance
     * through {@link FragmentManager#saveFragmentInstanceState(Fragment)
     * FragmentManager.saveFragmentInstanceState}.
     */
    /**
     * @Involve
     * interface IParcelable
     */
    interface IFragmentSavedState {
        GetState(
            [out] IBundle** state);

        SetState(
            [in] IBundle* state);
    }

    /**
     * @Involve
     * interface Elastos.Droid.Content.IComponentCallbacks
     * interface Elastos.Droid.Content.IComponentCallbacks2
     * interface Elastos.Droid.View.IViewOnCreateContextMenuListener
     */
    [local, deprecated]
    interface IFragment {
        const Int32 INVALID_STATE = -1;   // Invalid state used as a null value.
        const Int32 INITIALIZING = 0;     // Not yet created.
        const Int32 CREATED = 1;          // Created.
        const Int32 ACTIVITY_CREATED = 2; // The activity has finished its creation.
        const Int32 STOPPED = 3;          // Fully created, not started.
        const Int32 STARTED = 4;          // Created and started, not resumed.
        const Int32 RESUMED = 5;          // Created started and resumed.


        GetState(
            [out] Int32* state);

        SetState(
            [in] Int32 state);

        // Non-null if the fragment's view hierarchy is currently animating away,
        // meaning we need to wait a bit on completely destroying it.  This is the
        // animation that is running.
        GetAnimatingAway(
            [out] IAnimator** animator);

        SetAnimatingAway(
            [in] IAnimator* animator);

        // If mAnimatingAway != null, this is the state we should move to once the
        // animation is done.
        GetStateAfterAnimating(
            [out] Int32* state);

        SetStateAfterAnimating(
            [in] Int32 state);

        // When instantiated from saved state, this is the saved state.
        GetSavedFragmentState(
            [out] IBundle** fState);

        SetSavedFragmentState(
            [in] IBundle* fState);

        GetSavedViewState(
            [out] IHashMap** viewState);

        SetSavedViewState(
            [in] IHashMap* viewState);

        // Index into active fragment array.
        GetIndex(
            [out] Int32* index);

        // Internal unique name for this fragment;
        GetWho(
            [out] String* who);

        SetWho(
            [in] String who);

        // Target fragment.
        GetTarget(
            [out] IFragment** target);

        SetTarget(
            [in] IFragment* target);

        // For use when retaining a fragment: this is the index of the last mTarget.
        GetTargetIndex(
            [out] Int32* index);

        SetTargetIndex(
            [in] Int32 index);

        SetTargetRequestCode(
            [in] Int32 code);

        // True if the fragment is in the list of added fragments.
        GetAdded(
            [out] Boolean* added);

        SetAdded(
            [in] Boolean added);

        SetRemoving(
            [in] Boolean removing);

        SetResumed(
            [in] Boolean resumed);

        // Set to true if this fragment was instantiated from a layout file.
        GetFromLayout(
            [out] Boolean* fLayout);

        SetFromLayout(
            [in] Boolean fLayout);

        SetInLayout(
            [in] Boolean inLayout);

        // True if this fragment has been restored from previously saved state.
        GetRestored(
            [out] Boolean* restored);

        SetRestored(
            [in] Boolean restored);

        // Number of active back stack entries this fragment is in.
        GetBackStackNesting(
            [out] Int32* bsNesting);

        SetBackStackNesting(
            [in] Int32 bsNesting);

        SetFragmentManager(
            [in] IFragmentManagerImpl* fManager);

        SetActivity(
            [in] IActivity* activity);

        SetChildFragmentManager(
            [in] IFragmentManagerImpl* cfManager);

        GetChildFragmentManagerValue(
            [out] IFragmentManagerImpl** cfManager);

        SetParentFragment(
            [in] IFragment* pFragment);

        // The optional identifier for this fragment -- either the container ID if it
        // was dynamically added to the view hierarchy, or the ID supplied in
        // layout.
        GetFragmentId(
            [out] Int32* fid);

        SetFragmentId(
            [in] Int32 fid);

        // When a fragment is being dynamically added to the view hierarchy, this
        // is the identifier of the parent container it is being added to.
        GetContainerId(
            [out] Int32* cid);

        SetContainerId(
            [in] Int32 cid);

        SetTag(
            [in] String tag);

        SetHidden(
            [in] Boolean hid);

        SetDetached(
            [in] Boolean detached);

        // If set this fragment is being retained across the current config change.
        GetRetaining(
            [out] Boolean* retaining);

        SetRetaining(
            [in] Boolean retaining);

        // If set this fragment has menu items to contribute.
        GetHasMenu(
            [out] Boolean* hasMenu);

        SetHasMenu(
            [in] Boolean hasMenu);

        // Set to true to allow the fragment's menu to be shown.
        GetMenuVisible(
            [out] Boolean* visible);

        SetMenuVisible(
            [in] Boolean visible);

        // Used to verify that subclasses call through to super class.
        GetCalled(
            [out] Boolean* called);

        SetCalled(
            [in] Boolean called);

        // If app has requested a specific animation, this is the one to use.
        GetNextAnim(
            [out] Int32* anim);

        SetNextAnim(
            [in] Int32 anim);

        // The parent container of the fragment after dynamically added to UI.
        GetContainer(
            [out] IViewGroup** container);

        SetContainer(
            [in] IViewGroup* container);

        SetView(
            [in] IView* view);

        // Whether this fragment should defer starting until after other fragments
        // have been started and their loaders are finished.
        GetDeferStart(
            [out] Boolean* start);

        SetDeferStart(
            [in] Boolean start);

        SetLoaderManager(
            [in] ILoaderManagerImpl* lManager);

        GetLoaderManagerValue(
            [out] ILoaderManagerImpl** lManager);

        GetLoadersStarted(
            [out] Boolean* started);

        SetLoadersStarted(
            [in] Boolean started);

        GetCheckedForLoaderManager(
            [out] Boolean* cfManager);

        SetCheckedForLoaderManager(
            [in] Boolean cfManager);

        SetIndex(
            [in] Int32 index,
            [in] IFragment* parent);

        //========================================================

        /**
         * Return the identifier this fragment is known by.  This is either
         * the android:id value supplied in a layout or the container view ID
         * supplied when adding the fragment.
         */
        GetId(
            [out] Int32* id);

        /**
         * Get the tag name of the fragment, if specified.
         */
        GetTag(
            [out] String* tag);

        /**
         * Supply the construction arguments for this fragment.  This can only
         * be called before the fragment has been attached to its activity; that
         * is, you should call it immediately after constructing the fragment.  The
         * arguments supplied here will be retained across fragment destroy and
         * creation.
         */
        SetArguments(
            [in] IBundle* args);

        /**
         * Return the arguments supplied when the fragment was instantiated,
         * if any.
         */
        GetArguments(
            [out] IBundle** args);

        /**
         * Set the initial saved state that this Fragment should restore itself
         * from when first being constructed, as returned by
         * {@link FragmentManager#saveFragmentInstanceState(Fragment)
         * FragmentManager.saveFragmentInstanceState}.
         *
         * @param state The state the fragment should be restored from.
         */
        SetInitialSavedState(
            [in] IFragmentSavedState* state);

        /**
         * Optional target for this fragment.  This may be used, for example,
         * if this fragment is being started by another, and when done wants to
         * give a result back to the first.  The target set here is retained
         * across instances via {@link FragmentManager#putFragment
         * FragmentManager.putFragment()}.
         *
         * @param fragment The fragment that is the target of this one.
         * @param requestCode Optional request code, for convenience if you
         * are going to call back with {@link #onActivityResult(int, int, Intent)}.
         */
        SetTargetFragment(
            [in] IFragment* fragment,
            [in] Int32 requestCode);

        /**
         * Return the target fragment set by {@link #setTargetFragment}.
         */
        GetTargetFragment(
            [out] IFragment** fragment);

        /**
         * Return the target request code set by {@link #setTargetFragment}.
         */
        GetTargetRequestCode(
            [out] Int32* code);

        /**
         * Return the Activity this fragment is currently associated with.
         */
        GetActivity(
            [out] IActivity** activity);

        /**
         * Return <code>getActivity().getResources()</code>.
         */
        GetResources(
            [out] IResources** resources);

        /**
         * Return a localized, styled CharSequence from the application's package's
         * default string table.
         *
         * @param resId Resource id for the CharSequence text
         */
        GetText(
            [in] Int32 resId,
            [out] ICharSequence** text);

        /**
         * Return a localized string from the application's package's
         * default string table.
         *
         * @param resId Resource id for the string
         */
        GetString(
            [in] Int32 resId,
            [out] String* string);

        /**
         * Return a localized formatted string from the application's package's
         * default string table, substituting the format arguments as defined in
         * {@link java.util.Formatter} and {@link java.lang.String#format}.
         *
         * @param resId Resource id for the format string
         * @param formatArgs The format arguments that will be used for substitution.
         */

        GetString(
            [in] Int32 resId,
            [in] ArrayOf<IInterface*>* formatArgs,
            [out] String* string);

        /**
         * Return the FragmentManager for interacting with fragments associated
         * with this fragment's activity.  Note that this will be non-null slightly
         * before {@link #getActivity()}, during the time from when the fragment is
         * placed in a {@link FragmentTransaction} until it is committed and
         * attached to its activity.
         *
         * <p>If this Fragment is a child of another Fragment, the FragmentManager
         * returned here will be the parent's {@link #getChildFragmentManager()}.
         */
        GetFragmentManager(
            [out] IFragmentManager** manager);

        /**
         * Return a private FragmentManager for placing and managing Fragments
         * inside of this Fragment.
         */
        GetChildFragmentManager(
            [out] IFragmentManager** manager);

        /**
         * Returns the parent Fragment containing this Fragment.  If this Fragment
         * is attached directly to an Activity, returns null.
         */
        GetParentFragment(
            [out] IFragment** fragment);

        /**
         * Return true if the fragment is currently added to its activity.
         */
        IsAdded(
            [out] Boolean* added);

        /**
         * Return true if the fragment has been explicitly detached from the UI.
         * That is, {@link FragmentTransaction#detach(Fragment)
         * FragmentTransaction.detach(Fragment)} has been used on it.
         */
        IsDetached(
            [out] Boolean* detached);

        /**
         * Return true if this fragment is currently being removed from its
         * activity.  This is  <em>not</em> whether its activity is finishing, but
         * rather whether it is in the process of being removed from its activity.
         */
        IsRemoving(
            [out] Boolean* removing);

        /**
         * Return true if the layout is included as part of an activity view
         * hierarchy via the &lt;fragment&gt; tag.  This will always be true when
         * fragments are created through the &lt;fragment&gt; tag, <em>except</em>
         * in the case where an old fragment is restored from a previous state and
         * it does not appear in the layout of the current state.
         */
        IsInLayout(
            [out] Boolean* inlayout);

        /**
         * Return true if the fragment is in the resumed state.  This is true
         * for the duration of {@link #onResume()} and {@link #onPause()} as well.
         */
        IsResumed(
            [out] Boolean* resumed);

        /**
         * Return true if the fragment is currently visible to the user.  This means
         * it: (1) has been added, (2) has its view attached to the window, and
         * (3) is not hidden.
         */
        IsVisible(
            [out] Boolean* visible);

        /**
         * Return true if the fragment has been hidden.  By default fragments
         * are shown.  You can find out about changes to this state with
         * {@link #onHiddenChanged}.  Note that the hidden state is orthogonal
         * to other states -- that is, to be visible to the user, a fragment
         * must be both started and not hidden.
         */
        IsHidden(
            [out] Boolean* ishide);

        /**
         * Called when the hidden state (as returned by {@link #isHidden()} of
         * the fragment has changed.  Fragments start out not hidden; this will
         * be called whenever the fragment changes state from that.
         * @param hidden True if the fragment is now hidden, false if it is not
         * visible.
         */
        OnHiddenChanged(
            [in] Boolean changed);

        /**
         * Control whether a fragment instance is retained across Activity
         * re-creation (such as from a configuration change).  This can only
         * be used with fragments not in the back stack.  If set, the fragment
         * lifecycle will be slightly different when an activity is recreated:
         * <ul>
         * <li> {@link #onDestroy()} will not be called (but {@link #onDetach()} still
         * will be, because the fragment is being detached from its current activity).
         * <li> {@link #onCreate(Bundle)} will not be called since the fragment
         * is not being re-created.
         * <li> {@link #onAttach(Activity)} and {@link #onActivityCreated(Bundle)} <b>will</b>
         * still be called.
         * </ul>
         */
        SetRetainInstance(
            [in] Boolean retain);

        GetRetainInstance(
            [out] Boolean* instance);

        /**
         * Report that this fragment would like to participate in populating
         * the options menu by receiving a call to {@link #onCreateOptionsMenu}
         * and related methods.
         *
         * @param hasMenu If true, the fragment has menu items to contribute.
         */
        SetHasOptionsMenu(
            [in] Boolean hasMenu);

        /**
         * Set a hint for whether this fragment's menu should be visible.  This
         * is useful if you know that a fragment has been placed in your view
         * hierarchy so that the user can not currently seen it, so any menu items
         * it has should also not be shown.
         *
         * @param menuVisible The default is true, meaning the fragment's menu will
         * be shown as usual.  If false, the user will not see the menu.
         */
        SetMenuVisibility(
            [in] Boolean menuVisible);

        /**
         * Set a hint to the system about whether this fragment's UI is currently visible
         * to the user. This hint defaults to true and is persistent across fragment instance
         * state save and restore.
         *
         * <p>An app may set this to false to indicate that the fragment's UI is
         * scrolled out of visibility or is otherwise not directly visible to the user.
         * This may be used by the system to prioritize operations such as fragment lifecycle updates
         * or loader ordering behavior.</p>
         *
         * @param isVisibleToUser true if this fragment's UI is currently visible to the user (default),
         *                        false if it is not.
         */
        SetUserVisibleHint(
            [in] Boolean isVisibleToUser);

        /**
         * @return The current value of the user-visible hint on this fragment.
         * @see #setUserVisibleHint(boolean)
         */
        GetUserVisibleHint(
            [out] Boolean* isVisibleToUser);

        /**
         * Return the LoaderManager for this fragment, creating it if needed.
         */
        GetLoaderManager(
            [out] ILoaderManager** manager);

        /**
         * Call {@link Activity#startActivity(Intent)} on the fragment's
         * containing Activity.
         *
         * @param intent The intent to start.
         */
        StartActivity(
            [in] IIntent* intent);

        /**
         * Call {@link Activity#startActivity(Intent, Bundle)} on the fragment's
         * containing Activity.
         *
         * @param intent The intent to start.
         * @param options Additional options for how the Activity should be started.
         * See {@link android.content.Context#startActivity(Intent, Bundle)
         * Context.startActivity(Intent, Bundle)} for more details.
         */
        StartActivity(
            [in] IIntent* intent,
            [in] IBundle* options);

        /**
         * Call {@link Activity#startActivityForResult(Intent, int)} on the fragment's
         * containing Activity.
         */
        StartActivityForResult(
            [in] IIntent* intent,
            [in] Int32 requestCode);

        /**
         * Call {@link Activity#startActivityForResult(Intent, int, Bundle)} on the fragment's
         * containing Activity.
         */
        StartActivityForResult(
            [in] IIntent* intent,
            [in] Int32 requestCode,
            [in] IBundle* options);

        /**
         * Receive the result from a previous call to
         * {@link #startActivityForResult(Intent, int)}.  This follows the
         * related Activity API as described there in
         * {@link Activity#onActivityResult(int, int, Intent)}.
         *
         * @param requestCode The integer request code originally supplied to
         *                    startActivityForResult(), allowing you to identify who this
         *                    result came from.
         * @param resultCode The integer result code returned by the child activity
         *                   through its setResult().
         * @param data An Intent, which can return result data to the caller
         *               (various data can be attached to Intent "extras").
         */
        OnActivityResult(
            [in] Int32 requestCode,
            [in] Int32 resultCode,
            [in] IIntent* data);

        /**
         * @hide Hack so that DialogFragment can make its Dialog before creating
         * its views, and the view construction can use the dialog's context for
         * inflation.  Maybe this should become a public API. Note sure.
         */
        GetLayoutInflater(
            [in] IBundle* savedInstanceState,
            [out] ILayoutInflater** inflater);

        /**
         * @deprecated Use {@link #onInflate(Activity, AttributeSet, Bundle)} instead.
         */
        OnInflate(
            [in] IAttributeSet* attrs,
            [in] IBundle* savedInstanceState);

        /**
         * Called when a fragment is being created as part of a view layout
         * inflation, typically from setting the content view of an activity.  This
         * may be called immediately after the fragment is created from a <fragment>
         * tag in a layout file.  Note this is <em>before</em> the fragment's
         * {@link #onAttach(Activity)} has been called; all you should do here is
         * parse the attributes and save them away.
         *
         * <p>This is called every time the fragment is inflated, even if it is
         * being inflated into a new instance with saved state.  It typically makes
         * sense to re-parse the parameters each time, to allow them to change with
         * different configurations.</p>
         *
         * <p>Here is a typical implementation of a fragment that can take parameters
         * both through attributes supplied here as well from {@link #getArguments()}:</p>
         *
         * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentArguments.java
         *      fragment}
         *
         * <p>Note that parsing the XML attributes uses a "styleable" resource.  The
         * declaration for the styleable used here is:</p>
         *
         * {@sample development/samples/ApiDemos/res/values/attrs.xml fragment_arguments}
         *
         * <p>The fragment can then be declared within its activity's content layout
         * through a tag like this:</p>
         *
         * {@sample development/samples/ApiDemos/res/layout/fragment_arguments.xml from_attributes}
         *
         * <p>This fragment can also be created dynamically from arguments given
         * at runtime in the arguments Bundle; here is an example of doing so at
         * creation of the containing activity:</p>
         *
         * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentArguments.java
         *      create}
         *
         * @param activity The Activity that is inflating this fragment.
         * @param attrs The attributes at the tag where the fragment is
         * being created.
         * @param savedInstanceState If the fragment is being re-created from
         * a previous saved state, this is the state.
         */
        OnInflate(
            [in] IActivity* activity,
            [in] IAttributeSet* attrs,
            [in] IBundle* savedInstanceState);

        /**
         * Called when a fragment is first attached to its activity.
         * {@link #onCreate(Bundle)} will be called after this.
         */
        OnAttach(
            [in] IActivity* activity);

        /**
         * Called when a fragment loads an animation.
         */
        OnCreateAnimator(
            [in] Int32 transit,
            [in] Boolean enter,
            [in] Int32 nextAnim,
            [out] IAnimator** animator);

        /**
         * Called to do initial creation of a fragment.  This is called after
         * {@link #onAttach(Activity)} and before
         * {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}.
         *
         * <p>Note that this can be called while the fragment's activity is
         * still in the process of being created.  As such, you can not rely
         * on things like the activity's content view hierarchy being initialized
         * at this point.  If you want to do work once the activity itself is
         * created, see {@link #onActivityCreated(Bundle)}.
         *
         * @param savedInstanceState If the fragment is being re-created from
         * a previous saved state, this is the state.
         */
        OnCreate(
            [in] IBundle* savedInstanceState);

        /**
         * Called to have the fragment instantiate its user interface view.
         * This is optional, and non-graphical fragments can return null (which
         * is the default implementation).  This will be called between
         * {@link #onCreate(Bundle)} and {@link #onActivityCreated(Bundle)}.
         *
         * <p>If you return a View from here, you will later be called in
         * {@link #onDestroyView} when the view is being released.
         *
         * @param inflater The LayoutInflater object that can be used to inflate
         * any views in the fragment,
         * @param container If non-null, this is the parent view that the fragment's
         * UI should be attached to.  The fragment should not add the view itself,
         * but this can be used to generate the LayoutParams of the view.
         * @param savedInstanceState If non-null, this fragment is being re-constructed
         * from a previous saved state as given here.
         *
         * @return Return the View for the fragment's UI, or null.
         */
        OnCreateView(
            [in] ILayoutInflater* inflater,
            [in] IViewGroup* container,
            [in] IBundle* savedInstanceState,
            [out] IView** view);

        /**
         * Called immediately after {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}
         * has returned, but before any saved state has been restored in to the view.
         * This gives subclasses a chance to initialize themselves once
         * they know their view hierarchy has been completely created.  The fragment's
         * view hierarchy is not however attached to its parent at this point.
         * @param view The View returned by {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}.
         * @param savedInstanceState If non-null, this fragment is being re-constructed
         * from a previous saved state as given here.
         */
        OnViewCreated(
            [in] IView* view,
            [in] IBundle* savedInstanceState);

        /**
         * Get the root view for the fragment's layout (the one returned by {@link #onCreateView}),
         * if provided.
         *
         * @return The fragment's root view, or null if it has no layout.
         */
        GetView(
            [out] IView** view);

        /**
         * Called when the fragment's activity has been created and this
         * fragment's view hierarchy instantiated.  It can be used to do final
         * initialization once these pieces are in place, such as retrieving
         * views or restoring state.  It is also useful for fragments that use
         * {@link #setRetainInstance(boolean)} to retain their instance,
         * as this callback tells the fragment when it is fully associated with
         * the new activity instance.  This is called after {@link #onCreateView}
         * and before {@link #onViewStateRestored(Bundle)}.
         *
         * @param savedInstanceState If the fragment is being re-created from
         * a previous saved state, this is the state.
         */
        OnActivityCreated(
            [in] IBundle* savedInstanceState);

        /**
         * Called when all saved state has been restored into the view hierarchy
         * of the fragment.  This can be used to do initialization based on saved
         * state that you are letting the view hierarchy track itself, such as
         * whether check box widgets are currently checked.  This is called
         * after {@link #onActivityCreated(Bundle)} and before
         * {@link #onStart()}.
         *
         * @param savedInstanceState If the fragment is being re-created from
         * a previous saved state, this is the state.
         */
        OnViewStateRestored(
            [in] IBundle* savedInstanceState);

        /**
         * Called when the Fragment is visible to the user.  This is generally
         * tied to {@link Activity#onStart() Activity.onStart} of the containing
         * Activity's lifecycle.
         */
        OnStart();

        /**
         * Called when the fragment is visible to the user and actively running.
         * This is generally
         * tied to {@link Activity#onResume() Activity.onResume} of the containing
         * Activity's lifecycle.
         */
        OnResume();

        /**
         * Called to ask the fragment to save its current dynamic state, so it
         * can later be reconstructed in a new instance of its process is
         * restarted.  If a new instance of the fragment later needs to be
         * created, the data you place in the Bundle here will be available
         * in the Bundle given to {@link #onCreate(Bundle)},
         * {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}, and
         * {@link #onActivityCreated(Bundle)}.
         *
         * <p>This corresponds to {@link Activity#onSaveInstanceState(Bundle)
         * Activity.onSaveInstanceState(Bundle)} and most of the discussion there
         * applies here as well.  Note however: <em>this method may be called
         * at any time before {@link #onDestroy()}</em>.  There are many situations
         * where a fragment may be mostly torn down (such as when placed on the
         * back stack with no UI showing), but its state will not be saved until
         * its owning activity actually needs to save its state.
         *
         * @param outState Bundle in which to place your saved state.
         */
        OnSaveInstanceState(
            [in] IBundle* outState);

        OnConfigurationChanged(
            [in] IConfiguration* newConfig);

        /**
         * Called when the Fragment is no longer resumed.  This is generally
         * tied to {@link Activity#onPause() Activity.onPause} of the containing
         * Activity's lifecycle.
         */
        OnPause();

        /**
         * Called when the Fragment is no longer started.  This is generally
         * tied to {@link Activity#onStop() Activity.onStop} of the containing
         * Activity's lifecycle.
         */
        OnStop();

        OnLowMemory();

        OnTrimMemory(
            [in] Int32* level);

        /**
         * Called when the view previously created by {@link #onCreateView} has
         * been detached from the fragment.  The next time the fragment needs
         * to be displayed, a new view will be created.  This is called
         * after {@link #onStop()} and before {@link #onDestroy()}.  It is called
         * <em>regardless</em> of whether {@link #onCreateView} returned a
         * non-null view.  Internally it is called after the view's state has
         * been saved but before it has been removed from its parent.
         */
        OnDestroyView();

        /**
         * Called when the fragment is no longer in use.  This is called
         * after {@link #onStop()} and before {@link #onDetach()}.
         */
        OnDestroy();

        /**
         * Called when the fragment is no longer attached to its activity.  This
         * is called after {@link #onDestroy()}.
         */
        OnDetach();

        /**
         * Initialize the contents of the Activity's standard options menu.  You
         * should place your menu items in to <var>menu</var>.  For this method
         * to be called, you must have first called {@link #setHasOptionsMenu}.  See
         * {@link Activity#onCreateOptionsMenu(Menu) Activity.onCreateOptionsMenu}
         * for more information.
         *
         * @param menu The options menu in which you place your items.
         *
         * @see #setHasOptionsMenu
         * @see #onPrepareOptionsMenu
         * @see #onOptionsItemSelected
         */
        OnCreateOptionsMenu(
            [in] IMenu* menu,
            [in] IMenuInflater* inflater);

        /**
         * Prepare the Screen's standard options menu to be displayed.  This is
         * called right before the menu is shown, every time it is shown.  You can
         * use this method to efficiently enable/disable items or otherwise
         * dynamically modify the contents.  See
         * {@link Activity#onPrepareOptionsMenu(Menu) Activity.onPrepareOptionsMenu}
         * for more information.
         *
         * @param menu The options menu as last shown or first initialized by
         *             onCreateOptionsMenu().
         *
         * @see #setHasOptionsMenu
         * @see #onCreateOptionsMenu
         */
        OnPrepareOptionsMenu(
            [in] IMenu* menu);

        /**
         * Called when this fragment's option menu items are no longer being
         * included in the overall options menu.  Receiving this call means that
         * the menu needed to be rebuilt, but this fragment's items were not
         * included in the newly built menu (its {@link #onCreateOptionsMenu(Menu, MenuInflater)}
         * was not called).
         */
        OnDestroyOptionsMenu();

        /**
         * This hook is called whenever an item in your options menu is selected.
         * The default implementation simply returns false to have the normal
         * processing happen (calling the item's Runnable or sending a message to
         * its Handler as appropriate).  You can use this method for any items
         * for which you would like to do processing without those other
         * facilities.
         *
         * <p>Derived classes should call through to the base class for it to
         * perform the default menu handling.
         *
         * @param item The menu item that was selected.
         *
         * @return boolean Return false to allow normal menu processing to
         *         proceed, true to consume it here.
         *
         * @see #onCreateOptionsMenu
         */
        OnOptionsItemSelected(
            [in] IMenuItem* item,
            [out] Boolean* selected);

        /**
         * This hook is called whenever the options menu is being closed (either by the user canceling
         * the menu with the back/menu button, or when an item is selected).
         *
         * @param menu The options menu as last shown or first initialized by
         *             onCreateOptionsMenu().
         */
        OnOptionsMenuClosed(
            [in] IMenu* menu);

        /**
         * Called when a context menu for the {@code view} is about to be shown.
         * Unlike {@link #onCreateOptionsMenu}, this will be called every
         * time the context menu is about to be shown and should be populated for
         * the view (or item inside the view for {@link AdapterView} subclasses,
         * this can be found in the {@code menuInfo})).
         * <p>
         * Use {@link #onContextItemSelected(android.view.MenuItem)} to know when an
         * item has been selected.
         * <p>
         * The default implementation calls up to
         * {@link Activity#onCreateContextMenu Activity.onCreateContextMenu}, though
         * you can not call this implementation if you don't want that behavior.
         * <p>
         * It is not safe to hold onto the context menu after this method returns.
         * {@inheritDoc}
         */
        OnCreateContextMenu(
            [in] IContextMenu* menu,
            [in] IView* v,
            [in] IContextMenuInfo* menuInfo);

        /**
         * Registers a context menu to be shown for the given view (multiple views
         * can show the context menu). This method will set the
         * {@link OnCreateContextMenuListener} on the view to this fragment, so
         * {@link #onCreateContextMenu(ContextMenu, View, ContextMenuInfo)} will be
         * called when it is time to show the context menu.
         *
         * @see #unregisterForContextMenu(View)
         * @param view The view that should show a context menu.
         */
        RegisterForContextMenu(
            [in] IView* view);

        /**
         * Prevents a context menu to be shown for the given view. This method will
         * remove the {@link OnCreateContextMenuListener} on the view.
         *
         * @see #registerForContextMenu(View)
         * @param view The view that should stop showing a context menu.
         */
        UnregisterForContextMenu(
            [in] IView* view);

        /**
         * This hook is called whenever an item in a context menu is selected. The
         * default implementation simply returns false to have the normal processing
         * happen (calling the item's Runnable or sending a message to its Handler
         * as appropriate). You can use this method for any items for which you
         * would like to do processing without those other facilities.
         * <p>
         * Use {@link MenuItem#getMenuInfo()} to get extra information set by the
         * View that added this menu item.
         * <p>
         * Derived classes should call through to the base class for it to perform
         * the default menu handling.
         *
         * @param item The context menu item that was selected.
         * @return boolean Return false to allow normal context menu processing to
         *         proceed, true to consume it here.
         */
        OnContextItemSelected(
            [in] IMenuItem* item,
            [out] Boolean* selected);

        /**
         * When custom transitions are used with Fragments, the enter transition callback
         * is called when this Fragment is attached or detached when not popping the back stack.
         *
         * @param callback Used to manipulate the shared element transitions on this Fragment
         *                 when added not as a pop from the back stack.
         */
        SetEnterSharedElementCallback(
            [in] ISharedElementCallback* cb);

        /**
         * When custom transitions are used with Fragments, the exit transition callback
         * is called when this Fragment is attached or detached when popping the back stack.
         *
         * @param callback Used to manipulate the shared element transitions on this Fragment
         *                 when added as a pop from the back stack.
         */
        SetExitSharedElementCallback(
            [in] ISharedElementCallback* cb);

        /**
         * Sets the Transition that will be used to move Views into the initial scene. The entering
         * Views will be those that are regular Views or ViewGroups that have
         * {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend
         * {@link android.transition.Visibility} as entering is governed by changing visibility from
         * {@link View#INVISIBLE} to {@link View#VISIBLE}. If <code>transition</code> is null,
         * entering Views will remain unaffected.
         *
         * @param transition The Transition to use to move Views into the initial Scene.
         * @attr ref android.R.styleable#Fragment_fragmentEnterTransition
         */
        SetEnterTransition(
            [in] ITransition* transition);

        /**
         * Returns the Transition that will be used to move Views into the initial scene. The entering
         * Views will be those that are regular Views or ViewGroups that have
         * {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend
         * {@link android.transition.Visibility} as entering is governed by changing visibility from
         * {@link View#INVISIBLE} to {@link View#VISIBLE}.
         *
         * @return the Transition to use to move Views into the initial Scene.
         * @attr ref android.R.styleable#Fragment_fragmentEnterTransition
         */
        GetEnterTransition(
            [out] ITransition** transition);

        /**
         * Sets the Transition that will be used to move Views out of the scene when the Fragment is
         * preparing to be removed, hidden, or detached because of popping the back stack. The exiting
         * Views will be those that are regular Views or ViewGroups that have
         * {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend
         * {@link android.transition.Visibility} as entering is governed by changing visibility from
         * {@link View#VISIBLE} to {@link View#INVISIBLE}. If <code>transition</code> is null,
         * entering Views will remain unaffected. If nothing is set, the default will be to
         * use the same value as set in {@link #setEnterTransition(android.transition.Transition)}.
         *
         * @param transition The Transition to use to move Views out of the Scene when the Fragment
         *                   is preparing to close.
         * @attr ref android.R.styleable#Fragment_fragmentExitTransition
         */
        SetReturnTransition(
            [in] ITransition* transition);

        /**
         * Returns the Transition that will be used to move Views out of the scene when the Fragment is
         * preparing to be removed, hidden, or detached because of popping the back stack. The exiting
         * Views will be those that are regular Views or ViewGroups that have
         * {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend
         * {@link android.transition.Visibility} as entering is governed by changing visibility from
         * {@link View#VISIBLE} to {@link View#INVISIBLE}. If <code>transition</code> is null,
         * entering Views will remain unaffected.
         *
         * @return the Transition to use to move Views out of the Scene when the Fragment
         *         is preparing to close.
         * @attr ref android.R.styleable#Fragment_fragmentExitTransition
         */
        GetReturnTransition(
            [out] ITransition** transition);

        /**
         * Sets the Transition that will be used to move Views out of the scene when the
         * fragment is removed, hidden, or detached when not popping the back stack.
         * The exiting Views will be those that are regular Views or ViewGroups that
         * have {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend
         * {@link android.transition.Visibility} as exiting is governed by changing visibility
         * from {@link View#VISIBLE} to {@link View#INVISIBLE}. If transition is null, the views will
         * remain unaffected.
         *
         * @param transition The Transition to use to move Views out of the Scene when the Fragment
         *                   is being closed not due to popping the back stack.
         * @attr ref android.R.styleable#Fragment_fragmentExitTransition
         */
        SetExitTransition(
            [in] ITransition* transition);

        /**
         * Returns the Transition that will be used to move Views out of the scene when the
         * fragment is removed, hidden, or detached when not popping the back stack.
         * The exiting Views will be those that are regular Views or ViewGroups that
         * have {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend
         * {@link android.transition.Visibility} as exiting is governed by changing visibility
         * from {@link View#VISIBLE} to {@link View#INVISIBLE}. If transition is null, the views will
         * remain unaffected.
         *
         * @return the Transition to use to move Views out of the Scene when the Fragment
         *         is being closed not due to popping the back stack.
         * @attr ref android.R.styleable#Fragment_fragmentExitTransition
         */
        GetExitTransition(
            [out] ITransition** transition);

        /**
         * Sets the Transition that will be used to move Views in to the scene when returning due
         * to popping a back stack. The entering Views will be those that are regular Views
         * or ViewGroups that have {@link ViewGroup#isTransitionGroup} return true. Typical Transitions
         * will extend {@link android.transition.Visibility} as exiting is governed by changing
         * visibility from {@link View#VISIBLE} to {@link View#INVISIBLE}. If transition is null,
         * the views will remain unaffected. If nothing is set, the default will be to use the same
         * transition as {@link #setExitTransition(android.transition.Transition)}.
         *
         * @param transition The Transition to use to move Views into the scene when reentering from a
         *                   previously-started Activity.
         * @attr ref android.R.styleable#Fragment_fragmentReenterTransition
         */
        SetReenterTransition(
            [in] ITransition* transition);

        /**
         * Returns the Transition that will be used to move Views in to the scene when returning due
         * to popping a back stack. The entering Views will be those that are regular Views
         * or ViewGroups that have {@link ViewGroup#isTransitionGroup} return true. Typical Transitions
         * will extend {@link android.transition.Visibility} as exiting is governed by changing
         * visibility from {@link View#VISIBLE} to {@link View#INVISIBLE}. If transition is null,
         * the views will remain unaffected. If nothing is set, the default will be to use the same
         * transition as {@link #setExitTransition(android.transition.Transition)}.
         *
         * @return the Transition to use to move Views into the scene when reentering from a
         *                   previously-started Activity.
         * @attr ref android.R.styleable#Fragment_fragmentReenterTransition
         */
        GetReenterTransition(
            [out] ITransition** transition);

        /**
         * Sets the Transition that will be used for shared elements transferred into the content
         * Scene. Typical Transitions will affect size and location, such as
         * {@link android.transition.ChangeBounds}. A null
         * value will cause transferred shared elements to blink to the final position.
         *
         * @param transition The Transition to use for shared elements transferred into the content
         *                   Scene.
         * @attr ref android.R.styleable#Fragment_fragmentSharedElementEnterTransition
         */
        SetSharedElementEnterTransition(
            [in] ITransition* transition);

        /**
         * Returns the Transition that will be used for shared elements transferred into the content
         * Scene. Typical Transitions will affect size and location, such as
         * {@link android.transition.ChangeBounds}. A null
         * value will cause transferred shared elements to blink to the final position.
         *
         * @return The Transition to use for shared elements transferred into the content
         *                   Scene.
         * @attr ref android.R.styleable#Fragment_fragmentSharedElementEnterTransition
         */
        GetSharedElementEnterTransition(
            [out] ITransition** transition);

        /**
         * Sets the Transition that will be used for shared elements transferred back during a
         * pop of the back stack. This Transition acts in the leaving Fragment.
         * Typical Transitions will affect size and location, such as
         * {@link android.transition.ChangeBounds}. A null
         * value will cause transferred shared elements to blink to the final position.
         * If no value is set, the default will be to use the same value as
         * {@link #setSharedElementEnterTransition(android.transition.Transition)}.
         *
         * @param transition The Transition to use for shared elements transferred out of the content
         *                   Scene.
         * @attr ref android.R.styleable#Fragment_fragmentSharedElementReturnTransition
         */
        SetSharedElementReturnTransition(
            [in] ITransition* transition);

        /**
         * Return the Transition that will be used for shared elements transferred back during a
         * pop of the back stack. This Transition acts in the leaving Fragment.
         * Typical Transitions will affect size and location, such as
         * {@link android.transition.ChangeBounds}. A null
         * value will cause transferred shared elements to blink to the final position.
         * If no value is set, the default will be to use the same value as
         * {@link #setSharedElementEnterTransition(android.transition.Transition)}.
         *
         * @return The Transition to use for shared elements transferred out of the content
         *                   Scene.
         * @attr ref android.R.styleable#Fragment_fragmentSharedElementReturnTransition
         */
        GetSharedElementReturnTransition(
            [out] ITransition** transition);

        /**
         * Sets whether the the exit transition and enter transition overlap or not.
         * When true, the enter transition will start as soon as possible. When false, the
         * enter transition will wait until the exit transition completes before starting.
         *
         * @param allow true to start the enter transition when possible or false to
         *              wait until the exiting transition completes.
         * @attr ref android.R.styleable#Fragment_fragmentAllowEnterTransitionOverlap
         */
        SetAllowEnterTransitionOverlap(
            [in] Boolean allow);

        /**
         * Returns whether the the exit transition and enter transition overlap or not.
         * When true, the enter transition will start as soon as possible. When false, the
         * enter transition will wait until the exit transition completes before starting.
         *
         * @return true when the enter transition should start as soon as possible or false to
         * when it should wait until the exiting transition completes.
         * @attr ref android.R.styleable#Fragment_fragmentAllowEnterTransitionOverlap
         */
        GetAllowEnterTransitionOverlap(
            [out] Boolean* result);

        /**
         * Sets whether the the return transition and reenter transition overlap or not.
         * When true, the reenter transition will start as soon as possible. When false, the
         * reenter transition will wait until the return transition completes before starting.
         *
         * @param allow true to start the reenter transition when possible or false to wait until the
         *              return transition completes.
         * @attr ref android.R.styleable#Fragment_fragmentAllowReturnTransitionOverlap
         */
         SetAllowReturnTransitionOverlap(
            [in] Boolean allow);

        /**
         * Returns whether the the return transition and reenter transition overlap or not.
         * When true, the reenter transition will start as soon as possible. When false, the
         * reenter transition will wait until the return transition completes before starting.
         *
         * @return true to start the reenter transition when possible or false to wait until the
         *         return transition completes.
         * @attr ref android.R.styleable#Fragment_fragmentAllowReturnTransitionOverlap
         */
        GetAllowReturnTransitionOverlap(
            [out] Boolean* result);

        Dump(
            [in] String prefix,
            [in] IFileDescriptor* fd,
            [in] IPrintWriter* writer,
            [in] ArrayOf<String>* args);

        PerformCreate(
            [in] IBundle* savedInstanceState);

        PerformCreateView(
            [in] ILayoutInflater* inflater,
            [in] IViewGroup* container,
            [in] IBundle* savedInstanceState,
            [out] IView** v);

        PerformActivityCreated(
            [in] IBundle* savedInstanceState);

        PerformStart();

        RestoreViewState(
            [in] IBundle* savedInstanceState);

        PerformResume();

        PerformConfigurationChanged(
            [in] IConfiguration* newConfig);

        PerformLowMemory();

        PerformTrimMemory(
            [in] Int32 level);

        PerformCreateOptionsMenu(
            [in] IMenu* menu,
            [in] IMenuInflater* inflater,
            [out] Boolean* result);

        PerformPrepareOptionsMenu(
            [in] IMenu* menu,
            [out] Boolean* result);

        PerformOptionsItemSelected(
            [in] IMenuItem* item,
            [out] Boolean* result);

        PerformContextItemSelected(
            [in] IMenuItem* item,
            [out] Boolean* result);

        PerformOptionsMenuClosed(
            [in] IMenu* item,
            [out] Boolean* result);

        PerformSaveInstanceState(
            [in] IBundle* outState);

        PerformPause();

        PerformStop();

        PerformDestroyView();

        PerformDestroy();

        InitState();

        IsInBackStack(
            [out] Boolean* inbs);

        FindFragmentByWho(
            [in] String who,
            [out] IFragment** fragment);
    }


    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
