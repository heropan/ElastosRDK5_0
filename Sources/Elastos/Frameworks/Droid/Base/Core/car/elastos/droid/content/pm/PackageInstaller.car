
module
{
    using interface Elastos.Core.ICharSequence;
    using interface Elastos.IO.IOutputStream;
    using interface Elastos.IO.IInputStream;
    using interface Elastos.Utility.IList;

    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Content.IIntentSender;
    interface Elastos.Droid.Net.IUri;

    namespace Elastos {
    namespace Droid {
    namespace Content {
    namespace Pm {

    /**
     * Events for observing session lifecycle.
     * <p>
     * A typical session lifecycle looks like this:
     * <ul>
     * <li>An installer creates a session to indicate pending app delivery. All
     * install details are available at this point.
     * <li>The installer opens the session to deliver APK data. Note that a
     * session may be opened and closed multiple times as network connectivity
     * changes. The installer may deliver periodic progress updates.
     * <li>The installer commits or abandons the session, resulting in the
     * session being finished.
     * </ul>
     */
    interface IPackageInstallerSessionCallback {
        /**
         * New session has been created. Details about the session can be
         * obtained from {@link PackageInstaller#getSessionInfo(int)}.
         */
        OnCreated(
            [in] Int32 sessionId);

        /**
         * Badging details for an existing session has changed. For example, the
         * app icon or label has been updated.
         */
        OnBadgingChanged(
            [in] Int32 sessionId);

        /**
         * Active state for session has been changed.
         * <p>
         * A session is considered active whenever there is ongoing forward
         * progress being made, such as the installer holding an open
         * {@link Session} instance while streaming data into place, or the
         * system optimizing code as the result of
         * {@link Session#commit(IntentSender)}.
         * <p>
         * If the installer closes the {@link Session} without committing, the
         * session is considered inactive until the installer opens the session
         * again.
         */
        OnActiveChanged(
            [in] Int32 sessionId,
            [in] Boolean active);

        /**
         * Progress for given session has been updated.
         * <p>
         * Note that this progress may not directly correspond to the value
         * reported by
         * {@link PackageInstaller.Session#setStagingProgress(float)}, as the
         * system may carve out a portion of the overall progress to represent
         * its own internal installation work.
         */
        OnProgressChanged(
            [in] Int32 sessionId,
            [in] Float progress);

        /**
         * Session has completely finished, either with success or failure.
         */
        OnFinished(
            [in] Int32 sessionId,
            [in] Boolean success);
    }

    /**
     * An installation that is being actively staged. For an install to succeed,
     * all existing and new packages must have identical package names, version
     * codes, and signing certificates.
     * <p>
     * A session may contain any number of split packages. If the application
     * does not yet exist, this session must include a base package.
     * <p>
     * If an APK included in this session is already defined by the existing
     * installation (for example, the same split name), the APK in this session
     * will replace the existing APK.
     */
    /**
     * @Involve
     * interface ICloseable
     */
    interface IPackageInstallerSession {
        /**
         * Set current progress of staging this session. Valid values are
         * anywhere between 0 and 1.
         * <p>
         * Note that this progress may not directly correspond to the value
         * reported by {@link SessionCallback#onProgressChanged(int, float)}, as
         * the system may carve out a portion of the overall progress to
         * represent its own internal installation work.
         */
        SetStagingProgress(
            [in] Float progress);

        /**
         * Open a stream to write an APK file into the session.
         * <p>
         * The returned stream will start writing data at the requested offset
         * in the underlying file, which can be used to resume a partially
         * written file. If a valid file length is specified, the system will
         * preallocate the underlying disk space to optimize placement on disk.
         * It's strongly recommended to provide a valid file length when known.
         * <p>
         * You can write data into the returned stream, optionally call
         * {@link #fsync(OutputStream)} as needed to ensure bytes have been
         * persisted to disk, and then close when finished. All streams must be
         * closed before calling {@link #commit(IntentSender)}.
         *
         * @param name arbitrary, unique name of your choosing to identify the
         *            APK being written. You can open a file again for
         *            additional writes (such as after a reboot) by using the
         *            same name. This name is only meaningful within the context
         *            of a single install session.
         * @param offsetBytes offset into the file to begin writing at, or 0 to
         *            start at the beginning of the file.
         * @param lengthBytes total size of the file being written, used to
         *            preallocate the underlying disk space, or -1 if unknown.
         *            The system may clear various caches as needed to allocate
         *            this space.
         * @throws IOException if trouble opening the file for writing, such as
         *             lack of disk space or unavailable media.
         * @throws SecurityException if called after the session has been
         *             committed or abandoned.
         */
        OpenWrite(
            [in] String name,
            [in] Int64 offsetBytes,
            [in] Int64 lengthBytes,
            [out] IOutputStream** stream);

        /**
         * Ensure that any outstanding data for given stream has been committed
         * to disk. This is only valid for streams returned from
         * {@link #openWrite(String, long, long)}.
         */
        Fsync(
            [in] IOutputStream* stream);

        /**
         * Return all APK names contained in this session.
         * <p>
         * This returns all names which have been previously written through
         * {@link #openWrite(String, long, long)} as part of this session.
         *
         * @throws SecurityException if called after the session has been
         *             committed or abandoned.
         */
        GetNames(
            [out, callee] ArrayOf<String>* names);

        /**
         * Open a stream to read an APK file from the session.
         * <p>
         * This is only valid for names which have been previously written
         * through {@link #openWrite(String, long, long)} as part of this
         * session. For example, this stream may be used to calculate a
         * {@link MessageDigest} of a written APK before committing.
         *
         * @throws SecurityException if called after the session has been
         *             committed or abandoned.
         */
        OpenRead(
            [in] String name,
            [out] IInputStream** stream);

        /**
         * Attempt to commit everything staged in this session. This may require
         * user intervention, and so it may not happen immediately. The final
         * result of the commit will be reported through the given callback.
         * <p>
         * Once this method is called, no additional mutations may be performed
         * on the session. If the device reboots before the session has been
         * finalized, you may commit the session again.
         *
         * @throws SecurityException if streams opened through
         *             {@link #openWrite(String, long, long)} are still open.
         */
        Commit(
            [in] IIntentSender* statusReceiver);

        /**
         * Release this session object. You can open the session again if it
         * hasn't been finalized.
         */
        Close();

        /**
         * Completely abandon this session, destroying all staged data and
         * rendering it invalid. Abandoned sessions will be reported to
         * {@link SessionCallback} listeners as failures. This is equivalent to
         * opening the session and calling {@link Session#abandon()}.
         */
        Abandon();
    }

    /**
     * Parameters for creating a new {@link PackageInstaller.Session}.
     */
    /**
     * @Involve
     * interface IParcelable
     */
    interface IPackageInstallerSessionParams {
        /** {@hide} */
        const Int32 MODE_INVALID = -1;

        /**
         * Mode for an install session whose staged APKs should fully replace any
         * existing APKs for the target app.
         */
        const Int32 MODE_FULL_INSTALL = 1;

        /**
         * Mode for an install session that should inherit any existing APKs for the
         * target app, unless they have been explicitly overridden (based on split
         * name) by the session. For example, this can be used to add one or more
         * split APKs to an existing installation.
         * <p>
         * If there are no existing APKs for the target app, this behaves like
         * {@link #MODE_FULL_INSTALL}.
         */
        const Int32 MODE_INHERIT_EXISTING = 2;

        SetMode(
            [in] Int32 mode);

        SetInstallFlags(
            [in] Int32 flags);

        /**
         * Provide value of {@link PackageInfo#installLocation}, which may be used
         * to determine where the app will be staged. Defaults to
         * {@link PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY}.
         */
        SetInstallLocation(
            [in] Int32 installLocation);

        SetSizeBytes(
            [in] Int64 bytes);

        /**
         * Optionally indicate the total size (in bytes) of all APKs that will be
         * delivered in this session. The system may use this to ensure enough disk
         * space exists before proceeding, or to estimate container size for
         * installations living on external storage.
         *
         * @see PackageInfo#INSTALL_LOCATION_AUTO
         * @see PackageInfo#INSTALL_LOCATION_PREFER_EXTERNAL
         */
        SetSize(
            [in] Int64 installLocation);

        /**
         * Optionally set the package name of the app being installed. It's strongly
         * recommended that you provide this value when known, so that observers can
         * communicate installing apps to users.
         * <p>
         * If the APKs staged in the session aren't consistent with this package
         * name, the install will fail. Regardless of this value, all APKs in the
         * app must have the same package name.
         */
        SetAppPackageName(
            [in] String appPackageName);

        /**
         * Optionally set an icon representing the app being installed. This should
         * be roughly {@link ActivityManager#getLauncherLargeIconSize()} in both
         * dimensions.
         */
        SetAppIcon(
            [in] IBitmap* appIcon);

        /**
         * Optionally set a label representing the app being installed.
         */
        SetAppLabel(
            [in] ICharSequence* appLabel);

        SetAppIconLastModified(
            [in] Int64 lastModified);

        /**
         * Optionally set the URI where this package was downloaded from. Used for
         * verification purposes.
         *
         * @see Intent#EXTRA_ORIGINATING_URI
         */
        SetOriginatingUri(
            [in] IUri* originatingUri);

        /**
         * Optionally set the URI that referred you to install this package. Used
         * for verification purposes.
         *
         * @see Intent#EXTRA_REFERRER
         */
        SetReferrerUri(
            [in] IUri* referrerUri);

        SetInstallFlagsInternal();

        SetInstallFlagsExternal();

        SetAbiOverride(
            [in] String abiOverride);

        GetMode(
            [out] Int32* mode);

        GetInstallFlags(
            [out] Int32* flags);

        GetInstallLocation(
            [out] Int32* loc);

        GetSizeBytes(
            [out] Int64* bytes);

        GetAppPackageName(
            [out] String* name);

        GetAppIcon(
            [out] IBitmap** icon);

        GetAppLabel(
            [out] String* label);

        GetAppIconLastModified(
            [out] Int64* lastModified);

        GetOriginatingUri(
            [out] IUri** uri);

        GetReferrerUri(
            [out] IUri** uri);

        GetAbiOverride(
            [out] String* override);
    }


    /**
     * Details for an active install session.
     */
    /**
     * @Involve
     * interface IParcelable
     */
    [local]
    interface IPackageInstallerSessionInfo {

        SetSessionId(
            [in] Int32 id);

        /**
         * Return the ID for this session.
         */
        GetSessionId(
            [out] Int32* id);

        SetInstallerPackageName(
            [in] String packageName);

        /**
         * Return the package name of the app that owns this session.
         */
        GetInstallerPackageName(
            [out] String* name);

        SetResolvedBaseCodePath(
            [in] String path);

        GetResolvedBaseCodePath(
            [out] String* path);

        SetProgress(
            [in] Float progress);

        /**
         * Return current overall progress of this session, between 0 and 1.
         * <p>
         * Note that this progress may not directly correspond to the value
         * reported by
         * {@link PackageInstaller.Session#setStagingProgress(float)}, as the
         * system may carve out a portion of the overall progress to represent
         * its own internal installation work.
         */
        GetProgress(
            [out] Float* progress);

        SetSealed(
            [in] Boolean sealed);

        IsSealed(
            [out] Boolean* isSealed);

        SetActive(
            [in] Boolean active);

        /**
         * Return if this session is currently active.
         * <p>
         * A session is considered active whenever there is ongoing forward
         * progress being made, such as the installer holding an open
         * {@link Session} instance while streaming data into place, or the
         * system optimizing code as the result of
         * {@link Session#commit(IntentSender)}.
         * <p>
         * If the installer closes the {@link Session} without committing, the
         * session is considered inactive until the installer opens the session
         * again.
         */
        IsActive(
            [out] Boolean* active);

        IsOpen(
            [out] Boolean* open);

        SetMode(
            [in] Int32 mode);

        GetMode(
            [out] Int32* mode);

        SetSizeBytes(
            [in] Int64 sizeBytes);

        GetSizeBytes(
            [out] Int64* sizeBytes);

        SetAppPackageName(
            [in] String name);

        /**
         * Return the package name this session is working with. May be {@code null}
         * if unknown.
         */
        GetAppPackageName(
            [out] String* name);

        SetAppIcon(
            [in] IBitmap* icon);

        /**
         * Return an icon representing the app being installed. May be {@code null}
         * if unavailable.
         */
        GetAppIcon(
            [out] IBitmap** icon);

        SetAppLabel(
            [in] ICharSequence* label);

        /**
         * Return a label representing the app being installed. May be {@code null}
         * if unavailable.
         */
        GetAppLabel(
            [out] ICharSequence** label);

        /**
         * Return an Intent that can be started to view details about this install
         * session. This may surface actions such as pause, resume, or cancel.
         * <p>
         * In some cases, a matching Activity may not exist, so ensure you safeguard
         * against this.
         *
         * @see PackageInstaller#ACTION_SESSION_DETAILS
         */
        CreateDetailsIntent(
            [out] IIntent** intent);
    }


    /**
     * Offers the ability to install, upgrade, and remove applications on the
     * device. This includes support for apps packaged either as a single
     * "monolithic" APK, or apps packaged as multiple "split" APKs.
     * <p>
     * An app is delivered for installation through a
     * {@link PackageInstaller.Session}, which any app can create. Once the session
     * is created, the installer can stream one or more APKs into place until it
     * decides to either commit or destroy the session. Committing may require user
     * intervention to complete the installation.
     * <p>
     * Sessions can install brand new apps, upgrade existing apps, or add new splits
     * into an existing app.
     * <p>
     * Apps packaged as multiple split APKs always consist of a single "base" APK
     * (with a {@code null} split name) and zero or more "split" APKs (with unique
     * split names). Any subset of these APKs can be installed together, as long as
     * the following constraints are met:
     * <ul>
     * <li>All APKs must have the exact same package name, version code, and signing
     * certificates.
     * <li>All APKs must have unique split names.
     * <li>All installations must contain a single base APK.
     * </ul>
     */
    [deprecated, local]
    interface IPackageInstaller {

        /**
         * Activity Action: Show details about a particular install session. This
         * may surface actions such as pause, resume, or cancel.
         * <p>
         * This should always be scoped to the installer package that owns the
         * session. Clients should use {@link SessionInfo#createDetailsIntent()} to
         * build this intent correctly.
         * <p>
         * In some cases, a matching Activity may not exist, so ensure you safeguard
         * against this.
         * <p>
         * The session to show details for is defined in {@link #EXTRA_SESSION_ID}.
         */
        //@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
        const String ACTION_SESSION_DETAILS = "android.content.pm.action.SESSION_DETAILS";

        /** {@hide} */
        const String
                ACTION_CONFIRM_PERMISSIONS = "android.content.pm.action.CONFIRM_PERMISSIONS";

        /**
         * An integer session ID that an operation is working with.
         *
         * @see Intent#getIntExtra(String, int)
         */
        const String EXTRA_SESSION_ID = "android.content.pm.extra.SESSION_ID";

        /**
         * Package name that an operation is working with.
         *
         * @see Intent#getStringExtra(String)
         */
        const String EXTRA_PACKAGE_NAME = "android.content.pm.extra.PACKAGE_NAME";

        /**
         * Current status of an operation. Will be one of
         * {@link #STATUS_PENDING_USER_ACTION}, {@link #STATUS_SUCCESS},
         * {@link #STATUS_FAILURE}, {@link #STATUS_FAILURE_ABORTED},
         * {@link #STATUS_FAILURE_BLOCKED}, {@link #STATUS_FAILURE_CONFLICT},
         * {@link #STATUS_FAILURE_INCOMPATIBLE}, {@link #STATUS_FAILURE_INVALID}, or
         * {@link #STATUS_FAILURE_STORAGE}.
         * <p>
         * More information about a status may be available through additional
         * extras; see the individual status documentation for details.
         *
         * @see Intent#getIntExtra(String, int)
         */
        const String EXTRA_STATUS = "android.content.pm.extra.STATUS";

        /**
         * Detailed string representation of the status, including raw details that
         * are useful for debugging.
         *
         * @see Intent#getStringExtra(String)
         */
        const String EXTRA_STATUS_MESSAGE = "android.content.pm.extra.STATUS_MESSAGE";

        /**
         * Another package name relevant to a status. This is typically the package
         * responsible for causing an operation failure.
         *
         * @see Intent#getStringExtra(String)
         */
        const String
                EXTRA_OTHER_PACKAGE_NAME = "android.content.pm.extra.OTHER_PACKAGE_NAME";

        /**
         * Storage path relevant to a status.
         *
         * @see Intent#getStringExtra(String)
         */
        const String EXTRA_STORAGE_PATH = "android.content.pm.extra.STORAGE_PATH";

        /** {@hide} */
        //@Deprecated
        const String EXTRA_PACKAGE_NAMES = "android.content.pm.extra.PACKAGE_NAMES";

        /** {@hide} */
        const String EXTRA_LEGACY_STATUS = "android.content.pm.extra.LEGACY_STATUS";
        /** {@hide} */
        const String EXTRA_LEGACY_BUNDLE = "android.content.pm.extra.LEGACY_BUNDLE";
        /** {@hide} */
        const String EXTRA_CALLBACK = "android.content.pm.extra.CALLBACK";

        /**
         * User action is currently required to proceed. You can launch the intent
         * activity described by {@link Intent#EXTRA_INTENT} to involve the user and
         * continue.
         * <p>
         * You may choose to immediately launch the intent if the user is actively
         * using your app. Otherwise, you should use a notification to guide the
         * user back into your app before launching.
         *
         * @see Intent#getParcelableExtra(String)
         */
        const Int32 STATUS_PENDING_USER_ACTION = -1;

        /**
         * The operation succeeded.
         */
        const Int32 STATUS_SUCCESS = 0;

        /**
         * The operation failed in a generic way. The system will always try to
         * provide a more specific failure reason, but in some rare cases this may
         * be delivered.
         *
         * @see #EXTRA_STATUS_MESSAGE
         */
        const Int32 STATUS_FAILURE = 1;

        /**
         * The operation failed because it was blocked. For example, a device policy
         * may be blocking the operation, a package verifier may have blocked the
         * operation, or the app may be required for core system operation.
         * <p>
         * The result may also contain {@link #EXTRA_OTHER_PACKAGE_NAME} with the
         * specific package blocking the install.
         *
         * @see #EXTRA_STATUS_MESSAGE
         * @see #EXTRA_OTHER_PACKAGE_NAME
         */
        const Int32 STATUS_FAILURE_BLOCKED = 2;

        /**
         * The operation failed because it was actively aborted. For example, the
         * user actively declined requested permissions, or the session was
         * abandoned.
         *
         * @see #EXTRA_STATUS_MESSAGE
         */
        const Int32 STATUS_FAILURE_ABORTED = 3;

        /**
         * The operation failed because one or more of the APKs was invalid. For
         * example, they might be malformed, corrupt, incorrectly signed,
         * mismatched, etc.
         *
         * @see #EXTRA_STATUS_MESSAGE
         */
        const Int32 STATUS_FAILURE_INVALID = 4;

        /**
         * The operation failed because it conflicts (or is inconsistent with) with
         * another package already installed on the device. For example, an existing
         * permission, incompatible certificates, etc. The user may be able to
         * uninstall another app to fix the issue.
         * <p>
         * The result may also contain {@link #EXTRA_OTHER_PACKAGE_NAME} with the
         * specific package identified as the cause of the conflict.
         *
         * @see #EXTRA_STATUS_MESSAGE
         * @see #EXTRA_OTHER_PACKAGE_NAME
         */
        const Int32 STATUS_FAILURE_CONFLICT = 5;

        /**
         * The operation failed because of storage issues. For example, the device
         * may be running low on space, or external media may be unavailable. The
         * user may be able to help free space or insert different external media.
         * <p>
         * The result may also contain {@link #EXTRA_STORAGE_PATH} with the path to
         * the storage device that caused the failure.
         *
         * @see #EXTRA_STATUS_MESSAGE
         * @see #EXTRA_STORAGE_PATH
         */
        const Int32 STATUS_FAILURE_STORAGE = 6;

        /**
         * The operation failed because it is fundamentally incompatible with this
         * device. For example, the app may require a hardware feature that doesn't
         * exist, it may be missing native code for the ABIs supported by the
         * device, or it requires a newer SDK version, etc.
         *
         * @see #EXTRA_STATUS_MESSAGE
         */
        const Int32 STATUS_FAILURE_INCOMPATIBLE = 7;

        /**
         * Create a new session using the given parameters, returning a unique ID
         * that represents the session. Once created, the session can be opened
         * multiple times across multiple device boots.
         * <p>
         * The system may automatically destroy sessions that have not been
         * finalized (either committed or abandoned) within a reasonable period of
         * time, typically on the order of a day.
         *
         * @throws IOException if parameters were unsatisfiable, such as lack of
         *             disk space or unavailable media.
         * @throws SecurityException when installation services are unavailable,
         *             such as when called from a restricted user.
         * @throws IllegalArgumentException when {@link SessionParams} is invalid.
         * @return positive, non-zero unique ID that represents the created session.
         *         This ID remains consistent across device reboots until the
         *         session is finalized. IDs are not reused during a given boot.
         */
        CreateSession(
            [in] IPackageInstallerSessionParams* params,
            [out] Int32* sessionId);

        /**
         * Open an existing session to actively perform work. To succeed, the caller
         * must be the owner of the install session.
         *
         * @throws IOException if parameters were unsatisfiable, such as lack of
         *             disk space or unavailable media.
         * @throws SecurityException when the caller does not own the session, or
         *             the session is invalid.
         */
        OpenSession(
            [in] Int32 sessionId,
            [out] IPackageInstallerSession** session);

        /**
         * Update the icon representing the app being installed in a specific
         * session. This should be roughly
         * {@link ActivityManager#getLauncherLargeIconSize()} in both dimensions.
         *
         * @throws SecurityException when the caller does not own the session, or
         *             the session is invalid.
         */
        UpdateSessionAppIcon(
            [in] Int32 sessionId,
            [in] IBitmap* appIcon);

        /**
         * Update the label representing the app being installed in a specific
         * session.
         *
         * @throws SecurityException when the caller does not own the session, or
         *             the session is invalid.
         */
        UpdateSessionAppLabel(
            [in] Int32 sessionId,
            [in] ICharSequence* appLabel);

        /**
         * Completely abandon the given session, destroying all staged data and
         * rendering it invalid. Abandoned sessions will be reported to
         * {@link SessionCallback} listeners as failures. This is equivalent to
         * opening the session and calling {@link Session#abandon()}.
         *
         * @throws SecurityException when the caller does not own the session, or
         *             the session is invalid.
         */
        AbandonSession(
            [in] Int32 sessionId);

        /**
         * Return details for a specific session. No special permissions are
         * required to retrieve these details.
         *
         * @return details for the requested session, or {@code null} if the session
         *         does not exist.
         */
        GetSessionInfo(
            [in] Int32 sessionId,
            [out] IPackageInstallerSessionInfo** session);

        /**
         * Return list of all known install sessions, regardless of the installer.
         */
        GetAllSessions(
            [out] IList** sessions);

        /**
         * Return list of all known install sessions owned by the calling app.
         */
        GetMySessions(
            [out] IList** sessions);

        /**
         * Uninstall the given package, removing it completely from the device. This
         * method is only available to the current "installer of record" for the
         * package.
         */
        Uninstall(
            [in] String packageName,
            [in] IIntentSender* statusReceiver);

        SetPermissionsResult(
            [in] Int32 sessionId,
            [in] Boolean accepted);

        /**
         * Register to watch for session lifecycle events. No special permissions
         * are required to watch for these events.
         */
        RegisterSessionCallback(
            [in] IPackageInstallerSessionCallback* cb);

        /**
         * Register to watch for session lifecycle events. No special permissions
         * are required to watch for these events.
         *
         * @param handler to dispatch callback events through, otherwise uses
         *            calling thread.
         */
        RegisterSessionCallback(
            [in] IPackageInstallerSessionCallback* cb,
            [in] IHandler* handler);

        /**
         * Unregister a previously registered callback.
         */
        UnregisterSessionCallback(
            [in] IPackageInstallerSessionCallback* cb);
    }

    } // namespace Pm
    } // namespace Content
    } // namespace Droid
    } // namespace Elastos
}
