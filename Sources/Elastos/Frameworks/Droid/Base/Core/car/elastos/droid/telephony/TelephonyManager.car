
module
{

    using interface Elastos.Utility.IList;

    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Content.IContentResolver;
    interface Elastos.Droid.Telephony.ICellInfo;
    interface Elastos.Droid.Telephony.ICellLocation;
    interface Elastos.Droid.Telephony.IPhoneStateListener;

    namespace Elastos {
    namespace Droid {
    namespace Telephony {

    /** Enum indicating multisim variants
     *  DSDS - Dual SIM Dual Standby
     *  DSDA - Dual SIM Dual Active
     *  TSTS - Triple SIM Triple Standby
     **/
    /** @hide */
    enum MultiSimVariants {
        MultiSimVariants_DSDS,
        MultiSimVariants_DSDA,
        MultiSimVariants_TSTS,
        MultiSimVariants_UNKNOWN,
    }

    /**
     * The allowed states of Wi-Fi calling.
     *
     * @hide
     */
    interface ITelephonyManagerWifiCallingChoices {
        /** Always use Wi-Fi calling */
        const Int32 ALWAYS_USE = 0;
        /** Ask the user whether to use Wi-Fi on every call */
        const Int32 ASK_EVERY_TIME = 1;
        /** Never use Wi-Fi calling */
        const Int32 NEVER_USE = 2;
    }

    [deprecated]
    interface ITelephonyManager {

        const String ACTION_PHONE_STATE_CHANGED = "android.intent.action.PHONE_STATE";
        const String ACTION_RESPOND_VIA_MESSAGE = "android.intent.action.RESPOND_VIA_MESSAGE";
        const String ACTION_PRECISE_CALL_STATE_CHANGED = "android.intent.action.PRECISE_CALL_STATE";
        const String ACTION_PRECISE_DATA_CONNECTION_STATE_CHANGED = "android.intent.action.PRECISE_DATA_CONNECTION_STATE_CHANGED";

        const String EXTRA_STATE = "state";
        const String EXTRA_STATE_IDLE = "0";
        const String EXTRA_STATE_RINGING = "1";
        const String EXTRA_STATE_OFFHOOK = "2";
        const String EXTRA_INCOMING_NUMBER = "incoming_number";
        const String EXTRA_RINGING_CALL_STATE = "ringing_state";
        const String EXTRA_FOREGROUND_CALL_STATE = "foreground_state";
        const String EXTRA_BACKGROUND_CALL_STATE = "background_state";
        const String EXTRA_DISCONNECT_CAUSE = "disconnect_cause";
        const String EXTRA_PRECISE_DISCONNECT_CAUSE = "precise_disconnect_cause";

        const String EXTRA_DATA_STATE = "state";
        const String EXTRA_DATA_NETWORK_TYPE = "networkType";
        const String EXTRA_DATA_APN_TYPE = "apnType";
        const String EXTRA_DATA_APN = "apn";
        const String EXTRA_DATA_CHANGE_REASON = "reason";
        const String EXTRA_DATA_LINK_PROPERTIES_KEY = "linkProperties";
        const String EXTRA_DATA_FAILURE_CAUSE = "failCause";

        const Int32 PHONE_TYPE_NONE = 0;
        const Int32 PHONE_TYPE_GSM = 1;
        const Int32 PHONE_TYPE_CDMA = 2;
        const Int32 PHONE_TYPE_SIP = 3;

        const Int32 NETWORK_TYPE_UNKNOWN = 0;
        const Int32 NETWORK_TYPE_GPRS = 1;
        const Int32 NETWORK_TYPE_EDGE = 2;
        const Int32 NETWORK_TYPE_UMTS = 3;
        const Int32 NETWORK_TYPE_CDMA = 4;
        const Int32 NETWORK_TYPE_EVDO_0 = 5;
        const Int32 NETWORK_TYPE_EVDO_A = 6;
        const Int32 NETWORK_TYPE_1xRTT = 7;
        const Int32 NETWORK_TYPE_HSDPA = 8;
        const Int32 NETWORK_TYPE_HSUPA = 9;
        const Int32 NETWORK_TYPE_HSPA = 10;
        const Int32 NETWORK_TYPE_IDEN = 11;
        const Int32 NETWORK_TYPE_EVDO_B = 12;
        const Int32 NETWORK_TYPE_LTE = 13;
        const Int32 NETWORK_TYPE_EHRPD = 14;
        const Int32 NETWORK_TYPE_HSPAP = 15;
        const Int32 NETWORK_TYPE_GSM = 15;

        const Int32 NETWORK_CLASS_UNKNOWN = 0;
        const Int32 NETWORK_CLASS_2_G = 1;
        const Int32 NETWORK_CLASS_3_G = 2;
        const Int32 NETWORK_CLASS_4_G = 3;

        const Int32 SIM_STATE_UNKNOWN = 0;
        const Int32 SIM_STATE_ABSENT = 1;
        const Int32 SIM_STATE_PIN_REQUIRED = 2;
        const Int32 SIM_STATE_PUK_REQUIRED = 3;
        const Int32 SIM_STATE_NETWORK_LOCKED = 4;
        const Int32 SIM_STATE_READY = 5;
        const Int32 SIM_STATE_CARD_IO_ERROR = 5;

        const Int32 CALL_STATE_IDLE = 0;
        const Int32 CALL_STATE_RINGING = 1;
        const Int32 CALL_STATE_OFFHOOK = 2;

        const Int32 DATA_ACTIVITY_NONE = 0x00000000;
        const Int32 DATA_ACTIVITY_IN = 0x00000001;
        const Int32 DATA_ACTIVITY_OUT = 0x00000002;
        const Int32 DATA_ACTIVITY_INOUT = 0x00000003;
        const Int32 DATA_ACTIVITY_DORMANT = 0x00000004;

        const Int32 DATA_UNKNOWN        = -1;
        const Int32 DATA_DISCONNECTED   = 0;
        const Int32 DATA_CONNECTING     = 1;
        const Int32 DATA_CONNECTED      = 2;
        const Int32 DATA_SUSPENDED      = 3;

        /**
         * Values used to return status for hasCarrierPrivileges call.
         * @hide
         */
        const Int32 CARRIER_PRIVILEGE_STATUS_HAS_ACCESS = 1;
        /**
         * Values used to return status for hasCarrierPrivileges call.
         * @hide
         */
        const Int32 CARRIER_PRIVILEGE_STATUS_NO_ACCESS = 0;
        /**
         * Values used to return status for hasCarrierPrivileges call.
         * @hide
         */
        const Int32 CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED = -1;
        /**
         * Values used to return status for hasCarrierPrivileges call.
         * @hide
         */
        const Int32 CARRIER_PRIVILEGE_STATUS_ERROR_LOADING_RULES = -2;

        /**
         * Returns the multi SIM variant
         * Returns DSDS for Dual SIM Dual Standby
         * Returns DSDA for Dual SIM Dual Active
         * Returns TSTS for Triple SIM Triple Standby
         * Returns UNKNOWN for others
         */
        /** {@hide} */
        GetMultiSimConfiguration(
            [out] MultiSimVariants* result);

        /**
         * Returns the number of phones available.
         * Returns 1 for Single standby mode (Single SIM functionality)
         * Returns 2 for Dual standby mode.(Dual SIM functionality)
         */
        /** {@hide} */
        GetPhoneCount(
            [out] Int32* result);

        /** {@hide} */
        IsMultiSimEnabled(
            [out] Boolean* result);

        GetDeviceSoftwareVersion(
            [out] String* res);

        GetDeviceId(
            [out] String* res);

        /**
         * Returns the unique device ID of a subscription, for example, the IMEI for
         * GSM and the MEID for CDMA phones. Return null if device ID is not available.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
         *
         * @param slotId of which deviceID is returned
         */
        /** {@hide} */
        GetDeviceId(
            [in] Int32 slotId,
            [out] String* res);

        /**
         * Returns the IMEI. Return null if IMEI is not available.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
         */
        /** {@hide} */
        GetImei(
            [out] String* res);

        /**
         * Returns the IMEI. Return null if IMEI is not available.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
         *
         * @param slotId of which deviceID is returned
         */
        /** {@hide} */
        GetImei(
            [in] Int32 slotId,
            [out] String* res);

        GetCellLocation(
            [out] ICellLocation** res);

        /**
         * Enables location update notifications.  {@link PhoneStateListener#onCellLocationChanged
         * PhoneStateListener.onCellLocationChanged} will be called on location updates.
         *
         * <p>Requires Permission: {@link android.Manifest.permission#CONTROL_LOCATION_UPDATES
         * CONTROL_LOCATION_UPDATES}
         *
         * @hide
         */
        EnableLocationUpdates();

        /**
         * Enables location update notifications for a subscription.
         * {@link PhoneStateListener#onCellLocationChanged
         * PhoneStateListener.onCellLocationChanged} will be called on location updates.
         *
         * <p>Requires Permission: {@link android.Manifest.permission#CONTROL_LOCATION_UPDATES
         * CONTROL_LOCATION_UPDATES}
         *
         * @param subId for which the location updates are enabled
         */
        /** @hide */
        EnableLocationUpdates(
            [in] Int64 subId);

        /**
         * Disables location update notifications.  {@link PhoneStateListener#onCellLocationChanged
         * PhoneStateListener.onCellLocationChanged} will be called on location updates.
         *
         * <p>Requires Permission: {@link android.Manifest.permission#CONTROL_LOCATION_UPDATES
         * CONTROL_LOCATION_UPDATES}
         *
         * @hide
         */
        DisableLocationUpdates();

        /** @hide */
        DisableLocationUpdates(
            [in] Int64 subId);

        GetNeighboringCellInfo(
            [out] IList** res);

        /**
         * Returns the current phone type.
         * TODO: This is a last minute change and hence hidden.
         *
         * @see #PHONE_TYPE_NONE
         * @see #PHONE_TYPE_GSM
         * @see #PHONE_TYPE_CDMA
         * @see #PHONE_TYPE_SIP
         *
         * {@hide}
         */
        //@SystemApi
        GetCurrentPhoneType(
            [out] Int32* val);

        /**
         * Returns a constant indicating the device phone type for a subscription.
         *
         * @see #PHONE_TYPE_NONE
         * @see #PHONE_TYPE_GSM
         * @see #PHONE_TYPE_CDMA
         *
         * @param subId for which phone type is returned
         */
        /** {@hide} */
        //@SystemApi
        GetCurrentPhoneType(
            [in] Int64 subId,
            [out] Int32* val);

        /**
         * Returns a constant indicating the device phone type.  This
         * indicates the type of radio used to transmit voice calls.
         *
         * @see #PHONE_TYPE_NONE
         * @see #PHONE_TYPE_GSM
         * @see #PHONE_TYPE_CDMA
         * @see #PHONE_TYPE_SIP
         */
        GetPhoneType(
            [out] Int32* val);

        GetNetworkOperatorName(
            [out] String* res);

        /**
         * Returns the alphabetic name of current registered operator
         * for a particular subscription.
         * <p>
         * Availability: Only when user is registered to a network. Result may be
         * unreliable on CDMA networks (use {@link #getPhoneType()} to determine if
         * on a CDMA network).
         * @param subId
         */
        /** {@hide} */
        GetNetworkOperatorName(
            [in] Int64 subId,
            [out] String* res);

        GetNetworkOperator(
            [out] String* res);

        /**
         * Returns the numeric name (MCC+MNC) of current registered operator
         * for a particular subscription.
         * <p>
         * Availability: Only when user is registered to a network. Result may be
         * unreliable on CDMA networks (use {@link #getPhoneType()} to determine if
         * on a CDMA network).
         *
         * @param subId
         */
        /** {@hide} */
        GetNetworkOperator(
            [in] Int64 subId,
            [out] String* res);

        IsNetworkRoaming(
            [out] Boolean* res);

        /**
         * Returns true if the device is considered roaming on the current
         * network for a subscription.
         * <p>
         * Availability: Only when user registered to a network.
         *
         * @param subId
         */
        /** {@hide} */
        IsNetworkRoaming(
            [in] Int64 subId,
            [out] Boolean* res);

        GetNetworkCountryIso(
            [out] String* res);

        /**
         * Returns the ISO country code equivalent of the current registered
         * operator's MCC (Mobile Country Code) of a subscription.
         * <p>
         * Availability: Only when user is registered to a network. Result may be
         * unreliable on CDMA networks (use {@link #getPhoneType()} to determine if
         * on a CDMA network).
         *
         * @param subId for which Network CountryIso is returned
         */
        /** {@hide} */
        GetNetworkCountryIso(
            [in] Int64 subId,
            [out] String* res);

        GetNetworkType(
            [out] Int32* val);

        /** {@hide} */
        GetNetworkType(
            [in] Int64 subId,
            [out] Int32* val);

        /** {@hide} */
        GetDataNetworkType(
            [out] Int32* val);

        /** {@hide} */
        GetDataNetworkType(
            [in] Int64 subId,
            [out] Int32* val);

        /** {@hide} */
        GetVoiceNetworkType(
            [out] Int32* val);

        /** {@hide} */
        GetVoiceNetworkType(
            [in] Int64 subId,
            [out] Int32* val);

        GetNetworkTypeName(
            [out] String* res);

        HasIccCard(
            [out] Boolean* res);

        /** {@hide} */
        HasIccCard(
            [in] Int64 subId,
            [out] Boolean* res);

        GetSimState(
            [out] Int32* val);

        GetSimState(
            [in] Int32 slotId,
            [out] Int32* val);

        GetSimOperator(
            [out] String* res);

        GetSimOperator(
            [in] Int64 slotId,
            [out] String* res);

        /** {@hide} */
        GetSimOperatorName(
            [in] Int64 slotId,
            [out] String* res);

        GetSimOperatorName(
            [out] String* res);

        GetSimCountryIso(
            [out] String* res);

        /** {@hide} */
        GetSimCountryIso(
            [in] Int64 slotId,
            [out] String* res);

        GetSimSerialNumber(
            [out] String* res);

        /** {@hide} */
        GetSimSerialNumber(
            [in] Int64 slotId,
            [out] String* res);

        GetLteOnCdmaMode(
            [out] Int32* val);

        /** {@hide} */
        GetLteOnCdmaMode(
            [in] Int64 slotId,
            [out] Int32* val);

        GetSubscriberId(
            [out] String* res);

        /** {@hide} */
        GetSubscriberId(
            [in] Int64 subId,
            [out] String* res);

        GetGroupIdLevel1(
            [out] String* res);

        /** {@hide} */
        GetGroupIdLevel1(
            [in] Int64 subId,
            [out] String* res);

        GetLine1Number(
            [out] String* res);

        /** {@hide} */
        GetLine1NumberForSubscriber(
            [in] Int64 subId,
            [out] String* res);

        /**
         * Set the line 1 phone number string and its alphatag for the current ICCID
         * for display purpose only, for example, displayed in Phone Status. It won't
         * change the actual MSISDN/MDN. To unset alphatag or number, pass in a null
         * value.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @param alphaTag alpha-tagging of the dailing nubmer
         * @param number The dialing number
         * @hide
         */
        SetLine1NumberForDisplay(
            [in] String alphaTag,
            [in] String number);

        /**
         * Set the line 1 phone number string and its alphatag for the current ICCID
         * for display purpose only, for example, displayed in Phone Status. It won't
         * change the actual MSISDN/MDN. To unset alphatag or number, pass in a null
         * value.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @param subId the subscriber that the alphatag and dialing number belongs to.
         * @param alphaTag alpha-tagging of the dailing nubmer
         * @param number The dialing number
         * @hide
         */
        SetLine1NumberForDisplay(
            [in] Int64 subId,
            [in] String alphaTag,
            [in] String number);

        /** {@hide} */
        GetLine1AlphaTag(
            [out] String* res);

        /** {@hide} */
        GetLine1AlphaTagForSubscriber(
            [in] Int64 subId,
            [out] String* res);

        /** {@hide} */
        GetMsisdn(
            [out] String* res);

        /** {@hide} */
        GetMsisdn(
            [in] Int64 subId,
            [out] String* res);

        GetVoiceMailNumber(
            [out] String* res);

        /** {@hide} */
        GetVoiceMailNumber(
            [in] Int64 subId,
            [out] String* res);

        /** {@hide} */
        GetCompleteVoiceMailNumber(
            [out] String* res);

        /** {@hide} */
        GetCompleteVoiceMailNumber(
            [in] Int64 subId,
            [out] String* res);

        /** {@hide} */
        GetVoiceMessageCount(
            [out] Int32* val);

        /** {@hide} */
        GetVoiceMessageCount(
            [in] Int64 subId,
            [out] Int32* val);

        GetVoiceMailAlphaTag(
            [out] String* res);

        /** {@hide} */
        GetVoiceMailAlphaTag(
            [in] Int64 subId,
            [out] String* res);

        /**
         * Returns the IMS private user identity (IMPI) that was loaded from the ISIM.
         * @return the IMPI, or null if not present or not loaded
         * @hide
         */
        GetIsimImpi(
            [out] String* res);

        /**
         * Returns the IMS home network domain name that was loaded from the ISIM.
         * @return the IMS domain name, or null if not present or not loaded
         * @hide
         */
        GetIsimDomain(
            [out] String* res);

        /**
         * Returns the IMS public user identities (IMPU) that were loaded from the ISIM.
         * @return an array of IMPU strings, with one IMPU per string, or null if
         *      not present or not loaded
         * @hide
         */
        GetIsimImpu(
            [out, callee] ArrayOf<String>* res);

        GetCallState(
            [out] Int32* val);

        /** {@hide} */
        GetCallState(
            [in] Int64 subId,
            [out] Int32* val);

        GetDataActivity(
            [out] Int32* val);

        GetDataState(
            [out] Int32* val);

        Listen(
            [in] IPhoneStateListener* funclistener,
            [in] Int32 Events);

        /**
         * Returns the CDMA ERI icon index to display
         *
         * @hide
         */
        GetCdmaEriIconIndex(
            [out] Int32* val);

        /**
         * Returns the CDMA ERI icon index to display for a subscription
         */
        /** {@hide} */
        GetCdmaEriIconIndex(
            [in] Int64 subId,
            [out] Int32* val);

        /**
         * Returns the CDMA ERI icon mode,
         * 0 - ON
         * 1 - FLASHING
         *
         * @hide
         */
        GetCdmaEriIconMode(
            [out] Int32* val);

        /**
         * Returns the CDMA ERI icon mode for a subscription.
         * 0 - ON
         * 1 - FLASHING
         */
        /** {@hide} */
        GetCdmaEriIconMode(
            [in] Int64 subId,
            [out] Int32* val);

        /**
         * Returns the CDMA ERI text,
         *
         * @hide
         */
        GetCdmaEriText(
            [out] String* res);

        /**
         * Returns the CDMA ERI text, of a subscription
         *
         */
        /** {@hide} */
        GetCdmaEriText(
            [in] Int64 subId,
            [out] String* res);

        IsVoiceCapable(
            [out] Boolean* res);

        IsSmsCapable(
            [out] Boolean* res);

        GetAllCellInfo(
            [out] IList** res);

        /**
         * Sets the minimum time in milli-seconds between {@link PhoneStateListener#onCellInfoChanged
         * PhoneStateListener.onCellInfoChanged} will be invoked.
         *<p>
         * The default, 0, means invoke onCellInfoChanged when any of the reported
         * information changes. Setting the value to INT_MAX(0x7fffffff) means never issue
         * A onCellInfoChanged.
         *<p>
         * @param rateInMillis the rate
         *
         * @hide
         */
        SetCellInfoListRate(
            [in] Int32 rateInMillis);

        /**
         * Returns the MMS user agent.
         */
        GetMmsUserAgent(
            [in] String* rateInMillis);

        /**
         * Returns the MMS user agent profile URL.
         */
        GetMmsUAProfUrl(
            [in] String* rateInMillis);

        /**
         * Opens a logical channel to the ICC card.
         *
         * Input parameters equivalent to TS 27.007 AT+CCHO command.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         *
         * @param AID Application id. See ETSI 102.221 and 101.220.
         * @return an IccOpenLogicalChannelResponse object.
         */
        IccOpenLogicalChannel(
            [in] String AID,
            [out] IIccOpenLogicalChannelResponse** response);

        /**
         * Closes a previously opened logical channel to the ICC card.
         *
         * Input parameters equivalent to TS 27.007 AT+CCHC command.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         *
         * @param channel is the channel id to be closed as retruned by a successful
         *            iccOpenLogicalChannel.
         * @return true if the channel was closed successfully.
         */
        IccCloseLogicalChannel(
            [in] Int32 channel,
            [out] Boolean* result);

        /**
         * Transmit an APDU to the ICC card over a logical channel.
         *
         * Input parameters equivalent to TS 27.007 AT+CGLA command.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         *
         * @param channel is the channel id to be closed as returned by a successful
         *            iccOpenLogicalChannel.
         * @param cla Class of the APDU command.
         * @param instruction Instruction of the APDU command.
         * @param p1 P1 value of the APDU command.
         * @param p2 P2 value of the APDU command.
         * @param p3 P3 value of the APDU command. If p3 is negative a 4 byte APDU
         *            is sent to the SIM.
         * @param data Data to be sent with the APDU.
         * @return The APDU response from the ICC card with the status appended at
         *            the end.
         */
        IccTransmitApduLogicalChannel(
            [in] Int32 channel,
            [in] Int32 cla,
            [in] Int32 instruction,
            [in] Int32 p1,
            [in] Int32 p2,
            [in] Int32 p3,
            [in] String data,
            [out] String* result);

        /**
         * Transmit an APDU to the ICC card over the basic channel.
         *
         * Input parameters equivalent to TS 27.007 AT+CSIM command.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         *
         * @param cla Class of the APDU command.
         * @param instruction Instruction of the APDU command.
         * @param p1 P1 value of the APDU command.
         * @param p2 P2 value of the APDU command.
         * @param p3 P3 value of the APDU command. If p3 is negative a 4 byte APDU
         *            is sent to the SIM.
         * @param data Data to be sent with the APDU.
         * @return The APDU response from the ICC card with the status appended at
         *            the end.
         */
        IccTransmitApduBasicChannel(
            [in] Int32 cla,
            [in] Int32 instruction,
            [in] Int32 p1,
            [in] Int32 p2,
            [in] Int32 p3,
            [in] String data,
            [out] String* result);

        /**
         * Returns the response APDU for a command APDU sent through SIM_IO.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         *
         * @param fileID
         * @param command
         * @param p1 P1 value of the APDU command.
         * @param p2 P2 value of the APDU command.
         * @param p3 P3 value of the APDU command.
         * @param filePath
         * @return The APDU response.
         */
        IccExchangeSimIO(
            [in] Int32 fileID,
            [in] Int32 command,
            [in] Int32 p1,
            [in] Int32 p2,
            [in] Int32 p3,
            [in] String filePath,
            [out, callee] ArrayOf<Byte>* result);

        /**
         * Send ENVELOPE to the SIM and return the response.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         *
         * @param content String containing SAT/USAT response in hexadecimal
         *                format starting with command tag. See TS 102 223 for
         *                details.
         * @return The APDU response from the ICC card in hexadecimal format
         *         with the last 4 bytes being the status word. If the command fails,
         *         returns an empty string.
         */
        SendEnvelopeWithStatus(
            [in] String content,
            [out] String* result);

        /**
         * Read one of the NV items defined in com.android.internal.telephony.RadioNVItems.
         * Used for device configuration by some CDMA operators.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @param itemID the ID of the item to read.
         * @return the NV item as a String, or null on any failure.
         *
         * @hide
         */
        NvReadItem(
            [in] Int32 itemID,
            [out] String* result);

        /**
         * Write one of the NV items defined in com.android.internal.telephony.RadioNVItems.
         * Used for device configuration by some CDMA operators.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @param itemID the ID of the item to read.
         * @param itemValue the value to write, as a String.
         * @return true on success; false on any failure.
         *
         * @hide
         */
        NvWriteItem(
            [in] Int32 itemID,
            [in] String itemValue,
            [out] Boolean* result);

        /**
         * Update the CDMA Preferred Roaming List (PRL) in the radio NV storage.
         * Used for device configuration by some CDMA operators.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @param preferredRoamingList byte array containing the new PRL.
         * @return true on success; false on any failure.
         *
         * @hide
         */
        NvWriteItem(
            [in] ArrayOf<Byte>* preferredRoamingList,
            [out] Boolean* result);

        /**
         * Perform the specified type of NV config reset. The radio will be taken offline
         * and the device must be rebooted after the operation. Used for device
         * configuration by some CDMA operators.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @param resetType reset type: 1: reload NV reset, 2: erase NV reset, 3: factory NV reset
         * @return true on success; false on any failure.
         *
         * @hide
         */
        NvResetConfig(
            [in] Int32 resetType,
            [out] Boolean* result);

        /** {@hide} */
        GetDefaultSim(
            [out] Int32* result);

        /** {@hide} */
        GetSimCount(
            [out] Int32* result);

        /**
         * Returns the IMS Service Table (IST) that was loaded from the ISIM.
         * @return IMS Service Table or null if not present or not loaded
         * @hide
         */
        GetIsimIst(
            [out] String* result);

        /**
         * Returns the IMS Proxy Call Session Control Function(PCSCF) that were loaded from the ISIM.
         * @return an array of PCSCF strings with one PCSCF per string, or null if
         *         not present or not loaded
         * @hide
         */
        GetIsimPcscf(
            [out, callee] ArrayOf<String>* result);


        /**
         * Returns the response of ISIM Authetification through RIL.
         * Returns null if the Authentification hasn't been successed or isn't present iphonesubinfo.
         * @return the response of ISIM Authetification, or null if not available
         * @hide
         * @deprecated
         * @see getIccSimChallengeResponse with appType=PhoneConstants.APPTYPE_ISIM
         */
        GetIsimChallengeResponse(
            [in] String nonce,
            [out] String* result);

        /**
         * Returns the response of SIM Authentication through RIL.
         * Returns null if the Authentication hasn't been successful
         * @param subId subscription ID to be queried
         * @param appType ICC application type (@see com.android.internal.telephony.PhoneConstants#APPTYPE_xxx)
         * @param data authentication challenge data
         * @return the response of SIM Authentication, or null if not available
         * @hide
         */
        GetIccSimChallengeResponse(
            [in] Int64 subId,
            [in] Int32 appType,
            [in] String data,
            [out] String* result);

        /**
         * Returns the response of SIM Authentication through RIL for the default subscription.
         * Returns null if the Authentication hasn't been successful
         * @param appType ICC application type (@see com.android.internal.telephony.PhoneConstants#APPTYPE_xxx)
         * @param data authentication challenge data
         * @return the response of SIM Authentication, or null if not available
         * @hide
         */
        GetIccSimChallengeResponse(
            [in] Int32 appType,
            [in] String data,
            [out] String* result);

        /**
         * Get P-CSCF address from PCO after data connection is established or modified.
         * @param apnType the apnType, "ims" for IMS APN, "emergency" for EMERGENCY APN
         * @return array of P-CSCF address
         * @hide
         */
        GetPcscfAddress(
            [in] Int32 appType,
            [out, callee] ArrayOf<String>* result);

        /**
         * Set IMS registration state
         *
         * @param Registration state
         * @hide
         */
        SetImsRegistrationState(
            [in] Boolean registered);

        /**
         * Get the preferred network type.
         * Used for device configuration by some CDMA operators.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @return the preferred network type, defined in RILConstants.java.
         * @hide
         */
        GetPreferredNetworkType(
            [out] Int32* result);

        /**
         * Set the preferred network type.
         * Used for device configuration by some CDMA operators.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @param networkType the preferred network type, defined in RILConstants.java.
         * @return true on success; false on any failure.
         * @hide
         */
        SetPreferredNetworkType(
            [in] Int32 networkType,
            [out] Int32* result);

        /**
         * Set the preferred network type to global mode which includes LTE, CDMA, EvDo and GSM/WCDMA.
         *
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @return true on success; false on any failure.
         * @hide
         */
        SetGlobalPreferredNetworkType(
            [out] Boolean* result);

        /**
         * Has the calling application been granted carrier privileges by the carrier.
         *
         * If any of the packages in the calling UID has carrier privileges, the
         * call will return true. This access is granted by the owner of the UICC
         * card and does not depend on the registered carrier.
         *
         * TODO: Add a link to documentation.
         *
         * @return CARRIER_PRIVILEGE_STATUS_HAS_ACCESS if the app has carrier privileges.
         *         CARRIER_PRIVILEGE_STATUS_NO_ACCESS if the app does not have carrier privileges.
         *         CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED if the carrier rules are not loaded.
         *         CARRIER_PRIVILEGE_STATUS_ERROR_LOADING_RULES if there was an error loading carrier
         *             rules (or if there are no rules).
         * @hide
         */
        HasCarrierPrivileges(
            [out] Int32* result);

        /**
         * Override the branding for the current ICCID.
         *
         * Once set, whenever the SIM is present in the device, the service
         * provider name (SPN) and the operator name will both be replaced by the
         * brand value input. To unset the value, the same function should be
         * called with a null brand value.
         *
         * <p>Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         *  or has to be carrier app - see #hasCarrierPrivileges.
         *
         * @param brand The brand name to display/set.
         * @return true if the operation was executed correctly.
         * @hide
         */
        SetOperatorBrandOverride(
            [in] String brand,
            [out] Boolean* result);

        /**
         * Expose the rest of ITelephony to @SystemApi
         */

        /** @hide */
        GetCdmaMdn(
            [out] String* str);

        /** @hide */
        GetCdmaMdn(
            [in] Int64 subId,
            [out] String* str);

        /** @hide */
        GetCdmaMin(
            [out] String* str);

        /** @hide */
        GetCdmaMin(
            [in] Int64 subId,
            [out] String* str);

        /** @hide */
        CheckCarrierPrivilegesForPackage(
            [in] String pkgname,
            [out] Int32* result);

        /** @hide */
        GetCarrierPackageNamesForIntent(
            [in] IIntent* intent,
            [out] IList** result);

        /** @hide */
        Dial(
            [in] String number);

        /** @hide */
        Call(
            [in] String callingPackage,
            [in] String number);

        /** @hide */
        EndCall(
            [out] Boolean* result);

        /** @hide */
        AnswerRingingCall();

        /** @hide */
        SilenceRinger();

        /** @hide */
        IsOffhook(
            [out] Boolean* result);

        /** @hide */
        IsRinging(
            [out] Boolean* result);

        /** @hide */
        IsIdle(
            [out] Boolean* result);

        /** @hide */
        IsRadioOn(
            [out] Boolean* result);

        /** @hide */
        IsSimPinEnabled(
            [out] Boolean* result);

        /** @hide */
        SupplyPin(
            [in] String pin,
            [out] Boolean* result);

        /** @hide */
        SupplyPuk(
            [in] String puk,
            [in] String pin,
            [out] Boolean* result);

        /** @hide */
        SupplyPinReportResult(
            [in] String pin,
            [out, callee] ArrayOf<Int32>* result);

        /** @hide */
        SupplyPukReportResult(
            [in] String puk,
            [in] String pin,
            [out, callee] ArrayOf<Int32>* result);

        /** @hide */
        HandlePinMmi(
            [in] String dialString,
            [out] Boolean* result);

        /** @hide */
        ToggleRadioOnOff();

        /** @hide */
        SetRadio(
            [in] Boolean turnOn,
            [out] Boolean* result);

        /** @hide */
        SetRadioPower(
            [in] Boolean turnOn,
            [out] Boolean* result);

        /** @hide */
        UpdateServiceLocation();

        /** @hide */
        EnableDataConnectivity(
            [out] Boolean* result);

        /** @hide */
        DisableDataConnectivity(
            [out] Boolean* result);

        /** @hide */
        IsDataConnectivityPossible(
            [out] Boolean* result);

        /** @hide */
        NeedsOtaServiceProvisioning(
            [out] Boolean* result);

        /** @hide */
        SetDataEnabled(
            [in] Boolean value);

        /** @hide */
        GetDataEnabled(
            [out] Boolean* result);

        /**
         * Set whether Android should display a simplified Mobile Network Settings UI
         * for the current ICCID.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @param enable true means enabling the simplified UI.
         * @hide
         */
        EnableSimplifiedNetworkSettings(
            [in] Boolean value);

        /**
         * Set whether Android should display a simplified Mobile Network Settings UI
         * for the current ICCID.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}
         * Or the calling app has carrier privileges. @see #hasCarrierPrivileges
         *
         * @param subId for which the simplified UI should be enabled or disabled.
         * @param enable true means enabling the simplified UI.
         * @hide
         */
        EnableSimplifiedNetworkSettings(
            [in] Int64 subId,
            [in] Boolean value);

        /**
         * Get whether a simplified Mobile Network Settings UI is enabled for the
         * current ICCID.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
         *
         * @return true if the simplified UI is enabled.
         * @hide
         */
        GetSimplifiedNetworkSettingsEnabled(
            [out] Boolean* result);

        /**
         * Get whether a simplified Mobile Network Settings UI is enabled for the
         * current ICCID.
         * <p>
         * Requires Permission:
         *   {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
         *
         * @param subId for which the simplified UI should be enabled or disabled.
         * @return true if the simplified UI is enabled.
         * @hide
         */
        GetSimplifiedNetworkSettingsEnabledForSubscriber(
            [in] Int64 subId,
            [out] Boolean* result);

        /**
         * Returns the result and response from RIL for oem request
         *
         * @param oemReq the data is sent to ril.
         * @param oemResp the respose data from RIL.
         * @return negative value request was not handled or get error
         *         0 request was handled succesfully, but no response data
         *         positive value success, data length of response
         * @hide
         */
        InvokeOemRilRequestRaw(
            [in] ArrayOf<Byte>* oemReq,
            [in] ArrayOf<Byte>* oemResp,
            [out] Int32* result);
    }

    [deprecated]
    interface ITelephonyManagerHelper {

        GetDefault(
            [out] ITelephonyManager** res);

        From(
            [in] IContext* ctx,
            [out] ITelephonyManager** res);

        /**
         * This function returns the type of the phone, depending
         * on the network mode.
         *
         * @param networkMode
         * @return Phone Type
         *
         * @hide
         */
        GetPhoneType(
            [in] Int32 networkMode,
            [out] Int32* val);

        GetLteOnCdmaModeStatic(
            [out] Int32* val);

        GetNetworkClass(
            [in] Int32 networkType,
            [out] Int32* val);

        GetNetworkTypeName(
            [in] Int32 type,
            [out] String* res);

        /**
         * Sets the telephony property with the value specified.
         *
         * @hide
         */
        SetTelephonyProperty(
            [in] String property,
            [in] Int64 subId,
            [in] String value);

        /**
         * Convenience function for retrieving a value from the secure settings
         * value list as an integer.  Note that internally setting values are
         * always stored as strings; this function converts the string to an
         * integer for you.
         * <p>
         * This version does not take a default value.  If the setting has not
         * been set, or the string value is not a number,
         * it throws {@link SettingNotFoundException}.
         *
         * @param cr The ContentResolver to access.
         * @param name The name of the setting to retrieve.
         * @param index The index of the list
         *
         * @throws SettingNotFoundException Thrown if a setting by the given
         * name can't be found or the setting value is not an integer.
         *
         * @return The value at the given index of settings.
         * @hide
         */
        GetInt32AtIndex(
            [in] IContentResolver* resolver,
            [in] String name,
            [in] Int32 index,
            [out] Int32* val);

        /**
         * Convenience function for updating settings value as coma separated
         * integer values. This will either create a new entry in the table if the
         * given name does not exist, or modify the value of the existing row
         * with that name.  Note that internally setting values are always
         * stored as strings, so this function converts the given value to a
         * string before storing it.
         *
         * @param cr The ContentResolver to access.
         * @param name The name of the setting to modify.
         * @param index The index of the list
         * @param value The new value for the setting to be added to the list.
         * @return true if the value was set, false on database errors
         * @hide
         */
        PutInt32AtIndex(
            [in] IContentResolver* resolver,
            [in] String name,
            [in] Int32 index,
            [in] Int32 val,
            [out] Boolean* result);

        /**
         * Gets the telephony property.
         *
         * @hide
         */
        GetTelephonyProperty(
            [in] String property,
            [in] Int64 subId,
            [in] String defaultVal,
            [out] String* result);
    }

    } // namespace Telephony
    } // namespace Droid
    } // namespace Elastos
}
