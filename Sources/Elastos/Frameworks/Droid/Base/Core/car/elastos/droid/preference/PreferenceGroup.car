// PreferenceGroup.car
module
{
    interface Elastos.Core.ICharSequence;
    interface Elastos.Droid.Os.IBundle;

    namespace Elastos {
    namespace Droid {
    namespace Preference {

    /**
     * A container for multiple
     * {@link Preference} objects. It is a base class for  Preference objects that are
     * parents, such as {@link PreferenceCategory} and {@link PreferenceScreen}.
     *
     * <div class="special reference">
     * <h3>Developer Guides</h3>
     * <p>For information about building a settings UI with Preferences,
     * read the <a href="{@docRoot}guide/topics/ui/settings.html">Settings</a>
     * guide.</p>
     * </div>
     *
     * @attr ref android.R.styleable#PreferenceGroup_orderingFromXml
     */
    /**
     * @Involve
     * interface IPreference
     * interface IGenericInflaterParent
     */
     [local, deprecated]
    interface IPreferenceGroup {
        /**
         * Whether to order the {@link Preference} children of this group as they
         * are added. If this is false, the ordering will follow each Preference
         * order and default to alphabetic for those without an order.
         * <p>
         * If this is called after preferences are added, they will not be
         * re-ordered in the order they were added, hence call this method early on.
         *
         * @param orderingAsAdded Whether to order according to the order added.
         * @see Preference#setOrder(int)
         */
        SetOrderingAsAdded(
            [in] Boolean orderingAsAdded);

        /**
             * Whether this group is ordering preferences in the order they are added.
             *
             * @return Whether this group orders based on the order the children are added.
             * @see #setOrderingAsAdded(boolean)
             */
        IsOrderingAsAdded(
            [out] Boolean* result);

        /**
             * Called by the inflater to add an item to this group.
             */
        AddItemFromInflater(
            [in] IPreference* preference);

        /**
             * Returns the number of children {@link Preference}s.
             * @return The number of preference children in this group.
             */
        GetPreferenceCount(
            [out] Int32* result);

        /**
             * Returns the {@link Preference} at a particular index.
             *
             * @param index The index of the {@link Preference} to retrieve.
             * @return The {@link Preference}.
             */
        GetPreference(
            [in] Int32 index,
            [out] IPreference** result);

        /**
             * Adds a {@link Preference} at the correct position based on the
             * preference's order.
             *
             * @param preference The preference to add.
             * @return Whether the preference is now in this group.
             */
        AddPreference(
            [in] IPreference* preference,
            [out] Boolean* result);

        /**
             * Removes a {@link Preference} from this group.
             *
             * @param preference The preference to remove.
             * @return Whether the preference was found and removed.
             */
        RemovePreference(
            [in] IPreference* preference,
            [out] Boolean* result);

        /**
             * Removes all {@link Preference Preferences} from this group.
             */
        RemoveAll();

        /**
         * Prepares a {@link Preference} to be added to the group.
         *
         * @param preference The preference to add.
         * @return Whether to allow adding the preference (true), or not (false).
         */
        OnPrepareAddPreference(
            [in] IPreference* preference,
            [out] Boolean* result);

        /**
             * Finds a {@link Preference} based on its key. If two {@link Preference}
             * share the same key (not recommended), the first to appear will be
             * returned (to retrieve the other preference with the same key, call this
             * method on the first preference). If this preference has the key, it will
             * not be returned.
             * <p>
             * This will recursively search for the preference into children that are
             * also {@link PreferenceGroup PreferenceGroups}.
             *
             * @param key The key of the preference to retrieve.
             * @return The {@link Preference} with the key, or null.
             */
        FindPreference(
            [in] ICharSequence* key,
            [out] IPreference** result);

        IsOnSameScreenAsChildren(
            [out] Boolean* isOnSameScreenAsChildren);

        OnAttachedToActivity();

        OnPrepareForRemoval();

        SortPreferences();

        DispatchSaveInstanceState(
            [in] IBundle* con);

        DispatchRestoreInstanceState(
            [in] IBundle* cont);

    }

    } // namespace Preference
    } // namespace Droid
    } // namespace Elastos
}

