
module
{
    interface Elastos.Droid.Net.IWebAddress;
    interface Elastos.Droid.Webkit.ICookieManager;
    interface Elastos.Droid.Webkit.IWebView;
    interface Elastos.Droid.Webkit.IValueCallback;

    namespace Elastos {
    namespace Droid {
    namespace Webkit {

    interface ICookieManagerHelper {
        /**
         * Gets the singleton CookieManager instance. If this method is used
         * before the application instantiates a {@link WebView} instance,
         * {@link CookieSyncManager#createInstance CookieSyncManager.createInstance(Context)}
         * must be called first.
         *
         * @return the singleton CookieManager instance
         */
        //synchronized
        GetInstance(
            [out] ICookieManager** cookieManager);

        /**
         * Gets whether the application's {@link WebView} instances send and accept
         * cookies for file scheme URLs.
         *
         * @return true if {@link WebView} instances send and accept cookies for
         *         file scheme URLs
         */
        // Static for backward compatibility.
        AllowFileSchemeCookies(
            [out] Boolean* result);

        /**
         * Sets whether the application's {@link WebView} instances should send and
         * accept cookies for file scheme URLs.
         * Use of cookies with file scheme URLs is potentially insecure and turned
         * off by default.
         * Do not use this feature unless you can be sure that no unintentional
         * sharing of cookie data can take place.
         * <p>
         * Note that calls to this method will have no effect if made after a
         * {@link WebView} or CookieManager instance has been created.
         */
        // Static for backward compatibility.
        SetAcceptFileSchemeCookies(
            [in] Boolean accept);
    }

    /**
     * Manages the cookies used by an application's {@link WebView} instances.
     * Cookies are manipulated according to RFC2109.
     *
     * @Involve
     * interface ICookieHandler;
     */
    interface ICookieManager {

        /**
         * Sets whether the application's {@link WebView} instances should send and
         * accept cookies.
         * By default this is set to true and the WebView accepts cookies.
         * <p>
         * When this is true
         * {@link CookieManager#setAcceptThirdPartyCookies setAcceptThirdPartyCookies} and
         * {@link CookieManager#setAcceptFileSchemeCookies setAcceptFileSchemeCookies}
         * can be used to control the policy for those specific types of cookie.
         *
         * @param accept whether {@link WebView} instances should send and accept
         *               cookies
         */
        //synchronized
        SetAcceptCookie(
            [in] Boolean accept);

        /**
         * Gets whether the application's {@link WebView} instances send and accept
         * cookies.
         *
         * @return true if {@link WebView} instances send and accept cookies
         */
        //synchronized
        AcceptCookie(
            [out] Boolean* result);

        /**
         * Sets whether the {@link WebView} should allow third party cookies to be set.
         * Allowing third party cookies is a per WebView policy and can be set
         * differently on different WebView instances.
         * <p>
         * Apps that target {@link android.os.Build.VERSION_CODES#KITKAT} or below
         * default to allowing third party cookies. Apps targeting
         * {@link android.os.Build.VERSION_CODES#LOLLIPOP} or later default to disallowing
         * third party cookies.
         *
         * @param webview the {@link WebView} instance to set the cookie policy on
         * @param accept whether the {@link WebView} instance should accept
         *               third party cookies
         */
        SetAcceptThirdPartyCookies(
            [in] IWebView* webview,
            [in] Boolean accept);

        /**
         * Gets whether the {@link WebView} should allow third party cookies to be set.
         *
         * @param webview the {@link WebView} instance to get the cookie policy for
         * @return true if the {@link WebView} accepts third party cookies
         */
        AcceptThirdPartyCookies(
            [in] IWebView* webview,
            [out] Boolean* result);

        /**
         * Sets a cookie for the given URL. Any existing cookie with the same host,
         * path and name will be replaced with the new cookie. The cookie being set
         * will be ignored if it is expired.
         *
         * @param url the URL for which the cookie is to be set
         * @param value the cookie as a string, using the format of the 'Set-Cookie'
         *              HTTP response header
         */
        SetCookie(
            [in] String url,
            [in] String value);

        /**
         * Sets a cookie for the given URL. Any existing cookie with the same host,
         * path and name will be replaced with the new cookie. The cookie being set
         * will be ignored if it is expired.
         * <p>
         * This method is asynchronous.
         * If a {@link ValueCallback} is provided,
         * {@link ValueCallback#onReceiveValue(T) onReceiveValue()} will be called on the current
         * thread's {@link android.os.Looper} once the operation is complete.
         * The value provided to the callback indicates whether the cookie was set successfully.
         * You can pass {@code null} as the callback if you don't need to know when the operation
         * completes or whether it succeeded, and in this case it is safe to call the method from a
         * thread without a Looper.
         *
         * @param url the URL for which the cookie is to be set
         * @param value the cookie as a string, using the format of the 'Set-Cookie'
         *              HTTP response header
         * @param callback a callback to be executed when the cookie has been set
         */
        SetCookie(
            [in] String url,
            [in] String value,
            [in] IValueCallback* callBack);

        /**
         * Gets the cookies for the given URL.
         *
         * @param url the URL for which the cookies are requested
         * @return value the cookies as a string, using the format of the 'Cookie'
         *               HTTP request header
         */
        GetCookie(
            [in] String url,
            [out] String* cookie);

        /**
         * See {@link #getCookie(String)}.
         *
         * @param url the URL for which the cookies are requested
         * @param privateBrowsing whether to use the private browsing cookie jar
         * @return value the cookies as a string, using the format of the 'Cookie'
         *               HTTP request header
         * @hide Used by Browser, no intention to publish.
         */
        GetCookie(
            [in] String url,
            [in] Boolean privateBrowsing,
            [out] String* cookie);

        /**
         * Gets cookie(s) for a given uri so that it can be set to "cookie:" in http
         * request header.
         *
         * @param uri the WebAddress for which the cookies are requested
         * @return value the cookies as a string, using the format of the 'Cookie'
         *               HTTP request header
         * @hide Used by RequestHandle, no intention to publish.
         */
        //synchronized
        GetCookie(
            [in] IWebAddress* uri,
            [out] String* cookie);

        /**
         * Removes all session cookies, which are cookies without an expiration
         * date.
         * @deprecated use {@link #removeSessionCookies(ValueCallback)} instead.
         */
        RemoveSessionCookie();

        /**
         * Removes all session cookies, which are cookies without an expiration
         * date.
         * <p>
         * This method is asynchronous.
         * If a {@link ValueCallback} is provided,
         * {@link ValueCallback#onReceiveValue(T) onReceiveValue()} will be called on the current
         * thread's {@link android.os.Looper} once the operation is complete.
         * The value provided to the callback indicates whether any cookies were removed.
         * You can pass {@code null} as the callback if you don't need to know when the operation
         * completes or whether any cookie were removed, and in this case it is safe to call the
         * method from a thread without a Looper.
         * @param callback a callback which is executed when the session cookies have been removed
         */
        RemoveSessionCookies(
            [in] IValueCallback* callBack);

        /**
         * Removes all cookies.
         * @deprecated Use {@link #removeAllCookies(ValueCallback)} instead.
         */
        //@Deprecated
        RemoveAllCookie();

        /**
         * Removes all cookies.
         * <p>
         * This method is asynchronous.
         * If a {@link ValueCallback} is provided,
         * {@link ValueCallback#onReceiveValue(T) onReceiveValue()} will be called on the current
         * thread's {@link android.os.Looper} once the operation is complete.
         * The value provided to the callback indicates whether any cookies were removed.
         * You can pass {@code null} as the callback if you don't need to know when the operation
         * completes or whether any cookies were removed, and in this case it is safe to call the
         * method from a thread without a Looper.
         * @param callback a callback which is executed when the cookies have been removed
         */
        RemoveAllCookies(
            [in] IValueCallback* callBack);

        /**
         * Gets whether there are stored cookies.
         *
         * @return true if there are stored cookies
         */
        //synchronized
        HasCookies(
            [out] Boolean* result);

        /**
         * See {@link #hasCookies()}.
         *
         * @param privateBrowsing whether to use the private browsing cookie jar
         * @hide Used by Browser, no intention to publish.
         */
        //synchronized
        HasCookies(
            [in] Boolean privateBrowsing,
            [out] Boolean* result);

        /**
         * Removes all expired cookies.
         * @deprecated The WebView handles removing expired cookies automatically.
         */
        //@Deprecated
        RemoveExpiredCookie();

        /**
         * Ensures all cookies currently accessible through the getCookie API are
         * written to persistent storage.
         * This call will block the caller until it is done and may perform I/O.
         */
        Flush();
    }

    } // namespace Webkit
    } // namepsace Droid
    } // namespace Elastos
}
