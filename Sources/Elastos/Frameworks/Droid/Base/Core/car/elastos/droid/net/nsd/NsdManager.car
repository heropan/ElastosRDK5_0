
module
{

    interface Elastos.Droid.Net.Nsd.INsdManagerRegistrationListener;
    interface Elastos.Droid.Net.Nsd.INsdManagerDiscoveryListener;
    interface Elastos.Droid.Net.Nsd.INsdManagerResolveListener;

    namespace Elastos {
    namespace Droid {
    namespace Net {
    namespace Nsd {

    /**
     * The Network Service Discovery Manager class provides the API to discover services
     * on a network. As an example, if device A and device B are connected over a Wi-Fi
     * network, a game registered on device A can be discovered by a game on device
     * B. Another example use case is an application discovering printers on the network.
     *
     * <p> The API currently supports DNS based service discovery and discovery is currently
     * limited to a local network over Multicast DNS. DNS service discovery is described at
     * http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt
     *
     * <p> The API is asynchronous and responses to requests from an application are on listener
     * callbacks on a seperate thread.
     *
     * <p> There are three main operations the API supports - registration, discovery and resolution.
     * <pre>
     *                          Application start
     *                                 |
     *                                 |
     *                                 |                  onServiceRegistered()
     *                     Register any local services  /
     *                      to be advertised with       \
     *                       registerService()            onRegistrationFailed()
     *                                 |
     *                                 |
     *                          discoverServices()
     *                                 |
     *                      Maintain a list to track
     *                        discovered services
     *                                 |
     *                                 |--------->
     *                                 |          |
     *                                 |      onServiceFound()
     *                                 |          |
     *                                 |     add service to list
     *                                 |          |
     *                                 |<----------
     *                                 |
     *                                 |--------->
     *                                 |          |
     *                                 |      onServiceLost()
     *                                 |          |
     *                                 |   remove service from list
     *                                 |          |
     *                                 |<----------
     *                                 |
     *                                 |
     *                                 | Connect to a service
     *                                 | from list ?
     *                                 |
     *                          resolveService()
     *                                 |
     *                         onServiceResolved()
     *                                 |
     *                     Establish connection to service
     *                     with the host and port information
     *
     * </pre>
     * An application that needs to advertise itself over a network for other applications to
     * discover it can do so with a call to {@link #registerService}. If Example is a http based
     * application that can provide HTML data to peer services, it can register a name "Example"
     * with service type "_http._tcp". A successful registration is notified with a callback to
     * {@link RegistrationListener#onServiceRegistered} and a failure to register is notified
     * over {@link RegistrationListener#onRegistrationFailed}
     *
     * <p> A peer application looking for http services can initiate a discovery for "_http._tcp"
     * with a call to {@link #discoverServices}. A service found is notified with a callback
     * to {@link DiscoveryListener#onServiceFound} and a service lost is notified on
     * {@link DiscoveryListener#onServiceLost}.
     *
     * <p> Once the peer application discovers the "Example" http srevice, and needs to receive data
     * from the "Example" application, it can initiate a resolve with {@link #resolveService} to
     * resolve the host and port details for the purpose of establishing a connection. A successful
     * resolve is notified on {@link ResolveListener#onServiceResolved} and a failure is notified
     * on {@link ResolveListener#onResolveFailed}.
     *
     * Applications can reserve for a service type at
     * http://www.iana.org/form/ports-service. Existing services can be found at
     * http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xml
     *
     * Get an instance of this class by calling {@link android.content.Context#getSystemService(String)
     * Context.getSystemService(Context.NSD_SERVICE)}.
     *
     * {@see NsdServiceInfo}
     */
    /**
     * @Involved
     * no super interface
     */
    interface INsdManager {
        /**
         * The lookup key for an int that indicates whether network service discovery is enabled
         * or disabled. Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.
         *
         * @see #NSD_STATE_DISABLED
         * @see #NSD_STATE_ENABLED
         */
        const String EXTRA_NSD_STATE = "nsd_state";

        /**
         * Network service discovery is disabled
         *
         * @see #ACTION_NSD_STATE_CHANGED
         */
        const Int32 NSD_STATE_DISABLED = 1;

        /**
         * Network service discovery is enabled
         *
         * @see #ACTION_NSD_STATE_CHANGED
         */
        const Int32 NSD_STATE_ENABLED = 2;

        /** @hide */
        const Int32 DISCOVER_SERVICES = 0x00060000 + 1;
        /** @hide */
        const Int32 DISCOVER_SERVICES_STARTED = 0x00060000 + 2;
        /** @hide */
        const Int32 DISCOVER_SERVICES_FAILED = 0x00060000 + 3;
        /** @hide */
        const Int32 SERVICE_FOUND = 0x00060000 + 4;
        /** @hide */
        const Int32 SERVICE_LOST = 0x00060000 + 5;

        /** @hide */
        const Int32 STOP_DISCOVERY = 0x00060000 + 6;
        /** @hide */
        const Int32 STOP_DISCOVERY_FAILED = 0x00060000 + 7;
        /** @hide */
        const Int32 STOP_DISCOVERY_SUCCEEDED = 0x00060000 + 8;

        /** @hide */
        const Int32 REGISTER_SERVICE = 0x00060000 + 9;
        /** @hide */
        const Int32 REGISTER_SERVICE_FAILED = 0x00060000 + 10;
        /** @hide */
        const Int32 REGISTER_SERVICE_SUCCEEDED = 0x00060000 + 11;

        /** @hide */
        const Int32 UNREGISTER_SERVICE = 0x00060000 + 12;
        /** @hide */
        const Int32 UNREGISTER_SERVICE_FAILED = 0x00060000 + 13;
        /** @hide */
        const Int32 UNREGISTER_SERVICE_SUCCEEDED = 0x00060000 + 14;

        /** @hide */
        const Int32 RESOLVE_SERVICE = 0x00060000 + 18;
        /** @hide */
        const Int32 RESOLVE_SERVICE_FAILED = 0x00060000 + 19;
        /** @hide */
        const Int32 RESOLVE_SERVICE_SUCCEEDED = 0x00060000 + 20;

        /** @hide */
        const Int32 ENABLE = 0x00060000 + 24;
        /** @hide */
        const Int32 DISABLE = 0x00060000 + 25;

        /** @hide */
        const Int32 NATIVE_DAEMON_EVENT = 0x00060000 + 26;

        /** Dns based service discovery protocol */
        const Int32 PROTOCOL_DNS_SD = 0x0001;

        /**
         * Failures are passed with {@link RegistrationListener#onRegistrationFailed},
         * {@link RegistrationListener#onUnregistrationFailed},
         * {@link DiscoveryListener#onStartDiscoveryFailed},
         * {@link DiscoveryListener#onStopDiscoveryFailed} or {@link ResolveListener#onResolveFailed}.
         *
         * Indicates that the operation failed due to an internal error.
         */
        const Int32 FAILURE_INTERNAL_ERROR = 0;

        /**
         * Indicates that the operation failed because it is already active.
         */
        const Int32 FAILURE_ALREADY_ACTIVE = 3;

        /**
         * Indicates that the operation failed because the maximum outstanding
         * requests from the applications have reached.
         */
        const Int32 FAILURE_MAX_LIMIT = 4;

        /**
         * Register a service to be discovered by other services.
         *
         * <p> The function call immediately returns after sending a request to register service
         * to the framework. The application is notified of a successful registration
         * through the callback {@link RegistrationListener#onServiceRegistered} or a failure
         * through {@link RegistrationListener#onRegistrationFailed}.
         *
         * <p> The application should call {@link #unregisterService} when the service
         * registration is no longer required, and/or whenever the application is stopped.
         *
         * @param serviceInfo The service being registered
         * @param protocolType The service discovery protocol
         * @param listener The listener notifies of a successful registration and is used to
         * unregister this service through a call on {@link #unregisterService}. Cannot be null.
         * Cannot be in use for an active service registration.
         */
        RegisterService(
            [in] INsdServiceInfo* serviceInfo,
            [in] Int32 protocolType,
            [in] INsdManagerRegistrationListener* listener);

        /**
         * Unregister a service registered through {@link #registerService}. A successful
         * unregister is notified to the application with a call to
         * {@link RegistrationListener#onServiceUnregistered}.
         *
         * @param listener This should be the listener object that was passed to
         * {@link #registerService}. It identifies the service that should be unregistered
         * and notifies of a successful or unsuccessful unregistration via the listener
         * callbacks.  In API versions 20 and above, the listener object may be used for
         * another service registration once the callback has been called.  In API versions <= 19,
         * there is no entirely reliable way to know when a listener may be re-used, and a new
         * listener should be created for each service registration request.
         */
        UnregisterService(
            [in] INsdManagerRegistrationListener* listener);

        /**
         * Initiate service discovery to browse for instances of a service type. Service discovery
         * consumes network bandwidth and will continue until the application calls
         * {@link #stopServiceDiscovery}.
         *
         * <p> The function call immediately returns after sending a request to start service
         * discovery to the framework. The application is notified of a success to initiate
         * discovery through the callback {@link DiscoveryListener#onDiscoveryStarted} or a failure
         * through {@link DiscoveryListener#onStartDiscoveryFailed}.
         *
         * <p> Upon successful start, application is notified when a service is found with
         * {@link DiscoveryListener#onServiceFound} or when a service is lost with
         * {@link DiscoveryListener#onServiceLost}.
         *
         * <p> Upon failure to start, service discovery is not active and application does
         * not need to invoke {@link #stopServiceDiscovery}
         *
         * <p> The application should call {@link #stopServiceDiscovery} when discovery of this
         * service type is no longer required, and/or whenever the application is paused or
         * stopped.
         *
         * @param serviceType The service type being discovered. Examples include "_http._tcp" for
         * http services or "_ipp._tcp" for printers
         * @param protocolType The service discovery protocol
         * @param listener  The listener notifies of a successful discovery and is used
         * to stop discovery on this serviceType through a call on {@link #stopServiceDiscovery}.
         * Cannot be null. Cannot be in use for an active service discovery.
         */
        DiscoverServices(
            [in] String serviceType,
            [in] Int32 protocolType,
            [in] INsdManagerDiscoveryListener* listener);

        /**
         * Stop service discovery initiated with {@link #discoverServices}.  An active service
         * discovery is notified to the application with {@link DiscoveryListener#onDiscoveryStarted}
         * and it stays active until the application invokes a stop service discovery. A successful
         * stop is notified to with a call to {@link DiscoveryListener#onDiscoveryStopped}.
         *
         * <p> Upon failure to stop service discovery, application is notified through
         * {@link DiscoveryListener#onStopDiscoveryFailed}.
         *
         * @param listener This should be the listener object that was passed to {@link #discoverServices}.
         * It identifies the discovery that should be stopped and notifies of a successful or
         * unsuccessful stop.  In API versions 20 and above, the listener object may be used for
         * another service discovery once the callback has been called.  In API versions <= 19,
         * there is no entirely reliable way to know when a listener may be re-used, and a new
         * listener should be created for each service discovery request.
         */
        StopServiceDiscovery(
            [in] INsdManagerDiscoveryListener* listener);

        /**
         * Resolve a discovered service. An application can resolve a service right before
         * establishing a connection to fetch the IP and port details on which to setup
         * the connection.
         *
         * @param serviceInfo service to be resolved
         * @param listener to receive callback upon success or failure. Cannot be null.
         * Cannot be in use for an active service resolution.
         */
        ResolveService(
            [in] INsdServiceInfo* serviceInfo,
            [in] INsdManagerResolveListener* listener);

        /** Internal use only @hide */
        SetEnabled(
            [in] Boolean enabled);

    }


    /** Interface for callback invocation for service discovery */
    /**
     * @Involved
     * no super interface
     */
    interface INsdManagerDiscoveryListener {
        OnStartDiscoveryFailed(
            [in] String serviceType,
            [in] Int32 errorCode);

        OnStopDiscoveryFailed(
            [in] String serviceType,
            [in] Int32 errorCode);

        OnDiscoveryStarted(
            [in] String serviceType);

        OnDiscoveryStopped(
            [in] String serviceType);

        OnServiceFound(
            [in] INsdServiceInfo* serviceInfo);

        OnServiceLost(
            [in] INsdServiceInfo* serviceInfo);

    }

    /** Interface for callback invocation for service registration */
    /**
     * @Involved
     * no super interface
     */
    interface INsdManagerRegistrationListener {
        OnRegistrationFailed(
            [in] INsdServiceInfo* serviceInfo,
            [in] Int32 errorCode);

        OnUnregistrationFailed(
            [in] INsdServiceInfo* serviceInfo,
            [in] Int32 errorCode);

        OnServiceRegistered(
            [in] INsdServiceInfo* serviceInfo);

        OnServiceUnregistered(
            [in] INsdServiceInfo* serviceInfo);

    }

    /** Interface for callback invocation for service resolution */
    /**
     * @Involved
     * no super interface
     */
    interface INsdManagerResolveListener {
        OnResolveFailed(
            [in] INsdServiceInfo* serviceInfo,
            [in] Int32 errorCode);

        OnServiceResolved(
            [in] INsdServiceInfo* serviceInfo);

    }

    } // namespace Nsd
    } // namespace Net
    } // namespace Droid
    } // namespace Elastos
}
