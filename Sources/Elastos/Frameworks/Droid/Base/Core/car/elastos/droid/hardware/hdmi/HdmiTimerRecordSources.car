
module
{
    interface Elastos.Droid.Hardware.Hdmi.IHdmiDeviceInfo;
    interface Elastos.Droid.Hardware.Hdmi.IHdmiControlManagerVendorCommandListener;
    interface Elastos.Droid.Hardware.Hdmi.IHdmiRecordSourcesDigitalServiceSource;
    interface Elastos.Droid.Hardware.Hdmi.IHdmiRecordSourcesAnalogueServiceSource;
    interface Elastos.Droid.Hardware.Hdmi.IHdmiRecordSourcesExternalPlugData;
    interface Elastos.Droid.Hardware.Hdmi.IHdmiRecordSourcesExternalPhysicalAddress;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Hdmi {

    [deprecated]
    interface IHdmiTimerRecordSourcesTimeUnit {
        ToByteArray(
            [in] ArrayOf<Byte>* data,
            [in] Int32 index,
            [out] Int32* result);

        ToBcdByte(
            [in] Int32 value,
            [out] Byte* result);
    }

    /**
     * Place holder for time value.
     * @hide
     *
     * @invoke
     * iinterface IHdmiTimerRecordSourcesTimeUnit
     */
    //@SystemApi
    interface IHdmiTimerRecordSourcesTime {
    }

    /**
     * Place holder for duration value.
     * @hide
     *
     * @invoke
     * iinterface IHdmiTimerRecordSourcesTimeUnit
     */
    //@SystemApi
    interface IHdmiTimerRecordSourcesDuration {
    }

    [deprecated]
    interface IHdmiTimerRecordSourcesTimerInfo {
        ToByteArray(
            [in] ArrayOf<Byte>* data,
            [in] Int32 index,
            [out] Int32* result);

        GetDataSize(
            [out] Int32* size);
    }

     /**
     * Record source container for timer record. This is used to set parameter for &lt;Set Digital
     * Timer&gt;, &lt;Set Analogue Timer&gt;, and &lt;Set External Timer&gt; message.
     * <p>
     * In order to create this from each source type, use one of helper method.
     * <ul>
     * <li>{@link #ofDigitalSource} for digital source
     * <li>{@link #ofAnalogueSource} for analogue source
     * <li>{@link #ofExternalPlug} for external plug type
     * <li>{@link #ofExternalPhysicalAddress} for external physical address type.
     * </ul>
     * @hide
     */
    //@SystemApi
    [deprecated]
    interface ITimerRecordSource {
        GetDataSize(
            [out] Int32* size);

        ToByteArray(
            [in] ArrayOf<Byte>* data,
            [in] Int32 index,
            [out] Int32* result);
    }

    /**
     * Container for timer record source used for timer recording. Timer source consists of two parts,
     * timer info and record source.
     * <p>
     * Timer info contains all timing information used for recording. It consists of the following
     * values.
     * <ul>
     * <li>[Day of Month]
     * <li>[Month of Year]
     * <li>[Start Time]
     * <li>[Duration]
     * <li>[Recording Sequence]
     * </ul>
     * <p>
     * Record source containers all program information used for recording.
     * For more details, look at {@link HdmiRecordSources}.
     * <p>
     * Usage
     * <pre>
     * TimeOrDuration startTime = HdmiTimerRecordSources.ofTime(18, 00);  // 6PM.
     * TimeOrDuration duration = HdmiTimerRecordSource.ofDuration(1, 00);  // 1 hour duration.
     * // For 1 hour from 6PM, August 10th every SaturDay and Sunday.
     * TimerInfo timerInfo = HdmiTimerRecordSource.timerInfoOf(10, 8, starTime, duration,
     *            HdmiTimerRecordSource.RECORDING_SEQUENCE_REPEAT_SATURDAY |
     *            HdmiTimerRecordSource.RECORDING_SEQUENCE_REPEAT_SUNDAY);
     * // create digital source.
     * DigitalServiceSource recordSource = HdmiRecordSource.ofDvb(...);
     * TimerRecordSource source = ofDigitalSource(timerInfo, recordSource);
     * </pre>
     *
     * @hide
     */
    //@SystemApi
    interface IHdmiTimerRecordSources {
        /**
         * Fields for recording sequence.
         * The following can be merged by OR(|) operation.
         */
        const Int32 RECORDING_SEQUENCE_REPEAT_ONCE_ONLY = 0;
        const Int32 RECORDING_SEQUENCE_REPEAT_SUNDAY = 1 << 0;
        const Int32 RECORDING_SEQUENCE_REPEAT_MONDAY = 1 << 1;
        const Int32 RECORDING_SEQUENCE_REPEAT_TUESDAY = 1 << 2;
        const Int32 RECORDING_SEQUENCE_REPEAT_WEDNESDAY = 1 << 3;
        const Int32 RECORDING_SEQUENCE_REPEAT_THURSDAY = 1 << 4;
        const Int32 RECORDING_SEQUENCE_REPEAT_FRIDAY = 1 << 5;
        const Int32 RECORDING_SEQUENCE_REPEAT_SATUREDAY = 1 << 6;
    }

    [deprecated]
    interface IHdmiTimerRecordSourcesHelper {
        /**
         * Create {@link TimerRecordSource} for digital source which is used for &lt;Set Digital
         * Timer&gt;.
         *
         * @param timerInfo timer info used for timer recording
         * @param source digital source used for timer recording
         * @return {@link TimerRecordSource}
         * @throws IllegalArgumentException if {@code timerInfo} or {@code source} is null
         */
        OfDigitalSource(
            [in] IHdmiTimerRecordSourcesTimerInfo* timerInfo,
            [in] IHdmiRecordSourcesDigitalServiceSource* source,
            [out] ITimerRecordSource** result);

        /**
         * Create {@link TimerRecordSource} for analogue source which is used for &lt;Set Analogue
         * Timer&gt;.
         *
         * @param timerInfo timer info used for timer recording
         * @param source digital source used for timer recording
         * @return {@link TimerRecordSource}
         * @throws IllegalArgumentException if {@code timerInfo} or {@code source} is null
         */
        OfAnalogueSource(
            [in] IHdmiTimerRecordSourcesTimerInfo* timerInfo,
            [in] IHdmiRecordSourcesAnalogueServiceSource* source,
            [out] ITimerRecordSource** result);

        /**
         * Create {@link TimerRecordSource} for external plug which is used for &lt;Set External
         * Timer&gt;.
         *
         * @param timerInfo timer info used for timer recording
         * @param source digital source used for timer recording
         * @return {@link TimerRecordSource}
         * @throws IllegalArgumentException if {@code timerInfo} or {@code source} is null
         */
        OfExternalPlug(
            [in] IHdmiTimerRecordSourcesTimerInfo* timerInfo,
            [in] IHdmiRecordSourcesExternalPlugData* source,
            [out] ITimerRecordSource** result);

        /**
         * Create {@link TimerRecordSource} for external physical address which is used for &lt;Set
         * External Timer&gt;.
         *
         * @param timerInfo timer info used for timer recording
         * @param source digital source used for timer recording
         * @return {@link TimerRecordSource}
         * @throws IllegalArgumentException if {@code timerInfo} or {@code source} is null
         */
        OfExternalPhysicalAddress(
            [in] IHdmiTimerRecordSourcesTimerInfo*  timerInfo,
            [in] IHdmiRecordSourcesExternalPhysicalAddress* source,
            [out] ITimerRecordSource** result);

        /**
         * Create {@link Duration} for time value.
         *
         * @param hour hour in range of [0, 23]
         * @param minute minute in range of [0, 60]
         * @return {@link Duration}
         * @throws IllegalArgumentException if hour or minute is out of range
         */
        TimeOf(
            [in] Int32 hour,
            [in] Int32 minute,
            [out] IHdmiTimerRecordSourcesTime** time);

        /**
         * Create {@link Duration} for duration value.
         *
         * @param hour hour in range of [0, 99]
         * @param minute minute in range of [0, 59]
         * @return {@link Duration}
         * @throws IllegalArgumentException if hour or minute is out of range
         */
        DurationOf(
            [in] Int32 hour,
            [in] Int32 minute,
            [out] IHdmiTimerRecordSourcesDuration** result);

        /**
         * Create {@link TimerInfo} with the given information.
         *
         * @param dayOfMonth day of month
         * @param monthOfYear month of year
         * @param startTime start time in {@link Time}
         * @param duration duration in {@link Duration}
         * @param recordingSequence recording sequence. Use RECORDING_SEQUENCE_REPEAT_ONCE_ONLY for no
         *            repeat. Otherwise use combination of {@link #RECORDING_SEQUENCE_REPEAT_SUNDAY},
         *            {@link #RECORDING_SEQUENCE_REPEAT_MONDAY},
         *            {@link #RECORDING_SEQUENCE_REPEAT_TUESDAY},
         *            {@link #RECORDING_SEQUENCE_REPEAT_WEDNESDAY},
         *            {@link #RECORDING_SEQUENCE_REPEAT_THURSDAY},
         *            {@link #RECORDING_SEQUENCE_REPEAT_FRIDAY},
         *            {@link #RECORDING_SEQUENCE_REPEAT_SATUREDAY}.
         * @return {@link TimerInfo}.
         * @throws IllegalArgumentException if input value is invalid
         */
        TimerInfoOf(
            [in] Int32 dayOfMonth,
            [in] Int32 monthOfYear,
            [in] IHdmiTimerRecordSourcesTime* startTime,
            [in] IHdmiTimerRecordSourcesDuration* duration,
            [in] Int32 recordingSequence,
            [out] IHdmiTimerRecordSourcesTimerInfo** result);

        /**
         * Check the byte array of timer record source.
         * @param sourcetype
         * @param recordSource
         * @hide
         */
        //@SystemApi
        CheckTimerRecordSource(
            [in] Int32 sourcetype,
            [in] ArrayOf<Byte>* recordSource,
            [out] Boolean* result);
    }

    } // namespace Hdmi
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
