module
{
    using interface Elastos.IO.IPrintWriter;
    using interface Elastos.IO.IFileDescriptor;

    interface Elastos.Droid.Content.ILoader;
    interface Elastos.Droid.Os.IBundle;

    namespace Elastos {
    namespace Droid {
    namespace App {

    [local]
    interface ILoaderManagerLoaderCallbacks {
        /**
         * Instantiate and return a new Loader for the given ID.
         *
         * @param id The ID whose loader is to be created.
         * @param args Any arguments supplied by the caller.
         * @return Return a new Loader instance that is ready to start loading.
         */
        OnCreateLoader(
            [in] Int32 id,
            [in] IBundle* args,
            [out] ILoader** loader);

        /**
         * Called when a previously created loader has finished its load.  Note
         * that normally an application is <em>not</em> allowed to commit fragment
         * transactions while in this call, since it can happen after an
         * activity's state is saved.  See {@link FragmentManager#beginTransaction()
         * FragmentManager.openTransaction()} for further discussion on this.
         *
         * <p>This function is guaranteed to be called prior to the release of
         * the last data that was supplied for this Loader.  At this point
         * you should remove all use of the old data (since it will be released
         * soon), but should not do your own release of the data since its Loader
         * owns it and will take care of that.  The Loader will take care of
         * management of its data so you don't have to.  In particular:
         *
         * <ul>
         * <li> <p>The Loader will monitor for changes to the data, and report
         * them to you through new calls here.  You should not monitor the
         * data yourself.  For example, if the data is a {@link android.database.Cursor}
         * and you place it in a {@link android.widget.CursorAdapter}, use
         * the {@link android.widget.CursorAdapter#CursorAdapter(android.content.Context,
         * android.database.Cursor, int)} constructor <em>without</em> passing
         * in either {@link android.widget.CursorAdapter#FLAG_AUTO_REQUERY}
         * or {@link android.widget.CursorAdapter#FLAG_REGISTER_CONTENT_OBSERVER}
         * (that is, use 0 for the flags argument).  This prevents the CursorAdapter
         * from doing its own observing of the Cursor, which is not needed since
         * when a change happens you will get a new Cursor throw another call
         * here.
         * <li> The Loader will release the data once it knows the application
         * is no longer using it.  For example, if the data is
         * a {@link android.database.Cursor} from a {@link android.content.CursorLoader},
         * you should not call close() on it yourself.  If the Cursor is being placed in a
         * {@link android.widget.CursorAdapter}, you should use the
         * {@link android.widget.CursorAdapter#swapCursor(android.database.Cursor)}
         * method so that the old Cursor is not closed.
         * </ul>
         *
         * @param loader The Loader that has finished.
         * @param data The data generated by the Loader.
         */
        OnLoadFinished(
            [in] ILoader* loader,
            [in] IInterface* data);

        /**
         * Called when a previously created loader is being reset, and thus
         * making its data unavailable.  The application should at this point
         * remove any references it has to the Loader's data.
         *
         * @param loader The Loader that is being reset.
         */
        OnLoaderReset(
            [in] ILoader* loader);
    }

    [deprecated, local]
    interface ILoaderManager {
        /**
         * Ensures a loader is initialized and active.  If the loader doesn't
         * already exist, one is created and (if the activity/fragment is currently
         * started) starts the loader.  Otherwise the last created
         * loader is re-used.
         *
         * <p>In either case, the given callback is associated with the loader, and
         * will be called as the loader state changes.  If at the point of call
         * the caller is in its started state, and the requested loader
         * already exists and has generated its data, then
         * callback {@link LoaderCallbacks#onLoadFinished} will
         * be called immediately (inside of this function), so you must be prepared
         * for this to happen.
         *
         * @param id A unique identifier for this loader.  Can be whatever you want.
         * Identifiers are scoped to a particular LoaderManager instance.
         * @param args Optional arguments to supply to the loader at construction.
         * If a loader already exists (a new one does not need to be created), this
         * parameter will be ignored and the last arguments continue to be used.
         * @param callback Interface the LoaderManager will call to report about
         * changes in the state of the loader.  Required.
         */
        InitLoader(
            [in] Int32 id,
            [in] IBundle* args,
            [in] ILoaderManagerLoaderCallbacks* cb,
            [out] ILoader** loader);

        /**
         * Starts a new or restarts an existing {@link android.content.Loader} in
         * this manager, registers the callbacks to it,
         * and (if the activity/fragment is currently started) starts loading it.
         * If a loader with the same id has previously been
         * started it will automatically be destroyed when the new loader completes
         * its work. The callback will be delivered before the old loader
         * is destroyed.
         *
         * @param id A unique identifier for this loader.  Can be whatever you want.
         * Identifiers are scoped to a particular LoaderManager instance.
         * @param args Optional arguments to supply to the loader at construction.
         * @param callback Interface the LoaderManager will call to report about
         * changes in the state of the loader.  Required.
         */
        RestartLoader(
            [in] Int32 id,
            [in] IBundle* args,
            [in] ILoaderManagerLoaderCallbacks* cb,
            [out] ILoader** loader);

        /**
         * Stops and removes the loader with the given ID.  If this loader
         * had previously reported data to the client through
         * {@link LoaderCallbacks#onLoadFinished(Loader, Object)}, a call
         * will be made to {@link LoaderCallbacks#onLoaderReset(Loader)}.
         */
        DestroyLoader(
            [in] Int32 id);

        /**
         * Return the Loader with the given id or null if no matching Loader
         * is found.
         */
        GetLoader(
            [in] Int32 id,
            [out] ILoader** loader);

        /**
         * Print the LoaderManager's state into the given stream.
         *
         * @param prefix Text to print at the front of each line.
         * @param fd The raw file descriptor that the dump is being sent to.
         * @param writer A PrintWriter to which the dump is to be set.
         * @param args Additional arguments to the dump request.
         */
        Dump(
            [in] String prefix,
            [in] IFileDescriptor* fd,
            [in] IPrintWriter* writer,
            [in] ArrayOf<String>* args);
    }

    /**
     * @Involve
     * interface ILoaderManager
     */
    interface ILoaderManagerImpl {
        HasRunningLoaders(
            [out] Boolean* has);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
