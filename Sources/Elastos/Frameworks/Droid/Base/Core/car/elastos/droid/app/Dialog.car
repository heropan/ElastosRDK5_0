module
{
    using interface Elastos.Core.ICharSequence;

    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IViewGroupLayoutParams;
    interface Elastos.Droid.View.IWindowManagerLayoutParams;
    interface Elastos.Droid.View.Accessibility.IAccessibilityEvent;
    interface Elastos.Droid.View.ILayoutInflater;
    interface Elastos.Droid.View.IWindow;
    interface Elastos.Droid.View.IContextMenu;
    interface Elastos.Droid.View.IContextMenuInfo;
    interface Elastos.Droid.View.IKeyEvent;
    interface Elastos.Droid.View.IMotionEvent;
    interface Elastos.Droid.View.IMenu;
    interface Elastos.Droid.View.IMenuItem;
    interface Elastos.Droid.View.IActionMode;
    interface Elastos.Droid.View.IActionModeCallback;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IDialogInterfaceOnCancelListener;
    interface Elastos.Droid.Content.IDialogInterfaceOnDismissListener;
    interface Elastos.Droid.Content.IDialogInterfaceOnShowListener;
    interface Elastos.Droid.Content.IDialogInterfaceOnKeyListener;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.IMessage;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Graphics.Drawable.IDrawable;

    namespace Elastos {
    namespace Droid {
    namespace App {

    /**
     * Base class for Dialogs.
     *
     * <p>Note: Activities provide a facility to manage the creation, saving and
     * restoring of dialogs. See Activity#onCreateDialog(int),
     * Activity#onPrepareDialog(int, Dialog),
     * Activity#showDialog(int), and Activity#dismissDialog(int). If
     * these methods are used, #getOwnerActivity() will return the Activity
     * that managed this dialog.
     *
     * @sa Activity#onCreateDialog(int)
     * @sa Activity#onPrepareDialog(int, Dialog)
     * @sa Activity#showDialog(int)
     * @sa Activity#dismissDialog(int)
     * @sa #getOwnerActivity()
     *
     * <p>Often you will want to have a Dialog display on top of the current
     * input method, because there is no reason for it to accept text.  You can
     * do this by setting the WindowManager.LayoutParams#FLAG_ALT_FOCUSABLE_IM
     * WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM window flag (assuming
     * your Dialog takes input focus, as it the default) with the following code:
     *
     * @sa WindowManager.LayoutParams#FLAG_ALT_FOCUSABLE_IM WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM
     *
     * <pre>
     *     getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM,
     *             WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
     * </pre>
     *
     * @implements Elastos.Droid.App.Elastos.Droid.Content.IDialogInterface
     */
    /**
     * @Involve
     * interface Elastos.Droid.Content.IDialogInterface
     * interface IWindowCallback
     * interface IKeyEventCallback
     * interface IOnCreateContextMenuListener
     * interface IOnWindowDismissedCallback
     */
    [local]
    interface IDialog {
        /**
         * Retrieve the Context this Dialog is running in.
         *
         * @return Context The Context used by the Dialog.
         */
        GetContext(
            [out] IContext** context);

        /**
         * Retrieve the ActionBar attached to this dialog, if present.
         *
         * @sa ActionBar
         *
         * @return The ActionBar attached to the dialog or null if no ActionBar is present.
         */
        GetActionBar(
            [out] IActionBar** actionBar);

        /**
         * Sets the Activity that owns this dialog. An example use: This Dialog will
         * use the suggested volume control stream of the Activity.
         *
         * @param activity The Activity that owns this dialog.
         */
        SetOwnerActivity(
            [in] IActivity* activity);

        /**
         * Returns the Activity that owns this Dialog. For example, if
         * Activity#showDialog(Int32) is used to show this Dialog, that
         * Activity will be the owner (by default). Depending on how this dialog was
         * created, this may return NULL.
         *
         * @sa Activity#showDialog(Int32)
         *
         * @return The Activity that owns this Dialog.
         */
        GetOwnerActivity(
            [out] IActivity** activity);

        /**
         * @return Whether the dialog is currently showing.
         */
        IsShowing(
            [out] Boolean* isShowing);

        /**
         * Forces immediate creation of the dialog.
         * <p>
         * Note that you should not override this method to perform dialog creation.
         * Rather, override {@link #onCreate(Bundle)}.
         */
        Create();

        /**
         * Start the dialog and display it on screen.  The window is placed in the
         * application layer and opaque.  Note that you should not override this
         * method to do initialization when the dialog is shown, instead implement
         * that in #OnStart.
         *
         * @sa #OnStart
         */
        Show();

        /**
         * Hide the dialog, but do not dismiss it.
         */
        Hide();

        /**
         * Saves the state of the dialog into a bundle.
         *
         * The default implementation saves the state of its view hierarchy, so you'll
         * likely want to call through to super if you override this to save additional
         * state.
         * @return A bundle with the state of the dialog.
         */
        OnSaveInstanceState(
            [out] IBundle** bundle);

        /**
         * Restore the state of the dialog from a previously saved bundle.
         *
         * The default implementation restores the state of the dialog's view
         * hierarchy that was saved in the default implementation of #onSaveInstanceState(),
         * so be sure to call through to super when overriding unless you want to
         * do all restoring of state yourself.
         * @param savedInstanceState The state of the dialog previously saved by
         *     #onSaveInstanceState().
         *
         * @sa #onSaveInstanceState()
         * @sa #onSaveInstanceState()
         */
        OnRestoreInstanceState(
            [in] IBundle* savedInstanceState);

        /**
         * Retrieve the current Window for the activity.  This can be used to
         * directly access parts of the Window API that are not available
         * through Activity/Screen.
         *
         * @return Window The current window, or NULL if the activity is not
         *         visual.
         */
        GetWindow(
            [out] IWindow** window);

        /**
         * Call android.view.Window#getCurrentFocus on the
         * Window if this Activity to return the currently focused view.
         *
         * @sa android.view.Window#getCurrentFocus
         *
         * @return View The current View with focus or NULL.
         *
         * @see #GetWindow
         * @see android.view.Window#getCurrentFocus
         */
        GetCurrentFocus(
            [out] IView** view);

        /**
         * Finds a view that was identified by the id attribute from the XML that
         * was processed in #OnStart.
         *
         * @sa #OnStart
         *
         * @param id the identifier of the view to find
         * @return The view if found or NULL otherwise.
         */
        FindViewById(
            [in] Int32 id,
            [out] IView** view);

        /**
         * Set the screen content from a layout resource.  The resource will be
         * inflated, adding all top-level views to the screen.
         *
         * @param layoutResID Resource ID to be inflated.
         */
        SetContentView(
            [in] Int32 layoutResID);

        /**
         * Set the screen content to an explicit view.  This view is placed
         * directly into the screen's view hierarchy.  It can itself be a complex
         * view hierarhcy.
         *
         * @param view The desired content to display.
         */
        SetContentView(
            [in] IView* view);

        /**
         * Set the screen content to an explicit view.  This view is placed
         * directly into the screen's view hierarchy.  It can itself be a complex
         * view hierarhcy.
         *
         * @param view The desired content to display.
         * @param params Layout parameters for the view.
         */
        SetContentView(
            [in] IView* view,
            [in] IViewGroupLayoutParams* params);

        /**
         * Add an additional content view to the screen.  Added after any existing
         * ones in the screen -- existing views are NOT removed.
         *
         * @param view The desired content to display.
         * @param params Layout parameters for the view.
         */
        AddContentView(
            [in] IView* view,
            [in] IViewGroupLayoutParams* params);

        /**
         * Set the title text for this dialog's window.
         *
         * @param title The new text to display in the title.
         */
        SetTitle(
            [in] ICharSequence* title);

        /**
         * Set the title text for this dialog's window. The text is retrieved
         * from the resources with the supplied identifier.
         *
         * @param titleId the title's text resource identifier
         */
        SetTitle(
            [in] Int32 titleId);

        /**
         * A key was pressed down.
         *
         * <p>If the focused view didn't want this event, this method is called.
         *
         * <p>The default implementation consumed the KEYCODE_BACK to later
         * handle it in {@link #onKeyUp}.
         *
         * @see #onKeyUp
         * @see android.view.KeyEvent
         */
        OnKeyDown(
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* result);

        /**
         * Default implementation of {@link KeyEvent.Callback#onKeyLongPress(int, KeyEvent)
         * KeyEvent.Callback.onKeyLongPress()}: always returns false (doesn't handle
         * the event).
         */
        OnKeyLongPress(
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* result);

        /**
         * A key was released.
         *
         * <p>The default implementation handles KEYCODE_BACK to close the
         * dialog.
         *
         * @see #onKeyDown
         * @see KeyEvent
         */
        OnKeyUp(
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* result);

        /**
         * Default implementation of {@link KeyEvent.Callback#onKeyMultiple(int, int, KeyEvent)
         * KeyEvent.Callback.onKeyMultiple()}: always returns false (doesn't handle
         * the event).
         */
        OnKeyMultiple(
            [in] Int32 keyCode,
            [in] Int32 repeatCount,
            [in] IKeyEvent* event,
            [out] Boolean* result);

        /**
         * Called when the dialog has detected the user's press of the back
         * key.  The default implementation simply cancels the dialog (only if
         * it is cancelable), but you can override this to do whatever you want.
         */
        OnBackPressed();

        /**
         * Called when a key shortcut event is not handled by any of the views in the Dialog.
         * Override this method to implement global key shortcuts for the Dialog.
         * Key shortcuts can also be implemented by setting the
         * MenuItem#setShortcut(char, char) shortcut property of menu items.
         *
         * @sa MenuItem#setShortcut(char, char) shortcut
         * @param keyCode The value in event.getKeyCode().
         * @param event Description of the key event.
         * @return True if the key shortcut was handled.
         */
        OnKeyShortcut(
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* handled);

        /**
         * Called when a touch screen event was not handled by any of the views
         * under it. This is most useful to process touch events that happen outside
         * of your window bounds, where there is no view to receive it.
         *
         * @param event The touch screen event being processed.
         * @return Return true if you have consumed the event, false if you haven't.
         *         The default implementation will cancel the dialog when a touch
         *         happens outside of the window bounds.
         */
        OnTouchEvent(
            [in] IMotionEvent* event,
            [out] Boolean* res);

        /**
         * Called when the trackball was moved and not handled by any of the
         * views inside of the activity.  So, for example, if the trackball moves
         * while focus is on a button, you will receive a call here because
         * buttons do not normally do anything with trackball events.  The call
         * here happens <em>before</em> trackball movements are converted to
         * DPAD key events, which then get sent back to the view hierarchy, and
         * will be processed at the point for things like focus navigation.
         *
         * @param event The trackball event being processed.
         *
         * @return Return true if you have consumed the event, false if you haven't.
         * The default implementation always returns false.
         */
        OnTrackballEvent(
            [in] IMotionEvent* event,
            [out] Boolean* res);

        /**
         * Called when a generic motion event was not handled by any of the
         * views inside of the dialog.
         * <p>
         * Generic motion events describe joystick movements, mouse hovers, track pad
         * touches, scroll wheel movements and other input events.  The
         * {@sa MotionEvent#getSource() source} of the motion event specifies
         * the class of input that was received.  Implementations of this method
         * must examine the bits in the source before processing the event.
         * The following code example shows how this is done.
         * </p><p>
         * Generic motion events with source class
         * android.view.InputDevice#SOURCE_CLASS_POINTER
         * are delivered to the view under the pointer.  All other generic motion events are
         * delivered to the focused view.
         *
         * @sa android.view.InputDevice#SOURCE_CLASS_POINTER
         * </p><p>
         * See View#onGenericMotionEvent(MotionEvent) for an example of how to
         * handle this event.
         *
         * @sa View#onGenericMotionEvent(MotionEvent)
         * </p>
         *
         * @param event The generic motion event being processed.
         *
         * @return Return true if you have consumed the event, false if you haven't.
         * The default implementation always returns false.
         */
        OnGenericMotionEvent(
            [in] IMotionEvent* event,
            [out] Boolean* res);

        OnWindowAttributesChanged(
            [in] IWindowManagerLayoutParams* params);

        OnContentChanged();

        OnWindowFocusChanged(
            [in] Boolean hasFocus);

        OnAttachedToWindow();

        OnDetachedFromWindow();

        /**
         * Called to process key events.  You can override this to intercept all
         * key events before they are dispatched to the window.  Be sure to call
         * this implementation for key events that should be handled normally.
         *
         * @param event The key event.
         *
         * @return boolean Return true if this event was consumed.
         */
        DispatchKeyEvent(
            [in] IKeyEvent* event,
            [out] Boolean* result);

        /**
         * Called to process a key shortcut event.
         * You can override this to intercept all key shortcut events before they are
         * dispatched to the window.  Be sure to call this implementation for key shortcut
         * events that should be handled normally.
         *
         * @param event The key shortcut event.
         * @return True if this event was consumed.
         */
        DispatchKeyShortcutEvent(
            [in] IKeyEvent* event,
            [out] Boolean* result);

        /**
         * Called to process touch screen events.  You can override this to
         * intercept all touch screen events before they are dispatched to the
         * window.  Be sure to call this implementation for touch screen events
         * that should be handled normally.
         *
         * @param ev The touch screen event.
         *
         * @return boolean Return true if this event was consumed.
         */
        DispatchTouchEvent(
            [in] IMotionEvent* event,
            [out] Boolean* result);

        /**
         * Called to process trackball events.  You can override this to
         * intercept all trackball events before they are dispatched to the
         * window.  Be sure to call this implementation for trackball events
         * that should be handled normally.
         *
         * @param ev The trackball event.
         *
         * @return boolean Return true if this event was consumed.
         */
        DispatchTrackballEvent(
            [in] IMotionEvent* event,
            [out] Boolean* result);

        /**
         * Called to process generic motion events.  You can override this to
         * intercept all generic motion events before they are dispatched to the
         * window.  Be sure to call this implementation for generic motion events
         * that should be handled normally.
         *
         * @param ev The generic motion event.
         *
         * @return boolean Return true if this event was consumed.
         */
        DispatchGenericMotionEvent(
            [in] IMotionEvent* event,
            [out] Boolean* result);

        DispatchPopulateAccessibilityEvent(
            [in] IAccessibilityEvent* event,
            [out] Boolean* result);

        /**
         * @see Activity#onCreatePanelView(int)
         */
        OnCreatePanelView(
            [in] Int32 featureId,
            [out] IView** result);

        /**
         * @see Activity#onCreatePanelMenu(int, Menu)
         */
        OnCreatePanelMenu(
            [in] Int32 featureId,
            [in] IMenu* menu,
            [out] Boolean* result);

        /**
         * @see Activity#onPreparePanel(int, View, Menu)
         */
        OnPreparePanel(
            [in] Int32 featureId,
            [in] IView* view,
            [in] IMenu* menu,
            [out] Boolean* result);

        /**
         * @see Activity#onMenuOpened(int, Menu)
         */
        OnMenuOpened(
            [in] Int32 featureId,
            [in] IMenu* menu,
            [out] Boolean* result);

        /**
         * @see Activity#onMenuItemSelected(int, MenuItem)
         */
        OnMenuItemSelected(
            [in] Int32 featureId,
            [in] IMenuItem* menu,
            [out] Boolean* result);

        /**
         * @see Activity#onPanelClosed(int, Menu)
         */
        OnPanelClosed(
            [in] Int32 featureId,
            [in] IMenu* menu);

        /**
         * It is usually safe to proxy this call to the owner activity's
         * Activity#onCreateOptionsMenu(Menu) if the client desires the same
         * menu for this Dialog.
         *
         * @sa Activity#onCreateOptionsMenu(Menu)
         *
         * @see Activity#onCreateOptionsMenu(Menu)
         * @see #getOwnerActivity()
         */
        OnCreateOptionsMenu(
            [in] IMenu* menu,
            [out] Boolean* res);

        /**
         * It is usually safe to proxy this call to the owner activity's
         * Activity#onPrepareOptionsMenu(Menu) if the client desires the
         * same menu for this Dialog.
         *
         * @sa Activity#onPrepareOptionsMenu(Menu)
         *
         * @see Activity#onPrepareOptionsMenu(Menu)
         * @see #getOwnerActivity()
         */
        OnPrepareOptionsMenu(
            [in] IMenu* menu,
            [out] Boolean* res);

        /**
         * @see Activity#onOptionsItemSelected(MenuItem)
         */
        OnOptionsItemSelected(
            [in] IMenuItem* item,
            [out] Boolean* selected);

        /**
         * @see Activity#onOptionsMenuClosed(Menu)
         */
        OnOptionsMenuClosed(
            [in] IMenu* menu);

        /**
         * @see Activity#openOptionsMenu()
         */
        OpenOptionsMenu();

        /**
         * @see Activity#closeOptionsMenu()
         */
        CloseOptionsMenu();

        /**
         * @see Activity#invalidateOptionsMenu()
         */
        InvalidateOptionsMenu();

        /**
         * @see Activity#onCreateContextMenu(ContextMenu, View, ContextMenuInfo)
         */
        OnCreateContextMenu(
            [in] IContextMenu* menu,
            [in] IView* v,
            [in] IContextMenuInfo* menuInfo);

        /**
         * @see Activity#registerForContextMenu(View)
         */
        RegisterForContextMenu(
            [in] IView* view);

        /**
         * @see Activity#unregisterForContextMenu(View)
         */
        UnregisterForContextMenu(
            [in] IView* view);

        /**
         * @see Activity#openContextMenu(View)
         */
        OpenContextMenu(
            [in] IView* view);

        /**
         * @see Activity#onContextItemSelected(MenuItem)
         */
        OnContextItemSelected(
            [in] IMenuItem* item,
            [out] Boolean* selected);

        /**
         * @see Activity#onContextMenuClosed(Menu)
         */
        OnContextMenuClosed(
            [in] IMenu* menu);

        /**
         * This hook is called when the user signals the desire to start a search.
         */
        OnSearchRequested(
            [out] Boolean* result);

        OnWindowStartingActionMode(
            [in] IActionModeCallback* cb,
            [out] IActionMode** mode);

        /**
         * {@inheritDoc}
         *
         * Note that if you override this method you should always call through
         * to the superclass implementation by calling super.onActionModeStarted(mode).
         */
        OnActionModeStarted(
            [in] IActionMode* mode);

        /**
         * {@inheritDoc}
         *
         * Note that if you override this method you should always call through
         * to the superclass implementation by calling super.onActionModeFinished(mode).
         */
        OnActionModeFinished(
            [in] IActionMode* mode);

        /**
         * Request that key events come to this dialog. Use this if your
         * dialog has no views with focus, but the dialog still wants
         * a chance to process key events.
         *
         * @param get true if the dialog should receive key events, false otherwise
         * @see android.view.Window#takeKeyEvents
         */
        TakeKeyEvents(
            [in] Boolean get);

        /**
         * Enable extended window features.  This is a convenience for calling
         * android.view.Window#requestFeature getWindow().requestFeature().
         *
         * @sa android.view.Window#requestFeature getWindow().requestFeature()
         *
         * @param featureId The desired feature as defined in
         *                  android.view.Window.
         *
         * @sa android.view.Window
         * @return Returns true if the requested feature is supported and now
         *         enabled.
         *
         * @see android.view.Window#requestFeature
         */
        RequestWindowFeature(
            [in] Int32 featureId,
            [out] Boolean* res);

        /**
         * Convenience for calling
         * android.view.Window#setFeatureDrawableResource.
         *
         * @sa android.view.Window#setFeatureDrawableResource
         */
        SetFeatureDrawableResource(
            [in] Int32 featureId,
            [in] Int32 resId);

        /**
         * Convenience for calling
         * android.view.Window#setFeatureDrawableUri.
         * @sa android.view.Window#setFeatureDrawableUri
         */
        SetFeatureDrawableUri(
            [in] Int32 featureId,
            [in] IUri* uri);

        /**
         * Convenience for calling
         * android.view.Window#setFeatureDrawable(int, Drawable).
         * @sa android.view.Window#setFeatureDrawable(int, Drawable)
         */
        SetFeatureDrawable(
            [in] Int32 featureId,
            [in] IDrawable* drawable);

        /**
         * Convenience for calling
         * android.view.Window#setFeatureDrawableAlpha.
         * @sa android.view.Window#setFeatureDrawableAlpha
         */
        SetFeatureDrawableAlpha(
            [in] Int32 featureId,
            [in] Int32 alpha);

        GetLayoutInflater(
            [out] ILayoutInflater** layoutInflater);

        /**
         * Sets whether this dialog is cancelable with the
         * KeyEvent#KEYCODE_BACK BACK key.
         *
         * @sa KeyEvent#KEYCODE_BACK BACK
         */
        SetCancelable(
            [in] Boolean flag);

        /**
         * Sets whether this dialog is canceled when touched outside the window's
         * bounds. If setting to true, the dialog is set to be cancelable if not
         * already set.
         *
         * @param cancel Whether the dialog should be canceled when touched outside
         *            the window.
         */
        SetCanceledOnTouchOutside(
            [in] Boolean cancel);

        /**
         * Cancel the dialog.  This is essentially the same as calling {@link #dismiss()}, but it will
         * also call your {@link DialogInterface.OnCancelListener} (if registered).
         */
        Cancel();

        /**
         * Set a listener to be invoked when the dialog is canceled.
         *
         * <p>This will only be invoked when the dialog is canceled.
         * Cancel events alone will not capture all ways that
         * the dialog might be dismissed. If the creator needs
         * to know when a dialog is dismissed in general, use
         * #setOnDismissListener.</p>
         *
         * @sa #setOnDismissListener
         *
         * @param listener The DialogInterface.OnCancelListener to use.
         *
         * @sa DialogInterface.OnCancelListener
         */
        SetOnCancelListener(
            [in] IDialogInterfaceOnCancelListener* listener);

        /**
         * Set a message to be sent when the dialog is canceled.
         * @param msg The msg to send when the dialog is canceled.
         * @see #setOnCancelListener(android.content.DialogInterface.OnCancelListener)
         */
        SetCancelMessage(
            [in] IMessage* msg);

        /**
         * Set a listener to be invoked when the dialog is dismissed.
         * @param listener The DialogInterface.OnDismissListener to use.
         *
         * @sa DialogInterface.OnDismissListener
         */
        SetOnDismissListener(
            [in] IDialogInterfaceOnDismissListener* listener);

        /**
         * Sets a listener to be invoked when the dialog is shown.
         * @param listener The DialogInterface.OnShowListener to use.
         *
         * @sa DialogInterface.OnShowListener
         */
        SetOnShowListener(
            [in] IDialogInterfaceOnShowListener* listener);

        /**
         * Set a message to be sent when the dialog is dismissed.
         * @param msg The msg to send when the dialog is dismissed.
         */
        SetDismissMessage(
            [in] IMessage* msg);

        /** @hide */
        TakeCancelAndDismissListeners(
            [in] String msg,
            [in] IDialogInterfaceOnCancelListener* cancel,
            [in] IDialogInterfaceOnDismissListener* dismiss,
            [out] Boolean* res);

        /**
         * By default, this will use the owner Activity's suggested stream type.
         *
         * @see Activity#setVolumeControlStream(int)
         * @see #setOwnerActivity(Activity)
         */
        SetVolumeControlStream(
            [in] Int32 streamType);

        /**
         * @see Activity#getVolumeControlStream()
         */
        GetVolumeControlStream(
            [out] Int32* stream);

        /**
         * Sets the callback that will be called if a key is dispatched to the dialog.
         */
        SetOnKeyListener(
            [in] IDialogInterfaceOnKeyListener* onKeyListener);

        DispatchOnCreate(
            [in] IBundle* savedInstanceState);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
