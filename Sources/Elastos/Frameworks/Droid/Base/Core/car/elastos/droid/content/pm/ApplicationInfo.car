
module
{
    interface Elastos.Droid.Content.Pm.IPackageManager;
    interface Elastos.Droid.Utility.IPrinter;
    interface Elastos.Core.ICharSequence;

    namespace Elastos {
    namespace Droid {
    namespace Content {
    namespace Pm {

    /**
     * Information you can retrieve about a particular application. This
     * corresponds to information collected from the AndroidManifest.xml's
     * <application> tag.
     *
     * @implements PackageItemInfo
     */

    /**
     * @Involve
     * interface Elastos.Droid.Content.Pm.IPackageItemInfo;
     * interface IParcelable;
     */
    [deprecated]
    interface IApplicationInfo {

        /**
         * Value for {@link #flags}: if set, this application is installed in the
         * device's system image.
         */
        const Int32 FLAG_SYSTEM = 1<<0;

        /**
         * Value for {@link #flags}: set to true if this application would like to
         * allow debugging of its
         * code, even when installed on a non-development system.  Comes
         * from {@link android.R.styleable#AndroidManifestApplication_debuggable
         * android:debuggable} of the &lt;application&gt; tag.
         */
        const Int32 FLAG_DEBUGGABLE = 1<<1;

        /**
         * Value for {@link #flags}: set to true if this application has code
         * associated with it.  Comes
         * from {@link android.R.styleable#AndroidManifestApplication_hasCode
         * android:hasCode} of the &lt;application&gt; tag.
         */
        const Int32 FLAG_HAS_CODE = 1<<2;

        /**
         * Value for {@link #flags}: set to true if this application is persistent.
         * Comes from {@link android.R.styleable#AndroidManifestApplication_persistent
         * android:persistent} of the &lt;application&gt; tag.
         */
        const Int32 FLAG_PERSISTENT = 1<<3;

        /**
         * Value for {@link #flags}: set to true if this application holds the
         * {@link android.Manifest.permission#FACTORY_TEST} permission and the
         * device is running in factory test mode.
         */
        const Int32 FLAG_FACTORY_TEST = 1<<4;

        /**
         * Value for {@link #flags}: default value for the corresponding ActivityInfo flag.
         * Comes from {@link android.R.styleable#AndroidManifestApplication_allowTaskReparenting
         * android:allowTaskReparenting} of the &lt;application&gt; tag.
         */
        const Int32 FLAG_ALLOW_TASK_REPARENTING = 1<<5;

        /**
         * Value for {@link #flags}: default value for the corresponding ActivityInfo flag.
         * Comes from {@link android.R.styleable#AndroidManifestApplication_allowClearUserData
         * android:allowClearUserData} of the &lt;application&gt; tag.
         */
        const Int32 FLAG_ALLOW_CLEAR_USER_DATA = 1<<6;

        /**
         * Value for {@link #flags}: this is set if this application has been
         * install as an update to a built-in system application.
         */
        const Int32 FLAG_UPDATED_SYSTEM_APP = 1<<7;

        /**
         * Value for {@link #flags}: this is set of the application has specified
         * {@link android.R.styleable#AndroidManifestApplication_testOnly
         * android:testOnly} to be true.
         */
        const Int32 FLAG_TEST_ONLY = 1<<8;

        /**
         * Value for {@link #flags}: true when the application's window can be
         * reduced in size for smaller screens.  Corresponds to
         * {@link android.R.styleable#AndroidManifestSupportsScreens_smallScreens
         * android:smallScreens}.
         */
        const Int32 FLAG_SUPPORTS_SMALL_SCREENS = 1<<9;

        /**
         * Value for {@link #flags}: true when the application's window can be
         * displayed on normal screens.  Corresponds to
         * {@link android.R.styleable#AndroidManifestSupportsScreens_normalScreens
         * android:normalScreens}.
         */
        const Int32 FLAG_SUPPORTS_NORMAL_SCREENS = 1<<10;

        /**
         * Value for {@link #flags}: true when the application's window can be
         * increased in size for larger screens.  Corresponds to
         * {@link android.R.styleable#AndroidManifestSupportsScreens_largeScreens
         * android:largeScreens}.
         */
        const Int32 FLAG_SUPPORTS_LARGE_SCREENS = 1<<11;

        /**
         * Value for {@link #flags}: true when the application knows how to adjust
         * its UI for different screen sizes.  Corresponds to
         * {@link android.R.styleable#AndroidManifestSupportsScreens_resizeable
         * android:resizeable}.
         */
        const Int32 FLAG_RESIZEABLE_FOR_SCREENS = 1<<12;

        /**
         * Value for {@link #flags}: true when the application knows how to
         * accomodate different screen densities.  Corresponds to
         * {@link android.R.styleable#AndroidManifestSupportsScreens_anyDensity
         * android:anyDensity}.
         */
        const Int32 FLAG_SUPPORTS_SCREEN_DENSITIES = 1<<13;

        /**
         * Value for {@link #flags}: set to true if this application would like to
         * request the VM to operate under the safe mode. Comes from
         * {@link android.R.styleable#AndroidManifestApplication_vmSafeMode
         * android:vmSafeMode} of the &lt;application&gt; tag.
         */
        const Int32 FLAG_VM_SAFE_MODE = 1<<14;

        /**
         * Value for {@link #flags}: set to <code>false</code> if the application does not wish
         * to permit any OS-driven backups of its data; <code>true</code> otherwise.
         *
         * <p>Comes from the
         * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}
         * attribute of the &lt;application&gt; tag.
         */
        const Int32 FLAG_ALLOW_BACKUP = 1<<15;

        /**
         * Value for {@link #flags}: set to <code>false</code> if the application must be kept
         * in memory following a full-system restore operation; <code>true</code> otherwise.
         * Ordinarily, during a full system restore operation each application is shut down
         * following execution of its agent's onRestore() method.  Setting this attribute to
         * <code>false</code> prevents this.  Most applications will not need to set this attribute.
         *
         * <p>If
         * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}
         * is set to <code>false</code> or no
         * {@link android.R.styleable#AndroidManifestApplication_backupAgent android:backupAgent}
         * is specified, this flag will be ignored.
         *
         * <p>Comes from the
         * {@link android.R.styleable#AndroidManifestApplication_killAfterRestore android:killAfterRestore}
         * attribute of the &lt;application&gt; tag.
         */
        const Int32 FLAG_KILL_AFTER_RESTORE = 1<<16;

        /**
         * Value for {@link #flags}: Set to <code>true</code> if the application's backup
         * agent claims to be able to handle restore data even "from the future,"
         * i.e. from versions of the application with a versionCode greater than
         * the one currently installed on the device.  <i>Use with caution!</i>  By default
         * this attribute is <code>false</code> and the Backup Manager will ensure that data
         * from "future" versions of the application are never supplied during a restore operation.
         *
         * <p>If
         * {@link android.R.styleable#AndroidManifestApplication_allowBackup android:allowBackup}
         * is set to <code>false</code> or no
         * {@link android.R.styleable#AndroidManifestApplication_backupAgent android:backupAgent}
         * is specified, this flag will be ignored.
         *
         * <p>Comes from the
         * {@link android.R.styleable#AndroidManifestApplication_restoreAnyVersion android:restoreAnyVersion}
         * attribute of the &lt;application&gt; tag.
         */
        const Int32 FLAG_RESTORE_ANY_VERSION = 1<<17;

        /**
         * Value for {@link #flags}: Set to true if the application is
         * currently installed on external/removable/unprotected storage.  Such
         * applications may not be available if their storage is not currently
         * mounted.  When the storage it is on is not available, it will look like
         * the application has been uninstalled (its .apk is no longer available)
         * but its persistent data is not removed.
         */
        const Int32 FLAG_EXTERNAL_STORAGE = 1<<18;

        /**
         * Value for {@link #flags}: true when the application's window can be
         * increased in size for extra large screens.  Corresponds to
         * {@link android.R.styleable#AndroidManifestSupportsScreens_xlargeScreens
         * android:xlargeScreens}.
         */
        const Int32 FLAG_SUPPORTS_XLARGE_SCREENS = 1<<19;

        /**
         * Value for {@link #flags}: true when the application has requested a
         * large heap for its processes.  Corresponds to
         * {@link android.R.styleable#AndroidManifestApplication_largeHeap
         * android:largeHeap}.
         */
        const Int32 FLAG_LARGE_HEAP = 1<<20;

        /**
         * Value for {@link #flags}: true if this application's package is in
         * the stopped state.
         */
        const Int32 FLAG_STOPPED = 1<<21;

        /**
         * Value for {@link #flags}: true  when the application is willing to support
         * RTL (right to left). All activities will inherit this value.
         *
         * Set from the {@link android.R.attr#supportsRtl} attribute in the
         * activity's manifest.
         *
         * Default value is false (no support for RTL).
         */
        const Int32 FLAG_SUPPORTS_RTL = 1<<22;

        /**
         * Value for {@link #flags}: true if the application is currently
         * installed for the calling user.
         */
        const Int32 FLAG_INSTALLED = 1<<23;

        /**
         * Value for {@link #flags}: true if the application only has its
         * data installed; the application package itself does not currently
         * exist on the device.
         */
        const Int32 FLAG_IS_DATA_ONLY = 1<<24;

        /**
         * Value for {@link #flags}: true if the application was declared to be a game, or
         * false if it is a non-game application.
         */
        const Int32 FLAG_IS_GAME = 1<<25;

        /**
         * Value for {@link #flags}: {@code true} if the application asks that only
         * full-data streaming backups of its data be performed even though it defines
         * a {@link android.app.backup.BackupAgent BackupAgent}, which normally
         * indicates that the app will manage its backed-up data via incremental
         * key/value updates.
         */
        const Int32 FLAG_FULL_BACKUP_ONLY = 1<<26;

        /**
         * Value for {@link #flags}: true if the application is hidden via restrictions and for
         * most purposes is considered as not installed.
         * {@hide}
         */
        const Int32 FLAG_HIDDEN = 1<<27;

        /**
         * Value for {@link #flags}: set to <code>true</code> if the application
         * has reported that it is heavy-weight, and thus can not participate in
         * the normal application lifecycle.
         *
         * <p>Comes from the
         * android.R.styleable#AndroidManifestApplication_cantSaveState
         * attribute of the &lt;application&gt; tag.
         *
         * {@hide}
         */
        const Int32 FLAG_CANT_SAVE_STATE = 1<<28;

        /**
         * Value for {@link #flags}: Set to true if the application has been
         * installed using the forward lock option.
         *
         * NOTE: DO NOT CHANGE THIS VALUE!  It is saved in packages.xml.
         *
         * {@hide}
         */
        const Int32 FLAG_FORWARD_LOCK = 1<<29;

        /**
         * Value for {@link #flags}: set to {@code true} if the application
         * is permitted to hold privileged permissions.
         *
         * {@hide}
         */
        const Int32 FLAG_PRIVILEGED = 1<<30;

        /**
         * Value for {@link #flags}: true if code from this application will need to be
         * loaded into other applications' processes. On devices that support multiple
         * instruction sets, this implies the code might be loaded into a process that's
         * using any of the devices supported instruction sets.
         *
         * <p> The system might treat such applications specially, for eg., by
         * extracting the application's native libraries for all supported instruction
         * sets or by compiling the application's dex code for all supported instruction
         * sets.
         */
        const Int32 FLAG_MULTIARCH  = 0x80000000; // 1<<31;


        Dump(
            [in] IPrinter* pw,
            [in] String prefix);

        /**
         * @return true if "supportsRtl" has been set to true in the AndroidManifest
         * @hide
         */
        HasRtlSupport(
            [out] Boolean* isSupport);

        ToString(
            [out] String* str);

        LoadDescription(
            [in] IPackageManager* pm,
            [out] ICharSequence** description);

        DisableCompatibilityMode();

        GetTaskAffinity(
            [out] String* task);

        SetTaskAffinity(
            [in] String task);

        GetPermission(
            [out] String* permission);

        SetPermission(
            [in] String permission);

        GetProcessName(
            [out] String* name);

        SetProcessName(
            [in] String name);

        GetClassName(
            [out] String* name);

        SetClassName(
            [in] String name);

        GetDescriptionRes(
            [out] Int32* desRes);

        SetDescriptionRes(
            [in] Int32 desRes);

        GetTheme(
            [out] Int32* theme);

        SetTheme(
            [in] Int32 theme);

        GetManageSpaceActivityName(
            [out] String* name);

        SetManageSpaceActivityName(
            [in] String name);

        GetBackupAgentName(
            [out] String* name);

        SetBackupAgentName(
            [in] String name);

        GetUiOptions(
            [out] Int32* uiOptions);

        SetUiOptions(
            [in] Int32 uiOptions);

        GetFlags(
            [out] Int32* flags);

        SetFlags(
            [in] Int32 flags);

        GetRequiresSmallestWidthDp(
            [out] Int32* requiresSmallestWidthDp);

        SetRequiresSmallestWidthDp(
            [in] Int32 requiresSmallestWidthDp);

        GetCompatibleWidthLimitDp(
            [out] Int32* compatibleWidthLimitDp);

        SetCompatibleWidthLimitDp(
            [in] Int32 compatibleWidthLimitDp);

        GetLargestWidthLimitDp(
            [out] Int32* largestWidthLimitDp);

        SetLargestWidthLimitDp(
            [in] Int32 largestWidthLimitDp);

        GetSourceDir(
            [out] String* sourceDir);

        SetSourceDir(
            [in] String sourceDir);

        GetPublicSourceDir(
            [out] String* publicSourceDir);

        SetPublicSourceDir(
            [in] String pubicSourceDir);

        GetSplitSourceDirs(
            [out, callee] ArrayOf<String>* resourceDirs);

        SetSplitSourceDirs(
            [in] ArrayOf<String>* resourceDirs);

        GetSplitPublicSourceDirs(
            [out, callee] ArrayOf<String>* resourceDirs);

        SetSplitPublicSourceDirs(
            [in] ArrayOf<String>* resourceDirs);

        GetResourceDirs(
            [out, callee] ArrayOf<String>* resourceDirs);

        SetResourceDirs(
            [in] ArrayOf<String>* resourceDirs);

        GetSharedLibraryFiles(
            [out, callee] ArrayOf<String>* sharedLibraryFiles);

        SetSharedLibraryFiles(
            [in] ArrayOf<String>* sharedLibraryFiles);

        GetDataDir(
            [out] String* dataDir);

        SetDataDir(
            [in] String dataDir);

        GetNativeLibraryDir(
            [out] String* libraryDir);

        SetNativeLibraryDir(
            [in] String libraryDir);

        GetPrimaryCpuAbi(
            [out] String* libraryDir);

        SetPrimaryCpuAbi(
            [in] String libraryDir);

        GetSecondaryCpuAbi(
            [out] String* libraryDir);

        SetSecondaryCpuAbi(
            [in] String libraryDir);

        GetUid(
            [out] Int32* uid);

        SetUid(
            [in] Int32 uid);

        GetTargetSdkVersion(
            [out] Int32* sdkVersion);

        SetTargetSdkVersion(
            [in] Int32 sdkVersion);

        GetVersionCode(
            [out] Int32* code);

        SetVersionCode(
            [in] Int32 code);

        GetEnabled(
            [out] Boolean* enabled);

        SetEnabled(
            [in] Boolean enabled);

        GetEnabledSetting(
            [out] Int32* enabledSetting);

        SetEnabledSetting(
            [in] Int32 enabledSetting);

        GetInstallLocation(
            [out] Int32* location);

        SetInstallLocation(
            [in] Int32 location);

        SetScanSourceDir(
            [in] String value);

        SetScanPublicSourceDir(
            [in] String value);

        SetSeinfo(
            [in] String value);

        SetSecondaryNativeLibraryDir(
            [in] String value);

        SetNativeLibraryRootDir(
            [in] String value);

        SetNativeLibraryRootRequiresIsa(
            [in] Boolean value);

        GetScanSourceDir(
            [out] String* value);

        GetScanPublicSourceDir(
            [out] String* value);

        GetSeinfo(
            [out] String* value);

        GetSecondaryNativeLibraryDir(
            [out] String* value);

        GetNativeLibraryRootDir(
            [out] String* value);

        GetNativeLibraryRootRequiresIsa(
            [out] Boolean* value);
    }


    } // namespace Pm
    } // namespace Content
    } // namespace Droid
    } // namespace Elastos
}
