
module
{
    interface Elastos.Droid.App.IPendingIntent;
    interface Elastos.Droid.Media.Session.IMediaSessionLegacyHelper;
    interface Elastos.Droid.Media.Session.IMediaSession;

    namespace Elastos {
    namespace Droid {
    namespace Media {

    /**
     * Interface definition for a callback to be invoked when one of the metadata values has
     * been updated.
     * Implement this interface to receive metadata updates after registering your listener
     * through {@link RemoteControlClient#setMetadataUpdateListener(OnMetadataUpdateListener)}.
     */
    interface IRemoteControlClientOnMetadataUpdateListener {
        /**
         * Called on the implementer to notify that the metadata field for the given key has
         * been updated to the new value.
         * @param key the identifier of the updated metadata field.
         * @param newValue the Object storing the new value for the key.
         */
        OnMetadataUpdate(
            [in] Int32 key,
            [in] IInterface * newValue);
    }

    /**
     * Interface definition for a callback to be invoked when the media playback position is
     * requested to be updated.
     * @see RemoteControlClient#FLAG_KEY_MEDIA_POSITION_UPDATE
     */
    interface IRemoteControlClientOnPlaybackPositionUpdateListener {
        /**
         * Called on the implementer to notify it that the playback head should be set at the given
         * position. If the position can be changed from its current value, the implementor of
         * the interface must also update the playback position using
         * {@link #setPlaybackState(int, long, float)} to reflect the actual new
         * position being used, regardless of whether it differs from the requested position.
         * Failure to do so would cause the system to not know the new actual playback position,
         * and user interface components would fail to show the user where playback resumed after
         * the position was updated.
         * @param newPositionMs the new requested position in the current media, expressed in ms.
         */
        OnPlaybackPositionUpdate(
            [in] Int64 newPositionMs);
    }

    /**
     * Interface definition for a callback to be invoked when the media playback position is
     * queried.
     * @see RemoteControlClient#FLAG_KEY_MEDIA_POSITION_UPDATE
     */
    interface IRemoteControlClientOnGetPlaybackPositionListener {
        /**
         * Called on the implementer of the interface to query the current playback position.
         * @return a negative value if the current playback position (or the last valid playback
         *     position) is not known, or a zero or positive value expressed in ms indicating the
         *     current position, or the last valid known position.
         */
        OnGetPlaybackPosition(
            [out] Int64 * result);
    }

    /**
     * Class used to modify metadata in a {@link RemoteControlClient} object.
     * Use {@link RemoteControlClient#editMetadata(Boolean)} to create an instance of an editor,
     * on which you set the metadata for the RemoteControlClient instance. Once all the information
     * has been set, use {@link #apply()} to make it the new metadata that should be displayed
     * for the associated client. Once the metadata has been "applied", you cannot reuse this
     * instance of the MetadataEditor.
     *
     * @deprecated Use {@link MediaMetadata} and {@link MediaSession} instead.
     */
    /**
     * @Involve
     * interface Elastos.Droid.Media.IMediaMetadataEditor
     */
    interface IRemoteControlClientMetadataEditor {
        /**
         * The metadata key for the content artwork / album art.
         */
        const Int32 BITMAP_KEY_ARTWORK = 100;

        /**
         * @hide
         * TODO(jmtrivi) have lockscreen and music move to the new key name
         */
        const Int32 METADATA_KEY_ARTWORK = BITMAP_KEY_ARTWORK; // = 100;

        /**
         * @hide
         */
        Clone(
            [out] IInterface ** result);

        /**
         * Adds textual information to be displayed.
         * Note that none of the information added after {@link #apply()} has been called,
         * will be displayed.
         * @param key The identifier of a the metadata field to set. Valid values are
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_ALBUM},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_ALBUMARTIST},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_TITLE},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_ARTIST},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_AUTHOR},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_COMPILATION},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_COMPOSER},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_DATE},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_GENRE},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_TITLE},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_WRITER}.
         * @param value The text for the given key, or {@code null} to signify there is no valid
         *      information for the field.
         * @return Returns a reference to the same MetadataEditor object, so you can chain put
         *      calls together.
         */
        PutString(
            [in] Int32 key,
            [in] String value,
            [out] IRemoteControlClientMetadataEditor** result);

        /**
         * Adds numerical information to be displayed.
         * Note that none of the information added after {@link #apply()} has been called,
         * will be displayed.
         * @param key the identifier of a the metadata field to set. Valid values are
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_CD_TRACK_NUMBER},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_DISC_NUMBER},
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_DURATION} (with a value
         *      expressed in milliseconds),
         *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_YEAR}.
         * @param value The long value for the given key
         * @return Returns a reference to the same MetadataEditor object, so you can chain put
         *      calls together.
         * @throws IllegalArgumentException
         */
        PutInt64(
            [in] Int32 key,
            [in] Int64 value,
            [out] IRemoteControlClientMetadataEditor** result);

        /**
         * Associates all the metadata that has been set since the MetadataEditor instance was
         *     created with {@link RemoteControlClient#editMetadata(Boolean)}, or since
         *     {@link #clear()} was called, with the RemoteControlClient. Once "applied",
         *     this MetadataEditor cannot be reused to edit the RemoteControlClient's metadata.
         */
        Apply();
    }

    /**
     * RemoteControlClient enables exposing information meant to be consumed by remote controls
     * capable of displaying metadata, artwork and media transport control buttons.
     *
     * <p>A remote control client object is associated with a media button event receiver. This
     * event receiver must have been previously registered with
     * {@link AudioManager#registerMediaButtonEventReceiver(ComponentName)} before the
     * RemoteControlClient can be registered through
     * {@link AudioManager#registerRemoteControlClient(RemoteControlClient)}.
     *
     * <p>Here is an example of creating a RemoteControlClient instance after registering a media
     * button event receiver:
     * <pre>ComponentName myEventReceiver = new ComponentName(getPackageName(), MyRemoteControlEventReceiver.class.getName());
     * AudioManager myAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
     * myAudioManager.registerMediaButtonEventReceiver(myEventReceiver);
     * // build the PendingIntent for the remote control client
     * Intent mediaButtonIntent = new Intent(Intent.ACTION_MEDIA_BUTTON);
     * mediaButtonIntent.setComponent(myEventReceiver);
     * PendingIntent mediaPendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, mediaButtonIntent, 0);
     * // create and register the remote control client
     * RemoteControlClient myRemoteControlClient = new RemoteControlClient(mediaPendingIntent);
     * myAudioManager.registerRemoteControlClient(myRemoteControlClient);</pre>
     *
     * @deprecated Use {@link MediaSession} instead.
     */
    [deprecated, local]
    interface IRemoteControlClient {
        /**
         * Playback state of a RemoteControlClient which is stopped.
         *
         * @see #setPlaybackState(int)
         */
        const Int32 PLAYSTATE_STOPPED = 1;

        /**
         * Playback state of a RemoteControlClient which is paused.
         *
         * @see #setPlaybackState(int)
         */
        const Int32 PLAYSTATE_PAUSED = 2;

        /**
         * Playback state of a RemoteControlClient which is playing media.
         *
         * @see #setPlaybackState(int)
         */
        const Int32 PLAYSTATE_PLAYING = 3;

        /**
         * Playback state of a RemoteControlClient which is fast forwarding in the media
         *    it is currently playing.
         *
         * @see #setPlaybackState(int)
         */
        const Int32 PLAYSTATE_FAST_FORWARDING = 4;

        /**
         * Playback state of a RemoteControlClient which is fast rewinding in the media
         *    it is currently playing.
         *
         * @see #setPlaybackState(int)
         */
        const Int32 PLAYSTATE_REWINDING = 5;

        /**
         * Playback state of a RemoteControlClient which is skipping to the next
         *    logical chapter (such as a song in a playlist) in the media it is currently playing.
         *
         * @see #setPlaybackState(int)
         */
        const Int32 PLAYSTATE_SKIPPING_FORWARDS = 6;

        /**
         * Playback state of a RemoteControlClient which is skipping back to the previous
         *    logical chapter (such as a song in a playlist) in the media it is currently playing.
         *
         * @see #setPlaybackState(int)
         */
        const Int32 PLAYSTATE_SKIPPING_BACKWARDS = 7;

        /**
         * Playback state of a RemoteControlClient which is buffering data to play before it can
         *    start or resume playback.
         *
         * @see #setPlaybackState(int)
         */
        const Int32 PLAYSTATE_BUFFERING = 8;

        /**
         * Playback state of a RemoteControlClient which cannot perform any playback related
         *    operation because of an internal error. Examples of such situations are no network
         *    connectivity when attempting to stream data from a server, or expired user credentials
         *    when trying to play subscription-based content.
         *
         * @see #setPlaybackState(int)
         */
        const Int32 PLAYSTATE_ERROR = 9;

        /**
         * @hide
         * The value of a playback state when none has been declared.
         * Intentionally hidden as an application shouldn't set such a playback state value.
         */
        const Int32 PLAYSTATE_NONE = 0;

        /**
         * @hide
         * The default playback type, "local", indicating the presentation of the media is happening on
         * the same device (e.g. a phone, a tablet) as where it is controlled from.
         */
        const Int32 PLAYBACK_TYPE_LOCAL = 0;

        /**
         * @hide
         * A playback type indicating the presentation of the media is happening on
         * a different device (i.e. the remote device) than where it is controlled from.
         */
        const Int32 PLAYBACK_TYPE_REMOTE = 1;

        /**
         * @hide
         * Playback information indicating the playback volume is fixed, i.e. it cannot be controlled
         * from this object. An example of fixed playback volume is a remote player, playing over HDMI
         * where the user prefer to control the volume on the HDMI sink, rather than attenuate at the
         * source.
         * @see #PLAYBACKINFO_VOLUME_HANDLING.
         */
        const Int32 PLAYBACK_VOLUME_FIXED = 0;

        /**
         * @hide
         * Playback information indicating the playback volume is variable and can be controlled from
         * this object.
         * @see #PLAYBACKINFO_VOLUME_HANDLING.
         */
        const Int32 PLAYBACK_VOLUME_VARIABLE = 1;

        /**
         * @hide (to be un-hidden)
         * The playback information value indicating the value of a given information type is invalid.
         * @see #PLAYBACKINFO_VOLUME_HANDLING.
         */
        const Int32 PLAYBACKINFO_INVALID_VALUE = 0x80000000; // = Integer.MIN_VALUE;

        /**
         * @hide
         * An unknown or invalid playback position value.
         */
        const Int64 PLAYBACK_POSITION_INVALID = -1;
        /**
         * @hide
         * An invalid playback position value associated with the use of {@link #setPlaybackState(int)}
         * used to indicate that playback position will remain unknown.
         */
        const Int64 PLAYBACK_POSITION_ALWAYS_UNKNOWN = 0x8019771980198300;
        /**
         * @hide
         * The default playback speed, 1x.
         */
        const Float PLAYBACK_SPEED_1X = 1.0;

        //==========================================
        // Public keys for playback information
        /**
         * @hide
         * Playback information that defines the type of playback associated with this
         * RemoteControlClient. See {@link #PLAYBACK_TYPE_LOCAL} and {@link #PLAYBACK_TYPE_REMOTE}.
         */
        const Int32 PLAYBACKINFO_PLAYBACK_TYPE = 1;

        /**
         * @hide
         * Playback information that defines at what volume the playback associated with this
         * RemoteControlClient is performed. This information is only used when the playback type is not
         * local (see {@link #PLAYBACKINFO_PLAYBACK_TYPE}).
         */
        const Int32 PLAYBACKINFO_VOLUME = 2;

        /**
         * @hide
         * Playback information that defines the maximum volume volume value that is supported
         * by the playback associated with this RemoteControlClient. This information is only used
         * when the playback type is not local (see {@link #PLAYBACKINFO_PLAYBACK_TYPE}).
         */
        const Int32 PLAYBACKINFO_VOLUME_MAX = 3;

        /**
         * @hide
         * Playback information that defines how volume is handled for the presentation of the media.
         * @see #PLAYBACK_VOLUME_FIXED
         * @see #PLAYBACK_VOLUME_VARIABLE
         */
        const Int32 PLAYBACKINFO_VOLUME_HANDLING = 4;

        /**
         * @hide
         * Playback information that defines over what stream type the media is presented.
         */
        const Int32 PLAYBACKINFO_USES_STREAM = 5;

        //==========================================
        // Public flags for the supported transport control capabilities
        /**
         * Flag indicating a RemoteControlClient makes use of the "previous" media key.
         *
         * @see #setTransportControlFlags(int)
         * @see android.view.KeyEvent#KEYCODE_MEDIA_PREVIOUS
         */
        const Int32 FLAG_KEY_MEDIA_PREVIOUS = 1 << 0;

        /**
         * Flag indicating a RemoteControlClient makes use of the "rewind" media key.
         *
         * @see #setTransportControlFlags(int)
         * @see android.view.KeyEvent#KEYCODE_MEDIA_REWIND
         */
        const Int32 FLAG_KEY_MEDIA_REWIND = 1 << 1;

        /**
         * Flag indicating a RemoteControlClient makes use of the "play" media key.
         *
         * @see #setTransportControlFlags(int)
         * @see android.view.KeyEvent#KEYCODE_MEDIA_PLAY
         */
        const Int32 FLAG_KEY_MEDIA_PLAY = 1 << 2;

        /**
         * Flag indicating a RemoteControlClient makes use of the "play/pause" media key.
         *
         * @see #setTransportControlFlags(int)
         * @see android.view.KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE
         */
        const Int32 FLAG_KEY_MEDIA_PLAY_PAUSE = 1 << 3;

        /**
         * Flag indicating a RemoteControlClient makes use of the "pause" media key.
         *
         * @see #setTransportControlFlags(int)
         * @see android.view.KeyEvent#KEYCODE_MEDIA_PAUSE
         */
        const Int32 FLAG_KEY_MEDIA_PAUSE = 1 << 4;

        /**
         * Flag indicating a RemoteControlClient makes use of the "stop" media key.
         *
         * @see #setTransportControlFlags(int)
         * @see android.view.KeyEvent#KEYCODE_MEDIA_STOP
         */
        const Int32 FLAG_KEY_MEDIA_STOP = 1 << 5;

        /**
         * Flag indicating a RemoteControlClient makes use of the "fast forward" media key.
         *
         * @see #setTransportControlFlags(int)
         * @see android.view.KeyEvent#KEYCODE_MEDIA_FAST_FORWARD
         */
        const Int32 FLAG_KEY_MEDIA_FAST_FORWARD = 1 << 6;

        /**
         * Flag indicating a RemoteControlClient makes use of the "next" media key.
         *
         * @see #setTransportControlFlags(int)
         * @see android.view.KeyEvent#KEYCODE_MEDIA_NEXT
         */
        const Int32 FLAG_KEY_MEDIA_NEXT = 1 << 7;

        /**
         * Flag indicating a RemoteControlClient can receive changes in the media playback position
         * through the {@link OnPlaybackPositionUpdateListener} interface. This flag must be set
         * in order for components that display the RemoteControlClient information, to display and
         * let the user control media playback position.
         * @see #setTransportControlFlags(int)
         * @see #setOnGetPlaybackPositionListener(OnGetPlaybackPositionListener)
         * @see #setPlaybackPositionUpdateListener(OnPlaybackPositionUpdateListener)
         */
        const Int32 FLAG_KEY_MEDIA_POSITION_UPDATE = 1 << 8;
        /**
         * Flag indicating a RemoteControlClient supports ratings.
         * This flag must be set in order for components that display the RemoteControlClient
         * information, to display ratings information, and, if ratings are declared editable
         * (by calling {@link MediaMetadataEditor#addEditableKey(int)} with the
         * {@link MediaMetadataEditor#RATING_KEY_BY_USER} key), it will enable the user to rate
         * the media, with values being received through the interface set with
         * {@link #setMetadataUpdateListener(OnMetadataUpdateListener)}.
         * @see #setTransportControlFlags(int)
         */
        const Int32 FLAG_KEY_MEDIA_RATING = 1 << 9;

        /**
         * @hide
         * The flags for when no media keys are declared supported.
         * Intentionally hidden as an application shouldn't set the transport control flags
         *     to this value.
         */
        const Int32 FLAGS_KEY_MEDIA_NONE = 0;

        /**
         * @hide
         * Flag used to signal some type of metadata exposed by the RemoteControlClient is requested.
         */
        const Int32 FLAG_INFORMATION_REQUEST_METADATA = 1 << 0;

        /**
         * @hide
         * Flag used to signal that the transport control buttons supported by the
         *     RemoteControlClient are requested.
         * This can for instance happen when playback is at the end of a playlist, and the "next"
         * operation is not supported anymore.
         */
        const Int32 FLAG_INFORMATION_REQUEST_KEY_MEDIA = 1 << 1;

        /**
         * @hide
         * Flag used to signal that the playback state of the RemoteControlClient is requested.
         */
        const Int32 FLAG_INFORMATION_REQUEST_PLAYSTATE = 1 << 2;

        /**
         * @hide
         * Flag used to signal that the album art for the RemoteControlClient is requested.
         */
        const Int32 FLAG_INFORMATION_REQUEST_ALBUM_ART = 1 << 3;

        /**
         * @hide
         * Flag to reflect that the application controlling this RemoteControlClient sends playback
         * position updates. The playback position being "readable" is considered from the application's
         * point of view.
         */
        const Int32 MEDIA_POSITION_READABLE = 1 << 0;
        /**
         * @hide
         * Flag to reflect that the application controlling this RemoteControlClient can receive
         * playback position updates. The playback position being "writable"
         * is considered from the application's point of view.
         */
        const Int32 MEDIA_POSITION_WRITABLE = 1 << 1;

        /** @hide */
        const Int32 DEFAULT_PLAYBACK_VOLUME_HANDLING = 1; //PLAYBACK_VOLUME_VARIABLE;
        /** @hide */
        // hard-coded to the same number of steps as AudioService.MAX_STREAM_VOLUME[STREAM_MUSIC]
        const Int32 DEFAULT_PLAYBACK_VOLUME = 15;

        /**
         * @hide
         * Default value for the unique identifier
         */
        const Int32 RCSE_ID_UNREGISTERED = -1;

        /**
         * @hide
         */
        RegisterWithSession(
            [in] IMediaSessionLegacyHelper * helper);

        /**
         * @hide
         */
        UnregisterWithSession(
            [in] IMediaSessionLegacyHelper * helper);

        /**
         * Get a {@link MediaSession} associated with this RCC. It will only have a
         * session while it is registered with
         * {@link AudioManager#registerRemoteControlClient}. The session returned
         * should not be modified directly by the application but may be used with
         * other APIs that require a session.
         *
         * @return A media session object or null.
         */
        GetMediaSession(
            [out] IMediaSession ** result);

        /**
         * Creates a {@link MetadataEditor}.
         * @param startEmpty Set to false if you want the MetadataEditor to contain the metadata that
         *     was previously applied to the RemoteControlClient, or true if it is to be created empty.
         * @return a new MetadataEditor instance.
         */
        EditMetadata(
            [in] Boolean startEmpty,
            [out] IRemoteControlClientMetadataEditor ** result);

        /**
         * Sets the current playback state.
         * @param state The current playback state, one of the following values:
         *       {@link #PLAYSTATE_STOPPED},
         *       {@link #PLAYSTATE_PAUSED},
         *       {@link #PLAYSTATE_PLAYING},
         *       {@link #PLAYSTATE_FAST_FORWARDING},
         *       {@link #PLAYSTATE_REWINDING},
         *       {@link #PLAYSTATE_SKIPPING_FORWARDS},
         *       {@link #PLAYSTATE_SKIPPING_BACKWARDS},
         *       {@link #PLAYSTATE_BUFFERING},
         *       {@link #PLAYSTATE_ERROR}.
         */
        SetPlaybackState(
            [in] Int32 state);

        /**
         * Sets the current playback state and the matching media position for the current playback
         *   speed.
         * @param state The current playback state, one of the following values:
         *       {@link #PLAYSTATE_STOPPED},
         *       {@link #PLAYSTATE_PAUSED},
         *       {@link #PLAYSTATE_PLAYING},
         *       {@link #PLAYSTATE_FAST_FORWARDING},
         *       {@link #PLAYSTATE_REWINDING},
         *       {@link #PLAYSTATE_SKIPPING_FORWARDS},
         *       {@link #PLAYSTATE_SKIPPING_BACKWARDS},
         *       {@link #PLAYSTATE_BUFFERING},
         *       {@link #PLAYSTATE_ERROR}.
         * @param timeInMs a 0 or positive value for the current media position expressed in ms
         *    (same unit as for when sending the media duration, if applicable, with
         *    {@link android.media.MediaMetadataRetriever#METADATA_KEY_DURATION} in the
         *    {@link RemoteControlClient.MetadataEditor}). Negative values imply that position is not
         *    known (e.g. listening to a live stream of a radio) or not applicable (e.g. when state
         *    is {@link #PLAYSTATE_BUFFERING} and nothing had played yet).
         * @param playbackSpeed a value expressed as a ratio of 1x playback: 1.0f is normal playback,
         *    2.0f is 2x, 0.5f is half-speed, -2.0f is rewind at 2x speed. 0.0f means nothing is
         *    playing (e.g. when state is {@link #PLAYSTATE_ERROR}).
         */
        SetPlaybackState(
            [in] Int32 state,
            [in] Int64 timeInMs,
            [in] Float playbackSpeed);

        /**
         * Sets the flags for the media transport control buttons that this client supports.
         * @param transportControlFlags A combination of the following flags:
         *      {@link #FLAG_KEY_MEDIA_PREVIOUS},
         *      {@link #FLAG_KEY_MEDIA_REWIND},
         *      {@link #FLAG_KEY_MEDIA_PLAY},
         *      {@link #FLAG_KEY_MEDIA_PLAY_PAUSE},
         *      {@link #FLAG_KEY_MEDIA_PAUSE},
         *      {@link #FLAG_KEY_MEDIA_STOP},
         *      {@link #FLAG_KEY_MEDIA_FAST_FORWARD},
         *      {@link #FLAG_KEY_MEDIA_NEXT},
         *      {@link #FLAG_KEY_MEDIA_POSITION_UPDATE},
         *      {@link #FLAG_KEY_MEDIA_RATING}.
         */
        SetTransportControlFlags(
            [in] Int32 transportControlFlags);

        /**
         * Sets the listener to be called whenever the metadata is updated.
         * New metadata values will be received in the same thread as the one in which
         * RemoteControlClient was created.
         * @param l the metadata update listener
         */
        SetMetadataUpdateListener(
            [in] IRemoteControlClientOnMetadataUpdateListener * l);

        /**
         * Sets the listener to be called whenever the media playback position is requested
         * to be updated.
         * Notifications will be received in the same thread as the one in which RemoteControlClient
         * was created.
         * @param l the position update listener to be called
         */
        SetPlaybackPositionUpdateListener(
            [in] IRemoteControlClientOnPlaybackPositionUpdateListener * l);

        /**
         * Sets the listener to be called whenever the media current playback position is needed.
         * Queries will be received in the same thread as the one in which RemoteControlClient
         * was created.
         * @param l the listener to be called to retrieve the playback position
         */
        SetOnGetPlaybackPositionListener(
            [in] IRemoteControlClientOnGetPlaybackPositionListener * l);

        /**
         * @hide
         * Accessor to media button intent description (includes target component)
         */
        GetRcMediaIntent(
            [out] IPendingIntent ** result);

    }

    } // namespace Media
    } // namepsace Droid
    } // namespace Elastos
}
