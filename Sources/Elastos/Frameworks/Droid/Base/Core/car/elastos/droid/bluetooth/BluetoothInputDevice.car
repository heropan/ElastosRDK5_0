module
{

    namespace Elastos {
    namespace Droid {
    namespace Bluetooth {

        /**
         * This class provides the public APIs to control the Bluetooth Input
         * Device Profile.
         *
         *<p>BluetoothInputDevice is a proxy object for controlling the Bluetooth
         * Service via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get
         * the BluetoothInputDevice proxy object.
         *
         *<p>Each method is protected with its appropriate permission.
         *@hide
         */
        /**
         * @Involve
         * interface IBluetoothProfile
         */
        [local]
        interface IBluetoothInputDevice {
            /**
             * Intent used to broadcast the change in connection state of the Input
             * Device profile.
             *
             * <p>This intent will have 3 extras:
             * <ul>
             *   <li> {@link #EXTRA_STATE} - The current state of the profile. </li>
             *   <li> {@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.</li>
             *   <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. </li>
             * </ul>
             *
             * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of
             * {@link #STATE_DISCONNECTED}, {@link #STATE_CONNECTING},
             * {@link #STATE_CONNECTED}, {@link #STATE_DISCONNECTING}.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to
             * receive.
             */
            //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
            const String ACTION_CONNECTION_STATE_CHANGED =
                "android.bluetooth.input.profile.action.CONNECTION_STATE_CHANGED";

            /**
             * @hide
             */
            //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
            const String ACTION_PROTOCOL_MODE_CHANGED =
                "android.bluetooth.input.profile.action.PROTOCOL_MODE_CHANGED";

            /**
             * @hide
             */
            //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
            const String ACTION_HANDSHAKE =
                "android.bluetooth.input.profile.action.HANDSHAKE";

            /**
             * @hide
             */
            //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
            const String ACTION_REPORT =
                "android.bluetooth.input.profile.action.REPORT";

            /**
             * @hide
             */
            //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
            const String ACTION_VIRTUAL_UNPLUG_STATUS =
                "android.bluetooth.input.profile.action.VIRTUAL_UNPLUG_STATUS";


            /**
             * Return codes for the connect and disconnect Bluez / Dbus calls.
             * @hide
             */
            const Int32 INPUT_DISCONNECT_FAILED_NOT_CONNECTED = 5000;

            /**
             * @hide
             */
            const Int32 INPUT_CONNECT_FAILED_ALREADY_CONNECTED = 5001;

            /**
             * @hide
             */
            const Int32 INPUT_CONNECT_FAILED_ATTEMPT_FAILED = 5002;

            /**
             * @hide
             */
            const Int32 INPUT_OPERATION_GENERIC_FAILURE = 5003;

            /**
             * @hide
             */
            const Int32 INPUT_OPERATION_SUCCESS = 5004;

            /**
             * @hide
             */
            const Int32 PROTOCOL_REPORT_MODE = 0;

            /**
             * @hide
             */
            const Int32 PROTOCOL_BOOT_MODE = 1;

            /**
             * @hide
             */
            const Int32 PROTOCOL_UNSUPPORTED_MODE = 255;

            /*  int reportType, int reportType, int bufferSize */
            /**
             * @hide
             */
            const Byte REPORT_TYPE_INPUT = 1;

            /**
             * @hide
             */
            const Byte REPORT_TYPE_OUTPUT = 2;

            /**
             * @hide
             */
            const Byte REPORT_TYPE_FEATURE = 3;

            /**
             * @hide
             */
            const Int32 VIRTUAL_UNPLUG_STATUS_SUCCESS = 0;

            /**
             * @hide
             */
            const Int32 VIRTUAL_UNPLUG_STATUS_FAIL = 1;

            /**
             * @hide
             */
            const String EXTRA_PROTOCOL_MODE = "android.bluetooth.BluetoothInputDevice.extra.PROTOCOL_MODE";

            /**
             * @hide
             */
            const String EXTRA_REPORT_TYPE = "android.bluetooth.BluetoothInputDevice.extra.REPORT_TYPE";

            /**
             * @hide
             */
            const String EXTRA_REPORT_ID = "android.bluetooth.BluetoothInputDevice.extra.REPORT_ID";

            /**
             * @hide
             */
            const String EXTRA_REPORT_BUFFER_SIZE = "android.bluetooth.BluetoothInputDevice.extra.REPORT_BUFFER_SIZE";

            /**
             * @hide
             */
            const String EXTRA_REPORT = "android.bluetooth.BluetoothInputDevice.extra.REPORT";

            /**
             * @hide
             */
            const String EXTRA_STATUS = "android.bluetooth.BluetoothInputDevice.extra.STATUS";

            /**
             * @hide
             */
            const String EXTRA_VIRTUAL_UNPLUG_STATUS = "android.bluetooth.BluetoothInputDevice.extra.VIRTUAL_UNPLUG_STATUS";

            /**
             * Initiate connection to a profile of the remote bluetooth device.
             *
             * <p> The system supports connection to multiple input devices.
             *
             * <p> This API returns false in scenarios like the profile on the
             * device is already connected or Bluetooth is not turned on.
             * When this API returns true, it is guaranteed that
             * connection state intent for the profile will be broadcasted with
             * the state. Users can get the connection state of the profile
             * from this intent.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}
             * permission.
             *
             * @param device Remote Bluetooth Device
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            Connect(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Initiate disconnection from a profile
             *
             * <p> This API will return false in scenarios like the profile on the
             * Bluetooth device is not in connected state etc. When this API returns,
             * true, it is guaranteed that the connection state change
             * intent will be broadcasted with the state. Users can get the
             * disconnection state of the profile from this intent.
             *
             * <p> If the disconnection is initiated by a remote device, the state
             * will transition from {@link #STATE_CONNECTED} to
             * {@link #STATE_DISCONNECTED}. If the disconnect is initiated by the
             * host (local) device the state will transition from
             * {@link #STATE_CONNECTED} to state {@link #STATE_DISCONNECTING} to
             * state {@link #STATE_DISCONNECTED}. The transition to
             * {@link #STATE_DISCONNECTING} can be used to distinguish between the
             * two scenarios.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}
             * permission.
             *
             * @param device Remote Bluetooth Device
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            Disconnect(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);
            /**
             * Set priority of the profile
             *
             * <p> The device should already be paired.
             *  Priority can be one of {@link #PRIORITY_ON} or
             * {@link #PRIORITY_OFF},
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}
             * permission.
             *
             * @param device Paired bluetooth device
             * @param priority
             * @return true if priority is set, false on error
             * @hide
             */
            SetPriority(
                [in] IBluetoothDevice* device,
                [in] Int32 priority,
                [out] Boolean* result);

            /**
             * Get the priority of the profile.
             *
             * <p> The priority can be any of:
             * {@link #PRIORITY_AUTO_CONNECT}, {@link #PRIORITY_OFF},
             * {@link #PRIORITY_ON}, {@link #PRIORITY_UNDEFINED}
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.
             *
             * @param device Bluetooth device
             * @return priority of the device
             * @hide
             */
            GetPriority(
                [in] IBluetoothDevice* device,
                [out] Int32* result);

            /**
             * Initiate virtual unplug for a HID input device.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
             *
             * @param device Remote Bluetooth Device
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            VirtualUnplug(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Send Get_Protocol_Mode command to the connected HID input device.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
             *
             * @param device Remote Bluetooth Device
             * @return false on immediate error,
             *true otherwise
             * @hide
             */
            GetProtocolMode(
                [in] IBluetoothDevice* device,
                [out] Boolean* result);

            /**
             * Send Set_Protocol_Mode command to the connected HID input device.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
             *
             * @param device Remote Bluetooth Device
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            SetProtocolMode(
                [in] IBluetoothDevice* device,
                [in] Int32 protocolMode,
                [out] Boolean* result);


            /**
             * Send Get_Report command to the connected HID input device.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
             *
             * @param device Remote Bluetooth Device
             * @param reportType Report type
             * @param reportId Report ID
             * @param bufferSize Report receiving buffer size
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            GetReport(
                [in] IBluetoothDevice* device,
                [in] Byte reportType,
                [in] Byte reportId,
                [in] Int32 bufferSize,
                [out] Boolean* result);

            /**
             * Send Set_Report command to the connected HID input device.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
             *
             * @param device Remote Bluetooth Device
             * @param reportType Report type
             * @param report Report receiving buffer size
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            SetReport(
                [in] IBluetoothDevice* device,
                [in] Byte reportType,
                [in] String report,
                [out] Boolean* result);

            /**
             * Send Send_Data command to the connected HID input device.
             *
             * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.
             *
             * @param device Remote Bluetooth Device
             * @param report Report to send
             * @return false on immediate error,
             *               true otherwise
             * @hide
             */
            SendData(
                [in] IBluetoothDevice* device,
                [in] String report,
                [out] Boolean* result);
        }

    } // Bluetooth
    } // Droid
    } // Elastos
}
