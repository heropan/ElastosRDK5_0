module
{
    interface Elastos.Core.ICharSequence;
    interface Elastos.Utility.IList;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Os.IResultReceiver;
    interface Elastos.Droid.View.IKeyEvent;
    interface Elastos.Droid.App.IPendingIntent;
    interface Elastos.Droid.Media.IMediaMetadata;
    interface Elastos.Droid.Media.IRating;
    interface Elastos.Droid.Media.IAudioAttributes;
    interface Elastos.Droid.Media.Session.IPlaybackState;
    interface Elastos.Droid.Media.Session.IMediaSessionQueueItem;
    interface Elastos.Droid.Media.Session.IPlaybackStateCustomAction;
    interface Elastos.Droid.Media.Session.IMediaSessionToken;

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Session {

    /**
     * Holds information about the current playback and how audio is handled for
     * this session.
     */
    interface IMediaControllerPlaybackInfo {
        /**
         * The session uses remote playback.
         */
        const Int32 PLAYBACK_TYPE_REMOTE = 2;
        /**
         * The session uses local playback.
         */
        const Int32 PLAYBACK_TYPE_LOCAL = 1;

        /**
         * Get the type of playback which affects volume handling. One of:
         * <ul>
         * <li>{@link #PLAYBACK_TYPE_LOCAL}</li>
         * <li>{@link #PLAYBACK_TYPE_REMOTE}</li>
         * </ul>
         *
         * @return The type of playback this session is using.
         */
        GetPlaybackType(
            [out] Int32 * result);

        /**
         * Get the audio attributes for this session. The attributes will affect
         * volume handling for the session. When the volume type is
         * {@link PlaybackInfo#PLAYBACK_TYPE_REMOTE} these may be ignored by the
         * remote volume handler.
         *
         * @return The attributes for this session.
         */
        GetAudioAttributes(
            [out] IAudioAttributes ** result);

        /**
         * Get the type of volume control that can be used. One of:
         * <ul>
         * <li>{@link VolumeProvider#VOLUME_CONTROL_ABSOLUTE}</li>
         * <li>{@link VolumeProvider#VOLUME_CONTROL_RELATIVE}</li>
         * <li>{@link VolumeProvider#VOLUME_CONTROL_FIXED}</li>
         * </ul>
         *
         * @return The type of volume control that may be used with this
         *         session.
         */
        GetVolumeControl(
            [out] Int32 * result);

        /**
         * Get the maximum volume that may be set for this session.
         *
         * @return The maximum allowed volume where this session is playing.
         */
        GetMaxVolume(
            [out] Int32 * result);

        /**
         * Get the current volume for this session.
         *
         * @return The current volume where this session is playing.
         */
        GetCurrentVolume(
            [out] Int32 * result);

    }

    /**
     * Callback for receiving updates on from the session. A Callback can be
     * registered using {@link #registerCallback}
     */
    interface IMediaControllerCallback {
        /**
         * Override to handle the session being destroyed. The session is no
         * longer valid after this call and calls to it will be ignored.
         */
        OnSessionDestroyed();

        /**
         * Override to handle custom events sent by the session owner without a
         * specified interface. Controllers should only handle these for
         * sessions they own.
         *
         * @param event The event from the session.
         * @param extras Optional parameters for the event, may be null.
         */
        OnSessionEvent(
            [in] String event,
            [in] IBundle * extras);

        /**
         * Override to handle changes in playback state.
         *
         * @param state The new playback state of the session
         */
        OnPlaybackStateChanged(
            [in] IPlaybackState * state);

        /**
         * Override to handle changes to the current metadata.
         *
         * @param metadata The current metadata for the session or null if none.
         * @see MediaMetadata
         */
        OnMetadataChanged(
            [in] IMediaMetadata * metadata);

        /**
         * Override to handle changes to items in the queue.
         *
         * @param queue A list of items in the current play queue. It should
         *            include the currently playing item as well as previous and
         *            upcoming items if applicable.
         * @see MediaSession.QueueItem
         */
        OnQueueChanged(
            [in] IList * queue);

        /**
         * Override to handle changes to the queue title.
         *
         * @param title The title that should be displayed along with the play queue such as
         *              "Now Playing". May be null if there is no such title.
         */
        OnQueueTitleChanged(
            [in] ICharSequence * title);

        /**
         * Override to handle changes to the {@link MediaSession} extras.
         *
         * @param extras The extras that can include other information associated with the
         *               {@link MediaSession}.
         */
        OnExtrasChanged(
            [in] IBundle * extras);

        /**
         * Override to handle changes to the audio info.
         *
         * @param info The current audio info for this session.
         */
        OnAudioInfoChanged(
            [in] IMediaControllerPlaybackInfo * info);
    }

    /**
     * Interface for controlling media playback on a session. This allows an app
     * to send media transport commands to the session.
     */
    interface IMediaControllerTransportControls {
        /**
         * Request that the player start its playback at its current position.
         */
        Play();

        /**
         * Request that the player start playback for a specific {@link Uri}.
         *
         * @param mediaId The uri of the requested media.
         * @param extras Optional extras that can include extra information about the media item
         *               to be played.
         */
        PlayFromMediaId(
            [in] String mediaId,
            [in] IBundle * extras);

        /**
         * Request that the player start playback for a specific search query.
         * An empty or null query should be treated as a request to play any
         * music.
         *
         * @param query The search query.
         * @param extras Optional extras that can include extra information
         *            about the query.
         */
        PlayFromSearch(
            [in] String query,
            [in] IBundle * extras);

        /**
         * Play an item with a specific id in the play queue. If you specify an
         * id that is not in the play queue, the behavior is undefined.
         */
        SkipToQueueItem(
            [in] Int64 id);

        /**
         * Request that the player pause its playback and stay at its current
         * position.
         */
        Pause();

        /**
         * Request that the player stop its playback; it may clear its state in
         * whatever way is appropriate.
         */
        Stop();

        /**
         * Move to a new location in the media stream.
         *
         * @param pos Position to move to, in milliseconds.
         */
        SeekTo(
            [in] Int64 pos);

        /**
         * Start fast forwarding. If playback is already fast forwarding this
         * may increase the rate.
         */
        FastForward();

        /**
         * Skip to the next item.
         */
        SkipToNext();

        /**
         * Start rewinding. If playback is already rewinding this may increase
         * the rate.
         */
        Rewind();

        /**
         * Skip to the previous item.
         */
        SkipToPrevious();

        /**
         * Rate the current content. This will cause the rating to be set for
         * the current user. The Rating type must match the type returned by
         * {@link #getRatingType()}.
         *
         * @param rating The rating to set for the current content
         */
        SetRating(
            [in] IRating * rating);

        /**
         * Send a custom action back for the {@link MediaSession} to perform.
         *
         * @param customAction The action to perform.
         * @param args Optional arguments to supply to the {@link MediaSession} for this
         *             custom action.
         */
        SendCustomAction(
            [in] IPlaybackStateCustomAction * customAction,
            [in] IBundle * args);

        /**
         * Send the id and args from a custom action back for the {@link MediaSession} to perform.
         *
         * @see #sendCustomAction(PlaybackState.CustomAction action, Bundle args)
         * @param action The action identifier of the {@link PlaybackState.CustomAction} as
         *               specified by the {@link MediaSession}.
         * @param args Optional arguments to supply to the {@link MediaSession} for this
         *             custom action.
         */
        SendCustomAction(
            [in] String action,
            [in] IBundle * args);

    }

    /**
     * Allows an app to interact with an ongoing media session. Media buttons and
     * other commands can be sent to the session. A callback may be registered to
     * receive updates from the session, such as metadata and play state changes.
     * <p>
     * A MediaController can be created through {@link MediaSessionManager} if you
     * hold the "android.permission.MEDIA_CONTENT_CONTROL" permission or are an
     * enabled notification listener or by getting a {@link MediaSession.Token}
     * directly from the session owner.
     * <p>
     * MediaController objects are thread-safe.
     */
    interface IMediaController {
        /**
         * Get a {@link TransportControls} instance to send transport actions to
         * the associated session.
         *
         * @return A transport controls instance.
         */
        GetTransportControls(
            [out] IMediaControllerTransportControls ** result);

        /**
         * Send the specified media button event to the session. Only media keys can
         * be sent by this method, other keys will be ignored.
         *
         * @param keyEvent The media button event to dispatch.
         * @return true if the event was sent to the session, false otherwise.
         */
        DispatchMediaButtonEvent(
            [in] IKeyEvent * keyEvent,
            [out] Boolean * result);

        /**
         * Get the current playback state for this session.
         *
         * @return The current PlaybackState or null
         */
        GetPlaybackState(
            [out] IPlaybackState ** result);

        /**
         * Get the current metadata for this session.
         *
         * @return The current MediaMetadata or null.
         */
        GetMetadata(
            [out] IMediaMetadata ** result);

        /**
         * Get the current play queue for this session if one is set. If you only
         * care about the current item {@link #getMetadata()} should be used.
         *
         * @return The current play queue or null.
         */
        GetQueue(
            [out] IList ** result);

        /**
         * Get the queue title for this session.
         */
        GetQueueTitle(
            [out] ICharSequence ** result);

        /**
         * Get the extras for this session.
         */
        GetExtras(
            [out] IBundle ** result);

        /**
         * Get the rating type supported by the session. One of:
         * <ul>
         * <li>{@link Rating#RATING_NONE}</li>
         * <li>{@link Rating#RATING_HEART}</li>
         * <li>{@link Rating#RATING_THUMB_UP_DOWN}</li>
         * <li>{@link Rating#RATING_3_STARS}</li>
         * <li>{@link Rating#RATING_4_STARS}</li>
         * <li>{@link Rating#RATING_5_STARS}</li>
         * <li>{@link Rating#RATING_PERCENTAGE}</li>
         * </ul>
         *
         * @return The supported rating type
         */
        GetRatingType(
            [out] Int32 * result);

        /**
         * Get the flags for this session. Flags are defined in {@link MediaSession}.
         *
         * @return The current set of flags for the session.
         */
        GetFlags(
            [out] Int64 * result);

        /**
         * Get the current playback info for this session.
         *
         * @return The current playback info or null.
         */
        GetPlaybackInfo(
            [out] IMediaControllerPlaybackInfo ** result);

        /**
         * Get an intent for launching UI associated with this session if one
         * exists.
         *
         * @return A {@link PendingIntent} to launch UI or null.
         */
        GetSessionActivity(
            [out] IPendingIntent ** result);

        /**
         * Get the token for the session this is connected to.
         *
         * @return The token for the connected session.
         */
        GetSessionToken(
            [out] IMediaSessionToken ** result);

        /**
         * Set the volume of the output this session is playing on. The command will
         * be ignored if it does not support
         * {@link VolumeProvider#VOLUME_CONTROL_ABSOLUTE}. The flags in
         * {@link AudioManager} may be used to affect the handling.
         *
         * @see #getPlaybackInfo()
         * @param value The value to set it to, between 0 and the reported max.
         * @param flags Flags from {@link AudioManager} to include with the volume
         *            request.
         */
        SetVolumeTo(
            [in] Int32 value,
            [in] Int32 flags);

        /**
         * Adjust the volume of the output this session is playing on. The direction
         * must be one of {@link AudioManager#ADJUST_LOWER},
         * {@link AudioManager#ADJUST_RAISE}, or {@link AudioManager#ADJUST_SAME}.
         * The command will be ignored if the session does not support
         * {@link VolumeProvider#VOLUME_CONTROL_RELATIVE} or
         * {@link VolumeProvider#VOLUME_CONTROL_ABSOLUTE}. The flags in
         * {@link AudioManager} may be used to affect the handling.
         *
         * @see #getPlaybackInfo()
         * @param direction The direction to adjust the volume in.
         * @param flags Any flags to pass with the command.
         */
        AdjustVolume(
            [in] Int32 direction,
            [in] Int32 flags);

        /**
         * Registers a callback to receive updates from the Session. Updates will be
         * posted on the caller's thread.
         *
         * @param callback The callback object, must not be null.
         */
        RegisterCallback(
            [in] IMediaControllerCallback * cb);

        /**
         * Registers a callback to receive updates from the session. Updates will be
         * posted on the specified handler's thread.
         *
         * @param callback The callback object, must not be null.
         * @param handler The handler to post updates on. If null the callers thread
         *            will be used.
         */
        RegisterCallback(
            [in] IMediaControllerCallback * cb,
            [in] IHandler * handler);

        /**
         * Unregisters the specified callback. If an update has already been posted
         * you may still receive it after calling this method.
         *
         * @param callback The callback to remove.
         */
        UnregisterCallback(
            [in] IMediaControllerCallback * cb);

        /**
         * Sends a generic command to the session. It is up to the session creator
         * to decide what commands and parameters they will support. As such,
         * commands should only be sent to sessions that the controller owns.
         *
         * @param command The command to send
         * @param args Any parameters to include with the command
         * @param cb The callback to receive the result on
         */
        SendCommand(
            [in] String command,
            [in] IBundle * args,
            [in] IResultReceiver * cb);

        /**
         * Get the session owner's package name.
         *
         * @return The package name of of the session owner.
         */
        GetPackageName(
            [out] String * result);

        /**
         * Get the session's tag for debugging purposes.
         *
         * @return The session's tag.
         * @hide
         */
        GetTag(
            [out] String * result);

        /**
         * @hide
         */
        ControlsSameSession(
            [in] IMediaController * other,
            [out] Boolean * result);

    }

    } // namespace Session
    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
