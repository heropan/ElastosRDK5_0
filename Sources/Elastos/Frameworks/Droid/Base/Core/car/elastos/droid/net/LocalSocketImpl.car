
module
{
    using interface Elastos.IO.IFileDescriptor;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    /**
     * Socket implementation used for android.net.LocalSocket and
     * android.net.LocalServerSocket. Supports only AF_LOCAL sockets.
     */
    /**
     * @Involved
     * none super interface
     */
    [deprecated]
    interface ILocalSocketImpl {

        /**
         * Creates a socket in the underlying OS.
         *
         * @param sockType either {@link LocalSocket#SOCKET_DGRAM}, {@link LocalSocket#SOCKET_STREAM}
         * or {@link LocalSocket#SOCKET_SEQPACKET}
         * @throws IOException
         */
        Create(
            [in] Int32 sockType);

        /**
         * Closes the socket.
         *
         * @throws IOException
         */
        Close();

        /**
         * Binds this socket to an endpoint name. May only be called on an instance
         * that has not yet been bound.
         *
         * @param endpoint endpoint address
         * @throws IOException
         */
        Bind(
            [in] ILocalSocketAddress* endpoint);

        GetOption(
            [in] Int32 optID,
            [out] IInterface** result);

        SetOption(
            [in] Int32 optID,
            [in] IInterface* value);

        /**
         * Enqueues a set of file descriptors to send to the peer. The queue
         * is one deep. The file descriptors will be sent with the next write
         * of normal data, and will be delivered in a single ancillary message.
         * See "man 7 unix" SCM_RIGHTS on a desktop Linux machine.
         *
         * @param fds non-null; file descriptors to send.
         * @throws IOException
         */
        SetFileDescriptorsForSend(
            [in] ArrayOf<IFileDescriptor*>* fds);

        /**
         * Retrieves a set of file descriptors that a peer has sent through
         * an ancillary message. This method retrieves the most recent set sent,
         * and then returns null until a new set arrives.
         * File descriptors may only be passed along with regular data, so this
         * method can only return a non-null after a read operation.
         *
         * @return null or file descriptor array
         * @throws IOException
         */
        GetAncillaryFileDescriptors(
            [out, callee] ArrayOf<IFileDescriptor*>* result);

        /**
         * Retrieves the credentials of this socket's peer. Only valid on
         * connected sockets.
         *
         * @return non-null; peer credentials
         * @throws IOException
         */
        GetPeerCredentials(
            [out] ICredentials** result);

        /**
         * Retrieves the socket name from the OS.
         *
         * @return non-null; socket name
         * @throws IOException on failure
         */
        GetSockAddress(
            [out] ILocalSocketAddress** result);
    }

    /**
     * An input stream for local sockets. Needed because we may
     * need to read ancillary data.
     */
    /**
     * @Involved
     * interface IInputStream;
     */
    interface ISocketInputStream {
    }

    /**
     * An output stream for local sockets. Needed because we may
     * need to read ancillary data.
     */
    /**
     * @Involved
     * interface  IOutputStream;
     */
    interface ISocketOutputStream {
    }

    } // namespace Net
    } // namespace Droid
    } // namespace Elastos
}
