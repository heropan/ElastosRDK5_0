
module
{

    interface Elastos.Droid.Hardware.Camera2.ICaptureRequestKey;
    interface Elastos.Droid.Hardware.Camera2.ICaptureResultKey;
    interface Elastos.Droid.Hardware.Camera2.ICameraCharacteristicsKey;
    interface Elastos.Droid.Hardware.Camera2.Utils.ITypeReference;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Camera2 {
    namespace Impl {

    interface ICameraMetadataNativeKey {
        /**
         * Return a camelCase, period separated name formatted like:
         * {@code "root.section[.subsections].name"}.
         *
         * <p>Built-in keys exposed by the Android SDK are always prefixed with {@code "android."};
         * keys that are device/platform-specific are prefixed with {@code "com."}.</p>
         *
         * <p>For example, {@code CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP} would
         * have a name of {@code "android.scaler.streamConfigurationMap"}; whereas a device
         * specific key might look like {@code "com.google.nexus.data.private"}.</p>
         *
         * @return String representation of the key name
         */
        GetName(
            [out] String* name);

        /**
         * <p>
         * Get the tag corresponding to this key. This enables insertion into the
         * native metadata.
         * </p>
         *
         * <p>This value is looked up the first time, and cached subsequently.</p>
         *
         * @return The tag numeric value corresponding to the string
         */
        GetTag(
            [out] Int32* tag);

        /**
         * Get the raw class backing the type {@code T} for this key.
         *
         * <p>The distinction is only important if {@code T} is a generic, e.g.
         * {@code Range<Integer>} since the nested type will be erased.</p>
         */
        GetType(
            [out] ClassID* type);

        /**
         * Get the type reference backing the type {@code T} for this key.
         *
         * <p>The distinction is only important if {@code T} is a generic, e.g.
         * {@code Range<Integer>} since the nested type will be retained.</p>
         */
        GetTypeReference(
            [out] ITypeReference** ref);
    }

    /**
     * Proxy out invocations to the camera2 API callbacks into a {@link Dispatchable}.
     *
     * <p>Since abstract classes do not support Java's dynamic {@code Proxy}, we have to
     * to use our own proxy mechanism.</p>
     *
     * @invoke
     * interface IParcelable
     */
    [deprecated]
    interface ICameraMetadataNative {
        // this should be in sync with HAL_PIXEL_FORMAT_BLOB defined in graphics.h
        const Int32 NATIVE_JPEG_FORMAT = 0x21;

        // Keep up-to-date with camera_metadata.h
        /**
         * @hide
         */
        const Int32 TYPE_BYTE = 0;
        /**
         * @hide
         */
        const Int32 TYPE_INT32 = 1;
        /**
         * @hide
         */
        const Int32 TYPE_FLOAT = 2;
        /**
         * @hide
         */
        const Int32 TYPE_INT64 = 3;
        /**
         * @hide
         */
        const Int32 TYPE_DOUBLE = 4;
        /**
         * @hide
         */
        const Int32 TYPE_RATIONAL = 5;
        /**
         * @hide
         */
        const Int32 NUM_TYPES = 6;

        /**
         * @hide
         */
        Get(
            [in] ICameraCharacteristicsKey* key,
            [out] IInterface** result);

        /**
         * @hide
         */
        Get(
            [in] ICaptureResultKey* key,
            [out] IInterface** result);

        /**
         * @hide
         */
        Get(
            [in] ICaptureRequestKey* key,
            [out] IInterface** result);

        /**
         * Look-up a metadata field value by its key.
         *
         * @param key a non-{@code null} key instance
         * @return the field corresponding to the {@code key}, or {@code null} if no value was set
         */
        Get(
            [in] ICameraMetadataNativeKey* key,
            [out] IInterface** result);

        /**
         * Set a camera metadata field to a value. The field definitions can be
         * found in {@link CameraCharacteristics}, {@link CaptureResult}, and
         * {@link CaptureRequest}.
         *
         * @param key The metadata field to write.
         * @param value The value to set the field to, which must be of a matching
         * type to the key.
         */
        Set(
            [in] ICameraMetadataNativeKey* key,
            [in] IInterface* value);

        Set(
            [in] ICaptureRequestKey* key,
            [in] IInterface* value);

        Set(
            [in] ICaptureResultKey* key,
            [in] IInterface* value);

        Set(
            [in] ICameraCharacteristicsKey* key,
            [in] IInterface* value);

        /**
         * <p>Perform a 0-copy swap of the internal metadata with another object.</p>
         *
         * <p>Useful to convert a CameraMetadata into e.g. a CaptureRequest.</p>
         *
         * @param other Metadata to swap with
         * @throws NullPointerException if other was null
         * @hide
         */
        Swap(
            [in] ICameraMetadataNative* other);

        /**
         * @hide
         */
        GetEntryCount(
            [out] Int32* count);

        /**
         * Does this metadata contain at least 1 entry?
         *
         * @hide
         */
        IsEmpty(
            [out] Boolean* result);

        /**
         * <p>Updates the existing entry for tag with the new bytes pointed by src, erasing
         * the entry if src was null.</p>
         *
         * <p>An empty array can be passed in to update the entry to 0 elements.</p>
         *
         * @param tag An integer tag, see e.g. {@link #getTag}
         * @param src An array of bytes, or null to erase the entry
         *
         * @hide
         */
        WriteValues(
            [in] Int32 tag,
            [in] ArrayOf<Byte>* src);

        /**
         * <p>Returns a byte[] of data corresponding to this tag. Use a wrapped bytebuffer to unserialize
         * the data properly.</p>
         *
         * <p>An empty array can be returned to denote an existing entry with 0 elements.</p>
         *
         * @param tag An integer tag, see e.g. {@link #getTag}
         *
         * @return {@code null} if there were 0 entries for this tag, a byte[] otherwise.
         * @hide
         */
        ReadValues(
            [in] Int32 tag,
            [out, callee] ArrayOf<Byte>* values);

        /**
         * Dumps the native metadata contents to logcat.
         *
         * <p>Visibility for testing/debugging only. The results will not
         * include any synthesized keys, as they are invisible to the native layer.</p>
         *
         * @hide
         */
        DumpToLog();
    }

    interface ICameraMetadataNativeHelper {
        /**
         * Move the contents from {@code other} into a new camera metadata instance.</p>
         *
         * <p>After this call, {@code other} will become empty.</p>
         *
         * @param other the previous metadata instance which will get pilfered
         * @return a new metadata instance with the values from {@code other} moved into it
         */
        Move(
            [in] ICameraMetadataNative* other,
            [out] ICameraMetadataNative** result);

        /**
         * Set the global client-side vendor tag descriptor to allow use of vendor
         * tags in camera applications.
         *
         * @return int A native status_t value corresponding to one of the
         * {@link CameraBinderDecorator} integer constants.
         * @see CameraBinderDecorator#throwOnError
         *
         * @hide
         */
        NativeSetupGlobalVendorTagDescriptor(
            [out] Int32* descriptor);

        /**
         * Convert a key string into the equivalent native tag.
         *
         * @throws IllegalArgumentException if the key was not recognized
         * @throws NullPointerException if the key was null
         *
         * @hide
         */
        GetTag(
            [in] String key,
            [out] Int32* tag);

        /**
         * Get the underlying native type for a tag.
         *
         * @param tag An integer tag, see e.g. {@link #getTag}
         * @return An int enum for the metadata type, see e.g. {@link #TYPE_BYTE}
         *
         * @hide
         */
        GetNativeType(
            [in] Int32 tag,
            [out] Int32* type);
    }

    } // namespace Impl
    } // namespace Camera2
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
