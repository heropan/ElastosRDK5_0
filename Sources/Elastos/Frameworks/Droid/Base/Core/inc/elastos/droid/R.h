/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

#ifndef __Elastos_Droid_R_H__
#define __Elastos_Droid_R_H__
namespace Elastos {
namespace Droid {
class R {
    public: class anim {
        public: static const int accelerate_decelerate_interpolator = 0x010a0004;
        /**  Acceleration curve matching Flash's quadratic ease out function. 
         */
        public: static const int accelerate_interpolator = 0x010a0005;
        public: static const int activity_close_enter = 0x010a000d;
        public: static const int activity_close_exit = 0x010a000e;
        public: static const int activity_open_enter = 0x010a000f;
        public: static const int activity_open_exit = 0x010a0010;
        public: static const int anticipate_interpolator = 0x010a0007;
        public: static const int anticipate_overshoot_interpolator = 0x010a0009;
        public: static const int app_starting_exit = 0x010a0011;
        public: static const int bounce_interpolator = 0x010a000a;
        public: static const int button_state_list_anim_material = 0x010a0012;
        public: static const int cycle_interpolator = 0x010a000c;
        /**  Acceleration curve matching Flash's quadratic ease in function. 
         */
        public: static const int decelerate_interpolator = 0x010a0006;
        public: static const int dialog_enter = 0x010a0013;
        public: static const int dialog_exit = 0x010a0014;
        public: static const int disabled_anim_material = 0x010a0015;
        public: static const int dock_bottom_enter = 0x010a0016;
        public: static const int dock_bottom_exit = 0x010a0017;
        public: static const int dock_left_enter = 0x010a0018;
        public: static const int dock_left_exit = 0x010a0019;
        public: static const int dock_right_enter = 0x010a001a;
        public: static const int dock_right_exit = 0x010a001b;
        public: static const int dock_top_enter = 0x010a001c;
        public: static const int dock_top_exit = 0x010a001d;
        public: static const int fade_in = 0x010a0000;
        public: static const int fade_out = 0x010a0001;
        public: static const int fast_fade_in = 0x010a001e;
        public: static const int fast_fade_out = 0x010a001f;
        public: static const int grow_fade_in = 0x010a0020;
        public: static const int grow_fade_in_center = 0x010a0021;
        public: static const int grow_fade_in_from_bottom = 0x010a0022;
        public: static const int input_method_enter = 0x010a0023;
        public: static const int input_method_exit = 0x010a0024;
        public: static const int input_method_extract_enter = 0x010a0025;
        public: static const int input_method_extract_exit = 0x010a0026;
        public: static const int input_method_fancy_enter = 0x010a0027;
        public: static const int input_method_fancy_exit = 0x010a0028;
        public: static const int launch_task_behind_source = 0x010a0029;
        public: static const int launch_task_behind_target = 0x010a002a;
        public: static const int linear_interpolator = 0x010a000b;
        public: static const int lock_screen_behind_enter = 0x010a002b;
        public: static const int lock_screen_behind_enter_fade_in = 0x010a002c;
        public: static const int lock_screen_behind_enter_wallpaper = 0x010a002d;
        public: static const int lock_screen_enter = 0x010a002e;
        public: static const int lock_screen_exit = 0x010a002f;
        public: static const int lock_screen_wallpaper_exit = 0x010a0030;
        public: static const int options_panel_enter = 0x010a0031;
        public: static const int options_panel_exit = 0x010a0032;
        public: static const int overshoot_interpolator = 0x010a0008;
        public: static const int popup_enter_material = 0x010a0033;
        public: static const int popup_exit_material = 0x010a0034;
        public: static const int progress_indeterminate_horizontal_rect1 = 0x010a0035;
        public: static const int progress_indeterminate_horizontal_rect2 = 0x010a0036;
        public: static const int progress_indeterminate_material = 0x010a0037;
        public: static const int progress_indeterminate_rotation_material = 0x010a0038;
        public: static const int push_down_in = 0x010a0039;
        public: static const int push_down_in_no_alpha = 0x010a003a;
        public: static const int push_down_out = 0x010a003b;
        public: static const int push_down_out_no_alpha = 0x010a003c;
        public: static const int push_up_in = 0x010a003d;
        public: static const int push_up_out = 0x010a003e;
        public: static const int recent_enter = 0x010a003f;
        public: static const int recent_exit = 0x010a0040;
        public: static const int recents_fade_in = 0x010a0041;
        public: static const int recents_fade_out = 0x010a0042;
        public: static const int rotation_animation_enter = 0x010a0043;
        public: static const int rotation_animation_jump_exit = 0x010a0044;
        public: static const int rotation_animation_xfade_exit = 0x010a0045;
        public: static const int screen_rotate_0_enter = 0x010a0046;
        public: static const int screen_rotate_0_exit = 0x010a0047;
        public: static const int screen_rotate_0_frame = 0x010a0048;
        public: static const int screen_rotate_180_enter = 0x010a0049;
        public: static const int screen_rotate_180_exit = 0x010a004a;
        public: static const int screen_rotate_180_frame = 0x010a004b;
        public: static const int screen_rotate_finish_enter = 0x010a004c;
        public: static const int screen_rotate_finish_exit = 0x010a004d;
        public: static const int screen_rotate_finish_frame = 0x010a004e;
        public: static const int screen_rotate_minus_90_enter = 0x010a004f;
        public: static const int screen_rotate_minus_90_exit = 0x010a0050;
        public: static const int screen_rotate_minus_90_frame = 0x010a0051;
        public: static const int screen_rotate_plus_90_enter = 0x010a0052;
        public: static const int screen_rotate_plus_90_exit = 0x010a0053;
        public: static const int screen_rotate_plus_90_frame = 0x010a0054;
        public: static const int screen_rotate_start_enter = 0x010a0055;
        public: static const int screen_rotate_start_exit = 0x010a0056;
        public: static const int screen_rotate_start_frame = 0x010a0057;
        public: static const int screen_user_enter = 0x010a0058;
        public: static const int screen_user_exit = 0x010a0059;
        public: static const int search_bar_enter = 0x010a005a;
        public: static const int search_bar_exit = 0x010a005b;
        public: static const int shrink_fade_out = 0x010a005c;
        public: static const int shrink_fade_out_center = 0x010a005d;
        public: static const int shrink_fade_out_from_bottom = 0x010a005e;
        public: static const int slide_in_child_bottom = 0x010a005f;
        public: static const int slide_in_left = 0x010a0002;
        public: static const int slide_in_micro = 0x010a0060;
        public: static const int slide_in_right = 0x010a0061;
        public: static const int slide_in_up = 0x010a0062;
        public: static const int slide_out_down = 0x010a0063;
        public: static const int slide_out_left = 0x010a0064;
        public: static const int slide_out_micro = 0x010a0065;
        public: static const int slide_out_right = 0x010a0003;
        public: static const int slow_fade_in = 0x010a0066;
        public: static const int submenu_enter = 0x010a0067;
        public: static const int submenu_exit = 0x010a0068;
        public: static const int swipe_window_enter = 0x010a0069;
        public: static const int swipe_window_exit = 0x010a006a;
        public: static const int task_close_enter = 0x010a006b;
        public: static const int task_close_exit = 0x010a006c;
        public: static const int task_open_enter = 0x010a006d;
        public: static const int task_open_exit = 0x010a006e;
        public: static const int toast_enter = 0x010a006f;
        public: static const int toast_exit = 0x010a0070;
        public: static const int translucent_enter = 0x010a0071;
        public: static const int translucent_exit = 0x010a0072;
        public: static const int voice_activity_close_enter = 0x010a0073;
        public: static const int voice_activity_close_exit = 0x010a0074;
        public: static const int voice_activity_open_enter = 0x010a0075;
        public: static const int voice_activity_open_exit = 0x010a0076;
        public: static const int voice_layer_enter = 0x010a0077;
        public: static const int voice_layer_exit = 0x010a0078;
        public: static const int wallpaper_close_enter = 0x010a0079;
        public: static const int wallpaper_close_exit = 0x010a007a;
        public: static const int wallpaper_enter = 0x010a007b;
        public: static const int wallpaper_exit = 0x010a007c;
        public: static const int wallpaper_intra_close_enter = 0x010a007d;
        public: static const int wallpaper_intra_close_exit = 0x010a007e;
        public: static const int wallpaper_intra_open_enter = 0x010a007f;
        public: static const int wallpaper_intra_open_exit = 0x010a0080;
        public: static const int wallpaper_open_enter = 0x010a0081;
        public: static const int wallpaper_open_exit = 0x010a0082;
        public: static const int window_move_from_decor = 0x010a0083;
    };
    public: class animator {
        /**  A simple fade-in animation. 
         */
        public: static const int fade_in = 0x010b0000;
        /**  A simple fade-out animation. 
         */
        public: static const int fade_out = 0x010b0001;
        public: static const int fragment_close_enter = 0x010b0002;
        public: static const int fragment_close_exit = 0x010b0003;
        public: static const int fragment_fade_enter = 0x010b0004;
        public: static const int fragment_fade_exit = 0x010b0005;
        public: static const int fragment_open_enter = 0x010b0006;
        public: static const int fragment_open_exit = 0x010b0007;
        public: static const int leanback_setup_fragment_close_enter = 0x010b0008;
        public: static const int leanback_setup_fragment_close_exit = 0x010b0009;
        public: static const int leanback_setup_fragment_open_enter = 0x010b000a;
        public: static const int leanback_setup_fragment_open_exit = 0x010b000b;
    };
    public: class array {
        /**  This string array should be overridden by the manufacture to present a list of carrier-id,locale. The wifi regulatory domain is extracted from the locale information. This is used at startup to set system defaults by checking the system property ro.carrier for the carrier-id and searching through this array 
 An Array of [[Carrier-ID]                     
              [default-locale]]                
         */
        public: static const int carrier_properties = 0x01070042;
        /**  Various locale-specific string resources for Contacts 
 various string resources for Contacts 
         */
        public: static const int common_nicknames = 0x01070040;
        /**  Array of output values for button backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays 
 Array of output values for button backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays 
         */
        public: static const int config_autoBrightnessButtonBacklightValues = 0x01070024;
        /**  Array of output values for keyboard backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays 
         */
        public: static const int config_autoBrightnessKeyboardBacklightValues = 0x01070025;
        /**  Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays 
 Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays 
 10000+ 
         */
        public: static const int config_autoBrightnessLcdBacklightValues = 0x01070023;
        /**  Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N + 1 control points as follows:
         (1-based arrays)

         Point 1:            (0, value[1]):             lux <= 0
         Point 2:     (level[1], value[2]):  0        < lux <= level[1]
         Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
         ...
         Point N+1: (level[N], value[N+1]):  level[N] < lux

         The control points must be strictly increasing.  Each control point
         corresponds to an entry in the brightness backlight values arrays.
         For example, if LUX == level[1] (first element of the levels array)
         then the brightness will be determined by value[2] (second element
         of the brightness values array).

         Spline interpolation is used to determine the auto-brightness
         backlight values for LUX levels between these control points.

         Must be overridden in platform specific overlays 
 Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N  1 zones as follows:

         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1     array[N] <= LUX < infinity

         Must be overridden in platform specific overlays 
         */
        public: static const int config_autoBrightnessLevels = 0x01070022;
        /**  Vibrator pattern for feedback when selecting a day/month/year date of a Calendar 
         */
        public: static const int config_calendarDateVibePattern = 0x0107001e;
        /**  call barring MMI code from TS 22.030 Annex B 
 call barring MMI code from TS 22.030 Annex B
         Indonesia AXIS does not support Call Barring service
         and "333" is used for other purpose 
 call barring MMI code from TS 22.030 Annex B
         Indonesia Hutchison does not support Call Barring service
         and "333" is used for other purpose 
         */
        public: static const int config_callBarringMMI = 0x01070034;
        /**  If the DUN connection for this CDMA device supports more than just DUN 
 traffic you should list them here. 
 If this device is not CDMA this is ignored.  If this list is empty on 
 a DUN-requiring CDMA device, the DUN APN will just support just DUN. 
         */
        public: static const int config_cdma_dun_supported_types = 0x01070017;
        /**  CDMA home system id for Verizon 
 CDMA home system id for Verizon 
         */
        public: static const int config_cdma_home_system = 0x01070037;
        /**  Vibrator pattern for feedback when selecting an hour/minute tick of a Clock 
         */
        public: static const int config_clockTickVibePattern = 0x0107001d;
        /**  Set of NetworkInfo.getType() that reflect data usage. 
 TYPE_MOBILE_IA 
         */
        public: static const int config_data_usage_network_types = 0x0107000f;
        /**  Vibrator pattern to be used as the default for notifications
         that specify DEFAULT_VIBRATE.
     
         */
        public: static const int config_defaultNotificationVibePattern = 0x0107002e;
        /**  If there is no preload VM number in the sim card, carriers such as
         Verizon require to load a default vm number from the configurantion.
         Define config_default_vm_number for this purpose. And there are two
         optional formats for this configuration as below:
         (1)<item>voicemail number</item>
         (2)<item>voicemail number;gid</item>
         The logic to pick up the correct voicemail number:
         (1) If the config_default_vm_number array has no gid special item, the last one will be
         picked
         (2) If the config_default_vm_number array has gid special item and  it matches the current
         sim's gid, it will be picked.
         (3) If the config_default_vm_number array has gid special item but it doesn't match the
         current sim's gid, the last one without gid will be picked 
         */
        public: static const int config_default_vm_number = 0x0107003a;
        /**  The list of IMEs which should be disabled until used.
         This function suppresses update notifications for these pre-installed apps.
         We need to set this configuration carefully that they should not have functionarities
         other than "IME" or "Spell Checker". In InputMethodManagerService,
         the listed IMEs are disabled until used when all of the following conditions are met.
         1. Not selected as an enabled IME in the Settings
         2. Not selected as a spell checker in the Settings
         3. Installed
         4. A pre-installed IME
         5. Not enabled
         And the disabled_until_used state for an IME is released by InputMethodManagerService
         when the IME is selected as an enabled IME. 
         */
        public: static const int config_disabledUntilUsedPreinstalledImes = 0x01070030;
        /**  Defines the default set of global actions. Actions may still be disabled or hidden based
         on the current state of the device.
         Each item must be one of the following strings:
         "power" = Power off
         "settings" = An action to launch settings
         "airplane" = Airplane mode toggle
         "bugreport" = Take bug report, if available
         "silent" = silent mode
         "users" = list of users
         
 Only show settings item due to smaller real estate. 
         */
        public: static const int config_globalActionsList = 0x01070035;
        /**  Values for GPS configuration 
         */
        public: static const int config_gpsParameters = 0x01070039;
        /**  This string array can be overriden to add an additional DRM support for WebView EME. 
 Array of "[keySystemName],[UuidOfMediaDrm]" @hide @SystemApi 
 Example:
        <item>"x-com.microsoft.playready,9A04F079-9840-4286-AB92-E65BE0885F95"</item>
        
         */
        public: static const int config_keySystemUuidMapping = 0x01070005;
        /**  Vibrator pattern for a very short but reliable vibration for soft keyboard tap 
 Vibrator pattern for a very short but reliable vibration for soft keyboard tap 
         */
        public: static const int config_keyboardTapVibePattern = 0x0107001c;
        /**  Package name(s) containing location provider support.
         These packages can contain services implementing location providers,
         such as the Geocode Provider, Network Location Provider, and
         Fused Location Provider. They will each be searched for
         service components implementing these providers.
         It is strongly recommended that the packages explicitly named
         below are on the system image, so that they will not map to
         a 3rd party application.
         The location framework also has support for installation
         of new location providers at run-time. The new package does not
         have to be explicitly listed here, however it must have a signature
         that matches the signature of at least one package on this list.
         
         */
        public: static const int config_locationProviderPackageNames = 0x01070026;
        /**  Vibrator pattern for feedback about a long screen/key press 
 Vibrator pattern for feedback about a long screen/key press 
         */
        public: static const int config_longPressVibePattern = 0x0107001a;
        /**  Array of integer pairs controlling the rate at which the master volume changes
         in response to volume up and down key events.
         The first integer of each pair is compared against the current master volume
         (in range 0 to 100).
         The last pair with first integer <= the current volume is chosen,
         and the second integer of the pair indicates the amount to increase the master volume
         when volume up is pressed. 
 default: always increase volume by 5% 
         */
        public: static const int config_masterVolumeRamp = 0x0107000b;
        /**  If the mobile hotspot feature requires provisioning, a package name and class name
        can be provided to launch a supported application that provisions the devices.

        Example Usage:

        String[] appDetails = getStringArray(R.array.config_mobile_hotspot_provision_app);
        Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.setClassName(appDetails[0], appDetails[1]);
        startActivityForResult(intent, 0);

        public void onActivityResult(int requestCode, int resultCode, Intent intent) {
            super.onActivityResult(requestCode, resultCode, intent);
            if (requestCode == 0) {
                if (resultCode == Activity.RESULT_OK) {
                    //Mobile hotspot provisioning successful
                } else {
                    //Mobile hotspot provisioning failed
                }
            }

        See src/com/android/settings/TetherSettings.java for more details.
        
 The first element is the package name and the second element is the class name
         of the provisioning app 

        <item>com.example.provisioning</item>
        <item>com.example.provisioning.Activity</item>
    
         */
        public: static const int config_mobile_hotspot_provision_app = 0x01070015;
        /**  Configure mobile tcp buffer sizes in the form:
         rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max
         If no value is found for the rat-name in use, the system default will be applied.
    
 Configure mobile tcp buffer sizes in the form:
         rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max
         If no value is found for the rat-name in use, the system default will be applied.
    
         */
        public: static const int config_mobile_tcp_buffers = 0x0107002c;
        /**  Vibrator pattern to be used as the default for notifications
         that do not specify vibration but vibrate anyway because the device
         is in vibrate mode.
     
         */
        public: static const int config_notificationFallbackVibePattern = 0x0107002f;
        /**  The list of classes that should be added to the notification ranking pipline.
     See {@link com.android.server.notification.NotificationSignalExtractor} 
         */
        public: static const int config_notificationSignalExtractors = 0x01070031;
        /**  Array of OEM specific USB mode override config.
         OEM can override a certain USB mode depending on ro.bootmode.
         Specify an array of below items to set override rule.
         [bootmode]:[original USB mode]:[USB mode used]
         */
        public: static const int config_oemUsbModeOverride = 0x0107002b;
        /**  The list of ril radio technologies (see ServiceState.java) which only support
         a single data connection at one time.  This may change by carrier via
         overlays (some don't support multiple pdp on UMTS).  All unlisted radio
         tech types support unlimited types (practically only 2-4 used). 
 EVDO_B 
         */
        public: static const int config_onlySingleDcAllowed = 0x0107002d;
        /**  Don't use roaming icon for considered operators.
         A match on config_sameNamedOperatorConsideredRoaming supersedes a match on this.
         Can use mcc or mcc+mnc as item. For example, 302 or 21407.
         If operators, 21404 and 21407, make roaming agreements, user of 21404 should not see
         the roaming icon as using 21407 network.
         To do this, add 21407 item to values-mcc214-mnc04/config.xml 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
 Don't use roaming icon for considered operators 
         */
        public: static const int config_operatorConsideredNonRoaming = 0x01070032;
        /**  Array of ConnectivityManager.TYPE_xxxx constants for networks that may only
         be controlled by systemOrSignature apps.  
         */
        public: static const int config_protectedNetworks = 0x0107000d;
        /**  Vibrator pattern for feedback about booting with safe mode disabled 
         */
        public: static const int config_safeModeDisabledVibePattern = 0x0107001f;
        /**  Vibrator pattern for feedback about booting with safe mode disabled 
         */
        public: static const int config_safeModeEnabledVibePattern = 0x01070020;
        /**  This is NOT just for same named operators unlike the name suggests (will blacklist regardless of name).
         A match on this supersedes a match on config_operatorConsideredNonRoaming.
         Uses "startsWith" so you can use a leading substring like the mcc or
         use the complete mcc+mnc string.
         For a given mcc/mcc-mnc, some operators may want to roam (even if
         config_operatorConsideredNonRoaming has the mcc/mcc-mnc).
         user of 40485 should see the roaming icon as using 40483 network
         though same Reliance network.
         To do this, add 40483 item to values-mcc404-mnc85/config.xml 
 Show roaming icon though same named operators. 
 Show roaming icon though same named operators. 
 Show roaming icon though same named operators. 
 Show roaming icon though same named operators. 
 Show roaming icon though same named operators. 
 Show roaming icon though same named operators. 
 Show roaming icon though same named operators. 
 Show roaming icon though same named operators. 
         */
        public: static const int config_sameNamedOperatorConsideredRoaming = 0x01070033;
        /**  Vibrator pattern for feedback about hitting a scroll barrier 
         */
        public: static const int config_scrollBarrierVibePattern = 0x01070021;
        /**  List of paths to serial ports that are available to the serial manager.
         for example, /dev/ttyUSB0
    
         */
        public: static const int config_serialPorts = 0x01070019;
        /**  This config is used to check if the carrier requires converting destination
         number before sending out a SMS.
         Formats for this configuration as below:
         [true or false][;optional gid]
         The logic to pick up the configuration:
         (1) If the "config_sms_convert_destination_number_support" array has no gid
             special item, the last one will be picked
         (2) If the "config_sms_convert_destination_number_support" array has gid special
             item and it matches the current sim's gid, it will be picked.
         (3) If the "config_sms_convert_destination_number_support" array has gid special
             item but it doesn't match the current sim's gid, the last one without gid
             will be picked 
         */
        public: static const int config_sms_convert_destination_number_support = 0x0107003d;
        /**  National language locking shift tables to enable for SMS encoding.
         Decoding is always enabled. 3GPP TS 23.038 states that this feature
         should not be enabled until a formal request is issued by the relevant
         national regulatory body. Array elements are codes from the table above.
         Example 1: devices sold in Turkey must include table 1 after the
           Turkish Telecommunication Authority requires locking shift encoding
           to be enabled (est. July 2012). (http://www.btk.gov.tr/eng/pdf/2009/BY-LAW_SMS.pdf)
           See also: http://www.mobitech.com.tr/tr/ersanozturkblog_en/index.php?entry=entry090223-160014
         Example 2: devices sold in India should include tables 4 through 13
         to enable use of the new Release 9 tables for Indic languages. 
         */
        public: static const int config_sms_enabled_locking_shift_tables = 0x0107002a;
        /**  National Language Identifier codes for the following two config items.
         (from 3GPP TS 23.038 V9.1.1 Table 6.2.1.2.4.1):
          0  - reserved
          1  - Turkish
          2  - Spanish (single shift table only)
          3  - Portuguese
          4  - Bengali
          5  - Gujarati
          6  - Hindi
          7  - Kannada
          8  - Malayalam
          9  - Oriya
         10  - Punjabi
         11  - Tamil
         12  - Telugu
         13  - Urdu
         14+ - reserved 
 National language single shift tables to enable for SMS encoding.
         Decoding is always enabled. 3GPP TS 23.038 states that this feature
         should not be enabled until a formal request is issued by the relevant
         national regulatory body. Array elements are codes from the table above.
         Example 1: devices sold in Turkey must include table 1 to conform with
           By-Law Number 27230. (http://www.btk.gov.tr/eng/pdf/2009/BY-LAW_SMS.pdf)
         Example 2: devices sold in India should include tables 4 through 13
           to enable use of the new Release 9 tables for Indic languages. 
 National Language Identifier codes for the following two config items.
         (from 3GPP TS 23.038 V9.1.1 Table 6.2.1.2.4.1):
          0  - reserved
          1  - Turkish
          2  - Spanish (single shift table only)
          3  - Portuguese
          4  - Bengali
          5  - Gujarati
          6  - Hindi
          7  - Kannada
          8  - Malayalam
          9  - Oriya
         10  - Punjabi
         11  - Tamil
         12  - Telugu
         13  - Urdu
         14+ - reserved 
 National language single shift tables to enable for SMS encoding.
         Decoding is always enabled. 3GPP TS 23.038 states that this feature
         should not be enabled until a formal request is issued by the relevant
         national regulatory body. Array elements are codes from the table above.
         Example 1: devices sold in Turkey must include table 1 to conform with
           By-Law Number 27230. (http://www.btk.gov.tr/eng/pdf/2009/BY-LAW_SMS.pdf)
         Example 2: devices sold in India should include tables 4 through 13
           to enable use of the new Release 9 tables for Indic languages. 
         */
        public: static const int config_sms_enabled_single_shift_tables = 0x01070029;
        /**  Do not translate. Defines the slots for the right-hand side icons.  That is to say, the
         icons in the status bar that are not notifications. 
         */
        public: static const int config_statusBarIcons = 0x0107000a;
        /**  default telephony hardware configuration for this platform.
    
 this string array should be overridden by the device to present a list
         telephony hardware resource.  this is used by the telephony device controller
         (TDC) to offer the basic capabilities of the hardware to the telephony
         framework
    
 an array of "[hardware type],[hardware-uuid],[state],[[hardware-type specific]]"
         with, [[hardware-type specific]] in:
            - "[[ril-model],[rat],[max-active-voice],[max-active-data],[max-active-standby]]"
              for 'modem' hardware
            - "[[associated-modem-uuid]]"
              for 'sim' hardware.
         refer to HardwareConfig in com.android.internal.telephony for specific details/values
         those elements can carry.
    
         */
        public: static const int config_telephonyHardware = 0x01070036;
        /**  This string array can be overriden to enable test location providers initially. 
 Array of "[locationProviderName],[requiresNetwork],
         [requiresSatellite],[requiresCell],[hasMonetaryCost],
         [supportAltitute],[supportsSpeed],[supportsBearing],
         [powerRequirement],[accuracy]" 
 powerRequirement is defined in android.location.Criteria
         0 = NO_REQUIREMENT / 1 = POWER_LOW / 2 = POWER_MEDIUM / 3 = POWER_HIGH 
 accuracy is defined in anroid.location.Criteria
         1 = ACCURACY_FINE / 2 = ACCURACY_COARSE 
 Example test network location provider
        <item>network,false,false,false,false,true,true,true,1,2</item>
        
         */
        public: static const int config_testLocationProviders = 0x01070027;
        /**  List of regexpressions describing the interface (if any) that represent tetherable
         bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
         should be empty. 
 List of regexpressions describing the interface (if any) that represent tetherable
         bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
         should be empty. 
         */
        public: static const int config_tether_bluetooth_regexs = 0x01070013;
        /**  Dhcp range (min, max) to use for tethering purposes 
         */
        public: static const int config_tether_dhcp_range = 0x01070014;
        /**  Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 Array of allowable ConnectivityManager network types for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
         [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
 XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.
         Please don't copy them, copy anything else. 
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
         [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH or
         [1,4,7,9] for TYPE_WIFI, TYPE_MOBILE_DUN, TYPE_BLUETOOTH and TYPE_ETHERNET
 Array of ConnectivityManager.TYPE_xxxx values allowable for tethering 
 Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH 
         */
        public: static const int config_tether_upstream_types = 0x01070016;
        /**  List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" 
 List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" 
         */
        public: static const int config_tether_usb_regexs = 0x01070010;
        /**  List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" 
 List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" 
         */
        public: static const int config_tether_wifi_regexs = 0x01070011;
        /**  List of regexpressions describing the interface (if any) that represent tetherable
         WiMAX interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" 
         */
        public: static const int config_tether_wimax_regexs = 0x01070012;
        /**  Do not translate. Defines the slots is Two Digit Number for dialing normally not USSD 
 Do not translate. Defines the slots is Two Digit Number for dialing normally not USSD 
 Do not translate. Defines the slots is Two Digit Number for dialing normally not USSD 
 Do not translate. Defines the slots is Two Digit Number for dialing normally not USSD 
         */
        public: static const int config_twoDigitNumberPattern = 0x01070028;
        /**  List of file paths for USB host busses to exclude from USB host support.
         For example, if the first USB bus on the device is used to communicate
         with the modem or some other restricted hardware, add "/dev/bus/usb/001/"
         to this list.  If this is empty, no parts of the host USB bus will be excluded.
    
         */
        public: static const int config_usbHostBlacklist = 0x01070018;
        /**  Vibrator pattern for feedback about touching a virtual key 
 Vibrator pattern for feedback about touching a virtual key 
         */
        public: static const int config_virtualKeyVibePattern = 0x0107001b;
        /**  service number convert map in roaming network. 
 [dialstring],[replacement][,optional gid] 
 service number convert map in roaming network. 
 [dialstring],[replacement][,optional gid] 
 service number convert map in roaming network. 
         */
        public: static const int dial_string_replace = 0x0107003b;
        /**  Email address types from android.provider.Contacts. This could be used when adding a new e-mail address for a contact, for example. 
         */
        public: static const int emailAddressTypes = 0x01070000;
        /**  Instant Messenger ID types from android.provider.Contacts. This could be used when adding a new IM for a contact, for example. 
         */
        public: static const int imAddressTypes = 0x01070041;
        /**  Instant Message protocols/providers from android.provider.Contacts 
         */
        public: static const int imProtocols = 0x01070001;
        /**  Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
         */
        public: static const int maps_starting_lat_lng = 0x0107003e;
        /**  Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
 Do not translate. 
         */
        public: static const int maps_starting_zoom = 0x0107003f;
        /**  XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.
         Please don't copy them, copy anything else. 
 This string array should be overridden by the device to present a list of network
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware 
 An Array of "[Connection name],[ConnectivityManager.TYPE_xxxx],
         [associated radio-type],[priority],[restoral-timer(ms)],[dependencyMet]  
 the 5th element "resore-time" indicates the number of milliseconds to delay
         before automatically restore the default connection.  Set -1 if the connection
         does not require auto-restore. 
 the 6th element indicates boot-time dependency-met value. 
 This string array should be overridden by the device to present a list of network
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware 
 An Array of "[Connection name],[ConnectivityManager.TYPE_xxxx],
         [associated radio-type],[priority],[restoral-timer(ms)],[dependencyMet]  
 the 5th element "resore-time" indicates the number of milliseconds to delay
         before automatically restore the default connection.  Set -1 if the connection
         does not require auto-restore. 
 the 6th element indicates boot-time dependency-met value. 
         */
        public: static const int networkAttributes = 0x0107000c;
        /**  networks that don't want data deactivate when shutdown the phone
         note this is dependent on the operator of the network we're on,
         not operator on the SIM 
         */
        public: static const int networks_not_clear_data = 0x0107003c;
        /**  If EMS is not supported, framework breaks down EMS into single segment SMS
         and adds page info " x/y". This config is used to set which carrier doesn't
         support EMS and whether page info should be added at the beginning or the end.
         We use tag 'prefix' for position beginning and 'suffix' for position end.
         And use gid to distinguish different carriers which using same mcc and mnc.
         Examples: <item>simOperatorNumber;position;gid(optional)</item>>
    
         */
        public: static const int no_ems_support_sim_operators = 0x01070038;
        /**  Organization types from android.provider.Contacts. This could be used when adding a new organization for a contact, for example. 
         */
        public: static const int organizationTypes = 0x01070002;
        /**  Phone number types from android.provider.Contacts. This could be used when adding a new phone number for a contact, for example. 
         */
        public: static const int phoneTypes = 0x01070003;
        /**  Postal address types from android.provider.Contacts. This could be used when adding a new address for a contact, for example. 
         */
        public: static const int postalAddressTypes = 0x01070004;
        /**  Do not translate. These are all of the color state list resources that should be
         preloaded by the zygote process before it starts forking application processes. 
         */
        public: static const int preloaded_color_state_lists = 0x01070007;
        /**  Do not translate. These are all of the drawable resources that should be preloaded by
         the zygote process before it starts forking application processes. 
         */
        public: static const int preloaded_drawables = 0x01070006;
        /**  This string array should be overridden by the device to present a list of radio
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware 
 An Array of "[ConnectivityManager connectionType],
                      [# simultaneous connection types]"  
 This string array should be overridden by the device to present a list of radio
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware 
 An Array of "[ConnectivityManager connectionType],
                      [# simultaneous connection types]"  
         */
        public: static const int radioAttributes = 0x0107000e;
        /**  Used in LocalePicker 
         */
        public: static const int special_locale_codes = 0x01070008;
        /**  Used in LocalePicker 
         */
        public: static const int special_locale_names = 0x01070009;
    };
    public: class attr {
        /**  Default AbsListView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int absListViewStyle = 0x0101006a;
        /**  The event types this serivce would like to receive as specified in
             {@link android.view.accessibility.AccessibilityEvent}. This setting
             can be changed at runtime by calling
             {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
             android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>typeViewClicked</code></td><td>0x00000001</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED} events.</td></tr>
<tr><td><code>typeViewLongClicked</code></td><td>0x00000002</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_LONG_CLICKED} events. </td></tr>
<tr><td><code>typeViewSelected</code></td><td>0x00000004</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SELECTED} events. </td></tr>
<tr><td><code>typeViewFocused</code></td><td>0x00000008</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_FOCUSED} events. </td></tr>
<tr><td><code>typeViewTextChanged</code></td><td>0x00000010</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED} events. </td></tr>
<tr><td><code>typeWindowStateChanged</code></td><td>0x00000020</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED} events. </td></tr>
<tr><td><code>typeNotificationStateChanged</code></td><td>0x00000040</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED} events. </td></tr>
<tr><td><code>typeViewHoverEnter</code></td><td>0x00000080</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER} events. </td></tr>
<tr><td><code>typeViewHoverExit</code></td><td>0x00000100</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_EXIT} events. </td></tr>
<tr><td><code>typeTouchExplorationGestureStart</code></td><td>0x00000200</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_START} events. </td></tr>
<tr><td><code>typeTouchExplorationGestureEnd</code></td><td>0x00000400</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_END} events. </td></tr>
<tr><td><code>typeWindowContentChanged</code></td><td>0x00000800</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} events. </td></tr>
<tr><td><code>typeViewScrolled</code></td><td>0x000001000</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED} events. </td></tr>
<tr><td><code>typeViewTextSelectionChanged</code></td><td>0x000002000</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED} events. </td></tr>
<tr><td><code>typeAllMask</code></td><td>0xffffffff</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPES_ALL_MASK} i.e. all events. </td></tr>
</table>
         */
        public: static const int accessibilityEventTypes = 0x01010380;
        /**  The feedback types this serivce provides as specified in
             {@link android.accessibilityservice.AccessibilityServiceInfo}. This setting
             can be changed at runtime by calling
             {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
             android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>feedbackSpoken</code></td><td>0x00000001</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_SPOKEN} feedback. </td></tr>
<tr><td><code>feedbackHaptic</code></td><td>0x00000002</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_HAPTIC} feedback. </td></tr>
<tr><td><code>feedbackAudible</code></td><td>0x00000004</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_AUDIBLE} feedback. </td></tr>
<tr><td><code>feedbackVisual</code></td><td>0x00000008</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_VISUAL} feedback. </td></tr>
<tr><td><code>feedbackGeneric</code></td><td>0x00000010</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_GENERIC} feedback. </td></tr>
<tr><td><code>feedbackAllMask</code></td><td>0xffffffff</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_ALL_MASK} feedback. </td></tr>
</table>
         */
        public: static const int accessibilityFeedbackType = 0x01010382;
        /**  Additional flags as specified in
             {@link android.accessibilityservice.AccessibilityServiceInfo}.
             This setting can be changed at runtime by calling
             {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
             android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>flagDefault</code></td><td>0x00000001</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#DEFAULT} </td></tr>
<tr><td><code>flagIncludeNotImportantViews</code></td><td>0x00000002</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS} </td></tr>
<tr><td><code>flagRequestTouchExplorationMode</code></td><td>0x00000004</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} </td></tr>
<tr><td><code>flagRequestEnhancedWebAccessibility</code></td><td>0x00000008</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY} </td></tr>
<tr><td><code>flagReportViewIds</code></td><td>0x00000010</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS} </td></tr>
<tr><td><code>flagRequestFilterKeyEvents</code></td><td>0x00000020</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS} </td></tr>
<tr><td><code>flagRetrieveInteractiveWindows</code></td><td>0x00000040</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} </td></tr>
</table>
         */
        public: static const int accessibilityFlags = 0x01010384;
        /**  The drawable for accessibility focused views. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int accessibilityFocusedDrawable = 0x0101050c;
        /**  Indicates to accessibility services whether the user should be notified when
             this view changes. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Accessibility services should not announce changes to this view. </td></tr>
<tr><td><code>polite</code></td><td>1</td><td> Accessibility services should announce changes to this view. </td></tr>
<tr><td><code>assertive</code></td><td>2</td><td> Accessibility services should interrupt ongoing speech to immediately
                 announce changes to this view. </td></tr>
</table>
         */
        public: static const int accessibilityLiveRegion = 0x010103ee;
        /**  A preferences.xml file for authenticator-specific settings. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int accountPreferences = 0x0101029f;
        /**  The account type this authenticator handles. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int accountType = 0x0101028f;
        /**  The action name to assign to the Intent, as per
            {@link android.content.Intent#setAction Intent.setAction()}. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int action = 0x0101002d;
        /**  Custom divider drawable to use for elements in the action bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionBarDivider = 0x0101039b;
        /**  Custom item state list drawable background for action bar items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionBarItemBackground = 0x0101039c;
        /**  Reference to a theme that should be used to inflate popups
             shown by widgets in the action bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionBarPopupTheme = 0x0101048d;
        /**  Size of the Action Bar, including the contextual
             bar used to present Action Modes. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>wrap_content</code></td><td>0</td><td></td></tr>
</table>
         */
        public: static const int actionBarSize = 0x010102eb;
        /**  Reference to a style for the split Action Bar. This style
             controls the split component that holds the menu/action
             buttons. actionBarStyle is still used for the primary
             bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionBarSplitStyle = 0x01010388;
        /**  Reference to a style for the Action Bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionBarStyle = 0x010102ce;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionBarTabBarStyle = 0x010102f4;
        /**  Default style for tabs within an action bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionBarTabStyle = 0x010102f3;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionBarTabTextStyle = 0x010102f5;
        /**  Reference to a theme that should be used to inflate the
             action bar. This will be inherited by any widget inflated
             into the action bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionBarTheme = 0x01010431;
        /**  Reference to a theme that should be used to inflate widgets
             and layouts destined for the action bar. Most of the time
             this will be a reference to the current theme, but when
             the action bar has a significantly different contrast
             profile than the rest of the activity the difference
             can become important. If this is set to @null the current
             theme will be used.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionBarWidgetTheme = 0x01010397;
        /**  Default action button style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionButtonStyle = 0x010102d8;
        /**  Default ActionBar dropdown style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionDropDownStyle = 0x010102d7;
        /**  An optional layout to be used as an action view.
             See {@link android.view.MenuItem#setActionView(android.view.View)}
             for more info. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionLayout = 0x010102fb;
        /**  TextAppearance style that will be applied to text that
             appears within action menu items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionMenuTextAppearance = 0x01010360;
        /**  Color for text that appears within action menu items. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int actionMenuTextColor = 0x01010361;
        /**  Background drawable to use for action mode UI 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeBackground = 0x010102db;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeCloseButtonStyle = 0x010102f7;
        /**  Drawable to use for the close action mode button 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeCloseDrawable = 0x010102dc;
        /**  Drawable to use for the Copy action button in Contextual Action Bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeCopyDrawable = 0x01010312;
        /**  Drawable to use for the Cut action button in Contextual Action Bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeCutDrawable = 0x01010311;
        /**  Drawable to use for the Find action button in WebView selection action modes 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeFindDrawable = 0x0101047a;
        /**  Drawable to use for the Paste action button in Contextual Action Bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModePasteDrawable = 0x01010313;
        /**  PopupWindow style to use for action modes when showing as a window overlay. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModePopupWindowStyle = 0x01010424;
        /**  Drawable to use for the Select all action button in Contextual Action Bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeSelectAllDrawable = 0x0101037e;
        /**  Drawable to use for the Share action button in WebView selection action modes 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeShareDrawable = 0x01010479;
        /**  Background drawable to use for action mode UI in the lower split bar 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeSplitBackground = 0x0101039d;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeStyle = 0x01010394;
        /**  Drawable to use for the Web Search action button in WebView selection action modes 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionModeWebSearchDrawable = 0x0101047b;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionOverflowButtonStyle = 0x010102f6;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int actionOverflowMenuStyle = 0x01010444;
        /**  The name of an optional ActionProvider class to instantiate an action view
             and perform operations such as default action for that menu item.
             See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
             for more info. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int actionProviderClass = 0x01010389;
        /**  The name of an optional View class to instantiate and use as an
             action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
             for more info. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int actionViewClass = 0x010102fc;
        /**  Drawable used as a background for activated items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int activatedBackgroundIndicator = 0x010102fd;
        /**  Default ActivityChooserView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int activityChooserViewStyle = 0x01010423;
        /**   When closing the current activity, this is the animation that is
              run on the next activity (which is entering the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int activityCloseEnterAnimation = 0x010100ba;
        /**   When closing the current activity, this is the animation that is
              run on the current activity (which is exiting the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int activityCloseExitAnimation = 0x010100bb;
        /**   When opening a new activity, this is the animation that is
              run on the next activity (which is entering the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int activityOpenEnterAnimation = 0x010100b8;
        /**   When opening a new activity, this is the animation that is
              run on the previous activity (which is exiting the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int activityOpenExitAnimation = 0x010100b9;
        /**  Fully qualified class name of an activity that allows the user to manually
             add printers to this print service. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int addPrintersActivity = 0x010103e6;
        /**  Sets whether this ViewGroup's drawable states also include
             its children's drawable states.  This is used, for example, to
             make a group appear to be focused when its child EditText or button
             is focused. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int addStatesFromChildren = 0x010100f0;
        /**  Set this to true if you want the ImageView to adjust its bounds
             to preserve the aspect ratio of its drawable. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int adjustViewBounds = 0x0101011e;
        /**  Fully qualified class name of an activity with advanced print options
             specific to this print service. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int advancedPrintOptionsActivity = 0x010103f1;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int alertDialogButtonGroupStyle = 0x0101041a;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int alertDialogCenterButtons = 0x0101041b;
        /**  Icon drawable to use for alerts 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int alertDialogIcon = 0x01010355;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int alertDialogStyle = 0x0101005d;
        /**  Theme to use for alert dialogs spawned from this theme. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int alertDialogTheme = 0x01010309;
        /**  Alignment constants. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>alignBounds</code></td><td>0</td><td> Align the bounds of the children.
        See {@link android.widget.GridLayout#ALIGN_BOUNDS}. </td></tr>
<tr><td><code>alignMargins</code></td><td>1</td><td> Align the margins of the children.
        See {@link android.widget.GridLayout#ALIGN_MARGINS}. </td></tr>
</table>
         */
        public: static const int alignmentMode = 0x0101037a;
        /**  Resource representing the term "All Contacts" (e.g. "All Friends" or
        "All connections"). Optional (Default is "All Contacts"). 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int allContactsName = 0x010102cc;
        /**  Whether to allow the application to participate in the backup
         and restore infrastructure.  If this attribute is set to <code>false</code>,
         no backup or restore of the application will ever be performed, even by a
         full-system backup that would otherwise cause all application data to be saved
         via adb.  The default value of this attribute is <code>true</code>. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int allowBackup = 0x01010280;
        /**  Option to let applications specify that user data can/cannot be 
         cleared. This flag is turned on by default.
         <em>This attribute is usable only by applications
         included in the system image. Third-party apps cannot use it.</em> 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int allowClearUserData = 0x01010005;
        /**  Indicate that the activity can be launched as the embedded child of another
         activity. Particularly in the case where the child lives in a container
         such as a Display owned by another activity.

         <p>The default value of this attribute is <code>false</code>. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int allowEmbedded = 0x010103f5;
        /**  true if the storage can be shared via USB mass storage 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int allowMassStorage = 0x01010571;
        /**  Set to true to tell the SyncManager that this SyncAdapter supports
             multiple simultaneous syncs for the same account type and authority.
             Otherwise the SyncManager will be sure not to issue a start sync request
             to this SyncAdapter if the SyncAdapter is already syncing another account.
             Defaults to false.
             
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int allowParallelSyncs = 0x01010332;
        /**  Determine whether the glow pad is allowed to scale to fit the bounds indicated
            by its parent. If this is set to false, no scaling will occur. If this is set to true
            scaling will occur to fit for any axis in which gravity is set to center. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int allowScaling = 0x0101055b;
        /**  Indicates whether the drawer can be opened/closed by a single tap
             on the handle.  (If false, the user must drag or fling, or click
             using the trackball, to open/close the drawer.)  Default is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int allowSingleTap = 0x01010259;
        /**  Specify that an activity can be moved out of a task it is in to
         the task it has an affinity for when appropriate.  Use with the
         application tag (to supply a default for all activities in the
         application), or with an activity tag (to supply a specific
         setting for that component).
    
         <p>Normally when an application is started, it is associated with
         the task of the activity that started it and stays there for its
         entire lifetime.  You can use the allowTaskReparenting feature to force an
         activity to be re-parented to a different task when the task it is
         in goes to the background.  Typically this is used to cause the
         activities of an application to move back to the main task associated
         with that application.  The activity is re-parented to the task
         with the same {@link android.R.attr#taskAffinity} as it has. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int allowTaskReparenting = 0x01010204;
        /**  alpha property of the view, as a value between 0 (completely transparent) and 1
             (completely opaque). 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int alpha = 0x0101031f;
        /**  The alphabetic shortcut key.  This is the shortcut when using a keyboard
             with alphabetic keys. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int alphabeticShortcut = 0x010101e3;
        /**  Defines whether the ViewGroup should always draw its children using their
             drawing cache or not. The default value is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int alwaysDrawnWithCache = 0x010100ef;
        /**  Specify whether an acitivty's task state should always be maintained
         by the system, or if it is allowed to reset the task to its initial
         state in certain situations.
         
         <p>Normally the system will reset a task (remove all activities from
         the stack and reset the root activity) in certain situations when
         the user re-selects that task from the home screen.  Typically this
         will be done if the user hasn't visited that task for a certain
         amount of time, such as 30 minutes.
         
         <p>By setting this attribute, the user will always return to your
         task in its last state, regardless of how they get there.  This is
         useful, for example, in an application like the web browser where there
         is a lot of state (such as multiple open tabs) that the application
         would not like to lose. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int alwaysRetainTaskState = 0x01010203;
        /**  Used when the handle shouldn't wait to be hit before following the finger 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int alwaysTrackFinger = 0x01010558;
        /**  The background color state list for the AM/PM selectors. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int amPmBackgroundColor = 0x010104a5;
        /**  @hide The background color for the AM/PM selectors of the
             TimePicker when selected. Used if the background color does not
             explicitly have a color set for the selected state. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int amPmSelectedBackgroundColor = 0x01010548;
        /**  The color for the AM/PM selectors. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int amPmTextColor = 0x010104a4;
        /**  Alpha value of the ambient shadow projected by elevated views, between 0 and 1. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int ambientShadowAlpha = 0x010104be;
        /**  Angle of the gradient. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int angle = 0x010101a0;
        /**  Defines whether to animate the current View when the ViewAnimation
             is first displayed. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int animateFirstView = 0x010102d5;
        /**  Defines whether changes in layout (caused by adding and removing items) should
             cause a LayoutTransition to run. When this flag is set to true, a default
             LayoutTransition object will be set on the ViewGroup container and default
             animations will run when these layout changes occur.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int animateLayoutChanges = 0x010102f2;
        /**  Indicates whether the drawer should be opened/closed with an animation
             when the user clicks the handle. Default is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int animateOnClick = 0x0101025c;
        /**  Animation to use on each child. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int animation = 0x010101cd;
        /**  Defines whether layout animations should create a drawing cache for their
             children. Enabling the animation cache consumes more memory and requires
             a longer initialization but provides better performance. The animation
             cache is enabled by default. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int animationCache = 0x010100ed;
        /**  Sets how long a transition animation should run (in milliseconds)
             when layout has changed.  Only relevant if animation is turned on. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int animationDuration = 0x01010112;
        /**  The order in which the animations will be started. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> Animations are started in the natural order. </td></tr>
<tr><td><code>reverse</code></td><td>1</td><td> Animations are started in the reverse order. </td></tr>
<tr><td><code>random</code></td><td>2</td><td> Animations are started randomly. </td></tr>
</table>
         */
        public: static const int animationOrder = 0x010101ce;
        /**  @deprecated Not used by the framework. 
 Timeout between frames of animation in milliseconds
             {@deprecated Not used by the framework.} 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int animationResolution = 0x0101031a;
        /**  Enables or disables antialiasing. Antialiasing can be used to smooth the
             edges of a bitmap when rotated. Default value is false. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int antialias = 0x0101011a;
        /**  Indicates whether the application can accommodate any screen
             density.  Older applications are assumed to not be able to,
             new ones able to.  You can explicitly supply your abilities
             here. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int anyDensity = 0x0101026c;
        /**  A drawable that can be rendered in Android's system UI for representing
             the service. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int apduServiceBanner = 0x010103ed;
        /**  Value is a string that specifies the Maps API Key to use. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int apiKey = 0x01010211;
        /**  Aspect to use when drawing LockPatternView. Choices are "square"(default), "lock_width"
             or "lock_height" 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int aspect = 0x0101055e;
        /**  Name of the author of this component, e.g. Google. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int author = 0x010102b4;
        /**  Specify the authorities under which this content provider can be
         found.  Multiple authorities may be supplied by separating them
         with a semicolon.  Authority names should use a Java-style naming
         convention (such as <code>com.google.provider.MyProvider</code>)
         in order to avoid conflicts.  Typically this name is the same
         as the class implementation describing the provider's data structure. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int authorities = 0x01010018;
        /**  The view id of the AppWidget subview which should be auto-advanced.
             by the widget's host. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int autoAdvanceViewId = 0x0101030f;
        /**  Default AutoCompleteTextView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int autoCompleteTextViewStyle = 0x0101006b;
        /**  Controls whether links such as urls and email addresses are
         automatically found and converted to clickable links.  The default
         value is "none", disabling this feature. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00</td><td> Match no patterns (default). </td></tr>
<tr><td><code>web</code></td><td>0x01</td><td> Match Web URLs. </td></tr>
<tr><td><code>email</code></td><td>0x02</td><td> Match email addresses. </td></tr>
<tr><td><code>phone</code></td><td>0x04</td><td> Match phone numbers. </td></tr>
<tr><td><code>map</code></td><td>0x08</td><td> Match map addresses. </td></tr>
<tr><td><code>all</code></td><td>0x0f</td><td> Match all patterns (equivalent to web|email|phone|map). </td></tr>
</table>
         */
        public: static const int autoLink = 0x010100b0;
        /**  Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left).  See
             {@link android.graphics.drawable.Drawable#setAutoMirrored}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int autoMirrored = 0x010103ea;
        /**  Tasks launched by activities with this attribute will remain in the recent tasks
         list until the last activity in the task is completed.  When that happens the task
         will be automatically removed from the recent tasks list.  This overrides the caller's
         use of {@link android.content.Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS
         Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS} 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int autoRemoveFromRecents = 0x01010447;
        /**  When true, automatically start animating 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int autoStart = 0x010102b5;
        /**  If set, specifies that this TextView has a textual input method
             and automatically corrects some common spelling errors.
             The default is "false".
             {@deprecated Use inputType instead.} 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int autoText = 0x0101016a;
        /**  If provided and <code>true</code>, URLs entered in the search dialog while searching
             within this activity would be detected and treated as URLs (show a 'go' button in the
             keyboard and invoke the browser directly when user launches the URL instead of passing
             the URL to the activity). If set to <code>false</code> any URLs entered are treated as
             normal query text.
             The default value is <code>false</code>. <i>Optional attribute.</i>. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int autoUrlDetect = 0x0101028c;
        /**  A drawable to use as the background.  This can be either a reference
             to a full drawable resource (such as a PNG image, 9-patch,
             XML state list description, etc), or a solid color such as "#ff000000"
            (black). 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int background = 0x010100d4;
        /**  Default background dim amount when a menu, dialog, or something similar pops up. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int backgroundDimAmount = 0x01010032;
        /**  Control whether dimming behind the window is enabled.  The default
             theme does not set this value, meaning it is based on whether the
             window is floating. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int backgroundDimEnabled = 0x0101021f;
        /**  Drawable used for the section header preview when left-aligned. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int backgroundLeft = 0x01010526;
        /**  Drawable used for the section header preview when right-aligned. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int backgroundRight = 0x01010525;
        /**  Specifies a background drawable for the bottom component of a split action bar. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int backgroundSplit = 0x0101038b;
        /**  Specifies a background drawable for a second stacked row of the action bar. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int backgroundStacked = 0x0101038a;
        /**  Tint to apply to the background. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int backgroundTint = 0x0101046b;
        /**  Blending mode used to apply the background tint. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
         */
        public: static const int backgroundTintMode = 0x0101046c;
        /**  The name of the class subclassing <code>BackupAgent</code> to manage
         backup and restore of the application's data on external storage. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int backupAgent = 0x0101027f;
        /**  A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int banner = 0x010103f2;
        /**  The offset of the baseline within this view. See {see android.view.View#getBaseline}
             for details 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int baseline = 0x0101031c;
        /**  If true, the image view will be baseline aligned with based on its
             bottom edge. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int baselineAlignBottom = 0x01010122;
        /**  When set to false, prevents the layout from aligning its children's
             baselines. This attribute is particularly useful when the children
             use different values for gravity. The default value is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int baselineAligned = 0x01010126;
        /**  When a linear layout is part of another layout that is baseline
          aligned, it can specify which of its children to baseline align to
          (that is, which child TextView).
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int baselineAlignedChildIndex = 0x01010127;
        /**  Drawable to use as the icon bitmap. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int bitmap = 0x01010568;
        /**  Padding to use at the bottom of the prefs content. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int borderBottom = 0x0101052b;
        /**  Padding to use at the left of the prefs content. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int borderLeft = 0x0101052c;
        /**  Padding to use at the right of the prefs content. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int borderRight = 0x0101052d;
        /**  Padding to use at the top of the prefs content. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int borderTop = 0x0101052a;
        /**  Style for buttons without an explicit border, often used in groups. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int borderlessButtonStyle = 0x0101032b;
        /**  Amount of bottom padding inside the gradient shape. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int bottom = 0x010101b0;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int bottomBright = 0x010100cd;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int bottomDark = 0x010100c9;
        /**  Radius of the bottom left corner. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int bottomLeftRadius = 0x010101ab;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int bottomMedium = 0x010100ce;
        /**  Extra offset for the handle at the bottom of the SlidingDrawer. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int bottomOffset = 0x01010257;
        /**  Radius of the bottom right corner. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int bottomRightRadius = 0x010101ac;
        /**  The short title for the bread crumb of this item. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int breadCrumbShortTitle = 0x01010304;
        /**  The title for the bread crumb of this item. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int breadCrumbTitle = 0x01010303;
        /**  Determines the minimum type that getText() will return.
             The default is "normal".
             Note that EditText and LogTextBox always return Editable,
             even if you specify something less powerful here. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> Can return any CharSequence, possibly a
             Spanned one if the source text was Spanned. </td></tr>
<tr><td><code>spannable</code></td><td>1</td><td> Can only return Spannable. </td></tr>
<tr><td><code>editable</code></td><td>2</td><td> Can only return Spannable and Editable. </td></tr>
</table>
         */
        public: static const int bufferType = 0x0101014e;
        /**  Drawable used for the button graphic (e.g. checkbox, radio button, etc). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int button = 0x01010107;
        /**  Style for buttons within button bars 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int buttonBarButtonStyle = 0x0101032f;
        /**  Style for the "negative" buttons within button bars 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int buttonBarNegativeButtonStyle = 0x0101048b;
        /**  Style for the "neutral" buttons within button bars 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int buttonBarNeutralButtonStyle = 0x0101048a;
        /**  Style for the "positive" buttons within button bars 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int buttonBarPositiveButtonStyle = 0x01010489;
        /**  Style for button bars 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int buttonBarStyle = 0x0101032e;
        /** <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
</table>
         */
        public: static const int buttonGravity = 0x01010589;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int buttonPanelSideLayout = 0x01010518;
        /**  Normal Button style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int buttonStyle = 0x01010048;
        /**  Button style to inset into an EditText. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int buttonStyleInset = 0x0101004a;
        /**  Small Button style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int buttonStyleSmall = 0x01010049;
        /**  ToggleButton style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int buttonStyleToggle = 0x0101004b;
        /**  Tint to apply to the button graphic. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int buttonTint = 0x0101046f;
        /**  Blending mode used to apply the button graphic tint. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
         */
        public: static const int buttonTintMode = 0x01010470;
        /**  Indicates that this list will always be drawn on top of solid, single-color
             opaque background. This allows the list to optimize drawing. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int cacheColorHint = 0x01010101;
        /**  @hide The selected text color for the calendar. Used as a backup
             if the text color does not explicitly have a color set for the
             selected state. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int calendarSelectedTextColor = 0x01010537;
        /**  The text color list of the calendar. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int calendarTextColor = 0x0101049b;
        /**  Whether the calendar view is shown. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int calendarViewShown = 0x0101034c;
        /**  The CalendarView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int calendarViewStyle = 0x0101035d;
        /**  Attribute whether the accessibility service wants to be able to request enhanced
             web accessibility enhancements. For example, installing scripts to make app
             content more accessible.
             <p>
             Required to allow setting the {@link android.accessibilityservice
             #AccessibilityServiceInfo#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY} flag.
             </p>
         
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int canRequestEnhancedWebAccessibility = 0x010103d8;
        /**  Attribute whether the accessibility service wants to be able to request to
             filter key events.
             <p>
             Required to allow setting the {@link android.accessibilityservice
             #AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS} flag.
             </p>
         
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int canRequestFilterKeyEvents = 0x010103d9;
        /**  Attribute whether the accessibility service wants to be able to request touch
             exploration mode in which touched items are spoken aloud and the UI can be
             explored via gestures.
             <p>
             Required to allow setting the {@link android.accessibilityservice
             #AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} flag.
             </p>
         
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int canRequestTouchExplorationMode = 0x010103d7;
        /**  Attribute whether the accessibility service wants to be able to retrieve the
             active window content. This setting cannot be changed at runtime. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int canRetrieveWindowContent = 0x01010385;
        /**  A styled string, specifying the style to be used for showing
             inline candidate text when composing with an input method.  The
             text itself will be ignored, but the style spans will be applied
             to the candidate text as it is edited. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
         */
        public: static const int candidatesTextStyleSpans = 0x01010230;
        /**  Declare that this application can't participate in the normal
             state save/restore mechanism.  Since it is not able to save and
             restore its state on demand,
             it can not participate in the normal activity lifecycle.  It will
             not be killed while in the background; the user must explicitly
             quit it.  Only one such app can be running at a time; if the user
             tries to launch a second such app, they will be prompted
             to quit the first before doing so.  While the
             application is running, the user will be informed of this.
             @hide 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int cantSaveState = 0x01010590;
        /**  If set, specifies that this TextView has a textual input method
             and should automatically capitalize what the user types.
             The default is "none".
             {@deprecated Use inputType instead.} 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Don't automatically capitalize anything. </td></tr>
<tr><td><code>sentences</code></td><td>1</td><td> Capitalize the first word of each sentence. </td></tr>
<tr><td><code>words</code></td><td>2</td><td> Capitalize the first letter of every word. </td></tr>
<tr><td><code>characters</code></td><td>3</td><td> Capitalize every character. </td></tr>
</table>
         */
        public: static const int capitalize = 0x01010169;
        /**  The category attribute will be used by the Android platform to present
             multiple applications that register ISO 7816 Application IDs (AIDs) in the
             same category uniformly.
             Additionally, when a category is specified, Android will ensure that either
             all AIDs in this group are routed to this application, or none at all.
             This attribute is optional.
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int category = 0x010103e8;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int centerBright = 0x010100cc;
        /**  Optional center color. For linear gradients, use centerX or centerY
             to place the center color. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int centerColor = 0x0101020b;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int centerDark = 0x010100c8;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int centerMedium = 0x010100cf;
        /**  X coordinate of the origin of the gradient within the shape. 
         <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int centerX = 0x010101a2;
        /**  Y coordinate of the origin of the gradient within the shape. 
         <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int centerY = 0x010101a3;
        /**  Default style for CheckBoxPreference. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int checkBoxPreferenceStyle = 0x0101008f;
        /**  Drawable used for the check mark graphic. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int checkMark = 0x01010108;
        /**  Gravity for aligning a CheckedTextView's checkmark to one side or the other. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
         */
        public: static const int checkMarkGravity = 0x01010520;
        /**  Tint to apply to the check mark. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int checkMarkTint = 0x010104a7;
        /**  Blending mode used to apply the check mark tint. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
         */
        public: static const int checkMarkTintMode = 0x010104a8;
        /**  Whether the item is capable of displaying a check mark. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int checkable = 0x010101e5;
        /**  Whether the items are capable of displaying a check mark. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> The items are not checkable. </td></tr>
<tr><td><code>all</code></td><td>1</td><td> The items are all checkable. </td></tr>
<tr><td><code>single</code></td><td>2</td><td> The items are checkable and there will only be a single checked item in
                 this group. </td></tr>
</table>
         */
        public: static const int checkableBehavior = 0x010101e0;
        /**  Default Checkbox style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int checkboxStyle = 0x0101006c;
        /**  Indicates the initial checked state of this button. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int checked = 0x01010106;
        /**  The id of the child radio button that should be checked by default
             within this radio group. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int checkedButton = 0x01010148;
        /**  Default CheckedTextView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int checkedTextViewStyle = 0x010103c8;
        /**  Drawable or color that is used as a divider for children. (It will drawn
             below and above child items.) The height of this will be the same as
             the height of the normal list item divider. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int childDivider = 0x01010111;
        /**  Indicator shown beside the child View. This can be a stateful Drawable. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int childIndicator = 0x0101010c;
        /**  The end bound for a child's indicator. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int childIndicatorEnd = 0x010103d4;
        /**  The left bound for a child's indicator. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int childIndicatorLeft = 0x0101010f;
        /**  The right bound for a child's indicator. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int childIndicatorRight = 0x01010110;
        /**  The start bound for a child's indicator. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int childIndicatorStart = 0x010103d3;
        /**  Defines the choice behavior for the view. By default, lists do not have
             any choice behavior. By setting the choiceMode to singleChoice, the list
             allows up to one item to be in a chosen state. By setting the choiceMode to
             multipleChoice, the list allows any number of items to be chosen.
             Finally, by setting the choiceMode to multipleChoiceModal the list allows
             any number of items to be chosen in a special selection mode.
             The application will supply a
             {@link android.widget.AbsListView.MultiChoiceModeListener} using
             {@link android.widget.AbsListView#setMultiChoiceModeListener} to control the
             selection mode. This uses the {@link android.view.ActionMode} API. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Normal list that does not indicate choices. </td></tr>
<tr><td><code>singleChoice</code></td><td>1</td><td> The list allows up to one choice. </td></tr>
<tr><td><code>multipleChoice</code></td><td>2</td><td> The list allows multiple choices. </td></tr>
<tr><td><code>multipleChoiceModal</code></td><td>3</td><td> The list allows multiple choices in a custom selection mode. </td></tr>
</table>
         */
        public: static const int choiceMode = 0x0101012b;
        /**  Specify whether an activity's task should be cleared when it
         is re-launched from the home screen.  As a result, every time the
         user starts the task, they will be brought to its root activity,
         regardless of whether they used BACK or HOME to last leave it.
         This flag only applies to activities that
         are used to start the root of a new task.
         
         <p>An example of the use of this flag would be for the case where
         a user launches activity A from home, and from there goes to
         activity B.  They now press home, and then return to activity A.
         Normally they would see activity B, since that is what they were
         last doing in A's task.  However, if A has set this flag to true,
         then upon going to the background all of the tasks on top of it (B
         in this case) are removed, so when the user next returns to A they
         will restart at its original activity.
         
         <p>When this option is used in conjunction with
         {@link android.R.attr#allowTaskReparenting}, the allowTaskReparenting trumps the
         clear.  That is, all activities above the root activity of the
         task will be removed: those that have an affinity will be moved
         to the task they are associated with, otherwise they will simply
         be dropped as described here. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int clearTaskOnLaunch = 0x01010015;
        /**  Color of the outline of click feedback. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int clickColor = 0x01010532;
        /**  Defines whether this view reacts to click events. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int clickable = 0x010100e5;
        /**  Defines whether a child is limited to draw inside of its bounds or not.
             This is useful with animations that scale the size of the children to more
             than 100% for instance. In such a case, this property should be set to false
             to allow the children to draw outside of their bounds. The default value of
             this property is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int clipChildren = 0x010100ea;
        /**  The orientation for the clip. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>1</td><td> Clip the drawable horizontally. </td></tr>
<tr><td><code>vertical</code></td><td>2</td><td> Clip the drawable vertically. </td></tr>
</table>
         */
        public: static const int clipOrientation = 0x0101020a;
        /**  Defines whether the ViewGroup will clip its drawing surface so as to exclude
             the padding area. This property is set to true by default. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int clipToPadding = 0x010100eb;
        /**  Close button icon 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int closeIcon = 0x01010481;
        /**  Specifies a layout to use for the "close" item at the starting edge. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int closeItemLayout = 0x01010563;
        /**  The unicode value or comma-separated values that this key outputs. 
         <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int codes = 0x01010242;
        /**  The zero-based index of the columns to collapse. The column indices
             must be separated by a comma: 1, 2, 5. Illegal and duplicate
             indices are ignored. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int collapseColumns = 0x0101014b;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int collapseIcon = 0x0101058a;
        /**  Solid color for the gradient shape. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int color = 0x010101a5;
        /**  Bright complement to the primary branding color. By default, this is the color applied
             to framework controls (via colorControlActivated). 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorAccent = 0x01010435;
        /**  Default highlight color for items that are
             activated. (Activated meaning persistent selection.) 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorActivatedHighlight = 0x01010390;
        /**  Color that matches (as closely as possible) the window background. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorBackground = 0x01010031;
        /**  This is a hint for a solid color that can be used for caching
             rendered views.  This should be the color of the background when
             there is a solid background color; it should be null when the
             background is a texture or translucent.  When a device is able
             to use accelerated drawing (thus setting state_accelerated), the
             cache hint is ignored and always assumed to be transparent. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorBackgroundCacheHint = 0x010102ab;
        /**  The color applied to framework buttons in their normal state. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorButtonNormal = 0x0101042b;
        /**  The color applied to framework controls in their activated (ex. checked) state. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorControlActivated = 0x0101042a;
        /**  The color applied to framework control highlights (ex. ripples, list selectors). 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorControlHighlight = 0x0101042c;
        /**  The color applied to framework controls in their normal state. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorControlNormal = 0x01010429;
        /**  The color applied to the edge effect on scrolling containers. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorEdgeEffect = 0x010104ce;
        /**  Default highlight color for items that are
             focused. (Focused meaning cursor-based selection.) 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorFocusedHighlight = 0x0101038f;
        /**  Default color of foreground imagery. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorForeground = 0x01010030;
        /**  Default color of foreground imagery on an inverted background. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorForegroundInverse = 0x01010206;
        /**  Default highlight color for items that are long-pressed. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorLongPressedHighlight = 0x0101038e;
        /**  Default highlight color for items in multiple selection
             mode. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorMultiSelectHighlight = 0x01010391;
        /**  Default highlight color for items that are pressed. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorPressedHighlight = 0x0101038d;
        /**  The primary branding color for the app. By default, this is the color applied to the
             action bar background. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorPrimary = 0x01010433;
        /**  Dark variant of the primary branding color. By default, this is the color applied to
             the status bar (via statusBarColor) and navigation bar (via navigationBarColor). 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorPrimaryDark = 0x01010434;
        /**  The color applied to framework switch thumbs in their normal state. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int colorSwitchThumbNormal = 0x0101050f;
        /**  The maxmimum number of columns to create when automatically positioning children. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int columnCount = 0x01010377;
        /**  Fraction of the animation duration used to delay the beginning of
         the animation of each column. 
         <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int columnDelay = 0x010101cf;
        /**  When set to true, forces column boundaries to appear in the same order
        as column indices.
        The default is true.
        See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int columnOrderPreserved = 0x01010378;
        /**  Specifies the fixed width for each column. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int columnWidth = 0x01010117;
        /**  Commit icon shown in the query suggestion row 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int commitIcon = 0x01010485;
        /**  Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
             this is the new way to specify the largest screens an application is
             compatible with.  This attribute provides the maximum
             "smallest screen width" (as per the -swNNNdp resource configuration)
             that the application is designed for.  If this value is smaller than
             the "smallest screen width" of the device it is running on, the user
             is offered to run it in a compatibility mode that emulates a
             smaller screen and zooms it to fit the screen. Currently the compatibility mode only
             emulates phone screens with a 320dp width, so compatibility mode is not applied if the
             value for compatibleWidthLimitDp is larger than 320. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int compatibleWidthLimitDp = 0x01010365;
        /**  Defines the hint displayed in the drop down menu. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int completionHint = 0x01010172;
        /**  Defines the hint view displayed in the drop down menu. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int completionHintView = 0x01010173;
        /**  Defines the number of characters that the user must type before
         completion suggestions are displayed in a drop down menu. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int completionThreshold = 0x01010174;
        /**  Specify one or more configuration changes that the activity will
         handle itself.  If not specified, the activity will be restarted
         if any of these configuration changes happen in the system.  Otherwise,
         the activity will remain running and its
         {@link android.app.Activity#onConfigurationChanged Activity.onConfigurationChanged}
         method called with the new configuration.
         
         <p>Note that all of these configuration changes can impact the
         resource values seen by the application, so you will generally need
         to re-retrieve all resources (including view layouts, drawables, etc)
         to correctly handle any configuration change.
         
         <p>These values must be kept in sync with those in
         {@link android.content.pm.ActivityInfo} and
         include/utils/ResourceTypes.h. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>mcc</code></td><td>0x0001</td><td> The IMSI MCC has changed, that is a SIM has been detected and
             updated the Mobile Country Code. </td></tr>
<tr><td><code>mnc</code></td><td>0x0002</td><td> The IMSI MNC has changed, that is a SIM has been detected and
             updated the Mobile Network Code. </td></tr>
<tr><td><code>locale</code></td><td>0x0004</td><td> The locale has changed, that is the user has selected a new
             language that text should be displayed in. </td></tr>
<tr><td><code>touchscreen</code></td><td>0x0008</td><td> The touchscreen has changed.  Should never normally happen. </td></tr>
<tr><td><code>keyboard</code></td><td>0x0010</td><td> The keyboard type has changed, for example the user has plugged
             in an external keyboard. </td></tr>
<tr><td><code>keyboardHidden</code></td><td>0x0020</td><td> The keyboard or navigation accessibility has changed, for example
             the user has slid the keyboard out to expose it.  Note that
             despite its name, this applied to any accessibility: keyboard
             or navigation. </td></tr>
<tr><td><code>navigation</code></td><td>0x0040</td><td> The navigation type has changed.  Should never normally happen. </td></tr>
<tr><td><code>orientation</code></td><td>0x0080</td><td> The screen orientation has changed, that is the user has
             rotated the device. </td></tr>
<tr><td><code>screenLayout</code></td><td>0x0100</td><td> The screen layout has changed.  This might be caused by a
             different display being activated. </td></tr>
<tr><td><code>uiMode</code></td><td>0x0200</td><td> The global user interface mode has changed.  For example,
             going in or out of car mode, night mode changing, etc. </td></tr>
<tr><td><code>screenSize</code></td><td>0x0400</td><td> The current available screen size has changed.  If applications don't
             target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
             then the activity will always handle this itself (the change
             will not result in a restart).  This represents a change in the
             currently available size, so will change when the user switches
             between landscape and portrait. </td></tr>
<tr><td><code>smallestScreenSize</code></td><td>0x0800</td><td> The physical screen size has changed.  If applications don't
             target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
             then the activity will always handle this itself (the change
             will not result in a restart).  This represents a change in size
             regardless of orientation, so will only change when the actual
             physical screen size has changed such as switching to an external
             display. </td></tr>
<tr><td><code>layoutDirection</code></td><td>0x2000</td><td> The layout direction has changed. For example going from LTR to RTL. </td></tr>
<tr><td><code>fontScale</code></td><td>0x40000000</td><td> The font scaling factor has changed, that is the user has
             selected a new global font size. </td></tr>
</table>
         */
        public: static const int configChanges = 0x0101001f;
        /**  A class name in the AppWidget's package to be launched to configure.
             If not supplied, then no activity will be launched. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int configure = 0x0101025d;
        /**  If true, the drawable's reported internal size will remain
             constant as the state changes; the size is the maximum of all
             of the states.  If false, the size will vary based on the
             current state. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int constantSize = 0x01010196;
        /**  Identifier for the child that represents the drawer's content. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int content = 0x0101025b;
        /**  The age associated with the content rating. The content of this rating is suitable for
             people of this age or above. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int contentAgeHint = 0x010104b9;
        /**  the authority of a content provider. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int contentAuthority = 0x01010290;
        /**  Defines text that briefly describes content of the view. This property is used
             primarily for accessibility. Since some views do not have textual
             representation this attribute can be used for providing such. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int contentDescription = 0x01010273;
        /**  Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int contentInsetEnd = 0x01010454;
        /**  Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int contentInsetLeft = 0x01010455;
        /**  Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int contentInsetRight = 0x01010456;
        /**  Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int contentInsetStart = 0x01010453;
        /**  The x coordinate of the first control point of the cubic Bezier 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int controlX1 = 0x010103fc;
        /**  The x coordinate of the second control point of the cubic Bezier 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int controlX2 = 0x010103fe;
        /**  The y coordinate of the first control point of the cubic Bezier 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int controlY1 = 0x010103fd;
        /**  The y coordinate of the second control point of the cubic Bezier 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int controlY2 = 0x010103ff;
        /**  The country code associated with the content rating system, which consists of two
             uppercase letters that conform to the ISO 3166 standard. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int country = 0x010104ba;
        /**  If true, the image will be cropped to fit within its padding. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int cropToPadding = 0x01010123;
        /**  Makes the cursor visible (the default) or invisible. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int cursorVisible = 0x01010152;
        /**  Specifies a layout for custom navigation. Overrides navigationMode. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int customNavigationLayout = 0x010102d2;
        /**  Account handles its own token storage and permissions.
             Default to false
          
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int customTokens = 0x0101033b;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int cycles = 0x010101d4;
        /**  Gap between dashes in the stroke. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dashGap = 0x010101a7;
        /**  Length of a dash in the stroke. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dashWidth = 0x010101a6;
        /**  The data URI to assign to the Intent, as per
            {@link android.content.Intent#setData Intent.setData()}.
            <p><em>Note: scheme and host name matching in the Android framework is
            case-sensitive, unlike the formal RFC.  As a result,
            URIs here should always be normalized to use lower case letters
            for these elements (as well as other proper Uri normalization).</em></p> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int data = 0x0101002e;
        /**  The DatePicker dialog theme. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int datePickerDialogTheme = 0x010104ac;
        /**  Defines the look of the widget. Prior to the L release, the only choice was
             spinner. As of L, with the Material theme selected, the default layout is calendar,
             but this attribute can be used to force spinner to be used instead. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>spinner</code></td><td>1</td><td> Date picker with spinner controls to select the date. </td></tr>
<tr><td><code>calendar</code></td><td>2</td><td> Date picker with calendar to select the date. </td></tr>
</table>
         */
        public: static const int datePickerMode = 0x010104b3;
        /**  The DatePicker style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int datePickerStyle = 0x0101035c;
        /**  The text appearance for the calendar dates. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dateTextAppearance = 0x01010349;
        /**  The background color for the date selector 's day of week. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int dayOfWeekBackground = 0x01010494;
        /**  The text color for the date selector's day of week. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dayOfWeekTextAppearance = 0x01010495;
        /**  Flag indicating whether the application can be debugged, even when
         running on a device that is running in user mode. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int debuggable = 0x0101000f;
        /**  The default value for the preference, which will be set either if persistence
             is off or persistence is on and the preference is not found in the persistent
             storage.  
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>May be a floating point value, such as "<code>1.2</code>".
         */
        public: static const int defaultValue = 0x010101ed;
        /**  Fraction of the animation duration used to delay the beginning of
         the animation of each child. 
         <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int delay = 0x010101cc;
        /**  The key of another Preference that this Preference will depend on.  If the other
             Preference is not set or is off, this Preference will be disabled. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dependency = 0x010101ec;
        /**  Defines the relationship between the ViewGroup and its descendants
             when looking for a View to take focus. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>beforeDescendants</code></td><td>0</td><td> The ViewGroup will get focus before any of its descendants. </td></tr>
<tr><td><code>afterDescendants</code></td><td>1</td><td> The ViewGroup will get focus only if none of its descendants want it. </td></tr>
<tr><td><code>blocksDescendants</code></td><td>2</td><td> The ViewGroup will block its descendants from receiving focus. </td></tr>
</table>
         */
        public: static const int descendantFocusability = 0x010100f1;
        /**  Descriptive text for the associated data. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int description = 0x01010020;
        /**  Special option for window animations: if this window is on top
             of a wallpaper, don't animate the wallpaper with it. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int detachWallpaper = 0x010102a6;
        /**  Column in data table that contains details for this data. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int detailColumn = 0x010102a3;
        /**  Flag indicating that detail should be built from SocialProvider. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int detailSocialSummary = 0x010102a4;
        /**  Background that can be used behind parts of a UI that provide
             details on data the user is selecting.  For example, this is
             the background element of PreferenceActivity's embedded
             preference fragment. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int detailsElementBackground = 0x0101034e;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dial = 0x01010102;
        /**  Window decor layout to use in dialog mode with custom titles 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dialogCustomTitleDecorLayout = 0x01010506;
        /**  The icon for the dialog. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dialogIcon = 0x010101f4;
        /**  A layout to be used as the content View for the dialog. By default, this shouldn't
             be needed. If a custom DialogPreference is required, this should be set. For example,
             the EditTextPreference uses a layout with an EditText as this attribute. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dialogLayout = 0x010101f7;
        /**  The message in the dialog. If a dialogLayout is provided and contains
             a TextView with ID android:id/message, this message will be placed in there. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dialogMessage = 0x010101f3;
        /**  Default style for DialogPreference. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dialogPreferenceStyle = 0x01010091;
        /**  Theme to use for dialogs spawned from this theme. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dialogTheme = 0x01010308;
        /**  The title in the dialog. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dialogTitle = 0x010101f2;
        /**  Window decor layout to use in dialog mode with title only 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dialogTitleDecorLayout = 0x01010507;
        /**  Window decor layout to use in dialog mode with icons 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dialogTitleIconsDecorLayout = 0x01010505;
        /**  If set, specifies that this TextView has a numeric input method
             and that these specific characters are the ones that it will
             accept.
             If this is set, numeric is implied to be true.
             The default is false. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int digits = 0x01010166;
        /**  Direction of the animation in the grid. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>left_to_right</code></td><td>0x0</td><td> Animates columns from left to right. </td></tr>
<tr><td><code>right_to_left</code></td><td>0x1</td><td> Animates columns from right to left. </td></tr>
<tr><td><code>top_to_bottom</code></td><td>0x0</td><td> Animates rows from top to bottom. </td></tr>
<tr><td><code>bottom_to_top</code></td><td>0x2</td><td> Animates rows from bottom to top. </td></tr>
</table>
         */
        public: static const int direction = 0x010101d1;
        /**  Reference to an array resource that be used to announce the directions with targets around the circle. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int directionDescriptions = 0x010103a1;
        /**  Priority of the rows and columns. When the priority is none,
         both rows and columns have the same priority. When the priority is
         column, the animations will be applied on the columns first. The same
         goes for rows. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Rows and columns are animated at the same time. </td></tr>
<tr><td><code>column</code></td><td>1</td><td> Columns are animated first. </td></tr>
<tr><td><code>row</code></td><td>2</td><td> Rows are animated first. </td></tr>
</table>
         */
        public: static const int directionPriority = 0x010101d2;
        /**  Whether this spinner should mark child views as enabled/disabled when
             the spinner itself is enabled/disabled. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int disableChildrenWhenDisabled = 0x01010535;
        /**  The state (true for on, or false for off) that causes dependents to be disabled. By default,
             dependents will be disabled when this is unchecked, so the value of this preference is false. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int disableDependentsState = 0x010101f1;
        /**  Default disabled alpha for widgets that set enabled/disabled alpha programmatically. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int disabledAlpha = 0x01010033;
        /**  Options affecting how the action bar is displayed. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>useLogo</code></td><td>0x1</td><td></td></tr>
<tr><td><code>showHome</code></td><td>0x2</td><td></td></tr>
<tr><td><code>homeAsUp</code></td><td>0x4</td><td></td></tr>
<tr><td><code>showTitle</code></td><td>0x8</td><td></td></tr>
<tr><td><code>showCustom</code></td><td>0x10</td><td></td></tr>
<tr><td><code>disableHome</code></td><td>0x20</td><td></td></tr>
</table>
         */
        public: static const int displayOptions = 0x010102d0;
        /**  Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dither = 0x0101011c;
        /**  Drawable or color to draw between list items. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int divider = 0x01010129;
        /**  Height of the divider. Will use the intrinsic height of the divider if this
             is not specified. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dividerHeight = 0x0101012a;
        /**  Drawable to use for generic horizontal dividers. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dividerHorizontal = 0x0101032c;
        /**  Size of padding on either end of a divider. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dividerPadding = 0x0101032a;
        /**  Drawable to use for generic vertical dividers. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dividerVertical = 0x0101030a;
        /**  This attribute specifies that an activity shall become the root activity of a
         new task each time it is launched. Using this attribute permits the user to
         have multiple documents from the same applications appear in the recent tasks list.

         <p>Such a document is any kind of item for which an application may want to
         maintain multiple simultaneous instances. Examples might be text files, web
         pages, spreadsheets, or emails. Each such document will be in a separate
         task in the recent taskss list.

         <p>This attribute is equivalent to adding the flag {@link
         android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT} to every Intent used to launch
         the activity.

         <p>The documentLaunchMode attribute may be assigned one of four values, "none",
         "intoExisting", "always" and "never", described in detail below. For values other than
         <code>none</code> and <code>never</code> the activity must be defined with
         {@link android.R.attr#launchMode} <code>standard</code>.
         If this attribute is not specified, <code>none</code> will be used.
         Note that <code>none</code> can be overridden at run time if the Intent used
         to launch it contains the flag {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
         Intent.FLAG_ACTIVITY_NEW_DOCUMENT}.
         Similarly <code>intoExisting</code> will be overridden by the flag
         {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
         Intent.FLAG_ACTIVITY_NEW_DOCUMENT} combined with
         {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
         Intent.FLAG_ACTIVITY_MULTIPLE_TASK}. If the value of
         documentLaunchModes is <code>never</code> then any use of
         {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
         Intent.FLAG_ACTIVITY_NEW_DOCUMENT} to launch this activity will be ignored. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> The default mode, which will create a new task only when
             {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
             Intent.FLAG_ACTIVITY_NEW_TASK} is set. </td></tr>
<tr><td><code>intoExisting</code></td><td>1</td><td> All tasks will be searched for one whose base Intent's ComponentName and
             data URI match those of the launching Intent. If such a task is found
             that task will be cleared and restarted with the root activity receiving a call
             to {@link android.app.Activity#onNewIntent Activity.onNewIntent}. If no
             such task is found a new task will be created.
             <p>This is the equivalent of launching an activity with {@link
             android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
             set and without {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
             Intent.FLAG_ACTIVITY_MULTIPLE_TASK} set. </td></tr>
<tr><td><code>always</code></td><td>2</td><td> A new task rooted at this activity will be created. This will happen whether or
             not there is an existing task whose ComponentName and data URI match
             that of the launcing intent This is the equivalent of launching an activity
             with {@link
             android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
             and {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
             Intent.FLAG_ACTIVITY_MULTIPLE_TASK} both set. </td></tr>
<tr><td><code>never</code></td><td>3</td><td> This activity will not be launched into a new document even if the Intent contains
             {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
             Intent.FLAG_ACTIVITY_NEW_DOCUMENT}. This gives the activity writer ultimate
             control over how their activity is used. Note that applications prior to api
             21 will default to documentLaunchMode="none" so only activities that explicitly
             opt out with <code>"never"</code> may do so. </td></tr>
</table>
         */
        public: static const int documentLaunchMode = 0x01010445;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dotSize = 0x01010579;
        /**  When set to true, the selector will be drawn over the selected item.
             Otherwise the selector is drawn behind the selected item. The default
             value is false. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int drawSelectorOnTop = 0x010100fc;
        /**  Reference to a drawable resource to use for the frame.  If not
             given, the drawable must be defined by the first child tag. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int drawable = 0x01010199;
        /**  @hide The alpha value (0-255) set on the ImageView's drawable. Equivalent
             to calling ImageView.setAlpha(int), not the same as View.setAlpha(float). 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int drawableAlpha = 0x01010529;
        /**  The drawable to be drawn below the text. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int drawableBottom = 0x0101016e;
        /**  The drawable to be drawn to the end of the text. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int drawableEnd = 0x01010393;
        /**  The drawable to be drawn to the left of the text. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int drawableLeft = 0x0101016f;
        /**  The padding between the drawables and the text. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int drawablePadding = 0x01010171;
        /**  The drawable to be drawn to the right of the text. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int drawableRight = 0x01010170;
        /**  The drawable to be drawn to the start of the text. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int drawableStart = 0x01010392;
        /**  The drawable to be drawn above the text. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int drawableTop = 0x0101016d;
        /**  Defines the quality of translucent drawing caches. This property is used
             only when the drawing cache is enabled and translucent. The default value is auto. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto</code></td><td>0</td><td> Lets the framework decide what quality level should be used
                 for the drawing cache. </td></tr>
<tr><td><code>low</code></td><td>1</td><td> Low quality. When set to low quality, the drawing cache uses a lower color
                 depth, thus losing precision in rendering gradients, but uses less memory. </td></tr>
<tr><td><code>high</code></td><td>2</td><td> High quality. When set to high quality, the drawing cache uses a higher
                 color depth but uses more memory. </td></tr>
</table>
         */
        public: static const int drawingCacheQuality = 0x010100e8;
        /**  View to anchor the auto-complete dropdown to. If not specified, the text view itself
             is used. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dropDownAnchor = 0x01010263;
        /**  Specifies the basic height of the dropdown. Its value may
             be a dimension (such as "12dip") for a constant height,
             fill_parent or match_parent to fill the height of the
             screen, or wrap_content to match the height of
             the content of the drop down. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The dropdown should fit the height of the screen.
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The dropdown should fit the height of the screen.
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The dropdown should fit the height of the content. </td></tr>
</table>
         */
        public: static const int dropDownHeight = 0x01010283;
        /**  Default style for drop down hints. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dropDownHintAppearance = 0x01010088;
        /**  Amount of pixels by which the drop down should be offset horizontally. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dropDownHorizontalOffset = 0x010102ac;
        /**  Default style for drop down items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dropDownItemStyle = 0x01010086;
        /**  Default ListView style for drop downs. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dropDownListViewStyle = 0x0101006d;
        /**  Selector in a drop down list. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int dropDownSelector = 0x01010175;
        /**  Default dropdown Spinner style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int dropDownSpinnerStyle = 0x010102d6;
        /**  Amount of pixels by which the drop down should be offset vertically. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dropDownVerticalOffset = 0x010102ad;
        /**  Specifies the basic width of the dropdown. Its value may
             be a dimension (such as "12dip") for a constant width,
             fill_parent or match_parent to match the width of the
             screen, or wrap_content to match the width of
             the anchored view. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The dropdown should fill the width of the screen.
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The dropdown should fit the width of the screen.
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The dropdown should fit the width of its anchor. </td></tr>
</table>
         */
        public: static const int dropDownWidth = 0x01010262;
        /**  The preferred item height for dropdown lists. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int dropdownListPreferredItemHeight = 0x01010417;
        /**  When this attribute is set to true, the view gets its drawable state
             (focused, pressed, etc.) from its direct parent rather than from itself. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int duplicateParentState = 0x010100e9;
        /**  Amount of time (in milliseconds) to display this frame. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int duration = 0x01010198;
        /**  EditText background drawable. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int editTextBackground = 0x01010352;
        /**  EditText text foreground color. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int editTextColor = 0x01010351;
        /**  Default style for EditTextPreference. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int editTextPreferenceStyle = 0x01010092;
        /**  Default EditText style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int editTextStyle = 0x0101006e;
        /**  If set, specifies that this TextView has an input method.
             It will be a textual one unless it has otherwise been specified.
             For TextView, this is false by default.  For EditText, it is
             true by default.
             {@deprecated Use inputType instead.} 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int editable = 0x0101016b;
        /**  Reference to an
             {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
             XML resource containing additional data to
             supply to an input method, which is private to the implementation
             of the input method.  This simply fills in
             the {@link android.view.inputmethod.EditorInfo#extras
             EditorInfo.extras} field when the input
             method is connected. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int editorExtras = 0x01010224;
        /**  Elegant text height, especially for less compacted complex script text. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int elegantTextHeight = 0x0101045d;
        /**  base z depth of the view 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int elevation = 0x01010440;
        /**  Where to ellipsize text. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>start</code></td><td>1</td><td></td></tr>
<tr><td><code>middle</code></td><td>2</td><td></td></tr>
<tr><td><code>end</code></td><td>3</td><td></td></tr>
<tr><td><code>marquee</code></td><td>4</td><td></td></tr>
</table>
         */
        public: static const int ellipsize = 0x010100ab;
        /**  Makes the TextView be exactly this many ems wide. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int ems = 0x01010158;
        /**  true if the storage is emulated via the FUSE sdcard daemon 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int emulated = 0x0101056f;
        /**  Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
             For example, a non-enabled EditText prevents the user from editing the contained text, and
             a non-enabled Button prevents the user from tapping the button.
             The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
             from evaluating state_enabled differ. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int enabled = 0x0101000e;
        /**  End color of the gradient. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int endColor = 0x0101019e;
        /**  {@deprecated Use maxDate instead.} 
 The last year (inclusive), for example "2010".
             {@deprecated Use maxDate instead.} 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int endYear = 0x0101017d;
        /**  Amount of time (in milliseconds) to fade in a new state drawable. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int enterFadeDuration = 0x0101030c;
        /**  Reference to an array resource that will populate a list/adapter. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int entries = 0x010100b2;
        /**  The array to find the value to save for a preference when an entry from
             entries is selected. If a user clicks on the second item in entries, the
             second item in this array will be saved to the preference. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int entryValues = 0x010101f8;
        /**  The error color 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int errorColor = 0x01010561;
        /**  Background used instead of errorMessageBackground when the popup has to be above. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int errorMessageAboveBackground = 0x01010415;
        /**  Popup text displayed in TextView when setError is used. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int errorMessageBackground = 0x01010414;
        /**  Defines whether the overlay should intercept the motion events when a gesture
             is recognized. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int eventsInterceptionEnabled = 0x0101027d;
        /**  The fully-qualified name of the Class to exclude from this transition. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int excludeClass = 0x01010442;
        /**  Indicates that an Activity should be excluded from the list of
         recently launched activities. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int excludeFromRecents = 0x01010017;
        /**  The id of a target to exclude from this transition. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int excludeId = 0x01010441;
        /**  The transitionName of the target to exclude from this transition. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int excludeName = 0x0101044e;
        /**  Amount of time (in milliseconds) to fade out an old state drawable. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int exitFadeDuration = 0x0101030d;
        /**  The drawable to show in the button for expanding the activities overflow popup.
             <strong>Note:</strong> Clients would like to set this drawable
             as a clue about the action the chosen activity will perform. For
             example, if share activity is to be chosen the drawable should
             give a clue that sharing is to be performed.
         
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int expandActivityOverflowButtonDrawable = 0x0101054d;
        /**  The preferred left bound for an expandable list child's indicator. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int expandableListPreferredChildIndicatorLeft = 0x01010052;
        /**  The preferred right bound for an expandable list child's indicator. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int expandableListPreferredChildIndicatorRight = 0x01010053;
        /**  The preferred left padding for an expandable list item that is a child.
             If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int expandableListPreferredChildPaddingLeft = 0x0101004f;
        /**  The preferred left bound for an expandable list item's indicator. For a child-specific
             indicator, use expandableListPreferredChildIndicatorLeft. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int expandableListPreferredItemIndicatorLeft = 0x01010050;
        /**  The preferred right bound for an expandable list item's indicator. For a child-specific
             indicator, use expandableListPreferredChildIndicatorRight. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int expandableListPreferredItemIndicatorRight = 0x01010051;
        /**  The preferred left padding for an expandable list item (for child-specific layouts,
             use expandableListPreferredChildPaddingLeft). This takes into account
             the indicator that will be shown to next to the item. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int expandableListPreferredItemPaddingLeft = 0x0101004e;
        /**  Default ExpandableListView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int expandableListViewStyle = 0x0101006f;
        /**  ExpandableListView with white background. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int expandableListViewWhiteStyle = 0x010102b6;
        /**  Flag indicating whether the given application component is available
         to other applications.  If false, it can only be accessed by
         applications with its same user id (which usually means only by
         code in its own package).  If true, it can be invoked by external
         entities, though which ones can do so may be controlled through
         permissions.  The default value is false for activity, receiver,
         and service components that do not specify any intent filters; it
         is true for activity, receiver, and service components that do
         have intent filters (implying they expect to be invoked by others
         who do not know their particular component name) and for all
         content providers. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int exported = 0x01010010;
        /**  This drawable is a state list where the "activated" state
             indicates active media routing. Non-activated indicates
             that media is playing to the local device only.
             @hide 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int externalRouteEnabledDrawable = 0x01010575;
        /**  This is the amount by which to multiply the tension. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int extraTension = 0x0101026b;
        /**  This is the amount of deceleration to add when easing in. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int factor = 0x010101d3;
        /**  Duration, in milliseconds, of the fade out effect after the user is done
             drawing a gesture. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fadeDuration = 0x01010278;
        /**  Defines whether the gesture will automatically fade out after being recognized. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fadeEnabled = 0x0101027e;
        /**  Time, in milliseconds, to wait before the gesture fades out after the user
             is done drawing it. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fadeOffset = 0x01010277;
        /**  Defines whether to fade out scrollbars when they are not in use. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fadeScrollbars = 0x010102aa;
        /**  This attribute is deprecated and will be ignored as of
             API level 14 ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}).
             Using fading edges may introduce noticeable performance
             degradations and should be used only when required by the application's
             visual design. To request fading edges with API level 14 and above,
             use the <code>android:requiresFadingEdge</code> attribute instead. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> No edge is faded. </td></tr>
<tr><td><code>horizontal</code></td><td>0x00001000</td><td> Fades horizontal edges only. </td></tr>
<tr><td><code>vertical</code></td><td>0x00002000</td><td> Fades vertical edges only. </td></tr>
</table>
         */
        public: static const int fadingEdge = 0x010100df;
        /**  Defines the length of the fading edges. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fadingEdgeLength = 0x010100e0;
        /**  Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
             with the Fade transition. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fade_in</code></td><td>1</td><td> Fade will only fade appearing items in. </td></tr>
<tr><td><code>fade_out</code></td><td>2</td><td> Fade will only fade disappearing items out. </td></tr>
<tr><td><code>fade_in_out</code></td><td>3</td><td> Fade will fade appearing items in and disappearing items out. </td></tr>
</table>
         */
        public: static const int fadingMode = 0x010103e1;
        /**  When set to true, the list will always show the fast scroll interface.
             This setting implies fastScrollEnabled. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fastScrollAlwaysVisible = 0x01010335;
        /**  Enables the fast scroll thumb that can be dragged to quickly scroll through
             the list. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fastScrollEnabled = 0x01010226;
        /**  Position of the fast scroll index overlay window. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>floating</code></td><td>0</td><td></td></tr>
<tr><td><code>atThumb</code></td><td>1</td><td></td></tr>
<tr><td><code>aboveThumb</code></td><td>2</td><td></td></tr>
</table>
         */
        public: static const int fastScrollOverlayPosition = 0x0101033a;
        /**  Drawable to use as the fast scroll index preview window background
             when shown on the left. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fastScrollPreviewBackgroundLeft = 0x01010337;
        /**  Drawable to use as the fast scroll index preview window background
             when shown on the right. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fastScrollPreviewBackgroundRight = 0x01010338;
        /**  Specifies the style of the fast scroll decorations. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fastScrollStyle = 0x010103f7;
        /**  Text color for the fast scroll index overlay. Make sure it
             plays nicely with fastScrollPreviewBackground[Left|Right]. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fastScrollTextColor = 0x01010359;
        /**  Drawable to use as the fast scroll thumb. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fastScrollThumbDrawable = 0x01010336;
        /**  Drawable to use as the track for the fast scroll thumb.
             This may be null. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fastScrollTrackDrawable = 0x01010339;
        /**  Number of waves/chevrons to show in animation. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int feedbackCount = 0x01010557;
        /**  When set to true, the animation transformation is applied after the animation is
             over. The default value is false. If fillEnabled is not set to true and the
             animation is not set on a View, fillAfter is assumed to be true.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fillAfter = 0x010101bd;
        /**  The alpha of the path fill, as a value between 0 (completely transparent)
             and 1 (completely opaque)
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fillAlpha = 0x010104cc;
        /**  When set to true or when fillEnabled is not set to true, the animation transformation
             is applied before the animation has started. The default value is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fillBefore = 0x010101bc;
        /**  The color to fill the path if not defined implies no fill
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fillColor = 0x01010404;
        /**  When set to true, the value of fillBefore is taken into account. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fillEnabled = 0x0101024f;
        /**  Defines whether the scrollview should stretch its content to fill the viewport. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fillViewport = 0x0101017a;
        /**  Enables or disables bitmap filtering. Filtering is used when the bitmap is
             shrunk or stretched to smooth its apperance. Default value is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int filter = 0x0101011b;
        /**  Specifies whether to filter touches when the view's window is obscured by
             another visible window.  When set to true, the view will not receive touches
             whenever a toast, dialog or other window appears above the view's window.
             Refer to the {@link android.view.View} security documentation for more details. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int filterTouchesWhenObscured = 0x010102c4;
        /**  Drawable for WebView find-on-page dialogue's "next" button. @hide 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int findOnPageNextDrawable = 0x0101050d;
        /**  Drawable for WebView find-on-page dialogue's "previous" button. @hide 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int findOnPagePreviousDrawable = 0x0101050e;
        /**  Specify whether an activity should be finished when a "close system
         windows" request has been made.  This happens, for example, when
         the home key is pressed, when the device is locked, when a system
         dialog showing recent applications is displayed, etc. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int finishOnCloseSystemDialogs = 0x010102a7;
        /**  Specify whether an activity should be finished when its task is
         brought to the foreground by relaunching from the home screen.
         
         <p>If both this option and {@link android.R.attr#allowTaskReparenting} are
         specified, the finish trumps the affinity: the affinity will be
         ignored and the activity simply finished. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int finishOnTaskLaunch = 0x01010014;
        /**  The first day of week according to {@link java.util.Calendar}. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int firstDayOfWeek = 0x0101033d;
        /**  Location along the circle of the first item, in degrees.
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int firstItemOffset = 0x01010559;
        /**  Boolean internal attribute to adjust view layout based on
             system windows such as the status bar.
             If true, adjusts the padding of this view to leave space for the system windows.
             Will only take effect if this view is in a non-embedded activity. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fitsSystemWindows = 0x010100dd;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int flipInterval = 0x01010179;
        /**  Boolean that controls whether a view can take focus.  By default the user can not
             move focus to a view; by setting this attribute to true the view is
             allowed to take focus.  This value does not impact the behavior of
             directly calling {@link android.view.View#requestFocus}, which will
             always request focus regardless of this view.  It only impacts where
             focus navigation will try to move focus. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int focusable = 0x010100da;
        /**  Boolean that controls whether a view can take focus while in touch mode.
             If this is true for a view, that view can gain focus when clicked on, and can keep
             focus if another view is clicked on that doesn't have this attribute set to true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int focusableInTouchMode = 0x010100db;
        /**  The color for the dates of the focused month. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int focusedMonthDateColor = 0x01010343;
        /**  Default font family. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fontFamily = 0x010103ac;
        /**  Font feature settings. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fontFeatureSettings = 0x010104b7;
        /**  When set to false, the ListView will not draw the divider before each footer view.
             The default value is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int footerDividersEnabled = 0x0101022f;
        /**  Defines the drawable to draw over the content. This can be used as an overlay.
             The foreground drawable participates in the padding of the content if the gravity
             is set to fill. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int foreground = 0x01010109;
        /**  Defines the gravity to apply to the foreground drawable. The gravity defaults
             to fill. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the vertical gravity: a top gravity will clip the bottom
                 edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the horizontal gravity: a left gravity will clip the right
                 edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
</table>
         */
        public: static const int foregroundGravity = 0x01010200;
        /**  Defines whether the foreground drawable should be drawn inside the padding.
             This property is turned on by default. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int foregroundInsidePadding = 0x01010528;
        /**  Tint to apply to the foreground. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int foregroundTint = 0x0101046d;
        /**  Blending mode used to apply the foreground tint. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
         */
        public: static const int foregroundTintMode = 0x0101046e;
        /**  Format string: if specified, the Chronometer will display this
             string, with the first "%s" replaced by the current timer value
             in "MM:SS" or "H:MM:SS" form.
             If no format string is specified, the Chronometer will simply display
             "MM:SS" or "H:MM:SS". 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int format = 0x01010105;
        /**  Specifies the formatting pattern used to show the time and/or date
             in 12-hour mode. Please refer to {@link android.text.format.DateFormat}
             for a complete description of accepted formatting patterns.
             The default pattern is a locale-appropriate equivalent of "h:mm a". 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int format12Hour = 0x010103ca;
        /**  Specifies the formatting pattern used to show the time and/or date
             in 24-hour mode. Please refer to {@link android.text.format.DateFormat}
             for a complete description of accepted formatting patterns.
             The default pattern is a locale-appropriate equivalent of "H:mm". 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int format24Hour = 0x010103cb;
        /**  The fragment that is displayed when the user selects this item. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fragment = 0x010102e3;
        /**  Sets whether the enter and exit transitions should overlap when transitioning
             forward.
             Corresponds to {@link android.app.Fragment#setAllowEnterTransitionOverlap(
             boolean)} 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentAllowEnterTransitionOverlap = 0x010104c8;
        /**  Sets whether the enter and exit transitions should overlap when transitioning
             because of popping the back stack.
             Corresponds to {@link android.app.Fragment#setAllowReturnTransitionOverlap(
             boolean)} 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentAllowReturnTransitionOverlap = 0x010104c9;
        /**  Default style for the FragmentBreadCrumbs widget. This widget is deprecated
             starting in API level 21 ({@link android.os.Build.VERSION_CODES#.L}). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentBreadCrumbsStyle = 0x01010421;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentCloseEnterAnimation = 0x010102e7;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentCloseExitAnimation = 0x010102e8;
        /**  The Transition that will be used to move Views into the initial scene.
             Corresponds to {@link android.app.Fragment#setEnterTransition(
             android.transition.Transition)} 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentEnterTransition = 0x010104c3;
        /**  The Transition that will be used to move Views out of the scene when the
             fragment is removed, hidden, or detached when not popping the back stack.
             Corresponds to {@link android.app.Fragment#setExitTransition(
             android.transition.Transition)} 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentExitTransition = 0x010104c2;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentFadeEnterAnimation = 0x010102e9;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentFadeExitAnimation = 0x010102ea;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentOpenEnterAnimation = 0x010102e5;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentOpenExitAnimation = 0x010102e6;
        /**  The Transition that will be used to move Views in to the scene when returning due
             to popping a back stack.
             Corresponds to {@link android.app.Fragment#setReenterTransition(
             android.transition.Transition)} 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentReenterTransition = 0x010104c7;
        /**  The Transition that will be used to move Views out of the scene when the Fragment is
             preparing to be removed, hidden, or detached because of popping the back stack.
             Corresponds to {@link android.app.Fragment#setReturnTransition(
             android.transition.Transition)} 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentReturnTransition = 0x010104c5;
        /**  The Transition that will be used for shared elements transferred into the content
             Scene.
             Corresponds to {@link android.app.Fragment#setSharedElementEnterTransition(
             android.transition.Transition)} 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentSharedElementEnterTransition = 0x010104c4;
        /**  The Transition that will be used for shared elements transferred back during a
             pop of the back stack. This Transition acts in the leaving Fragment.
             Corresponds to {@link android.app.Fragment#setSharedElementReturnTransition(
             android.transition.Transition)} 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fragmentSharedElementReturnTransition = 0x010104c6;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int frameDuration = 0x01010549;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int framesCount = 0x0101054a;
        /**  If set, the text view will include its current complete text
             inside of its frozen icicle in addition to meta-data such as
             the current cursor position.  By default this is disabled;
             it can be useful when the contents of a text view is not stored
             in a persistent place such as a content provider. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int freezesText = 0x0101016c;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fromAlpha = 0x010101ca;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fromDegrees = 0x010101b3;
        /**  Keyframe identifier for the starting state. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fromId = 0x0101044a;
        /**  The originating scene in this scene change. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int fromScene = 0x010103dd;
        /** <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fromXDelta = 0x010101c6;
        /** <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fromXScale = 0x010101c2;
        /** <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fromYDelta = 0x010101c8;
        /** <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fromYScale = 0x010101c4;
        /**  Indicates that even though the application provides a <code>BackupAgent</code>,
         only full-data streaming backup operations are to be performed to save the app's
         data.  This lets the app rely on full-data backups while still participating in
         the backup and restore process via the BackupAgent's full-data backup APIs.
         When this attribute is <code>true</code> the app's BackupAgent overrides of
         the onBackup() and onRestore() callbacks can be empty stubs. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int fullBackupOnly = 0x01010473;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int fullBright = 0x010100ca;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int fullDark = 0x010100c6;
        /**  Flag indicating that an Instrumentation class should be run as a
         functional test. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int functionalTest = 0x01010023;
        /**  The preferred background for gallery items. This should be set
             as the background of any Views you provide from the Adapter. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int galleryItemBackground = 0x0101004c;
        /**  Default Gallery style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int galleryStyle = 0x01010070;
        /**  Color used to draw a gesture. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int gestureColor = 0x01010275;
        /**  Default GestureOverlayView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int gestureOverlayViewStyle = 0x0101041f;
        /**  Minimum curve angle a stroke must contain before it is recognized as a gesture. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int gestureStrokeAngleThreshold = 0x0101027c;
        /**  Minimum length of a stroke before it is recognized as a gesture. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int gestureStrokeLengthThreshold = 0x0101027a;
        /**  Squareness threshold of a stroke before it is recognized as a gesture. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int gestureStrokeSquarenessThreshold = 0x0101027b;
        /**  Defines the type of strokes that define a gesture. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>single</code></td><td>0</td><td> A gesture is made of only one stroke. </td></tr>
<tr><td><code>multiple</code></td><td>1</td><td> A gesture is made of multiple strokes. </td></tr>
</table>
         */
        public: static const int gestureStrokeType = 0x01010279;
        /**  Width of the stroke used to draw the gesture. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int gestureStrokeWidth = 0x01010274;
        /**  The GLES driver version number needed by an application.
             The higher 16 bits represent the major number and the lower 16 bits
             represent the minor number. For example for GL 1.2 referring to
             0x00000102, the actual value should be set as 0x00010002. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int glEsVersion = 0x01010281;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int glowDot = 0x0101057b;
        /**  Radius of glow under finger. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int glowRadius = 0x01010554;
        /**  Go button icon 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int goIcon = 0x01010482;
        /**  Radius of the gradient, used only with radial gradient. 
         <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int gradientRadius = 0x010101a4;
        /**  If true, the {@link android.content.Context#grantUriPermission
         Context.grantUriPermission} or corresponding Intent flags can
         be used to allow others to access specific URIs in the content
         provider, even if they do not have an explicit read or write
         permission.  If you are supporting this feature, you must be
         sure to call {@link android.content.Context#revokeUriPermission
         Context.revokeUriPermission} when URIs are deleted from your
         provider.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int grantUriPermissions = 0x0101001b;
        /**  Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.  
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
         */
        public: static const int gravity = 0x010100af;
        /**  Default GridView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int gridViewStyle = 0x01010071;
        /**  Indicator shown beside the group View. This can be a stateful Drawable. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int groupIndicator = 0x0101010b;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int hand_hour = 0x01010103;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int hand_minute = 0x01010104;
        /**  Identifier for the child that represents the drawer's handle. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int handle = 0x0101025a;
        /**  Sets a drawable as the center. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int handleDrawable = 0x01010550;
        /**  Flag indicating that an Instrumentation class wants to take care
         of starting/stopping profiling itself, rather than relying on
         the default behavior of profiling the complete time it is running.
         This allows it to target profiling data at a specific set of
         operations. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int handleProfiling = 0x01010022;
        /**  Boolean that controls whether a view should have haptic feedback
             enabled for events such as long presses. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int hapticFeedbackEnabled = 0x0101025e;
        /**  <p>Flag indicating whether the application's rendering should be hardware
         accelerated if possible. This flag is turned on by default for applications
         that are targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}
         or later.</p>
         <p>This flag can be set on the application and any activity declared
         in the manifest. When enabled for the application, each activity is
         automatically assumed to be hardware accelerated. This flag can be
         overridden in the activity tags, either turning it off (if on for the
         application) or on (if off for the application.)</p>
         <p>When this flag is turned on for an activity (either directly or via
         the application tag), every window created from the activity, including
         the activity's own window, will be hardware accelerated, if possible.</p>
         <p>Please refer to the documentation of
         {@link android.view.WindowManager.LayoutParams#FLAG_HARDWARE_ACCELERATED}
         for more information on how to control this flag programmatically.</p> 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int hardwareAccelerated = 0x010102d3;
        /**  Indicate whether this application contains code.  If set to false,
             there is no code associated with it and thus the system will not
             try to load its code when launching components.  The default is true
             for normal behavior. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int hasCode = 0x0101000c;
        /**  The text appearance for the AM/PM header. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int headerAmPmTextAppearance = 0x010104a0;
        /**  Default background for the menu header. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int headerBackground = 0x0101012f;
        /**  The day of month's text appearance in the date selector. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int headerDayOfMonthTextAppearance = 0x01010497;
        /**  When set to false, the ListView will not draw the divider after each header view.
             The default value is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int headerDividersEnabled = 0x0101022e;
        /**  The layout for the Preference Header. This should rarely need to be changed. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int headerLayout = 0x01010573;
        /**  The month's text appearance in the date selector. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int headerMonthTextAppearance = 0x01010496;
        /**  true if the Icon view will be removed when there is none and thus not showing
             the fixed margins. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int headerRemoveIconIfEmpty = 0x01010574;
        /**  @hide The text color for selected time header of the TimePicker.
             This will override the value from the text appearance if it does
             not explicitly have a color set for the selected state. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int headerSelectedTextColor = 0x01010547;
        /**  The text appearance for the time header. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int headerTimeTextAppearance = 0x0101049f;
        /**  The year's text appearance in the date selector. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int headerYearTextAppearance = 0x01010498;
        /**  Makes the TextView be exactly this many pixels tall.
             You could get the same effect by specifying this number in the
             layout parameters. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int height = 0x01010155;
        /**  Set true to hide the action bar on a vertical nested scroll of content. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int hideOnContentScroll = 0x01010443;
        /**  @hide If true then the selector wheel is hidden until the picker has focus. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int hideWheelUntilFocused = 0x01010545;
        /**  Hint text to display when the text is empty. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int hint = 0x01010150;
        /**  Specifies a drawable to use for the 'home as up' indicator. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int homeAsUpIndicator = 0x0101030b;
        /**  Specifies a layout to use for the "home" section of the action bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int homeLayout = 0x0101031d;
        /**  Default horizontal divider between rows of menu items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int horizontalDivider = 0x0101012d;
        /**  Default horizontal gap between keys. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int horizontalGap = 0x0101023f;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int horizontalProgressLayout = 0x0101051e;
        /**  Default HorizontalScrollView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int horizontalScrollViewStyle = 0x01010353;
        /**  Defines the default horizontal spacing between columns. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int horizontalSpacing = 0x01010114;
        /**  Specify a URI authority host that is handled, as per
             {@link android.content.IntentFilter#addDataAuthority
             IntentFilter.addDataAuthority()}.
             <p><em>Note: host name matching in the Android framework is
             case-sensitive, unlike the formal RFC.  As a result,
             host names here should always use lower case letters.</em></p> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int host = 0x01010028;
        /**  X coordinate of the icon hot spot. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int hotSpotX = 0x01010569;
        /**  Y coordinate of the icon hot spot. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int hotSpotY = 0x0101056a;
        /**  A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int icon = 0x01010002;
        /**  The icon to show in the popup preview. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int iconPreview = 0x01010249;
        /**  The default state of the SearchView. If true, it will be iconified when not in
             use and expanded when clicked. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int iconifiedByDefault = 0x010102fa;
        /**  Supply an identifier name for this view, to later retrieve it
             with {@link android.view.View#findViewById View.findViewById()} or
             {@link android.app.Activity#findViewById Activity.findViewById()}.
             This must be a
             resource reference; typically you set this using the
             <code>@+</code> syntax to create a new ID resources.
             For example: <code>android:id="@+id/my_id"</code> which
             allows you to later retrieve the view
             with <code>findViewById(R.id.my_id)</code>. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int id = 0x010100d0;
        /**  Indicates what view should not be affected by gravity. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int ignoreGravity = 0x010101ff;
        /**  The style resource to use for an ImageButton. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int imageButtonStyle = 0x01010072;
        /**  The style resource to use for an ImageButton that is an image well. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int imageWellStyle = 0x01010073;
        /**  Supply a value for
             {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
             used when an input method is connected to the text view. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int imeActionId = 0x01010266;
        /**  Supply a value for
             {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
             used when an input method is connected to the text view. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int imeActionLabel = 0x01010265;
        /**  Animation to use when showing the fullscreen extract UI after
             it had previously been hidden. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int imeExtractEnterAnimation = 0x01010268;
        /**  Animation to use when hiding the fullscreen extract UI after
             it had previously been shown. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int imeExtractExitAnimation = 0x01010269;
        /**  Background to use for entire input method when it is being
             shown in fullscreen mode with the extract view, to ensure
             that it completely covers the application.  This allows,
             for example, the candidate view to be hidden
             while in fullscreen mode without having the application show through
             behind it.
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int imeFullscreenBackground = 0x0101022c;
        /**  Additional features you can enable in an IME associated with an editor
         to improve the integration with your application.  The constants
         here correspond to those defined by
         {@link android.view.inputmethod.EditorInfo#imeOptions}. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0x00000000</td><td> There are no special semantics associated with this editor. </td></tr>
<tr><td><code>actionUnspecified</code></td><td>0x00000000</td><td> There is no specific action associated with this editor, let the
             editor come up with its own if it can.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_NULL}. </td></tr>
<tr><td><code>actionNone</code></td><td>0x00000001</td><td> This editor has no action associated with it.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}. </td></tr>
<tr><td><code>actionGo</code></td><td>0x00000002</td><td> The action key performs a "go"
             operation to take the user to the target of the text they typed.
             Typically used, for example, when entering a URL.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}. </td></tr>
<tr><td><code>actionSearch</code></td><td>0x00000003</td><td> The action key performs a "search"
             operation, taking the user to the results of searching for the text
             the have typed (in whatever context is appropriate).
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}. </td></tr>
<tr><td><code>actionSend</code></td><td>0x00000004</td><td> The action key performs a "send"
             operation, delivering the text to its target.  This is typically used
             when composing a message.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}. </td></tr>
<tr><td><code>actionNext</code></td><td>0x00000005</td><td> The action key performs a "next"
             operation, taking the user to the next field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}. </td></tr>
<tr><td><code>actionDone</code></td><td>0x00000006</td><td> The action key performs a "done"
             operation, closing the soft input method.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}. </td></tr>
<tr><td><code>actionPrevious</code></td><td>0x00000007</td><td> The action key performs a "previous"
             operation, taking the user to the previous field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}. </td></tr>
<tr><td><code>flagNoFullscreen</code></td><td>0x2000000</td><td> Used to request that the IME never go
             into fullscreen mode.  Applications need to be aware that the flag is not
             a guarantee, and not all IMEs will respect it.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. </td></tr>
<tr><td><code>flagNavigatePrevious</code></td><td>0x4000000</td><td> Like flagNavigateNext, but
             specifies there is something interesting that a backward navigation
             can focus on.  If the user selects the IME's facility to backward
             navigate, this will show up in the application as an actionPrevious
             at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. </td></tr>
<tr><td><code>flagNavigateNext</code></td><td>0x8000000</td><td> Used to specify that there is something
             interesting that a forward navigation can focus on. This is like using
             actionNext, except allows the IME to be multiline (with
             an enter key) as well as provide forward navigation.  Note that some
             IMEs may not be able to do this, especially when running on a small
             screen where there is little space.  In that case it does not need to
             present a UI for this option.  Like actionNext, if the
             user selects the IME's facility to forward navigate, this will show up
             in the application at
             {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}. </td></tr>
<tr><td><code>flagNoExtractUi</code></td><td>0x10000000</td><td> Used to specify that the IME does not need
             to show its extracted text UI.  For input methods that may be fullscreen,
             often when in landscape mode, this allows them to be smaller and let part
             of the application be shown behind.  Though there will likely be limited
             access to the application available from the user, it can make the
             experience of a (mostly) fullscreen IME less jarring.  Note that when
             this flag is specified the IME may <em>not</em> be set up to be able
             to display text, so it should only be used in situations where this is
             not needed.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}. </td></tr>
<tr><td><code>flagNoAccessoryAction</code></td><td>0x20000000</td><td> Used in conjunction with a custom action, this indicates that the
             action should not be available as an accessory button when the
             input method is full-screen.
             Note that by setting this flag, there can be cases where the action
             is simply never available to the user.  Setting this generally means
             that you think showing text being edited is more important than the
             action you have supplied.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}. </td></tr>
<tr><td><code>flagNoEnterAction</code></td><td>0x40000000</td><td> Used in conjunction with a custom action,
             this indicates that the action should not be available in-line as
             a replacement for the "enter" key.  Typically this is
             because the action has such a significant impact or is not recoverable
             enough that accidentally hitting it should be avoided, such as sending
             a message.    Note that {@link android.widget.TextView} will
             automatically set this flag for you on multi-line text views.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}. </td></tr>
<tr><td><code>flagForceAscii</code></td><td>0x80000000</td><td> Used to request that the IME should be capable of inputting ASCII
             characters.  The intention of this flag is to ensure that the user
             can type Roman alphabet characters in a {@link android.widget.TextView}
             used for, typically, account ID or password input.  It is expected that IMEs
             normally are able to input ASCII even without being told so (such IMEs
             already respect this flag in a sense), but there could be some cases they
             aren't when, for instance, only non-ASCII input languagaes like Arabic,
             Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
             aware that the flag is not a guarantee, and not all IMEs will respect it.
             However, it is strongly recommended for IME authors to respect this flag
             especially when their IME could end up with a state that has only non-ASCII
             input languages enabled.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}. </td></tr>
</table>
         */
        public: static const int imeOptions = 0x01010264;
        /**  The extra value of the subtype. This string can be any string and will be passed to
             the IME when the framework calls the IME with the subtype.  
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int imeSubtypeExtraValue = 0x010102ee;
        /**  The locale of the subtype. This string should be a locale (e.g. en_US, fr_FR...)
             and will be passed to the IME when the framework calls the IME
             with the subtype. This is also used by the framework to know the supported locales
             of the IME.  
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int imeSubtypeLocale = 0x010102ec;
        /**  The mode of the subtype. This string can be a mode (e.g. voice, keyboard...) and this
             string will be passed to the IME when the framework calls the IME with the
             subtype.  
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int imeSubtypeMode = 0x010102ed;
        /**  Flag declaring this activity to be 'immersive'; immersive activities
         should not be interrupted with other activities or notifications. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int immersive = 0x010102c0;
        /**  Controls how this View is important for accessibility which is if it fires
             accessibility events and if it is reported to accessibility services that
             query the screen. Note: While not recommended, an accessibility service may
             decide to ignore this attribute and operate on all views in the view tree. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto</code></td><td>0</td><td> The system determines whether the view is important for accessibility - default
                 (recommended). </td></tr>
<tr><td><code>yes</code></td><td>1</td><td> The view is important for accessibility. </td></tr>
<tr><td><code>no</code></td><td>2</td><td> The view is not important for accessibility. </td></tr>
<tr><td><code>noHideDescendants</code></td><td>4</td><td> The view is not important for accessibility, nor are any of its descendant
                 views. </td></tr>
</table>
         */
        public: static const int importantForAccessibility = 0x010103aa;
        /**  Identifier for the animation to use when a view is shown. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int inAnimation = 0x01010177;
        /**  Leave enough room for ascenders and descenders instead of
             using the font ascent and descent strictly.  (Normally true). 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int includeFontPadding = 0x0101015f;
        /**  If provided and <code>true</code>, this searchable activity will be
             included in any global lists of search targets.
             The default value is <code>false</code>. <i>Optional attribute.</i>. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int includeInGlobalSearch = 0x0101026e;
        /**  Allows to enable the indeterminate mode. In this mode the progress
         bar plays an infinite looping animation. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int indeterminate = 0x01010139;
        /**  Defines how the indeterminate mode should behave when the progress
        reaches max. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>repeat</code></td><td>1</td><td> Progress starts over from 0. </td></tr>
<tr><td><code>cycle</code></td><td>2</td><td> Progress keeps the current value and goes back to 0. </td></tr>
</table>
         */
        public: static const int indeterminateBehavior = 0x0101013e;
        /**  Drawable used for the indeterminate mode. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int indeterminateDrawable = 0x0101013b;
        /**  Duration of the indeterminate animation. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int indeterminateDuration = 0x0101013d;
        /**  Restricts to ONLY indeterminate mode (state-keeping progress mode will not work). 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int indeterminateOnly = 0x0101013a;
        /**  Specifies a style resource to use for an indeterminate progress spinner. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int indeterminateProgressStyle = 0x01010318;
        /**  Tint to apply to the indeterminate progress indicator. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int indeterminateTint = 0x01010469;
        /**  Blending mode used to apply the indeterminate progress indicator tint. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
         */
        public: static const int indeterminateTintMode = 0x0101046a;
        /**  The end bound for an item's indicator. To specify a right bound specific to children,
             use childIndicatorEnd. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int indicatorEnd = 0x010103d2;
        /**  The left bound for an item's indicator. To specify a left bound specific to children,
             use childIndicatorLeft. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int indicatorLeft = 0x0101010d;
        /**  The right bound for an item's indicator. To specify a right bound specific to children,
             use childIndicatorRight. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int indicatorRight = 0x0101010e;
        /**  The start bound for an item's indicator. To specify a start bound specific to children,
             use childIndicatorStart. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int indicatorStart = 0x010103d1;
        /**  Overrides the id of the inflated View with this value. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int inflatedId = 0x010100f3;
        /**  Specify the order in which content providers hosted by a process
         are instantiated when that process is created.  Not needed unless
         you have providers with dependencies between each other, to make
         sure that they are created in the order needed by those dependencies.
         The value is a simple integer, with higher numbers being
         initialized first. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int initOrder = 0x0101001a;
        /**  The maximal number of items initially shown in the activity list. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int initialActivityCount = 0x0101054c;
        /**  A resource id of a layout. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int initialKeyguardLayout = 0x010103c2;
        /**  A resource id of a layout. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int initialLayout = 0x01010251;
        /**  Inner radius of the ring. When defined, innerRadiusRatio is ignored. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int innerRadius = 0x0101025f;
        /**  Inner radius of the ring expressed as a ratio of the ring's width. For instance,
             if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
             This value is ignored if innerRadius is defined. Default value is 9. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int innerRadiusRatio = 0x0101019b;
        /**  If set, specifies that this TextView should use the specified
             input method (specified by fully-qualified class name).
             {@deprecated Use inputType instead.} 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int inputMethod = 0x01010168;
        /**  The type of data being placed in a text field, used to help an
         input method decide how to let the user enter text.  The constants
         here correspond to those defined by
         {@link android.text.InputType}.  Generally you can select
         a single value, though some can be combined together as
         indicated.  Setting this attribute to anything besides
         <var>none</var> also implies that the text is editable. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> There is no content type.  The text is not editable. </td></tr>
<tr><td><code>text</code></td><td>0x00000001</td><td> Just plain old text.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}. </td></tr>
<tr><td><code>textCapCharacters</code></td><td>0x00001001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of all characters.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}. </td></tr>
<tr><td><code>textCapWords</code></td><td>0x00002001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every word.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}. </td></tr>
<tr><td><code>textCapSentences</code></td><td>0x00004001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every sentence.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}. </td></tr>
<tr><td><code>textAutoCorrect</code></td><td>0x00008001</td><td> Can be combined with <var>text</var> and its variations to
             request auto-correction of text being input.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}. </td></tr>
<tr><td><code>textAutoComplete</code></td><td>0x00010001</td><td> Can be combined with <var>text</var> and its variations to
             specify that this field will be doing its own auto-completion and
             talking with the input method appropriately.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}. </td></tr>
<tr><td><code>textMultiLine</code></td><td>0x00020001</td><td> Can be combined with <var>text</var> and its variations to
             allow multiple lines of text in the field.  If this flag is not set,
             the text field will be constrained to a single line.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}. </td></tr>
<tr><td><code>textImeMultiLine</code></td><td>0x00040001</td><td> Can be combined with <var>text</var> and its variations to
             indicate that though the regular text view should not be multiple
             lines, the IME should provide multiple lines if it can.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}. </td></tr>
<tr><td><code>textNoSuggestions</code></td><td>0x00080001</td><td> Can be combined with <var>text</var> and its variations to
             indicate that the IME should not show any
             dictionary-based word suggestions.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}. </td></tr>
<tr><td><code>textUri</code></td><td>0x00000011</td><td> Text that will be used as a URI.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}. </td></tr>
<tr><td><code>textEmailAddress</code></td><td>0x00000021</td><td> Text that will be used as an e-mail address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}. </td></tr>
<tr><td><code>textEmailSubject</code></td><td>0x00000031</td><td> Text that is being supplied as the subject of an e-mail.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}. </td></tr>
<tr><td><code>textShortMessage</code></td><td>0x00000041</td><td> Text that is the content of a short message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}. </td></tr>
<tr><td><code>textLongMessage</code></td><td>0x00000051</td><td> Text that is the content of a long message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}. </td></tr>
<tr><td><code>textPersonName</code></td><td>0x00000061</td><td> Text that is the name of a person.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}. </td></tr>
<tr><td><code>textPostalAddress</code></td><td>0x00000071</td><td> Text that is being supplied as a postal mailing address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}. </td></tr>
<tr><td><code>textPassword</code></td><td>0x00000081</td><td> Text that is a password.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}. </td></tr>
<tr><td><code>textVisiblePassword</code></td><td>0x00000091</td><td> Text that is a password that should be visible.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}. </td></tr>
<tr><td><code>textWebEditText</code></td><td>0x000000a1</td><td> Text that is being supplied as text in a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}. </td></tr>
<tr><td><code>textFilter</code></td><td>0x000000b1</td><td> Text that is filtering some other data.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}. </td></tr>
<tr><td><code>textPhonetic</code></td><td>0x000000c1</td><td> Text that is for phonetic pronunciation, such as a phonetic name
             field in a contact entry.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}. </td></tr>
<tr><td><code>textWebEmailAddress</code></td><td>0x000000d1</td><td> Text that will be used as an e-mail address on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}. </td></tr>
<tr><td><code>textWebPassword</code></td><td>0x000000e1</td><td> Text that will be used as a password on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}. </td></tr>
<tr><td><code>number</code></td><td>0x00000002</td><td> A numeric only field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}. </td></tr>
<tr><td><code>numberSigned</code></td><td>0x00001002</td><td> Can be combined with <var>number</var> and its other options to
             allow a signed number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}. </td></tr>
<tr><td><code>numberDecimal</code></td><td>0x00002002</td><td> Can be combined with <var>number</var> and its other options to
             allow a decimal (fractional) number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}. </td></tr>
<tr><td><code>numberPassword</code></td><td>0x00000012</td><td> A numeric password field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}. </td></tr>
<tr><td><code>phone</code></td><td>0x00000003</td><td> For entering a phone number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_PHONE}. </td></tr>
<tr><td><code>datetime</code></td><td>0x00000004</td><td> For entering a date and time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}. </td></tr>
<tr><td><code>date</code></td><td>0x00000014</td><td> For entering a date.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}. </td></tr>
<tr><td><code>time</code></td><td>0x00000024</td><td> For entering a time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}. </td></tr>
</table>
         */
        public: static const int inputType = 0x01010220;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int inset = 0x010104b5;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int insetBottom = 0x010101ba;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int insetLeft = 0x010101b7;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int insetRight = 0x010101b8;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int insetTop = 0x010101b9;
        /**  The default install location defined by an application. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto</code></td><td>0</td><td> Let the system decide ideal install location </td></tr>
<tr><td><code>internalOnly</code></td><td>1</td><td> Explicitly request to be installed on internal phone storage
             only. </td></tr>
<tr><td><code>preferExternal</code></td><td>2</td><td> Prefer to be installed on SD card. There is no guarantee that
             the system will honor this request. The application might end
             up being installed on internal storage if external media
             is unavailable or too full. </td></tr>
</table>
         */
        public: static const int installLocation = 0x010102b7;
        /**  @hide The layout of the date picker. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int internalLayout = 0x01010536;
        /**  @hide The max height of the NumberPicker. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int internalMaxHeight = 0x01010541;
        /**  @hide The max width of the NumberPicker. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int internalMaxWidth = 0x01010543;
        /**  @hide The min height of the NumberPicker. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int internalMinHeight = 0x01010540;
        /**  @hide The min width of the NumberPicker. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int internalMinWidth = 0x01010542;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int interpolator = 0x01010141;
        /**  Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
             for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
             Defaults to false.
             
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isAlwaysSyncable = 0x01010333;
        /**  Set to true if this subtype is ASCII capable. If the subtype is ASCII
             capable, it should guarantee that the user can input ASCII characters with
             this subtype. This is important because many password fields only allow
             ASCII-characters. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isAsciiCapable = 0x010103e9;
        /**  Set true if the subtype is auxiliary.  An auxiliary subtype won't be shown in the
             input method selection list in the settings app.
             InputMethodManager#switchToLastInputMethod will ignore auxiliary subtypes when it
             chooses a target subtype. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isAuxiliary = 0x0101037f;
        /**  Set to true in all of the configurations for which this input
             method should be considered an option as the default. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isDefault = 0x01010221;
        /**  A boolean flag used to indicate if an application is a Game or not.
         <p>This information can be used by the system to group together
         applications that are classified as games, and display them separately
         from the other applications. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isGame = 0x010103f4;
        /**  Whether this rating bar is an indicator (and non-changeable by the user). 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isIndicator = 0x01010147;
        /**  Whether this is a modifier key such as Alt or Shift. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isModifier = 0x01010246;
        /**  Whether long-pressing on this key will make it repeat. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isRepeatable = 0x01010248;
        /**  Set this if the view will serve as a scrolling container, meaing
             that it can be resized to shrink its overall window so that there
             will be space for an input method.  If not set, the default
             value will be true if "scrollbars" has the vertical scrollbar
             set, else it will be false. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isScrollContainer = 0x0101024e;
        /**  Whether this is a toggle key. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isSticky = 0x01010247;
        /**  If set to true, this service will run under a special process
             that is isolated from the rest of the system.  The only communication
             with it is through the Service API (binding and starting). 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int isolatedProcess = 0x010103a9;
        /**  Default background for each menu item. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int itemBackground = 0x01010130;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int itemColor = 0x0101057f;
        /**  Default disabled icon alpha for each menu item that shows an icon. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int itemIconDisabledAlpha = 0x01010131;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int itemLayout = 0x0101057e;
        /**  Specifies padding that should be applied to the left and right sides of
             system-provided items in the bar. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int itemPadding = 0x0101032d;
        /**  Default appearance of menu item text. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int itemTextAppearance = 0x0101012c;
        /**  Controls whether the view's window should keep the screen on
             while visible. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int keepScreenOn = 0x01010216;
        /**  The key to store the Preference value. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int key = 0x010101e8;
        /**  Image for the key. This image needs to be a StateListDrawable, with the following
             possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
             checkable+checked+pressed. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int keyBackground = 0x01010233;
        /**  Key edge flags. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>left</code></td><td>1</td><td> Key is anchored to the left of the keyboard. </td></tr>
<tr><td><code>right</code></td><td>2</td><td> Key is anchored to the right of the keyboard. </td></tr>
</table>
         */
        public: static const int keyEdgeFlags = 0x01010245;
        /**  Default height of a key, in pixels or percentage of display width. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int keyHeight = 0x0101023e;
        /**  The icon to display on the key instead of the label. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int keyIcon = 0x0101024c;
        /**  The label to display on the key. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int keyLabel = 0x0101024b;
        /**  The string of characters to output when this key is pressed. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int keyOutputText = 0x0101024a;
        /**  Height of the key press feedback popup. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int keyPreviewHeight = 0x01010239;
        /**  Layout resource for key press feedback.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int keyPreviewLayout = 0x01010237;
        /**  Vertical offset of the key press feedback from the key. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int keyPreviewOffset = 0x01010238;
        /**  Groups signing keys into a {@code KeySet} for easier reference in
            other APIs. However, currently no APIs use this. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
         */
        public: static const int keySet = 0x010103db;
        /**  Color to use for the label in a key. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int keyTextColor = 0x01010236;
        /**  Size of the text for character keys. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int keyTextSize = 0x01010234;
        /**  Default width of a key, in pixels or percentage of display width. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int keyWidth = 0x0101023d;
        /**  The key character map file resource. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int keyboardLayout = 0x010103ab;
        /**  Mode of the keyboard. If the mode doesn't match the
             requested keyboard mode, the row will be skipped. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int keyboardMode = 0x0101024d;
        /**  Default KeyboardView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int keyboardViewStyle = 0x0101054e;
        /**  This enum provides the same keycode values as can be found in
        {@link android.view.KeyEvent}. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>KEYCODE_UNKNOWN</code></td><td>0</td><td></td></tr>
<tr><td><code>KEYCODE_SOFT_LEFT</code></td><td>1</td><td></td></tr>
<tr><td><code>KEYCODE_SOFT_RIGHT</code></td><td>2</td><td></td></tr>
<tr><td><code>KEYCODE_HOME</code></td><td>3</td><td></td></tr>
<tr><td><code>KEYCODE_BACK</code></td><td>4</td><td></td></tr>
<tr><td><code>KEYCODE_CALL</code></td><td>5</td><td></td></tr>
<tr><td><code>KEYCODE_ENDCALL</code></td><td>6</td><td></td></tr>
<tr><td><code>KEYCODE_0</code></td><td>7</td><td></td></tr>
<tr><td><code>KEYCODE_1</code></td><td>8</td><td></td></tr>
<tr><td><code>KEYCODE_2</code></td><td>9</td><td></td></tr>
<tr><td><code>KEYCODE_3</code></td><td>10</td><td></td></tr>
<tr><td><code>KEYCODE_4</code></td><td>11</td><td></td></tr>
<tr><td><code>KEYCODE_5</code></td><td>12</td><td></td></tr>
<tr><td><code>KEYCODE_6</code></td><td>13</td><td></td></tr>
<tr><td><code>KEYCODE_7</code></td><td>14</td><td></td></tr>
<tr><td><code>KEYCODE_8</code></td><td>15</td><td></td></tr>
<tr><td><code>KEYCODE_9</code></td><td>16</td><td></td></tr>
<tr><td><code>KEYCODE_STAR</code></td><td>17</td><td></td></tr>
<tr><td><code>KEYCODE_POUND</code></td><td>18</td><td></td></tr>
<tr><td><code>KEYCODE_DPAD_UP</code></td><td>19</td><td></td></tr>
<tr><td><code>KEYCODE_DPAD_DOWN</code></td><td>20</td><td></td></tr>
<tr><td><code>KEYCODE_DPAD_LEFT</code></td><td>21</td><td></td></tr>
<tr><td><code>KEYCODE_DPAD_RIGHT</code></td><td>22</td><td></td></tr>
<tr><td><code>KEYCODE_DPAD_CENTER</code></td><td>23</td><td></td></tr>
<tr><td><code>KEYCODE_VOLUME_UP</code></td><td>24</td><td></td></tr>
<tr><td><code>KEYCODE_VOLUME_DOWN</code></td><td>25</td><td></td></tr>
<tr><td><code>KEYCODE_POWER</code></td><td>26</td><td></td></tr>
<tr><td><code>KEYCODE_CAMERA</code></td><td>27</td><td></td></tr>
<tr><td><code>KEYCODE_CLEAR</code></td><td>28</td><td></td></tr>
<tr><td><code>KEYCODE_A</code></td><td>29</td><td></td></tr>
<tr><td><code>KEYCODE_B</code></td><td>30</td><td></td></tr>
<tr><td><code>KEYCODE_C</code></td><td>31</td><td></td></tr>
<tr><td><code>KEYCODE_D</code></td><td>32</td><td></td></tr>
<tr><td><code>KEYCODE_E</code></td><td>33</td><td></td></tr>
<tr><td><code>KEYCODE_F</code></td><td>34</td><td></td></tr>
<tr><td><code>KEYCODE_G</code></td><td>35</td><td></td></tr>
<tr><td><code>KEYCODE_H</code></td><td>36</td><td></td></tr>
<tr><td><code>KEYCODE_I</code></td><td>37</td><td></td></tr>
<tr><td><code>KEYCODE_J</code></td><td>38</td><td></td></tr>
<tr><td><code>KEYCODE_K</code></td><td>39</td><td></td></tr>
<tr><td><code>KEYCODE_L</code></td><td>40</td><td></td></tr>
<tr><td><code>KEYCODE_M</code></td><td>41</td><td></td></tr>
<tr><td><code>KEYCODE_N</code></td><td>42</td><td></td></tr>
<tr><td><code>KEYCODE_O</code></td><td>43</td><td></td></tr>
<tr><td><code>KEYCODE_P</code></td><td>44</td><td></td></tr>
<tr><td><code>KEYCODE_Q</code></td><td>45</td><td></td></tr>
<tr><td><code>KEYCODE_R</code></td><td>46</td><td></td></tr>
<tr><td><code>KEYCODE_S</code></td><td>47</td><td></td></tr>
<tr><td><code>KEYCODE_T</code></td><td>48</td><td></td></tr>
<tr><td><code>KEYCODE_U</code></td><td>49</td><td></td></tr>
<tr><td><code>KEYCODE_V</code></td><td>50</td><td></td></tr>
<tr><td><code>KEYCODE_W</code></td><td>51</td><td></td></tr>
<tr><td><code>KEYCODE_X</code></td><td>52</td><td></td></tr>
<tr><td><code>KEYCODE_Y</code></td><td>53</td><td></td></tr>
<tr><td><code>KEYCODE_Z</code></td><td>54</td><td></td></tr>
<tr><td><code>KEYCODE_COMMA</code></td><td>55</td><td></td></tr>
<tr><td><code>KEYCODE_PERIOD</code></td><td>56</td><td></td></tr>
<tr><td><code>KEYCODE_ALT_LEFT</code></td><td>57</td><td></td></tr>
<tr><td><code>KEYCODE_ALT_RIGHT</code></td><td>58</td><td></td></tr>
<tr><td><code>KEYCODE_SHIFT_LEFT</code></td><td>59</td><td></td></tr>
<tr><td><code>KEYCODE_SHIFT_RIGHT</code></td><td>60</td><td></td></tr>
<tr><td><code>KEYCODE_TAB</code></td><td>61</td><td></td></tr>
<tr><td><code>KEYCODE_SPACE</code></td><td>62</td><td></td></tr>
<tr><td><code>KEYCODE_SYM</code></td><td>63</td><td></td></tr>
<tr><td><code>KEYCODE_EXPLORER</code></td><td>64</td><td></td></tr>
<tr><td><code>KEYCODE_ENVELOPE</code></td><td>65</td><td></td></tr>
<tr><td><code>KEYCODE_ENTER</code></td><td>66</td><td></td></tr>
<tr><td><code>KEYCODE_DEL</code></td><td>67</td><td></td></tr>
<tr><td><code>KEYCODE_GRAVE</code></td><td>68</td><td></td></tr>
<tr><td><code>KEYCODE_MINUS</code></td><td>69</td><td></td></tr>
<tr><td><code>KEYCODE_EQUALS</code></td><td>70</td><td></td></tr>
<tr><td><code>KEYCODE_LEFT_BRACKET</code></td><td>71</td><td></td></tr>
<tr><td><code>KEYCODE_RIGHT_BRACKET</code></td><td>72</td><td></td></tr>
<tr><td><code>KEYCODE_BACKSLASH</code></td><td>73</td><td></td></tr>
<tr><td><code>KEYCODE_SEMICOLON</code></td><td>74</td><td></td></tr>
<tr><td><code>KEYCODE_APOSTROPHE</code></td><td>75</td><td></td></tr>
<tr><td><code>KEYCODE_SLASH</code></td><td>76</td><td></td></tr>
<tr><td><code>KEYCODE_AT</code></td><td>77</td><td></td></tr>
<tr><td><code>KEYCODE_NUM</code></td><td>78</td><td></td></tr>
<tr><td><code>KEYCODE_HEADSETHOOK</code></td><td>79</td><td></td></tr>
<tr><td><code>KEYCODE_FOCUS</code></td><td>80</td><td></td></tr>
<tr><td><code>KEYCODE_PLUS</code></td><td>81</td><td></td></tr>
<tr><td><code>KEYCODE_MENU</code></td><td>82</td><td></td></tr>
<tr><td><code>KEYCODE_NOTIFICATION</code></td><td>83</td><td></td></tr>
<tr><td><code>KEYCODE_SEARCH</code></td><td>84</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_PLAY_PAUSE</code></td><td>85</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_STOP</code></td><td>86</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_NEXT</code></td><td>87</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_PREVIOUS</code></td><td>88</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_REWIND</code></td><td>89</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_FAST_FORWARD</code></td><td>90</td><td></td></tr>
<tr><td><code>KEYCODE_MUTE</code></td><td>91</td><td></td></tr>
<tr><td><code>KEYCODE_PAGE_UP</code></td><td>92</td><td></td></tr>
<tr><td><code>KEYCODE_PAGE_DOWN</code></td><td>93</td><td></td></tr>
<tr><td><code>KEYCODE_PICTSYMBOLS</code></td><td>94</td><td></td></tr>
<tr><td><code>KEYCODE_SWITCH_CHARSET</code></td><td>95</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_A</code></td><td>96</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_B</code></td><td>97</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_C</code></td><td>98</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_X</code></td><td>99</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_Y</code></td><td>100</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_Z</code></td><td>101</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_L1</code></td><td>102</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_R1</code></td><td>103</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_L2</code></td><td>104</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_R2</code></td><td>105</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_THUMBL</code></td><td>106</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_THUMBR</code></td><td>107</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_START</code></td><td>108</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_SELECT</code></td><td>109</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_MODE</code></td><td>110</td><td></td></tr>
<tr><td><code>KEYCODE_ESCAPE</code></td><td>111</td><td></td></tr>
<tr><td><code>KEYCODE_FORWARD_DEL</code></td><td>112</td><td></td></tr>
<tr><td><code>KEYCODE_CTRL_LEFT</code></td><td>113</td><td></td></tr>
<tr><td><code>KEYCODE_CTRL_RIGHT</code></td><td>114</td><td></td></tr>
<tr><td><code>KEYCODE_CAPS_LOCK</code></td><td>115</td><td></td></tr>
<tr><td><code>KEYCODE_SCROLL_LOCK</code></td><td>116</td><td></td></tr>
<tr><td><code>KEYCODE_META_LEFT</code></td><td>117</td><td></td></tr>
<tr><td><code>KEYCODE_META_RIGHT</code></td><td>118</td><td></td></tr>
<tr><td><code>KEYCODE_FUNCTION</code></td><td>119</td><td></td></tr>
<tr><td><code>KEYCODE_SYSRQ</code></td><td>120</td><td></td></tr>
<tr><td><code>KEYCODE_BREAK</code></td><td>121</td><td></td></tr>
<tr><td><code>KEYCODE_MOVE_HOME</code></td><td>122</td><td></td></tr>
<tr><td><code>KEYCODE_MOVE_END</code></td><td>123</td><td></td></tr>
<tr><td><code>KEYCODE_INSERT</code></td><td>124</td><td></td></tr>
<tr><td><code>KEYCODE_FORWARD</code></td><td>125</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_PLAY</code></td><td>126</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_PAUSE</code></td><td>127</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_CLOSE</code></td><td>128</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_EJECT</code></td><td>129</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_RECORD</code></td><td>130</td><td></td></tr>
<tr><td><code>KEYCODE_F1</code></td><td>131</td><td></td></tr>
<tr><td><code>KEYCODE_F2</code></td><td>132</td><td></td></tr>
<tr><td><code>KEYCODE_F3</code></td><td>133</td><td></td></tr>
<tr><td><code>KEYCODE_F4</code></td><td>134</td><td></td></tr>
<tr><td><code>KEYCODE_F5</code></td><td>135</td><td></td></tr>
<tr><td><code>KEYCODE_F6</code></td><td>136</td><td></td></tr>
<tr><td><code>KEYCODE_F7</code></td><td>137</td><td></td></tr>
<tr><td><code>KEYCODE_F8</code></td><td>138</td><td></td></tr>
<tr><td><code>KEYCODE_F9</code></td><td>139</td><td></td></tr>
<tr><td><code>KEYCODE_F10</code></td><td>140</td><td></td></tr>
<tr><td><code>KEYCODE_F11</code></td><td>141</td><td></td></tr>
<tr><td><code>KEYCODE_F12</code></td><td>142</td><td></td></tr>
<tr><td><code>KEYCODE_NUM_LOCK</code></td><td>143</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_0</code></td><td>144</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_1</code></td><td>145</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_2</code></td><td>146</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_3</code></td><td>147</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_4</code></td><td>148</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_5</code></td><td>149</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_6</code></td><td>150</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_7</code></td><td>151</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_8</code></td><td>152</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_9</code></td><td>153</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_DIVIDE</code></td><td>154</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_MULTIPLY</code></td><td>155</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_SUBTRACT</code></td><td>156</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_ADD</code></td><td>157</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_DOT</code></td><td>158</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_COMMA</code></td><td>159</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_ENTER</code></td><td>160</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_EQUALS</code></td><td>161</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_LEFT_PAREN</code></td><td>162</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_RIGHT_PAREN</code></td><td>163</td><td></td></tr>
<tr><td><code>KEYCODE_VOLUME_MUTE</code></td><td>164</td><td></td></tr>
<tr><td><code>KEYCODE_INFO</code></td><td>165</td><td></td></tr>
<tr><td><code>KEYCODE_CHANNEL_UP</code></td><td>166</td><td></td></tr>
<tr><td><code>KEYCODE_CHANNEL_DOWN</code></td><td>167</td><td></td></tr>
<tr><td><code>KEYCODE_ZOOM_IN</code></td><td>168</td><td></td></tr>
<tr><td><code>KEYCODE_ZOOM_OUT</code></td><td>169</td><td></td></tr>
<tr><td><code>KEYCODE_TV</code></td><td>170</td><td></td></tr>
<tr><td><code>KEYCODE_WINDOW</code></td><td>171</td><td></td></tr>
<tr><td><code>KEYCODE_GUIDE</code></td><td>172</td><td></td></tr>
<tr><td><code>KEYCODE_DVR</code></td><td>173</td><td></td></tr>
<tr><td><code>KEYCODE_BOOKMARK</code></td><td>174</td><td></td></tr>
<tr><td><code>KEYCODE_CAPTIONS</code></td><td>175</td><td></td></tr>
<tr><td><code>KEYCODE_SETTINGS</code></td><td>176</td><td></td></tr>
<tr><td><code>KEYCODE_TV_POWER</code></td><td>177</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT</code></td><td>178</td><td></td></tr>
<tr><td><code>KEYCODE_STB_POWER</code></td><td>179</td><td></td></tr>
<tr><td><code>KEYCODE_STB_INPUT</code></td><td>180</td><td></td></tr>
<tr><td><code>KEYCODE_AVR_POWER</code></td><td>181</td><td></td></tr>
<tr><td><code>KEYCODE_AVR_INPUT</code></td><td>182</td><td></td></tr>
<tr><td><code>KEYCODE_PROG_GRED</code></td><td>183</td><td></td></tr>
<tr><td><code>KEYCODE_PROG_GREEN</code></td><td>184</td><td></td></tr>
<tr><td><code>KEYCODE_PROG_YELLOW</code></td><td>185</td><td></td></tr>
<tr><td><code>KEYCODE_PROG_BLUE</code></td><td>186</td><td></td></tr>
<tr><td><code>KEYCODE_APP_SWITCH</code></td><td>187</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_1</code></td><td>188</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_2</code></td><td>189</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_3</code></td><td>190</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_4</code></td><td>191</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_5</code></td><td>192</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_6</code></td><td>193</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_7</code></td><td>194</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_8</code></td><td>195</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_9</code></td><td>196</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_10</code></td><td>197</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_11</code></td><td>198</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_12</code></td><td>199</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_13</code></td><td>200</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_14</code></td><td>201</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_15</code></td><td>202</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_16</code></td><td>203</td><td></td></tr>
<tr><td><code>KEYCODE_LANGUAGE_SWITCH</code></td><td>204</td><td></td></tr>
<tr><td><code>KEYCODE_MANNER_MODE</code></td><td>205</td><td></td></tr>
<tr><td><code>KEYCODE_3D_MODE</code></td><td>206</td><td></td></tr>
<tr><td><code>KEYCODE_CONTACTS</code></td><td>207</td><td></td></tr>
<tr><td><code>KEYCODE_CALENDAR</code></td><td>208</td><td></td></tr>
<tr><td><code>KEYCODE_MUSIC</code></td><td>209</td><td></td></tr>
<tr><td><code>KEYCODE_CALCULATOR</code></td><td>210</td><td></td></tr>
<tr><td><code>KEYCODE_ZENKAKU_HANKAKU</code></td><td>211</td><td></td></tr>
<tr><td><code>KEYCODE_EISU</code></td><td>212</td><td></td></tr>
<tr><td><code>KEYCODE_MUHENKAN</code></td><td>213</td><td></td></tr>
<tr><td><code>KEYCODE_HENKAN</code></td><td>214</td><td></td></tr>
<tr><td><code>KEYCODE_KATAKANA_HIRAGANA</code></td><td>215</td><td></td></tr>
<tr><td><code>KEYCODE_YEN</code></td><td>216</td><td></td></tr>
<tr><td><code>KEYCODE_RO</code></td><td>217</td><td></td></tr>
<tr><td><code>KEYCODE_KANA</code></td><td>218</td><td></td></tr>
<tr><td><code>KEYCODE_ASSIST</code></td><td>219</td><td></td></tr>
<tr><td><code>KEYCODE_BRIGHTNESS_DOWN</code></td><td>220</td><td></td></tr>
<tr><td><code>KEYCODE_BRIGHTNESS_UP</code></td><td>221</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_AUDIO_TRACK</code></td><td>222</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_SLEEP</code></td><td>223</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_WAKEUP</code></td><td>224</td><td></td></tr>
<tr><td><code>KEYCODE_PAIRING</code></td><td>225</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_TOP_MENU</code></td><td>226</td><td></td></tr>
<tr><td><code>KEYCODE_11</code></td><td>227</td><td></td></tr>
<tr><td><code>KEYCODE_12</code></td><td>228</td><td></td></tr>
<tr><td><code>KEYCODE_LAST_CHANNEL</code></td><td>229</td><td></td></tr>
<tr><td><code>KEYCODE_TV_DATA_SERVICE</code></td><td>230</td><td></td></tr>
<tr><td><code>KEYCODE_VOICE_ASSIST</code></td><td>231</td><td></td></tr>
<tr><td><code>KEYCODE_TV_RADIO_SERVICE</code></td><td>232</td><td></td></tr>
<tr><td><code>KEYCODE_TV_TELETEXT</code></td><td>233</td><td></td></tr>
<tr><td><code>KEYCODE_TV_NUMBER_ENTRY</code></td><td>234</td><td></td></tr>
<tr><td><code>KEYCODE_TV_TERRESTRIAL_ANALOG</code></td><td>235</td><td></td></tr>
<tr><td><code>KEYCODE_TV_TERRESTRIAL_DIGITAL</code></td><td>236</td><td></td></tr>
<tr><td><code>KEYCODE_TV_SATELLITE</code></td><td>237</td><td></td></tr>
<tr><td><code>KEYCODE_TV_SATELLITE_BS</code></td><td>238</td><td></td></tr>
<tr><td><code>KEYCODE_TV_SATELLITE_CS</code></td><td>239</td><td></td></tr>
<tr><td><code>KEYCODE_TV_SATELLITE_SERVICE</code></td><td>240</td><td></td></tr>
<tr><td><code>KEYCODE_TV_NETWORK</code></td><td>241</td><td></td></tr>
<tr><td><code>KEYCODE_TV_ANTENNA_CABLE</code></td><td>242</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_HDMI_1</code></td><td>243</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_HDMI_2</code></td><td>244</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_HDMI_3</code></td><td>245</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_HDMI_4</code></td><td>246</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_COMPOSITE_1</code></td><td>247</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_COMPOSITE_2</code></td><td>248</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_COMPONENT_1</code></td><td>249</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_COMPONENT_2</code></td><td>250</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_VGA_1</code></td><td>251</td><td></td></tr>
<tr><td><code>KEYCODE_TV_AUDIO_DESCRIPTION</code></td><td>252</td><td></td></tr>
<tr><td><code>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP</code></td><td>253</td><td></td></tr>
<tr><td><code>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN</code></td><td>254</td><td></td></tr>
<tr><td><code>KEYCODE_TV_ZOOM_MODE</code></td><td>255</td><td></td></tr>
<tr><td><code>KEYCODE_TV_CONTENTS_MENU</code></td><td>256</td><td></td></tr>
<tr><td><code>KEYCODE_TV_MEDIA_CONTEXT_MENU</code></td><td>257</td><td></td></tr>
<tr><td><code>KEYCODE_TV_TIMER_PROGRAMMING</code></td><td>258</td><td></td></tr>
<tr><td><code>KEYCODE_HELP</code></td><td>259</td><td></td></tr>
</table>
         */
        public: static const int keycode = 0x010100c5;
        /**  Whether the application in question should be terminated after its
         settings have been restored during a full-system restore operation.
         Single-package restore operations will never cause the application to
         be shut down.  Full-system restore operations typically only occur once,
         when the phone is first set up.  Third-party applications will not usually
         need to use this attribute.

         <p>The default is <code>true</code>, which means that after the application
         has finished processing its data during a full-system restore, it will be
         terminated. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int killAfterRestore = 0x0101029c;
        /**  A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
         */
        public: static const int label = 0x01010001;
        /**  Specifies the id of a view for which this view serves as a label for
             accessibility purposes. For example, a TextView before an EditText in
             the UI usually specifies what infomation is contained in the EditText.
             Hence, the TextView is a label for the EditText. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int labelFor = 0x010103c6;
        /**  Size of the text for custom keys with some text and no icon. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int labelTextSize = 0x01010235;
        /**  Request that your application's processes be created with
             a large Dalvik heap.  This applies to <em>all</em> processes
             created for the application.  It only applies to the first
             application loaded into a process; if using a sharedUserId
             to allow multiple applications to use a process, they all must
             use this option consistently or will get unpredictable results. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int largeHeap = 0x0101035a;
        /**  Indicates whether the application supports larger screen form-factors.
             A large screen is defined as a screen that is significantly larger
             than a normal phone screen, and thus may require some special care
             on the application's part to make good use of it.  An example would
             be a VGA <em>normal density</em> screen, though even larger screens
             are certainly possible.  An application that does not support
             large screens will be placed as a postage stamp on such a
             screen, so that it retains the dimensions it was originally
             designed for. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int largeScreens = 0x01010286;
        /**  Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
             this is the new way to specify the screens an application is
             compatible with.  This attribute provides the maximum
             "smallest screen width" (as per the -swNNNdp resource configuration)
             that the application can work well on.  If this value is smaller than
             the "smallest screen width" of the device it is running on, the
             application will be forced in to screen compatibility mode with
             no way for the user to turn it off. Currently the compatibility mode only
             emulates phone screens with a 320dp width, so compatibility mode is not applied if the
             value for largestWidthLimitDp is larger than 320. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int largestWidthLimitDp = 0x01010366;
        /**  Specify how an activity should be launched.  See the
         <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
         Stack</a> document for important information on how these options impact
         the behavior of your application.
         
         <p>If this attribute is not specified, <code>standard</code> launch
         mode will be used.  Note that the particular launch behavior can
         be changed in some ways at runtime through the
         {@link android.content.Intent} flags
         {@link android.content.Intent#FLAG_ACTIVITY_SINGLE_TOP},
         {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK}, and
         {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK}. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>standard</code></td><td>0</td><td> The default mode, which will usually create a new instance of
             the activity when it is started, though this behavior may change
             with the introduction of other options such as
             {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
             Intent.FLAG_ACTIVITY_NEW_TASK}. </td></tr>
<tr><td><code>singleTop</code></td><td>1</td><td> If, when starting the activity, there is already an
            instance of the same activity class in the foreground that is
            interacting with the user, then
            re-use that instance.  This existing instance will receive a call to
            {@link android.app.Activity#onNewIntent Activity.onNewIntent()} with
            the new Intent that is being started. </td></tr>
<tr><td><code>singleTask</code></td><td>2</td><td> If, when starting the activity, there is already a task running
            that starts with this activity, then instead of starting a new
            instance the current task is brought to the front.  The existing
            instance will receive a call to {@link android.app.Activity#onNewIntent
            Activity.onNewIntent()}
            with the new Intent that is being started, and with the
            {@link android.content.Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT
            Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT} flag set.  This is a superset
            of the singleTop mode, where if there is already an instance
            of the activity being started at the top of the stack, it will
            receive the Intent as described there (without the
            FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set).  See the
            <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
            Stack</a> document for more details about tasks.</td></tr>
<tr><td><code>singleInstance</code></td><td>3</td><td> Only allow one instance of this activity to ever be 
            running.  This activity gets a unique task with only itself running 
            in it; if it is ever launched again with the same Intent, then that 
            task will be brought forward and its 
            {@link android.app.Activity#onNewIntent Activity.onNewIntent()}
            method called.  If this 
            activity tries to start a new activity, that new activity will be 
            launched in a separate task.  See the
            <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
            Stack</a> document for more details about tasks.</td></tr>
</table>
         */
        public: static const int launchMode = 0x0101001d;
        /**   When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
              this is the animation that is run on the activity of the old task (which is
              already on the screen and then stays on). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int launchTaskBehindSourceAnimation = 0x01010492;
        /**   When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
              this is the animation that is run on the activity of the new task (which is
              entering the screen and then leaving). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int launchTaskBehindTargetAnimation = 0x01010491;
        /**  Specifies the type of layer backing this view. The default value is none.
             Refer to {@link android.view.View#setLayerType(int, android.graphics.Paint)}
             for more information.
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Don't use a layer. </td></tr>
<tr><td><code>software</code></td><td>1</td><td> Use a software layer. Refer to
                 {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
                 more information. </td></tr>
<tr><td><code>hardware</code></td><td>2</td><td> Use a hardware layer. Refer to
                 {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
                 more information. </td></tr>
</table>
         */
        public: static const int layerType = 0x01010354;
        /**  Supply an identifier for the layout resource to inflate when the ViewStub
             becomes visible or when forced to do so. The layout resource must be a
             valid reference to a layout. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout = 0x010100f2;
        /**  Defines the layout animation to use the first time the ViewGroup is laid out.
             Layout animations can also be started manually after the first layout. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layoutAnimation = 0x010100ec;
        /**  Defines the direction of layout drawing. This typically is associated with writing
             direction of the language script used. The possible values are "ltr" for Left-to-Right,
             "rtl" for Right-to-Left, "locale" and "inherit" from parent view. If there is nothing
             to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
             used in "en-US". The default for this attribute is "inherit". 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>ltr</code></td><td>0</td><td> Left-to-Right </td></tr>
<tr><td><code>rtl</code></td><td>1</td><td> Right-to-Left </td></tr>
<tr><td><code>inherit</code></td><td>2</td><td> Inherit from parent </td></tr>
<tr><td><code>locale</code></td><td>3</td><td> Locale </td></tr>
</table>
         */
        public: static const int layoutDirection = 0x010103b2;
        /**  Defines the layout mode of this ViewGroup. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>clipBounds</code></td><td>0</td><td> Use the children's clip bounds when laying out this container. </td></tr>
<tr><td><code>opticalBounds</code></td><td>1</td><td> Use the children's optical bounds when laying out this container. </td></tr>
</table>
         */
        public: static const int layoutMode = 0x010103da;
        /**  Positions the bottom edge of this view above the given anchor view ID.
            Accommodates bottom margin of this view and top margin of anchor view. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_above = 0x01010184;
        /**  Positions the baseline of this view on the baseline of the given anchor view ID. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_alignBaseline = 0x01010186;
        /**  Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
            Accommodates bottom margin. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_alignBottom = 0x0101018a;
        /**  Makes the end edge of this view match the end edge of the given anchor view ID.
            Accommodates end margin. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_alignEnd = 0x010103ba;
        /**  Makes the left edge of this view match the left edge of the given anchor view ID.
            Accommodates left margin. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_alignLeft = 0x01010187;
        /**  If true, makes the bottom edge of this view match the bottom edge of the parent.
            Accommodates bottom margin. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_alignParentBottom = 0x0101018e;
        /**  If true, makes the end edge of this view match the end edge of the parent.
            Accommodates end margin. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_alignParentEnd = 0x010103bc;
        /**  If true, makes the left edge of this view match the left edge of the parent.
            Accommodates left margin. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_alignParentLeft = 0x0101018b;
        /**  If true, makes the right edge of this view match the right edge of the parent.
            Accommodates right margin. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_alignParentRight = 0x0101018d;
        /**  If true, makes the start edge of this view match the start edge of the parent.
            Accommodates start margin. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_alignParentStart = 0x010103bb;
        /**  If true, makes the top edge of this view match the top edge of the parent.
            Accommodates top margin. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_alignParentTop = 0x0101018c;
        /**  Makes the right edge of this view match the right edge of the given anchor view ID.
            Accommodates right margin. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_alignRight = 0x01010189;
        /**  Makes the start edge of this view match the start edge of the given anchor view ID.
            Accommodates start margin. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_alignStart = 0x010103b9;
        /**  Makes the top edge of this view match the top edge of the given anchor view ID.
            Accommodates top margin. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_alignTop = 0x01010188;
        /**  If set to true, the parent will be used as the anchor when the anchor cannot be
             be found for layout_toLeftOf, layout_toRightOf, etc. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_alignWithParentIfMissing = 0x01010192;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_alwaysShow = 0x0101058d;
        /**  Positions the top edge of this view below the given anchor view ID.
            Accommodates top margin of this view and bottom margin of anchor view. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_below = 0x01010185;
        /**  If true, centers this child horizontally within its parent. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_centerHorizontal = 0x01010190;
        /**  If true, centers this child horizontally and vertically within its parent. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_centerInParent = 0x0101018f;
        /**  If true, centers this child vertically within its parent. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_centerVertical = 0x01010191;
        /**  Percentage of the screen this child should consume or center within.
             If 0/default, the view will be measured by standard rules
             as if this were a FrameLayout. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_centerWithinArea = 0x01010580;
        /**  Some child types have special behavior. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> No special behavior. Layout will proceed as normal. </td></tr>
<tr><td><code>widget</code></td><td>1</td><td> Widget container.
             This will be resized in response to certain events. </td></tr>
<tr><td><code>challenge</code></td><td>2</td><td> Security challenge container.
             This will be dismissed/shown in response to certain events,
             possibly obscuring widget elements. </td></tr>
<tr><td><code>userSwitcher</code></td><td>3</td><td> User switcher.
             This will consume space from the total layout area. </td></tr>
<tr><td><code>scrim</code></td><td>4</td><td> Scrim. This will block access to child views that
             come before it in the child list in bouncer mode. </td></tr>
<tr><td><code>widgets</code></td><td>5</td><td> The home for widgets. All widgets will be descendents of this. </td></tr>
<tr><td><code>expandChallengeHandle</code></td><td>6</td><td> This is a handle that is used for expanding the
             security challenge container when it is collapsed. </td></tr>
<tr><td><code>pageDeleteDropTarget</code></td><td>7</td><td> Delete drop target.  This will be the drop target to delete pages. </td></tr>
</table>
         */
        public: static const int layout_childType = 0x0101057d;
        /**  The index of the column in which this child should be. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_column = 0x0101014c;
        /**  The column span: the difference between the right and left
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_columnSpan = 0x0101037d;
        /**  The relative proportion of horizontal space that should be allocated to this view
        during excess space distribution. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_columnWeight = 0x01010459;
        /**  Standard gravity constant that a child supplies to its parent.
         Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
         */
        public: static const int layout_gravity = 0x010100b3;
        /**  Specifies the basic height of the view.  This is a required attribute
             for any view inside of a containing layout manager.  Its value may
             be a dimension (such as "12dip") for a constant height or one of
             the special constants. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
</table>
         */
        public: static const int layout_height = 0x010100f5;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_ignoreOffset = 0x0101058e;
        /**   Specifies extra space on the left, top, right and bottom
              sides of this view. This space is outside this view's bounds. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_margin = 0x010100f6;
        /**   Specifies extra space on the bottom side of this view.
              This space is outside this view's bounds. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_marginBottom = 0x010100fa;
        /**   Specifies extra space on the end side of this view.
              This space is outside this view's bounds. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_marginEnd = 0x010103b6;
        /**   Specifies extra space on the left side of this view.
              This space is outside this view's bounds. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_marginLeft = 0x010100f7;
        /**   Specifies extra space on the right side of this view.
              This space is outside this view's bounds. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_marginRight = 0x010100f9;
        /**   Specifies extra space on the start side of this view.
              This space is outside this view's bounds. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_marginStart = 0x010103b5;
        /**   Specifies extra space on the top side of this view.
              This space is outside this view's bounds. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_marginTop = 0x010100f8;
        /**  The maximum valid height for this item. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>unbounded</code></td><td>-1</td><td> Indicates that the view may be resized arbitrarily large. </td></tr>
</table>
         */
        public: static const int layout_maxHeight = 0x0101055c;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_maxWidth = 0x01010581;
        /**  The minimum valid height for this item. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_minHeight = 0x0101055d;
        /**  Padding to use at the top of the prefs content. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_removeBorders = 0x0101052e;
        /**  The row boundary delimiting the top of the group of cells
        occupied by this view. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_row = 0x0101037b;
        /**  The row span: the difference between the top and bottom
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_rowSpan = 0x0101037c;
        /**  The relative proportion of vertical space that should be allocated to this view
        during excess space distribution. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_rowWeight = 0x01010458;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_scale = 0x01010193;
        /**  Defines how many columns this child should span.  Must be >= 1.
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_span = 0x0101014d;
        /**  Positions the start edge of this view to the end of the given anchor view ID.
             Accommodates start margin of this view and end margin of anchor view. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_toEndOf = 0x010103b8;
        /**  Positions the right edge of this view to the left of the given anchor view ID.
             Accommodates right margin of this view and left margin of anchor view. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_toLeftOf = 0x01010182;
        /**  Positions the left edge of this view to the right of the given anchor view ID.
            Accommodates left margin of this view and right margin of anchor view. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_toRightOf = 0x01010183;
        /**  Positions the end edge of this view to the start of the given anchor view ID.
             Accommodates end margin of this view and start margin of anchor view. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int layout_toStartOf = 0x010103b7;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_weight = 0x01010181;
        /**  Specifies the basic width of the view.  This is a required attribute
             for any view inside of a containing layout manager.  Its value may
             be a dimension (such as "12dip") for a constant width or one of
             the special constants. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
</table>
         */
        public: static const int layout_width = 0x010100f4;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_x = 0x0101017f;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int layout_y = 0x01010180;
        /**  Amount of left padding inside the gradient shape. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int left = 0x010101ad;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int leftToRight = 0x0101057c;
        /**  @hide The layout of the legacy time picker. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int legacyLayout = 0x01010546;
        /**  Text letter-spacing. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int letterSpacing = 0x010104b6;
        /**  @hide The default radius of the light used to project view shadows. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int lightRadius = 0x01010512;
        /**  @hide The default Y position of the light used to project view shadows. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int lightY = 0x01010510;
        /**  @hide The default Z position of the light used to project view shadows. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int lightZ = 0x01010511;
        /**  Extra spacing between lines of text. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int lineSpacingExtra = 0x01010217;
        /**  Extra spacing between lines of text, as a multiplier. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int lineSpacingMultiplier = 0x01010218;
        /**  Makes the TextView be exactly this many lines tall. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int lines = 0x01010154;
        /**  If set to false, keeps the movement method from being set
             to the link movement method even if autoLink causes links
             to be found. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int linksClickable = 0x010100b1;
        /**  Drawable used as a background for selected list items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listChoiceBackgroundIndicator = 0x010102f0;
        /**  Drawable to use for multiple choice indicators. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listChoiceIndicatorMultiple = 0x0101021a;
        /**  Drawable to use for single choice indicators. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listChoiceIndicatorSingle = 0x01010219;
        /**  The drawable for the list divider. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listDivider = 0x01010214;
        /**  The list divider used in alert dialogs. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listDividerAlertDialog = 0x01010305;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listItemLayout = 0x0101051c;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listLayout = 0x01010519;
        /**  Default ListPopupWindow style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listPopupWindowStyle = 0x010102ff;
        /**  The preferred list item height. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int listPreferredItemHeight = 0x0101004d;
        /**  A larger, more robust list item height. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int listPreferredItemHeightLarge = 0x01010386;
        /**  A smaller, sleeker list item height. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int listPreferredItemHeightSmall = 0x01010387;
        /**  The preferred padding along the end edge of list items. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int listPreferredItemPaddingEnd = 0x010103be;
        /**  The preferred padding along the left edge of list items. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int listPreferredItemPaddingLeft = 0x010103a3;
        /**  The preferred padding along the right edge of list items. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int listPreferredItemPaddingRight = 0x010103a4;
        /**  The preferred padding along the start edge of list items. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int listPreferredItemPaddingStart = 0x010103bd;
        /**  Drawable used to indicate the currently selected item in the list. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int listSelector = 0x010100fb;
        /**  TextView style for list separators. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listSeparatorTextViewStyle = 0x01010208;
        /**  Default ListView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listViewStyle = 0x01010074;
        /**  ListView with white background. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int listViewWhiteStyle = 0x01010075;
        /**  A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int logo = 0x010102be;
        /**  Defines whether this view reacts to long click events. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int longClickable = 0x010100e6;
        /** Defines whether the animator loops to the first view once it
        has reached the end of the list. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int loopViews = 0x01010307;
        /**  Causes targets to snap to the finger location on activation. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int magneticTargets = 0x0101055a;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int majorWeightMax = 0x0101053b;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int majorWeightMin = 0x01010539;
        /**  Name of the activity to be launched to manage application's space on
         device. The specified activity gets automatically launched when the
         application's space needs to be managed and is usually invoked 
         through user actions. Applications can thus provide their own custom
         behavior for managing space for various scenarios like out of memory
         conditions. This is an optional attribute and
         applications can choose not to specify a default activity to 
         manage space. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int manageSpaceActivity = 0x01010004;
        /**  Default MapView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int mapViewStyle = 0x0101008a;
        /**  The number of times to repeat the marquee animation. Only applied if the
             TextView has marquee enabled. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>marquee_forever</code></td><td>-1</td><td> Indicates that marquee should repeat indefinitely. </td></tr>
</table>
         */
        public: static const int marqueeRepeatLimit = 0x0101021d;
        /**  The match order to use for the transition. This is a comma-separated
             list of values, containing one or more of the following:
             id, itemId, name, instance. These correspond to
             {@link android.transition.Transition#MATCH_ID},
             {@link android.transition.Transition#MATCH_ITEM_ID},
             {@link android.transition.Transition#MATCH_NAME}, and
             {@link android.transition.Transition#MATCH_INSTANCE}, respectively.
             This corresponds to {@link android.transition.Transition#setMatchOrder(int...)}. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int matchOrder = 0x0101044f;
        /**  Defines the maximum value the progress can take. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int max = 0x01010136;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxButtonHeight = 0x01010587;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxCollapsedHeight = 0x0101058b;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxCollapsedHeightSmall = 0x0101058c;
        /**  The maximal date shown by this calendar view in mm/dd/yyyy format. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxDate = 0x01010340;
        /**  Makes the TextView be at most this many ems wide. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxEms = 0x01010157;
        /**  maximum file size for the volume in megabytes, zero or unspecified if it is unbounded 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxFileSize = 0x01010572;
        /**  An optional argument to supply a maximum height for this view.
             See {see android.widget.ImageView#setMaxHeight} for details. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxHeight = 0x01010120;
        /**  Defines the maximum number of items to show. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxItems = 0x01010530;
        /**  Defines the maximum number of items per row. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxItemsPerRow = 0x01010134;
        /**  Set an input filter to constrain the text length to the
             specified number. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxLength = 0x01010160;
        /**  The maximum level allowed for this item. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxLevel = 0x010101b2;
        /**  Makes the TextView be at most this many lines tall.

        When used on an editable text, the <code>inputType</code> attribute's value must be
        combined with the <code>textMultiLine</code> flag for the maxLines attribute to apply. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxLines = 0x01010153;
        /**  The maximum number of entries of tasks rooted at this activity in the recent task list.
         When this number of entries is reached the least recently used instance of this activity
         will be removed from recents. The value will be clamped between 1 and 100 inclusive.
         The default value for this if it is not specified is 15. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxRecents = 0x01010446;
        /**  Defines the maximum number of rows displayed. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxRows = 0x01010133;
        /**  Optional: specify the maximum version of the Android OS for which the
             application wishes to request the permission.  When running on a version
             of Android higher than the number given here, the permission will not
             be requested.  
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxSdkVersion = 0x01010271;
        /**  An optional argument to supply a maximum width for this view.
             See {see android.widget.ImageView#setMaxWidth} for details. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maxWidth = 0x0101011f;
        /**  The maximum arc angle in degrees between the start and end points. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int maximumAngle = 0x0101047f;
        /**  Determines whether to measure all children or just those in
             the VISIBLE or INVISIBLE state when measuring. Defaults to false. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int measureAllChildren = 0x0101010a;
        /**  When set to true, all children with a weight will be considered having
             the minimum size of the largest child. If false, all children are
             measured normally. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int measureWithLargestChild = 0x010102d4;
        /**  Default style for the MediaRouteButton widget. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int mediaRouteButtonStyle = 0x010103ad;
        /**  The types of media routes the button and its resulting
             chooser will filter by. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>liveAudio</code></td><td>0x1</td><td> Allow selection of live audio routes. </td></tr>
<tr><td><code>user</code></td><td>0x800000</td><td> Allow selection of user (app-specified) routes. </td></tr>
</table>
         */
        public: static const int mediaRouteTypes = 0x010103ae;
        /**  The category applied to all items within this group.
             (This will be or'ed with the orderInCategory attribute.) 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>container</code></td><td>0x00010000</td><td> Items are part of a container. </td></tr>
<tr><td><code>system</code></td><td>0x00020000</td><td> Items are provided by the system. </td></tr>
<tr><td><code>secondary</code></td><td>0x00030000</td><td> Items are user-supplied secondary (infrequently used). </td></tr>
<tr><td><code>alternative</code></td><td>0x00040000</td><td> Items are alternative actions. </td></tr>
</table>
         */
        public: static const int menuCategory = 0x010101de;
        /**  Specify a MIME type that is handled, as per
             {@link android.content.IntentFilter#addDataType
             IntentFilter.addDataType()}.
             <p><em>Note: MIME type matching in the Android framework is
             case-sensitive, unlike formal RFC MIME types.  As a result,
             MIME types here should always use lower case letters.</em></p> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int mimeType = 0x01010026;
        /**  The minimal date shown by this calendar view in mm/dd/yyyy format. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minDate = 0x0101033f;
        /**  Makes the TextView be at least this many ems wide. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minEms = 0x0101015a;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minHeight = 0x01010140;
        /**  The minimum level allowed for this item. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minLevel = 0x010101b1;
        /**  Makes the TextView be at least this many lines tall.

        When used on an editable text, the <code>inputType</code> attribute's value must be
        combined with the <code>textMultiLine</code> flag for the minLines attribute to apply. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minLines = 0x01010156;
        /**  Minimum height that the AppWidget can be resized to. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minResizeHeight = 0x01010396;
        /**  Minimum width that the AppWidget can be resized to. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minResizeWidth = 0x01010395;
        /**  This is the minimum SDK version number that the application
             requires.  This number is an abstract integer, from the list
             in {@link android.os.Build.VERSION_CODES}  If
             not supplied, the application will work on any SDK.  This
             may also be string (such as "Donut") if the application was built
             against a development branch, in which case it will only work against
             the development builds. 
         <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minSdkVersion = 0x0101020c;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minWidth = 0x0101013f;
        /**  The minimum arc angle in degrees between the start and end points when
             they are close to horizontal. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minimumHorizontalAngle = 0x0101047d;
        /**  The minimum arc angle in degrees between the start and end points when
             they are close to vertical. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minimumVerticalAngle = 0x0101047e;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minorWeightMax = 0x0101053c;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int minorWeightMin = 0x0101053a;
        /**  Enables or disables the mipmap hint. See
            {@link android.graphics.Bitmap#setHasMipMap(boolean)} for more information.
            Default value is false. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int mipMap = 0x010103cd;
        /**  Defines if the associated drawables need to be mirrored when in RTL mode.
             Default is false 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int mirrorForRtl = 0x010103ce;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>oneLine</code></td><td>1</td><td> Always show only the first line. </td></tr>
<tr><td><code>collapsing</code></td><td>2</td><td> When selected show both lines, otherwise show only the first line.
                 This is the default mode. </td></tr>
<tr><td><code>twoLine</code></td><td>3</td><td> Always show both lines. </td></tr>
</table>
         */
        public: static const int mode = 0x0101017e;
        /**  'More' icon. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int moreIcon = 0x01010135;
        /**  path to mount point for the storage 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int mountPoint = 0x0101056b;
        /**  number of megabytes of storage MTP should reserve for free storage
             (used for emulated storage that is shared with system's data partition) 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int mtpReserve = 0x01010570;
        /**  Declare that code from this application will need to be loaded into other
         applications' processes. On devices that support multiple instruction sets,
         this implies the code might be loaded into a process that's using any of the devices
         supported instruction sets.
         
         <p> The system might treat such applications specially, for eg., by
         extracting the application's native libraries for all supported instruction
         sets or by compiling the application's dex code for all supported instruction
         sets. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int multiArch = 0x0101048e;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int multiChoiceItemLayout = 0x0101051a;
        /**  Specify whether a component is allowed to have multiple instances
         of itself running in different processes.  Use with the activity
         and provider tags.
    
         <p>Normally the system will ensure that all instances of a particular
         component are only running in a single process.  You can use this
         attribute to disable that behavior, allowing the system to create
         instances wherever they are used (provided permissions allow it).
         This is most often used with content providers, so that instances
         of a provider can be created in each client process, allowing them
         to be used without performing IPC.  
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int multiprocess = 0x01010013;
        /**  A unique name for the given item.  This must use a Java-style naming
         convention to ensure the name is unique, for example
         "com.mycompany.MyName". 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int name = 0x01010003;
        /**  The color for the navigation bar. If the color is not opaque, consider setting
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.
             For this to take effect, the window must be drawing the system bar backgrounds with
             {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
             have been requested to be translucent with
             {@link android.R.attr#windowTranslucentNavigation}.
             Corresponds to {@link android.view.Window#setNavigationBarColor(int)}. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int navigationBarColor = 0x01010452;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int navigationButtonStyle = 0x01010588;
        /**  Text to set as the content description for the navigation button
             located at the start of the toolbar. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int navigationContentDescription = 0x010104c1;
        /**  Icon drawable to use for the navigation button located at
             the start of the toolbar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int navigationIcon = 0x010104c0;
        /**  The type of navigation to use. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> Normal static title text </td></tr>
<tr><td><code>listMode</code></td><td>1</td><td> The action bar will use a selection list for navigation. </td></tr>
<tr><td><code>tabMode</code></td><td>2</td><td> The action bar will use a series of horizontal tabs for navigation. </td></tr>
</table>
         */
        public: static const int navigationMode = 0x010102cf;
        /**  @hide Whether fullDark, etc. should use default values if null. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int needsDefaultBackgrounds = 0x0101051f;
        /**  The negative button text for the dialog. Set to @null to hide the negative button. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int negativeButtonText = 0x010101f6;
        /**  Specifies that this view should permit nested scrolling within a compatible
             ancestor view. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int nestedScrollingEnabled = 0x01010436;
        /**  Option to let applications specify that user data should
         never be encrypted if an Encrypted File System solution
         is enabled. Specifically, this is an "opt-out" feature, meaning
         that, by default, user data will be encrypted if the EFS feature
         is enabled. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int neverEncrypt = 0x0101058f;
        /**  Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_DOWN}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int nextFocusDown = 0x010100e4;
        /**  Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_FORWARD}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int nextFocusForward = 0x0101033c;
        /**  Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_LEFT}.

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int nextFocusLeft = 0x010100e1;
        /**  Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_RIGHT}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int nextFocusRight = 0x010100e2;
        /**  Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_UP}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int nextFocusUp = 0x010100e3;
        /**  Specify whether an activity should be kept in its history stack.
         If this attribute is set, then as soon as the user navigates away
         from the activity it will be finished and they will no longer be
         able to return to it. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int noHistory = 0x0101022d;
        /**  Indicates whether an application supports the normal screen
             form-factors.  Traditionally this is an HVGA normal density
             screen, but WQVGA low density and WVGA high density are also
             considered to be normal.  This attribute is true by default,
             and applications currently should leave it that way. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int normalScreens = 0x01010285;
        /**  The minimal period in milliseconds between two accessibility events of the same type
             are sent to this serivce. This setting can be changed at runtime by calling
             {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
             android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int notificationTimeout = 0x01010383;
        /**  Defines how many columns to show. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto_fit</code></td><td>-1</td><td> Display as many columns as possible to fill the available space. </td></tr>
</table>
         */
        public: static const int numColumns = 0x01010118;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int numDots = 0x0101057a;
        /**  The number of stars (or rating items) to show. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int numStars = 0x01010144;
        /**  NumberPicker style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int numberPickerStyle = 0x01010422;
        /**  The background color for the hours/minutes numbers. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int numbersBackgroundColor = 0x010104a2;
        /**  The color for the hours/minutes selector. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int numbersSelectorColor = 0x010104a3;
        /**  The color for the hours/minutes numbers. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int numbersTextColor = 0x010104a1;
        /**  If set, specifies that this TextView has a numeric input method.
             The default is false.
             {@deprecated Use inputType instead.} 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>integer</code></td><td>0x01</td><td> Input is numeric. </td></tr>
<tr><td><code>signed</code></td><td>0x03</td><td> Input is numeric, with sign allowed. </td></tr>
<tr><td><code>decimal</code></td><td>0x05</td><td> Input is numeric, with decimals allowed. </td></tr>
</table>
         */
        public: static const int numeric = 0x01010165;
        /**  The numeric shortcut key.  This is the shortcut when using a numeric (e.g., 12-key)
             keyboard. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int numericShortcut = 0x010101e4;
        /**  Name of the method in this View's context to invoke when the view is
             clicked. This name must correspond to a public method that takes
             exactly one parameter of type View. For instance, if you specify
             <code>android:onClick="sayHello"</code>, you must declare a
             <code>public void sayHello(View v)</code> method of your context
             (typically, your Activity). 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int onClick = 0x0101026f;
        /**  If true, the animation will only run a single time and then
             stop.  If false (the default), it will continually run,
             restarting at the first frame after the last has finished. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int oneshot = 0x01010197;
        /**  Indicates the opacity of the layer. This can be useful to allow the
              system to enable drawing optimizations. The default value is
              translucent. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>opaque</code></td><td>-1</td><td> Indicates that the layer is opaque and contains no transparent
                 nor translucent pixels. </td></tr>
<tr><td><code>transparent</code></td><td>-2</td><td> The layer is completely transparent (no pixel will be drawn.) </td></tr>
<tr><td><code>translucent</code></td><td>-3</td><td> The layer has translucent pixels. </td></tr>
</table>
         */
        public: static const int opacity = 0x0101031e;
        /**  The order for the Preference (lower values are to be ordered first). If this is not
             specified, the default orderin will be alphabetic. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int order = 0x010101ea;
        /**  The order within the category applied to all items within this group.
             (This will be or'ed with the category attribute.) 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int orderInCategory = 0x010101df;
        /**  Name of the property being animated. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>together</code></td><td>0</td><td> child animations should be played together. </td></tr>
<tr><td><code>sequentially</code></td><td>1</td><td> child animations should be played sequentially, in the same order as the xml. </td></tr>
</table>
         */
        public: static const int ordering = 0x010102e2;
        /**  Whether to order the Preference under this group as they appear in the XML file.
             If this is false, the ordering will follow the Preference order attribute and
             default to alphabetic for those without the order attribute. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int orderingFromXml = 0x010101e7;
        /**  Standard orientation constant. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
         */
        public: static const int orientation = 0x010100c4;
        /**  Identifier for the animation to use when a view is hidden. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int outAnimation = 0x01010178;
        /**  Outer radius of glow area. Target icons will be drawn on this circle. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int outerRadius = 0x01010553;
        /**  Drawable to use for wave ripple animation. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int outerRingDrawable = 0x01010551;
        /**  ViewOutlineProvider used to determine the View's Outline. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>background</code></td><td>0</td><td> Default, background drawable-driven outline. </td></tr>
<tr><td><code>none</code></td><td>1</td><td> No outline provider. </td></tr>
<tr><td><code>bounds</code></td><td>2</td><td> Generates an opaque outline for the bounds of the view. </td></tr>
<tr><td><code>paddedBounds</code></td><td>3</td><td> Generates an opaque outline for the padded bounds of the view. </td></tr>
</table>
         */
        public: static const int outlineProvider = 0x010104b8;
        /**  Drawable to draw below list content. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int overScrollFooter = 0x010102c3;
        /**  Drawable to draw above list content. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int overScrollHeader = 0x010102c2;
        /**  Defines over-scrolling behavior. This property is used only if the
             View is scrollable. Over-scrolling is the ability for the user to
             receive feedback when attempting to scroll beyond meaningful content. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>always</code></td><td>0</td><td> Always show over-scroll effects, even if the content fits entirely
                 within the available space. </td></tr>
<tr><td><code>ifContentScrolls</code></td><td>1</td><td> Only show over-scroll effects if the content is large
                 enough to meaningfully scroll. </td></tr>
<tr><td><code>never</code></td><td>2</td><td> Never show over-scroll effects. </td></tr>
</table>
         */
        public: static const int overScrollMode = 0x010102c1;
        /**  Whether the popup window should overlap its anchor view. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int overlapAnchor = 0x01010462;
        /**  Set true when this subtype should be selected by default if no other subtypes are
             selected explicitly. Note that a subtype with this parameter being true will
             not be shown in the subtypes list. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int overridesImplicitlyEnabledSubtype = 0x010103a2;
        /**  Comma separated package names from which this serivce would like to receive events (leave out for all packages).
             {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
             android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int packageNames = 0x01010381;
        /**  Sets the padding, in pixels, of all four edges.  Padding is defined as
             space between the edges of the view and the view's content. A views size
             will include it's padding.  If a {@link android.R.attr#background}
             is provided, the padding will initially be set to that (0 if the
             drawable does not have padding).  Explicitly setting a padding value
             will override the corresponding padding found in the background. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int padding = 0x010100d5;
        /**  Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int paddingBottom = 0x010100d9;
        /**  Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int paddingEnd = 0x010103b4;
        /**  Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int paddingLeft = 0x010100d6;
        /**  Indicates how layer padding should affect the bounds of subsequent layers.
             The default padding mode value is nest. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>nest</code></td><td>0</td><td> Nest each layer inside the padding of the previous layer. </td></tr>
<tr><td><code>stack</code></td><td>1</td><td> Stack each layer directly atop the previous layer. </td></tr>
</table>
         */
        public: static const int paddingMode = 0x01010457;
        /**  Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int paddingRight = 0x010100d8;
        /**  Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int paddingStart = 0x010103b3;
        /**  Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int paddingTop = 0x010100d7;
        /**  The space between adjacent pages of the PagedView. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pageSpacing = 0x01010576;
        /**  The background of a panel when it is inset from the left and right edges of the screen. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int panelBackground = 0x0101005e;
        /**  Color that matches (as closely as possible) the panel background. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int panelColorBackground = 0x01010061;
        /**  Default color of foreground panel imagery. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int panelColorForeground = 0x01010060;
        /**  The background of a panel when it extends to the left and right edges of the screen. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int panelFullBackground = 0x0101005f;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int panelMenuIsCompact = 0x0101041c;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int panelMenuListTheme = 0x0101041e;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int panelMenuListWidth = 0x0101041d;
        /**  Default appearance of panel text. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int panelTextAppearance = 0x01010062;
        /**  The name of the logical parent of the activity as it appears in the manifest. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int parentActivityName = 0x010103a7;
        /**  Whether the characters of the field are displayed as
             password dots instead of themselves.
             {@deprecated Use inputType instead.} 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int password = 0x0101015c;
        /**  Specify a URI path that must exactly match, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_LITERAL}. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int path = 0x0101002a;
        /**  Color to use when drawing LockPatternView paths. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int pathColor = 0x0101055f;
        /**  The specification of the operations that define the path  
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pathData = 0x01010405;
        /**  Specify a URI path that matches a simple pattern, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}. 
             Note that because '\' is used as an escape character when
             reading the string from XML (before it is parsed as a pattern),
             you will need to double-escape: for example a literal "*" would
             be written as "\\*" and a literal "\" would be written as
             "\\\\".  This is basically the same as what you would need to
             write if constructing the string in Java code. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pathPattern = 0x0101002c;
        /**  Specify a URI path that must be a prefix to match, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_PREFIX}. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pathPrefix = 0x0101002b;
        /**  The path string describing the pattern to use for the PathPathMotion. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int patternPathData = 0x010104ca;
        /**  Specify a permission that a client is required to have in order to
    	 use the associated object.  If the client does not hold the named
    	 permission, its request will fail.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int permission = 0x01010006;
        /**  Flags indicating more context for a permission. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>costsMoney</code></td><td>0x0001</td><td> Set to indicate that this permission allows an operation that
             may cost the user money.  Such permissions may be highlighted
             when shown to the user with this additional information.  </td></tr>
</table>
         */
        public: static const int permissionFlags = 0x010103c7;
        /**  Specified the name of a group that this permission is associated
         with.  The group must have been defined with the
         {@link android.R.styleable#AndroidManifestPermissionGroup permission-group} tag. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int permissionGroup = 0x0101000a;
        /**  Flags indicating more context for a permission group. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>personalInfo</code></td><td>0x0001</td><td> Set to indicate that this permission group contains permissions
             protecting access to some information that is considered
             personal to the user (such as contacts, e-mails, etc). </td></tr>
</table>
         */
        public: static const int permissionGroupFlags = 0x010103c5;
        /**  Define how an activity persist across reboots. Activities defined as "never" will not
         be persisted. Those defined as "always" will be persisted. Those defined as "taskOnly"
         will persist the root activity of the task only. See below for more detail as to
         what gets persisted. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>persistRootOnly</code></td><td>0</td><td> The default. If this activity forms the root of a task then that task will be
             persisted across reboots but only the launching intent will be used. All
             activities above this activity in the task will not be persisted. In addition
             this activity will not be passed a PersistableBundle into which it could have
             stored its state. </td></tr>
<tr><td><code>persistNever</code></td><td>1</td><td> If this activity forms the root of a task then that task will not be persisted
             across reboots </td></tr>
<tr><td><code>persistAcrossReboots</code></td><td>2</td><td> If this activity forms the root of a task then the task and this activity will
             be persisted across reboots. If the activity above this activity is also
             tagged with the attribute <code>"persist"</code> then it will be persisted as well.
             And so on up the task stack until either an activity without the
             <code>persistableMode="persistAcrossReboots"</code> attribute or one that was launched
             with the flag Intent.FLAG_CLEAR_TASK_WHEN_RESET is encountered.

             <p>Activities that are declared with the persistAcrossReboots attribute will be
             provided with a PersistableBundle in onSavedInstanceState(), These activities may
             use this PeristableBundle to save their state. Then, following a reboot, that
             PersistableBundle will be provided back to the activity in its onCreate() method. </td></tr>
</table>
         */
        public: static const int persistableMode = 0x0101042d;
        /**  Flag to control special persistent mode of an application.  This should
         not normally be used by applications; it requires that the system keep
         your application running at all times. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int persistent = 0x0101000d;
        /**  Defines the persistence of the drawing cache. The drawing cache might be
             enabled by a ViewGroup for all its children in specific situations (for
             instance during a scrolling.) This property lets you persist the cache
             in memory after its initial usage. Persisting the cache consumes more
             memory but may prevent frequent garbage collection is the cache is created
             over and over again. By default the persistence is set to scrolling. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x0</td><td> The drawing cache is not persisted after use. </td></tr>
<tr><td><code>animation</code></td><td>0x1</td><td> The drawing cache is persisted after a layout animation. </td></tr>
<tr><td><code>scrolling</code></td><td>0x2</td><td> The drawing cache is persisted after a scroll. </td></tr>
<tr><td><code>all</code></td><td>0x3</td><td> The drawing cache is always persisted. </td></tr>
</table>
         */
        public: static const int persistentDrawingCache = 0x010100ee;
        /**  If set, specifies that this TextView has a phone number input
             method. The default is false.
             {@deprecated Use inputType instead.} 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int phoneNumber = 0x01010167;
        /** <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pivotX = 0x010101b5;
        /** <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int pivotY = 0x010101b6;
        /**  Drawble used for drawing points 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int pointDrawable = 0x01010552;
        /**  Reference to a pointer icon drawable with STYLE_ARROW 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int pointerIconArrow = 0x01010564;
        /**  Reference to a pointer icon drawable with STYLE_SPOT_ANCHOR 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int pointerIconSpotAnchor = 0x01010567;
        /**  Reference to a pointer icon drawable with STYLE_SPOT_HOVER 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int pointerIconSpotHover = 0x01010565;
        /**  Reference to a pointer icon drawable with STYLE_SPOT_TOUCH 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int pointerIconSpotTouch = 0x01010566;
        /**  Reference to the Pointer style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int pointerStyle = 0x0101050b;
        /**  The animation style to use for the popup window. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int popupAnimationStyle = 0x010102c9;
        /**  The background to use for the popup window. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int popupBackground = 0x01010176;
        /**  The characters to display in the popup keyboard. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int popupCharacters = 0x01010244;
        /**  Window elevation to use for the popup window. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int popupElevation = 0x0101048c;
        /**  The XML keyboard layout of any popup keyboard. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int popupKeyboard = 0x01010243;
        /**  Layout resource for popup keyboards. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int popupLayout = 0x0101023b;
        /**  Default PopupMenu style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int popupMenuStyle = 0x01010300;
        /**  Reference to a layout to use for displaying a prompt in the dropdown for
             spinnerMode="dropdown". This layout must contain a TextView with the id
             {@code @android:id/text1} to be populated with the prompt text. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int popupPromptView = 0x01010534;
        /**  Reference to a theme that should be used to inflate popups
             shown by widgets in the toolbar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int popupTheme = 0x010104a9;
        /**  Default PopupWindow style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int popupWindowStyle = 0x01010076;
        /**  Specify a URI authority port that is handled, as per
             {@link android.content.IntentFilter#addDataAuthority
             IntentFilter.addDataAuthority()}.  If a host is supplied
             but not a port, any port is matched. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int port = 0x01010029;
        /**  Position of section header preview. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>floating</code></td><td>0</td><td> Floating at the top of the content. </td></tr>
<tr><td><code>atThumb</code></td><td>1</td><td> Pinned alongside the thumb. </td></tr>
<tr><td><code>aboveThumb</code></td><td>2</td><td> Pinned above the thumb. </td></tr>
</table>
         */
        public: static const int position = 0x01010527;
        /**  The positive button text for the dialog. Set to @null to hide the positive button. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int positiveButtonText = 0x010101f5;
        /**  Default style for the PreferenceActivity. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceActivityStyle = 0x01010425;
        /**  Default style for PreferenceCategory. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceCategoryStyle = 0x0101008c;
        /**  Preference fragment list style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceFragmentListStyle = 0x01010502;
        /**  Preference fragment padding side 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int preferenceFragmentPaddingSide = 0x01010503;
        /**  Default style for Headers pane in PreferenceActivity. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceFragmentStyle = 0x01010426;
        /**  Preference frame layout styles. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceFrameLayoutStyle = 0x0101050a;
        /**  Preference headers panel style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceHeaderPanelStyle = 0x01010428;
        /**  Default style for informational Preference. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceInformationStyle = 0x0101008d;
        /**  The preference layout that has the child/tabbed effect. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceLayoutChild = 0x01010094;
        /**  Preference list style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceListStyle = 0x01010501;
        /**  Preference panel style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferencePanelStyle = 0x01010427;
        /**  Default style for PreferenceScreen. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceScreenStyle = 0x0101008b;
        /**  Default style for Preference. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int preferenceStyle = 0x0101008e;
        /**  Theme to use for presentations spawned from this theme. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int presentationTheme = 0x010103c0;
        /**  Whether space should be reserved in layout when an icon is missing. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int preserveIconSpacing = 0x0101052f;
        /**  A preview of what the AppWidget will look like after it's configured.
              If not supplied, the AppWidget's icon will be used. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int previewImage = 0x010102da;
        /**  true if the storage is the primary external storage 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int primary = 0x0101056d;
        /**  @hide This broacast receiver will only receive broadcasts for the
             primary user.  Can only be used with receivers. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int primaryUserOnly = 0x01010591;
        /**  Specify the relative importance or ability in handling a particular
         Intent.  For receivers, this controls the order in which they are
         executed to receive a broadcast (note that for
         asynchronous broadcasts, this order is ignored).  For activities,
         this provides information about how good an activity is handling an
         Intent; when multiple activities match an intent and have different
         priorities, only those with the higher priority value will be
         considered a match.
         
         <p>Only use if you really need to impose some specific
         order in which the broadcasts are received, or want to forcibly
         place an activity to always be preferred over others.  The value is a
         single integer, with higher numbers considered to be better. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int priority = 0x0101001c;
        /**  An addition content type description to supply to the input
             method attached to the text view, which is private to the
             implementation of the input method.  This simply fills in
             the {@link android.view.inputmethod.EditorInfo#privateImeOptions
             EditorInfo.privateImeOptions} field when the input
             method is connected. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int privateImeOptions = 0x01010223;
        /**  @hide 
         */
        public: static const int private_resource_pad1 = 0x01010500;
        /**  @hide 
         */
        public: static const int private_resource_pad10 = 0x010104f7;
        /**  @hide 
         */
        public: static const int private_resource_pad11 = 0x010104f6;
        /**  @hide 
         */
        public: static const int private_resource_pad12 = 0x010104f5;
        /**  @hide 
         */
        public: static const int private_resource_pad13 = 0x010104f4;
        /**  @hide 
         */
        public: static const int private_resource_pad14 = 0x010104f3;
        /**  @hide 
         */
        public: static const int private_resource_pad15 = 0x010104f2;
        /**  @hide 
         */
        public: static const int private_resource_pad16 = 0x010104f1;
        /**  @hide 
         */
        public: static const int private_resource_pad17 = 0x010104f0;
        /**  @hide 
         */
        public: static const int private_resource_pad18 = 0x010104ef;
        /**  @hide 
         */
        public: static const int private_resource_pad19 = 0x010104ee;
        /**  @hide 
         */
        public: static const int private_resource_pad2 = 0x010104ff;
        /**  @hide 
         */
        public: static const int private_resource_pad20 = 0x010104ed;
        /**  @hide 
         */
        public: static const int private_resource_pad21 = 0x010104ec;
        /**  @hide 
         */
        public: static const int private_resource_pad22 = 0x010104eb;
        /**  @hide 
         */
        public: static const int private_resource_pad23 = 0x010104ea;
        /**  @hide 
         */
        public: static const int private_resource_pad24 = 0x010104e9;
        /**  @hide 
         */
        public: static const int private_resource_pad25 = 0x010104e8;
        /**  @hide 
         */
        public: static const int private_resource_pad26 = 0x010104e7;
        /**  @hide 
         */
        public: static const int private_resource_pad27 = 0x010104e6;
        /**  @hide 
         */
        public: static const int private_resource_pad28 = 0x010104e5;
        /**  @hide 
         */
        public: static const int private_resource_pad29 = 0x010104e4;
        /**  @hide 
         */
        public: static const int private_resource_pad3 = 0x010104fe;
        /**  @hide 
         */
        public: static const int private_resource_pad30 = 0x010104e3;
        /**  @hide 
         */
        public: static const int private_resource_pad31 = 0x010104e2;
        /**  @hide 
         */
        public: static const int private_resource_pad32 = 0x010104e1;
        /**  @hide 
         */
        public: static const int private_resource_pad33 = 0x010104e0;
        /**  @hide 
         */
        public: static const int private_resource_pad34 = 0x010104df;
        /**  @hide 
         */
        public: static const int private_resource_pad35 = 0x010104de;
        /**  @hide 
         */
        public: static const int private_resource_pad36 = 0x010104dd;
        /**  @hide 
         */
        public: static const int private_resource_pad37 = 0x010104dc;
        /**  @hide 
         */
        public: static const int private_resource_pad38 = 0x010104db;
        /**  @hide 
         */
        public: static const int private_resource_pad39 = 0x010104da;
        /**  @hide 
         */
        public: static const int private_resource_pad4 = 0x010104fd;
        /**  @hide 
         */
        public: static const int private_resource_pad40 = 0x010104d9;
        /**  @hide 
         */
        public: static const int private_resource_pad41 = 0x010104d8;
        /**  @hide 
         */
        public: static const int private_resource_pad42 = 0x010104d7;
        /**  @hide 
         */
        public: static const int private_resource_pad43 = 0x010104d6;
        /**  @hide 
         */
        public: static const int private_resource_pad44 = 0x010104d5;
        /**  @hide 
         */
        public: static const int private_resource_pad45 = 0x010104d4;
        /**  @hide 
         */
        public: static const int private_resource_pad46 = 0x010104d3;
        /**  @hide 
         */
        public: static const int private_resource_pad47 = 0x010104d2;
        /**  @hide 
         */
        public: static const int private_resource_pad48 = 0x010104d1;
        /**  @hide 
         */
        public: static const int private_resource_pad49 = 0x010104d0;
        /**  @hide 
         */
        public: static const int private_resource_pad5 = 0x010104fc;
        /**  @hide 
         */
        public: static const int private_resource_pad50 = 0x010104cf;
        /**  @hide 
         */
        public: static const int private_resource_pad6 = 0x010104fb;
        /**  @hide 
         */
        public: static const int private_resource_pad7 = 0x010104fa;
        /**  @hide 
         */
        public: static const int private_resource_pad8 = 0x010104f9;
        /**  @hide 
         */
        public: static const int private_resource_pad9 = 0x010104f8;
        /**  Specify a specific process that the associated code is to run in.
         Use with the application tag (to supply a default process for all
         application components), or with the activity, receiver, service,
         or provider tag (to supply a specific icon for that component).
    
         <p>Application components are normally run in a single process that
         is created for the entire application.  You can use this tag to modify
         where they run.  If the process name begins with a ':' character,
         a new process private to that application will be created when needed
         to run that component (allowing you to spread your application across
         multiple processes).  If the process name begins with a lower-case
         character, the component will be run in a global process of that name,
         provided that you have permission to do so, allowing multiple
         applications to share one process to reduce resource usage. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int process = 0x01010011;
        /**  Defines the default progress value, between 0 and max. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int progress = 0x01010137;
        /**  Tint to apply to the progress indicator background. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int progressBackgroundTint = 0x01010465;
        /**  Blending mode used to apply the progress indicator background tint. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
         */
        public: static const int progressBackgroundTintMode = 0x01010466;
        /**  Specifies the horizontal padding on either end for an embedded progress bar. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int progressBarPadding = 0x01010319;
        /**  Default ProgressBar style. This is a medium circular progress bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int progressBarStyle = 0x01010077;
        /**  Horizontal ProgressBar style. This is a horizontal progress bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int progressBarStyleHorizontal = 0x01010078;
        /**  Inverse ProgressBar style. This is a medium circular progress bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int progressBarStyleInverse = 0x01010287;
        /**  Large ProgressBar style. This is a large circular progress bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int progressBarStyleLarge = 0x0101007a;
        /**  Large inverse ProgressBar style. This is a large circular progress bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int progressBarStyleLargeInverse = 0x01010289;
        /**  Small ProgressBar style. This is a small circular progress bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int progressBarStyleSmall = 0x01010079;
        /**  Small inverse ProgressBar style. This is a small circular progress bar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int progressBarStyleSmallInverse = 0x01010288;
        /**  Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int progressBarStyleSmallTitle = 0x0101020f;
        /**  Drawable used for the progress mode. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int progressDrawable = 0x0101013c;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int progressLayout = 0x0101051d;
        /**  Tint to apply to the progress indicator. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int progressTint = 0x01010463;
        /**  Blending mode used to apply the progress indicator tint. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
         */
        public: static const int progressTintMode = 0x01010464;
        /**  The prompt to display when the spinner's dialog is shown. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int prompt = 0x0101017b;
        /**  Name of the property being animated. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int propertyName = 0x010102e1;
        /**  Name of the property being animated as the X coordinate of the pathData. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int propertyXName = 0x01010474;
        /**  Name of the property being animated as the Y coordinate of the pathData. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int propertyYName = 0x01010475;
        /**  Characterizes the potential risk implied in a permission and
         indicates the procedure the system should follow when determining
         whether to grant the permission to an application requesting it. {@link
         android.Manifest.permission Standard permissions} have a predefined and
         permanent protectionLevel. If you are creating a custom permission in an
         application, you can define a protectionLevel attribute with one of the
         values listed below. If no protectionLevel is defined for a custom
         permission, the system assigns the default ("normal"). 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> A lower-risk permission that gives an application access to isolated
             application-level features, with minimal risk to other applications,
             the system, or the user. The system automatically grants this type
             of permission to a requesting application at installation, without
             asking for the user's explicit approval (though the user always
             has the option to review these permissions before installing). </td></tr>
<tr><td><code>dangerous</code></td><td>1</td><td> A higher-risk permission that would give a requesting application
             access to private user data or control over the device that can
             negatively impact the user.  Because this type of permission
             introduces potential risk, the system may not automatically
             grant it to the requesting application.  For example, any dangerous
             permissions requested by an application may be displayed to the
             user and require confirmation before proceeding, or some other
             approach may be taken to avoid the user automatically allowing
             the use of such facilities.  </td></tr>
<tr><td><code>signature</code></td><td>2</td><td> A permission that the system is to grant only if the requesting
             application is signed with the same certificate as the application
             that declared the permission. If the certificates match, the system
             automatically grants the permission without notifying the user or
             asking for the user's explicit approval. </td></tr>
<tr><td><code>signatureOrSystem</code></td><td>3</td><td> A permission that the system is to grant only to packages in the
             Android system image <em>or</em> that are signed with the same
             certificates. Please avoid using this option, as the
             signature protection level should be sufficient for most needs and
             works regardless of exactly where applications are installed.  This
             permission is used for certain special situations where multiple
             vendors have applications built in to a system image which need
             to share specific features explicitly because they are being built
             together. </td></tr>
<tr><td><code>system</code></td><td>0x10</td><td> Additional flag from base permission type: this permission can also
             be granted to any applications installed on the system image.
             Please avoid using this option, as the
             signature protection level should be sufficient for most needs and
             works regardless of exactly where applications are installed.  This
             permission flag is used for certain special situations where multiple
             vendors have applications built in to a system image which need
             to share specific features explicitly because they are being built
             together. </td></tr>
<tr><td><code>development</code></td><td>0x20</td><td> Additional flag from base permission type: this permission can also
             (optionally) be granted to development applications. </td></tr>
<tr><td><code>appop</code></td><td>0x40</td><td> Additional flag from base permission type: this permission is closely
             associated with an app op for controlling access. </td></tr>
</table>
         */
        public: static const int protectionLevel = 0x01010009;
        /**  The attribute that holds a Base64-encoded public key. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int publicKey = 0x010103a6;
        /**  If you wish to handle an action key during normal search query entry, you
            must define an action string here.  This will be added to the
            {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
            searchable activity.  To examine the string, use
            {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
            <i>Optional attribute.</i> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int queryActionMsg = 0x010101db;
        /**  If provided and <code>true</code>, this searchable activity will be invoked for all
             queries in a particular session. If set to <code>false</code> and the activity
             returned zero results for a query, it will not be invoked again in that session for
             supersets of that zero-results query. For example, if the activity returned zero
             results for "bo", it would not be queried again for "bob".
             The default value is <code>false</code>. <i>Optional attribute.</i>. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int queryAfterZeroResults = 0x01010282;
        /**  Background for the section containing the search query 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int queryBackground = 0x01010487;
        /**  An optional query hint string to be displayed in the empty query field. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int queryHint = 0x01010358;
        /**  Drawable used as an overlay on top of quickcontact photos. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int quickContactBadgeOverlay = 0x01010420;
        /**  Default quickcontact badge style with large quickcontact window. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int quickContactBadgeStyleSmallWindowLarge = 0x010102b3;
        /**  Default quickcontact badge style with medium quickcontact window. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int quickContactBadgeStyleSmallWindowMedium = 0x010102b2;
        /**  Default quickcontact badge style with small quickcontact window. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int quickContactBadgeStyleSmallWindowSmall = 0x010102b1;
        /**  Default quickcontact badge style with large quickcontact window. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int quickContactBadgeStyleWindowLarge = 0x010102b0;
        /**  Default quickcontact badge style with medium quickcontact window. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int quickContactBadgeStyleWindowMedium = 0x010102af;
        /**  Default quickcontact badge style with small quickcontact window. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int quickContactBadgeStyleWindowSmall = 0x010102ae;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>modeSmall</code></td><td>1</td><td></td></tr>
<tr><td><code>modeMedium</code></td><td>2</td><td></td></tr>
<tr><td><code>modeLarge</code></td><td>3</td><td></td></tr>
</table>
         */
        public: static const int quickContactWindowSize = 0x01010538;
        /**  Default RadioButton style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int radioButtonStyle = 0x0101007e;
        /**  Defines the radius of the four corners. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int radius = 0x010101a8;
        /**  The rating to set by default. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int rating = 0x01010145;
        /**  Default RatingBar style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int ratingBarStyle = 0x0101007c;
        /**  Indicator RatingBar style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int ratingBarStyleIndicator = 0x01010210;
        /**  Small indicator RatingBar style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int ratingBarStyleSmall = 0x0101007d;
        /**  A specific {@link android.R.attr#permission} name for read-only
         access to a {@link android.content.ContentProvider}.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int readPermission = 0x01010007;
        /**  The service that provides voice recognition.  This is required.  When the user
             selects this voice interaction service, they will also be implicitly selecting
             the component here for their recognition service. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int recognitionService = 0x0101049c;
        /**  The regular pattern color 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int regularColor = 0x01010560;
        /**  Tasks whose root has this attribute set to true will replace baseIntent with that of the
         next activity in the task. If the next activity also has this attribute set to true then
         it will yield the baseIntent to any activity that it launches in the same task. This
         continues until an activity is encountered which has this attribute set to false. False
         is the default. This attribute set to true also permits activity's use of the
         TaskDescription to change labels, colors and icons in the recent task list. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int relinquishTaskIdentity = 0x01010476;
        /**  true if the storage is removable 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int removable = 0x0101056e;
        /**  Tells ChangeTransform to track parent changes. Default is true. Corresponds to
             {@link android.transition.ChangeTransform#setReparent(boolean)}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int reparent = 0x010104bc;
        /**  A parent change should use an overlay or affect the transform of the
             transitionining View. Default is true. Corresponds to
             {@link android.transition.ChangeTransform#setReparentWithOverlay(boolean)}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int reparentWithOverlay = 0x010104bd;
        /**  Defines how many times the animation should repeat. The default value is 0. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>infinite</code></td><td>-1</td><td></td></tr>
</table>
         */
        public: static const int repeatCount = 0x010101bf;
        /**  Defines the animation behavior when it reaches the end and the repeat count is
             greater than 0 or infinite. The default value is restart. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>restart</code></td><td>1</td><td> The animation starts again from the beginning. </td></tr>
<tr><td><code>reverse</code></td><td>2</td><td> The animation plays backward. </td></tr>
</table>
         */
        public: static const int repeatMode = 0x010101c0;
        /**  Application's requirement for five way navigation 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int reqFiveWayNav = 0x01010232;
        /**  Application's requirement for a hard keyboard 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int reqHardKeyboard = 0x01010229;
        /**  The input method preferred by an application. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>undefined</code></td><td>0</td><td></td></tr>
<tr><td><code>nokeys</code></td><td>1</td><td></td></tr>
<tr><td><code>qwerty</code></td><td>2</td><td></td></tr>
<tr><td><code>twelvekey</code></td><td>3</td><td></td></tr>
</table>
         */
        public: static const int reqKeyboardType = 0x01010228;
        /**  The navigation device preferred by an application. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>undefined</code></td><td>0</td><td></td></tr>
<tr><td><code>nonav</code></td><td>1</td><td></td></tr>
<tr><td><code>dpad</code></td><td>2</td><td></td></tr>
<tr><td><code>trackball</code></td><td>3</td><td></td></tr>
<tr><td><code>wheel</code></td><td>4</td><td></td></tr>
</table>
         */
        public: static const int reqNavigation = 0x0101022a;
        /**  The touch screen type used by an application. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>undefined</code></td><td>0</td><td></td></tr>
<tr><td><code>notouch</code></td><td>1</td><td></td></tr>
<tr><td><code>stylus</code></td><td>2</td><td></td></tr>
<tr><td><code>finger</code></td><td>3</td><td></td></tr>
</table>
         */
        public: static const int reqTouchScreen = 0x01010227;
        /**  Whether the device must be unlocked before routing data to this service.
             The default is false.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int requireDeviceUnlock = 0x010103ec;
        /**   Specify whether this feature is required for the application.
              The default is true, meaning the application requires the
              feature, and does not want to be installed on devices that
              don't support it.  If you set this to false, then this will
              not impose a restriction on where the application can be
              installed. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int required = 0x0101028e;
        /**  Declare that this application requires an account of a certain
             type. The default value is null and indicates that the application can work without
             any accounts. The type should correspond to the account authenticator type, such as
             "com.google". 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int requiredAccountType = 0x010103d6;
        /**  Flag to specify if this application needs to be present for all users. Only pre-installed
         applications can request this feature. Default value is false. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int requiredForAllUsers = 0x010103d0;
        /**  Defines which edges should be faded on scrolling. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> No edge is faded. </td></tr>
<tr><td><code>horizontal</code></td><td>0x00001000</td><td> Fades horizontal edges only. </td></tr>
<tr><td><code>vertical</code></td><td>0x00002000</td><td> Fades vertical edges only. </td></tr>
</table>
         */
        public: static const int requiresFadingEdge = 0x010103a5;
        /**  Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
             this is the new way to specify the minimum screen size an application is
             compatible with.  This attribute provides the required minimum
             "smallest screen width" (as per the -swNNNdp resource configuration)
             that the application can run on.  For example, a typical phone
             screen is 320, a 7" tablet 600, and a 10" tablet 720.  If the
             smallest screen width of the device is below the value supplied here,
             then the application is considered incompatible with that device.
             If not supplied, then any old smallScreens, normalScreens, largeScreens,
             or xlargeScreens attributes will be used instead. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int requiresSmallestWidthDp = 0x01010364;
        /**  Color of the res-out outline. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int resOutColor = 0x01010531;
        /**  Optional parameter which indicates if and how this widget can be
             resized. Supports combined values using | operator. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x0</td><td></td></tr>
<tr><td><code>horizontal</code></td><td>0x1</td><td></td></tr>
<tr><td><code>vertical</code></td><td>0x2</td><td></td></tr>
</table>
         */
        public: static const int resizeMode = 0x01010363;
        /**  Indicates whether the application can resize itself to newer
             screen sizes.  This is mostly used to distinguish between old
             applications that may not be compatible with newly introduced
             screen sizes and newer applications that should be; it will be
             set for you automatically based on whether you are targeting
             a newer platform that supports more screens. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int resizeable = 0x0101028d;
        /**  Resource identifier to assign to this piece of named meta-data.
             The resource identifier can later be retrieved from the meta data
             Bundle through {@link android.os.Bundle#getInt Bundle.getInt}. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int resource = 0x01010025;
        /**  Indicate that the application is prepared to attempt a restore of any
         backed-up dataset, even if the backup is apparently from a newer version
         of the application than is currently installed on the device.  Setting
         this attribute to <code>true</code> will permit the Backup Manager to
         attempt restore even when a version mismatch suggests that the data are
         incompatible.  <em>Use with caution!</em>

         <p>The default value of this attribute is <code>false</code>. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int restoreAnyVersion = 0x010102ba;
        /**  @deprecated This attribute is not used by the Android operating system. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int restoreNeedsApplication = 0x0101029d;
        /**  Declare that this application requires access to restricted accounts of a certain
             type. The default value is null and restricted accounts won\'t be visible to this
             application. The type should correspond to the account authenticator type, such as
             "com.google". 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int restrictedAccountType = 0x010103d5;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>hidden</code></td><td>0</td><td></td></tr>
<tr><td><code>bool</code></td><td>1</td><td></td></tr>
<tr><td><code>choice</code></td><td>2</td><td></td></tr>
<tr><td><code>multi-select</code></td><td>4</td><td></td></tr>
<tr><td><code>integer</code></td><td>5</td><td></td></tr>
<tr><td><code>string</code></td><td>6</td><td></td></tr>
</table>
         */
        public: static const int restrictionType = 0x01010493;
        /**  Indicate that it is okay for this activity be resumed while the previous
         activity is in the process of pausing, without waiting for the previous pause
         to complete.  Use this with caution: your activity can not acquire any exclusive
         resources (such as opening the camera or recording audio) when it launches, or it
         may conflict with the previous activity and fail.

         <p>The default value of this attribute is <code>false</code>. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int resumeWhilePausing = 0x010104b2;
        /**  Whether this transition is reversible. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int reversible = 0x0101044b;
        /**  Amount of right padding inside the gradient shape. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int right = 0x010101af;
        /**  Default style for RingtonePreference. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int ringtonePreferenceStyle = 0x01010093;
        /**  Which ringtone type(s) to show in the picker. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>ringtone</code></td><td>1</td><td> Ringtones. </td></tr>
<tr><td><code>notification</code></td><td>2</td><td> Notification sounds. </td></tr>
<tr><td><code>alarm</code></td><td>4</td><td> Alarm sounds. </td></tr>
<tr><td><code>all</code></td><td>7</td><td> All available ringtone sounds. </td></tr>
</table>
         */
        public: static const int ringtoneType = 0x010101f9;
        /**  rotation of the view, in degrees. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int rotation = 0x01010326;
        /**  rotation of the view around the x axis, in degrees. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int rotationX = 0x01010327;
        /**  rotation of the view around the y axis, in degrees. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int rotationY = 0x01010328;
        /**  The maxmimum number of rows to create when automatically positioning children. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int rowCount = 0x01010375;
        /**  Fraction of the animation duration used to delay the beginning of
         the animation of each row. 
         <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int rowDelay = 0x010101d0;
        /**  Row edge flags. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>4</td><td> Row is anchored to the top of the keyboard. </td></tr>
<tr><td><code>bottom</code></td><td>8</td><td> Row is anchored to the bottom of the keyboard. </td></tr>
</table>
         */
        public: static const int rowEdgeFlags = 0x01010241;
        /**  Defines the height of each row. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int rowHeight = 0x01010132;
        /**  When set to true, forces row boundaries to appear in the same order
        as row indices.
        The default is true.
        See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int rowOrderPreserved = 0x01010376;
        /**  If unset, no state will be saved for this view when it is being
             frozen. The default is true, allowing the view to be saved
             (however it also must have an ID assigned to it for its
             state to be saved).  Setting this to false only disables the
             state for this view, not for its children which may still
             be saved. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int saveEnabled = 0x010100e7;
        /**  Specifies where the drawable is positioned after scaling. The default value is
             left. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the vertical gravity: a top gravity will clip the bottom
                 edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the horizontal gravity: a left gravity will clip the right
                 edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
         */
        public: static const int scaleGravity = 0x010101fe;
        /**  Scale height, expressed as a percentage of the drawable's bound. The value's
             format is XX%. For instance: 100%, 12.5%, etc.
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scaleHeight = 0x010101fd;
        /**  Controls how the image should be resized or moved to match the size
             of this ImageView. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>matrix</code></td><td>0</td><td></td></tr>
<tr><td><code>fitXY</code></td><td>1</td><td></td></tr>
<tr><td><code>fitStart</code></td><td>2</td><td></td></tr>
<tr><td><code>fitCenter</code></td><td>3</td><td></td></tr>
<tr><td><code>fitEnd</code></td><td>4</td><td></td></tr>
<tr><td><code>center</code></td><td>5</td><td></td></tr>
<tr><td><code>centerCrop</code></td><td>6</td><td></td></tr>
<tr><td><code>centerInside</code></td><td>7</td><td></td></tr>
</table>
         */
        public: static const int scaleType = 0x0101011d;
        /**  Scale width, expressed as a percentage of the drawable's bound. The value's
             format is XX%. For instance: 100%, 12.5%, etc.
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scaleWidth = 0x010101fc;
        /**  scale of the view in the x direction. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scaleX = 0x01010324;
        /**  scale of the view in the y direction. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scaleY = 0x01010325;
        /**  Specify a URI scheme that is handled, as per
             {@link android.content.IntentFilter#addDataScheme
             IntentFilter.addDataScheme()}.
             <p><em>Note: scheme matching in the Android framework is
             case-sensitive, unlike the formal RFC.  As a result,
             schemes here should always use lower case letters.</em></p> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scheme = 0x01010027;
        /**  Specifies a compatible screen density, as per the device
             configuration screen density bins. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>ldpi</code></td><td>120</td><td> A low density screen, approximately 120dpi. </td></tr>
<tr><td><code>mdpi</code></td><td>160</td><td> A medium density screen, approximately 160dpi. </td></tr>
<tr><td><code>hdpi</code></td><td>240</td><td> A high density screen, approximately 240dpi. </td></tr>
<tr><td><code>xhdpi</code></td><td>320</td><td> An extra high density screen, approximately 320dpi. </td></tr>
</table>
         */
        public: static const int screenDensity = 0x010102cb;
        /**  Specify the orientation an activity should be run in.  If not
         specified, it will run in the current preferred orientation
         of the screen.
         <p>This attribute is supported by the <a
            href="{@docRoot}guide/topics/manifest/activity-element.html">{@code &lt;activity>}</a>
            element. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>unspecified</code></td><td>-1</td><td> No preference specified: let the system decide the best
             orientation.  This will either be the orientation selected
             by the activity below, or the user's preferred orientation
             if this activity is the bottom of a task. If the user
             explicitly turned off sensor based orientation through settings
             sensor based device rotation will be ignored. If not by default
             sensor based orientation will be taken into account and the 
             orientation will changed based on how the user rotates the device.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED}. </td></tr>
<tr><td><code>landscape</code></td><td>0</td><td> Would like to have the screen in a landscape orientation: that
             is, with the display wider than it is tall, ignoring sensor data.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LANDSCAPE}. </td></tr>
<tr><td><code>portrait</code></td><td>1</td><td> Would like to have the screen in a portrait orientation: that
             is, with the display taller than it is wide, ignoring sensor data.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_PORTRAIT}. </td></tr>
<tr><td><code>user</code></td><td>2</td><td> Use the user's current preferred orientation of the handset.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER}. </td></tr>
<tr><td><code>behind</code></td><td>3</td><td> Keep the screen in the same orientation as whatever is behind
             this activity.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_BEHIND}. </td></tr>
<tr><td><code>sensor</code></td><td>4</td><td> Orientation is determined by a physical orientation sensor:
             the display will rotate based on how the user moves the device.
             Ignores user's setting to turn off sensor-based rotation.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR}. </td></tr>
<tr><td><code>nosensor</code></td><td>5</td><td> Always ignore orientation determined by orientation sensor:
             the display will not rotate when the user moves the device.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_NOSENSOR}. </td></tr>
<tr><td><code>sensorLandscape</code></td><td>6</td><td> Would like to have the screen in landscape orientation, but can
             use the sensor to change which direction the screen is facing.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_LANDSCAPE}. </td></tr>
<tr><td><code>sensorPortrait</code></td><td>7</td><td> Would like to have the screen in portrait orientation, but can
             use the sensor to change which direction the screen is facing.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_PORTRAIT}. </td></tr>
<tr><td><code>reverseLandscape</code></td><td>8</td><td> Would like to have the screen in landscape orientation, turned in
             the opposite direction from normal landscape.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_LANDSCAPE}. </td></tr>
<tr><td><code>reversePortrait</code></td><td>9</td><td> Would like to have the screen in portrait orientation, turned in
             the opposite direction from normal portrait.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_PORTRAIT}. </td></tr>
<tr><td><code>fullSensor</code></td><td>10</td><td> Orientation is determined by a physical orientation sensor:
             the display will rotate based on how the user moves the device.
             This allows any of the 4 possible rotations, regardless of what
             the device will normally do (for example some devices won't
             normally use 180 degree rotation).
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_SENSOR}. </td></tr>
<tr><td><code>userLandscape</code></td><td>11</td><td> Would like to have the screen in landscape orientation, but if
             the user has enabled sensor-based rotation then we can use the
             sensor to change which direction the screen is facing.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_LANDSCAPE}. </td></tr>
<tr><td><code>userPortrait</code></td><td>12</td><td> Would like to have the screen in portrait orientation, but if
             the user has enabled sensor-based rotation then we can use the
             sensor to change which direction the screen is facing.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_PORTRAIT}. </td></tr>
<tr><td><code>fullUser</code></td><td>13</td><td> Respect the user's sensor-based rotation preference, but if
             sensor-based rotation is enabled then allow the screen to rotate
             in all 4 possible directions regardless of what
             the device will normally do (for example some devices won't
             normally use 180 degree rotation).
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_USER}. </td></tr>
<tr><td><code>locked</code></td><td>14</td><td> Screen is locked to its current rotation, whatever that is.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LOCKED}. </td></tr>
</table>
         */
        public: static const int screenOrientation = 0x0101001e;
        /**  Specifies a compatible screen size, as per the device
             configuration screen size bins. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>small</code></td><td>200</td><td> A small screen configuration, at least 240x320dp. </td></tr>
<tr><td><code>normal</code></td><td>300</td><td> A normal screen configuration, at least 320x480dp. </td></tr>
<tr><td><code>large</code></td><td>400</td><td> A large screen configuration, at least 400x530dp. </td></tr>
<tr><td><code>xlarge</code></td><td>500</td><td> An extra large screen configuration, at least 600x800dp. </td></tr>
</table>
         */
        public: static const int screenSize = 0x010102ca;
        /**  Whether the text is allowed to be wider than the view (and
             therefore can be scrolled horizontally). 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollHorizontally = 0x0101015b;
        /**  The padding for the scroll indicator area 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollIndicatorPaddingLeft = 0x01010577;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollIndicatorPaddingRight = 0x01010578;
        /**  Default ScrollView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int scrollViewStyle = 0x01010080;
        /**  The initial horizontal scroll offset, in pixels.
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollX = 0x010100d2;
        /**  The initial vertical scroll offset, in pixels. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollY = 0x010100d3;
        /**  Defines whether the horizontal scrollbar track should always be drawn. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollbarAlwaysDrawHorizontalTrack = 0x01010068;
        /**  Defines whether the vertical scrollbar track should always be drawn. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollbarAlwaysDrawVerticalTrack = 0x01010069;
        /**  Defines the delay in milliseconds that a scrollbar waits before fade out. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollbarDefaultDelayBeforeFade = 0x010102a9;
        /**  Defines the delay in milliseconds that a scrollbar takes to fade out. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollbarFadeDuration = 0x010102a8;
        /**  Sets the width of vertical scrollbars and height of horizontal scrollbars. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollbarSize = 0x01010063;
        /**  Controls the scrollbar style and position. The scrollbars can be overlaid or
             inset. When inset, they add to the padding of the view. And the
             scrollbars can be drawn inside the padding area or on the edge of
             the view. For example, if a view has a background drawable and you
             want to draw the scrollbars inside the padding specified by the
             drawable, you can use insideOverlay or insideInset. If you want them
             to appear at the edge of the view, ignoring the padding, then you can
             use outsideOverlay or outsideInset.
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>insideOverlay</code></td><td>0x0</td><td> Inside the padding and overlaid </td></tr>
<tr><td><code>insideInset</code></td><td>0x01000000</td><td> Inside the padding and inset </td></tr>
<tr><td><code>outsideOverlay</code></td><td>0x02000000</td><td> Edge of the view and overlaid </td></tr>
<tr><td><code>outsideInset</code></td><td>0x03000000</td><td> Edge of the view and inset </td></tr>
</table>
         */
        public: static const int scrollbarStyle = 0x0101007f;
        /**  Defines the horizontal scrollbar thumb drawable. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int scrollbarThumbHorizontal = 0x01010064;
        /**  Defines the vertical scrollbar thumb drawable. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int scrollbarThumbVertical = 0x01010065;
        /**  Defines the horizontal scrollbar track drawable. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int scrollbarTrackHorizontal = 0x01010066;
        /**  Defines the vertical scrollbar track drawable. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int scrollbarTrackVertical = 0x01010067;
        /**  Defines which scrollbars should be displayed on scrolling or not. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> No scrollbar is displayed. </td></tr>
<tr><td><code>horizontal</code></td><td>0x00000100</td><td> Displays horizontal scrollbar only. </td></tr>
<tr><td><code>vertical</code></td><td>0x00000200</td><td> Displays vertical scrollbar only. </td></tr>
</table>
         */
        public: static const int scrollbars = 0x010100de;
        /**  When set to true, the list uses a drawing cache during scrolling.
             This makes the rendering faster but uses more memory. The default
             value is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int scrollingCache = 0x010100fe;
        /**  If supplied, this string will be displayed as the text of the "Search" button.
          <i>Optional attribute.</i>
          {@deprecated This will create a non-standard UI appearance, because the search bar UI is
                       changing to use only icons for its buttons.}
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchButtonText = 0x01010205;
        /**  Theme to use for Search Dialogs 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int searchDialogTheme = 0x01010509;
        /**  Search icon 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int searchIcon = 0x01010483;
        /**  The actual keyphrase/hint text, or empty if not keyphrase dependent. @hide @SystemApi 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchKeyphrase = 0x0101045f;
        /**  A globally unique ID for the keyphrase. @hide @SystemApi 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchKeyphraseId = 0x0101045e;
        /**  Flags for supported recognition modes. @hide @SystemApi 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>voiceTrigger</code></td><td>0x1</td><td></td></tr>
<tr><td><code>userIdentification</code></td><td>0x2</td><td></td></tr>
</table>
         */
        public: static const int searchKeyphraseRecognitionFlags = 0x010104a6;
        /**  A comma separated list of BCP-47 language tag for locales that are supported
             for this keyphrase, or empty if not locale dependent. @hide @SystemApi 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchKeyphraseSupportedLocales = 0x01010460;
        /**  Additional features are controlled by mode bits in this field.  Omitting
            this field, or setting to zero, provides default behavior.  <i>Optional attribute.</i>
        
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>showSearchLabelAsBadge</code></td><td>0x04</td><td> If set, this flag enables the display of the search target (label) within the
               search bar.  If neither bad mode is selected, no badge will be shown. </td></tr>
<tr><td><code>showSearchIconAsBadge</code></td><td>0x08</td><td><strong>This is deprecated.</strong><br/>The default
              application icon is now always used, so this option is
              obsolete.</td></tr>
<tr><td><code>queryRewriteFromData</code></td><td>0x10</td><td> If set, this flag causes the suggestion column SUGGEST_COLUMN_INTENT_DATA to
               be considered as the text for suggestion query rewriting.  This should only
               be used when the values in SUGGEST_COLUMN_INTENT_DATA are suitable for user
               inspection and editing - typically, HTTP/HTTPS Uri's. </td></tr>
<tr><td><code>queryRewriteFromText</code></td><td>0x20</td><td> If set, this flag causes the suggestion column SUGGEST_COLUMN_TEXT_1 to
               be considered as the text for suggestion query rewriting.  This should be used
               for suggestions in which no query text is provided and the SUGGEST_COLUMN_INTENT_DATA
               values are not suitable for user inspection and editing. </td></tr>
</table>
         */
        public: static const int searchMode = 0x010101d5;
        /**  The list item height for search results. @hide 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchResultListItemHeight = 0x01010416;
        /**  If provided, this string will be used to describe the searchable item in the
             searchable items settings within system search settings. <i>Optional
             attribute.</i> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchSettingsDescription = 0x0101028a;
        /**  If provided, this is the trigger indicating that the searchable activity
            provides suggestions as well.  The value must be a fully-qualified content provider
            authority (e.g. "com.example.android.apis.SuggestionProvider") and should match the
            "android:authorities" tag in your content provider's manifest entry.  <i>Optional
            attribute.</i> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchSuggestAuthority = 0x010101d6;
        /**  If provided, and not overridden by an action in the selected suggestion, this
            string will be placed in the action field of the {@link android.content.Intent Intent}
            when the user clicks a suggestion.  <i>Optional attribute.</i> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchSuggestIntentAction = 0x010101d9;
        /**  If provided, and not overridden by an action in the selected suggestion, this
            string will be placed in the data field of the {@link android.content.Intent Intent}
            when the user clicks a suggestion.  <i>Optional attribute.</i> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchSuggestIntentData = 0x010101da;
        /**  If provided, this will be inserted in the suggestions query Uri, after the authority
            you have provide but before the standard suggestions path. <i>Optional attribute.</i>
            
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchSuggestPath = 0x010101d7;
        /**  If provided, suggestion queries will be passed into your query function
            as the <i>selection</i> parameter.  Typically this will be a WHERE clause for your
            database, and will contain a single question mark, which represents the actual query
            string that has been typed by the user.  If not provided, then the user query text
            will be appended to the query Uri (after an additional "/".)  <i>Optional
            attribute.</i> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchSuggestSelection = 0x010101d8;
        /**  If provided, this is the minimum number of characters needed to trigger
             search suggestions. The default value is 0. <i>Optional attribute.</i> 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int searchSuggestThreshold = 0x0101026d;
        /**  Style for the search query widget. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int searchViewStyle = 0x01010480;
        /**  Search widget more corpus result item background. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int searchWidgetCorpusItemBackground = 0x0101040e;
        /**  Defines the secondary progress value, between 0 and max. This progress is drawn between
             the primary progress and the background.  It can be ideal for media scenarios such as
             showing the buffering progress while the default progress shows the play progress. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int secondaryProgress = 0x01010138;
        /**  Tint to apply to the secondary progress indicator. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int secondaryProgressTint = 0x01010467;
        /**  Blending mode used to apply the secondary progress indicator tint. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
         */
        public: static const int secondaryProgressTintMode = 0x01010468;
        /**  Default style for seekbar preferences. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int seekBarPreferenceStyle = 0x01010504;
        /**  Default SeekBar style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int seekBarStyle = 0x0101007b;
        /**  Style for segmented buttons - a container that houses several buttons
             with the appearance of a singel button broken into segments. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int segmentedButtonStyle = 0x01010330;
        /**  If the text is selectable, select it all when the view takes
             focus. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int selectAllOnFocus = 0x0101015e;
        /**  Whether the Preference is selectable. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int selectable = 0x010101e6;
        /**  Background drawable for bordered standalone items that need focus/pressed states. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int selectableItemBackground = 0x0101030e;
        /**  Background drawable for borderless standalone items that need focus/pressed states. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int selectableItemBackgroundBorderless = 0x0101045c;
        /**  Drawable for the vertical bar shown at the beginning and at the end of the selected date. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int selectedDateVerticalBar = 0x01010347;
        /**  The background color for the selected week. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int selectedWeekBackgroundColor = 0x01010342;
        /**  @hide The divider for making the selection area. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int selectionDivider = 0x0101053d;
        /**  @hide The height of the selection divider. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int selectionDividerHeight = 0x0101053e;
        /**  @hide The distance between the two selection dividers. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int selectionDividersDistance = 0x0101053f;
        /**  The service that hosts active voice interaction sessions.  This is required. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int sessionService = 0x0101043d;
        /**  Component name of an activity that allows the user to modify
             the settings for this service. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int settingsActivity = 0x01010225;
        /**  Component name of an activity for setup of this service.
             The setup includes scanning channels and registering EPG data. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int setupActivity = 0x010103f6;
        /**  Place a blurred shadow of text underneath the text, drawn with the
             specified color. The text shadow produced does not interact with
             properties on View that are responsible for real time shadows,
             {@link android.R.styleable#View_elevation elevation} and
             {@link android.R.styleable#View_translationZ translationZ}. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int shadowColor = 0x01010161;
        /**  Horizontal offset of the text shadow. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int shadowDx = 0x01010162;
        /**  Vertical offset of the text shadow. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int shadowDy = 0x01010163;
        /**  Blur radius of the text shadow. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int shadowRadius = 0x01010164;
        /**  Indicates what shape to fill with a gradient. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>rectangle</code></td><td>0</td><td> Rectangle shape, with optional rounder corners. </td></tr>
<tr><td><code>oval</code></td><td>1</td><td> Oval shape. </td></tr>
<tr><td><code>line</code></td><td>2</td><td> Line shape. </td></tr>
<tr><td><code>ring</code></td><td>3</td><td> Ring shape. </td></tr>
</table>
         */
        public: static const int shape = 0x0101019a;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int shareInterpolator = 0x010101bb;
        /**  Specify the name of a user ID that will be shared between multiple
         packages.  By default, each package gets its own unique user-id.
         By setting this value on two or more packages, each of these packages
         will be given a single shared user ID, so they can for example run
         in the same process.  Note that for them to actually get the same
         user ID, they must also be signed with the same signature. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int sharedUserId = 0x0101000b;
        /**  Specify a label for the shared user UID of this package.  This is
         only used if you have also used android:sharedUserId.  This must
         be a reference to a string resource; it can not be an explicit
         string. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int sharedUserLabel = 0x01010261;
        /**  Whether the view of this Preference should be disabled when
             this Preference is disabled. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int shouldDisableView = 0x010101ee;
        /**  How this item should display in the Action Bar, if present. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>never</code></td><td>0</td><td> Never show this item in an action bar, show it in the overflow menu instead.
                 Mutually exclusive with "ifRoom" and "always". </td></tr>
<tr><td><code>ifRoom</code></td><td>1</td><td> Show this item in an action bar if there is room for it as determined
                 by the system. Favor this option over "always" where possible.
                 Mutually exclusive with "never" and "always". </td></tr>
<tr><td><code>always</code></td><td>2</td><td> Always show this item in an actionbar, even if it would override
                 the system's limits of how much stuff to put there. This may make
                 your action bar look bad on some screens. In most cases you should
                 use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never". </td></tr>
<tr><td><code>withText</code></td><td>4</td><td> When this item is shown as an action in the action bar, show a text
                 label with it even if it has an icon representation. </td></tr>
<tr><td><code>collapseActionView</code></td><td>8</td><td> This item's action view collapses to a normal menu
                 item. When expanded, the action view takes over a
                 larger segment of its container. </td></tr>
</table>
         */
        public: static const int showAsAction = 0x010102d9;
        /**  Whether to show an item for a default sound. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int showDefault = 0x010101fa;
        /**  Setting for which dividers to show. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>beginning</code></td><td>1</td><td></td></tr>
<tr><td><code>middle</code></td><td>2</td><td></td></tr>
<tr><td><code>end</code></td><td>4</td><td></td></tr>
</table>
         */
        public: static const int showDividers = 0x01010329;
        /**  Specify that an Activity should be shown over the lock screen and,
         in a multiuser environment, across all users' windows 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int showOnLockScreen = 0x010103c9;
        /**  Whether to show an item for 'Silent'. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int showSilent = 0x010101fb;
        /**  Whether to draw on/off text. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int showText = 0x010104ad;
        /**  Whether do show week numbers. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int showWeekNumber = 0x0101033e;
        /**  The number of weeks to be shown. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int shownWeekCount = 0x01010341;
        /**  The zero-based index of the columns to shrink. The column indices
             must be separated by a comma: 1, 2, 5. Illegal and duplicate
             indices are ignored. You can shrink all columns by using the
             value "*" instead. Note that a column can be marked stretchable
             and shrinkable at the same time. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int shrinkColumns = 0x0101014a;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int singleChoiceItemLayout = 0x0101051b;
        /**  Constrains the text to a single horizontally scrolling line
             instead of letting it wrap onto multiple lines, and advances
             focus instead of inserting a newline when you press the
             enter key.

             The default value is false (multi-line wrapped text mode) for non-editable text, but if
             you specify any value for inputType, the default is true (single-line input field mode).

             {@deprecated This attribute is deprecated. Use <code>maxLines</code> instead to change
             the layout of a static text, and use the <code>textMultiLine</code> flag in the
             inputType attribute instead for editable text views (if both singleLine and inputType
             are supplied, the inputType flags will override the value of singleLine). } 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int singleLine = 0x0101015d;
        /**  If set to true, a single instance of this component will run for
         all users.  That instance will run as user 0, the default/primary
         user.  When the app running is in processes for other users and interacts
         with this component (by binding to a service for example) those processes will
         always interact with the instance running for user 0.  Enabling
         single user mode forces "exported" of the component to be false, to
         help avoid introducing multi-user security bugs.  This feature is only
         available to applications built in to the system image; you must hold the
         permission INTERACT_ACROSS_USERS in order
         to use this feature.  This flag can only be used with services,
         receivers, and providers; it can not be used with activities. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int singleUser = 0x010103bf;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Slide to and from the left edge of the Scene. </td></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Slide to and from the top edge of the Scene. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Slide to and from the right edge of the Scene. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Slide to and from the bottom edge of the Scene. </td></tr>
</table>
         */
        public: static const int slideEdge = 0x01010430;
        /**  Smaller icon of the authenticator. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int smallIcon = 0x0101029e;
        /**  Indicates whether the application supports smaller screen form-factors.
             A small screen is defined as one with a smaller aspect ratio than
             the traditional HVGA screen; that is, for a portrait screen, less
             tall than an HVGA screen.  In practice, this means a QVGA low
             density or VGA high density screen.  An application that does
             not support small screens <em>will not be available</em> for
             small screen devices, since there is little the platform can do
             to make such an application work on a smaller screen. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int smallScreens = 0x01010284;
        /**  When set to true, the list will use a more refined calculation
             method based on the pixels height of the items visible on screen. This
             property is set to true by default but should be set to false if your adapter
             will display items of varying heights. When this property is set to true and
             your adapter displays items of varying heights, the scrollbar thumb will
             change size as the user scrolls through the list. When set to fale, the list
             will use only the number of items in the adapter and the number of items visible
             on screen to determine the scrollbar's properties. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int smoothScrollbar = 0x01010231;
        /**  How close we need to be before snapping to a target. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int snapMargin = 0x01010556;
        /**  @hide Color for the solid color background if such for optimized rendering. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int solidColor = 0x0101034a;
        /**  Boolean that controls whether a view should have sound effects
             enabled for events such as clicking and touching. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int soundEffectsEnabled = 0x01010215;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int spacing = 0x01010113;
        /**  Default style for spinner drop down items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int spinnerDropDownItemStyle = 0x01010087;
        /**  Default spinner item style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int spinnerItemStyle = 0x01010089;
        /**  Display mode for spinner options. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>dialog</code></td><td>0</td><td> Spinner options will be presented to the user as a dialog window. </td></tr>
<tr><td><code>dropdown</code></td><td>1</td><td> Spinner options will be presented to the user as an inline dropdown
                 anchored to the spinner widget itself. </td></tr>
</table>
         */
        public: static const int spinnerMode = 0x010102f1;
        /**  Default Spinner style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int spinnerStyle = 0x01010081;
        /**  Whether the spinners are shown. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int spinnersShown = 0x0101034b;
        /**  Sets whether this ViewGroup should split MotionEvents
             to separate child views during touch event dispatch.
             If false (default), touch events will be dispatched to
             the child view where the first pointer went down until
             the last pointer goes up.
             If true, touch events may be dispatched to multiple children.
             MotionEvents for each pointer will be dispatched to the child
             view where the initial ACTION_DOWN event happened.
             See {@link android.view.ViewGroup#setMotionEventSplittingEnabled(boolean)}
             for more information. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int splitMotionEvents = 0x010102ef;
        /**  Whether to split the track and leave a gap for the thumb drawable. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int splitTrack = 0x0101044c;
        /**  Alpha value of the spot shadow projected by elevated views, between 0 and 1. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int spotShadowAlpha = 0x010104bf;
        /**  Sets a drawable as the content of this ImageView. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int src = 0x01010119;
        /**  Specify a URI scheme specific part that must exactly match, as per
             {@link android.content.IntentFilter#addDataSchemeSpecificPart
             IntentFilter.addDataSchemeSpecificPart()} with
             {@link android.os.PatternMatcher#PATTERN_LITERAL}. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int ssp = 0x010103e3;
        /**  Specify a URI scheme specific part that matches a simple pattern, as per
             {@link android.content.IntentFilter#addDataSchemeSpecificPart
             IntentFilter.addDataSchemeSpecificPart()} with
             {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
             Note that because '\' is used as an escape character when
             reading the string from XML (before it is parsed as a pattern),
             you will need to double-escape: for example a literal "*" would
             be written as "\\*" and a literal "\" would be written as
             "\\\\".  This is basically the same as what you would need to
             write if constructing the string in Java code. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int sspPattern = 0x010103e5;
        /**  Specify a URI scheme specific part that must be a prefix to match, as per
             {@link android.content.IntentFilter#addDataSchemeSpecificPart
             IntentFilter.addDataSchemeSpecificPart()} with
             {@link android.os.PatternMatcher#PATTERN_PREFIX}. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int sspPrefix = 0x010103e4;
        /**  Used by ListView and GridView to stack their content from the bottom. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int stackFromBottom = 0x010100fd;
        /**  Default StackView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int stackViewStyle = 0x0101043e;
        /**  Default Star style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int starStyle = 0x01010082;
        /**  Start color of the gradient. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int startColor = 0x0101019d;
        /**  Delay in milliseconds before the transition starts. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int startDelay = 0x010103e2;
        /**  Delay in milliseconds before the animation runs, once start time is reached. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int startOffset = 0x010101be;
        /**  {@deprecated Use minDate instead.} 
 The first year (inclusive), for example "1940".
             {@deprecated Use minDate instead.} 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int startYear = 0x0101017c;
        /**  Sets the state-based animator for the View. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int stateListAnimator = 0x01010448;
        /**  Indicates that an Activity does not need to have its freeze state
         (as returned by {@link android.app.Activity#onSaveInstanceState}
         retained in order to be restarted.  Generally you use this for activities
         that do not store any state.  When this flag is set, if for some reason
         the activity is killed before it has a chance to save its state,
         then the system will not remove it from the activity stack like
         it normally would.  Instead, the next time the user navigates to
         it its {@link android.app.Activity#onCreate} method will be called
         with a null icicle, just like it was starting for the first time.
         
         <p>This is used by the Home activity to make sure it does not get
         removed if it crashes for some reason. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int stateNotNeeded = 0x01010016;
        /**  State identifier indicating the popup will be above the anchor. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_above_anchor = 0x010100aa;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             indicating that the Drawable is in a view that is hardware accelerated.
             This means that the device can at least render a full-screen scaled
             bitmap with one layer of text and bitmaps composited on top of it
             at 60fps.  When this is set, the colorBackgroundCacheHint will be
             ignored even if it specifies a solid color, since that optimization
             is not needed. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_accelerated = 0x0101031b;
        /**  State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a View has accessibility focus. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_accessibility_focused = 0x0101054b;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or its parent has been "activated" meaning the user has currently
             marked it as being of interest.  This is an alternative representation of
             state_checked for when the state should be propagated down the view hierarchy. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_activated = 0x010102fe;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_active = 0x010100a2;
        /**  State identifier indicating that the object <var>may</var> display a check mark.
             See {@link R.attr#state_checked} for the identifier that indicates whether it is
             actually checked. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_checkable = 0x0101009f;
        /**  State identifier indicating that the object is currently checked.  See
             {@link R.attr#state_checkable} for an additional identifier that can indicate if
             any object may ever display a check, regardless of whether state_checked is
             currently set. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_checked = 0x010100a0;
        /**  State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that the Drawable is in a view that is capable of accepting a drop of
             the content currently being manipulated in a drag-and-drop operation. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_drag_can_accept = 0x01010368;
        /**  State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a drag operation (for which the Drawable's view is a valid recipient)
             is currently positioned over the Drawable. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_drag_hovered = 0x01010369;
        /**  State identifier indicating the group is empty (has no children). 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_empty = 0x010100a9;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view is enabled. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_enabled = 0x0101009e;
        /**  State identifier indicating the group is expanded. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_expanded = 0x010100a8;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_first = 0x010100a4;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_focused = 0x0101009c;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a pointer is hovering over the view. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_hovered = 0x01010367;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_last = 0x010100a6;
        /**  State for {@link android.inputmethodservice.KeyboardView KeyboardView}
                key preview background. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_long_pressable = 0x0101023c;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_middle = 0x010100a5;
        /**  State identifier indicating a TextView has a multi-line layout. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_multiline = 0x0101034d;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when the user is pressing down in a view. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_pressed = 0x010100a7;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view (or one of its parents) is currently selected. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_selected = 0x010100a1;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_single = 0x010100a3;
        /**  State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view's window has input focus. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int state_window_focused = 0x0101009d;
        /**  A resource id of a static drawable. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int staticWallpaperPreview = 0x01010331;
        /**  The color for the status bar. If the color is not opaque, consider setting
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.
             For this to take effect, the window must be drawing the system bar backgrounds with
             {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
             have been requested to be translucent with
             {@link android.R.attr#windowTranslucentStatus}.
             Corresponds to {@link android.view.Window#setStatusBarColor(int)}. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int statusBarColor = 0x01010451;
        /**  The step size of the rating. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int stepSize = 0x01010146;
        /**  If set to true, this service with be automatically stopped
             when the user remove a task rooted in an activity owned by
             the application.  The default is false. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int stopWithTask = 0x0101036a;
        /**  user visible description of the storage 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int storageDescription = 0x0101056c;
        /**  Different audio stream types. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>voice</code></td><td>0</td><td></td></tr>
<tr><td><code>system</code></td><td>1</td><td></td></tr>
<tr><td><code>ring</code></td><td>2</td><td></td></tr>
<tr><td><code>music</code></td><td>3</td><td></td></tr>
<tr><td><code>alarm</code></td><td>4</td><td></td></tr>
</table>
         */
        public: static const int streamType = 0x01010209;
        /**  The zero-based index of the columns to stretch. The column indices
             must be separated by a comma: 1, 2, 5. Illegal and duplicate
             indices are ignored. You can stretch all columns by using the
             value "*" instead. Note that a column can be marked stretchable
             and shrinkable at the same time. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int stretchColumns = 0x01010149;
        /**  Defines how columns should stretch to fill the available empty space, if any. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Stretching is disabled. </td></tr>
<tr><td><code>spacingWidth</code></td><td>1</td><td> The spacing between each column is stretched. </td></tr>
<tr><td><code>columnWidth</code></td><td>2</td><td> Each column is stretched equally. </td></tr>
<tr><td><code>spacingWidthUniform</code></td><td>3</td><td> The spacing between each column is uniformly stretched.. </td></tr>
</table>
         */
        public: static const int stretchMode = 0x01010116;
        /**  The opacity of a path stroke, as a value between 0 (completely transparent)
             and 1 (completely opaque) 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int strokeAlpha = 0x010104cb;
        /**  The color to stroke the path if not defined implies no stroke
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int strokeColor = 0x01010406;
        /**  sets the linecap for a stroked path 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>butt</code></td><td>0</td><td></td></tr>
<tr><td><code>round</code></td><td>1</td><td></td></tr>
<tr><td><code>square</code></td><td>2</td><td></td></tr>
</table>
         */
        public: static const int strokeLineCap = 0x0101040b;
        /**  sets the lineJoin for a stroked path 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>miter</code></td><td>0</td><td></td></tr>
<tr><td><code>round</code></td><td>1</td><td></td></tr>
<tr><td><code>bevel</code></td><td>2</td><td></td></tr>
</table>
         */
        public: static const int strokeLineJoin = 0x0101040c;
        /**  sets the Miter limit for a stroked path 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int strokeMiterLimit = 0x0101040d;
        /**  The width a path stroke 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int strokeWidth = 0x01010407;
        /**  Background for the section containing the action (e.g. voice search) 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int submitBackground = 0x01010488;
        /**  Specifies subtitle text used for navigationMode="normal" 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int subtitle = 0x010102d1;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int subtitleTextAppearance = 0x0101042f;
        /**  Specifies a style to use for subtitle text. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int subtitleTextStyle = 0x010102f9;
        /**  The extra value of the subtype. This string can be any string and will be passed to
             the SpellChecker.  
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int subtypeExtraValue = 0x0101039a;
        /**  The unique id for the subtype. The input method framework keeps track of enabled
             subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even
             if other attributes are different. If the ID is unspecified (by calling the other
             constructor or 0. Arrays.hashCode(new Object[] {locale, mode, extraValue,
             isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int subtypeId = 0x010103c1;
        /**  The locale of the subtype. This string should be a locale (e.g. en_US, fr_FR...)
             This is also used by the framework to know the supported locales
             of the spell checker.  
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int subtypeLocale = 0x01010399;
        /**  The success color 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int successColor = 0x01010562;
        /**  If you wish to handle an action key while a suggestion is being displayed <i>and
            selected</i>, there are two ways to handle this.  If <i>all</i> of your suggestions
            can handle the action key, you can simply define the action message using this
            attribute.  This will be added to the
            {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
            searchable activity.  To examine the string, use
            {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
            <i>Optional attribute.</i> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int suggestActionMsg = 0x010101dc;
        /**  If you wish to handle an action key while a suggestion is being displayed <i>and
            selected</i>, but you do not wish to enable this action key for every suggestion,
            then you can use this attribute to control it on a suggestion-by-suggestion basis.
            First, you must define a column (and name it here) where your suggestions will include
            the action string.  Then, in your content provider, you must provide this column, and
            when desired, provide data in this column.
            The search manager will look at your suggestion cursor, using the string
            provided here in order to select a column, and will use that to select a string from
            the cursor.  That string will be added to the
            {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to
            your searchable activity.  To examine the string, use
            {@link android.content.Intent#getStringExtra
            getStringExtra(SearchManager.ACTION_MSG)}.  <i>If the data does not exist for the
            selection suggestion, the action key will be ignored.</i><i>Optional attribute.</i> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int suggestActionMsgColumn = 0x010101dd;
        /**  Layout for query suggestion rows 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int suggestionRowLayout = 0x01010486;
        /**  The summary for the item. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int summary = 0x010101e9;
        /**  Column in data table that summarizes this data. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int summaryColumn = 0x010102a2;
        /**  The summary for the Preference in a PreferenceActivity screen when the
             CheckBoxPreference is unchecked. If separate on/off summaries are not
             needed, the summary attribute can be used instead. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int summaryOff = 0x010101f0;
        /**  The summary for the Preference in a PreferenceActivity screen when the
             CheckBoxPreference is checked. If separate on/off summaries are not
             needed, the summary attribute can be used instead. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int summaryOn = 0x010101ef;
        /**  Declare that your application will be able to deal with RTL (right to left) layouts.
             If set to  false (default value), your application will not care about RTL layouts. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int supportsRtl = 0x010103af;
        /**  Set to true if this input method supports ways to switch to
             a next input method (e.g. a globe key.). When this is true and
             InputMethodManager#shouldOfferSwitchingToNextInputMethod() returns true,
             the IME has to offer ways to invoke InputMethodManager#switchToNextInputMethod()
             accordingly.
             <p> Note that the system determines the most appropriate next input method
             and subtype in order to provide the consistent user experience in switching
             between IMEs and subtypes. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int supportsSwitchingToNextInputMethod = 0x010103eb;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int supportsUploading = 0x0101029b;
        /**  Minimum width for the switch component 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int switchMinWidth = 0x01010370;
        /**  Minimum space between the switch and caption text 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int switchPadding = 0x01010371;
        /**  Default style for switch preferences. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int switchPreferenceStyle = 0x0101036d;
        /**  Default style for the Switch widget. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int switchStyle = 0x0101043f;
        /**  TextAppearance style for text displayed on the switch thumb. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int switchTextAppearance = 0x0101036e;
        /**  The text used on the switch itself when in the "off" state.
             This should be a very SHORT string, as it appears in a small space. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int switchTextOff = 0x0101036c;
        /**  The text used on the switch itself when in the "on" state.
             This should be a very SHORT string, as it appears in a small space. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int switchTextOn = 0x0101036b;
        /**  Flag indicating whether this content provider would like to
         participate in data synchronization. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int syncable = 0x01010019;
        /**  Layout used to organize each tab's content. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int tabLayout = 0x01010533;
        /**  Determines whether the strip under the tab indicators is drawn or not. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int tabStripEnabled = 0x010102bd;
        /**  Drawable used to draw the left part of the strip underneath the tabs. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int tabStripLeft = 0x010102bb;
        /**  Drawable used to draw the right part of the strip underneath the tabs. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int tabStripRight = 0x010102bc;
        /**  Default TabWidget style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int tabWidgetStyle = 0x01010083;
        /**  Supply a tag for this view containing a String, to be retrieved
             later with {@link android.view.View#getTag View.getTag()} or
             searched for with {@link android.view.View#findViewWithTag
             View.findViewWithTag()}.  It is generally preferable to use
             IDs (through the android:id attribute) instead of tags because
             they are faster and allow for compile-time type checking. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int tag = 0x010100d1;
        /**  The name of the activity this alias should launch.  The activity
             must be in the same manifest as the alias, and have been defined
             in that manifest before the alias here.  This must use a Java-style
             naming convention to ensure the name is unique, for example
             "com.mycompany.MyName". 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int targetActivity = 0x01010202;
        /**  The class part of the ComponentName to assign to the Intent, as per
            {@link android.content.Intent#setComponent Intent.setComponent()}. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int targetClass = 0x0101002f;
        /**  Reference to an array resource that be used as description for the targets around the circle. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int targetDescriptions = 0x010103a0;
        /**  Reference to an array resource that be shown as targets around a circle. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int targetDrawables = 0x0101054f;
        /**  The id of a target on which this transition will animate changes. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int targetId = 0x010103dc;
        /**  The transitionName of the target on which this transition will animation changes. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int targetName = 0x0101044d;
        /**  The name of the application package that an Instrumentation object
         will run against. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int targetPackage = 0x01010021;
        /**  This is the SDK version number that the application is targeting.
             It is able to run on older versions (down to minSdkVersion), but
             was explicitly tested to work with the version specified here.
             Specifying this version allows the platform to disable compatibility
             code that are not required or enable newer features that are not
             available to older applications.  This may also be a string
             (such as "Donut") if this is built against a development
             branch, in which case minSdkVersion is also forced to be that
             string. 
         <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int targetSdkVersion = 0x01010270;
        /**  Specify a task name that activities have an "affinity" to.
         Use with the application tag (to supply a default affinity for all
         activities in the application), or with the activity tag (to supply
         a specific affinity for that component).
    
         <p>The default value for this attribute is the same as the package
         name, indicating that all activities in the manifest should generally
         be considered a single "application" to the user.  You can use this
         attribute to modify that behavior: either giving them an affinity
         for another task, if the activities are intended to be part of that
         task from the user's perspective, or using an empty string for
         activities that have no affinity to a task. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int taskAffinity = 0x01010012;
        /**   When closing the last activity of a task, this is the animation that is
              run on the activity of the next task (which is entering the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int taskCloseEnterAnimation = 0x010100be;
        /**   When opening an activity in a new task, this is the animation that is
              run on the activity of the old task (which is exiting the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int taskCloseExitAnimation = 0x010100bf;
        /**   When opening an activity in a new task, this is the animation that is
              run on the activity of the new task (which is entering the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int taskOpenEnterAnimation = 0x010100bc;
        /**   When opening an activity in a new task, this is the animation that is
              run on the activity of the old task (which is exiting the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int taskOpenExitAnimation = 0x010100bd;
        /**   When sending the current task to the background, this is the
              animation that is run on the top activity of the task behind
              it (which is entering the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int taskToBackEnterAnimation = 0x010100c2;
        /**   When sending the current task to the background, this is the
              animation that is run on the top activity of the current task
              (which is exiting the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int taskToBackExitAnimation = 0x010100c3;
        /**   When bringing an existing task to the foreground, this is the
              animation that is run on the top activity of the task being brought
              to the foreground (which is entering the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int taskToFrontEnterAnimation = 0x010100c0;
        /**   When bringing an existing task to the foreground, this is the
              animation that is run on the current foreground activity
              (which is exiting the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int taskToFrontExitAnimation = 0x010100c1;
        /**  This is the amount of tension. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int tension = 0x0101026a;
        /**  Option to indicate this application is only for testing purposes.
         For example, it may expose functionality or data outside of itself
         that would cause a security hole, but is useful for testing.  This
         kind of application can not be installed without the
         INSTALL_ALLOW_TEST flag, which means only through adb install.  
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int testOnly = 0x01010272;
        /**  Text to display. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int text = 0x0101014f;
        /**  Defines the alignment of the text. A heuristic is used to determine the resolved
            text alignment. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>inherit</code></td><td>0</td><td> Default </td></tr>
<tr><td><code>gravity</code></td><td>1</td><td> Default for the root view. The gravity determines the alignment, ALIGN_NORMAL,
                ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph’s
                text direction </td></tr>
<tr><td><code>textStart</code></td><td>2</td><td> Align to the start of the paragraph, e.g. ALIGN_NORMAL. </td></tr>
<tr><td><code>textEnd</code></td><td>3</td><td> Align to the end of the paragraph, e.g. ALIGN_OPPOSITE. </td></tr>
<tr><td><code>center</code></td><td>4</td><td> Center the paragraph, e.g. ALIGN_CENTER. </td></tr>
<tr><td><code>viewStart</code></td><td>5</td><td> Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
                layoutDirection is LTR, and ALIGN_RIGHT otherwise. </td></tr>
<tr><td><code>viewEnd</code></td><td>6</td><td> Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
                layoutDirection is LTR, and ALIGN_LEFT otherwise </td></tr>
</table>
         */
        public: static const int textAlignment = 0x010103b1;
        /**  Present the text in ALL CAPS. This may use a small-caps form when available. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int textAllCaps = 0x0101038c;
        /**  Default appearance of text: color, typeface, size, and style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearance = 0x01010034;
        /**  The underline color and thickness for auto correction suggestion 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceAutoCorrectionSuggestion = 0x01010411;
        /**  Text color, typeface, size, and style for the text inside of a button. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceButton = 0x01010207;
        /**  The underline color and thickness for easy correct suggestion 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceEasyCorrectSuggestion = 0x0101040f;
        /**  Default appearance of text against an inverted background:
             color, typeface, size, and style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceInverse = 0x01010035;
        /**  Text color, typeface, size, and style for "large" text. Defaults to primary text color. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceLarge = 0x01010040;
        /**  Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceLargeInverse = 0x01010043;
        /**  Text color, typeface, size, and style for the text inside of a popup menu. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceLargePopupMenu = 0x01010301;
        /**  The preferred TextAppearance for the primary text of list items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceListItem = 0x0101039e;
        /**  The preferred TextAppearance for the secondary text of list items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceListItemSecondary = 0x01010432;
        /**  The preferred TextAppearance for the primary text of small list items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceListItemSmall = 0x0101039f;
        /**  Text color, typeface, size, and style for "medium" text. Defaults to primary text color. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceMedium = 0x01010041;
        /**  Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceMediumInverse = 0x01010044;
        /**  The underline color and thickness for misspelled suggestion 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceMisspelledSuggestion = 0x01010410;
        /**  Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceSearchResultSubtitle = 0x010102a0;
        /**  Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceSearchResultTitle = 0x010102a1;
        /**  Text color, typeface, size, and style for "small" text. Defaults to secondary text color. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceSmall = 0x01010042;
        /**  Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceSmallInverse = 0x01010045;
        /**  Text color, typeface, size, and style for small text inside of a popup menu. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textAppearanceSmallPopupMenu = 0x01010302;
        /**  Drawable to use for check marks. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textCheckMark = 0x01010046;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textCheckMarkInverse = 0x01010047;
        /**  Color of text (usually same as colorForeground). 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColor = 0x01010098;
        /**  Color of list item text in alert dialogs. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorAlertDialogListItem = 0x01010306;
        /**  Color of highlighted text. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorHighlight = 0x01010099;
        /**  Color of highlighted text, when used in a light theme. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorHighlightInverse = 0x0101034f;
        /**  Color of hint text (displayed when the field is empty). 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorHint = 0x0101009a;
        /**  Inverse hint text color. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorHintInverse = 0x0101003f;
        /**  Color of link text (URLs). 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorLink = 0x0101009b;
        /**  Color of link text (URLs), when used in a light theme. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorLinkInverse = 0x01010350;
        /**  The most prominent text color.  
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorPrimary = 0x01010036;
        /**  Bright text color for use over activated backgrounds. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorPrimaryActivated = 0x01010267;
        /**  Bright text color. Only differentiates based on the disabled state. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorPrimaryDisableOnly = 0x01010037;
        /**  Primary inverse text color, useful for inverted backgrounds. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorPrimaryInverse = 0x01010039;
        /**  Bright inverse text color. Only differentiates based on the disabled state. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorPrimaryInverseDisableOnly = 0x0101028b;
        /**  Bright inverse text color. This does not differentiate the disabled state. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorPrimaryInverseNoDisable = 0x0101003d;
        /**  Bright text color. This does not differentiate the disabled state. As an example,
             buttons use this since they display the disabled state via the background and not the
             foreground text color. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorPrimaryNoDisable = 0x0101003b;
        /**  Text color for urls in search suggestions, used by things like global search and the browser. @hide 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorSearchUrl = 0x010103c3;
        /**  Secondary text color. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorSecondary = 0x01010038;
        /**  Dim text color for use over activated backgrounds. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorSecondaryActivated = 0x010103a8;
        /**  Secondary inverse text color, useful for inverted backgrounds. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorSecondaryInverse = 0x0101003a;
        /**  Dim inverse text color. This does not differentiate the disabled state. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorSecondaryInverseNoDisable = 0x0101003e;
        /**  Dim text color. This does not differentiate the disabled state. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorSecondaryNoDisable = 0x0101003c;
        /**  Tertiary text color. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorTertiary = 0x01010212;
        /**  Tertiary inverse text color, useful for inverted backgrounds. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textColorTertiaryInverse = 0x01010213;
        /**  Reference to a drawable that will be drawn under the insertion cursor. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textCursorDrawable = 0x01010362;
        /**  Defines the direction of the text. A heuristic is used to determine the resolved text
              direction of paragraphs. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>inherit</code></td><td>0</td><td> Default </td></tr>
<tr><td><code>firstStrong</code></td><td>1</td><td> Default for the root view. The first strong directional character determines the
                 paragraph direction.  If there is no strong directional character, the paragraph
                 direction is the view’s resolved layout direction. </td></tr>
<tr><td><code>anyRtl</code></td><td>2</td><td> The paragraph direction is RTL if it contains any strong RTL character, otherwise
                 it is LTR if it contains any strong LTR characters.  If there are neither, the
                 paragraph direction is the view’s resolved layout direction. </td></tr>
<tr><td><code>ltr</code></td><td>3</td><td> The paragraph direction is left to right. </td></tr>
<tr><td><code>rtl</code></td><td>4</td><td> The paragraph direction is right to left. </td></tr>
<tr><td><code>locale</code></td><td>5</td><td> The paragraph direction is coming from the system Locale. </td></tr>
</table>
         */
        public: static const int textDirection = 0x010103b0;
        /**  Variation of textEditPasteWindowLayout displayed when the clipboard is empty. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textEditNoPasteWindowLayout = 0x01010315;
        /**  The layout of the view that is displayed on top of the cursor to paste inside a
             TextEdit field. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textEditPasteWindowLayout = 0x01010314;
        /**  Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textEditSideNoPasteWindowLayout = 0x0101035f;
        /**  Used instead of textEditPasteWindowLayout when the window is moved on the side of the
             insertion cursor because it would be clipped if it were positioned on top. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textEditSidePasteWindowLayout = 0x0101035e;
        /**  Layout of the TextView item that will populate the suggestion popup window. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textEditSuggestionItemLayout = 0x01010374;
        /**  When set to true, the list will filter results as the user types. The
             List's adapter must support the Filterable interface for this to work. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int textFilterEnabled = 0x010100ff;
        /**  Indicates that the content of a non-editable TextView can be selected.
     Default value is false. EditText content is always selectable. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int textIsSelectable = 0x01010316;
        /**  The text for the button when it is not checked. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int textOff = 0x01010125;
        /**  The text for the button when it is checked. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int textOn = 0x01010124;
        /**  Sets the horizontal scaling factor for the text. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int textScaleX = 0x01010151;
        /**  Reference to a drawable that will be used to display a text selection
             anchor for positioning the cursor within text. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textSelectHandle = 0x010102c7;
        /**  Reference to a drawable that will be used to display a text selection
             anchor on the left side of a selection region. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textSelectHandleLeft = 0x010102c5;
        /**  Reference to a drawable that will be used to display a text selection
             anchor on the right side of a selection region. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textSelectHandleRight = 0x010102c6;
        /**  Reference to a style that will be used for the window containing a text
             selection anchor. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textSelectHandleWindowStyle = 0x010102c8;
        /**  Size of text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
         Supported values include the following:<p/>
    <ul>
        <li><b>px</b> Pixels</li>
        <li><b>sp</b> Scaled pixels (scaled to relative pixel size on screen). See {@link android.util.DisplayMetrics} for more information.</li>
        <li><b>pt</b> Points</li>
        <li><b>dip</b> Device independent pixels. See {@link android.util.DisplayMetrics} for more information.</li>
    </ul>
        
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int textSize = 0x01010095;
        /**  Default text typeface style. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td></td></tr>
<tr><td><code>bold</code></td><td>1</td><td></td></tr>
<tr><td><code>italic</code></td><td>2</td><td></td></tr>
</table>
         */
        public: static const int textStyle = 0x01010097;
        /**  Reference to a style that will be used for the window containing a list of possible
             text suggestions in an EditText. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textSuggestionsWindowStyle = 0x01010373;
        /**   The underline color 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int textUnderlineColor = 0x01010412;
        /**   The underline thickness 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
         */
        public: static const int textUnderlineThickness = 0x01010413;
        /**  Default TextView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int textViewStyle = 0x01010084;
        /**  The overall theme to use for an activity.  Use with either the
         application tag (to supply a default theme for all activities) or
         the activity tag (to supply a specific theme for that activity).
    
         <p>This automatically sets
         your activity's Context to use this theme, and may also be used
         for "starting" animations prior to the activity being launched (to
         better match what the activity actually looks like).  It is a reference
         to a style resource defining the theme.  If not set, the default
         system theme will be used. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int theme = 0x01010000;
        /**  Thickness of the ring. When defined, thicknessRatio is ignored. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int thickness = 0x01010260;
        /**  Thickness of the ring expressed as a ratio of the ring's width. For instance,
             if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
             This value is ignored if innerRadius is defined. Default value is 3. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int thicknessRatio = 0x0101019c;
        /**  Draws the thumb on a seekbar. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int thumb = 0x01010142;
        /**  Drawable used for the scroll bar thumb. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int thumbDrawable = 0x01010521;
        /**  Minimum height of the thumb. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int thumbMinHeight = 0x01010523;
        /**  Minimum width of the thumb. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int thumbMinWidth = 0x01010522;
        /**  An offset for the thumb that allows it to extend out of the range of the track. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int thumbOffset = 0x01010143;
        /**  Amount of padding on either side of text within the switch thumb. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int thumbTextPadding = 0x01010372;
        /**  Tint to apply to the button graphic. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int thumbTint = 0x01010471;
        /**  Blending mode used to apply the button graphic tint. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
         */
        public: static const int thumbTintMode = 0x01010472;
        /**  Reference to a the wallpaper's thumbnail bitmap. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int thumbnail = 0x010102a5;
        /**  Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>disabled</code></td><td>-1</td><td> Do not tile the bitmap. This is the default value. </td></tr>
<tr><td><code>clamp</code></td><td>0</td><td> Replicates the edge color. </td></tr>
<tr><td><code>repeat</code></td><td>1</td><td> Repeats the bitmap in both direction. </td></tr>
<tr><td><code>mirror</code></td><td>2</td><td> Repeats the shader's image horizontally and vertically, alternating
                 mirror images so that adjacent images always seam. </td></tr>
</table>
         */
        public: static const int tileMode = 0x01010201;
        /**  Defines the horizontal tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>disabled</code></td><td>-1</td><td> Do not tile the bitmap. This is the default value. </td></tr>
<tr><td><code>clamp</code></td><td>0</td><td> Replicates the edge color. </td></tr>
<tr><td><code>repeat</code></td><td>1</td><td> Repeats the bitmap horizontally. </td></tr>
<tr><td><code>mirror</code></td><td>2</td><td> Repeats the shader's image horizontally, alternating
                 mirror images so that adjacent images always seam. </td></tr>
</table>
         */
        public: static const int tileModeX = 0x01010477;
        /**  Defines the vertical tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>disabled</code></td><td>-1</td><td> Do not tile the bitmap. This is the default value. </td></tr>
<tr><td><code>clamp</code></td><td>0</td><td> Replicates the edge color. </td></tr>
<tr><td><code>repeat</code></td><td>1</td><td> Repeats the bitmap vertically. </td></tr>
<tr><td><code>mirror</code></td><td>2</td><td> Repeats the shader's image vertically, alternating
                 mirror images so that adjacent images always seam. </td></tr>
</table>
         */
        public: static const int tileModeY = 0x01010478;
        /**  The TimePicker dialog theme. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int timePickerDialogTheme = 0x0101049e;
        /**  Defines the look of the widget. Prior to the L release, the only choice was
             spinner. As of L, with the Material theme selected, the default layout is clock,
             but this attribute can be used to force spinner to be used instead. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>spinner</code></td><td>1</td><td> Time picker with spinner controls to select the time. </td></tr>
<tr><td><code>clock</code></td><td>2</td><td> Time picker with clock face to select the time. </td></tr>
</table>
         */
        public: static const int timePickerMode = 0x010104b4;
        /**  The TimePicker style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int timePickerStyle = 0x0101049d;
        /**  Specifies the time zone to use. When this attribute is specified, the
             TextClock will ignore the time zone of the system. To use the user's
             time zone, do not specify this attribute. The default value is the
             user's time zone. Please refer to {@link java.util.TimeZone} for more
             information about time zone ids. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int timeZone = 0x010103cc;
        /**  Set a tinting color for the image. By default, the tint will blend using SRC_ATOP mode. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int tint = 0x01010121;
        /**  When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
         */
        public: static const int tintMode = 0x010103fb;
        /**  The title associated with the item. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int title = 0x010101e1;
        /**  The condensed title associated with the item.  This is used in situations where the
             normal title may be too long to be displayed. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int titleCondensed = 0x010101e2;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int titleMarginBottom = 0x01010586;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int titleMarginEnd = 0x01010584;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int titleMarginStart = 0x01010583;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int titleMarginTop = 0x01010585;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int titleMargins = 0x01010582;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int titleTextAppearance = 0x0101042e;
        /**  Specifies a style to use for title text. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int titleTextStyle = 0x010102f8;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int toAlpha = 0x010101cb;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int toDegrees = 0x010101b4;
        /**  Keyframe identifier for the ending state. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int toId = 0x01010449;
        /**  The destination scene in this scene change. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int toScene = 0x010103de;
        /** <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int toXDelta = 0x010101c7;
        /** <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int toXScale = 0x010101c3;
        /** <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int toYDelta = 0x010101c9;
        /** <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int toYScale = 0x010101c5;
        /**  Background to use for toasts 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int toastFrameBackground = 0x01010508;
        /**  Default Toolbar style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int toolbarStyle = 0x010104aa;
        /**  Amount of top padding inside the gradient shape. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int top = 0x010101ae;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int topBright = 0x010100cb;
        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int topDark = 0x010100c7;
        /**  Radius of the top left corner. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int topLeftRadius = 0x010101a9;
        /**  Extra offset for the handle at the top of the SlidingDrawer. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int topOffset = 0x01010258;
        /**  Radius of the top right corner. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int topRightRadius = 0x010101aa;
        /**  Set to true if this ViewGroup blocks focus in the presence of a touchscreen. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int touchscreenBlocksFocus = 0x0101048f;
        /**  Drawable to use as the "track" that the switch thumb slides within. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int track = 0x0101036f;
        /**  Drawable used for the scroll bar track. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int trackDrawable = 0x01010524;
        /**  Sets the transcript mode for the list. In transcript mode, the list
             scrolls to the bottom to make new items visible when they are added. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>disabled</code></td><td>0</td><td> Disables transcript mode. This is the default value. </td></tr>
<tr><td><code>normal</code></td><td>1</td><td> The list will automatically scroll to the bottom when
                 a data set change notification is received and only if the last item is
                 already visible on screen. </td></tr>
<tr><td><code>alwaysScroll</code></td><td>2</td><td> The list will automatically scroll to the bottom, no matter what items
                 are currently visible. </td></tr>
</table>
         */
        public: static const int transcriptMode = 0x01010100;
        /**  x location of the pivot point around which the view will rotate and scale.
             This xml attribute sets the pivotX property of the View. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int transformPivotX = 0x01010320;
        /**  y location of the pivot point around which the view will rotate and scale.
             This xml attribute sets the pivotY property of the View. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int transformPivotY = 0x01010321;
        /**  The id of a transition to be used in a particular scene change. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int transition = 0x010103df;
        /**  Sets whether or not this ViewGroup should be treated as a single entity
             when doing an Activity transition. Typically, the elements inside a
             ViewGroup are each transitioned from the scene individually. The default
             for a ViewGroup is false unless it has a background. See
             {@link android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity,
             android.view.View, String)} for more information. Corresponds to
             {@link android.view.ViewGroup#setTransitionGroup(boolean)}.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int transitionGroup = 0x01010401;
        /**  Names a View such that it can be identified for Transitions. Names should be
             unique in the View hierarchy. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int transitionName = 0x01010400;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>together</code></td><td>0</td><td> child transitions should be played together. </td></tr>
<tr><td><code>sequential</code></td><td>1</td><td> child transitions should be played sequentially, in the same order
            as the xml. </td></tr>
</table>
         */
        public: static const int transitionOrdering = 0x010103e0;
        /**  Changes whether the transition supports appearing and/or disappearing Views.
             Corresponds to {@link android.transition.Visibility#setMode(int)}. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>mode_in</code></td><td>1</td><td> Only appearing Views will be supported. </td></tr>
<tr><td><code>mode_out</code></td><td>2</td><td> Only disappearing Views will be supported. </td></tr>
</table>
         */
        public: static const int transitionVisibilityMode = 0x0101047c;
        /**  The amount to translate the group on X coordinate 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int translateX = 0x0101045a;
        /**  The amount to translate the group on Y coordinate 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int translateY = 0x0101045b;
        /**  translation in x of the view. This value is added post-layout to the left
             property of the view, which is set by its layout. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int translationX = 0x01010322;
        /**  translation in y of the view. This value is added post-layout to the top
             property of the view, which is set by its layout. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int translationY = 0x01010323;
        /**  translation in z of the view. This value is added to its elevation. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int translationZ = 0x010103fa;
        /**  The fraction of the path to trim from the end from 0 to 1  
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int trimPathEnd = 0x01010409;
        /**  Shift trim region (allows visible region to include the start and end) from 0 to 1  
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int trimPathOffset = 0x0101040a;
        /**  The fraction of the path to trim from the start from 0 to 1 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int trimPathStart = 0x01010408;
        /**  Type of gradient. The default type is linear. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>linear</code></td><td>0</td><td> Linear gradient. </td></tr>
<tr><td><code>radial</code></td><td>1</td><td> Radial, or circular, gradient. </td></tr>
<tr><td><code>sweep</code></td><td>2</td><td> Sweep, or angled or diamond, gradient. </td></tr>
</table>
         */
        public: static const int type = 0x010101a1;
        /**  Default text typeface. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td></td></tr>
<tr><td><code>sans</code></td><td>1</td><td></td></tr>
<tr><td><code>serif</code></td><td>2</td><td></td></tr>
<tr><td><code>monospace</code></td><td>3</td><td></td></tr>
</table>
         */
        public: static const int typeface = 0x01010096;
        /**  Extra options for an activity's UI. Applies to either the {@code &lt;activity&gt;} or
         {@code &lt;application&gt;} tag. If specified on the {@code &lt;application&gt;}
         tag these will be considered defaults for all activities in the
         application. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> No extra UI options. This is the default. </td></tr>
<tr><td><code>splitActionBarWhenNarrow</code></td><td>1</td><td> Split the options menu into a separate bar at the bottom of
             the screen when severely constrained for horizontal space.
             (e.g. portrait mode on a phone.) Instead of a small number
             of action buttons appearing in the action bar at the top
             of the screen, the action bar will split into the top navigation
             section and the bottom menu section. Menu items will not be
             split across the two bars; they will always appear together. </td></tr>
</table>
         */
        public: static const int uiOptions = 0x01010398;
        /**  Color used to draw the user's strokes until we are sure it's a gesture. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int uncertainGestureColor = 0x01010276;
        /**  The color for the dates of an unfocused month. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int unfocusedMonthDateColor = 0x01010344;
        /**  Sets the alpha on the items that are not selected. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int unselectedAlpha = 0x0101020e;
        /**  Update period in milliseconds, or 0 if the AppWidget will update itself. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int updatePeriodMillis = 0x01010250;
        /**  When set to true, tells GridLayout to use default margins when none are specified
        in a view's layout parameters.
        The default value is false.
        See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int useDefaultMargins = 0x01010379;
        /**  Use the drawable's intrinsic width and height as minimum size values.
             Useful if the target drawable is a 9-patch or otherwise should not be scaled
             down beyond a minimum size. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int useIntrinsicSizeAsMinimum = 0x01010310;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int useLevel = 0x0101019f;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int userVisible = 0x01010291;
        /**  Concrete value to assign to this piece of named meta-data.
             The data can later be retrieved from the meta data Bundle
             through {@link android.os.Bundle#getString Bundle.getString},
             {@link android.os.Bundle#getInt Bundle.getInt},
             {@link android.os.Bundle#getBoolean Bundle.getBoolean},
             or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
             on the type used here. 
         <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>May be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int value = 0x01010024;
        /**  Value the animation starts from. 
         <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int valueFrom = 0x010102de;
        /**  Value the animation animates to. 
         <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int valueTo = 0x010102df;
        /**  The type of valueFrom and valueTo. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>floatType</code></td><td>0</td><td> valueFrom and valueTo are floats. This is the default value is valueType is
                 unspecified. Note that if either valueFrom or valueTo represent colors
                 (beginning with "#"), then this attribute is ignored and the color values are
                 interpreted as integers. </td></tr>
<tr><td><code>intType</code></td><td>1</td><td> valueFrom and valueTo are integers. </td></tr>
<tr><td><code>pathType</code></td><td>2</td><td> valueFrom and valueTo are paths defined as strings.
                 This type is used for path morphing in AnimatedVectorDrawable. </td></tr>
</table>
         */
        public: static const int valueType = 0x010102e0;
        /**  If true, allows the drawable's padding to change based on the
             current state that is selected.  If false, the padding will
             stay the same (based on the maximum padding of all the states).
             Enabling this feature requires that the owner of the drawable
             deal with performing layout when the state changes, which is
             often not supported. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int variablePadding = 0x01010195;
        /**  The vendor name if this print service is vendor specific. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int vendor = 0x010103e7;
        /**  Internal version code.  This is the number used to determine whether
         one version is more recent than another: it has no other meaning than
         that higher numbers are more recent.  You could use this number to
         encode a "x.y" in the lower and upper 16 bits, make it a build
         number, simply increase it by one each time a new version is
         released, or define it however else you want, as long as each
         successive version has a higher number.  This is not a version
         number generally shown to the user, that is usually supplied 
         with {@link android.R.attr#versionName}. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int versionCode = 0x0101021b;
        /**  The text shown to the user to indicate the version they have.  This
         is used for no other purpose than display to the user; the actual
         significant version number is given by {@link android.R.attr#versionCode}. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int versionName = 0x0101021c;
        /**  Amount to offset the touch Y coordinate by, for bias correction. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int verticalCorrection = 0x0101023a;
        /**  Default vertical divider between menu items. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int verticalDivider = 0x0101012e;
        /**  Default vertical gap between rows of keys. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int verticalGap = 0x01010240;
        /**  Determines which side the vertical scroll bar should be placed on. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>defaultPosition</code></td><td>0</td><td> Place the scroll bar wherever the system default determines. </td></tr>
<tr><td><code>left</code></td><td>1</td><td> Place the scroll bar on the left. </td></tr>
<tr><td><code>right</code></td><td>2</td><td> Place the scroll bar on the right. </td></tr>
</table>
         */
        public: static const int verticalScrollbarPosition = 0x01010334;
        /**  Defines the default vertical spacing between rows. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int verticalSpacing = 0x01010115;
        /**  Tactile feedback duration for actions. Set to '0' for no vibration. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int vibrationDuration = 0x01010555;
        /**  The height of the canvas the drawing is on. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int viewportHeight = 0x01010403;
        /**  The width of the canvas the drawing is on. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int viewportWidth = 0x01010402;
        /**  @hide The drawable for pressed virtual (increment/decrement) buttons. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int virtualButtonPressedDrawable = 0x01010544;
        /**  Controls the initial visibility of the view.  
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>visible</code></td><td>0</td><td> Visible on screen; the default value. </td></tr>
<tr><td><code>invisible</code></td><td>1</td><td> Not displayed, but taken into account during layout (space is left for it). </td></tr>
<tr><td><code>gone</code></td><td>2</td><td> Completely hidden, as if the view had not been added. </td></tr>
</table>
         */
        public: static const int visibility = 0x010100dc;
        /**  Provides initial visibility state of the drawable; the default
             value is false.  See
             {@link android.graphics.drawable.Drawable#setVisible}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int visible = 0x01010194;
        /**  Flag indicating whether the application requests the VM to operate in
         the safe mode.  
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int vmSafeMode = 0x010102b8;
        /**  Voice button icon 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int voiceIcon = 0x01010484;
        /**  If provided, this specifies the spoken language to be expected, and that it will be
             different than the one set in the {@link java.util.Locale#getDefault()}. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int voiceLanguage = 0x01010255;
        /**  If provided, this specifies the language model that should be used by the
             voice recognition system.  See
             {@link android.speech.RecognizerIntent#EXTRA_LANGUAGE_MODEL } for more information.
             If not provided, the default value
             {@link android.speech.RecognizerIntent#LANGUAGE_MODEL_FREE_FORM } will be used. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int voiceLanguageModel = 0x01010253;
        /**  If provided, enforces the maximum number of results to return, including the "best"
             result which will always be provided as the SEARCH intent's primary query.  Must be one
             or greater.  If not provided, the recognizer will choose how many results to return.
             
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int voiceMaxResults = 0x01010256;
        /**  If provided, this specifies a prompt that will be displayed during voice input. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int voicePromptText = 0x01010254;
        /**  Voice search features are controlled by mode bits in this field.  Omitting
            this field, or setting to zero, provides default behavior.
            If showVoiceSearchButton is set, then launchWebSearch or launchRecognizer must
            also be set.  <i>Optional attribute.</i>
        
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>showVoiceSearchButton</code></td><td>0x01</td><td> If set, display a voice search button.  This only takes effect if voice search is
               available on the device. </td></tr>
<tr><td><code>launchWebSearch</code></td><td>0x02</td><td> If set, the voice search button will take the user directly to a built-in
               voice web search activity.  Most applications will not use this flag, as it
               will take the user away from the activity in which search was invoked. </td></tr>
<tr><td><code>launchRecognizer</code></td><td>0x04</td><td> If set, the voice search button will take the user directly to a built-in
               voice recording activity.  This activity will prompt the user to speak,
               transcribe the spoken text, and forward the resulting query
               text to the searchable activity, just as if the user had typed it into
               the search UI and clicked the search button. </td></tr>
</table>
         */
        public: static const int voiceSearchMode = 0x01010252;
        /**   When opening a new activity that hides the wallpaper, while
              currently showing the wallpaper, this is the animation that
              is run on the new activity (which is entering the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int wallpaperCloseEnterAnimation = 0x01010295;
        /**   When opening a new activity that hides the wallpaper, while
              currently showing the wallpaper, this is the animation that
              is run on the old wallpaper activity (which is exiting the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int wallpaperCloseExitAnimation = 0x01010296;
        /**   When closing a foreround activity that is on top of the wallpaper
              when the previous activity is also on top of the wallpaper,
              this is the animation that is run on the previous activity
              (which is entering the screen).  The wallpaper remains
              static behind the animation. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int wallpaperIntraCloseEnterAnimation = 0x01010299;
        /**   When closing a foreround activity that is on top of the wallpaper
              when the previous activity is also on top of the wallpaper,
              this is the animation that is run on the current activity
              (which is exiting the screen).  The wallpaper remains
              static behind the animation. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int wallpaperIntraCloseExitAnimation = 0x0101029a;
        /**   When opening a new activity that is on top of the wallpaper
              when the current activity is also on top of the wallpaper,
              this is the animation that is run on the new activity
              (which is entering the screen).  The wallpaper remains
              static behind the animation. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int wallpaperIntraOpenEnterAnimation = 0x01010297;
        /**   When opening a new activity that is on top of the wallpaper
              when the current activity is also on top of the wallpaper,
              this is the animation that is run on the current activity
              (which is exiting the screen).  The wallpaper remains
              static behind the animation. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int wallpaperIntraOpenExitAnimation = 0x01010298;
        /**   When opening a new activity that shows the wallpaper, while
              currently not showing the wallpaper, this is the animation that
              is run on the new wallpaper activity (which is entering the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int wallpaperOpenEnterAnimation = 0x01010293;
        /**   When opening a new activity that shows the wallpaper, while
              currently not showing the wallpaper, this is the animation that
              is run on the current activity (which is exiting the screen). 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int wallpaperOpenExitAnimation = 0x01010294;
        /**  Default WebTextView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int webTextViewStyle = 0x010102b9;
        /**  Default WebView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int webViewStyle = 0x01010085;
        /**  The text appearance for the week day abbreviation of the calendar header. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int weekDayTextAppearance = 0x01010348;
        /**  The color for the week numbers. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int weekNumberColor = 0x01010345;
        /**  The color for the separator line between weeks. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public: static const int weekSeparatorLineColor = 0x01010346;
        /**  Defines the maximum weight sum. If unspecified, the sum is computed
             by adding the layout_weight of all of the children. This can be
             used for instance to give a single child 50% of the total available
             space by giving it a layout_weight of 0.5 and setting the weightSum
             to 1.0. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int weightSum = 0x01010128;
        /**  Optional parameter which indicates where this widget can be shown,
             ie. home screen, keyguard, search bar or any combination thereof.
             Supports combined values using | operator. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>home_screen</code></td><td>0x1</td><td></td></tr>
<tr><td><code>keyguard</code></td><td>0x2</td><td></td></tr>
<tr><td><code>searchbox</code></td><td>0x4</td><td></td></tr>
</table>
         */
        public: static const int widgetCategory = 0x010103c4;
        /**  The layout for the controllable widget portion of a Preference. This is inflated
             into the layout for a Preference and should be used more frequently than
             the layout attribute. For example, a checkbox preference would specify
             a custom layout (consisting of just the CheckBox) here. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int widgetLayout = 0x010101eb;
        /**  Makes the TextView be exactly this many pixels wide.
             You could get the same effect by specifying this number in the
             layout parameters. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int width = 0x01010159;
        /**  Flag indicating whether this window should have an Action Bar
             in place of the usual title bar. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowActionBar = 0x010102cd;
        /**  Internal layout used internally for window decor 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowActionBarFullscreenDecorLayout = 0x01010419;
        /**  Flag indicating whether this window's Action Bar should overlay
             application content. Does nothing if the window would not
             have an Action Bar. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowActionBarOverlay = 0x010102e4;
        /**  Flag indicating whether action modes should overlay window content
             when there is not reserved space for their UI (such as an Action Bar). 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowActionModeOverlay = 0x010102dd;
        /**  Flag indicating whether this window allows Activity Transitions.
             Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowActivityTransitions = 0x010104cd;
        /**  Flag indicating whether this Window's transition should overlap with
             the exiting transition of the calling Activity. Corresponds to
             {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowAllowEnterTransitionOverlap = 0x0101043c;
        /**  Flag indicating whether this Window's transition should overlap with
             the exiting transition of the called Activity when the called Activity
             finishes. Corresponds to
             {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowAllowReturnTransitionOverlap = 0x0101043b;
        /**  Reference to a style resource holding
             the set of window animations to use, which can be
             any of the attributes defined by
             {@link android.R.styleable#WindowAnimation}. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowAnimationStyle = 0x010100ae;
        /**  Drawable to use as the overall window background.  As of
             {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
             be a selector that uses state_accelerated to pick a non-solid
             color when running on devices that can draw such a bitmap
             with complex compositing on top at 60fps.

             <p>There are a few special considerations to use when setting this
             drawable:
             <ul>
             <li> This information will be used to infer the pixel format
                  for your window's surface.  If the drawable has any
                  non-opaque pixels, your window will be translucent
                  (32 bpp).
             <li> If you want to draw the entire background
                  yourself, you should set this drawable to some solid
                  color that closely matches that background (so the
                  system's preview of your window will match), and
                  then in code manually set your window's background to
                  null so it will not be drawn.
             </ul> 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowBackground = 0x01010054;
        /**  Drawable to draw selectively within the inset areas when the windowBackground
             has been set to null. This protects against seeing visual garbage in the
             surface when the app has not drawn any content into this area. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowBackgroundFallback = 0x01010418;
        /**  Whether to clip window content to the outline of the window background. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowClipToOutline = 0x010104ab;
        /**  Control whether a container should automatically close itself if
             the user touches outside of it.  This only applies to activities
             and dialogs.

             <p>Note: this attribute will only be respected for applications
             that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
             or later. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowCloseOnTouchOutside = 0x0101035b;
        /**  This Drawable is overlaid over the foreground of the Window's content area, usually
             to place a shadow below the title.  
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowContentOverlay = 0x01010059;
        /**  Reference to a TransitionManager XML resource defining the desired
             transitions between different window content. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowContentTransitionManager = 0x010103f9;
        /**  Flag indicating whether this window requests that content changes be performed
             as scene changes with transitions. Corresponds to
             {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowContentTransitions = 0x010103f8;
        /**  Flag allowing you to disable the preview animation for a window.
             The default value is false; if set to true, the system can never
             use the window's theme to show a preview of it before your
             actual instance is shown to the user. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowDisablePreview = 0x01010222;
        /**  Flag indicating whether this Window is responsible for drawing the background for the
             system bars. If true and the window is not floating, the system bars are drawn with a
             transparent background and the corresponding areas in this window are filled with the
             colors specified in {@link android.R.attr#statusBarColor} and
             {@link android.R.attr#navigationBarColor}. Corresponds to
             {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowDrawsSystemBarBackgrounds = 0x01010450;
        /**  Elevation to use for the window. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowElevation = 0x01010490;
        /**  Flag indicating that this window should allow touches to be split
             across other windows that also support split touch.
             The default value is true for applications with a targetSdkVersion
             of Honeycomb or newer; false otherwise.
             When this flag is false, the first pointer that goes down determines
             the window to which all subsequent touches go until all pointers go up.
             When this flag is true, each pointer (not necessarily the first) that
             goes down determines the window to which all subsequent touches of that
             pointer will go until that pointers go up thereby enabling touches
             with multiple pointers to be split across multiple windows. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowEnableSplitTouch = 0x01010317;
        /**  The animation used when a window is being added. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowEnterAnimation = 0x010100b4;
        /**  Reference to a Transition XML resource defining the desired Transition
             used to move Views into the initial Window's content Scene. Corresponds to
             {@link android.view.Window#setEnterTransition(android.transition.Transition)}. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowEnterTransition = 0x01010437;
        /**  The animation used when a window is being removed. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowExitAnimation = 0x010100b5;
        /**  Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the Window's content Scene when launching a new Activity.
             Corresponds to
             {@link android.view.Window#setExitTransition(android.transition.Transition)}. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowExitTransition = 0x01010438;
        /**  A fixed height for the window along the major axis of the screen,
             that is, when in portrait. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowFixedHeightMajor = 0x01010516;
        /**  A fixed height for the window along the minor axis of the screen,
             that is, when in landscape. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowFixedHeightMinor = 0x01010514;
        /**  A fixed width for the window along the major axis of the screen,
             that is, when in landscape. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowFixedWidthMajor = 0x01010513;
        /**  A fixed width for the window along the minor axis of the screen,
             that is, when in portrait. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowFixedWidthMinor = 0x01010515;
        /**  Drawable to use as a frame around the window. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowFrame = 0x01010055;
        /**  Flag indicating whether this window should fill the entire screen.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowFullscreen = 0x0101020d;
        /**  The animation used when a window is going from VISIBLE to INVISIBLE. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowHideAnimation = 0x010100b7;
        /**  Flag indicating whether this is a floating window. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowIsFloating = 0x01010057;
        /**  Flag indicating whether this is a translucent window. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowIsTranslucent = 0x01010058;
        /**  The minimum width the window is allowed to be, along the major
             axis of the screen.  That is, when in landscape.  Can be either
             an absolute dimension or a fraction of the screen size in that
             dimension. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowMinWidthMajor = 0x01010356;
        /**  The minimum width the window is allowed to be, along the minor
             axis of the screen.  That is, when in portrait.  Can be either
             an absolute dimension or a fraction of the screen size in that
             dimension. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowMinWidthMinor = 0x01010357;
        /**  Flag indicating that this window should not be displayed at all.
             The default value is false; if set to true, and this window is
             the main window of an Activity, then it will never actually
             be added to the window manager.  This means that your activity
             must immediately quit without waiting for user interaction,
             because there will be no such interaction coming. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowNoDisplay = 0x0101021e;
        /**  Flag indicating whether there should be no title on this window. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowNoTitle = 0x01010056;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowOutsetBottom = 0x01010517;
        /**  Flag indicating whether this window should extend into overscan region.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowOverscan = 0x010103cf;
        /**  Reference to a Transition XML resource defining the desired Transition
             used to move Views in to the scene when returning from a previously-started Activity.
             Corresponds to
             {@link android.view.Window#setReenterTransition(android.transition.Transition)}. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowReenterTransition = 0x010104af;
        /**  Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the scene when the Window is
             preparing to close. Corresponds to
             {@link android.view.Window#setReturnTransition(android.transition.Transition)}. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowReturnTransition = 0x010104ae;
        /**  Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred into the Window's initial content Scene.
             Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
             android.transition.Transition)}. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowSharedElementEnterTransition = 0x01010439;
        /**  Reference to a Transition XML resource defining the desired Transition
             used when starting a new Activity to move shared elements prior to transferring
             to the called Activity.
             Corresponds to {@link android.view.Window#setSharedElementExitTransition(
             android.transition.Transition)}. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowSharedElementExitTransition = 0x0101043a;
        /**  Reference to a Transition XML resource defining the desired Transition
             used for shared elements transferred back to a calling Activity.
             Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
             android.transition.Transition)}. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowSharedElementReenterTransition = 0x010104b1;
        /**  Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred back to a calling Activity.
             Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
             android.transition.Transition)}. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowSharedElementReturnTransition = 0x010104b0;
        /**  Indicates whether or not shared elements should use an overlay
             during transitions. The default value is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowSharedElementsUseOverlay = 0x010104bb;
        /**  The animation used when a window is going from INVISIBLE to VISIBLE. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowShowAnimation = 0x010100b6;
        /**  Flag indicating that this window's background should be the
             user's current wallpaper.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowShowWallpaper = 0x01010292;
        /**  Defines the default soft input state that this window would
             like when it is displayed.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#softInputMode}. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>stateUnspecified</code></td><td>0</td><td> Not specified, use what the system thinks is best.  This
                 is the default. </td></tr>
<tr><td><code>stateUnchanged</code></td><td>1</td><td> Leave the soft input window as-is, in whatever state it
                 last was. </td></tr>
<tr><td><code>stateHidden</code></td><td>2</td><td> Make the soft input area hidden when normally appropriate
                 (when the user is navigating forward to your window). </td></tr>
<tr><td><code>stateAlwaysHidden</code></td><td>3</td><td> Always make the soft input area hidden when this window
                 has input focus. </td></tr>
<tr><td><code>stateVisible</code></td><td>4</td><td> Make the soft input area visible when normally appropriate
                 (when the user is navigating forward to your window). </td></tr>
<tr><td><code>stateAlwaysVisible</code></td><td>5</td><td> Always make the soft input area visible when this window
                 has input focus. </td></tr>
<tr><td><code>adjustUnspecified</code></td><td>0x00</td><td> The window resize/pan adjustment has not been specified,
                 the system will automatically select between resize and pan
                 modes, depending
                 on whether the content of the window has any layout views
                 that can scroll their contents.  If there is such a view,
                 then the window will be resized, with the assumption being
                 that the resizeable area can be reduced to make room for
                 the input UI. </td></tr>
<tr><td><code>adjustResize</code></td><td>0x10</td><td> Always resize the window: the content area of the window is
                 reduced to make room for the soft input area. </td></tr>
<tr><td><code>adjustPan</code></td><td>0x20</td><td> Don't resize the window to make room for the soft input area;
                 instead pan the contents of the window as focus moves inside
                 of it so that the user can see what they are typing.  This is
                 generally less desireable than panning because the user may
                 need to close the input area to get at and interact with
                 parts of the window. </td></tr>
<tr><td><code>adjustNothing</code></td><td>0x30</td><td> Don't resize <em>or</em> pan the window to make room for the
                 soft input area; the window is never adjusted for it. </td></tr>
</table>
         */
        public: static const int windowSoftInputMode = 0x0101022b;
        /**  Flag to indicate that a window can be swiped away to be dismissed.
             Corresponds to {@link android.view.Window#FEATURE_SWIPE_TO_DISMISS} 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowSwipeToDismiss = 0x010103f3;
        /**  The style resource to use for a window's title area. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowTitleBackgroundStyle = 0x0101005c;
        /**  The style resource to use for a window's title bar height. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowTitleSize = 0x0101005a;
        /**  The style resource to use for a window's title text. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int windowTitleStyle = 0x0101005b;
        /**  The duration, in milliseconds, of the window background fade duration
             when transitioning into or away from an Activity when called with an
             Activity Transition. Corresponds to
             {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowTransitionBackgroundFadeDuration = 0x01010461;
        /**  Flag indicating whether this window requests a translucent navigation bar.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowTranslucentNavigation = 0x010103f0;
        /**  Flag indicating whether this window requests a translucent status bar.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int windowTranslucentStatus = 0x010103ef;
        /**  A specific {@link android.R.attr#permission} name for write
         access to a {@link android.content.ContentProvider}.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int writePermission = 0x01010008;
        /**  A coordinate in the X dimension. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int x = 0x010100ac;
        /**  Indicates whether the application supports extra large screen form-factors. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int xlargeScreens = 0x010102bf;
        /**  A coordinate in the Y dimension. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int y = 0x010100ad;
        /**  The list year's text appearance in the list. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int yearListItemTextAppearance = 0x01010499;
        /**  The list year's selected circle color in the list. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public: static const int yearListSelectorColor = 0x0101049a;
        /**  Default style for YesNoPreference. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public: static const int yesNoPreferenceStyle = 0x01010090;
        /**  Allows for an adjustment of the Z ordering of the content being
             animated for the duration of the animation.  The default value is normal. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> The content being animated be kept in its current Z order. </td></tr>
<tr><td><code>top</code></td><td>1</td><td> The content being animated is forced on top of all other
                 content for the duration of the animation. </td></tr>
<tr><td><code>bottom</code></td><td>-1</td><td> The content being animated is forced under all other
                 content for the duration of the animation. </td></tr>
</table>
         */
        public: static const int zAdjustment = 0x010101c1;
    };
    public: class bool_ {
        /**  Default value used to block data calls if ims is not
         connected.  If you use the ims apn DCT will block
         any other apn from connecting until ims apn is connected
         */
        public: static const int ImsConnectedDefaultValue = 0x0112000e;
        public: static const int action_bar_embed_tabs = 0x01120004;
        public: static const int action_bar_embed_tabs_pre_jb = 0x01120005;
        public: static const int action_bar_expanded_action_views_exclusive = 0x01120009;
        /**  Whether action menu items should be displayed in ALLCAPS or not.
         Defaults to true. If this is not appropriate for specific locales
         it should be disabled in that locale's resources. 
         */
        public: static const int config_actionMenuItemAllCaps = 0x01120050;
        /**  Whether action menu items should obey the "withText" showAsAction
         flag. This may be set to false for situations where space is
         extremely limited. 
         */
        public: static const int config_allowActionMenuItemTextWithIcon = 0x01120051;
        /**  If true, the screen can be rotated via the accelerometer in all 4
         rotations as the default behavior. 
 If true, the screen can be rotated via the accelerometer in all 4
         rotations as the default behavior. 
         */
        public: static const int config_allowAllRotations = 0x01120026;
        /**  Set to true if the RSSI should always display CDMA signal strength even on EVDO 
         */
        public: static const int config_alwaysUseCdmaRssi = 0x0112004d;
        /**  If this is true, the screen will fade off. 
 If this is true, the screen will fade off. 
         */
        public: static const int config_animateScreenLights = 0x01120023;
        /**  Don't name config resources like this.  It should look like config_annoyDianne 
         */
        public: static const int config_annoy_dianne = 0x01120020;
        public: static const int config_auto_attach_data_on_creation = 0x01120077;
        /**  Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set 
 Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set 
         */
        public: static const int config_automatic_brightness_available = 0x0112001f;
        /**  Device configuration indicating whether we should avoid using accelerated graphics
         in certain places to reduce RAM footprint.  This is ignored if ro.config.low_ram
         is true (in that case this is assumed true as well).  It can allow you to tune down
         your device's memory use without going to the point of causing applications to turn
         off features. 
         */
        public: static const int config_avoidGfxAccel = 0x01120015;
        /**  Indicate whether the SD card is accessible without removing the battery. 
         */
        public: static const int config_batterySdCardAccessibility = 0x0112002c;
        /**  Boolean indicating if current platform need do one-time bluetooth address
         re-validation 
         */
        public: static const int config_bluetooth_address_validation = 0x01120041;
        /**  Enable/disable default bluetooth profiles:
        HSP_AG, ObexObjectPush, Audio, NAP 
         */
        public: static const int config_bluetooth_default_profiles = 0x01120045;
        /**  Boolean indicating if current platform supports BLE peripheral mode 
         */
        public: static const int config_bluetooth_le_peripheral_mode_supported = 0x01120042;
        /**  Boolean indicating if current platform supports bluetooth SCO for off call
    use cases 
         */
        public: static const int config_bluetooth_sco_off_call = 0x0112003f;
        /**  Boolean indicating if current platform supports bluetooth wide band
         speech 
         */
        public: static const int config_bluetooth_wide_band_speech = 0x01120040;
        /**  Enables built-in SIP phone capability 
         */
        public: static const int config_built_in_sip_phone = 0x01120047;
        /**  Whether camera shutter sound is forced or not  (country specific). 
 Whether camera shutter sound is forced or not  (country specific). 
 Whether camera shutter sound is forced or not  (country specific). 
         */
        public: static const int config_camera_sound_forced = 0x01120063;
        /**  Control whether being in the car dock should enable accelerometer based
         screen orientation.  This defaults to true because putting a device in
         a car dock make the accelerometer more a physical input (like a lid). 
         */
        public: static const int config_carDockEnablesAccelerometer = 0x0112002a;
        /**  Flag specifying whether VoLTE & VT should be available for carrier: independent of
         carrier provisioning. If false: hard disabled. If true: then depends on carrier
         provisioning, availability etc 
 Flag specifying whether VoLTE & VT should be available for carrier: independent of
         carrier provisioning. If false: hard disabled. If true: then depends on carrier
         provisioning, availability etc 
 Flag specifying whether VoLTE & VT should be available for carrier: independent of
         carrier provisioning. If false: hard disabled. If true: then depends on carrier
         provisioning, availability etc 
         */
        public: static const int config_carrier_volte_vt_available = 0x01120074;
        /**  Set to true to add links to Cell Broadcast app from Settings and MMS app. 
 Set to true to add links to Cell Broadcast app from Settings and MMS app. 
 XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.
         Please don't copy them, copy anything else. 
 Set to true to add links to Cell Broadcast app from Settings and MMS app. 
         */
        public: static const int config_cellBroadcastAppLinks = 0x0112005b;
        /**  Whether dialogs should close automatically when the user touches outside
         of them.  This should not normally be modified. 
         */
        public: static const int config_closeDialogWhenTouchOutside = 0x01120014;
        /**  Control whether being in the desk dock should enable accelerometer
         based screen orientation.  This defaults to true because it is
         common for desk docks to be sold in a variety of form factors
         with different orientations.  Since we cannot always tell these docks
         apart and the docks cannot report their true orientation on their own,
         we rely on gravity to determine the effective orientation. 
         */
        public: static const int config_deskDockEnablesAccelerometer = 0x01120029;
        /**  Flag specifying whether VoLTE & VT is availasble on device 
         */
        public: static const int config_device_volte_vt_available = 0x01120073;
        /**  Allow the menu hard key to be disabled in LockScreen on some devices 
         */
        public: static const int config_disableMenuKeyInLockScreen = 0x0112002f;
        /**  If true, then we do not ask user for permission for apps to connect to USB devices.
         Do not set this to true for production devices. Doing so will cause you to fail CTS. 
         */
        public: static const int config_disableUsbPermissionDialogs = 0x0112005e;
        /**  Set to true if we need to not prefer an APN.
         This is being added to enable a simple scenario of pre-paid
         provisioning on some carriers, working around a bug (7305641)
         where if the preferred is used we don't try the others. 
         */
        public: static const int config_dontPreferApn = 0x01120064;
        /**  If true, the doze component is not started until after the screen has been
         turned off and the screen off animation has been performed. 
         */
        public: static const int config_dozeAfterScreenOff = 0x01120058;
        /**  If supported and enabled, are dreams activated when docked? (by default) 
         */
        public: static const int config_dreamsActivatedOnDockByDefault = 0x01120055;
        /**  If supported and enabled, are dreams activated when asleep and charging? (by default) 
         */
        public: static const int config_dreamsActivatedOnSleepByDefault = 0x01120056;
        /**  If supported, are dreams enabled? (by default) 
         */
        public: static const int config_dreamsEnabledByDefault = 0x01120054;
        /**  Are we allowed to dream while not plugged in? 
         */
        public: static const int config_dreamsEnabledOnBattery = 0x01120057;
        /**  Specifies whether the dreams feature should be supported.
         When true, the system will allow the user to configure dreams (screensavers)
         to launch when a user activity timeout occurs or the system is told to nap.
         When false, the dreams feature will be disabled (this does not affect dozing).

         Consider setting this resource to false or disabling dreams by default when a
         doze component is specified below since dreaming will supercede dozing and
         will prevent the system from entering a low power state until the dream ends. 
         */
        public: static const int config_dreamsSupported = 0x01120053;
        /**  If this value is true, duplicate Source/Destination port fields
         in WDP header of some carriers OMADM wap push are supported.
         ex: MSGTYPE-TotalSegments-CurrentSegment
             -SourcePortDestPort-SourcePortDestPort-OMADM PDU
         If false, not supported. 
 If this value is true, duplicate Source/Destination port fields
         in WDP header of some carriers OMADM wap push are supported.
         ex: MSGTYPE-TotalSegments-CurrentSegment
             -SourcePortDestPort-SourcePortDestPort-OMADM PDU
         If false, not supported. 
         */
        public: static const int config_duplicate_port_omadm_wappush = 0x0112004e;
        /**  Whether to enable Hardware Activity-Recognition overlay which allows Hardware
         Activity-Recognition to be replaced by an app at run-time. When disabled, only the
         config_activityRecognitionHardwarePackageName package will be searched for
         its implementation, otherwise packages whose signature matches the
         signatures of config_locationProviderPackageNames will be searched, and
         the service with the highest version number will be picked. Anyone who
         wants to disable the overlay mechanism can set it to false.
         
         */
        public: static const int config_enableActivityRecognitionHardwareOverlay = 0x0112003e;
        /**  Whether to enable fused location provider overlay which allows fused
         location provider to be replaced by an app at run-time. When disabled,
         only the config_fusedLocationProviderPackageName package will be
         searched for fused location provider, otherwise packages whose
         signature matches the signatures of config_locationProviderPackageNames
         will be searched, and the service with the highest version number will
         be picked. Anyone who wants to disable the overlay mechanism can set it
         to false.
         
         */
        public: static const int config_enableFusedLocationOverlay = 0x0112003a;
        /**  Whether to enable geocoder overlay which allows geocoder to be replaced
         by an app at run-time. When disabled, only the
         config_geocoderProviderPackageName package will be searched for
         geocoder, otherwise packages whose signature matches the signatures of
         config_locationProviderPackageNames will be searched, and the service
         with the highest version number will be picked. Anyone who wants to
         disable the overlay mechanism can set it to false.
         
         */
        public: static const int config_enableGeocoderOverlay = 0x0112003c;
        /**  Whether to enable geofence overlay which allows geofence to be replaced
         by an app at run-time. When disabled, only the
         config_geofenceProviderPackageName package will be searched for
         geofence implementation, otherwise packages whose signature matches the
         signatures of config_locationProviderPackageNames will be searched, and
         the service with the highest version number will be picked. Anyone who
         wants to disable the overlay mechanism can set it to false.
         
         */
        public: static const int config_enableGeofenceOverlay = 0x0112003d;
        /**  Whether to enable Hardware FLP overlay which allows Hardware FLP to be
         replaced by an app at run-time. When disabled, only the
         config_hardwareFlpPackageName package will be searched for Hardware Flp,
         otherwise packages whose signature matches the signatures of
         config_locationProviderPackageNames will be searched, and the service
         with the highest version number will be picked. Anyone who wants to
         disable the overlay mechanism can set it to false.
         
         */
        public: static const int config_enableHardwareFlpOverlay = 0x0112003b;
        /**  Don't show lock screen before unlock screen (PIN/pattern/password) 
         */
        public: static const int config_enableLockBeforeUnlockScreen = 0x01120030;
        /**  Disable lockscreen rotation by default 
 Enable lockscreen rotation 
         */
        public: static const int config_enableLockScreenRotation = 0x01120031;
        /**  Enable lockscreen translucent decor by default 
         */
        public: static const int config_enableLockScreenTranslucentDecor = 0x01120032;
        /**  Whether UI for multi user should be shown 
  Whether Multiuser UI should be shown 
         */
        public: static const int config_enableMultiUserUI = 0x0112005d;
        /**  Whether to enable network location overlay which allows network
         location provider to be replaced by an app at run-time. When disabled,
         only the config_networkLocationProviderPackageName package will be
         searched for network location provider, otherwise packages whose
         signature matches the signatures of config_locationProviderPackageNames
         will be searched, and the service with the highest version number will
         be picked. Anyone who wants to disable the overlay mechanism can set it
         to false.
         
         */
        public: static const int config_enableNetworkLocationOverlay = 0x01120039;
        /**  If this is true, key chords can be used to take a screenshot on the device. 
         */
        public: static const int config_enableScreenshotChord = 0x01120024;
        /**  Enable translucent decor by default 
         */
        public: static const int config_enableTranslucentDecor = 0x01120033;
        /**  True if WallpaperService is enabled 
         */
        public: static const int config_enableWallpaperService = 0x01120038;
        /**  Whether WiFi display is supported by this device.
         There are many prerequisites for this feature to work correctly.
         Here are a few of them:
         * The WiFi radio must support WiFi P2P.
         * The WiFi radio must support concurrent connections to the WiFi display and
           to an access point.
         * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
           remote submix module.  This module is used to record and stream system
           audio output to the WiFi display encoder in the media server.
         * The remote submix module "audio.r_submix.default" must be installed on the device.
         * The device must be provisioned with HDCP keys (for protected content).
    
 Whether WiFi display is supported by this device.
         There are many prerequisites for this feature to work correctly.
         Here are a few of them:
         * The WiFi radio must support WiFi P2P.
         * The WiFi radio must support concurrent connections to the WiFi display and
           to an access point.
         * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
           remote submix module.  This module is used to record and stream system
           audio output to the WiFi display encoder in the media server.
         * The remote submix module "audio.r_submix.default" must be installed on the device.
         * The device must be provisioned with HDCP keys (for protected content).
    
         */
        public: static const int config_enableWifiDisplay = 0x0112005f;
        /**  Enable emergency call when sim is locked or puk locked. Some countries/carriers do not
         allow emergency calls to be placed without the IMSI, which is locked in the SIM.
         If so, this should be set to 'false' in an overlay. 
         */
        public: static const int config_enable_emergency_call_while_sim_locked = 0x01120036;
        /**  Enable puk unlockscreen by default.
         If unlock screen is disabled, the puk should be unlocked through Emergency Dialer 
         */
        public: static const int config_enable_puk_unlock_screen = 0x01120035;
        /**  Flag indicating that this device does not rotate and will always remain in its default
         orientation. Activities that desire to run in a non-compatible orientation will be run
         from an emulated display within the physical display. 
         */
        public: static const int config_forceDefaultOrientation = 0x01120069;
        /**  Override the DPad detection behavior for configuration purposes 
         */
        public: static const int config_hasPermanentDpad = 0x0112006b;
        /**  default device has recents property 
         */
        public: static const int config_hasRecents = 0x0112006d;
        /**  Is the device capable of hot swapping an UICC Card 
 Is the device capable of hot swapping an UICC Card 
         */
        public: static const int config_hotswapCapable = 0x01120034;
        /**  Is the notification LED intrusive? Used to decide if there should be a disable option 
 Is the notification LED intrusive? Used to decide if there should be a disable option 
         */
        public: static const int config_intrusiveNotificationLed = 0x0112002e;
        /**  Indicate whether closing the lid causes the device to go to sleep and opening
         it causes the device to wake up.
         The default is false. 
 Indicate whether closing the lid causes the device to go to sleep and opening
         it causes the device to wake up.
         The default is false. 
         */
        public: static const int config_lidControlsSleep = 0x01120028;
        /**  If this value is true, The mms content-disposition field is supported correctly.
         If false, Content-disposition fragments are ignored 
 If this value is true, The mms content-disposition field is supported correctly.
         If false, Content-disposition fragments are ignored 
 If this value is true, The mms content-disposition field is supported correctly.
         If false, Content-disposition fragments are ignored 
 The mms content disposition field is supported correctly. if it is true
         If false, some fields of content disposition do not follow wap-230-wsp-20010705-a.rdf 
 If this value is true, The mms content-disposition field is supported correctly.
         If false, Content-disposition fragments are ignored 
         */
        public: static const int config_mms_content_disposition_support = 0x0112004c;
        public: static const int config_networkSamplingWakesDevice = 0x01120075;
        /**  Power Management: Specifies whether to decouple the auto-suspend state of the
         device from the display on/off state.

         When false, autosuspend_disable() will be called before the display is turned on
         and autosuspend_enable() will be called after the display is turned off.
         This mode provides best compatibility for devices using legacy power management
         features such as early suspend / late resume.

         When true, autosuspend_display() and autosuspend_enable() will be called
         independently of whether the display is being turned on or off.  This mode
         enables the power manager to suspend the application processor while the
         display is on.

         This resource should be set to "true" when a doze component has been specified
         to maximize power savings but not all devices support it.

         Refer to autosuspend.h for details.
    
         */
        public: static const int config_powerDecoupleAutoSuspendModeFromDisplay = 0x01120059;
        /**  Power Management: Specifies whether to decouple the interactive state of the
         device from the display on/off state.

         When false, setInteractive(..., true) will be called before the display is turned on
         and setInteractive(..., false) will be called after the display is turned off.
         This mode provides best compatibility for devices that expect the interactive
         state to be tied to the display state.

         When true, setInteractive(...) will be called independently of whether the display
         is being turned on or off.  This mode enables the power manager to reduce
         clocks and disable the touch controller while the display is on.

         This resource should be set to "true" when a doze component has been specified
         to maximize power savings but not all devices support it.

         Refer to power.h for details.
    
         */
        public: static const int config_powerDecoupleInteractiveModeFromDisplay = 0x0112005a;
        /**  Boolean indicating if RADIO POWER OFF is required on receiving SIM REFRESH with RESET.
         This will be handled by modem if it is false. 
         */
        public: static const int config_requireRadioPowerOffOnSimRefreshReset = 0x01120066;
        /**  Set to true if after a provisioning apn the radio should be restarted 
         */
        public: static const int config_restartRadioAfterProvisioning = 0x01120065;
        /**  Flag indicating whether radio is to be restarted on the error of
         PDP_FAIL_REGULAR_DEACTIVATION/0x24 
 Flag indicating whether radio is to be restarted on the error of
         PDP_FAIL_REGULAR_DEACTIVATION/0x24 
         */
        public: static const int config_restart_radio_on_pdp_fail_regular_deactivation = 0x01120079;
        /**  If true, the direction rotation is applied to get to an application's requested
         orientation is reversed.  Normally, the model is that landscape is
         clockwise from portrait; thus on a portrait device an app requesting
         landscape will cause a clockwise rotation, and on a landscape device an
         app requesting portrait will cause a counter-clockwise rotation.  Setting
         true here reverses that logic. 
         */
        public: static const int config_reverseDefaultRotation = 0x01120027;
        /**  Whether safe headphone volume is enabled or not (country specific). 
 Whether safe headphone volume is enabled or not (country specific). 
 Whether safe headphone volume is enabled or not (country specific). 
 Whether safe headphone volume is enabled or not (country specific). 
 Whether safe headphone volume is enabled or not (country specific). 
 Whether safe headphone volume is enabled or not (country specific). 
 Whether safe headphone volume is enabled or not (country specific). 
 Whether safe headphone volume is enabled or not (country specific). 
         */
        public: static const int config_safe_media_volume_enabled = 0x01120061;
        /**  Flag indicating whether the AUDIO_BECOMING_NOISY notification should
         be sent during a change to the audio output device. 
         */
        public: static const int config_sendAudioBecomingNoisy = 0x01120012;
        /**  Flag indicating whether the surface flinger has limited
         alpha compositing functionality in hardware.  If set, the window
         manager will disable alpha trasformation in animations where not
         strictly needed. 
         */
        public: static const int config_sf_limitedAlpha = 0x0112000d;
        /**  Flag indicating whether the surface flinger is inefficient
         at performing a blur.  Used by parts of the UI to turn off
         the blur effect where it isn't worth the performance hit.
         As of Honeycomb, blurring is not supported anymore. 
         */
        public: static const int config_sf_slowBlur = 0x0112000f;
        /**  Sets whether menu shortcuts should be displayed on panel menus when
         a keyboard is present. 
         */
        public: static const int config_showMenuShortcutsWhenKeyboardPresent = 0x01120049;
        /**  Whether a software navigation bar should be shown. NOTE: in the future this may be
         autodetected from the Configuration. 
 Whether a software navigation bar should be shown. NOTE: in the future this may be
         autodetected from the Configuration. 
         */
        public: static const int config_showNavigationBar = 0x0112004f;
        /**  Enables SIP on WIFI only 
         */
        public: static const int config_sip_wifi_only = 0x01120046;
        /**  Flag indicating whether the current device allows sms service.
         If true, this means that the device supports both sending and
         receiving sms via the telephony network.
         This can be overridden to false for "data only" devices
         which can't send and receive sms message.

         Note: Disable SMS also disable voicemail waiting sms,
               cell broadcasting sms, and MMS. 
         */
        public: static const int config_sms_capable = 0x01120044;
        /** From SmsMessage
Support decoding the user data payload as pack GSM 8-bit (a GSM alphabet
        string that's stored in 8-bit unpacked format) characters.
         */
        public: static const int config_sms_decode_gsm_8bit_data = 0x01120076;
        public: static const int config_sms_force_7bit_encoding = 0x0112007b;
        /**  If this value is true, Sms encoded as octet is decoded by utf8 decoder.
         If false, decoded by Latin decoder. 
 sms encoded as octet is decoded by utf8 decoder. if it is true 
         */
        public: static const int config_sms_utf8_support = 0x0112004b;
        /**  Flag indicating if the speed up audio on mt call code should be executed 
         */
        public: static const int config_speed_up_audio_on_mt_calls = 0x01120067;
        /**  set to false if we need to show user confirmation
         when alpha identifier is not provided by the UICC 
         */
        public: static const int config_stkNoAlphaUsrCnf = 0x0112006a;
        /**  Auto-rotation behavior 
 If true, enables auto-rotation features using the accelerometer.
         Otherwise, auto-rotation is disabled.  Applications may still request
         to use specific orientations but the sensor is ignored and sensor-based
         orientations are not available.  Furthermore, all auto-rotation related
         settings are omitted from the system UI.  In certain situations we may
         still use the accelerometer to determine the orientation, such as when
         docked if the dock is configured to enable the accelerometer. 
         */
        public: static const int config_supportAutoRotation = 0x01120025;
        /**  Indicate whether to allow the device to suspend when the screen is off
         due to the proximity sensor.  This resource should only be set to true
         if the sensor HAL correctly handles the proximity sensor as a wake-up source.
         Otherwise, the device may fail to wake out of suspend reliably.
         The default is false. 
 Indicate whether to allow the device to suspend when the screen is off
         due to the proximity sensor.  This resource should only be set to true
         if the sensor HAL correctly handles the proximity sensor as a wake-up source.
         Otherwise, the device may fail to wake out of suspend reliably.
         The default is false. 
         */
        public: static const int config_suspendWhenScreenOffDueToProximity = 0x0112002b;
        /**  Enables swipe versus poly-finger touch disambiguation in the KeyboardView 
         */
        public: static const int config_swipeDisambiguation = 0x01120037;
        /**  Config determines whether to update phone object when voice registration
         state changes. Voice radio tech change will always trigger an update of
         phone object irrespective of this config 
         */
        public: static const int config_switch_phone_on_voice_reg_state_change = 0x0112007a;
        /**  The default value if the SyncStorageEngine should sync automatically or not 
         */
        public: static const int config_syncstorageengine_masterSyncAutomatically = 0x0112005c;
        /**  The VoiceMail default value is displayed to my own number if it is true 
 The VoiceMail default value is displayed to my own number if it is true 
         */
        public: static const int config_telephony_use_own_number_for_voicemail = 0x0112004a;
        /**  Enables or disables fading edges when marquee is enabled in TextView.
         Off by default, since the framebuffer readback used to implement the
         fading edges is prohibitively expensive on most GPUs. 
 Make things go fast 
         */
        public: static const int config_ui_enableFadingMarquee = 0x01120013;
        /**  XXXXXX END OF RESOURCES USING WRONG NAMING CONVENTION 
 If this is true, the screen will come on when you unplug usb/power/whatever. 
 If this is true, the screen will come on when you unplug usb/power/whatever. 
         */
        public: static const int config_unplugTurnsOnScreen = 0x01120021;
        /**  Set this true only if the device has separate attention and notification lights. 
         */
        public: static const int config_useAttentionLight = 0x01120022;
        /**  When true use the linux /dev/input/event subsystem to detect the switch changes
         on the headphone/microphone jack. When false use the older uevent framework. 
 Setting this true forces the headset jack switches to use the/dev/input/event subsystem
         rather than the uevent framework. 
         */
        public: static const int config_useDevInputEventForAudioJack = 0x01120060;
        /**  Flag indicating that the media framework should not allow changes or mute on any
         stream or master volumes. 
         */
        public: static const int config_useFixedVolume = 0x01120068;
        /**  Flag indicating that the media framework should allow changing
         master volume stream and nothing else . 
         */
        public: static const int config_useMasterVolume = 0x01120010;
        /**  Flag indicating that the media framework should support playing of sounds on volume
         key usage.  This adds noticeable additional overhead to volume key processing, so
         is disableable for products for which it is irrelevant. 
         */
        public: static const int config_useVolumeKeySounds = 0x01120011;
        public: static const int config_use_strict_phone_number_comparation = 0x0112002d;
        /**  Flag indicating whether the current device is "voice capable".
         If true, this means that the device supports circuit-switched
         (i.e. voice) phone calls over the telephony network, and is
         allowed to display the in-call UI while a cellular voice call is
         active.  This can be overridden to false for "data only" devices
         which can't make voice calls and don't support any in-call UI.

         Note: this flag is subtly different from the
         PackageManager.FEATURE_TELEPHONY system feature, which is
         available on *any* device with a telephony radio, even if the
         device is data-only. 
         */
        public: static const int config_voice_capable = 0x01120043;
        /**  Set to true if the wifi display supports compositing content stored
         in gralloc protected buffers.  For this to be true, there must exist
         a protected hardware path for surface flinger to composite and send
         protected buffers to the wifi display video encoder.

         If this flag is false, we advise applications not to use protected
         buffers (if possible) when presenting content to a wifi display because
         the content may be blanked.

         This flag controls whether the {@link Display#FLAG_SUPPORTS_PROTECTED_BUFFERS}
         flag is set for wifi displays.
    
         */
        public: static const int config_wifiDisplaySupportsProtectedBuffers = 0x01120062;
        /**  Boolean indicating whether the wifi chipset supports background scanning mechanism.
         This mechanism allows the host to remain in suspend state and the dongle to actively
         scan and wake the host when a configured SSID is detected by the dongle. This chipset
         capability can provide power savings when wifi needs to be always kept on. 
 Boolean indicating whether the wifi chipset has background scan support 
         */
        public: static const int config_wifi_background_scan_support = 0x01120017;
        /**  Wifi driver supports batched scan 
 Wifi driver supports batched scan 
         */
        public: static const int config_wifi_batched_scan_supported = 0x0112001e;
        /**  Boolean indicating whether the wifi chipset has dual frequency band support 
 Boolean indicating whether the wifi chipset has dual frequency band support 
         */
        public: static const int config_wifi_dual_band_support = 0x01120016;
        /**  Boolean indicating autojoin will prefer 5GHz and choose 5GHz BSSIDs 
         */
        public: static const int config_wifi_enable_5GHz_preference = 0x01120019;
        /**  Boolean indicating we re-try re-associating once upon disconnection and RSSI is high failure  
         */
        public: static const int config_wifi_enable_disconnection_debounce = 0x01120018;
        public: static const int config_wifi_framework_cellular_handover_enable_user_triggered_adjustment = 0x0112001a;
        /**  Boolean indicating associated scan are allowed 
         */
        public: static const int config_wifi_framework_enable_associated_autojoin_scan = 0x0112001b;
        /**  Boolean indicating associated network selection is allowed 
         */
        public: static const int config_wifi_framework_enable_associated_network_selection = 0x0112001c;
        /**  Boolean indicating that wifi only link configuratios that have exact same credentials (i.e PSK) 
         */
        public: static const int config_wifi_only_link_same_credential_configurations = 0x0112001d;
        /**  Set and Unsets WiMAX 
         */
        public: static const int config_wimaxEnabled = 0x01120052;
        /**  default value for whether circular emulators (ro.emulator.circular)
         should show a display overlay on the screen 
         */
        public: static const int config_windowEnableCircularEmulatorDisplayOverlay = 0x0112006f;
        /**  default window inset isRound property 
         */
        public: static const int config_windowIsRound = 0x0112006c;
        /**  default window ShowCircularMask property 
         */
        public: static const int config_windowShowCircularMask = 0x0112006e;
        /** SIM does not save, but the voice mail number to be changed. 
 SIM does not save, but the voice mail number to be changed. 
         */
        public: static const int editable_voicemailnumber = 0x01120078;
        /**  Flag indicating whether the IMS service can be turned off. If false then
        the service will not be turned-off completely (the ImsManager.turnOffIms() will
        be disabled) but individual Features can be disabled using ImsConfig.setFeatureValue() 
 Flag indicating whether the IMS service can be turned off. If false then
        the service will not be turned-off completely (the ImsManager.turnOffIms() will
        be disabled) but individual Features can be disabled using ImsConfig.setFeatureValue() 
         */
        public: static const int imsServiceAllowTurnOff = 0x01120072;
        public: static const int kg_center_small_widgets_vertically = 0x01120001;
        /**  No camera for you, tablet user 
         */
        public: static const int kg_enable_camera_default_widget = 0x01120000;
        public: static const int kg_share_status_area = 0x0112000b;
        public: static const int kg_show_ime_at_screen_on = 0x01120003;
        public: static const int kg_sim_puk_account_full_screen = 0x0112000c;
        public: static const int kg_top_align_page_shrink_on_bouncer_visible = 0x01120002;
        /**  @hide DO NOT TRANSLATE. Workaround for resource race condition in lockscreen. 
 @hide DO NOT TRANSLATE. Workaround for resource race condition in lockscreen 
         */
        public: static const int lockscreen_isPortrait = 0x0112007c;
        public: static const int preferences_prefer_dual_pane = 0x01120007;
        public: static const int show_ongoing_ime_switcher = 0x01120008;
        /**  Flag indicating apps will skip sending hold request before merge. In this case
        IMS service implementation will do both.i.e.hold followed by merge. 
         */
        public: static const int skipHoldBeforeMerge = 0x01120070;
        /**  Boolean indicating if restoring network selection should be skipped 
 The restoring is handled by modem if it is true
 Boolean indicating if restoring network selection should be skipped 
 The restoring is handled by modem if it is true 
         */
        public: static const int skip_restoring_network_selection = 0x01120048;
        public: static const int split_action_bar_is_narrow = 0x01120006;
        public: static const int target_honeycomb_needs_options_menu = 0x0112000a;
        /**  Flag indicating emergency calls will always use IMS irrespective of the state of
    the IMS connection 
         */
        public: static const int useImsAlwaysForEmergencyCall = 0x01120071;
    };
    public: class color {
        public: static const int accent_material_dark = 0x010600c9;
        public: static const int accent_material_light = 0x010600c8;
        public: static const int accessibility_focus_highlight = 0x01060057;
        public: static const int background_cache_hint_selector_holo_dark = 0x01060100;
        public: static const int background_cache_hint_selector_holo_light = 0x01060101;
        public: static const int background_cache_hint_selector_material_dark = 0x01060102;
        public: static const int background_cache_hint_selector_material_light = 0x01060103;
        public: static const int background_dark = 0x0106000e;
        public: static const int background_floating_material_dark = 0x010600c0;
        public: static const int background_floating_material_light = 0x010600c1;
        public: static const int background_holo_dark = 0x01060064;
        public: static const int background_holo_light = 0x01060065;
        public: static const int background_leanback_dark = 0x010600a6;
        public: static const int background_leanback_light = 0x010600a7;
        public: static const int background_light = 0x0106000f;
        public: static const int background_material_dark = 0x010600be;
        public: static const int background_material_light = 0x010600bf;
        public: static const int battery_saver_mode_color = 0x01060059;
        public: static const int black = 0x0106000c;
        public: static const int bright_foreground_dark = 0x0106001d;
        public: static const int bright_foreground_dark_disabled = 0x0106001f;
        public: static const int bright_foreground_dark_inverse = 0x01060021;
        public: static const int bright_foreground_disabled_holo_dark = 0x01060068;
        public: static const int bright_foreground_disabled_holo_light = 0x01060069;
        /**  White 50% 
         */
        public: static const int bright_foreground_disabled_material_dark = 0x010600d2;
        /**  Black 50% 
         */
        public: static const int bright_foreground_disabled_material_light = 0x010600d3;
        public: static const int bright_foreground_holo_dark = 0x01060066;
        public: static const int bright_foreground_holo_light = 0x01060067;
        public: static const int bright_foreground_inverse_holo_dark = 0x0106006a;
        public: static const int bright_foreground_inverse_holo_light = 0x0106006b;
        public: static const int bright_foreground_inverse_material_dark = 0x010600d4;
        public: static const int bright_foreground_inverse_material_light = 0x010600d5;
        public: static const int bright_foreground_light = 0x0106001e;
        public: static const int bright_foreground_light_disabled = 0x01060020;
        public: static const int bright_foreground_light_inverse = 0x01060022;
        public: static const int bright_foreground_material_dark = 0x010600d0;
        public: static const int bright_foreground_material_light = 0x010600d1;
        public: static const int btn_default_material_dark = 0x01060104;
        public: static const int btn_default_material_light = 0x01060105;
        public: static const int button_material_dark = 0x010600ca;
        public: static const int button_material_light = 0x010600cb;
        /**  Default color for notification LED. 
 Default color for notification LED is white. 
         */
        public: static const int config_defaultNotificationColor = 0x010600ff;
        public: static const int darker_gray = 0x01060000;
        public: static const int date_picker_calendar_holo_dark = 0x01060106;
        public: static const int date_picker_calendar_holo_light = 0x01060107;
        public: static const int date_picker_selector_holo_dark = 0x01060108;
        public: static const int date_picker_selector_holo_light = 0x01060109;
        public: static const int date_picker_year_selector_holo_dark = 0x0106010a;
        public: static const int date_picker_year_selector_holo_light = 0x0106010b;
        public: static const int datepicker_default_circle_background_color_holo_dark = 0x010600a3;
        public: static const int datepicker_default_circle_background_color_holo_light = 0x010600a2;
        public: static const int datepicker_default_circle_background_color_material_dark = 0x010600fc;
        public: static const int datepicker_default_circle_background_color_material_light = 0x010600fb;
        public: static const int datepicker_default_disabled_text_color_holo_dark = 0x0106009d;
        public: static const int datepicker_default_disabled_text_color_holo_light = 0x0106009c;
        public: static const int datepicker_default_disabled_text_color_material_dark = 0x010600f6;
        public: static const int datepicker_default_disabled_text_color_material_light = 0x010600f5;
        public: static const int datepicker_default_header_dayofweek_background_color_holo_dark = 0x01060099;
        public: static const int datepicker_default_header_dayofweek_background_color_holo_light = 0x01060098;
        public: static const int datepicker_default_header_dayofweek_background_color_material_dark = 0x010600f2;
        public: static const int datepicker_default_header_dayofweek_background_color_material_light = 0x010600f1;
        public: static const int datepicker_default_header_selector_background_holo_dark = 0x01060097;
        public: static const int datepicker_default_header_selector_background_holo_light = 0x01060096;
        public: static const int datepicker_default_header_selector_background_material_dark = 0x010600f0;
        public: static const int datepicker_default_header_selector_background_material_light = 0x010600ef;
        public: static const int datepicker_default_normal_text_color_holo_dark = 0x0106009b;
        public: static const int datepicker_default_normal_text_color_holo_light = 0x0106009a;
        public: static const int datepicker_default_normal_text_color_material_dark = 0x010600f4;
        public: static const int datepicker_default_normal_text_color_material_light = 0x010600f3;
        public: static const int datepicker_default_pressed_text_color_holo_dark = 0x010600a1;
        public: static const int datepicker_default_pressed_text_color_holo_light = 0x010600a0;
        public: static const int datepicker_default_pressed_text_color_material_dark = 0x010600fa;
        public: static const int datepicker_default_pressed_text_color_material_light = 0x010600f9;
        public: static const int datepicker_default_selected_text_color_holo_dark = 0x0106009f;
        public: static const int datepicker_default_selected_text_color_holo_light = 0x0106009e;
        public: static const int datepicker_default_selected_text_color_material_dark = 0x010600f8;
        public: static const int datepicker_default_selected_text_color_material_light = 0x010600f7;
        public: static const int datepicker_default_view_animator_color_holo_dark = 0x010600a5;
        public: static const int datepicker_default_view_animator_color_holo_light = 0x010600a4;
        public: static const int datepicker_default_view_animator_color_material_dark = 0x010600fe;
        public: static const int datepicker_default_view_animator_color_material_light = 0x010600fd;
        public: static const int dim_foreground_dark = 0x01060023;
        public: static const int dim_foreground_dark_disabled = 0x01060024;
        public: static const int dim_foreground_dark_inverse = 0x01060025;
        public: static const int dim_foreground_dark_inverse_disabled = 0x01060026;
        public: static const int dim_foreground_disabled_holo_dark = 0x0106006d;
        public: static const int dim_foreground_disabled_holo_light = 0x01060072;
        public: static const int dim_foreground_disabled_material_dark = 0x010600d8;
        public: static const int dim_foreground_disabled_material_light = 0x010600d9;
        public: static const int dim_foreground_holo_dark = 0x0106006c;
        public: static const int dim_foreground_holo_light = 0x01060071;
        public: static const int dim_foreground_inverse_disabled_holo_dark = 0x0106006f;
        public: static const int dim_foreground_inverse_disabled_holo_light = 0x01060074;
        public: static const int dim_foreground_inverse_holo_dark = 0x0106006e;
        public: static const int dim_foreground_inverse_holo_light = 0x01060073;
        public: static const int dim_foreground_light = 0x01060028;
        public: static const int dim_foreground_light_disabled = 0x01060029;
        public: static const int dim_foreground_light_inverse = 0x0106002a;
        public: static const int dim_foreground_light_inverse_disabled = 0x0106002b;
        public: static const int dim_foreground_material_dark = 0x010600d6;
        public: static const int dim_foreground_material_light = 0x010600d7;
        /**  FaceLock 
         */
        public: static const int facelock_spotlight_mask = 0x0106004d;
        public: static const int group_button_dialog_focused_holo_dark = 0x0106008b;
        public: static const int group_button_dialog_focused_holo_light = 0x0106008d;
        public: static const int group_button_dialog_pressed_holo_dark = 0x0106008a;
        public: static const int group_button_dialog_pressed_holo_light = 0x0106008c;
        public: static const int highlighted_text_dark = 0x0106002d;
        public: static const int highlighted_text_holo_dark = 0x01060076;
        public: static const int highlighted_text_holo_light = 0x01060077;
        public: static const int highlighted_text_light = 0x0106002e;
        /**  TODO: This is 40% alpha on the default accent color. 
         */
        public: static const int highlighted_text_material_dark = 0x010600dc;
        /**  TODO: This is 40% alpha on the default accent color. 
         */
        public: static const int highlighted_text_material_light = 0x010600dd;
        public: static const int hint_foreground_dark = 0x01060027;
        public: static const int hint_foreground_holo_dark = 0x01060070;
        public: static const int hint_foreground_holo_light = 0x01060075;
        public: static const int hint_foreground_light = 0x0106002c;
        public: static const int hint_foreground_material_dark = 0x010600da;
        public: static const int hint_foreground_material_light = 0x010600db;
        /**  A really bright Holo shade of blue 
         */
        public: static const int holo_blue_bright = 0x0106001b;
        /**  A dark Holo shade of blue 
         */
        public: static const int holo_blue_dark = 0x01060013;
        /**  A light Holo shade of blue 
         */
        public: static const int holo_blue_light = 0x01060012;
        public: static const int holo_button_normal = 0x01060082;
        public: static const int holo_button_pressed = 0x01060081;
        public: static const int holo_control_activated = 0x0106007f;
        public: static const int holo_control_normal = 0x01060080;
        /**  A really bright Holo shade of gray 
         */
        public: static const int holo_gray_bright = 0x0106007b;
        /**  A light Holo shade of gray 
         */
        public: static const int holo_gray_light = 0x0106007a;
        /**  A dark Holo shade of green 
         */
        public: static const int holo_green_dark = 0x01060015;
        /**  A light Holo shade of green 
         */
        public: static const int holo_green_light = 0x01060014;
        public: static const int holo_light_button_normal = 0x01060089;
        public: static const int holo_light_button_pressed = 0x01060088;
        public: static const int holo_light_control_activated = 0x01060086;
        public: static const int holo_light_control_normal = 0x01060087;
        public: static const int holo_light_primary = 0x01060084;
        public: static const int holo_light_primary_dark = 0x01060083;
        public: static const int holo_light_primary_light = 0x01060085;
        /**  A dark Holo shade of orange 
         */
        public: static const int holo_orange_dark = 0x01060019;
        /**  A light Holo shade of orange 
         */
        public: static const int holo_orange_light = 0x01060018;
        public: static const int holo_primary = 0x0106007d;
        public: static const int holo_primary_dark = 0x0106007c;
        public: static const int holo_primary_light = 0x0106007e;
        /**  A Holo shade of purple 
         */
        public: static const int holo_purple = 0x0106001a;
        /**  A dark Holo shade of red 
         */
        public: static const int holo_red_dark = 0x01060017;
        /**  A light Holo shade of red 
         */
        public: static const int holo_red_light = 0x01060016;
        public: static const int input_method_navigation_guard = 0x01060032;
        /**  Keyguard colors 
         */
        public: static const int keyguard_avatar_frame_color = 0x01060053;
        public: static const int keyguard_avatar_frame_pressed_color = 0x01060056;
        public: static const int keyguard_avatar_frame_shadow_color = 0x01060054;
        public: static const int keyguard_avatar_nick_color = 0x01060055;
        public: static const int keyguard_text_color_decline = 0x01060042;
        /**  keyguard tab 
         */
        public: static const int keyguard_text_color_normal = 0x0106003e;
        public: static const int keyguard_text_color_soundoff = 0x01060040;
        public: static const int keyguard_text_color_soundon = 0x01060041;
        public: static const int keyguard_text_color_unlock = 0x0106003f;
        /**  keyguard overscroll widget pager 
         */
        public: static const int kg_multi_user_text_active = 0x01060047;
        public: static const int kg_multi_user_text_inactive = 0x01060048;
        public: static const int kg_widget_pager_gradient = 0x01060049;
        public: static const int legacy_button_normal = 0x010600b6;
        public: static const int legacy_button_pressed = 0x010600b5;
        public: static const int legacy_control_activated = 0x010600b3;
        public: static const int legacy_control_normal = 0x010600b4;
        public: static const int legacy_light_button_normal = 0x010600bd;
        public: static const int legacy_light_button_pressed = 0x010600bc;
        public: static const int legacy_light_control_activated = 0x010600ba;
        public: static const int legacy_light_control_normal = 0x010600bb;
        public: static const int legacy_light_primary = 0x010600b8;
        public: static const int legacy_light_primary_dark = 0x010600b7;
        public: static const int legacy_light_primary_light = 0x010600b9;
        public: static const int legacy_long_pressed_highlight = 0x010600af;
        public: static const int legacy_pressed_highlight = 0x010600ad;
        public: static const int legacy_primary = 0x010600b1;
        public: static const int legacy_primary_dark = 0x010600b0;
        public: static const int legacy_primary_light = 0x010600b2;
        public: static const int legacy_selected_highlight = 0x010600ae;
        /**  For settings framework 
         */
        public: static const int lighter_gray = 0x01060033;
        public: static const int link_text_dark = 0x0106002f;
        public: static const int link_text_holo_dark = 0x01060078;
        public: static const int link_text_holo_light = 0x01060079;
        public: static const int link_text_light = 0x01060030;
        public: static const int link_text_material_dark = 0x010600de;
        public: static const int link_text_material_light = 0x010600df;
        public: static const int lock_pattern_view_error_color = 0x0106004c;
        /**  LockPatternView 
         */
        public: static const int lock_pattern_view_regular_color = 0x0106004a;
        public: static const int lock_pattern_view_success_color = 0x0106004b;
        public: static const int lockscreen_clock_am_pm = 0x01060045;
        /**  keyguard clock 
 keyguard clock 
         */
        public: static const int lockscreen_clock_background = 0x01060043;
        public: static const int lockscreen_clock_foreground = 0x01060044;
        public: static const int lockscreen_owner_info = 0x01060046;
        public: static const int material_blue_grey_800 = 0x010600e6;
        public: static const int material_blue_grey_900 = 0x010600e7;
        public: static const int material_blue_grey_950 = 0x010600e8;
        public: static const int material_deep_teal_200 = 0x010600e4;
        public: static const int material_deep_teal_500 = 0x010600e5;
        public: static const int micro_text_light = 0x0106004e;
        public: static const int notification_action_color_filter = 0x01060050;
        public: static const int notification_icon_bg_color = 0x0106004f;
        public: static const int notification_media_primary_color = 0x01060051;
        public: static const int notification_media_secondary_color = 0x01060052;
        public: static const int perms_costs_money = 0x01060037;
        /**  For security permissions 
         */
        public: static const int perms_dangerous_grp_color = 0x01060034;
        public: static const int perms_dangerous_perm_color = 0x01060035;
        public: static const int primary_dark_material_dark = 0x010600c4;
        public: static const int primary_dark_material_light = 0x010600c5;
        public: static const int primary_material_dark = 0x010600c2;
        public: static const int primary_material_light = 0x010600c3;
        public: static const int primary_text_activated_material_dark = 0x0106010c;
        public: static const int primary_text_activated_material_light = 0x0106010d;
        public: static const int primary_text_dark = 0x01060001;
        public: static const int primary_text_dark_disable_only = 0x0106010e;
        public: static const int primary_text_dark_focused = 0x0106010f;
        public: static const int primary_text_dark_nodisable = 0x01060002;
        public: static const int primary_text_default_material_dark = 0x010600e2;
        public: static const int primary_text_default_material_light = 0x010600e0;
        public: static const int primary_text_disable_only_holo_dark = 0x01060110;
        public: static const int primary_text_disable_only_holo_light = 0x01060111;
        public: static const int primary_text_disable_only_material_dark = 0x01060112;
        public: static const int primary_text_disable_only_material_light = 0x01060113;
        public: static const int primary_text_focused_holo_dark = 0x01060114;
        public: static const int primary_text_holo_dark = 0x01060115;
        public: static const int primary_text_holo_light = 0x01060116;
        public: static const int primary_text_leanback_dark = 0x010600a8;
        public: static const int primary_text_leanback_formwizard_dark = 0x01060117;
        public: static const int primary_text_leanback_formwizard_default_dark = 0x010600ac;
        public: static const int primary_text_leanback_light = 0x010600aa;
        public: static const int primary_text_light = 0x01060003;
        public: static const int primary_text_light_disable_only = 0x01060118;
        public: static const int primary_text_light_nodisable = 0x01060004;
        public: static const int primary_text_material_dark = 0x01060119;
        public: static const int primary_text_material_light = 0x0106011a;
        public: static const int primary_text_nodisable_holo_dark = 0x0106011b;
        public: static const int primary_text_nodisable_holo_light = 0x0106011c;
        public: static const int ripple_material_dark = 0x010600c6;
        public: static const int ripple_material_light = 0x010600c7;
        public: static const int safe_mode_text = 0x0106001c;
        public: static const int search_url_text = 0x0106011d;
        public: static const int search_url_text_holo = 0x0106011e;
        public: static const int search_url_text_material_dark = 0x0106011f;
        public: static const int search_url_text_material_light = 0x01060120;
        /**  For search-related UIs 
         */
        public: static const int search_url_text_normal = 0x01060038;
        public: static const int search_url_text_pressed = 0x0106003a;
        public: static const int search_url_text_selected = 0x01060039;
        public: static const int search_widget_corpus_item_background = 0x0106003b;
        public: static const int secondary_text_activated_material_dark = 0x01060121;
        public: static const int secondary_text_activated_material_light = 0x01060122;
        public: static const int secondary_text_dark = 0x01060005;
        public: static const int secondary_text_dark_nodisable = 0x01060006;
        public: static const int secondary_text_default_material_dark = 0x010600e3;
        public: static const int secondary_text_default_material_light = 0x010600e1;
        public: static const int secondary_text_holo_dark = 0x01060123;
        public: static const int secondary_text_holo_light = 0x01060124;
        public: static const int secondary_text_leanback_dark = 0x010600a9;
        public: static const int secondary_text_leanback_light = 0x010600ab;
        public: static const int secondary_text_light = 0x01060007;
        public: static const int secondary_text_light_nodisable = 0x01060008;
        public: static const int secondary_text_material_dark = 0x01060125;
        public: static const int secondary_text_material_light = 0x01060126;
        public: static const int secondary_text_nodisable_holo_dark = 0x01060127;
        public: static const int secondary_text_nodisable_holo_light = 0x01060128;
        public: static const int secondary_text_nofocus = 0x01060129;
        public: static const int shadow = 0x01060036;
        /**  SlidingTab 
         */
        public: static const int sliding_tab_text_color_active = 0x0106003c;
        public: static const int sliding_tab_text_color_shadow = 0x0106003d;
        public: static const int suggestion_highlight_text = 0x01060031;
        public: static const int switch_thumb_disabled_material_dark = 0x010600ce;
        public: static const int switch_thumb_disabled_material_light = 0x010600cf;
        public: static const int switch_thumb_material_dark = 0x0106012a;
        public: static const int switch_thumb_material_light = 0x0106012b;
        public: static const int switch_thumb_normal_material_dark = 0x010600cc;
        public: static const int switch_thumb_normal_material_light = 0x010600cd;
        public: static const int system_notification_accent_color = 0x01060058;
        public: static const int tab_indicator_text = 0x01060009;
        public: static const int tab_indicator_text_v4 = 0x0106012c;
        public: static const int tertiary_text_dark = 0x01060010;
        public: static const int tertiary_text_holo_dark = 0x0106012d;
        public: static const int tertiary_text_holo_light = 0x0106012e;
        public: static const int tertiary_text_light = 0x01060011;
        public: static const int timepicker_default_ampm_selected_background_color_holo_dark = 0x01060093;
        public: static const int timepicker_default_ampm_selected_background_color_holo_light = 0x01060092;
        public: static const int timepicker_default_ampm_selected_background_color_material = 0x010600eb;
        public: static const int timepicker_default_ampm_unselected_background_color_holo_dark = 0x01060095;
        public: static const int timepicker_default_ampm_unselected_background_color_holo_light = 0x01060094;
        public: static const int timepicker_default_ampm_unselected_background_color_material = 0x010600ec;
        public: static const int timepicker_default_background_holo_dark = 0x0106008f;
        public: static const int timepicker_default_background_holo_light = 0x0106008e;
        public: static const int timepicker_default_background_material = 0x010600e9;
        public: static const int timepicker_default_numbers_background_color_material = 0x010600ee;
        public: static const int timepicker_default_selector_color_material = 0x010600ed;
        public: static const int timepicker_default_text_color_holo_dark = 0x01060091;
        public: static const int timepicker_default_text_color_holo_light = 0x01060090;
        public: static const int timepicker_default_text_color_material = 0x010600ea;
        public: static const int transparent = 0x0106000d;
        /**  deep orange 600 
 Default user icon colors 
         */
        public: static const int user_icon_1 = 0x0106005a;
        /**  teal 500 
         */
        public: static const int user_icon_2 = 0x0106005b;
        /**  indigo 500 
         */
        public: static const int user_icon_3 = 0x0106005c;
        /**  blue 500 
         */
        public: static const int user_icon_4 = 0x0106005d;
        /**  pink 500 
         */
        public: static const int user_icon_5 = 0x0106005e;
        /**  green 500 
         */
        public: static const int user_icon_6 = 0x0106005f;
        /**  light green 500 
         */
        public: static const int user_icon_7 = 0x01060060;
        /**  orange 500 
         */
        public: static const int user_icon_8 = 0x01060061;
        /**  deep orange 500 
         */
        public: static const int user_icon_default_gray = 0x01060062;
        /**  gray 500 
         */
        public: static const int user_icon_default_white = 0x01060063;
        public: static const int white = 0x0106000b;
        public: static const int widget_edittext_dark = 0x0106000a;
    };
    public: class dimen {
        /**  Touch slop for the global toggle accessibility gesture 
         */
        public: static const int accessibility_touch_slop = 0x0105006e;
        /**  Default height of an action bar. 
 Default height of an action bar. 
 Default height of an action bar. 
         */
        public: static const int action_bar_default_height = 0x01050038;
        /**  Default height of an action bar. 
 Default height of an action bar. 
 Default height of an action bar. 
         */
        public: static const int action_bar_default_height_material = 0x010500c9;
        /**  Default padding of an action bar. 
 Default padding of an action bar. 
 Default padding of an action bar. 
         */
        public: static const int action_bar_default_padding_material = 0x010500ca;
        /**  Vertical padding around action bar icons. 
 Vertical padding around action bar icons. 
 Vertical padding around action bar icons. 
         */
        public: static const int action_bar_icon_vertical_padding = 0x01050039;
        /**  Vertical padding around action bar icons. 
         */
        public: static const int action_bar_icon_vertical_padding_material = 0x010500cb;
        /**  Maximum height for a stacked tab bar as part of an action bar 
         */
        public: static const int action_bar_stacked_max_height = 0x01050050;
        /**  Maximum width for a stacked action bar tab. This prevents
         action bar tabs from becoming too wide on a wide screen when only
         a few are present. 
         */
        public: static const int action_bar_stacked_tab_max_width = 0x01050051;
        /**  Bottom margin for action bar subtitles 
 Bottom margin for action bar subtitles 
 Bottom margin for action bar subtitles 
         */
        public: static const int action_bar_subtitle_bottom_margin = 0x0105003d;
        /**  Bottom margin for action bar subtitles 
         */
        public: static const int action_bar_subtitle_bottom_margin_material = 0x010500cd;
        /**  Text size for action bar subtitles 
 Text size for action bar subtitles 
 Text size for action bar subtitles 
         */
        public: static const int action_bar_subtitle_text_size = 0x0105003b;
        /**  Top margin for action bar subtitles 
 Top margin for action bar subtitles 
 Top margin for action bar subtitles 
         */
        public: static const int action_bar_subtitle_top_margin = 0x0105003c;
        /**  Top margin for action bar subtitles 
         */
        public: static const int action_bar_subtitle_top_margin_material = 0x010500cc;
        /**  Text size for action bar titles 
 Text size for action bar titles 
 Text size for action bar titles 
         */
        public: static const int action_bar_title_text_size = 0x0105003a;
        public: static const int action_button_min_height_material = 0x010500d0;
        /**  Minimum width for an action button in the menu area of an action bar 
 Minimum width for an action button in the menu area of an action bar 
         */
        public: static const int action_button_min_width = 0x0105004f;
        public: static const int action_button_min_width_material = 0x010500cf;
        public: static const int action_button_min_width_overflow_material = 0x010500ce;
        /**  Minimum popup width for selecting an activity in ActivityChooserDialog/ActivityChooserView. 
         */
        public: static const int activity_chooser_popup_min_width = 0x01050045;
        /**  Dialog button bar height 
 Dialog button bar height 
         */
        public: static const int alert_dialog_button_bar_height = 0x01050035;
        public: static const int alert_dialog_padding_material = 0x010500f0;
        public: static const int alert_dialog_padding_top_material = 0x010500f1;
        /**  Dialog padding for round display 
         */
        public: static const int alert_dialog_round_padding = 0x01050033;
        /**  Dialog title height 
         */
        public: static const int alert_dialog_title_height = 0x01050034;
        public: static const int ambient_shadow_alpha = 0x010500a0;
        /**  The standard size (both width and height) of an application icon that
         will be displayed in the app launcher and elsewhere. 
         */
        public: static const int app_icon_size = 0x01050000;
        /**  Elevation when button is pressed 
         */
        public: static const int button_elevation_material = 0x010500e7;
        public: static const int button_inset_horizontal_material = 0x010500ea;
        /**  Default insets (outer padding) around buttons 
         */
        public: static const int button_inset_vertical_material = 0x010500e9;
        public: static const int button_padding_horizontal_material = 0x010500ec;
        /**  Default inner padding within buttons 
         */
        public: static const int button_padding_vertical_material = 0x010500eb;
        /**  Z translation to apply when button is pressed 
         */
        public: static const int button_pressed_z_material = 0x010500e8;
        /**  Size of the offset applied to the position of the circular mask. This is only
     used on circular displays. In the case where there is no "chin", this will default
     to 0 
         */
        public: static const int circular_display_mask_offset = 0x01050098;
        /**  Minimum span needed to begin a touch scaling gesture.
         If the span is equal to or greater than this size, a scaling gesture
         will begin, where supported. (See android.view.ScaleGestureDetector)

         This also takes into account the size of any active touch points.
         Devices with screens that deviate too far from their assigned density
         bucket should consider tuning this value in a device-specific overlay.
         For best results, care should be taken such that this value remains
         larger than the minimum reported touchMajor/touchMinor values
         reported by the hardware. 
 Use a larger scaling span for larger screen devices. 
         */
        public: static const int config_minScalingSpan = 0x0105000d;
        /**  Minimum accepted value for touchMajor while scaling. This may be tuned
         per-device in overlays. 
         */
        public: static const int config_minScalingTouchMajor = 0x0105000e;
        /**  The maximum width we would prefer dialogs to be.  0 if there is no
         maximum (let them grow as large as the screen).  Actual values are
         specified for -large and -xlarge configurations. 
 see comment in values/config.xml 
 see comment in values/config.xml 
         */
        public: static const int config_prefDialogWidth = 0x01050009;
        /**  Base "touch slop" value used by ViewConfiguration as a
         movement threshold where scrolling should begin. 
 Base "touch slop" value used by ViewConfiguration as a
         movement threshold where scrolling should begin. 
         */
        public: static const int config_viewConfigurationTouchSlop = 0x0105000a;
        /**  Maximum velocity to initiate a fling, as measured in dips per second. 
 Maximum velocity to initiate a fling, as measured in dips per second. 
         */
        public: static const int config_viewMaxFlingVelocity = 0x0105000c;
        /**  Minimum velocity to initiate a fling, as measured in dips per second. 
 Minimum velocity to initiate a fling, as measured in dips per second. 
         */
        public: static const int config_viewMinFlingVelocity = 0x0105000b;
        /**  Default rounded corner for controls 
         */
        public: static const int control_corner_material = 0x010500ef;
        /**  Default insets (outer padding) around controls 
         */
        public: static const int control_inset_material = 0x010500ed;
        /**  Default inner padding within controls 
         */
        public: static const int control_padding_material = 0x010500ee;
        public: static const int datepicker_component_width = 0x01050090;
        public: static const int datepicker_day_number_select_circle_radius = 0x0105008b;
        /**  Used by SimpleMonthView 
         */
        public: static const int datepicker_day_number_size = 0x01050087;
        public: static const int datepicker_header_height = 0x01050094;
        public: static const int datepicker_header_text_size = 0x01050095;
        public: static const int datepicker_month_day_label_text_size = 0x01050089;
        public: static const int datepicker_month_label_size = 0x01050088;
        public: static const int datepicker_month_list_item_header_height = 0x0105008a;
        public: static const int datepicker_selected_date_day_size = 0x01050091;
        public: static const int datepicker_selected_date_month_size = 0x01050092;
        public: static const int datepicker_selected_date_year_size = 0x01050093;
        public: static const int datepicker_view_animator_height = 0x0105008c;
        public: static const int datepicker_year_label_height = 0x0105008e;
        public: static const int datepicker_year_label_text_size = 0x0105008f;
        public: static const int datepicker_year_picker_padding_top = 0x0105008d;
        public: static const int default_app_widget_padding_bottom = 0x0105004e;
        /**  Default padding to apply to AppWidgetHostViews containing widgets targeting API level 14 and up. 
 insideOverlay 
 Default padding to apply to AppWidgetHostViews containing widgets targeting API level 14 and up. 
         */
        public: static const int default_app_widget_padding_left = 0x0105004b;
        public: static const int default_app_widget_padding_right = 0x0105004d;
        public: static const int default_app_widget_padding_top = 0x0105004c;
        /**  The default gap between components in a layout. 
         */
        public: static const int default_gap = 0x01050046;
        /**  The platform's desired fixed height for a dialog along the major axis
         (the screen is in portrait). This may be either a fraction or a dimension.
 The platform's desired fixed height for a dialog along the major axis
         (the screen is in portrait). This may be either a fraction or a dimension.
 The platform's desired fixed height for a dialog along the major axis
         (the screen is in portrait). This may be either a fraction or a dimension.
         */
        public: static const int dialog_fixed_height_major = 0x0105002a;
        /**  The platform's desired fixed height for a dialog along the minor axis
         (the screen is in landscape). This may be either a fraction or a dimension.
 The platform's desired fixed height for a dialog along the minor axis
         (the screen is in landscape). This may be either a fraction or a dimension.
 The platform's desired fixed height for a dialog along the minor axis
         (the screen is in landscape). This may be either a fraction or a dimension.
         */
        public: static const int dialog_fixed_height_minor = 0x0105002b;
        /**  The platform's desired fixed width for a dialog along the major axis
         (the screen is in landscape). This may be either a fraction or a dimension.
 The platform's desired fixed width for a dialog along the major axis
         (the screen is in landscape). This may be either a fraction or a dimension.
 The platform's desired fixed width for a dialog along the major axis
         (the screen is in landscape). This may be either a fraction or a dimension.
         */
        public: static const int dialog_fixed_width_major = 0x01050028;
        /**  The platform's desired fixed width for a dialog along the minor axis
         (the screen is in portrait). This may be either a fraction or a dimension.
 The platform's desired fixed width for a dialog along the minor axis
         (the screen is in portrait). This may be either a fraction or a dimension.
 The platform's desired fixed width for a dialog along the minor axis
         (the screen is in portrait). This may be either a fraction or a dimension.
         */
        public: static const int dialog_fixed_width_minor = 0x01050029;
        /**  The platform's desired minimum size for a dialog's width when it
         is along the major axis (that is the screen is landscape).  This may
         be either a fraction or a dimension. 
         */
        public: static const int dialog_min_width_major = 0x01050003;
        /**  The platform's desired minimum size for a dialog's width when it
         is along the minor axis (that is the screen is portrait).  This may
         be either a fraction or a dimension. 
         */
        public: static const int dialog_min_width_minor = 0x01050004;
        /**  Default alpha value for disabled elements. 
         */
        public: static const int disabled_alpha_leanback_formwizard = 0x010500a9;
        public: static const int disabled_alpha_material_dark = 0x01050008;
        public: static const int disabled_alpha_material_light = 0x01050007;
        /**  Width of the icon in a dropdown list 
         */
        public: static const int dropdownitem_icon_width = 0x01050049;
        /**  Text padding for dropdown items 
         */
        public: static const int dropdownitem_text_padding_left = 0x01050047;
        /**  Text padding for dropdown items 
         */
        public: static const int dropdownitem_text_padding_right = 0x01050048;
        /**  Height of FaceUnlock view in keyguard 
 Height of FaceUnlock view in keyguard 
         */
        public: static const int face_unlock_height = 0x01050044;
        public: static const int floating_window_margin_bottom = 0x010500e6;
        public: static const int floating_window_margin_left = 0x010500e3;
        public: static const int floating_window_margin_right = 0x010500e5;
        public: static const int floating_window_margin_top = 0x010500e4;
        public: static const int floating_window_z = 0x010500e2;
        /**  target placement radius for GlowPadView. Should be 1/2 of outerring diameter. 
         */
        public: static const int glowpadview_target_placement_radius = 0x010500a6;
        /**  width of ImmersiveModeConfirmation (-1 for match_parent) 
 width of ImmersiveModeConfirmation (-1 for match_parent) 
 width of ImmersiveModeConfirmation (-1 for match_parent) 
         */
        public: static const int immersive_mode_cling_width = 0x01050096;
        /**  Shadow radius under the frame for the circular avatars. 
         */
        public: static const int keyguard_avatar_frame_shadow_radius = 0x01050074;
        /**  Stroke width of the frame for the circular avatars. 
 Stroke width of the frame for the circular avatars. 
         */
        public: static const int keyguard_avatar_frame_stroke_width = 0x01050073;
        /**  Size of the text under the avator on the multiuser lockscreen. 
 Size of the text under the avator on the multiuser lockscreen. 
         */
        public: static const int keyguard_avatar_name_size = 0x01050076;
        /**  Size of the avator on hte multiuser lockscreen. 
 Size of the avator on the multiuser lockscreen. 
         */
        public: static const int keyguard_avatar_size = 0x01050075;
        /**  Size of clock font in LockScreen on Unsecure unlock screen. 
 Size of clock font in LockScreen on Unsecure unlock screen. 
         */
        public: static const int keyguard_lockscreen_clock_font_size = 0x0105003e;
        /**  Size of lockscreen outerring on unsecure unlock LockScreen 
 Size of lockscreen outerring on unsecure unlock LockScreen 
         */
        public: static const int keyguard_lockscreen_outerring_diameter = 0x0105001d;
        /**  Padding on left margin of PIN text entry field to center it when del button is showing 
         */
        public: static const int keyguard_lockscreen_pin_margin_left = 0x01050043;
        /**  Size of top margin on Clock font to edge on unlock LockScreen 
         */
        public: static const int keyguard_lockscreen_status_line_clockfont_bottom_margin = 0x01050042;
        /**  Size of top margin on Clock font to edge on unlock LockScreen 
         */
        public: static const int keyguard_lockscreen_status_line_clockfont_top_margin = 0x01050041;
        /**  Size of right margin on Unsecure unlock LockScreen 
         */
        public: static const int keyguard_lockscreen_status_line_font_right_margin = 0x01050040;
        /**  Size of status line font on Unsecure unlock LockScreen. 
         */
        public: static const int keyguard_lockscreen_status_line_font_size = 0x0105003f;
        /**  Margin around the various security views 
 Margin around the various security views 
 Margin around the various security views 
         */
        public: static const int keyguard_muliuser_selector_margin = 0x01050072;
        /**  Size of clock font in LockScreen. 
         */
        public: static const int keyguard_pattern_unlock_clock_font_size = 0x010500a5;
        /**  Size of status line font in LockScreen. 
         */
        public: static const int keyguard_pattern_unlock_status_line_font_size = 0x010500a7;
        /**  Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
         */
        public: static const int keyguard_security_height = 0x01050070;
        /**  Margin around the various security views 
 Margin around the various security views 
         */
        public: static const int keyguard_security_view_margin = 0x01050071;
        /**  Width of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Width of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Width of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
         */
        public: static const int keyguard_security_width = 0x0105006f;
        /**  Top margin for the clock view 
 Top margin for the clock view 
 Top margin for the clock view 
 Top margin for the clock view 
 Top margin for the clock view 
 Top margin for the clock view 
         */
        public: static const int kg_clock_top_margin = 0x01050063;
        /**  Size of the region along the edge of the screen that will accept
         swipes to scroll the widget area. 
         */
        public: static const int kg_edge_swipe_region_size = 0x01050077;
        /**  Shift emergency button from the left edge by this amount.  Used by landscape layout on
         phones 
         */
        public: static const int kg_emergency_button_shift = 0x010500a3;
        /**  Horizontal gap between keys in PIN and SIM PIN numeric keyboards in keyguard 
         */
        public: static const int kg_key_horizontal_gap = 0x01050064;
        /**  Horizontal gap between keys in PIN and SIM PIN numeric keyboards in keyguard 
         */
        public: static const int kg_key_vertical_gap = 0x01050065;
        /**  Horizontal gap between keys in PIN and SIM PIN numeric keyboards in keyguard 
         */
        public: static const int kg_pin_key_height = 0x01050066;
        /**  The height of the runway lights strip 
         */
        public: static const int kg_runway_lights_height = 0x01050068;
        /**  Top margin for the runway lights. We add a negative margin in large
        devices to account for the widget pager padding 
 Top margin for the runway lights. We add a negative margin in large
        devices to account for the widget pager padding 
 Top margin for the runway lights. We add a negative margin in large
        devices to account for the widget pager padding 
         */
        public: static const int kg_runway_lights_top_margin = 0x0105006d;
        /**  The height of the runway lights strip 
         */
        public: static const int kg_runway_lights_vertical_padding = 0x01050069;
        /**  Space reserved at the bottom of secure views (pin/pattern/password/SIM pin/SIM puk) 
 Space reserved at the bottom of secure views (pin/pattern/password/SIM pin/SIM puk) 
         */
        public: static const int kg_secure_padding_height = 0x01050067;
        /**  Keyguard dimensions 
 TEMP 
         */
        public: static const int kg_security_panel_height = 0x0105005b;
        /**  Height of security view in keyguard. 
         */
        public: static const int kg_security_view_height = 0x0105005c;
        /**  The height of widgets which do not support vertical resizing. This is only
    used on tablets; on phones, this size is determined by the space left by the
    security mode. 
         */
        public: static const int kg_small_widget_height = 0x01050079;
        /**  If the height if keyguard drops below this threshold (most likely
    due to the appearance of the IME), then drop the multiuser selector. 
 If the height if keyguard drops below this threshold (most likely
    due to the appearance of the IME), then drop the multiuser selector.
    Landscape's layout allows this to be smaller than for portrait. 
         */
        public: static const int kg_squashed_layout_threshold = 0x01050078;
        /**  Size of the clock font in keyguard's status view 
 Keyguard dimensions 
 Size of the clock font in keyguard's status view 
 Keyguard dimensions 
 Size of the clock font in keyguard's status view 
         */
        public: static const int kg_status_clock_font_size = 0x0105005f;
        /**  Size of the date font in keyguard's status view  
 Size of the date font in keyguard's status view  
 Size of the date font in keyguard's status view  
         */
        public: static const int kg_status_date_font_size = 0x01050060;
        /**  Size of margin on the right of keyguard's status view 
 Size of margin on the right of keyguard's status view 
 Size of margin on the right of keyguard's status view 
 Size of margin on the right of keyguard's status view 
 Size of margin on the right of keyguard's status view 
         */
        public: static const int kg_status_line_font_right_margin = 0x01050062;
        /**  Size of the generic status lines keyguard's status view  
 Size of the generic status lines keyguard's status view  
 Size of the generic status lines keyguard's status view  
         */
        public: static const int kg_status_line_font_size = 0x01050061;
        /**  Bottom padding for the widget pager 
 Bottom padding for the widget pager 
 Bottom padding for the widget pager 
 Bottom padding for the widget pager 
         */
        public: static const int kg_widget_pager_bottom_padding = 0x0105006c;
        /**  Horizontal padding for the widget pager 
 Horizontal padding for the widget pager 
 Horizontal padding for the widget pager 
 Horizontal padding for the widget pager 
         */
        public: static const int kg_widget_pager_horizontal_padding = 0x0105006a;
        /**  Top padding for the widget pager 
 Top padding for the widget pager 
 Top padding for the widget pager 
 Top padding for the widget pager 
         */
        public: static const int kg_widget_pager_top_padding = 0x0105006b;
        /**  Height of widget view in keyguard. 
         */
        public: static const int kg_widget_view_height = 0x0105005e;
        /**  Width of widget view in keyguard. 
         */
        public: static const int kg_widget_view_width = 0x0105005d;
        /**  Leanback dialog horizontal margin 
         */
        public: static const int leanback_alert_dialog_horizontal_margin = 0x01050037;
        /**  Leanback dialog vertical margin 
         */
        public: static const int leanback_alert_dialog_vertical_margin = 0x01050036;
        /**  The opacity of the background of the new activity background when the alpha animation ends
         */
        public: static const int leanback_setup_alpha_activity_in_bkg_end = 0x010500af;
        /**  Opacity animation for activity background 
 The opacity of the background of the new activity background when the alpha animation starts
         */
        public: static const int leanback_setup_alpha_activity_in_bkg_start = 0x010500ae;
        /**  The opacity of the background of the new activity background when the alpha animation ends
         */
        public: static const int leanback_setup_alpha_activity_out_bkg_end = 0x010500b1;
        public: static const int leanback_setup_alpha_activity_out_bkg_start = 0x010500b0;
        public: static const int leanback_setup_alpha_animiation_max_opacity = 0x010500aa;
        public: static const int leanback_setup_alpha_animiation_min_opacity = 0x010500ab;
        public: static const int leanback_setup_alpha_backward_in_content_end = 0x010500bb;
        /**  Content backward animation configuration values 
 Alpha animation values for the content that will be displayed after the transition is complete, this is the content coming in. 
         */
        public: static const int leanback_setup_alpha_backward_in_content_start = 0x010500ba;
        public: static const int leanback_setup_alpha_backward_out_content_end = 0x010500bd;
        /**  Alpha animiation values for the content that is displayed when the transition starts, this is the content going away. 
         */
        public: static const int leanback_setup_alpha_backward_out_content_start = 0x010500bc;
        public: static const int leanback_setup_alpha_forward_in_content_end = 0x010500b3;
        /**  Content forward animation configuration values 
 Parameter for alpha animation of new content coming on to the screen when we're moving "forward" 
  Initial opacity of the new content that is coming on to the screen 
         */
        public: static const int leanback_setup_alpha_forward_in_content_start = 0x010500b2;
        public: static const int leanback_setup_alpha_forward_out_content_end = 0x010500b5;
        public: static const int leanback_setup_alpha_forward_out_content_start = 0x010500b4;
        public: static const int leanback_setup_translation_backward_out_content_end = 0x010500c0;
        public: static const int leanback_setup_translation_backward_out_content_end_v4 = 0x010500c1;
        /**  Position animation for content that is displayed when the transition starts, this is the content going away. 
         */
        public: static const int leanback_setup_translation_backward_out_content_start = 0x010500be;
        public: static const int leanback_setup_translation_backward_out_content_start_v4 = 0x010500bf;
        /**  The screen position at which content enters/exits. If you're over the edge of the cliff, we can't see you. 
         */
        public: static const int leanback_setup_translation_content_cliff = 0x010500ad;
        /**  Where stable, on-screen content rests 
         */
        public: static const int leanback_setup_translation_content_resting_point = 0x010500ac;
        public: static const int leanback_setup_translation_forward_in_content_end = 0x010500b8;
        public: static const int leanback_setup_translation_forward_in_content_end_v4 = 0x010500b9;
        /**  Position animation of incoming content during a "forward" transition 
         */
        public: static const int leanback_setup_translation_forward_in_content_start = 0x010500b6;
        public: static const int leanback_setup_translation_forward_in_content_start_v4 = 0x010500b7;
        public: static const int light_radius = 0x0105009f;
        /**  Lighting and shadow properties 
 Lighting and shadow properties 
         */
        public: static const int light_y = 0x0105009d;
        public: static const int light_z = 0x0105009e;
        public: static const int lock_pattern_dot_line_width = 0x01050099;
        public: static const int lock_pattern_dot_size = 0x0105009a;
        public: static const int lock_pattern_dot_size_activated = 0x0105009b;
        /**  Min width for a tablet device 
         */
        public: static const int min_xlarge_screen_width = 0x01050017;
        /**  Height of the bottom navigation / system bar. 
         */
        public: static const int navigation_bar_height = 0x01050011;
        /**  Height of the bottom navigation bar in portrait; often the same as @dimen/navigation_bar_height 
         */
        public: static const int navigation_bar_height_landscape = 0x01050012;
        /**  Height of the bottom navigation bar in portrait; on sw600dp devices
         this is a bit taller 
 Height of the bottom navigation bar in portrait; on sw720dp devices
         this is the same as the height in landscape 
         */
        public: static const int navigation_bar_height_portrait = 0x010500a8;
        /**  Width of the navigation bar when it is placed vertically on the screen 
         */
        public: static const int navigation_bar_width = 0x01050013;
        /**  Size of the profile badge for notifications 
         */
        public: static const int notification_badge_size = 0x0105005a;
        /**  Padding for notification icon when drawn with circle around it 
         */
        public: static const int notification_large_icon_circle_padding = 0x01050059;
        /**  The width of the big icons in notifications. 
         */
        public: static const int notification_large_icon_height = 0x01050006;
        /**  The width of the big icons in notifications. 
         */
        public: static const int notification_large_icon_width = 0x01050005;
        /**  Size of smaller notification text (see TextAppearance.StatusBar.EventContent.Line2, Info, Time) 
         */
        public: static const int notification_subtext_size = 0x01050054;
        /**  Size of notification text (see TextAppearance.StatusBar.EventContent) 
         */
        public: static const int notification_text_size = 0x01050052;
        /**  Size of notification text titles (see TextAppearance.StatusBar.EventContent.Title) 
         */
        public: static const int notification_title_text_size = 0x01050053;
        /**  Top padding for notifications in the standard layout. 
         */
        public: static const int notification_top_pad = 0x01050055;
        /**  Top padding for notification when text is large 
         */
        public: static const int notification_top_pad_large_text = 0x01050057;
        /**  Top padding for notification when text is large and narrow (i.e. it has 3 lines 
         */
        public: static const int notification_top_pad_large_text_narrow = 0x01050058;
        /**  Top padding for notifications when narrow (i.e. it has 3 lines) 
         */
        public: static const int notification_top_pad_narrow = 0x01050056;
        /**  keyboardHeight = key_height*4 + key_bottom_gap*3 
 keyboardHeight = key_height*4 + key_bottom_gap*3 
         */
        public: static const int password_keyboard_height = 0x010500a2;
        /**  Default horizontal gap between keys in the password keyboard (used by keyguard) 
         */
        public: static const int password_keyboard_horizontalGap = 0x0105001b;
        /**  Default height of a key in the password keyboard for alpha (used by keyguard) 
 Default height of a key in the password keyboard for alpha 
 Default height of a key in the password keyboard for alpha 
 Default height of a key in the password keyboard for alpha 
 Default height of a key in the password keyboard for alpha 
         */
        public: static const int password_keyboard_key_height_alpha = 0x01050018;
        /**  Default height of a key in the password keyboard for numeric (used by keyguard) 
 Default height of a key in the password keyboard for numeric 
 Default height of a key in the password keyboard for numeric 
 Default height of a key in the password keyboard for numeric 
         */
        public: static const int password_keyboard_key_height_numeric = 0x01050019;
        /**  Default correction for the space key in the password keyboard  (used by keyguard) 
 Default correction for the space key in the password keyboard 
         */
        public: static const int password_keyboard_spacebar_vertical_correction = 0x0105001a;
        /**  Default vertical gap between keys in the password keyboard (used by keyguard) 
         */
        public: static const int password_keyboard_verticalGap = 0x0105001c;
        /**  Padding to the left of the preference panel breadcrumb 
 Padding to the left of the preference panel breadcrumb 
 Padding to the left of the preference panel breadcrumb 
         */
        public: static const int preference_breadcrumb_paddingLeft = 0x01050025;
        /**  Padding to the right of the preference panel breadcrumb 
 Padding to the right of the preference panel breadcrumb 
 Padding to the right of the preference panel breadcrumb 
         */
        public: static const int preference_breadcrumb_paddingRight = 0x01050026;
        /**  Preference breadcrumbs padding, end padding 
         */
        public: static const int preference_breadcrumbs_padding_end_material = 0x010500c7;
        /**  Preference breadcrumbs padding, start padding 
         */
        public: static const int preference_breadcrumbs_padding_start_material = 0x010500c6;
        public: static const int preference_child_padding_side = 0x01050030;
        /**  Preference fragment padding, bottom 
 Preference fragment padding, bottom 
 Preference fragment padding, bottom 
         */
        public: static const int preference_fragment_padding_bottom = 0x01050023;
        /**  Preference fragment padding, sides 
 Preference fragment padding, sides 
 Preference fragment padding, sides 
 Preference fragment padding, sides 
 Preference fragment padding, sides 
         */
        public: static const int preference_fragment_padding_side = 0x01050024;
        /**  Preference fragment padding, sides 
         */
        public: static const int preference_fragment_padding_side_material = 0x010500c5;
        /**  Minimum space to allocate to the left of a preference item for an icon.
        This helps in aligning titles when some items have icons and some don't. When space is
        at a premium, we don't pre-allocate any space. 
 Minimum space to allocate to the left of a preference item for an icon.
        This helps in aligning titles when some items have icons and some don't. When space is
        at a premium, we don't pre-allocate any space. 
         */
        public: static const int preference_icon_minWidth = 0x01050027;
        public: static const int preference_item_padding_inner = 0x0105002f;
        /**  outsideOverlay 
         */
        public: static const int preference_item_padding_side = 0x0105002e;
        /**  Preference activity bottom margin 
         */
        public: static const int preference_screen_bottom_margin = 0x01050021;
        public: static const int preference_screen_header_padding_side = 0x0105002d;
        public: static const int preference_screen_header_padding_side_material = 0x010500c8;
        /**  Preference activity, vertical padding for the header list 
 Preference activity, vertical padding for the header list 
         */
        public: static const int preference_screen_header_vertical_padding = 0x0105002c;
        /**  Preference activity, vertical padding for the header list 
         */
        public: static const int preference_screen_header_vertical_padding_material = 0x010500c2;
        /**  Preference activity side margins 
         */
        public: static const int preference_screen_side_margin = 0x0105001e;
        /**  Preference activity side margins 
         */
        public: static const int preference_screen_side_margin_material = 0x010500c3;
        /**  Preference activity side margins negative
 Compensate for double margin : preference_screen_side_margin + 4 (frame background shadow) = -preference_screen_side_margin_negative 
 Compensate for double margin : preference_screen_side_margin + 4 (frame background shadow) = -preference_screen_side_margin_negative 
         */
        public: static const int preference_screen_side_margin_negative = 0x0105001f;
        /**  Preference activity side margins negative
         */
        public: static const int preference_screen_side_margin_negative_material = 0x010500c4;
        /**  Preference activity top margin 
         */
        public: static const int preference_screen_top_margin = 0x01050020;
        /**  Preference widget area width (to the left of the text) 
 Preference UI dimensions for larger screens. 
         */
        public: static const int preference_widget_width = 0x01050022;
        public: static const int resolver_max_width = 0x01050097;
        /**  Preferred width of the search view. 
         */
        public: static const int search_view_preferred_width = 0x01050032;
        /**  Minimum width of the search view text entry area. 
 Minimum width of the search view text entry area. 
 Minimum width of the search view text entry area. 
 Minimum width of the search view text entry area. 
         */
        public: static const int search_view_text_min_width = 0x01050031;
        public: static const int spot_shadow_alpha = 0x010500a1;
        /**  Size of the giant number (unread count) in the notifications 
         */
        public: static const int status_bar_content_number_size = 0x01050015;
        /**  Margin at the edge of the screen to ignore touch events for in the windowshade. 
         */
        public: static const int status_bar_edge_ignore = 0x01050016;
        /**  Height of the status bar 
         */
        public: static const int status_bar_height = 0x01050010;
        /**  Height of notification icons in the status bar 
         */
        public: static const int status_bar_icon_size = 0x01050014;
        /**  Rounded corner radius for video subtitles. 
         */
        public: static const int subtitle_corner_radius = 0x0105007a;
        /**  Outline width for video subtitles. 
         */
        public: static const int subtitle_outline_width = 0x0105007d;
        /**  Shadow offset for video subtitles. 
         */
        public: static const int subtitle_shadow_offset = 0x0105007c;
        /**  Shadow radius for video subtitles. 
         */
        public: static const int subtitle_shadow_radius = 0x0105007b;
        public: static const int text_handle_min_size = 0x0105009c;
        public: static const int text_size_body_1_material = 0x010500dc;
        public: static const int text_size_body_2_material = 0x010500db;
        public: static const int text_size_button_material = 0x010500de;
        public: static const int text_size_caption_material = 0x010500dd;
        public: static const int text_size_display_1_material = 0x010500d4;
        public: static const int text_size_display_2_material = 0x010500d3;
        public: static const int text_size_display_3_material = 0x010500d2;
        public: static const int text_size_display_4_material = 0x010500d1;
        public: static const int text_size_headline_material = 0x010500d5;
        public: static const int text_size_large_material = 0x010500df;
        public: static const int text_size_medium_material = 0x010500e0;
        public: static const int text_size_menu_material = 0x010500da;
        public: static const int text_size_small_material = 0x010500e1;
        public: static const int text_size_subhead_material = 0x010500d7;
        /**  Default text size for action bar subtitle.
 Use the default subtitle sizes on tablets. 
         */
        public: static const int text_size_subtitle_material_toolbar = 0x010500d9;
        public: static const int text_size_title_material = 0x010500d6;
        /**  Default text size for action bar title.
 Use the default title sizes on tablets. 
         */
        public: static const int text_size_title_material_toolbar = 0x010500d8;
        /**  Default width for a textview error popup 
         */
        public: static const int textview_error_popup_default_width = 0x0105004a;
        /**  The height that is used when creating thumbnails of applications. 
 The height that is used when creating thumbnails of applications. 
 The height that is used when creating thumbnails of applications. 
         */
        public: static const int thumbnail_height = 0x01050001;
        /**  The width that is used when creating thumbnails of applications. 
 The width that is used when creating thumbnails of applications. 
 The width that is used when creating thumbnails of applications. 
         */
        public: static const int thumbnail_width = 0x01050002;
        public: static const int timepicker_ampm_label_size = 0x01050080;
        public: static const int timepicker_ampm_left_padding = 0x01050081;
        public: static const int timepicker_extra_time_label_margin = 0x0105007f;
        public: static const int timepicker_header_height = 0x01050083;
        /**  New TimePicker dimensions. 
         */
        public: static const int timepicker_left_side_width = 0x010500a4;
        public: static const int timepicker_minimum_margin_sides = 0x01050084;
        public: static const int timepicker_minimum_margin_top_bottom = 0x01050085;
        public: static const int timepicker_radial_picker_dimen = 0x01050086;
        public: static const int timepicker_separator_padding = 0x01050082;
        public: static const int timepicker_time_label_size = 0x0105007e;
        public: static const int toast_y_offset = 0x0105000f;
    };
    public: class drawable {
        public: static const int ab_bottom_solid_dark_holo = 0x0108009e;
        public: static const int ab_bottom_solid_inverse_holo = 0x0108009f;
        public: static const int ab_bottom_solid_light_holo = 0x010800a0;
        public: static const int ab_bottom_transparent_dark_holo = 0x010800a1;
        public: static const int ab_bottom_transparent_light_holo = 0x010800a2;
        public: static const int ab_share_pack_holo_dark = 0x010800a3;
        public: static const int ab_share_pack_holo_light = 0x010800b4;
        public: static const int ab_share_pack_material = 0x010800b5;
        public: static const int ab_share_pack_mtrl_alpha = 0x010800b6;
        public: static const int ab_solid_dark_holo = 0x010800b7;
        public: static const int ab_solid_light_holo = 0x010800b8;
        public: static const int ab_solid_shadow_holo = 0x010800b9;
        public: static const int ab_solid_shadow_material = 0x010800ba;
        public: static const int ab_solid_shadow_mtrl = 0x010800bb;
        public: static const int ab_solid_shadow_mtrl_alpha = 0x010800bc;
        public: static const int ab_stacked_solid_dark_holo = 0x010800bd;
        public: static const int ab_stacked_solid_inverse_holo = 0x010800be;
        public: static const int ab_stacked_solid_light_holo = 0x010800bf;
        public: static const int ab_stacked_transparent_dark_holo = 0x010800c0;
        public: static const int ab_stacked_transparent_light_holo = 0x010800c1;
        public: static const int ab_transparent_dark_holo = 0x010800c2;
        public: static const int ab_transparent_light_holo = 0x010800c3;
        public: static const int ab_transparent_mtrl_alpha = 0x010800c4;
        public: static const int action_bar_background = 0x010800c5;
        public: static const int action_bar_divider = 0x010800c6;
        public: static const int activated_background = 0x010800c7;
        public: static const int activated_background_holo_dark = 0x010800c8;
        public: static const int activated_background_holo_light = 0x010800c9;
        public: static const int activated_background_light = 0x010800ca;
        public: static const int activated_background_material = 0x010800cb;
        public: static const int activity_title_bar = 0x010800cc;
        public: static const int alert_dark_frame = 0x01080000;
        public: static const int alert_light_frame = 0x01080001;
        public: static const int app_icon_background = 0x010800cd;
        public: static const int arrow_down_float = 0x01080002;
        public: static const int arrow_up_float = 0x01080003;
        public: static const int background_holo_dark = 0x010800ce;
        public: static const int background_holo_light = 0x010800cf;
        public: static const int background_leanback_setup = 0x010800d0;
        public: static const int battery_charge_background = 0x010800d1;
        public: static const int blank_tile = 0x010800d2;
        public: static const int bottom_bar = 0x0108009a;
        public: static const int box = 0x010800d3;
        public: static const int btn_borderless_material = 0x010800d4;
        public: static const int btn_browser_zoom_fit_page = 0x010800d5;
        public: static const int btn_browser_zoom_page_overview = 0x010800d6;
        public: static const int btn_cab_done_default_holo_dark = 0x010800d7;
        public: static const int btn_cab_done_default_holo_light = 0x010800d8;
        public: static const int btn_cab_done_focused_holo_dark = 0x010800d9;
        public: static const int btn_cab_done_focused_holo_light = 0x010800da;
        public: static const int btn_cab_done_holo_dark = 0x010800db;
        public: static const int btn_cab_done_holo_light = 0x010800dc;
        public: static const int btn_cab_done_material = 0x010800dd;
        public: static const int btn_cab_done_mtrl_alpha = 0x010800de;
        public: static const int btn_cab_done_pressed_holo_dark = 0x010800df;
        public: static const int btn_cab_done_pressed_holo_light = 0x010800e0;
        public: static const int btn_check = 0x010800e1;
        public: static const int btn_check_buttonless_off = 0x010800e2;
        public: static const int btn_check_buttonless_on = 0x010800e3;
        public: static const int btn_check_holo_dark = 0x010800e4;
        public: static const int btn_check_holo_light = 0x010800e5;
        public: static const int btn_check_label_background = 0x010800e6;
        public: static const int btn_check_material_anim = 0x010800e7;
        public: static const int btn_check_off = 0x010800e8;
        public: static const int btn_check_off_disable = 0x010800e9;
        public: static const int btn_check_off_disable_focused = 0x010800ea;
        public: static const int btn_check_off_disable_focused_holo_dark = 0x010800eb;
        public: static const int btn_check_off_disable_focused_holo_light = 0x010800ec;
        public: static const int btn_check_off_disable_holo_dark = 0x010800ed;
        public: static const int btn_check_off_disable_holo_light = 0x010800ee;
        public: static const int btn_check_off_disabled_focused_holo_dark = 0x010800ef;
        public: static const int btn_check_off_disabled_focused_holo_light = 0x010800f0;
        public: static const int btn_check_off_disabled_holo_dark = 0x010800f1;
        public: static const int btn_check_off_disabled_holo_light = 0x010800f2;
        public: static const int btn_check_off_focused_holo_dark = 0x010800f3;
        public: static const int btn_check_off_focused_holo_light = 0x010800f4;
        public: static const int btn_check_off_holo = 0x010800f5;
        public: static const int btn_check_off_holo_dark = 0x010800f6;
        public: static const int btn_check_off_holo_light = 0x010800f7;
        public: static const int btn_check_off_mtrl_alpha = 0x010800f8;
        public: static const int btn_check_off_normal_holo_dark = 0x010800f9;
        public: static const int btn_check_off_normal_holo_light = 0x010800fa;
        public: static const int btn_check_off_pressed = 0x010800fb;
        public: static const int btn_check_off_pressed_holo_dark = 0x010800fc;
        public: static const int btn_check_off_pressed_holo_light = 0x010800fd;
        public: static const int btn_check_off_selected = 0x010800fe;
        public: static const int btn_check_on = 0x010800ff;
        public: static const int btn_check_on_disable = 0x01080100;
        public: static const int btn_check_on_disable_focused = 0x01080101;
        public: static const int btn_check_on_disable_focused_holo_light = 0x01080102;
        public: static const int btn_check_on_disable_holo_dark = 0x01080103;
        public: static const int btn_check_on_disable_holo_light = 0x01080104;
        public: static const int btn_check_on_disabled_focused_holo_dark = 0x01080105;
        public: static const int btn_check_on_disabled_focused_holo_light = 0x01080106;
        public: static const int btn_check_on_disabled_holo_dark = 0x01080107;
        public: static const int btn_check_on_disabled_holo_light = 0x01080108;
        public: static const int btn_check_on_focused_holo_dark = 0x01080109;
        public: static const int btn_check_on_focused_holo_light = 0x0108010a;
        public: static const int btn_check_on_holo = 0x0108010b;
        public: static const int btn_check_on_holo_dark = 0x0108010c;
        public: static const int btn_check_on_holo_light = 0x0108010d;
        public: static const int btn_check_on_mtrl_alpha = 0x0108010e;
        public: static const int btn_check_on_pressed = 0x0108010f;
        public: static const int btn_check_on_pressed_holo_dark = 0x01080110;
        public: static const int btn_check_on_pressed_holo_light = 0x01080111;
        public: static const int btn_check_on_selected = 0x01080112;
        public: static const int btn_check_to_off_mtrl_000 = 0x01080113;
        public: static const int btn_check_to_off_mtrl_001 = 0x01080114;
        public: static const int btn_check_to_off_mtrl_002 = 0x01080115;
        public: static const int btn_check_to_off_mtrl_003 = 0x01080116;
        public: static const int btn_check_to_off_mtrl_004 = 0x01080117;
        public: static const int btn_check_to_off_mtrl_005 = 0x01080118;
        public: static const int btn_check_to_off_mtrl_006 = 0x01080119;
        public: static const int btn_check_to_off_mtrl_007 = 0x0108011a;
        public: static const int btn_check_to_off_mtrl_008 = 0x0108011b;
        public: static const int btn_check_to_off_mtrl_009 = 0x0108011c;
        public: static const int btn_check_to_off_mtrl_010 = 0x0108011d;
        public: static const int btn_check_to_off_mtrl_011 = 0x0108011e;
        public: static const int btn_check_to_off_mtrl_012 = 0x0108011f;
        public: static const int btn_check_to_off_mtrl_013 = 0x01080120;
        public: static const int btn_check_to_off_mtrl_014 = 0x01080121;
        public: static const int btn_check_to_off_mtrl_015 = 0x01080122;
        public: static const int btn_check_to_on_mtrl_000 = 0x01080123;
        public: static const int btn_check_to_on_mtrl_001 = 0x01080124;
        public: static const int btn_check_to_on_mtrl_002 = 0x01080125;
        public: static const int btn_check_to_on_mtrl_003 = 0x01080126;
        public: static const int btn_check_to_on_mtrl_004 = 0x01080127;
        public: static const int btn_check_to_on_mtrl_005 = 0x01080128;
        public: static const int btn_check_to_on_mtrl_006 = 0x01080129;
        public: static const int btn_check_to_on_mtrl_007 = 0x0108012a;
        public: static const int btn_check_to_on_mtrl_008 = 0x0108012b;
        public: static const int btn_check_to_on_mtrl_009 = 0x0108012c;
        public: static const int btn_check_to_on_mtrl_010 = 0x0108012d;
        public: static const int btn_check_to_on_mtrl_011 = 0x0108012e;
        public: static const int btn_check_to_on_mtrl_012 = 0x0108012f;
        public: static const int btn_check_to_on_mtrl_013 = 0x01080130;
        public: static const int btn_check_to_on_mtrl_014 = 0x01080131;
        public: static const int btn_check_to_on_mtrl_015 = 0x01080132;
        public: static const int btn_circle = 0x01080133;
        public: static const int btn_circle_disable = 0x01080134;
        public: static const int btn_circle_disable_focused = 0x01080135;
        public: static const int btn_circle_normal = 0x01080136;
        public: static const int btn_circle_pressed = 0x01080137;
        public: static const int btn_circle_selected = 0x01080138;
        public: static const int btn_close = 0x01080139;
        public: static const int btn_close_normal = 0x0108013a;
        public: static const int btn_close_pressed = 0x0108013b;
        public: static const int btn_close_selected = 0x0108013c;
        public: static const int btn_default = 0x01080004;
        public: static const int btn_default_disabled_focused_holo_dark = 0x0108013d;
        public: static const int btn_default_disabled_focused_holo_light = 0x0108013e;
        public: static const int btn_default_disabled_holo = 0x0108013f;
        public: static const int btn_default_disabled_holo_dark = 0x01080140;
        public: static const int btn_default_disabled_holo_light = 0x01080141;
        public: static const int btn_default_focused_holo = 0x01080142;
        public: static const int btn_default_focused_holo_dark = 0x01080143;
        public: static const int btn_default_focused_holo_light = 0x01080144;
        public: static const int btn_default_holo_dark = 0x01080145;
        public: static const int btn_default_holo_light = 0x01080146;
        public: static const int btn_default_material = 0x01080147;
        public: static const int btn_default_mtrl_shape = 0x01080148;
        public: static const int btn_default_normal = 0x01080149;
        public: static const int btn_default_normal_disable = 0x0108014a;
        public: static const int btn_default_normal_disable_focused = 0x0108014b;
        public: static const int btn_default_normal_holo = 0x0108014c;
        public: static const int btn_default_normal_holo_dark = 0x0108014d;
        public: static const int btn_default_normal_holo_light = 0x0108014e;
        public: static const int btn_default_pressed = 0x0108014f;
        public: static const int btn_default_pressed_holo = 0x01080150;
        public: static const int btn_default_pressed_holo_dark = 0x01080151;
        public: static const int btn_default_pressed_holo_light = 0x01080152;
        public: static const int btn_default_selected = 0x01080153;
        public: static const int btn_default_small = 0x01080005;
        public: static const int btn_default_small_normal = 0x01080154;
        public: static const int btn_default_small_normal_disable = 0x01080155;
        public: static const int btn_default_small_normal_disable_focused = 0x01080156;
        public: static const int btn_default_small_pressed = 0x01080157;
        public: static const int btn_default_small_selected = 0x01080158;
        public: static const int btn_default_transparent = 0x01080159;
        public: static const int btn_default_transparent_normal = 0x0108015a;
        public: static const int btn_dialog = 0x01080017;
        public: static const int btn_dialog_disable = 0x0108015b;
        public: static const int btn_dialog_normal = 0x0108015c;
        public: static const int btn_dialog_pressed = 0x0108015d;
        public: static const int btn_dialog_selected = 0x0108015e;
        public: static const int btn_dropdown = 0x01080006;
        public: static const int btn_dropdown_disabled = 0x0108015f;
        public: static const int btn_dropdown_disabled_focused = 0x01080160;
        public: static const int btn_dropdown_normal = 0x01080161;
        public: static const int btn_dropdown_pressed = 0x01080162;
        public: static const int btn_dropdown_selected = 0x01080163;
        public: static const int btn_erase_default = 0x01080164;
        public: static const int btn_erase_pressed = 0x01080165;
        public: static const int btn_erase_selected = 0x01080166;
        public: static const int btn_global_search = 0x01080167;
        public: static const int btn_global_search_normal = 0x01080168;
        public: static const int btn_group_disabled_holo_dark = 0x01080169;
        public: static const int btn_group_disabled_holo_light = 0x0108016a;
        public: static const int btn_group_focused_holo_dark = 0x0108016b;
        public: static const int btn_group_focused_holo_light = 0x0108016c;
        public: static const int btn_group_holo_dark = 0x0108016d;
        public: static const int btn_group_holo_light = 0x0108016e;
        public: static const int btn_group_normal_holo_dark = 0x0108016f;
        public: static const int btn_group_normal_holo_light = 0x01080170;
        public: static const int btn_group_pressed_holo_dark = 0x01080171;
        public: static const int btn_group_pressed_holo_light = 0x01080172;
        public: static const int btn_keyboard_key = 0x01080173;
        public: static const int btn_keyboard_key_dark_normal_holo = 0x01080174;
        public: static const int btn_keyboard_key_dark_normal_off_holo = 0x01080175;
        public: static const int btn_keyboard_key_dark_normal_on_holo = 0x01080176;
        public: static const int btn_keyboard_key_dark_pressed_holo = 0x01080177;
        public: static const int btn_keyboard_key_dark_pressed_off_holo = 0x01080178;
        public: static const int btn_keyboard_key_dark_pressed_on_holo = 0x01080179;
        public: static const int btn_keyboard_key_fulltrans = 0x0108017a;
        public: static const int btn_keyboard_key_fulltrans_normal = 0x0108017b;
        public: static const int btn_keyboard_key_fulltrans_normal_off = 0x0108017c;
        public: static const int btn_keyboard_key_fulltrans_normal_on = 0x0108017d;
        public: static const int btn_keyboard_key_fulltrans_pressed = 0x0108017e;
        public: static const int btn_keyboard_key_fulltrans_pressed_off = 0x0108017f;
        public: static const int btn_keyboard_key_fulltrans_pressed_on = 0x01080180;
        public: static const int btn_keyboard_key_ics = 0x01080181;
        public: static const int btn_keyboard_key_light_normal_holo = 0x01080182;
        public: static const int btn_keyboard_key_light_pressed_holo = 0x01080183;
        public: static const int btn_keyboard_key_normal = 0x01080184;
        public: static const int btn_keyboard_key_normal_off = 0x01080185;
        public: static const int btn_keyboard_key_normal_on = 0x01080186;
        public: static const int btn_keyboard_key_pressed = 0x01080187;
        public: static const int btn_keyboard_key_pressed_off = 0x01080188;
        public: static const int btn_keyboard_key_pressed_on = 0x01080189;
        public: static const int btn_keyboard_key_trans = 0x0108018a;
        public: static const int btn_keyboard_key_trans_normal = 0x0108018b;
        public: static const int btn_keyboard_key_trans_normal_off = 0x0108018c;
        public: static const int btn_keyboard_key_trans_normal_on = 0x0108018d;
        public: static const int btn_keyboard_key_trans_pressed = 0x0108018e;
        public: static const int btn_keyboard_key_trans_pressed_off = 0x0108018f;
        public: static const int btn_keyboard_key_trans_pressed_on = 0x01080190;
        public: static const int btn_keyboard_key_trans_selected = 0x01080191;
        public: static const int btn_lock_normal = 0x01080192;
        public: static const int btn_media_player = 0x01080193;
        public: static const int btn_media_player_disabled = 0x01080194;
        public: static const int btn_media_player_disabled_selected = 0x01080195;
        public: static const int btn_media_player_pressed = 0x01080196;
        public: static const int btn_media_player_selected = 0x01080197;
        public: static const int btn_minus = 0x01080007;
        public: static const int btn_minus_default = 0x01080198;
        public: static const int btn_minus_disable = 0x01080199;
        public: static const int btn_minus_disable_focused = 0x0108019a;
        public: static const int btn_minus_pressed = 0x0108019b;
        public: static const int btn_minus_selected = 0x0108019c;
        public: static const int btn_plus = 0x01080008;
        public: static const int btn_plus_default = 0x0108019d;
        public: static const int btn_plus_disable = 0x0108019e;
        public: static const int btn_plus_disable_focused = 0x0108019f;
        public: static const int btn_plus_pressed = 0x010801a0;
        public: static const int btn_plus_selected = 0x010801a1;
        public: static const int btn_radio = 0x01080009;
        public: static const int btn_radio_holo_dark = 0x010801a2;
        public: static const int btn_radio_holo_light = 0x010801a3;
        public: static const int btn_radio_label_background = 0x010801a4;
        public: static const int btn_radio_material_anim = 0x010801a5;
        public: static const int btn_radio_off = 0x010801a6;
        public: static const int btn_radio_off_disabled_focused_holo_dark = 0x010801a7;
        public: static const int btn_radio_off_disabled_focused_holo_light = 0x010801a8;
        public: static const int btn_radio_off_disabled_holo_dark = 0x010801a9;
        public: static const int btn_radio_off_disabled_holo_light = 0x010801aa;
        public: static const int btn_radio_off_focused_holo_dark = 0x010801ab;
        public: static const int btn_radio_off_focused_holo_light = 0x010801ac;
        public: static const int btn_radio_off_holo = 0x010801ad;
        public: static const int btn_radio_off_holo_dark = 0x010801ae;
        public: static const int btn_radio_off_holo_light = 0x010801af;
        public: static const int btn_radio_off_mtrl_alpha = 0x010801b0;
        public: static const int btn_radio_off_pressed = 0x010801b1;
        public: static const int btn_radio_off_pressed_holo_dark = 0x010801b2;
        public: static const int btn_radio_off_pressed_holo_light = 0x010801b3;
        public: static const int btn_radio_off_pressed_mtrl_alpha = 0x010801b4;
        public: static const int btn_radio_off_selected = 0x010801b5;
        public: static const int btn_radio_on = 0x010801b6;
        public: static const int btn_radio_on_disabled_focused_holo_dark = 0x010801b7;
        public: static const int btn_radio_on_disabled_focused_holo_light = 0x010801b8;
        public: static const int btn_radio_on_disabled_holo_dark = 0x010801b9;
        public: static const int btn_radio_on_disabled_holo_light = 0x010801ba;
        public: static const int btn_radio_on_focused_holo_dark = 0x010801bb;
        public: static const int btn_radio_on_focused_holo_light = 0x010801bc;
        public: static const int btn_radio_on_holo = 0x010801bd;
        public: static const int btn_radio_on_holo_dark = 0x010801be;
        public: static const int btn_radio_on_holo_light = 0x010801bf;
        public: static const int btn_radio_on_mtrl_alpha = 0x010801c0;
        public: static const int btn_radio_on_pressed = 0x010801c1;
        public: static const int btn_radio_on_pressed_holo_dark = 0x010801c2;
        public: static const int btn_radio_on_pressed_holo_light = 0x010801c3;
        public: static const int btn_radio_on_pressed_mtrl_alpha = 0x010801c4;
        public: static const int btn_radio_on_selected = 0x010801c5;
        public: static const int btn_radio_to_off_mtrl_000 = 0x010801c6;
        public: static const int btn_radio_to_off_mtrl_001 = 0x010801c7;
        public: static const int btn_radio_to_off_mtrl_002 = 0x010801c8;
        public: static const int btn_radio_to_off_mtrl_003 = 0x010801c9;
        public: static const int btn_radio_to_off_mtrl_004 = 0x010801ca;
        public: static const int btn_radio_to_off_mtrl_005 = 0x010801cb;
        public: static const int btn_radio_to_off_mtrl_006 = 0x010801cc;
        public: static const int btn_radio_to_off_mtrl_007 = 0x010801cd;
        public: static const int btn_radio_to_off_mtrl_008 = 0x010801ce;
        public: static const int btn_radio_to_off_mtrl_009 = 0x010801cf;
        public: static const int btn_radio_to_off_mtrl_010 = 0x010801d0;
        public: static const int btn_radio_to_off_mtrl_011 = 0x010801d1;
        public: static const int btn_radio_to_off_mtrl_012 = 0x010801d2;
        public: static const int btn_radio_to_off_mtrl_013 = 0x010801d3;
        public: static const int btn_radio_to_off_mtrl_014 = 0x010801d4;
        public: static const int btn_radio_to_off_mtrl_015 = 0x010801d5;
        public: static const int btn_radio_to_on_mtrl_000 = 0x010801d6;
        public: static const int btn_radio_to_on_mtrl_001 = 0x010801d7;
        public: static const int btn_radio_to_on_mtrl_002 = 0x010801d8;
        public: static const int btn_radio_to_on_mtrl_003 = 0x010801d9;
        public: static const int btn_radio_to_on_mtrl_004 = 0x010801da;
        public: static const int btn_radio_to_on_mtrl_005 = 0x010801db;
        public: static const int btn_radio_to_on_mtrl_006 = 0x010801dc;
        public: static const int btn_radio_to_on_mtrl_007 = 0x010801dd;
        public: static const int btn_radio_to_on_mtrl_008 = 0x010801de;
        public: static const int btn_radio_to_on_mtrl_009 = 0x010801df;
        public: static const int btn_radio_to_on_mtrl_010 = 0x010801e0;
        public: static const int btn_radio_to_on_mtrl_011 = 0x010801e1;
        public: static const int btn_radio_to_on_mtrl_012 = 0x010801e2;
        public: static const int btn_radio_to_on_mtrl_013 = 0x010801e3;
        public: static const int btn_radio_to_on_mtrl_014 = 0x010801e4;
        public: static const int btn_radio_to_on_mtrl_015 = 0x010801e5;
        public: static const int btn_rating_star_off_disabled_focused_holo_dark = 0x010801e6;
        public: static const int btn_rating_star_off_disabled_focused_holo_light = 0x010801e7;
        public: static const int btn_rating_star_off_disabled_holo_dark = 0x010801e8;
        public: static const int btn_rating_star_off_disabled_holo_light = 0x010801e9;
        public: static const int btn_rating_star_off_focused_holo_dark = 0x010801ea;
        public: static const int btn_rating_star_off_focused_holo_light = 0x010801eb;
        public: static const int btn_rating_star_off_mtrl_alpha = 0x010801ec;
        public: static const int btn_rating_star_off_normal = 0x010801ed;
        public: static const int btn_rating_star_off_normal_holo_dark = 0x010801ee;
        public: static const int btn_rating_star_off_normal_holo_light = 0x010801ef;
        public: static const int btn_rating_star_off_pressed = 0x010801f0;
        public: static const int btn_rating_star_off_pressed_holo_dark = 0x010801f1;
        public: static const int btn_rating_star_off_pressed_holo_light = 0x010801f2;
        public: static const int btn_rating_star_off_selected = 0x010801f3;
        public: static const int btn_rating_star_on_disabled_focused_holo_dark = 0x010801f4;
        public: static const int btn_rating_star_on_disabled_focused_holo_light = 0x010801f5;
        public: static const int btn_rating_star_on_disabled_holo_dark = 0x010801f6;
        public: static const int btn_rating_star_on_disabled_holo_light = 0x010801f7;
        public: static const int btn_rating_star_on_focused_holo_dark = 0x010801f8;
        public: static const int btn_rating_star_on_focused_holo_light = 0x010801f9;
        public: static const int btn_rating_star_on_mtrl_alpha = 0x010801fa;
        public: static const int btn_rating_star_on_normal = 0x010801fb;
        public: static const int btn_rating_star_on_normal_holo_dark = 0x010801fc;
        public: static const int btn_rating_star_on_normal_holo_light = 0x010801fd;
        public: static const int btn_rating_star_on_pressed = 0x010801fe;
        public: static const int btn_rating_star_on_pressed_holo_dark = 0x010801ff;
        public: static const int btn_rating_star_on_pressed_holo_light = 0x01080200;
        public: static const int btn_rating_star_on_selected = 0x01080201;
        public: static const int btn_search_dialog = 0x01080202;
        public: static const int btn_search_dialog_default = 0x01080203;
        public: static const int btn_search_dialog_pressed = 0x01080204;
        public: static const int btn_search_dialog_selected = 0x01080205;
        public: static const int btn_search_dialog_voice = 0x01080206;
        public: static const int btn_search_dialog_voice_default = 0x01080207;
        public: static const int btn_search_dialog_voice_pressed = 0x01080208;
        public: static const int btn_search_dialog_voice_selected = 0x01080209;
        public: static const int btn_square_overlay = 0x0108020a;
        public: static const int btn_square_overlay_disabled = 0x0108020b;
        public: static const int btn_square_overlay_disabled_focused = 0x0108020c;
        public: static const int btn_square_overlay_normal = 0x0108020d;
        public: static const int btn_square_overlay_pressed = 0x0108020e;
        public: static const int btn_square_overlay_selected = 0x0108020f;
        public: static const int btn_star = 0x0108000a;
        public: static const int btn_star_big_off = 0x0108000b;
        public: static const int btn_star_big_off_disable = 0x01080210;
        public: static const int btn_star_big_off_disable_focused = 0x01080211;
        public: static const int btn_star_big_off_pressed = 0x01080212;
        public: static const int btn_star_big_off_selected = 0x01080213;
        public: static const int btn_star_big_on = 0x0108000c;
        public: static const int btn_star_big_on_disable = 0x01080214;
        public: static const int btn_star_big_on_disable_focused = 0x01080215;
        public: static const int btn_star_big_on_pressed = 0x01080216;
        public: static const int btn_star_big_on_selected = 0x01080217;
        public: static const int btn_star_holo_dark = 0x01080218;
        public: static const int btn_star_holo_light = 0x01080219;
        public: static const int btn_star_label_background = 0x0108021a;
        public: static const int btn_star_material = 0x0108021b;
        public: static const int btn_star_mtrl_alpha = 0x0108021c;
        public: static const int btn_star_off_disabled_focused_holo_dark = 0x0108021d;
        public: static const int btn_star_off_disabled_focused_holo_light = 0x0108021e;
        public: static const int btn_star_off_disabled_holo_dark = 0x0108021f;
        public: static const int btn_star_off_disabled_holo_light = 0x01080220;
        public: static const int btn_star_off_focused_holo_dark = 0x01080221;
        public: static const int btn_star_off_focused_holo_light = 0x01080222;
        public: static const int btn_star_off_normal_holo_dark = 0x01080223;
        public: static const int btn_star_off_normal_holo_light = 0x01080224;
        public: static const int btn_star_off_pressed_holo_dark = 0x01080225;
        public: static const int btn_star_off_pressed_holo_light = 0x01080226;
        public: static const int btn_star_on_disabled_focused_holo_dark = 0x01080227;
        public: static const int btn_star_on_disabled_focused_holo_light = 0x01080228;
        public: static const int btn_star_on_disabled_holo_dark = 0x01080229;
        public: static const int btn_star_on_disabled_holo_light = 0x0108022a;
        public: static const int btn_star_on_focused_holo_dark = 0x0108022b;
        public: static const int btn_star_on_focused_holo_light = 0x0108022c;
        public: static const int btn_star_on_normal_holo_dark = 0x0108022d;
        public: static const int btn_star_on_normal_holo_light = 0x0108022e;
        public: static const int btn_star_on_pressed_holo_dark = 0x0108022f;
        public: static const int btn_star_on_pressed_holo_light = 0x01080230;
        public: static const int btn_switch_to_off_mtrl_00001 = 0x01080231;
        public: static const int btn_switch_to_off_mtrl_00002 = 0x01080232;
        public: static const int btn_switch_to_off_mtrl_00003 = 0x01080233;
        public: static const int btn_switch_to_off_mtrl_00004 = 0x01080234;
        public: static const int btn_switch_to_off_mtrl_00005 = 0x01080235;
        public: static const int btn_switch_to_off_mtrl_00006 = 0x01080236;
        public: static const int btn_switch_to_off_mtrl_00007 = 0x01080237;
        public: static const int btn_switch_to_off_mtrl_00008 = 0x01080238;
        public: static const int btn_switch_to_off_mtrl_00009 = 0x01080239;
        public: static const int btn_switch_to_off_mtrl_00010 = 0x0108023a;
        public: static const int btn_switch_to_off_mtrl_00011 = 0x0108023b;
        public: static const int btn_switch_to_off_mtrl_00012 = 0x0108023c;
        public: static const int btn_switch_to_on_mtrl_00001 = 0x0108023d;
        public: static const int btn_switch_to_on_mtrl_00002 = 0x0108023e;
        public: static const int btn_switch_to_on_mtrl_00003 = 0x0108023f;
        public: static const int btn_switch_to_on_mtrl_00004 = 0x01080240;
        public: static const int btn_switch_to_on_mtrl_00005 = 0x01080241;
        public: static const int btn_switch_to_on_mtrl_00006 = 0x01080242;
        public: static const int btn_switch_to_on_mtrl_00007 = 0x01080243;
        public: static const int btn_switch_to_on_mtrl_00008 = 0x01080244;
        public: static const int btn_switch_to_on_mtrl_00009 = 0x01080245;
        public: static const int btn_switch_to_on_mtrl_00010 = 0x01080246;
        public: static const int btn_switch_to_on_mtrl_00011 = 0x01080247;
        public: static const int btn_switch_to_on_mtrl_00012 = 0x01080248;
        public: static const int btn_toggle = 0x01080249;
        public: static const int btn_toggle_bg = 0x0108024a;
        public: static const int btn_toggle_holo_dark = 0x0108024b;
        public: static const int btn_toggle_holo_light = 0x0108024c;
        public: static const int btn_toggle_indicator_mtrl_alpha = 0x0108024d;
        public: static const int btn_toggle_material = 0x0108024e;
        public: static const int btn_toggle_off = 0x0108024f;
        public: static const int btn_toggle_off_disabled_focused_holo_dark = 0x01080250;
        public: static const int btn_toggle_off_disabled_focused_holo_light = 0x01080251;
        public: static const int btn_toggle_off_disabled_holo_dark = 0x01080252;
        public: static const int btn_toggle_off_disabled_holo_light = 0x01080253;
        public: static const int btn_toggle_off_focused_holo_dark = 0x01080254;
        public: static const int btn_toggle_off_focused_holo_light = 0x01080255;
        public: static const int btn_toggle_off_normal_holo_dark = 0x01080256;
        public: static const int btn_toggle_off_normal_holo_light = 0x01080257;
        public: static const int btn_toggle_off_pressed_holo_dark = 0x01080258;
        public: static const int btn_toggle_off_pressed_holo_light = 0x01080259;
        public: static const int btn_toggle_on = 0x0108025a;
        public: static const int btn_toggle_on_disabled_focused_holo_dark = 0x0108025b;
        public: static const int btn_toggle_on_disabled_focused_holo_light = 0x0108025c;
        public: static const int btn_toggle_on_disabled_holo_dark = 0x0108025d;
        public: static const int btn_toggle_on_disabled_holo_light = 0x0108025e;
        public: static const int btn_toggle_on_focused_holo_dark = 0x0108025f;
        public: static const int btn_toggle_on_focused_holo_light = 0x01080260;
        public: static const int btn_toggle_on_normal_holo_dark = 0x01080261;
        public: static const int btn_toggle_on_normal_holo_light = 0x01080262;
        public: static const int btn_toggle_on_pressed_holo_dark = 0x01080263;
        public: static const int btn_toggle_on_pressed_holo_light = 0x01080264;
        public: static const int btn_zoom_down = 0x01080265;
        public: static const int btn_zoom_down_disabled = 0x01080266;
        public: static const int btn_zoom_down_disabled_focused = 0x01080267;
        public: static const int btn_zoom_down_normal = 0x01080268;
        public: static const int btn_zoom_down_pressed = 0x01080269;
        public: static const int btn_zoom_down_selected = 0x0108026a;
        public: static const int btn_zoom_page = 0x0108026b;
        public: static const int btn_zoom_page_normal = 0x0108026c;
        public: static const int btn_zoom_page_press = 0x0108026d;
        public: static const int btn_zoom_up = 0x0108026e;
        public: static const int btn_zoom_up_disabled = 0x0108026f;
        public: static const int btn_zoom_up_disabled_focused = 0x01080270;
        public: static const int btn_zoom_up_normal = 0x01080271;
        public: static const int btn_zoom_up_pressed = 0x01080272;
        public: static const int btn_zoom_up_selected = 0x01080273;
        public: static const int button_inset = 0x01080274;
        public: static const int button_onoff_indicator_off = 0x0108000e;
        public: static const int button_onoff_indicator_on = 0x0108000d;
        public: static const int cab_background_bottom_holo_dark = 0x01080275;
        public: static const int cab_background_bottom_holo_light = 0x01080276;
        public: static const int cab_background_bottom_material = 0x01080277;
        public: static const int cab_background_bottom_mtrl_alpha = 0x01080278;
        public: static const int cab_background_top_holo_dark = 0x01080279;
        public: static const int cab_background_top_holo_light = 0x0108027a;
        public: static const int cab_background_top_material = 0x0108027b;
        public: static const int cab_background_top_mtrl_alpha = 0x0108027c;
        public: static const int call_contact = 0x0108027d;
        public: static const int checkbox_off_background = 0x0108000f;
        public: static const int checkbox_on_background = 0x01080010;
        public: static const int cling_arrow_up = 0x0108027e;
        public: static const int cling_bg = 0x0108027f;
        public: static const int cling_button = 0x01080280;
        public: static const int cling_button_normal = 0x01080281;
        public: static const int cling_button_pressed = 0x01080282;
        public: static const int clock_dial = 0x01080283;
        public: static const int clock_hand_hour = 0x01080284;
        public: static const int clock_hand_minute = 0x01080285;
        public: static const int code_lock_bottom = 0x01080286;
        public: static const int code_lock_left = 0x01080287;
        public: static const int code_lock_top = 0x01080288;
        public: static const int combobox_disabled = 0x01080289;
        public: static const int combobox_nohighlight = 0x0108028a;
        public: static const int compass_arrow = 0x0108028b;
        public: static const int compass_base = 0x0108028c;
        public: static const int contact_header_bg = 0x0108028d;
        public: static const int create_contact = 0x0108028e;
        /**   Drawable to use as a background for separators on a list with a dark background 
         */
        public: static const int dark_header = 0x010800a5;
        public: static const int dark_header_dither = 0x0108028f;
        public: static const int day_picker_week_view_dayline_holo = 0x01080290;
        public: static const int default_wallpaper = 0x01080291;
        public: static const int dialog_background_material = 0x01080292;
        public: static const int dialog_background_mtrl_mult = 0x01080293;
        public: static const int dialog_background_shadow_material = 0x01080294;
        public: static const int dialog_bottom_holo_dark = 0x01080295;
        public: static const int dialog_bottom_holo_light = 0x01080296;
        public: static const int dialog_divider_horizontal_holo_dark = 0x01080297;
        public: static const int dialog_divider_horizontal_holo_light = 0x01080298;
        public: static const int dialog_divider_horizontal_light = 0x01080299;
        public: static const int dialog_frame = 0x01080011;
        public: static const int dialog_full_holo_dark = 0x0108029a;
        public: static const int dialog_full_holo_light = 0x0108029b;
        public: static const int dialog_holo_dark_frame = 0x010800b2;
        public: static const int dialog_holo_light_frame = 0x010800b3;
        public: static const int dialog_ic_close_focused_holo_dark = 0x0108029c;
        public: static const int dialog_ic_close_focused_holo_light = 0x0108029d;
        public: static const int dialog_ic_close_normal_holo_dark = 0x0108029e;
        public: static const int dialog_ic_close_normal_holo_light = 0x0108029f;
        public: static const int dialog_ic_close_pressed_holo_dark = 0x010802a0;
        public: static const int dialog_ic_close_pressed_holo_light = 0x010802a1;
        public: static const int dialog_middle_holo = 0x010802a2;
        public: static const int dialog_middle_holo_dark = 0x010802a3;
        public: static const int dialog_middle_holo_light = 0x010802a4;
        public: static const int dialog_top_holo_dark = 0x010802a5;
        public: static const int dialog_top_holo_light = 0x010802a6;
        public: static const int divider_horizontal_bright = 0x01080012;
        public: static const int divider_horizontal_bright_opaque = 0x010802a7;
        public: static const int divider_horizontal_dark = 0x01080014;
        public: static const int divider_horizontal_dark_opaque = 0x010802a8;
        public: static const int divider_horizontal_dim_dark = 0x01080015;
        public: static const int divider_horizontal_holo_dark = 0x010802a9;
        public: static const int divider_horizontal_holo_light = 0x010802aa;
        public: static const int divider_horizontal_textfield = 0x01080013;
        public: static const int divider_strong_holo = 0x010802ab;
        public: static const int divider_vertical_bright = 0x010802ac;
        public: static const int divider_vertical_bright_opaque = 0x010802ad;
        public: static const int divider_vertical_dark = 0x010802ae;
        public: static const int divider_vertical_dark_opaque = 0x010802af;
        public: static const int divider_vertical_holo_dark = 0x010802b0;
        public: static const int divider_vertical_holo_light = 0x010802b1;
        public: static const int dropdown_disabled_focused_holo_dark = 0x010802b2;
        public: static const int dropdown_disabled_focused_holo_light = 0x010802b3;
        public: static const int dropdown_disabled_holo_dark = 0x010802b4;
        public: static const int dropdown_disabled_holo_light = 0x010802b5;
        public: static const int dropdown_focused_holo_dark = 0x010802b6;
        public: static const int dropdown_focused_holo_light = 0x010802b7;
        public: static const int dropdown_ic_arrow_disabled_focused_holo_dark = 0x010802b8;
        public: static const int dropdown_ic_arrow_disabled_focused_holo_light = 0x010802b9;
        public: static const int dropdown_ic_arrow_disabled_holo_dark = 0x010802ba;
        public: static const int dropdown_ic_arrow_disabled_holo_light = 0x010802bb;
        public: static const int dropdown_ic_arrow_focused_holo_dark = 0x010802bc;
        public: static const int dropdown_ic_arrow_focused_holo_light = 0x010802bd;
        public: static const int dropdown_ic_arrow_normal_holo_dark = 0x010802be;
        public: static const int dropdown_ic_arrow_normal_holo_light = 0x010802bf;
        public: static const int dropdown_ic_arrow_pressed_holo_dark = 0x010802c0;
        public: static const int dropdown_ic_arrow_pressed_holo_light = 0x010802c1;
        public: static const int dropdown_normal_holo_dark = 0x010802c2;
        public: static const int dropdown_normal_holo_light = 0x010802c3;
        public: static const int dropdown_pressed_holo_dark = 0x010802c4;
        public: static const int dropdown_pressed_holo_light = 0x010802c5;
        public: static const int edit_query = 0x010802c6;
        public: static const int edit_query_background = 0x010802c7;
        public: static const int edit_query_background_normal = 0x010802c8;
        public: static const int edit_query_background_pressed = 0x010802c9;
        public: static const int edit_query_background_selected = 0x010802ca;
        public: static const int edit_text = 0x01080016;
        public: static const int edit_text_holo_dark = 0x010802cb;
        public: static const int edit_text_holo_light = 0x010802cc;
        public: static const int edit_text_material = 0x010802cd;
        public: static const int editbox_background = 0x01080018;
        public: static const int editbox_background_focus_yellow = 0x010802ce;
        public: static const int editbox_background_normal = 0x01080019;
        public: static const int editbox_dropdown_background = 0x010802cf;
        public: static const int editbox_dropdown_background_dark = 0x010802d0;
        public: static const int editbox_dropdown_dark_frame = 0x0108001a;
        public: static const int editbox_dropdown_light_frame = 0x0108001b;
        public: static const int emo_im_angel = 0x010802d1;
        public: static const int emo_im_cool = 0x010802d2;
        public: static const int emo_im_crying = 0x010802d3;
        public: static const int emo_im_embarrassed = 0x010802d4;
        public: static const int emo_im_foot_in_mouth = 0x010802d5;
        public: static const int emo_im_happy = 0x010802d6;
        public: static const int emo_im_kissing = 0x010802d7;
        public: static const int emo_im_laughing = 0x010802d8;
        public: static const int emo_im_lips_are_sealed = 0x010802d9;
        public: static const int emo_im_money_mouth = 0x010802da;
        public: static const int emo_im_sad = 0x010802db;
        public: static const int emo_im_surprised = 0x010802dc;
        public: static const int emo_im_tongue_sticking_out = 0x010802dd;
        public: static const int emo_im_undecided = 0x010802de;
        public: static const int emo_im_winking = 0x010802df;
        public: static const int emo_im_wtf = 0x010802e0;
        public: static const int emo_im_yelling = 0x010802e1;
        public: static const int emulator_circular_window_overlay = 0x010802e2;
        public: static const int expander_close_holo_dark = 0x010802e3;
        public: static const int expander_close_holo_light = 0x010802e4;
        public: static const int expander_close_mtrl_alpha = 0x010802e5;
        public: static const int expander_group = 0x010802e6;
        public: static const int expander_group_holo_dark = 0x010802e7;
        public: static const int expander_group_holo_light = 0x010802e8;
        public: static const int expander_group_material = 0x010802e9;
        public: static const int expander_ic_maximized = 0x010802ea;
        public: static const int expander_ic_minimized = 0x010802eb;
        public: static const int expander_open_holo_dark = 0x010802ec;
        public: static const int expander_open_holo_light = 0x010802ed;
        public: static const int expander_open_mtrl_alpha = 0x010802ee;
        public: static const int fastscroll_label_left_holo_dark = 0x010802ef;
        public: static const int fastscroll_label_left_holo_light = 0x010802f0;
        public: static const int fastscroll_label_left_material = 0x010802f1;
        public: static const int fastscroll_label_right_holo_dark = 0x010802f2;
        public: static const int fastscroll_label_right_holo_light = 0x010802f3;
        public: static const int fastscroll_label_right_material = 0x010802f4;
        public: static const int fastscroll_thumb_default_holo = 0x010802f5;
        public: static const int fastscroll_thumb_holo = 0x010802f6;
        public: static const int fastscroll_thumb_material = 0x010802f7;
        public: static const int fastscroll_thumb_mtrl_alpha = 0x010802f8;
        public: static const int fastscroll_thumb_pressed_holo = 0x010802f9;
        public: static const int fastscroll_track_default_holo_dark = 0x010802fa;
        public: static const int fastscroll_track_default_holo_light = 0x010802fb;
        public: static const int fastscroll_track_holo_dark = 0x010802fc;
        public: static const int fastscroll_track_holo_light = 0x010802fd;
        public: static const int fastscroll_track_material = 0x010802fe;
        public: static const int fastscroll_track_mtrl_alpha = 0x010802ff;
        public: static const int fastscroll_track_pressed_holo_dark = 0x01080300;
        public: static const int fastscroll_track_pressed_holo_light = 0x01080301;
        public: static const int focused_application_background_static = 0x01080302;
        public: static const int frame_gallery_thumb = 0x01080303;
        public: static const int frame_gallery_thumb_pressed = 0x01080304;
        public: static const int frame_gallery_thumb_selected = 0x01080305;
        public: static const int gallery_item_background = 0x01080306;
        public: static const int gallery_selected_default = 0x01080307;
        public: static const int gallery_selected_focused = 0x01080308;
        public: static const int gallery_selected_pressed = 0x01080309;
        public: static const int gallery_thumb = 0x0108001c;
        public: static const int gallery_unselected_default = 0x0108030a;
        public: static const int gallery_unselected_pressed = 0x0108030b;
        public: static const int grid_selector_background = 0x0108030c;
        public: static const int grid_selector_background_focus = 0x0108030d;
        public: static const int grid_selector_background_pressed = 0x0108030e;
        public: static const int highlight_disabled = 0x0108030f;
        public: static const int highlight_pressed = 0x01080310;
        public: static const int highlight_selected = 0x01080311;
        public: static const int ic_ab_back_holo_dark = 0x01080312;
        public: static const int ic_ab_back_holo_dark_am = 0x01080313;
        public: static const int ic_ab_back_holo_light = 0x01080314;
        public: static const int ic_ab_back_holo_light_am = 0x01080315;
        public: static const int ic_ab_back_material = 0x01080316;
        public: static const int ic_account_circle = 0x01080317;
        public: static const int ic_action_assist_focused = 0x01080318;
        public: static const int ic_aggregated = 0x01080319;
        public: static const int ic_audio_alarm = 0x0108031a;
        public: static const int ic_audio_alarm_mute = 0x0108031b;
        public: static const int ic_audio_bt = 0x0108031c;
        public: static const int ic_audio_bt_alpha = 0x0108031d;
        public: static const int ic_audio_bt_mute = 0x0108031e;
        public: static const int ic_audio_bt_mute_alpha = 0x0108031f;
        public: static const int ic_audio_notification = 0x01080320;
        public: static const int ic_audio_notification_am_alpha = 0x01080321;
        public: static const int ic_audio_notification_mute = 0x01080322;
        public: static const int ic_audio_notification_mute_am_alpha = 0x01080323;
        public: static const int ic_audio_phone = 0x01080324;
        public: static const int ic_audio_phone_am_alpha = 0x01080325;
        public: static const int ic_audio_ring_notif = 0x01080326;
        public: static const int ic_audio_ring_notif_mute = 0x01080327;
        public: static const int ic_audio_ring_notif_vibrate = 0x01080328;
        public: static const int ic_audio_vol = 0x01080329;
        public: static const int ic_audio_vol_mute = 0x0108032a;
        public: static const int ic_btn_round_more = 0x0108032b;
        public: static const int ic_btn_round_more_disabled = 0x0108032c;
        public: static const int ic_btn_round_more_normal = 0x0108032d;
        public: static const int ic_btn_search_go = 0x0108032e;
        public: static const int ic_btn_speak_now = 0x010800a4;
        public: static const int ic_btn_square_browser_zoom_fit_page = 0x0108032f;
        public: static const int ic_btn_square_browser_zoom_fit_page_disabled = 0x01080330;
        public: static const int ic_btn_square_browser_zoom_fit_page_normal = 0x01080331;
        public: static const int ic_btn_square_browser_zoom_page_overview = 0x01080332;
        public: static const int ic_btn_square_browser_zoom_page_overview_disabled = 0x01080333;
        public: static const int ic_btn_square_browser_zoom_page_overview_normal = 0x01080334;
        public: static const int ic_bullet_key_permission = 0x01080335;
        public: static const int ic_cab_done_holo = 0x01080336;
        public: static const int ic_cab_done_holo_dark = 0x01080337;
        public: static const int ic_cab_done_holo_light = 0x01080338;
        public: static const int ic_cab_done_mtrl_alpha = 0x01080339;
        public: static const int ic_checkmark_holo_light = 0x0108033a;
        public: static const int ic_clear = 0x0108033b;
        public: static const int ic_clear_disabled = 0x0108033c;
        public: static const int ic_clear_holo_dark = 0x0108033d;
        public: static const int ic_clear_holo_light = 0x0108033e;
        public: static const int ic_clear_material = 0x0108033f;
        public: static const int ic_clear_mtrl_alpha = 0x01080340;
        public: static const int ic_clear_normal = 0x01080341;
        public: static const int ic_clear_search_api_disabled_holo_dark = 0x01080342;
        public: static const int ic_clear_search_api_disabled_holo_light = 0x01080343;
        public: static const int ic_clear_search_api_holo_dark = 0x01080344;
        public: static const int ic_clear_search_api_holo_light = 0x01080345;
        public: static const int ic_coins_l = 0x01080346;
        public: static const int ic_coins_s = 0x01080347;
        public: static const int ic_commit = 0x01080348;
        public: static const int ic_commit_search_api_holo_dark = 0x01080349;
        public: static const int ic_commit_search_api_holo_light = 0x0108034a;
        public: static const int ic_commit_search_api_material = 0x0108034b;
        public: static const int ic_commit_search_api_mtrl_alpha = 0x0108034c;
        public: static const int ic_contact_picture = 0x0108034d;
        public: static const int ic_contact_picture_180_holo_dark = 0x0108034e;
        public: static const int ic_contact_picture_180_holo_light = 0x0108034f;
        public: static const int ic_contact_picture_2 = 0x01080350;
        public: static const int ic_contact_picture_3 = 0x01080351;
        public: static const int ic_contact_picture_holo_dark = 0x01080352;
        public: static const int ic_contact_picture_holo_light = 0x01080353;
        public: static const int ic_corp_badge = 0x01080354;
        public: static const int ic_corp_icon = 0x01080355;
        public: static const int ic_corp_icon_badge = 0x01080356;
        public: static const int ic_corp_statusbar_icon = 0x01080357;
        public: static const int ic_delete = 0x0108001d;
        public: static const int ic_dialog_alert = 0x01080027;
        public: static const int ic_dialog_alert_holo_dark = 0x01080358;
        public: static const int ic_dialog_alert_holo_light = 0x01080359;
        public: static const int ic_dialog_alert_material = 0x0108035a;
        public: static const int ic_dialog_close_normal_holo = 0x0108035b;
        public: static const int ic_dialog_close_pressed_holo = 0x0108035c;
        public: static const int ic_dialog_dialer = 0x01080028;
        public: static const int ic_dialog_email = 0x01080029;
        public: static const int ic_dialog_focused_holo = 0x0108035d;
        public: static const int ic_dialog_info = 0x0108009b;
        public: static const int ic_dialog_map = 0x0108002a;
        public: static const int ic_dialog_time = 0x0108035e;
        public: static const int ic_dialog_usb = 0x0108035f;
        public: static const int ic_emergency = 0x01080360;
        public: static const int ic_find_next_holo_dark = 0x01080361;
        public: static const int ic_find_next_holo_light = 0x01080362;
        public: static const int ic_find_next_material = 0x01080363;
        public: static const int ic_find_next_mtrl_alpha = 0x01080364;
        public: static const int ic_find_previous_holo_dark = 0x01080365;
        public: static const int ic_find_previous_holo_light = 0x01080366;
        public: static const int ic_find_previous_material = 0x01080367;
        public: static const int ic_find_previous_mtrl_alpha = 0x01080368;
        public: static const int ic_go = 0x01080369;
        public: static const int ic_go_search_api_holo_dark = 0x0108036a;
        public: static const int ic_go_search_api_holo_light = 0x0108036b;
        public: static const int ic_go_search_api_material = 0x0108036c;
        public: static const int ic_grayedout_printer = 0x0108036d;
        public: static const int ic_input_add = 0x0108002b;
        public: static const int ic_input_delete = 0x0108002c;
        public: static const int ic_input_get = 0x0108002d;
        public: static const int ic_jog_dial_answer = 0x0108036e;
        public: static const int ic_jog_dial_answer_and_end = 0x0108036f;
        public: static const int ic_jog_dial_answer_and_hold = 0x01080370;
        public: static const int ic_jog_dial_decline = 0x01080371;
        public: static const int ic_jog_dial_sound_off = 0x01080372;
        public: static const int ic_jog_dial_sound_on = 0x01080373;
        public: static const int ic_jog_dial_unlock = 0x01080374;
        public: static const int ic_jog_dial_vibrate_on = 0x01080375;
        public: static const int ic_launcher_android = 0x01080376;
        public: static const int ic_lock_airplane_mode = 0x01080377;
        public: static const int ic_lock_airplane_mode_alpha = 0x01080378;
        public: static const int ic_lock_airplane_mode_off = 0x01080379;
        public: static const int ic_lock_airplane_mode_off_am_alpha = 0x0108037a;
        public: static const int ic_lock_bugreport = 0x0108037b;
        public: static const int ic_lock_idle_alarm = 0x0108002e;
        public: static const int ic_lock_idle_alarm_alpha = 0x0108037c;
        public: static const int ic_lock_idle_charging = 0x0108001e;
        public: static const int ic_lock_idle_lock = 0x0108001f;
        public: static const int ic_lock_idle_low_battery = 0x01080020;
        public: static const int ic_lock_lock = 0x0108002f;
        public: static const int ic_lock_lock_alpha = 0x0108037d;
        public: static const int ic_lock_open_wht_24dp = 0x0108037e;
        public: static const int ic_lock_outline_wht_24dp = 0x0108037f;
        public: static const int ic_lock_power_off = 0x01080030;
        public: static const int ic_lock_power_off_alpha = 0x01080380;
        public: static const int ic_lock_ringer_off_alpha = 0x01080381;
        public: static const int ic_lock_ringer_on_alpha = 0x01080382;
        public: static const int ic_lock_silent_mode = 0x01080031;
        public: static const int ic_lock_silent_mode_off = 0x01080032;
        public: static const int ic_lock_silent_mode_vibrate = 0x01080383;
        public: static const int ic_lockscreen_alarm = 0x01080384;
        public: static const int ic_lockscreen_answer_active = 0x01080385;
        public: static const int ic_lockscreen_answer_focused = 0x01080386;
        public: static const int ic_lockscreen_answer_normal = 0x01080387;
        public: static const int ic_lockscreen_camera_activated = 0x01080388;
        public: static const int ic_lockscreen_camera_normal = 0x01080389;
        public: static const int ic_lockscreen_chevron_down = 0x0108038a;
        public: static const int ic_lockscreen_chevron_left = 0x0108038b;
        public: static const int ic_lockscreen_chevron_right = 0x0108038c;
        public: static const int ic_lockscreen_chevron_up = 0x0108038d;
        public: static const int ic_lockscreen_decline_activated = 0x0108038e;
        public: static const int ic_lockscreen_decline_focused = 0x0108038f;
        public: static const int ic_lockscreen_decline_normal = 0x01080390;
        public: static const int ic_lockscreen_emergencycall_normal = 0x01080391;
        public: static const int ic_lockscreen_emergencycall_pressed = 0x01080392;
        public: static const int ic_lockscreen_forgotpassword_normal = 0x01080393;
        public: static const int ic_lockscreen_forgotpassword_pressed = 0x01080394;
        public: static const int ic_lockscreen_google_activated = 0x01080395;
        public: static const int ic_lockscreen_google_focused = 0x01080396;
        public: static const int ic_lockscreen_google_normal = 0x01080397;
        public: static const int ic_lockscreen_handle_normal = 0x01080398;
        public: static const int ic_lockscreen_handle_pressed = 0x01080399;
        public: static const int ic_lockscreen_outerring = 0x0108039a;
        public: static const int ic_lockscreen_player_background = 0x0108039b;
        public: static const int ic_lockscreen_puk = 0x0108039c;
        public: static const int ic_lockscreen_silent_activated = 0x0108039d;
        public: static const int ic_lockscreen_silent_focused = 0x0108039e;
        public: static const int ic_lockscreen_silent_normal = 0x0108039f;
        public: static const int ic_lockscreen_sim = 0x010803a0;
        public: static const int ic_lockscreen_soundon_activated = 0x010803a1;
        public: static const int ic_lockscreen_soundon_focused = 0x010803a2;
        public: static const int ic_lockscreen_soundon_normal = 0x010803a3;
        public: static const int ic_lockscreen_text_activated = 0x010803a4;
        public: static const int ic_lockscreen_text_focusde = 0x010803a5;
        public: static const int ic_lockscreen_text_normal = 0x010803a6;
        public: static const int ic_lockscreen_unlock_activated = 0x010803a7;
        public: static const int ic_lockscreen_unlock_normal = 0x010803a8;
        public: static const int ic_lockscreens_now_button = 0x010803a9;
        public: static const int ic_maps_indicator_current_position = 0x010803aa;
        public: static const int ic_maps_indicator_current_position_anim = 0x010803ab;
        public: static const int ic_maps_indicator_current_position_anim1 = 0x010803ac;
        public: static const int ic_maps_indicator_current_position_anim2 = 0x010803ad;
        public: static const int ic_maps_indicator_current_position_anim3 = 0x010803ae;
        public: static const int ic_media_embed_play = 0x010803af;
        public: static const int ic_media_ff = 0x01080021;
        public: static const int ic_media_fullscreen = 0x010803b0;
        public: static const int ic_media_next = 0x01080022;
        public: static const int ic_media_pause = 0x01080023;
        public: static const int ic_media_play = 0x01080024;
        public: static const int ic_media_previous = 0x01080025;
        public: static const int ic_media_rew = 0x01080026;
        public: static const int ic_media_route_connecting_holo_dark = 0x010803b1;
        public: static const int ic_media_route_connecting_holo_light = 0x010803b2;
        public: static const int ic_media_route_connecting_material = 0x010803b3;
        public: static const int ic_media_route_disabled_holo_dark = 0x010803b4;
        public: static const int ic_media_route_disabled_holo_light = 0x010803b5;
        public: static const int ic_media_route_disabled_mtrl_alpha = 0x010803b6;
        public: static const int ic_media_route_holo_dark = 0x010803b7;
        public: static const int ic_media_route_holo_light = 0x010803b8;
        public: static const int ic_media_route_material = 0x010803b9;
        public: static const int ic_media_route_off_holo_dark = 0x010803ba;
        public: static const int ic_media_route_off_holo_light = 0x010803bb;
        public: static const int ic_media_route_off_mtrl_alpha = 0x010803bc;
        public: static const int ic_media_route_on_0_holo_dark = 0x010803bd;
        public: static const int ic_media_route_on_0_holo_light = 0x010803be;
        public: static const int ic_media_route_on_0_mtrl_alpha = 0x010803bf;
        public: static const int ic_media_route_on_1_holo_dark = 0x010803c0;
        public: static const int ic_media_route_on_1_holo_light = 0x010803c1;
        public: static const int ic_media_route_on_1_mtrl_alpha = 0x010803c2;
        public: static const int ic_media_route_on_2_holo_dark = 0x010803c3;
        public: static const int ic_media_route_on_2_holo_light = 0x010803c4;
        public: static const int ic_media_route_on_2_mtrl_alpha = 0x010803c5;
        public: static const int ic_media_route_on_holo_dark = 0x010803c6;
        public: static const int ic_media_route_on_holo_light = 0x010803c7;
        public: static const int ic_media_route_on_mtrl_alpha = 0x010803c8;
        public: static const int ic_media_stop = 0x010803c9;
        public: static const int ic_media_video_poster = 0x010803ca;
        public: static const int ic_menu_account_list = 0x010803cb;
        public: static const int ic_menu_add = 0x01080033;
        public: static const int ic_menu_agenda = 0x01080034;
        public: static const int ic_menu_allfriends = 0x010803cc;
        public: static const int ic_menu_always_landscape_portrait = 0x01080035;
        public: static const int ic_menu_archive = 0x010803cd;
        public: static const int ic_menu_attachment = 0x010803ce;
        public: static const int ic_menu_back = 0x010803cf;
        public: static const int ic_menu_block = 0x010803d0;
        public: static const int ic_menu_blocked_user = 0x010803d1;
        public: static const int ic_menu_btn_add = 0x010803d2;
        public: static const int ic_menu_call = 0x01080036;
        public: static const int ic_menu_camera = 0x01080037;
        public: static const int ic_menu_cc = 0x010803d3;
        public: static const int ic_menu_cc_am = 0x010803d4;
        public: static const int ic_menu_chat_dashboard = 0x010803d5;
        public: static const int ic_menu_clear_playlist = 0x010803d6;
        public: static const int ic_menu_close_clear_cancel = 0x01080038;
        public: static const int ic_menu_compass = 0x01080039;
        public: static const int ic_menu_compose = 0x010803d7;
        public: static const int ic_menu_copy = 0x010803d8;
        public: static const int ic_menu_copy_holo_dark = 0x010803d9;
        public: static const int ic_menu_copy_holo_light = 0x010803da;
        public: static const int ic_menu_copy_material = 0x010803db;
        public: static const int ic_menu_crop = 0x0108003a;
        public: static const int ic_menu_cut = 0x010803dc;
        public: static const int ic_menu_cut_holo_dark = 0x010803dd;
        public: static const int ic_menu_cut_holo_light = 0x010803de;
        public: static const int ic_menu_cut_material = 0x010803df;
        public: static const int ic_menu_day = 0x0108003b;
        public: static const int ic_menu_delete = 0x0108003c;
        public: static const int ic_menu_directions = 0x0108003d;
        public: static const int ic_menu_edit = 0x0108003e;
        public: static const int ic_menu_emoticons = 0x010803e0;
        public: static const int ic_menu_end_conversation = 0x010803e1;
        public: static const int ic_menu_find = 0x010803e2;
        public: static const int ic_menu_find_holo_dark = 0x010803e3;
        public: static const int ic_menu_find_holo_light = 0x010803e4;
        public: static const int ic_menu_find_material = 0x010803e5;
        public: static const int ic_menu_find_mtrl_alpha = 0x010803e6;
        public: static const int ic_menu_forward = 0x010803e7;
        public: static const int ic_menu_friendslist = 0x010803e8;
        public: static const int ic_menu_gallery = 0x0108003f;
        public: static const int ic_menu_goto = 0x010803e9;
        public: static const int ic_menu_help = 0x01080040;
        public: static const int ic_menu_help_holo_light = 0x010803ea;
        public: static const int ic_menu_home = 0x010803eb;
        public: static const int ic_menu_info_details = 0x01080041;
        public: static const int ic_menu_invite = 0x010803ec;
        public: static const int ic_menu_login = 0x010803ed;
        public: static const int ic_menu_manage = 0x01080042;
        public: static const int ic_menu_mapmode = 0x01080043;
        public: static const int ic_menu_mark = 0x010803ee;
        public: static const int ic_menu_month = 0x01080044;
        public: static const int ic_menu_more = 0x01080045;
        public: static const int ic_menu_moreoverflow = 0x010803ef;
        public: static const int ic_menu_moreoverflow_focused_holo_dark = 0x010803f0;
        public: static const int ic_menu_moreoverflow_focused_holo_light = 0x010803f1;
        public: static const int ic_menu_moreoverflow_holo_dark = 0x010803f2;
        public: static const int ic_menu_moreoverflow_holo_light = 0x010803f3;
        public: static const int ic_menu_moreoverflow_material = 0x010803f4;
        public: static const int ic_menu_moreoverflow_normal_holo_dark = 0x010803f5;
        public: static const int ic_menu_moreoverflow_normal_holo_light = 0x010803f6;
        public: static const int ic_menu_my_calendar = 0x01080046;
        public: static const int ic_menu_mylocation = 0x01080047;
        public: static const int ic_menu_myplaces = 0x01080048;
        public: static const int ic_menu_notifications = 0x010803f7;
        public: static const int ic_menu_paste = 0x010803f8;
        public: static const int ic_menu_paste_holo_dark = 0x010803f9;
        public: static const int ic_menu_paste_holo_light = 0x010803fa;
        public: static const int ic_menu_paste_material = 0x010803fb;
        public: static const int ic_menu_play_clip = 0x010803fc;
        public: static const int ic_menu_preferences = 0x01080049;
        public: static const int ic_menu_recent_history = 0x0108004a;
        public: static const int ic_menu_refresh = 0x010803fd;
        public: static const int ic_menu_report_image = 0x0108004b;
        public: static const int ic_menu_revert = 0x0108004c;
        public: static const int ic_menu_rotate = 0x0108004d;
        public: static const int ic_menu_save = 0x0108004e;
        public: static const int ic_menu_search = 0x0108004f;
        public: static const int ic_menu_search_holo_dark = 0x010803fe;
        public: static const int ic_menu_search_holo_light = 0x010803ff;
        public: static const int ic_menu_search_material = 0x01080400;
        public: static const int ic_menu_search_mtrl_alpha = 0x01080401;
        public: static const int ic_menu_selectall_holo_dark = 0x01080402;
        public: static const int ic_menu_selectall_holo_light = 0x01080403;
        public: static const int ic_menu_selectall_material = 0x01080404;
        public: static const int ic_menu_send = 0x01080050;
        public: static const int ic_menu_set_as = 0x01080051;
        public: static const int ic_menu_settings_holo_light = 0x01080405;
        public: static const int ic_menu_share = 0x01080052;
        public: static const int ic_menu_share_holo_dark = 0x01080406;
        public: static const int ic_menu_share_holo_light = 0x01080407;
        public: static const int ic_menu_share_material = 0x01080408;
        public: static const int ic_menu_slideshow = 0x01080053;
        public: static const int ic_menu_sort_alphabetically = 0x0108009c;
        public: static const int ic_menu_sort_by_size = 0x0108009d;
        public: static const int ic_menu_star = 0x01080409;
        public: static const int ic_menu_start_conversation = 0x0108040a;
        public: static const int ic_menu_stop = 0x0108040b;
        public: static const int ic_menu_today = 0x01080054;
        public: static const int ic_menu_upload = 0x01080055;
        public: static const int ic_menu_upload_you_tube = 0x01080056;
        public: static const int ic_menu_view = 0x01080057;
        public: static const int ic_menu_week = 0x01080058;
        public: static const int ic_menu_zoom = 0x01080059;
        public: static const int ic_notification_cast_0 = 0x0108040c;
        public: static const int ic_notification_cast_1 = 0x0108040d;
        public: static const int ic_notification_cast_2 = 0x0108040e;
        public: static const int ic_notification_clear_all = 0x0108005a;
        public: static const int ic_notification_ime_default = 0x0108040f;
        public: static const int ic_notification_media_route = 0x01080410;
        public: static const int ic_notification_overlay = 0x0108005b;
        public: static const int ic_partial_secure = 0x0108005c;
        public: static const int ic_perm_group_accounts = 0x01080411;
        public: static const int ic_perm_group_app_info = 0x01080412;
        public: static const int ic_perm_group_audio_settings = 0x01080413;
        public: static const int ic_perm_group_bluetooth = 0x01080414;
        public: static const int ic_perm_group_bookmarks = 0x01080415;
        public: static const int ic_perm_group_calendar = 0x01080416;
        public: static const int ic_perm_group_camera = 0x01080417;
        public: static const int ic_perm_group_device_alarms = 0x01080418;
        public: static const int ic_perm_group_display = 0x01080419;
        public: static const int ic_perm_group_effects_battery = 0x0108041a;
        public: static const int ic_perm_group_location = 0x0108041b;
        public: static const int ic_perm_group_messages = 0x0108041c;
        public: static const int ic_perm_group_microphone = 0x0108041d;
        public: static const int ic_perm_group_network = 0x0108041e;
        public: static const int ic_perm_group_personal_info = 0x0108041f;
        public: static const int ic_perm_group_phone_calls = 0x01080420;
        public: static const int ic_perm_group_screenlock = 0x01080421;
        public: static const int ic_perm_group_shortrange_network = 0x01080422;
        public: static const int ic_perm_group_social_info = 0x01080423;
        public: static const int ic_perm_group_status_bar = 0x01080424;
        public: static const int ic_perm_group_storage = 0x01080425;
        public: static const int ic_perm_group_sync_settings = 0x01080426;
        public: static const int ic_perm_group_system_clock = 0x01080427;
        public: static const int ic_perm_group_system_tools = 0x01080428;
        public: static const int ic_perm_group_user_dictionary = 0x01080429;
        public: static const int ic_perm_group_user_dictionary_write = 0x0108042a;
        public: static const int ic_perm_group_voicemail = 0x0108042b;
        public: static const int ic_perm_group_wallpapewr = 0x0108042c;
        public: static const int ic_popup_disk_full = 0x0108005d;
        public: static const int ic_popup_reminder = 0x0108005e;
        public: static const int ic_popup_sync = 0x0108005f;
        public: static const int ic_popup_sync_1 = 0x0108042d;
        public: static const int ic_popup_sync_2 = 0x0108042e;
        public: static const int ic_popup_sync_3 = 0x0108042f;
        public: static const int ic_popup_sync_4 = 0x01080430;
        public: static const int ic_popup_sync_5 = 0x01080431;
        public: static const int ic_popup_sync_6 = 0x01080432;
        public: static const int ic_print = 0x01080433;
        public: static const int ic_print_error = 0x01080434;
        public: static const int ic_search = 0x01080435;
        public: static const int ic_search_api_holo_dark = 0x01080436;
        public: static const int ic_search_api_holo_light = 0x01080437;
        public: static const int ic_search_api_material = 0x01080438;
        public: static const int ic_search_category_default = 0x01080060;
        public: static const int ic_secure = 0x01080061;
        public: static const int ic_settings = 0x01080439;
        public: static const int ic_settings_language = 0x0108043a;
        public: static const int ic_suggestions_add = 0x0108043b;
        public: static const int ic_suggestions_delete = 0x0108043c;
        public: static const int ic_sysbar_quicksettings = 0x0108043d;
        public: static const int ic_text_dot = 0x0108043e;
        public: static const int ic_vibrate = 0x0108043f;
        public: static const int ic_vibrate_small = 0x01080440;
        public: static const int ic_voice_search = 0x01080441;
        public: static const int ic_voice_search_api_holo_dark = 0x01080442;
        public: static const int ic_voice_search_api_holo_light = 0x01080443;
        public: static const int ic_voice_search_api_material = 0x01080444;
        public: static const int ic_volume = 0x01080445;
        public: static const int ic_volume_bluetooth_ad2p = 0x01080446;
        public: static const int ic_volume_bluetooth_in_call = 0x01080447;
        public: static const int ic_volume_off = 0x01080448;
        public: static const int ic_volume_off_small = 0x01080449;
        public: static const int ic_volume_small = 0x0108044a;
        public: static const int icon_highlight_rectangle = 0x0108044b;
        public: static const int icon_highlight_square = 0x0108044c;
        public: static const int ime_qwerty = 0x0108044d;
        public: static const int indicator_check_mark_dark = 0x0108044e;
        public: static const int indicator_check_mark_light = 0x0108044f;
        public: static const int indicator_input_error = 0x01080450;
        public: static const int input_method_fullscreen_background = 0x0108075d;
        public: static const int input_method_fullscreen_background_holo = 0x01080763;
        public: static const int item_background = 0x01080451;
        public: static const int item_background_activated_holo_dark = 0x01080452;
        public: static const int item_background_borderless_material = 0x01080453;
        public: static const int item_background_holo_dark = 0x01080454;
        public: static const int item_background_holo_light = 0x01080455;
        public: static const int item_background_material = 0x01080456;
        public: static const int jog_dial_arrow_long_left_green = 0x01080457;
        public: static const int jog_dial_arrow_long_left_yellow = 0x01080458;
        public: static const int jog_dial_arrow_long_middle_yellow = 0x01080459;
        public: static const int jog_dial_arrow_long_right_red = 0x0108045a;
        public: static const int jog_dial_arrow_long_right_yellow = 0x0108045b;
        public: static const int jog_dial_arrow_short_left = 0x0108045c;
        public: static const int jog_dial_arrow_short_left_and_right = 0x0108045d;
        public: static const int jog_dial_arrow_short_right = 0x0108045e;
        public: static const int jog_dial_bg = 0x0108045f;
        public: static const int jog_dial_dimple = 0x01080460;
        public: static const int jog_dial_dimple_dim = 0x01080461;
        public: static const int jog_tab_bar_left_answer = 0x01080462;
        public: static const int jog_tab_bar_left_end_confirm_gray = 0x01080463;
        public: static const int jog_tab_bar_left_end_confirm_green = 0x01080464;
        public: static const int jog_tab_bar_left_end_confirm_red = 0x01080465;
        public: static const int jog_tab_bar_left_end_confirm_yellow = 0x01080466;
        public: static const int jog_tab_bar_left_end_normal = 0x01080467;
        public: static const int jog_tab_bar_left_end_pressed = 0x01080468;
        public: static const int jog_tab_bar_left_generic = 0x01080469;
        public: static const int jog_tab_bar_left_unlock = 0x0108046a;
        public: static const int jog_tab_bar_right_decline = 0x0108046b;
        public: static const int jog_tab_bar_right_end_confirm_gray = 0x0108046c;
        public: static const int jog_tab_bar_right_end_confirm_green = 0x0108046d;
        public: static const int jog_tab_bar_right_end_confirm_red = 0x0108046e;
        public: static const int jog_tab_bar_right_end_confirm_yellow = 0x0108046f;
        public: static const int jog_tab_bar_right_end_normal = 0x01080470;
        public: static const int jog_tab_bar_right_end_pressed = 0x01080471;
        public: static const int jog_tab_bar_right_generic = 0x01080472;
        public: static const int jog_tab_bar_right_sound_off = 0x01080473;
        public: static const int jog_tab_bar_right_sound_on = 0x01080474;
        public: static const int jog_tab_left_answer = 0x01080475;
        public: static const int jog_tab_left_confirm_gray = 0x01080476;
        public: static const int jog_tab_left_confirm_green = 0x01080477;
        public: static const int jog_tab_left_confirm_red = 0x01080478;
        public: static const int jog_tab_left_confirm_yellow = 0x01080479;
        public: static const int jog_tab_left_generic = 0x0108047a;
        public: static const int jog_tab_left_normal = 0x0108047b;
        public: static const int jog_tab_left_pressed = 0x0108047c;
        public: static const int jog_tab_left_unlock = 0x0108047d;
        public: static const int jog_tab_right_confirm_gray = 0x0108047e;
        public: static const int jog_tab_right_confirm_green = 0x0108047f;
        public: static const int jog_tab_right_confirm_red = 0x01080480;
        public: static const int jog_tab_right_confirm_yellow = 0x01080481;
        public: static const int jog_tab_right_decline = 0x01080482;
        public: static const int jog_tab_right_generic = 0x01080483;
        public: static const int jog_tab_right_normal = 0x01080484;
        public: static const int jog_tab_right_pressed = 0x01080485;
        public: static const int jog_tab_right_sound_off = 0x01080486;
        public: static const int jog_tab_right_sound_on = 0x01080487;
        public: static const int jog_tab_target_gray = 0x01080488;
        public: static const int jog_tab_target_green = 0x01080489;
        public: static const int jog_tab_target_red = 0x0108048a;
        public: static const int jog_tab_target_yellow = 0x0108048b;
        public: static const int keyboard_accessory_bg_landscape = 0x0108048c;
        public: static const int keyboard_background = 0x0108048d;
        public: static const int keyboard_key_feedback = 0x0108048e;
        public: static const int keyboard_key_feedback_background = 0x0108048f;
        public: static const int keyboard_key_feedback_more_background = 0x01080490;
        public: static const int keyboard_popup_panel_background = 0x01080491;
        public: static const int keyboard_popup_panel_trans_background = 0x01080492;
        public: static const int light_header = 0x01080493;
        public: static const int light_header_dither = 0x01080494;
        public: static const int list_activated_holo = 0x01080495;
        public: static const int list_divider_holo_dark = 0x01080496;
        public: static const int list_divider_holo_light = 0x01080497;
        public: static const int list_divider_horizontal_holo_dark = 0x01080498;
        public: static const int list_divider_material = 0x01080499;
        public: static const int list_divider_mtrl_alpha = 0x0108049a;
        public: static const int list_focused_holo = 0x0108049b;
        public: static const int list_highlight = 0x0108049c;
        public: static const int list_highlight_active = 0x0108049d;
        public: static const int list_highlight_inactive = 0x0108049e;
        public: static const int list_longpressed_holo = 0x0108049f;
        public: static const int list_longpressed_holo_dark = 0x010804a0;
        public: static const int list_longpressed_holo_light = 0x010804a1;
        public: static const int list_pressed_holo_dark = 0x010804a2;
        public: static const int list_pressed_holo_light = 0x010804a3;
        public: static const int list_section_divider_holo_dark = 0x010804a4;
        public: static const int list_section_divider_holo_light = 0x010804a5;
        public: static const int list_section_divider_material = 0x010804a6;
        public: static const int list_section_divider_mtrl_alpha = 0x010804a7;
        public: static const int list_section_header_holo_dark = 0x010804a8;
        public: static const int list_section_header_holo_light = 0x010804a9;
        public: static const int list_selected_background = 0x010804aa;
        public: static const int list_selected_background_light = 0x010804ab;
        public: static const int list_selected_holo_dark = 0x010804ac;
        public: static const int list_selected_holo_light = 0x010804ad;
        public: static const int list_selector_activated_holo_dark = 0x010804ae;
        public: static const int list_selector_activated_holo_light = 0x010804af;
        public: static const int list_selector_background = 0x01080062;
        public: static const int list_selector_background_default = 0x010804b0;
        public: static const int list_selector_background_default_light = 0x010804b1;
        public: static const int list_selector_background_disabled = 0x010804b2;
        public: static const int list_selector_background_disabled_light = 0x010804b3;
        public: static const int list_selector_background_focus = 0x010804b4;
        public: static const int list_selector_background_focused = 0x010804b5;
        public: static const int list_selector_background_focused_light = 0x010804b6;
        public: static const int list_selector_background_focused_selected = 0x010804b7;
        public: static const int list_selector_background_light = 0x010804b8;
        public: static const int list_selector_background_longpress = 0x010804b9;
        public: static const int list_selector_background_longpress_light = 0x010804ba;
        public: static const int list_selector_background_pressed = 0x010804bb;
        public: static const int list_selector_background_pressed_light = 0x010804bc;
        public: static const int list_selector_background_selected = 0x010804bd;
        public: static const int list_selector_background_selected_light = 0x010804be;
        public: static const int list_selector_background_transition = 0x010804bf;
        public: static const int list_selector_background_transition_holo_dark = 0x010804c0;
        public: static const int list_selector_background_transition_holo_light = 0x010804c1;
        public: static const int list_selector_background_transition_light = 0x010804c2;
        public: static const int list_selector_disabled_holo_dark = 0x010804c3;
        public: static const int list_selector_disabled_holo_light = 0x010804c4;
        public: static const int list_selector_focused_holo_dark = 0x010804c5;
        public: static const int list_selector_focused_holo_light = 0x010804c6;
        public: static const int list_selector_holo_dark = 0x010804c7;
        public: static const int list_selector_holo_light = 0x010804c8;
        public: static const int list_selector_multiselect_holo_dark = 0x010804c9;
        public: static const int list_selector_multiselect_holo_light = 0x010804ca;
        public: static const int list_selector_pressed_holo_dark = 0x010804cb;
        public: static const int list_selector_pressed_holo_light = 0x010804cc;
        public: static const int load_average_background = 0x010804cd;
        public: static const int loading_tile = 0x010804ce;
        public: static const int loading_tile_android = 0x010804cf;
        public: static const int lockscreen_protection_pattern = 0x010804d0;
        public: static const int magnified_region_frame = 0x010804d1;
        public: static const int maps_google_logo = 0x010804d2;
        public: static const int media_button_background = 0x010804d3;
        public: static const int menu_background = 0x010804d4;
        public: static const int menu_background_fill_parent_width = 0x010804d5;
        public: static const int menu_dropdown_panel_holo_dark = 0x010804d6;
        public: static const int menu_dropdown_panel_holo_light = 0x010804d7;
        public: static const int menu_frame = 0x01080063;
        public: static const int menu_full_frame = 0x01080064;
        public: static const int menu_hardkey_panel_holo_dark = 0x010804d8;
        public: static const int menu_hardkey_panel_holo_light = 0x010804d9;
        public: static const int menu_panel_holo_dark = 0x010804da;
        public: static const int menu_panel_holo_light = 0x010804db;
        public: static const int menu_popup_panel_holo_dark = 0x010804dc;
        public: static const int menu_popup_panel_holo_light = 0x010804dd;
        public: static const int menu_selector = 0x010804de;
        public: static const int menu_separator = 0x010804df;
        public: static const int menu_submenu_background = 0x010804e0;
        public: static const int menuitem_background = 0x01080065;
        public: static const int menuitem_background_focus = 0x010804e1;
        public: static const int menuitem_background_pressed = 0x010804e2;
        public: static const int menuitem_background_solid = 0x010804e3;
        public: static const int menuitem_background_solid_focused = 0x010804e4;
        public: static const int menuitem_background_solid_pressed = 0x010804e5;
        public: static const int menuitem_checkbox = 0x010804e6;
        public: static const int menuitem_checkbox_on = 0x010804e7;
        public: static const int minitab_lt = 0x010804e8;
        public: static const int minitab_lt_focus = 0x010804e9;
        public: static const int minitab_lt_press = 0x010804ea;
        public: static const int minitab_lt_selected = 0x010804eb;
        public: static const int minitab_lt_unselected = 0x010804ec;
        public: static const int minitab_lt_unselected_press = 0x010804ed;
        public: static const int no_tile_128 = 0x010804ee;
        public: static const int no_tile_256 = 0x010804ef;
        public: static const int notification_icon_legacy_bg = 0x010804f0;
        public: static const int notification_material_action_background = 0x010804f1;
        public: static const int notification_material_media_action_background = 0x010804f2;
        public: static const int notification_template_divider = 0x01080761;
        public: static const int notification_template_divider_media = 0x01080762;
        public: static const int notification_template_icon_bg = 0x0108075f;
        public: static const int notification_template_icon_low_bg = 0x01080760;
        public: static const int numberpicker_down_btn = 0x010804f3;
        public: static const int numberpicker_down_disabled = 0x010804f4;
        public: static const int numberpicker_down_disabled_focused = 0x010804f5;
        public: static const int numberpicker_down_disabled_focused_holo_dark = 0x010804f6;
        public: static const int numberpicker_down_disabled_focused_holo_light = 0x010804f7;
        public: static const int numberpicker_down_disabled_holo_dark = 0x010804f8;
        public: static const int numberpicker_down_disabled_holo_light = 0x010804f9;
        public: static const int numberpicker_down_focused_holo_dark = 0x010804fa;
        public: static const int numberpicker_down_focused_holo_light = 0x010804fb;
        public: static const int numberpicker_down_longpressed_holo_dark = 0x010804fc;
        public: static const int numberpicker_down_longpressed_holo_light = 0x010804fd;
        public: static const int numberpicker_down_normal = 0x010804fe;
        public: static const int numberpicker_down_normal_holo_dark = 0x010804ff;
        public: static const int numberpicker_down_normal_holo_light = 0x01080500;
        public: static const int numberpicker_down_pressed = 0x01080501;
        public: static const int numberpicker_down_pressed_holo_dark = 0x01080502;
        public: static const int numberpicker_down_pressed_holo_light = 0x01080503;
        public: static const int numberpicker_down_selected = 0x01080504;
        public: static const int numberpicker_input = 0x01080505;
        public: static const int numberpicker_input_disabled = 0x01080506;
        public: static const int numberpicker_input_normal = 0x01080507;
        public: static const int numberpicker_input_pressed = 0x01080508;
        public: static const int numberpicker_input_selected = 0x01080509;
        public: static const int numberpicker_selection_divider = 0x0108050a;
        public: static const int numberpicker_up_btn = 0x0108050b;
        public: static const int numberpicker_up_disabled = 0x0108050c;
        public: static const int numberpicker_up_disabled_focused = 0x0108050d;
        public: static const int numberpicker_up_disabled_focused_holo_dark = 0x0108050e;
        public: static const int numberpicker_up_disabled_focused_holo_light = 0x0108050f;
        public: static const int numberpicker_up_disabled_holo_dark = 0x01080510;
        public: static const int numberpicker_up_disabled_holo_light = 0x01080511;
        public: static const int numberpicker_up_focused_holo_dark = 0x01080512;
        public: static const int numberpicker_up_focused_holo_light = 0x01080513;
        public: static const int numberpicker_up_longpressed_holo_dark = 0x01080514;
        public: static const int numberpicker_up_longpressed_holo_light = 0x01080515;
        public: static const int numberpicker_up_normal = 0x01080516;
        public: static const int numberpicker_up_normal_holo_dark = 0x01080517;
        public: static const int numberpicker_up_normal_holo_light = 0x01080518;
        public: static const int numberpicker_up_pressed = 0x01080519;
        public: static const int numberpicker_up_pressed_holo_dark = 0x0108051a;
        public: static const int numberpicker_up_pressed_holo_light = 0x0108051b;
        public: static const int numberpicker_up_selected = 0x0108051c;
        public: static const int panel_background = 0x0108051d;
        public: static const int panel_bg_holo_dark = 0x0108051e;
        public: static const int panel_bg_holo_light = 0x0108051f;
        public: static const int panel_picture_frame_background = 0x01080520;
        public: static const int panel_picture_frame_bg_focus_blue = 0x01080521;
        public: static const int panel_picture_frame_bg_normal = 0x01080522;
        public: static const int panel_picture_frame_bg_pressed_blue = 0x01080523;
        public: static const int password_field_default = 0x01080524;
        public: static const int password_keyboard_background_holo = 0x01080525;
        public: static const int perm_group_accessibility_features = 0x01080526;
        public: static const int perm_group_accounts = 0x01080527;
        public: static const int perm_group_affects_battery = 0x01080528;
        public: static const int perm_group_app_info = 0x01080529;
        public: static const int perm_group_audio_settings = 0x0108052a;
        public: static const int perm_group_bluetooth = 0x0108052b;
        public: static const int perm_group_bookmarks = 0x0108052c;
        public: static const int perm_group_calendar = 0x0108052d;
        public: static const int perm_group_camera = 0x0108052e;
        public: static const int perm_group_device_alarms = 0x0108052f;
        public: static const int perm_group_display = 0x01080530;
        public: static const int perm_group_location = 0x01080531;
        public: static const int perm_group_messages = 0x01080532;
        public: static const int perm_group_microphone = 0x01080533;
        public: static const int perm_group_network = 0x01080534;
        public: static const int perm_group_personal_info = 0x01080535;
        public: static const int perm_group_phone_calls = 0x01080536;
        public: static const int perm_group_screenlock = 0x01080537;
        public: static const int perm_group_shortrange_network = 0x01080538;
        public: static const int perm_group_social_info = 0x01080539;
        public: static const int perm_group_status_bar = 0x0108053a;
        public: static const int perm_group_storage = 0x0108053b;
        public: static const int perm_group_sync_settings = 0x0108053c;
        public: static const int perm_group_system_clock = 0x0108053d;
        public: static const int perm_group_system_tools = 0x0108053e;
        public: static const int perm_group_user_dictionary = 0x0108053f;
        public: static const int perm_group_user_dictionary_write = 0x01080540;
        public: static const int perm_group_voicemail = 0x01080541;
        public: static const int perm_group_wallpaper = 0x01080542;
        public: static const int picture_emergency = 0x01080543;
        public: static const int picture_frame = 0x01080066;
        public: static const int platlogo = 0x01080544;
        public: static const int pointer_arrow = 0x01080545;
        public: static const int pointer_arrow_icon = 0x01080546;
        public: static const int pointer_spot_anchor = 0x01080547;
        public: static const int pointer_spot_anchor_icon = 0x01080548;
        public: static const int pointer_spot_hover = 0x01080549;
        public: static const int pointer_spot_hover_icon = 0x0108054a;
        public: static const int pointer_spot_touch = 0x0108054b;
        public: static const int pointer_spot_touch_icon = 0x0108054c;
        public: static const int popup_background_material = 0x0108054d;
        public: static const int popup_background_mtrl_mult = 0x0108054e;
        public: static const int popup_bottom_bright = 0x0108054f;
        public: static const int popup_bottom_dark = 0x01080550;
        public: static const int popup_bottom_medium = 0x01080551;
        public: static const int popup_center_bright = 0x01080552;
        public: static const int popup_center_dark = 0x01080553;
        public: static const int popup_center_medium = 0x01080554;
        public: static const int popup_full_bright = 0x01080555;
        public: static const int popup_full_dark = 0x01080556;
        public: static const int popup_inline_error = 0x01080557;
        public: static const int popup_inline_error_above = 0x01080558;
        public: static const int popup_inline_error_above_am = 0x01080559;
        public: static const int popup_inline_error_above_holo_dark = 0x0108055a;
        public: static const int popup_inline_error_above_holo_dark_am = 0x0108055b;
        public: static const int popup_inline_error_above_holo_light = 0x0108055c;
        public: static const int popup_inline_error_above_holo_light_am = 0x0108055d;
        public: static const int popup_inline_error_am = 0x0108055e;
        public: static const int popup_inline_error_holo_dark = 0x0108055f;
        public: static const int popup_inline_error_holo_dark_am = 0x01080560;
        public: static const int popup_inline_error_holo_light = 0x01080561;
        public: static const int popup_inline_error_holo_light_am = 0x01080562;
        public: static const int popup_top_bright = 0x01080563;
        public: static const int popup_top_dark = 0x01080564;
        public: static const int presence_audio_away = 0x010800af;
        public: static const int presence_audio_busy = 0x010800b0;
        public: static const int presence_audio_online = 0x010800b1;
        public: static const int presence_away = 0x01080067;
        public: static const int presence_busy = 0x01080068;
        public: static const int presence_invisible = 0x01080069;
        public: static const int presence_offline = 0x0108006a;
        public: static const int presence_online = 0x0108006b;
        /**  presence drawables for videochat or audiochat capable contacts 
         */
        public: static const int presence_video_away = 0x010800ac;
        public: static const int presence_video_busy = 0x010800ad;
        public: static const int presence_video_online = 0x010800ae;
        public: static const int pressed_application_background_static = 0x01080565;
        public: static const int progress_bg_holo_dark = 0x01080566;
        public: static const int progress_bg_holo_light = 0x01080567;
        public: static const int progress_horizontal = 0x0108006c;
        public: static const int progress_horizontal_holo_dark = 0x01080568;
        public: static const int progress_horizontal_holo_light = 0x01080569;
        public: static const int progress_horizontal_material = 0x0108056a;
        public: static const int progress_indeterminate_horizontal = 0x0108006d;
        public: static const int progress_indeterminate_horizontal_holo = 0x0108056b;
        public: static const int progress_indeterminate_horizontal_material = 0x0108056c;
        public: static const int progress_large = 0x0108056d;
        public: static const int progress_large_holo = 0x0108056e;
        public: static const int progress_large_material = 0x0108056f;
        public: static const int progress_large_white = 0x01080570;
        public: static const int progress_medium = 0x01080571;
        public: static const int progress_medium_holo = 0x01080572;
        public: static const int progress_medium_material = 0x01080573;
        public: static const int progress_medium_white = 0x01080574;
        public: static const int progress_mtrl_alpha = 0x01080575;
        public: static const int progress_primary_holo_dark = 0x01080576;
        public: static const int progress_primary_holo_light = 0x01080577;
        public: static const int progress_secondary_holo_dark = 0x01080578;
        public: static const int progress_secondary_holo_light = 0x01080579;
        public: static const int progress_small = 0x0108057a;
        public: static const int progress_small_holo = 0x0108057b;
        public: static const int progress_small_material = 0x0108057c;
        public: static const int progress_small_titlebar = 0x0108057d;
        public: static const int progress_small_white = 0x0108057e;
        public: static const int progressbar_indeterminate1 = 0x0108057f;
        public: static const int progressbar_indeterminate2 = 0x01080580;
        public: static const int progressbar_indeterminate3 = 0x01080581;
        public: static const int progressbar_indeterminate_holo1 = 0x01080582;
        public: static const int progressbar_indeterminate_holo2 = 0x01080583;
        public: static const int progressbar_indeterminate_holo3 = 0x01080584;
        public: static const int progressbar_indeterminate_holo4 = 0x01080585;
        public: static const int progressbar_indeterminate_holo5 = 0x01080586;
        public: static const int progressbar_indeterminate_holo6 = 0x01080587;
        public: static const int progressbar_indeterminate_holo7 = 0x01080588;
        public: static const int progressbar_indeterminate_holo8 = 0x01080589;
        public: static const int quickactions_arrowdown_left_holo_dark = 0x0108058a;
        public: static const int quickactions_arrowdown_left_holo_light = 0x0108058b;
        public: static const int quickactions_arrowdown_right_holo_dark = 0x0108058c;
        public: static const int quickactions_arrowdown_right_holo_light = 0x0108058d;
        public: static const int quickactions_arrowup_left_holo_dark = 0x0108058e;
        public: static const int quickactions_arrowup_left_holo_light = 0x0108058f;
        public: static const int quickactions_arrowup_left_right_holo_dark = 0x01080590;
        public: static const int quickactions_arrowup_right_holo_light = 0x01080591;
        public: static const int quickcontact_badge_overlay_dark = 0x01080592;
        public: static const int quickcontact_badge_overlay_focused_dark = 0x01080593;
        public: static const int quickcontact_badge_overlay_focused_dark_am = 0x01080594;
        public: static const int quickcontact_badge_overlay_focused_light = 0x01080595;
        public: static const int quickcontact_badge_overlay_focused_light_am = 0x01080596;
        public: static const int quickcontact_badge_overlay_light = 0x01080597;
        public: static const int quickcontact_badge_overlay_normal_dark = 0x01080598;
        public: static const int quickcontact_badge_overlay_normal_dark_am = 0x01080599;
        public: static const int quickcontact_badge_overlay_normal_light = 0x0108059a;
        public: static const int quickcontact_badge_overlay_normal_light_am = 0x0108059b;
        public: static const int quickcontact_badge_overlay_pressed_dark = 0x0108059c;
        public: static const int quickcontact_badge_overlay_pressed_dark_am = 0x0108059d;
        public: static const int quickcontact_badge_overlay_pressed_light = 0x0108059e;
        public: static const int quickcontact_badge_overlay_pressed_light_am = 0x0108059f;
        public: static const int radiobutton_off_background = 0x0108006e;
        public: static const int radiobutton_on_background = 0x0108006f;
        public: static const int rate_star_big_half = 0x010805a0;
        public: static const int rate_star_big_half_holo_dark = 0x010805a1;
        public: static const int rate_star_big_half_holo_light = 0x010805a2;
        public: static const int rate_star_big_off = 0x010805a3;
        public: static const int rate_star_big_off_holo_dark = 0x010805a4;
        public: static const int rate_star_big_off_holo_light = 0x010805a5;
        public: static const int rate_star_big_on = 0x010805a6;
        public: static const int rate_star_big_on_holo_dark = 0x010805a7;
        public: static const int rate_star_big_on_holo_light = 0x010805a8;
        public: static const int rate_star_med_half = 0x010805a9;
        public: static const int rate_star_med_half_holo_dark = 0x010805aa;
        public: static const int rate_star_med_half_holo_light = 0x010805ab;
        public: static const int rate_star_med_off = 0x010805ac;
        public: static const int rate_star_med_off_holo_dark = 0x010805ad;
        public: static const int rate_star_med_off_holo_light = 0x010805ae;
        public: static const int rate_star_med_on = 0x010805af;
        public: static const int rate_star_med_on_holo_dark = 0x010805b0;
        public: static const int rate_star_med_on_holo_light = 0x010805b1;
        public: static const int rate_star_small_half = 0x010805b2;
        public: static const int rate_star_small_half_holo_dark = 0x010805b3;
        public: static const int rate_star_small_half_holo_light = 0x010805b4;
        public: static const int rate_star_small_off = 0x010805b5;
        public: static const int rate_star_small_off_holo_dark = 0x010805b6;
        public: static const int rate_star_small_off_holo_light = 0x010805b7;
        public: static const int rate_star_small_on = 0x010805b8;
        public: static const int rate_star_small_on_holo_dark = 0x010805b9;
        public: static const int rate_star_small_on_holo_light = 0x010805ba;
        public: static const int ratingbar = 0x010805bb;
        public: static const int ratingbar_full = 0x010805bc;
        public: static const int ratingbar_full_empty = 0x010805bd;
        public: static const int ratingbar_full_empty_holo_dark = 0x010805be;
        public: static const int ratingbar_full_empty_holo_light = 0x010805bf;
        public: static const int ratingbar_full_empty_material = 0x010805c0;
        public: static const int ratingbar_full_filled = 0x010805c1;
        public: static const int ratingbar_full_filled_holo_dark = 0x010805c2;
        public: static const int ratingbar_full_filled_holo_light = 0x010805c3;
        public: static const int ratingbar_full_filled_material = 0x010805c4;
        public: static const int ratingbar_full_holo_dark = 0x010805c5;
        public: static const int ratingbar_full_holo_light = 0x010805c6;
        public: static const int ratingbar_full_material = 0x010805c7;
        public: static const int ratingbar_holo_dark = 0x010805c8;
        public: static const int ratingbar_holo_light = 0x010805c9;
        public: static const int ratingbar_small = 0x010805ca;
        public: static const int ratingbar_small_holo_dark = 0x010805cb;
        public: static const int ratingbar_small_holo_light = 0x010805cc;
        public: static const int recent_dialog_background = 0x010805cd;
        public: static const int reticle = 0x010805ce;
        public: static const int safe_mode_background = 0x0108075c;
        public: static const int screen_background_dark = 0x01080098;
        /**  Semi-transparent background that can be used when placing a dark
       themed UI on top of some arbitrary background (such as the
       wallpaper).  This darkens the background sufficiently that the UI
       can be seen. 
 Background drawable that can be used for a transparent activity to
         be able to display a dark UI: this darkens its background to make
         a dark (default theme) UI more visible. 
         */
        public: static const int screen_background_dark_transparent = 0x010800a9;
        public: static const int screen_background_holo_dark = 0x01080765;
        public: static const int screen_background_holo_light = 0x01080764;
        public: static const int screen_background_light = 0x01080099;
        /**  Background drawable that can be used for a transparent activity to
         be able to display a light UI: this lightens its background to make
         a light UI more visible. 
         */
        public: static const int screen_background_light_transparent = 0x010800aa;
        public: static const int screen_background_selector_dark = 0x010805cf;
        public: static const int screen_background_selector_light = 0x010805d0;
        public: static const int scrollbar_handle_accelerated_anim2 = 0x010805d1;
        public: static const int scrollbar_handle_holo_dark = 0x010805d2;
        public: static const int scrollbar_handle_holo_light = 0x010805d3;
        public: static const int scrollbar_handle_horizontal = 0x010805d4;
        public: static const int scrollbar_handle_material = 0x010805d5;
        public: static const int scrollbar_handle_mtrl_alpha = 0x010805d6;
        public: static const int scrollbar_handle_vertical = 0x010805d7;
        public: static const int scrubber_control_disabled_holo = 0x010805d8;
        public: static const int scrubber_control_focused_holo = 0x010805d9;
        public: static const int scrubber_control_from_pressed_mtrl_000 = 0x010805da;
        public: static const int scrubber_control_from_pressed_mtrl_001 = 0x010805db;
        public: static const int scrubber_control_from_pressed_mtrl_002 = 0x010805dc;
        public: static const int scrubber_control_from_pressed_mtrl_003 = 0x010805dd;
        public: static const int scrubber_control_from_pressed_mtrl_004 = 0x010805de;
        public: static const int scrubber_control_from_pressed_mtrl_005 = 0x010805df;
        public: static const int scrubber_control_material_anim = 0x010805e0;
        public: static const int scrubber_control_normal_holo = 0x010805e1;
        public: static const int scrubber_control_off_mtrl_alpha = 0x010805e2;
        public: static const int scrubber_control_off_pressed_mtrl_alpha = 0x010805e3;
        public: static const int scrubber_control_on_mtrl_alpha = 0x010805e4;
        public: static const int scrubber_control_on_pressed_mtrl_alpha = 0x010805e5;
        public: static const int scrubber_control_pressed_holo = 0x010805e6;
        public: static const int scrubber_control_selector_holo = 0x010805e7;
        public: static const int scrubber_control_selector_material = 0x010805e8;
        public: static const int scrubber_control_to_pressed_mtrl_000 = 0x010805e9;
        public: static const int scrubber_control_to_pressed_mtrl_001 = 0x010805ea;
        public: static const int scrubber_control_to_pressed_mtrl_002 = 0x010805eb;
        public: static const int scrubber_control_to_pressed_mtrl_003 = 0x010805ec;
        public: static const int scrubber_control_to_pressed_mtrl_004 = 0x010805ed;
        public: static const int scrubber_control_to_pressed_mtrl_005 = 0x010805ee;
        public: static const int scrubber_primary_holo = 0x010805ef;
        public: static const int scrubber_primary_mtrl_alpha = 0x010805f0;
        public: static const int scrubber_progress_horizontal_holo_dark = 0x010805f1;
        public: static const int scrubber_progress_horizontal_holo_light = 0x010805f2;
        public: static const int scrubber_progress_horizontal_material = 0x010805f3;
        public: static const int scrubber_secondary_holo = 0x010805f4;
        public: static const int scrubber_track_holo_dark = 0x010805f5;
        public: static const int scrubber_track_holo_light = 0x010805f6;
        public: static const int scrubber_track_mtrl_alpha = 0x010805f7;
        public: static const int search_bar_default_color = 0x0108075b;
        public: static const int search_dropdown_background = 0x010805f8;
        public: static const int search_dropdown_dark = 0x010805f9;
        public: static const int search_dropdown_light = 0x010805fa;
        public: static const int search_plate = 0x010805fb;
        public: static const int search_plate_global = 0x010805fc;
        public: static const int search_spinner = 0x010805fd;
        public: static const int seek_thumb = 0x010805fe;
        public: static const int seek_thumb_normal = 0x010805ff;
        public: static const int seek_thumb_pressed = 0x01080600;
        public: static const int seek_thumb_selected = 0x01080601;
        /**  For date picker widget 
         */
        public: static const int selected_day_background = 0x0108075e;
        public: static const int settings_header = 0x01080602;
        public: static const int settings_header_raw = 0x01080603;
        public: static const int silent_mode_indicator = 0x01080604;
        public: static const int sim_dark_blue = 0x01080605;
        public: static const int sim_dark_green = 0x01080606;
        public: static const int sim_dark_orange = 0x01080607;
        public: static const int sim_dark_purple = 0x01080608;
        public: static const int sim_light_blue = 0x01080609;
        public: static const int sim_light_green = 0x0108060a;
        public: static const int sim_light_orange = 0x0108060b;
        public: static const int sim_light_purple = 0x0108060c;
        public: static const int spinner_16_inner_holo = 0x0108060d;
        public: static const int spinner_16_outer_holo = 0x0108060e;
        public: static const int spinner_48_inner_holo = 0x0108060f;
        public: static const int spinner_48_outer_holo = 0x01080610;
        public: static const int spinner_76_inner_holo = 0x01080611;
        public: static const int spinner_76_outer_holo = 0x01080612;
        public: static const int spinner_ab_activated_holo_dark = 0x01080613;
        public: static const int spinner_ab_activated_holo_light = 0x01080614;
        public: static const int spinner_ab_default_holo_dark = 0x01080615;
        public: static const int spinner_ab_default_holo_dark_am = 0x01080616;
        public: static const int spinner_ab_default_holo_light = 0x01080617;
        public: static const int spinner_ab_default_holo_light_am = 0x01080618;
        public: static const int spinner_ab_disabled_holo_dark = 0x01080619;
        public: static const int spinner_ab_disabled_holo_dark_am = 0x0108061a;
        public: static const int spinner_ab_disabled_holo_light = 0x0108061b;
        public: static const int spinner_ab_disabled_holo_light_am = 0x0108061c;
        public: static const int spinner_ab_focused_holo_dark = 0x0108061d;
        public: static const int spinner_ab_focused_holo_dark_am = 0x0108061e;
        public: static const int spinner_ab_focused_holo_light = 0x0108061f;
        public: static const int spinner_ab_focused_holo_light_am = 0x01080620;
        public: static const int spinner_ab_holo_dark = 0x01080621;
        public: static const int spinner_ab_holo_light = 0x01080622;
        public: static const int spinner_ab_pressed_holo_dark = 0x01080623;
        public: static const int spinner_ab_pressed_holo_dark_am = 0x01080624;
        public: static const int spinner_ab_pressed_holo_light = 0x01080625;
        public: static const int spinner_ab_pressed_holo_light_am = 0x01080626;
        public: static const int spinner_activated_holo_dark = 0x01080627;
        public: static const int spinner_activated_holo_light = 0x01080628;
        public: static const int spinner_background = 0x01080070;
        public: static const int spinner_background_holo_dark = 0x01080629;
        public: static const int spinner_background_holo_light = 0x0108062a;
        public: static const int spinner_background_material = 0x0108062b;
        public: static const int spinner_black_16 = 0x0108062c;
        public: static const int spinner_black_20 = 0x0108062d;
        public: static const int spinner_black_48 = 0x0108062e;
        public: static const int spinner_black_76 = 0x0108062f;
        public: static const int spinner_default_holo_dark = 0x01080630;
        public: static const int spinner_default_holo_dark_am = 0x01080631;
        public: static const int spinner_default_holo_light = 0x01080632;
        public: static const int spinner_default_holo_light_am = 0x01080633;
        public: static const int spinner_disabled_holo = 0x01080634;
        public: static const int spinner_disabled_holo_dark = 0x01080635;
        public: static const int spinner_disabled_holo_dark_am = 0x01080636;
        public: static const int spinner_disabled_holo_light = 0x01080637;
        public: static const int spinner_disabled_holo_light_am = 0x01080638;
        public: static const int spinner_dropdown_background = 0x01080071;
        public: static const int spinner_dropdown_background_down = 0x01080639;
        public: static const int spinner_dropdown_background_up = 0x0108063a;
        public: static const int spinner_focused_holo_dark = 0x0108063b;
        public: static const int spinner_focused_holo_dark_am = 0x0108063c;
        public: static const int spinner_focused_holo_light = 0x0108063d;
        public: static const int spinner_focused_holo_light_am = 0x0108063e;
        public: static const int spinner_mtrl_am_alpha = 0x0108063f;
        public: static const int spinner_normal = 0x01080640;
        public: static const int spinner_normal_holo = 0x01080641;
        public: static const int spinner_press = 0x01080642;
        public: static const int spinner_pressed_holo_dark = 0x01080643;
        public: static const int spinner_pressed_holo_dark_am = 0x01080644;
        public: static const int spinner_pressed_holo_light = 0x01080645;
        public: static const int spinner_pressed_holo_light_am = 0x01080646;
        public: static const int spinner_select = 0x01080647;
        public: static const int spinner_textfield_background_material = 0x01080648;
        public: static const int spinner_white_16 = 0x01080649;
        public: static const int spinner_white_48 = 0x0108064a;
        public: static const int spinner_white_76 = 0x0108064b;
        public: static const int star_big_off = 0x01080073;
        public: static const int star_big_on = 0x01080072;
        public: static const int star_off = 0x01080075;
        public: static const int star_on = 0x01080074;
        public: static const int stat_ecb_mode = 0x0108064c;
        public: static const int stat_notify_call_mute = 0x01080076;
        public: static const int stat_notify_car_mode = 0x0108064d;
        public: static const int stat_notify_chat = 0x01080077;
        public: static const int stat_notify_disabled_data = 0x0108064e;
        public: static const int stat_notify_disk_full = 0x0108064f;
        public: static const int stat_notify_email_generic = 0x01080650;
        public: static const int stat_notify_error = 0x01080078;
        public: static const int stat_notify_gmail = 0x01080651;
        public: static const int stat_notify_missed_call = 0x0108007f;
        public: static const int stat_notify_more = 0x01080079;
        public: static const int stat_notify_rssi_in_range = 0x01080652;
        public: static const int stat_notify_sdcard = 0x0108007a;
        public: static const int stat_notify_sdcard_prepare = 0x010800ab;
        public: static const int stat_notify_sdcard_usb = 0x0108007b;
        public: static const int stat_notify_sim_toolkit = 0x01080653;
        public: static const int stat_notify_sync = 0x0108007c;
        public: static const int stat_notify_sync_anim0 = 0x01080654;
        public: static const int stat_notify_sync_error = 0x01080655;
        public: static const int stat_notify_sync_noanim = 0x0108007d;
        public: static const int stat_notify_voicemail = 0x0108007e;
        public: static const int stat_notify_wifi_in_range = 0x01080656;
        public: static const int stat_sys_adb = 0x01080657;
        public: static const int stat_sys_battery = 0x01080658;
        public: static const int stat_sys_battery_0 = 0x01080659;
        public: static const int stat_sys_battery_10 = 0x0108065a;
        public: static const int stat_sys_battery_100 = 0x0108065b;
        public: static const int stat_sys_battery_15 = 0x0108065c;
        public: static const int stat_sys_battery_20 = 0x0108065d;
        public: static const int stat_sys_battery_28 = 0x0108065e;
        public: static const int stat_sys_battery_40 = 0x0108065f;
        public: static const int stat_sys_battery_43 = 0x01080660;
        public: static const int stat_sys_battery_57 = 0x01080661;
        public: static const int stat_sys_battery_60 = 0x01080662;
        public: static const int stat_sys_battery_71 = 0x01080663;
        public: static const int stat_sys_battery_80 = 0x01080664;
        public: static const int stat_sys_battery_85 = 0x01080665;
        public: static const int stat_sys_battery_charge = 0x01080666;
        public: static const int stat_sys_battery_charge_anim0 = 0x01080667;
        public: static const int stat_sys_battery_charge_anim1 = 0x01080668;
        public: static const int stat_sys_battery_charge_anim100 = 0x01080669;
        public: static const int stat_sys_battery_charge_anim15 = 0x0108066a;
        public: static const int stat_sys_battery_charge_anim2 = 0x0108066b;
        public: static const int stat_sys_battery_charge_anim28 = 0x0108066c;
        public: static const int stat_sys_battery_charge_anim3 = 0x0108066d;
        public: static const int stat_sys_battery_charge_anim4 = 0x0108066e;
        public: static const int stat_sys_battery_charge_anim43 = 0x0108066f;
        public: static const int stat_sys_battery_charge_anim5 = 0x01080670;
        public: static const int stat_sys_battery_charge_anim57 = 0x01080671;
        public: static const int stat_sys_battery_charge_anim71 = 0x01080672;
        public: static const int stat_sys_battery_charge_anim85 = 0x01080673;
        public: static const int stat_sys_battery_unknown = 0x01080674;
        public: static const int stat_sys_certificate_info = 0x01080675;
        public: static const int stat_sys_data_bluetooth = 0x01080080;
        public: static const int stat_sys_data_usb = 0x01080676;
        public: static const int stat_sys_data_wimax_signal_3_fully = 0x01080677;
        public: static const int stat_sys_data_wimax_signal_disconnected = 0x01080678;
        public: static const int stat_sys_download = 0x01080081;
        public: static const int stat_sys_download_anim0 = 0x01080679;
        public: static const int stat_sys_download_anim1 = 0x0108067a;
        public: static const int stat_sys_download_anim2 = 0x0108067b;
        public: static const int stat_sys_download_anim3 = 0x0108067c;
        public: static const int stat_sys_download_anim4 = 0x0108067d;
        public: static const int stat_sys_download_anim5 = 0x0108067e;
        public: static const int stat_sys_download_done = 0x01080082;
        public: static const int stat_sys_download_done_static = 0x0108067f;
        public: static const int stat_sys_gps_on = 0x01080680;
        public: static const int stat_sys_headset = 0x01080083;
        /**  @deprecated Replaced by a private asset in the phone app. 
         */
        public: static const int stat_sys_phone_call = 0x01080084;
        /**  @deprecated Replaced by a private asset in the phone app. 
         */
        public: static const int stat_sys_phone_call_forward = 0x01080085;
        /**  @deprecated Replaced by a private asset in the phone app. 
         */
        public: static const int stat_sys_phone_call_on_hold = 0x01080086;
        public: static const int stat_sys_r_signal_0_cdma = 0x01080681;
        public: static const int stat_sys_r_signal_1_cdma = 0x01080682;
        public: static const int stat_sys_r_signal_2_cdma = 0x01080683;
        public: static const int stat_sys_r_signal_3_cdma = 0x01080684;
        public: static const int stat_sys_r_signal_4_cdma = 0x01080685;
        public: static const int stat_sys_ra_signal_0_cdma = 0x01080686;
        public: static const int stat_sys_ra_signal_1_cdma = 0x01080687;
        public: static const int stat_sys_ra_signal_2_cdma = 0x01080688;
        public: static const int stat_sys_ra_signal_3_cdma = 0x01080689;
        public: static const int stat_sys_ra_signal_4_cdma = 0x0108068a;
        public: static const int stat_sys_signal_0_cdma = 0x0108068b;
        public: static const int stat_sys_signal_1_cdma = 0x0108068c;
        public: static const int stat_sys_signal_2_cdma = 0x0108068d;
        public: static const int stat_sys_signal_3_cdma = 0x0108068e;
        public: static const int stat_sys_signal_4_cdma = 0x0108068f;
        public: static const int stat_sys_signal_evdo_0 = 0x01080690;
        public: static const int stat_sys_signal_evdo_1 = 0x01080691;
        public: static const int stat_sys_signal_evdo_2 = 0x01080692;
        public: static const int stat_sys_signal_evdo_3 = 0x01080693;
        public: static const int stat_sys_signal_evdo_4 = 0x01080694;
        public: static const int stat_sys_speakerphone = 0x01080087;
        public: static const int stat_sys_tether_bluetooth = 0x01080695;
        public: static const int stat_sys_tether_general = 0x01080696;
        public: static const int stat_sys_tether_usb = 0x01080697;
        public: static const int stat_sys_tether_wifi = 0x01080698;
        public: static const int stat_sys_throttled = 0x01080699;
        public: static const int stat_sys_upload = 0x01080088;
        public: static const int stat_sys_upload_anim0 = 0x0108069a;
        public: static const int stat_sys_upload_anim1 = 0x0108069b;
        public: static const int stat_sys_upload_anim2 = 0x0108069c;
        public: static const int stat_sys_upload_anim3 = 0x0108069d;
        public: static const int stat_sys_upload_anim4 = 0x0108069e;
        public: static const int stat_sys_upload_anim5 = 0x0108069f;
        public: static const int stat_sys_upload_done = 0x01080089;
        /**  @deprecated Replaced by a private asset in the phone app. 
         */
        public: static const int stat_sys_vp_phone_call = 0x010800a7;
        /**  @deprecated Replaced by a private asset in the phone app. 
         */
        public: static const int stat_sys_vp_phone_call_on_hold = 0x010800a8;
        public: static const int stat_sys_warning = 0x0108008a;
        public: static const int status_bar_background = 0x010806a0;
        public: static const int status_bar_closed_default_background = 0x01080759;
        public: static const int status_bar_header_background = 0x010806a1;
        public: static const int status_bar_item_app_background = 0x0108008b;
        public: static const int status_bar_item_app_background_normal = 0x010806a2;
        public: static const int status_bar_item_background = 0x0108008c;
        public: static const int status_bar_item_background_focus = 0x010806a3;
        public: static const int status_bar_item_background_normal = 0x010806a4;
        public: static const int status_bar_item_background_pressed = 0x010806a5;
        public: static const int status_bar_opened_default_background = 0x0108075a;
        public: static const int statusbar_background = 0x010806a6;
        public: static const int submenu_arrow = 0x010806a7;
        public: static const int submenu_arrow_nofocus = 0x010806a8;
        public: static const int switch_bg_disabled_holo_dark = 0x010806a9;
        public: static const int switch_bg_disabled_holo_light = 0x010806aa;
        public: static const int switch_bg_focused_holo_dark = 0x010806ab;
        public: static const int switch_bg_focused_holo_light = 0x010806ac;
        public: static const int switch_bg_holo_dark = 0x010806ad;
        public: static const int switch_bg_holo_light = 0x010806ae;
        public: static const int switch_inner_holo_dark = 0x010806af;
        public: static const int switch_inner_holo_light = 0x010806b0;
        public: static const int switch_off_mtrl_alpha = 0x010806b1;
        public: static const int switch_on_mtrl_alpha = 0x010806b2;
        public: static const int switch_thumb_activated_holo_dark = 0x010806b3;
        public: static const int switch_thumb_activated_holo_light = 0x010806b4;
        public: static const int switch_thumb_disabled_holo_dark = 0x010806b5;
        public: static const int switch_thumb_disabled_holo_light = 0x010806b6;
        public: static const int switch_thumb_holo_dark = 0x010806b7;
        public: static const int switch_thumb_holo_light = 0x010806b8;
        public: static const int switch_thumb_holo_light_v2 = 0x010806b9;
        public: static const int switch_thumb_material_anim = 0x010806ba;
        public: static const int switch_thumb_pressed_holo_dark = 0x010806bb;
        public: static const int switch_thumb_pressed_holo_light = 0x010806bc;
        public: static const int switch_track_holo_dark = 0x010806bd;
        public: static const int switch_track_holo_light = 0x010806be;
        public: static const int switch_track_material = 0x010806bf;
        public: static const int switch_track_mtrl_alpha = 0x010806c0;
        public: static const int sym_action_add = 0x010806c1;
        public: static const int sym_action_call = 0x0108008d;
        public: static const int sym_action_chat = 0x0108008e;
        public: static const int sym_action_email = 0x0108008f;
        public: static const int sym_app_on_sd_unavailable_icon = 0x010806c2;
        public: static const int sym_call_incoming = 0x01080090;
        public: static const int sym_call_missed = 0x01080091;
        public: static const int sym_call_outgoing = 0x01080092;
        public: static const int sym_contact_card = 0x01080094;
        public: static const int sym_def_app_icon = 0x01080093;
        public: static const int sym_keyboard_delete = 0x010806c3;
        public: static const int sym_keyboard_delete_dim = 0x010806c4;
        public: static const int sym_keyboard_delete_holo = 0x010806c5;
        public: static const int sym_keyboard_enter = 0x010806c6;
        public: static const int sym_keyboard_feedback_delete = 0x010806c7;
        public: static const int sym_keyboard_feedback_ok = 0x010806c8;
        public: static const int sym_keyboard_feedback_return = 0x010806c9;
        public: static const int sym_keyboard_feedback_shift = 0x010806ca;
        public: static const int sym_keyboard_feedback_shift_locked = 0x010806cb;
        public: static const int sym_keyboard_feedback_space = 0x010806cc;
        public: static const int sym_keyboard_num0_no_plus = 0x010806cd;
        public: static const int sym_keyboard_num1 = 0x010806ce;
        public: static const int sym_keyboard_num2 = 0x010806cf;
        public: static const int sym_keyboard_num3 = 0x010806d0;
        public: static const int sym_keyboard_num4 = 0x010806d1;
        public: static const int sym_keyboard_num5 = 0x010806d2;
        public: static const int sym_keyboard_num6 = 0x010806d3;
        public: static const int sym_keyboard_num7 = 0x010806d4;
        public: static const int sym_keyboard_num8 = 0x010806d5;
        public: static const int sym_keyboard_num9 = 0x010806d6;
        public: static const int sym_keyboard_ok = 0x010806d7;
        public: static const int sym_keyboard_ok_dim = 0x010806d8;
        public: static const int sym_keyboard_return = 0x010806d9;
        public: static const int sym_keyboard_return_holo = 0x010806da;
        public: static const int sym_keyboard_shift = 0x010806db;
        public: static const int sym_keyboard_shift_locked = 0x010806dc;
        public: static const int sym_keyboard_space = 0x010806dd;
        public: static const int tab_bottom_holo = 0x010806de;
        public: static const int tab_bottom_left = 0x010806df;
        public: static const int tab_bottom_left_v4 = 0x010806e0;
        public: static const int tab_bottom_right = 0x010806e1;
        public: static const int tab_bottom_right_v4 = 0x010806e2;
        public: static const int tab_focus = 0x010806e3;
        public: static const int tab_focus_bar_left = 0x010806e4;
        public: static const int tab_focus_bar_right = 0x010806e5;
        public: static const int tab_indicator = 0x010806e6;
        public: static const int tab_indicator_ab_holo = 0x010806e7;
        public: static const int tab_indicator_holo = 0x010806e8;
        public: static const int tab_indicator_material = 0x010806e9;
        public: static const int tab_indicator_mtrl_alpha = 0x010806ea;
        public: static const int tab_indicator_v4 = 0x010806eb;
        public: static const int tab_press = 0x010806ec;
        public: static const int tab_press_bar_left = 0x010806ed;
        public: static const int tab_press_bar_right = 0x010806ee;
        public: static const int tab_pressed_holo = 0x010806ef;
        public: static const int tab_selected = 0x010806f0;
        public: static const int tab_selected_bar_left = 0x010806f1;
        public: static const int tab_selected_bar_left_v4 = 0x010806f2;
        public: static const int tab_selected_bar_right = 0x010806f3;
        public: static const int tab_selected_bar_right_v4 = 0x010806f4;
        public: static const int tab_selected_focused_holo = 0x010806f5;
        public: static const int tab_selected_holo = 0x010806f6;
        public: static const int tab_selected_pressed_holo = 0x010806f7;
        public: static const int tab_selected_v4 = 0x010806f8;
        public: static const int tab_unselected = 0x010806f9;
        public: static const int tab_unselected_focused_holo = 0x010806fa;
        public: static const int tab_unselected_holo = 0x010806fb;
        public: static const int tab_unselected_pressed_holo = 0x010806fc;
        public: static const int tab_unselected_v4 = 0x010806fd;
        public: static const int text_cursor_holo_dark = 0x010806fe;
        public: static const int text_cursor_holo_light = 0x010806ff;
        public: static const int text_cursor_material = 0x01080700;
        public: static const int text_cursor_mtrl_alpha = 0x01080701;
        public: static const int text_edit_paste_window = 0x01080702;
        public: static const int text_edit_side_paste_window = 0x01080703;
        public: static const int text_edit_suggestions_window = 0x01080704;
        public: static const int text_select_handle_left = 0x01080705;
        public: static const int text_select_handle_left_material = 0x01080706;
        public: static const int text_select_handle_left_mtrl_alpha = 0x01080707;
        public: static const int text_select_handle_middle = 0x01080708;
        public: static const int text_select_handle_middle_material = 0x01080709;
        public: static const int text_select_handle_middle_mtrl_alpha = 0x0108070a;
        public: static const int text_select_handle_right = 0x0108070b;
        public: static const int text_select_handle_right_material = 0x0108070c;
        public: static const int text_select_handle_right_mtrl_alpha = 0x0108070d;
        public: static const int textfield_activated_holo_dark = 0x0108070e;
        public: static const int textfield_activated_holo_light = 0x0108070f;
        public: static const int textfield_activated_mtrl_alpha = 0x01080710;
        public: static const int textfield_bg_activated_holo_dark = 0x01080711;
        public: static const int textfield_bg_default_holo_dark = 0x01080712;
        public: static const int textfield_bg_disabled_focused_holo_dark = 0x01080713;
        public: static const int textfield_bg_disabled_holo_dark = 0x01080714;
        public: static const int textfield_bg_focused_holo_dark = 0x01080715;
        public: static const int textfield_default = 0x01080716;
        public: static const int textfield_default_holo_dark = 0x01080717;
        public: static const int textfield_default_holo_light = 0x01080718;
        public: static const int textfield_default_mtrl_alpha = 0x01080719;
        public: static const int textfield_disabled = 0x0108071a;
        public: static const int textfield_disabled_focused_holo_dark = 0x0108071b;
        public: static const int textfield_disabled_focused_holo_light = 0x0108071c;
        public: static const int textfield_disabled_holo_dark = 0x0108071d;
        public: static const int textfield_disabled_holo_light = 0x0108071e;
        public: static const int textfield_disabled_selected = 0x0108071f;
        public: static const int textfield_focused_holo_dark = 0x01080720;
        public: static const int textfield_focused_holo_light = 0x01080721;
        public: static const int textfield_longpress_holo = 0x01080722;
        public: static const int textfield_multiline_activated_holo_dark = 0x01080723;
        public: static const int textfield_multiline_activated_holo_light = 0x01080724;
        public: static const int textfield_multiline_default_holo_dark = 0x01080725;
        public: static const int textfield_multiline_default_holo_light = 0x01080726;
        public: static const int textfield_multiline_disabled_focused_holo_dark = 0x01080727;
        public: static const int textfield_multiline_disabled_focused_holo_light = 0x01080728;
        public: static const int textfield_multiline_disabled_holo_dark = 0x01080729;
        public: static const int textfield_multiline_disabled_holo_light = 0x0108072a;
        public: static const int textfield_multiline_focused_holo_dark = 0x0108072b;
        public: static const int textfield_multiline_focused_holo_light = 0x0108072c;
        public: static const int textfield_pressed_holo = 0x0108072d;
        public: static const int textfield_search = 0x0108072e;
        public: static const int textfield_search_activated_mtrl_alpha = 0x0108072f;
        public: static const int textfield_search_default = 0x01080730;
        public: static const int textfield_search_default_holo_dark = 0x01080731;
        public: static const int textfield_search_default_holo_light = 0x01080732;
        public: static const int textfield_search_default_mtrl_alpha = 0x01080733;
        public: static const int textfield_search_empty = 0x01080734;
        public: static const int textfield_search_empty_default = 0x01080735;
        public: static const int textfield_search_empty_pressed = 0x01080736;
        public: static const int textfield_search_empty_selected = 0x01080737;
        public: static const int textfield_search_material = 0x01080738;
        public: static const int textfield_search_pressed = 0x01080739;
        public: static const int textfield_search_right_default_holo_dark = 0x0108073a;
        public: static const int textfield_search_right_default_holo_light = 0x0108073b;
        public: static const int textfield_search_right_selected_holo_dark = 0x0108073c;
        public: static const int textfield_search_right_selected_holo_light = 0x0108073d;
        public: static const int textfield_search_selected = 0x0108073e;
        public: static const int textfield_search_selected_holo_dark = 0x0108073f;
        public: static const int textfield_search_selected_holo_light = 0x01080740;
        public: static const int textfield_searchview_holo_dark = 0x01080741;
        public: static const int textfield_searchview_holo_light = 0x01080742;
        public: static const int textfield_searchview_right_holo_dark = 0x01080743;
        public: static const int textfield_searchview_right_holo_light = 0x01080744;
        public: static const int textfield_selected = 0x01080745;
        public: static const int time_picker_header_material = 0x01080746;
        public: static const int title_bar = 0x01080095;
        public: static const int title_bar_medium = 0x01080747;
        public: static const int title_bar_portrait = 0x01080748;
        public: static const int title_bar_shadow = 0x01080749;
        /**   Drawable to use as a background for a taller version of the titlebar 
         */
        public: static const int title_bar_tall = 0x010800a6;
        public: static const int toast_frame = 0x01080096;
        public: static const int transportcontrol_bg = 0x0108074a;
        public: static const int unknown_image = 0x0108074b;
        public: static const int unlock_default = 0x0108074c;
        public: static const int unlock_halo = 0x0108074d;
        public: static const int unlock_ring = 0x0108074e;
        public: static const int unlock_wave = 0x0108074f;
        public: static const int usb_android = 0x01080750;
        public: static const int usb_android_connected = 0x01080751;
        public: static const int vector_drawable_progress_bar_large = 0x01080752;
        public: static const int vector_drawable_progress_bar_medium = 0x01080753;
        public: static const int vector_drawable_progress_bar_small = 0x01080754;
        public: static const int vector_drawable_progress_indeterminate_horizontal = 0x01080755;
        public: static const int view_accessibility_focused = 0x01080756;
        public: static const int vpn_connected = 0x01080757;
        public: static const int vpn_disconnected = 0x01080758;
        public: static const int zoom_plate = 0x01080097;
    };
    public: class fraction {
        /**  Duration for the dim animation behind a dialog.  This may be either
         a percentage, which is relative to the duration of the enter/open
         animation of the window being shown that is dimming behind, or it may
         be an integer for a constant duration. 
         */
        public: static const int config_dimBehindFadeDuration = 0x01130000;
        /**  User activity timeout: Maximum screen dim duration as a percentage of screen off timeout.

         This resource is similar to config_maximumScreenDimDuration but the maximum
         screen dim duration is defined as a ratio of the overall screen off timeout
         instead of as an absolute value in milliseconds.  This is useful for reducing
         the dim duration when the screen off timeout is very short.

         When computing the screen dim duration, the power manager uses the lesser
         of the effective durations expressed by config_maximumScreenDimDuration and
         config_maximumScreenDimRatio.

         This value must be between 0% and 100%.  If the value is zero, the screen will not
         dim before the device goes to sleep.
    
         */
        public: static const int config_maximumScreenDimRatio = 0x01130001;
    };
    public: class id {
        public: static const int KEYCODE_0 = 0x010200a3;
        public: static const int KEYCODE_1 = 0x010200a4;
        public: static const int KEYCODE_11 = 0x010200a5;
        public: static const int KEYCODE_12 = 0x010200a6;
        public: static const int KEYCODE_2 = 0x010200a7;
        public: static const int KEYCODE_3 = 0x010200a8;
        public: static const int KEYCODE_3D_MODE = 0x010200a9;
        public: static const int KEYCODE_4 = 0x010200aa;
        public: static const int KEYCODE_5 = 0x010200ab;
        public: static const int KEYCODE_6 = 0x010200ac;
        public: static const int KEYCODE_7 = 0x010200ad;
        public: static const int KEYCODE_8 = 0x010200ae;
        public: static const int KEYCODE_9 = 0x010200af;
        public: static const int KEYCODE_A = 0x010200b0;
        public: static const int KEYCODE_ALT_LEFT = 0x010200b1;
        public: static const int KEYCODE_ALT_RIGHT = 0x010200b2;
        public: static const int KEYCODE_APOSTROPHE = 0x010200b3;
        public: static const int KEYCODE_APP_SWITCH = 0x010200b4;
        public: static const int KEYCODE_ASSIST = 0x010200b5;
        public: static const int KEYCODE_AT = 0x010200b6;
        public: static const int KEYCODE_AVR_INPUT = 0x010200b7;
        public: static const int KEYCODE_AVR_POWER = 0x010200b8;
        public: static const int KEYCODE_B = 0x010200b9;
        public: static const int KEYCODE_BACK = 0x010200ba;
        public: static const int KEYCODE_BACKSLASH = 0x010200bb;
        public: static const int KEYCODE_BOOKMARK = 0x010200bc;
        public: static const int KEYCODE_BREAK = 0x010200bd;
        public: static const int KEYCODE_BRIGHTNESS_DOWN = 0x010200be;
        public: static const int KEYCODE_BRIGHTNESS_UP = 0x010200bf;
        public: static const int KEYCODE_BUTTON_1 = 0x010200c0;
        public: static const int KEYCODE_BUTTON_10 = 0x010200c1;
        public: static const int KEYCODE_BUTTON_11 = 0x010200c2;
        public: static const int KEYCODE_BUTTON_12 = 0x010200c3;
        public: static const int KEYCODE_BUTTON_13 = 0x010200c4;
        public: static const int KEYCODE_BUTTON_14 = 0x010200c5;
        public: static const int KEYCODE_BUTTON_15 = 0x010200c6;
        public: static const int KEYCODE_BUTTON_16 = 0x010200c7;
        public: static const int KEYCODE_BUTTON_2 = 0x010200c8;
        public: static const int KEYCODE_BUTTON_3 = 0x010200c9;
        public: static const int KEYCODE_BUTTON_4 = 0x010200ca;
        public: static const int KEYCODE_BUTTON_5 = 0x010200cb;
        public: static const int KEYCODE_BUTTON_6 = 0x010200cc;
        public: static const int KEYCODE_BUTTON_7 = 0x010200cd;
        public: static const int KEYCODE_BUTTON_8 = 0x010200ce;
        public: static const int KEYCODE_BUTTON_9 = 0x010200cf;
        public: static const int KEYCODE_BUTTON_A = 0x010200d0;
        public: static const int KEYCODE_BUTTON_B = 0x010200d1;
        public: static const int KEYCODE_BUTTON_C = 0x010200d2;
        public: static const int KEYCODE_BUTTON_L1 = 0x010200d3;
        public: static const int KEYCODE_BUTTON_L2 = 0x010200d4;
        public: static const int KEYCODE_BUTTON_MODE = 0x010200d5;
        public: static const int KEYCODE_BUTTON_R1 = 0x010200d6;
        public: static const int KEYCODE_BUTTON_R2 = 0x010200d7;
        public: static const int KEYCODE_BUTTON_SELECT = 0x010200d8;
        public: static const int KEYCODE_BUTTON_START = 0x010200d9;
        public: static const int KEYCODE_BUTTON_THUMBL = 0x010200da;
        public: static const int KEYCODE_BUTTON_THUMBR = 0x010200db;
        public: static const int KEYCODE_BUTTON_X = 0x010200dc;
        public: static const int KEYCODE_BUTTON_Y = 0x010200dd;
        public: static const int KEYCODE_BUTTON_Z = 0x010200de;
        public: static const int KEYCODE_C = 0x010200df;
        public: static const int KEYCODE_CALCULATOR = 0x010200e0;
        public: static const int KEYCODE_CALENDAR = 0x010200e1;
        public: static const int KEYCODE_CALL = 0x010200e2;
        public: static const int KEYCODE_CAMERA = 0x010200e3;
        public: static const int KEYCODE_CAPS_LOCK = 0x010200e4;
        public: static const int KEYCODE_CAPTIONS = 0x010200e5;
        public: static const int KEYCODE_CHANNEL_DOWN = 0x010200e6;
        public: static const int KEYCODE_CHANNEL_UP = 0x010200e7;
        public: static const int KEYCODE_CLEAR = 0x010200e8;
        public: static const int KEYCODE_COMMA = 0x010200e9;
        public: static const int KEYCODE_CONTACTS = 0x010200ea;
        public: static const int KEYCODE_CTRL_LEFT = 0x010200eb;
        public: static const int KEYCODE_CTRL_RIGHT = 0x010200ec;
        public: static const int KEYCODE_D = 0x010200ed;
        public: static const int KEYCODE_DEL = 0x010200ee;
        public: static const int KEYCODE_DPAD_CENTER = 0x010200ef;
        public: static const int KEYCODE_DPAD_DOWN = 0x010200f0;
        public: static const int KEYCODE_DPAD_LEFT = 0x010200f1;
        public: static const int KEYCODE_DPAD_RIGHT = 0x010200f2;
        public: static const int KEYCODE_DPAD_UP = 0x010200f3;
        public: static const int KEYCODE_DVR = 0x010200f4;
        public: static const int KEYCODE_E = 0x010200f5;
        public: static const int KEYCODE_EISU = 0x010200f6;
        public: static const int KEYCODE_ENDCALL = 0x010200f7;
        public: static const int KEYCODE_ENTER = 0x010200f8;
        public: static const int KEYCODE_ENVELOPE = 0x010200f9;
        public: static const int KEYCODE_EQUALS = 0x010200fa;
        public: static const int KEYCODE_ESCAPE = 0x010200fb;
        public: static const int KEYCODE_EXPLORER = 0x010200fc;
        public: static const int KEYCODE_F = 0x010200fd;
        public: static const int KEYCODE_F1 = 0x010200fe;
        public: static const int KEYCODE_F10 = 0x010200ff;
        public: static const int KEYCODE_F11 = 0x01020100;
        public: static const int KEYCODE_F12 = 0x01020101;
        public: static const int KEYCODE_F2 = 0x01020102;
        public: static const int KEYCODE_F3 = 0x01020103;
        public: static const int KEYCODE_F4 = 0x01020104;
        public: static const int KEYCODE_F5 = 0x01020105;
        public: static const int KEYCODE_F6 = 0x01020106;
        public: static const int KEYCODE_F7 = 0x01020107;
        public: static const int KEYCODE_F8 = 0x01020108;
        public: static const int KEYCODE_F9 = 0x01020109;
        public: static const int KEYCODE_FOCUS = 0x0102010a;
        public: static const int KEYCODE_FORWARD = 0x0102010b;
        public: static const int KEYCODE_FORWARD_DEL = 0x0102010c;
        public: static const int KEYCODE_FUNCTION = 0x0102010d;
        public: static const int KEYCODE_G = 0x0102010e;
        public: static const int KEYCODE_GRAVE = 0x0102010f;
        public: static const int KEYCODE_GUIDE = 0x01020110;
        public: static const int KEYCODE_H = 0x01020111;
        public: static const int KEYCODE_HEADSETHOOK = 0x01020112;
        public: static const int KEYCODE_HELP = 0x01020113;
        public: static const int KEYCODE_HENKAN = 0x01020114;
        public: static const int KEYCODE_HOME = 0x01020115;
        public: static const int KEYCODE_I = 0x01020116;
        public: static const int KEYCODE_INFO = 0x01020117;
        public: static const int KEYCODE_INSERT = 0x01020118;
        public: static const int KEYCODE_J = 0x01020119;
        public: static const int KEYCODE_K = 0x0102011a;
        public: static const int KEYCODE_KANA = 0x0102011b;
        public: static const int KEYCODE_KATAKANA_HIRAGANA = 0x0102011c;
        public: static const int KEYCODE_L = 0x0102011d;
        public: static const int KEYCODE_LANGUAGE_SWITCH = 0x0102011e;
        public: static const int KEYCODE_LAST_CHANNEL = 0x0102011f;
        public: static const int KEYCODE_LEFT_BRACKET = 0x01020120;
        public: static const int KEYCODE_M = 0x01020121;
        public: static const int KEYCODE_MANNER_MODE = 0x01020122;
        public: static const int KEYCODE_MEDIA_AUDIO_TRACK = 0x01020123;
        public: static const int KEYCODE_MEDIA_CLOSE = 0x01020124;
        public: static const int KEYCODE_MEDIA_EJECT = 0x01020125;
        public: static const int KEYCODE_MEDIA_FAST_FORWARD = 0x01020126;
        public: static const int KEYCODE_MEDIA_NEXT = 0x01020127;
        public: static const int KEYCODE_MEDIA_PAUSE = 0x01020128;
        public: static const int KEYCODE_MEDIA_PLAY = 0x01020129;
        public: static const int KEYCODE_MEDIA_PLAY_PAUSE = 0x0102012a;
        public: static const int KEYCODE_MEDIA_PREVIOUS = 0x0102012b;
        public: static const int KEYCODE_MEDIA_RECORD = 0x0102012c;
        public: static const int KEYCODE_MEDIA_REWIND = 0x0102012d;
        public: static const int KEYCODE_MEDIA_SLEEP = 0x0102012e;
        public: static const int KEYCODE_MEDIA_STOP = 0x0102012f;
        public: static const int KEYCODE_MEDIA_TOP_MENU = 0x01020130;
        public: static const int KEYCODE_MEDIA_WAKEUP = 0x01020131;
        public: static const int KEYCODE_MENU = 0x01020132;
        public: static const int KEYCODE_META_LEFT = 0x01020133;
        public: static const int KEYCODE_META_RIGHT = 0x01020134;
        public: static const int KEYCODE_MINUS = 0x01020135;
        public: static const int KEYCODE_MOVE_END = 0x01020136;
        public: static const int KEYCODE_MOVE_HOME = 0x01020137;
        public: static const int KEYCODE_MUHENKAN = 0x01020138;
        public: static const int KEYCODE_MUSIC = 0x01020139;
        public: static const int KEYCODE_MUTE = 0x0102013a;
        public: static const int KEYCODE_N = 0x0102013b;
        public: static const int KEYCODE_NOTIFICATION = 0x0102013c;
        public: static const int KEYCODE_NUM = 0x0102013d;
        public: static const int KEYCODE_NUMPAD_0 = 0x0102013e;
        public: static const int KEYCODE_NUMPAD_1 = 0x0102013f;
        public: static const int KEYCODE_NUMPAD_2 = 0x01020140;
        public: static const int KEYCODE_NUMPAD_3 = 0x01020141;
        public: static const int KEYCODE_NUMPAD_4 = 0x01020142;
        public: static const int KEYCODE_NUMPAD_5 = 0x01020143;
        public: static const int KEYCODE_NUMPAD_6 = 0x01020144;
        public: static const int KEYCODE_NUMPAD_7 = 0x01020145;
        public: static const int KEYCODE_NUMPAD_8 = 0x01020146;
        public: static const int KEYCODE_NUMPAD_9 = 0x01020147;
        public: static const int KEYCODE_NUMPAD_ADD = 0x01020148;
        public: static const int KEYCODE_NUMPAD_COMMA = 0x01020149;
        public: static const int KEYCODE_NUMPAD_DIVIDE = 0x0102014a;
        public: static const int KEYCODE_NUMPAD_DOT = 0x0102014b;
        public: static const int KEYCODE_NUMPAD_ENTER = 0x0102014c;
        public: static const int KEYCODE_NUMPAD_EQUALS = 0x0102014d;
        public: static const int KEYCODE_NUMPAD_LEFT_PAREN = 0x0102014e;
        public: static const int KEYCODE_NUMPAD_MULTIPLY = 0x0102014f;
        public: static const int KEYCODE_NUMPAD_RIGHT_PAREN = 0x01020150;
        public: static const int KEYCODE_NUMPAD_SUBTRACT = 0x01020151;
        public: static const int KEYCODE_NUM_LOCK = 0x01020152;
        public: static const int KEYCODE_O = 0x01020153;
        public: static const int KEYCODE_P = 0x01020154;
        public: static const int KEYCODE_PAGE_DOWN = 0x01020155;
        public: static const int KEYCODE_PAGE_UP = 0x01020156;
        public: static const int KEYCODE_PAIRING = 0x01020157;
        public: static const int KEYCODE_PERIOD = 0x01020158;
        public: static const int KEYCODE_PICTSYMBOLS = 0x01020159;
        public: static const int KEYCODE_PLUS = 0x0102015a;
        public: static const int KEYCODE_POUND = 0x0102015b;
        public: static const int KEYCODE_POWER = 0x0102015c;
        public: static const int KEYCODE_PROG_BLUE = 0x0102015d;
        public: static const int KEYCODE_PROG_GRED = 0x0102015e;
        public: static const int KEYCODE_PROG_GREEN = 0x0102015f;
        public: static const int KEYCODE_PROG_YELLOW = 0x01020160;
        public: static const int KEYCODE_Q = 0x01020161;
        public: static const int KEYCODE_R = 0x01020162;
        public: static const int KEYCODE_RIGHT_BRACKET = 0x01020163;
        public: static const int KEYCODE_RO = 0x01020164;
        public: static const int KEYCODE_S = 0x01020165;
        public: static const int KEYCODE_SCROLL_LOCK = 0x01020166;
        public: static const int KEYCODE_SEARCH = 0x01020167;
        public: static const int KEYCODE_SEMICOLON = 0x01020168;
        public: static const int KEYCODE_SETTINGS = 0x01020169;
        public: static const int KEYCODE_SHIFT_LEFT = 0x0102016a;
        public: static const int KEYCODE_SHIFT_RIGHT = 0x0102016b;
        public: static const int KEYCODE_SLASH = 0x0102016c;
        public: static const int KEYCODE_SOFT_LEFT = 0x0102016d;
        public: static const int KEYCODE_SOFT_RIGHT = 0x0102016e;
        public: static const int KEYCODE_SPACE = 0x0102016f;
        public: static const int KEYCODE_STAR = 0x01020170;
        public: static const int KEYCODE_STB_INPUT = 0x01020171;
        public: static const int KEYCODE_STB_POWER = 0x01020172;
        public: static const int KEYCODE_SWITCH_CHARSET = 0x01020173;
        public: static const int KEYCODE_SYM = 0x01020174;
        public: static const int KEYCODE_SYSRQ = 0x01020175;
        public: static const int KEYCODE_T = 0x01020176;
        public: static const int KEYCODE_TAB = 0x01020177;
        public: static const int KEYCODE_TV = 0x01020178;
        public: static const int KEYCODE_TV_ANTENNA_CABLE = 0x01020179;
        public: static const int KEYCODE_TV_AUDIO_DESCRIPTION = 0x0102017a;
        public: static const int KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN = 0x0102017b;
        public: static const int KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP = 0x0102017c;
        public: static const int KEYCODE_TV_CONTENTS_MENU = 0x0102017d;
        public: static const int KEYCODE_TV_DATA_SERVICE = 0x0102017e;
        public: static const int KEYCODE_TV_INPUT = 0x0102017f;
        public: static const int KEYCODE_TV_INPUT_COMPONENT_1 = 0x01020180;
        public: static const int KEYCODE_TV_INPUT_COMPONENT_2 = 0x01020181;
        public: static const int KEYCODE_TV_INPUT_COMPOSITE_1 = 0x01020182;
        public: static const int KEYCODE_TV_INPUT_COMPOSITE_2 = 0x01020183;
        public: static const int KEYCODE_TV_INPUT_HDMI_1 = 0x01020184;
        public: static const int KEYCODE_TV_INPUT_HDMI_2 = 0x01020185;
        public: static const int KEYCODE_TV_INPUT_HDMI_3 = 0x01020186;
        public: static const int KEYCODE_TV_INPUT_HDMI_4 = 0x01020187;
        public: static const int KEYCODE_TV_INPUT_VGA_1 = 0x01020188;
        public: static const int KEYCODE_TV_MEDIA_CONTEXT_MENU = 0x01020189;
        public: static const int KEYCODE_TV_NETWORK = 0x0102018a;
        public: static const int KEYCODE_TV_NUMBER_ENTRY = 0x0102018b;
        public: static const int KEYCODE_TV_POWER = 0x0102018c;
        public: static const int KEYCODE_TV_RADIO_SERVICE = 0x0102018d;
        public: static const int KEYCODE_TV_SATELLITE = 0x0102018e;
        public: static const int KEYCODE_TV_SATELLITE_BS = 0x0102018f;
        public: static const int KEYCODE_TV_SATELLITE_CS = 0x01020190;
        public: static const int KEYCODE_TV_SATELLITE_SERVICE = 0x01020191;
        public: static const int KEYCODE_TV_TELETEXT = 0x01020192;
        public: static const int KEYCODE_TV_TERRESTRIAL_ANALOG = 0x01020193;
        public: static const int KEYCODE_TV_TERRESTRIAL_DIGITAL = 0x01020194;
        public: static const int KEYCODE_TV_TIMER_PROGRAMMING = 0x01020195;
        public: static const int KEYCODE_TV_ZOOM_MODE = 0x01020196;
        public: static const int KEYCODE_U = 0x01020197;
        public: static const int KEYCODE_UNKNOWN = 0x01020198;
        public: static const int KEYCODE_V = 0x01020199;
        public: static const int KEYCODE_VOICE_ASSIST = 0x0102019a;
        public: static const int KEYCODE_VOLUME_DOWN = 0x0102019b;
        public: static const int KEYCODE_VOLUME_MUTE = 0x0102019c;
        public: static const int KEYCODE_VOLUME_UP = 0x0102019d;
        public: static const int KEYCODE_W = 0x0102019e;
        public: static const int KEYCODE_WINDOW = 0x0102019f;
        public: static const int KEYCODE_X = 0x010201a0;
        public: static const int KEYCODE_Y = 0x010201a1;
        public: static const int KEYCODE_YEN = 0x010201a2;
        public: static const int KEYCODE_Z = 0x010201a3;
        public: static const int KEYCODE_ZENKAKU_HANKAKU = 0x010201a4;
        public: static const int KEYCODE_ZOOM_IN = 0x010201a5;
        public: static const int KEYCODE_ZOOM_OUT = 0x010201a6;
        public: static const int aboveThumb = 0x01020052;
        public: static const int accountPreferences = 0x01020037;
        public: static const int account_name = 0x010202fb;
        public: static const int account_row_icon = 0x010202e0;
        public: static const int account_row_text = 0x010202e1;
        public: static const int account_type = 0x010202fa;
        public: static const int action0 = 0x0102032d;
        public: static const int action1 = 0x0102032e;
        public: static const int action2 = 0x0102032f;
        public: static const int actionDone = 0x01020080;
        public: static const int actionGo = 0x01020081;
        public: static const int actionNext = 0x01020082;
        public: static const int actionNone = 0x01020083;
        public: static const int actionPrevious = 0x01020084;
        public: static const int actionSearch = 0x01020085;
        public: static const int actionSend = 0x01020086;
        public: static const int actionUnspecified = 0x01020087;
        public: static const int action_bar = 0x01020375;
        public: static const int action_bar_container = 0x01020374;
        public: static const int action_bar_spinner = 0x01020042;
        public: static const int action_bar_subtitle = 0x010202b5;
        public: static const int action_bar_title = 0x010202b4;
        public: static const int action_context_bar = 0x01020376;
        public: static const int action_divider = 0x01020334;
        public: static const int action_menu_divider = 0x0102003c;
        public: static const int action_menu_presenter = 0x0102003f;
        public: static const int action_mode_bar = 0x0102036f;
        public: static const int action_mode_bar_stub = 0x0102036e;
        public: static const int action_mode_close_button = 0x010202b6;
        public: static const int actions = 0x0102032c;
        public: static const int activity_chooser_view_content = 0x010202b7;
        public: static const int add = 0x010201c7;
        /**  Menu ID to perform a "add to dictionary" operation. 
         */
        public: static const int addToDictionary = 0x0102002a;
        public: static const int adjustNothing = 0x01020048;
        public: static const int adjustPan = 0x01020049;
        public: static const int adjustResize = 0x0102004a;
        public: static const int adjustUnspecified = 0x0102004b;
        public: static const int afterDescendants = 0x010201d1;
        public: static const int alarm = 0x01020253;
        public: static const int alertTitle = 0x010202bf;
        public: static const int alignBounds = 0x010200a1;
        public: static const int alignMargins = 0x010200a2;
        public: static const int all = 0x0102009b;
        public: static const int allow_button = 0x01020300;
        public: static const int alternative = 0x0102024c;
        public: static const int always = 0x010201b1;
        public: static const int alwaysScroll = 0x010201f4;
        public: static const int alwaysUse = 0x010202cc;
        public: static const int amPm = 0x010203b7;
        public: static const int ampm_label = 0x010203b1;
        public: static const int animation = 0x010201cf;
        public: static const int animator = 0x010202ef;
        public: static const int anyRtl = 0x010201bb;
        public: static const int appop = 0x01020274;
        public: static const int ask_checkbox = 0x010202cf;
        public: static const int assertive = 0x010201c5;
        public: static const int atThumb = 0x01020053;
        public: static const int authtoken_type = 0x010202fc;
        public: static const int auto_ = 0x010201ae;
        public: static const int auto_fit = 0x010201fc;
        public: static const int back_button = 0x01020357;
        public: static const int background = 0x01020000;
        public: static const int banner = 0x010203c4;
        public: static const int beforeDescendants = 0x010201d2;
        public: static const int beginning = 0x01020204;
        public: static const int behind = 0x0102027f;
        public: static const int bevel = 0x0102022e;
        public: static const int big_picture = 0x01020336;
        public: static const int big_text = 0x01020332;
        public: static const int blocksDescendants = 0x010201d3;
        public: static const int body = 0x0102035c;
        public: static const int bold = 0x0102005a;
        public: static const int bool_ = 0x0102026f;
        public: static const int bottom = 0x0102008f;
        public: static const int bottom_to_top = 0x01020234;
        public: static const int bounds = 0x010201cd;
        public: static const int breadcrumb_section = 0x010202db;
        public: static const int butt = 0x0102022b;
        public: static const int button0 = 0x0102035e;
        public: static const int button1 = 0x01020019;
        public: static const int button2 = 0x0102001a;
        public: static const int button3 = 0x0102001b;
        public: static const int button4 = 0x0102035f;
        public: static const int button5 = 0x01020360;
        public: static const int button6 = 0x01020361;
        public: static const int button7 = 0x01020362;
        public: static const int buttonPanel = 0x010202c1;
        public: static const int button_always = 0x01020366;
        public: static const int button_bar = 0x010202d2;
        public: static const int button_once = 0x01020365;
        public: static const int buttons = 0x010202fe;
        public: static const int by_common = 0x0102039a;
        public: static const int by_common_header = 0x01020399;
        public: static const int by_org = 0x0102039c;
        public: static const int by_org_header = 0x0102039b;
        public: static const int by_org_unit = 0x0102039e;
        public: static const int by_org_unit_header = 0x0102039d;
        public: static const int calendar = 0x01020212;
        public: static const int calendar_view = 0x010202e7;
        public: static const int cancel = 0x010202df;
        /**  The part of the UI shown by an
       {@link android.inputmethodservice.InputMethodService} that contains the
       views for displaying candidates for what the user has entered. 
         */
        public: static const int candidatesArea = 0x0102001d;
        public: static const int center = 0x01020090;
        public: static const int centerCrop = 0x010201fd;
        public: static const int centerInside = 0x010201fe;
        public: static const int center_horizontal = 0x01020091;
        public: static const int center_vertical = 0x01020092;
        public: static const int challenge = 0x01020268;
        public: static const int characterPicker = 0x010202de;
        public: static const int characters = 0x0102020c;
        public: static const int check = 0x0102032b;
        public: static const int checkbox = 0x01020001;
        public: static const int choice = 0x01020270;
        public: static const int chronometer = 0x01020341;
        public: static const int clamp = 0x01020229;
        public: static const int clearDefaultHint = 0x010202cd;
        public: static const int clipBounds = 0x010201d4;
        public: static const int clip_horizontal = 0x01020093;
        public: static const int clip_vertical = 0x01020094;
        public: static const int clock = 0x0102021c;
        /**  View ID of a {@link android.view.View} to close a popup keyboard 
         */
        public: static const int closeButton = 0x01020027;
        public: static const int collapseActionView = 0x01020250;
        public: static const int collapsing = 0x01020214;
        public: static const int column = 0x01020238;
        public: static const int columnWidth = 0x010201f9;
        public: static const int compat_checkbox = 0x010202ce;
        public: static const int container = 0x0102024d;
        public: static const int content = 0x01020002;
        public: static const int contentPanel = 0x010202c4;
        /**  Context menu ID for the "Copy" menu item to copy the currently
       selected (or all) text in a text view to the clipboard. 
         */
        public: static const int copy = 0x01020021;
        /**  Context menu ID for the "Copy URL" menu item to copy the currently
       selected URL from the text view to the clipboard. 
         */
        public: static const int copyUrl = 0x01020023;
        public: static const int costsMoney = 0x0102027a;
        public: static const int current_scene = 0x01020043;
        public: static const int custom = 0x0102002b;
        public: static const int customPanel = 0x010202c6;
        /**  Context menu ID for the "Cut" menu item to copy and delete the currently
       selected (or all) text in a text view to the clipboard. 
         */
        public: static const int cut = 0x01020020;
        public: static const int cycle = 0x01020205;
        public: static const int dangerous = 0x01020275;
        public: static const int date = 0x01020061;
        public: static const int datePicker = 0x010202e2;
        public: static const int date_picker_day = 0x010202ed;
        public: static const int date_picker_header = 0x010202e9;
        public: static const int date_picker_month = 0x010202ec;
        public: static const int date_picker_month_and_day_layout = 0x010202eb;
        public: static const int date_picker_month_day_year_layout = 0x010202ea;
        public: static const int date_picker_year = 0x010202ee;
        public: static const int datetime = 0x01020062;
        public: static const int day = 0x010202e5;
        public: static const int day_names = 0x010202dd;
        public: static const int day_picker_selector_layout = 0x010202e8;
        public: static const int decimal = 0x01020209;
        public: static const int decor_content_parent = 0x01020373;
        public: static const int decrement = 0x01020349;
        public: static const int defaultPosition = 0x010201b4;
        public: static const int default_activity_button = 0x010202ba;
        public: static const int default_loading_view = 0x01020363;
        public: static const int deny_button = 0x010202ff;
        public: static const int description = 0x010202d1;
        public: static const int development = 0x01020276;
        public: static const int dialog = 0x01020210;
        public: static const int disableHome = 0x01020260;
        public: static const int disabled = 0x010201f5;
        public: static const int divider = 0x010203b8;
        public: static const int dpad = 0x010202a2;
        public: static const int dropdown = 0x01020211;
        public: static const int edit = 0x01020003;
        public: static const int edit_query = 0x0102037b;
        public: static const int editable = 0x01020207;
        public: static const int edittext_container = 0x01020352;
        public: static const int eight = 0x010203c0;
        public: static const int email = 0x0102009c;
        public: static const int empty = 0x01020004;
        public: static const int end = 0x0102005c;
        public: static const int enter_pin_section = 0x010203ca;
        public: static const int expandChallengeHandle = 0x01020269;
        public: static const int expand_activities_button = 0x010202b8;
        public: static const int expanded_menu = 0x010202f2;
        public: static const int expires_on = 0x010203a3;
        public: static const int expires_on_header = 0x010203a2;
        /**  The part of the UI shown by an
       {@link android.inputmethodservice.InputMethodService} that contains the
       views for interacting with the user in extraction mode. 
         */
        public: static const int extractArea = 0x0102001c;
        public: static const int fade_in = 0x0102023a;
        public: static const int fade_in_out = 0x0102023b;
        public: static const int fade_out = 0x0102023c;
        public: static const int feedbackAllMask = 0x010201e7;
        public: static const int feedbackAudible = 0x010201e8;
        public: static const int feedbackGeneric = 0x010201e9;
        public: static const int feedbackHaptic = 0x010201ea;
        public: static const int feedbackSpoken = 0x010201eb;
        public: static const int feedbackVisual = 0x010201ec;
        public: static const int ffwd = 0x01020320;
        public: static const int fill = 0x01020095;
        public: static const int fillInIntent = 0x01020039;
        public: static const int fill_horizontal = 0x01020096;
        public: static const int fill_parent = 0x010201d6;
        public: static const int fill_vertical = 0x01020097;
        public: static const int find = 0x010203da;
        public: static const int find_next = 0x010203dd;
        public: static const int find_prev = 0x010203dc;
        public: static const int finger = 0x0102029b;
        public: static const int fingerprints = 0x010203a4;
        public: static const int firstStrong = 0x010201bc;
        public: static const int fitCenter = 0x010201ff;
        public: static const int fitEnd = 0x01020200;
        public: static const int fitStart = 0x01020201;
        public: static const int fitXY = 0x01020202;
        public: static const int five = 0x010203bd;
        public: static const int flagDefault = 0x010201ed;
        public: static const int flagForceAscii = 0x01020088;
        public: static const int flagIncludeNotImportantViews = 0x010201ee;
        public: static const int flagNavigateNext = 0x01020089;
        public: static const int flagNavigatePrevious = 0x0102008a;
        public: static const int flagNoAccessoryAction = 0x0102008b;
        public: static const int flagNoEnterAction = 0x0102008c;
        public: static const int flagNoExtractUi = 0x0102008d;
        public: static const int flagNoFullscreen = 0x0102008e;
        public: static const int flagReportViewIds = 0x010201ef;
        public: static const int flagRequestEnhancedWebAccessibility = 0x010201f0;
        public: static const int flagRequestFilterKeyEvents = 0x010201f1;
        public: static const int flagRequestTouchExplorationMode = 0x010201f2;
        public: static const int flagRetrieveInteractiveWindows = 0x010201f3;
        public: static const int floatType = 0x01020241;
        public: static const int floating = 0x01020054;
        public: static const int fontScale = 0x0102028e;
        public: static const int four = 0x010203bc;
        public: static const int fullSensor = 0x01020280;
        public: static const int fullUser = 0x01020281;
        public: static const int fullscreenArea = 0x0102030b;
        public: static const int gone = 0x010201a7;
        public: static const int grant_credentials_permission_message_footer = 0x010202fd;
        public: static const int grant_credentials_permission_message_header = 0x010202f7;
        public: static const int gravity = 0x010201bd;
        public: static const int hard_keyboard_section = 0x0102030f;
        public: static const int hard_keyboard_switch = 0x01020310;
        public: static const int hardware = 0x010201b5;
        public: static const int hdpi = 0x010202b0;
        public: static const int headers = 0x01020353;
        public: static const int hidden = 0x01020271;
        public: static const int high = 0x010201af;
        public: static const int hint = 0x01020005;
        public: static const int home = 0x0102002c;
        public: static const int homeAsUp = 0x01020261;
        public: static const int home_screen = 0x01020258;
        public: static const int horizontal = 0x0102009f;
        public: static const int hour = 0x010203b5;
        public: static const int hours = 0x010203ae;
        public: static const int icon = 0x01020006;
        public: static const int icon1 = 0x01020007;
        public: static const int icon2 = 0x01020008;
        public: static const int icon_badge = 0x01020031;
        public: static const int icon_frame = 0x01020351;
        public: static const int icon_group = 0x01020330;
        public: static const int icon_menu = 0x01020309;
        public: static const int icon_menu_presenter = 0x0102003d;
        public: static const int ifContentScrolls = 0x010201b2;
        public: static const int ifRoom = 0x01020251;
        public: static const int image = 0x010202b9;
        public: static const int inbox_end_pad = 0x01020340;
        public: static const int inbox_more = 0x0102033f;
        public: static const int inbox_text0 = 0x01020338;
        public: static const int inbox_text1 = 0x01020339;
        public: static const int inbox_text2 = 0x0102033a;
        public: static const int inbox_text3 = 0x0102033b;
        public: static const int inbox_text4 = 0x0102033c;
        public: static const int inbox_text5 = 0x0102033d;
        public: static const int inbox_text6 = 0x0102033e;
        public: static const int increment = 0x01020347;
        public: static const int index = 0x0102032a;
        public: static const int infinite = 0x01020230;
        public: static const int info = 0x01020345;
        public: static const int inherit = 0x010201b7;
        public: static const int input = 0x01020009;
        /**  The part of the UI shown by an
       {@link android.inputmethodservice.InputMethodService} that contains the
       views for entering text using the screen. 
         */
        public: static const int inputArea = 0x0102001e;
        public: static const int inputExtractAccessories = 0x0102030c;
        public: static const int inputExtractAction = 0x0102030d;
        public: static const int inputExtractEditButton = 0x0102030e;
        /**  View ID of the text editor inside of an extracted text layout. 
         */
        public: static const int inputExtractEditText = 0x01020025;
        public: static const int insideInset = 0x010201aa;
        public: static const int insideOverlay = 0x010201ab;
        public: static const int intType = 0x01020242;
        public: static const int integer = 0x0102020a;
        public: static const int internalEmpty = 0x0102031a;
        public: static const int internalOnly = 0x010202a6;
        public: static const int intoExisting = 0x010202ac;
        public: static const int invisible = 0x010201a8;
        public: static const int issued_on = 0x010203a1;
        public: static const int issued_on_header = 0x010203a0;
        public: static const int issued_to_header = 0x01020390;
        public: static const int italic = 0x0102005b;
        public: static const int keyboard = 0x0102028f;
        public: static const int keyboardHidden = 0x01020290;
        /**  View ID of the {@link android.inputmethodservice.KeyboardView} within
        an input method's input area. 
         */
        public: static const int keyboardView = 0x01020026;
        public: static const int keyguard = 0x01020259;
        public: static const int keyguard_click_area = 0x010202f0;
        public: static const int keyguard_message_area = 0x010202f1;
        public: static const int label = 0x01020313;
        public: static const int landscape = 0x01020282;
        public: static const int large = 0x010202ad;
        public: static const int launchRecognizer = 0x01020249;
        public: static const int launchWebSearch = 0x0102024a;
        public: static const int layoutDirection = 0x01020291;
        public: static const int ldpi = 0x010202b1;
        public: static const int left = 0x01020098;
        public: static const int leftPanel = 0x010202c8;
        public: static const int leftSpacer = 0x010202c2;
        public: static const int left_icon = 0x01020032;
        public: static const int left_to_right = 0x01020235;
        public: static const int line = 0x0102021d;
        public: static const int line1 = 0x01020342;
        public: static const int line3 = 0x01020344;
        public: static const int linear = 0x01020221;
        public: static const int list = 0x0102000a;
        public: static const int listContainer = 0x01020319;
        public: static const int listMode = 0x0102025e;
        public: static const int list_footer = 0x01020354;
        public: static const int list_item = 0x010202bb;
        public: static const int list_menu_presenter = 0x0102003e;
        public: static const int liveAudio = 0x01020266;
        public: static const int locale = 0x010201b8;
        public: static const int lock_screen = 0x01020036;
        public: static const int lock_to_app_checkbox = 0x0102031c;
        public: static const int locked = 0x01020283;
        public: static const int low = 0x010201b0;
        public: static const int ltr = 0x010201b9;
        public: static const int main = 0x010203c3;
        public: static const int map = 0x0102009d;
        public: static const int marquee = 0x0102005d;
        public: static const int marquee_forever = 0x0102020f;
        public: static const int mask = 0x0102002e;
        public: static const int match_parent = 0x010201d7;
        public: static const int matches = 0x010203c9;
        public: static const int matrix = 0x01020203;
        public: static const int mcc = 0x01020292;
        public: static const int mdpi = 0x010202b2;
        public: static const int media_actions = 0x01020335;
        public: static const int media_route_control_frame = 0x01020328;
        public: static const int media_route_disconnect_button = 0x01020329;
        public: static const int media_route_extended_settings_button = 0x01020325;
        public: static const int media_route_list = 0x01020324;
        public: static const int media_route_volume_layout = 0x01020326;
        public: static const int media_route_volume_slider = 0x01020327;
        public: static const int mediacontroller_progress = 0x01020323;
        public: static const int menu = 0x01020033;
        public: static const int message = 0x0102000b;
        public: static const int middle = 0x0102005e;
        public: static const int minute = 0x010203b6;
        public: static const int minutes = 0x010203b0;
        public: static const int mirror = 0x0102022a;
        public: static const int miter = 0x0102022f;
        public: static const int mnc = 0x01020293;
        public: static const int modeLarge = 0x01020219;
        public: static const int modeMedium = 0x0102021a;
        public: static const int modeSmall = 0x0102021b;
        public: static const int mode_in = 0x0102023d;
        public: static const int mode_normal = 0x010203d4;
        public: static const int mode_out = 0x0102023e;
        public: static const int monospace = 0x01020056;
        public: static const int month = 0x010202e4;
        public: static const int month_name = 0x010202dc;
        public: static const int month_text_view = 0x010203cd;
        public: static const int mount_button = 0x010203c5;
        public: static const int multi-select = 0x01020272;
        public: static const int multiple = 0x01020217;
        public: static const int multipleChoice = 0x010201f6;
        public: static const int multipleChoiceModal = 0x010201f7;
        public: static const int multiply = 0x010201c8;
        public: static const int music = 0x01020256;
        public: static const int name = 0x010203cc;
        public: static const int navigation = 0x01020294;
        public: static const int navigationBarBackground = 0x01020030;
        public: static const int nest = 0x01020227;
        public: static const int never = 0x010201b3;
        public: static const int new_app_action = 0x01020307;
        public: static const int new_app_description = 0x01020308;
        public: static const int new_app_icon = 0x01020306;
        public: static const int next = 0x01020321;
        public: static const int next_button = 0x01020359;
        public: static const int nine = 0x010203c1;
        public: static const int no = 0x010201c2;
        public: static const int noHideDescendants = 0x010201c3;
        public: static const int no_applications_message = 0x0102035d;
        public: static const int no_permissions = 0x010202d9;
        public: static const int nokeys = 0x0102029f;
        public: static const int nonav = 0x010202a3;
        public: static const int none = 0x0102005f;
        public: static const int normal = 0x01020057;
        public: static const int nosensor = 0x01020284;
        public: static const int not_pressed = 0x010203d7;
        public: static const int notification = 0x01020254;
        public: static const int notouch = 0x0102029c;
        public: static const int number = 0x01020063;
        public: static const int numberDecimal = 0x01020064;
        public: static const int numberPassword = 0x01020065;
        public: static const int numberSigned = 0x01020066;
        public: static const int numberpicker_input = 0x01020348;
        public: static const int off = 0x0102034e;
        public: static const int ok = 0x0102030a;
        public: static const int old_app_action = 0x01020303;
        public: static const int old_app_description = 0x01020304;
        public: static const int old_app_icon = 0x01020302;
        public: static const int on = 0x010203d5;
        public: static const int one = 0x010203b9;
        public: static const int oneLine = 0x01020215;
        public: static const int opaque = 0x01020224;
        public: static const int opticalBounds = 0x010201d5;
        public: static const int option1 = 0x010202f4;
        public: static const int option2 = 0x010202f5;
        public: static const int option3 = 0x010202f6;
        public: static const int orientation = 0x01020295;
        public: static const int original_app_icon = 0x01020316;
        public: static const int original_message = 0x01020317;
        public: static const int outsideInset = 0x010201ac;
        public: static const int outsideOverlay = 0x010201ad;
        public: static const int oval = 0x0102021e;
        public: static const int overflow_divider = 0x01020337;
        public: static const int overflow_menu_presenter = 0x01020040;
        public: static const int overlay_display_window_texture = 0x0102034a;
        public: static const int overlay_display_window_title = 0x0102034b;
        public: static const int package_icon = 0x0102034c;
        public: static const int package_label = 0x0102034d;
        public: static const int packages_list = 0x010202f8;
        public: static const int paddedBounds = 0x010201ce;
        public: static const int pageDeleteDropTarget = 0x0102026a;
        public: static const int parentMatrix = 0x01020047;
        public: static const int parentPanel = 0x010202bc;
        /**  Context menu ID for the "Paste" menu item to copy the current contents
       of the clipboard into the text view. 
         */
        public: static const int paste = 0x01020022;
        public: static const int pathType = 0x01020243;
        public: static const int pause = 0x0102031f;
        public: static const int perm_icon = 0x010202d3;
        public: static const int perm_money_icon = 0x010202d5;
        public: static const int perm_money_label = 0x010202d6;
        public: static const int perm_name = 0x010202d4;
        public: static const int permission_group = 0x010202d7;
        public: static const int permission_icon = 0x010202f9;
        public: static const int permission_list = 0x010202d8;
        public: static const int perms_list = 0x010202da;
        public: static const int persistAcrossReboots = 0x010202a9;
        public: static const int persistNever = 0x010202aa;
        public: static const int persistRootOnly = 0x010202ab;
        public: static const int personalInfo = 0x01020279;
        public: static const int phone = 0x01020067;
        public: static const int pickers = 0x010202e3;
        public: static const int pin_cancel_button = 0x01020369;
        public: static const int pin_confirm_text = 0x0102036d;
        public: static const int pin_error_message = 0x01020368;
        public: static const int pin_message = 0x0102036b;
        public: static const int pin_new_text = 0x0102036c;
        public: static const int pin_ok_button = 0x0102036a;
        public: static const int pin_text = 0x01020367;
        public: static const int placeholder = 0x0102038e;
        public: static const int polite = 0x010201c6;
        public: static const int popup_submenu_presenter = 0x01020041;
        public: static const int portrait = 0x01020285;
        public: static const int preferExternal = 0x010202a7;
        public: static const int prefs = 0x01020356;
        public: static const int prefs_frame = 0x01020355;
        public: static const int pressed = 0x010203d6;
        public: static const int prev = 0x0102031d;
        public: static const int primary = 0x0102000c;
        public: static const int profile_badge_large_template = 0x01020333;
        public: static const int profile_badge_line2 = 0x01020343;
        public: static const int profile_badge_line3 = 0x01020346;
        public: static const int progress = 0x0102000d;
        public: static const int progressContainer = 0x01020318;
        public: static const int progress_circular = 0x01020371;
        public: static const int progress_horizontal = 0x01020372;
        public: static const int progress_number = 0x010202cb;
        public: static const int progress_percent = 0x010202ca;
        public: static const int queryRewriteFromData = 0x01020245;
        public: static const int queryRewriteFromText = 0x01020246;
        public: static const int qwerty = 0x010202a0;
        public: static const int radial = 0x01020222;
        public: static const int radial_picker = 0x010203b3;
        public: static const int radio = 0x01020311;
        public: static const int radio_power = 0x01020350;
        public: static const int random = 0x01020233;
        public: static const int reask_hint = 0x010202d0;
        public: static const int rectangle = 0x0102021f;
        public: static const int repeat = 0x01020206;
        public: static const int replace_app_icon = 0x01020314;
        public: static const int replace_message = 0x01020315;
        public: static const int resolver_list = 0x01020364;
        public: static const int restart = 0x01020231;
        public: static const int reverse = 0x01020232;
        public: static const int reverseLandscape = 0x01020286;
        public: static const int reversePortrait = 0x01020287;
        public: static const int rew = 0x0102031e;
        public: static const int right = 0x01020099;
        public: static const int rightSpacer = 0x010202c3;
        public: static const int right_container = 0x01020370;
        public: static const int right_icon = 0x01020034;
        public: static const int right_to_left = 0x01020236;
        public: static const int ring = 0x01020220;
        public: static const int ringtone = 0x01020255;
        public: static const int round = 0x0102022c;
        public: static const int row = 0x01020239;
        public: static const int rowTypeId = 0x0102003a;
        public: static const int rtl = 0x010201ba;
        public: static const int sans = 0x01020058;
        public: static const int scene_layoutid_cache = 0x01020044;
        public: static const int screen = 0x010201c9;
        public: static const int screenLayout = 0x01020296;
        public: static const int screenSize = 0x01020297;
        public: static const int scrim = 0x0102026b;
        public: static const int scrollView = 0x010202c5;
        public: static const int scrolling = 0x010201d0;
        public: static const int search_app_icon = 0x01020379;
        public: static const int search_badge = 0x0102037c;
        public: static const int search_bar = 0x01020378;
        public: static const int search_button = 0x0102037d;
        public: static const int search_close_btn = 0x01020382;
        public: static const int search_edit_frame = 0x0102037e;
        public: static const int search_go_btn = 0x01020384;
        public: static const int search_mag_icon = 0x0102037f;
        public: static const int search_plate = 0x01020380;
        public: static const int search_src_text = 0x01020381;
        public: static const int search_view = 0x0102037a;
        public: static const int search_voice_btn = 0x01020385;
        public: static const int searchbox = 0x0102025a;
        public: static const int secondary = 0x0102024e;
        public: static const int secondaryProgress = 0x0102000f;
        public: static const int seekbar = 0x0102035a;
        /**  Context menu ID for the "Select All" menu item to select all text
       in a text view. 
         */
        public: static const int selectAll = 0x0102001f;
        /**  Context menu ID for the "Select text..." menu item to switch to text
       selection context mode in text views. 
         */
        public: static const int selectTextMode = 0x0102002d;
        public: static const int select_all = 0x010203d8;
        public: static const int select_dialog_listview = 0x01020386;
        public: static const int selectedIcon = 0x0102000e;
        public: static const int sensor = 0x01020288;
        public: static const int sensorLandscape = 0x01020289;
        public: static const int sensorPortrait = 0x0102028a;
        public: static const int sentences = 0x0102020d;
        public: static const int separator = 0x010203af;
        public: static const int sequential = 0x0102023f;
        public: static const int sequentially = 0x01020244;
        public: static const int serial_number = 0x01020398;
        public: static const int serial_number_header = 0x01020397;
        public: static const int serif = 0x01020059;
        public: static const int seven = 0x010203bf;
        public: static const int sha1_fingerprint = 0x010203a8;
        public: static const int sha1_fingerprint_header = 0x010203a7;
        public: static const int sha256_fingerprint = 0x010203a6;
        public: static const int sha256_fingerprint_header = 0x010203a5;
        public: static const int share = 0x010203d9;
        public: static const int shortcut = 0x0102031b;
        public: static const int showCustom = 0x01020262;
        public: static const int showHome = 0x01020263;
        public: static const int showSearchIconAsBadge = 0x01020247;
        public: static const int showSearchLabelAsBadge = 0x01020248;
        public: static const int showTitle = 0x01020264;
        public: static const int showVoiceSearchButton = 0x0102024b;
        public: static const int signature = 0x01020277;
        public: static const int signatureOrSystem = 0x01020278;
        public: static const int signed_ = 0x0102020b;
        public: static const int silent = 0x0102034f;
        public: static const int single = 0x01020218;
        public: static const int singleChoice = 0x010201f8;
        public: static const int singleInstance = 0x0102027b;
        public: static const int singleTask = 0x0102027c;
        public: static const int singleTop = 0x0102027d;
        public: static const int six = 0x010203be;
        public: static const int skip_button = 0x01020358;
        public: static const int small = 0x010202ae;
        public: static const int smallIcon = 0x01020038;
        public: static const int smallestScreenSize = 0x01020298;
        public: static const int sms_short_code_coins_icon = 0x01020389;
        public: static const int sms_short_code_confirm_message = 0x01020387;
        public: static const int sms_short_code_detail_layout = 0x01020388;
        public: static const int sms_short_code_detail_message = 0x0102038a;
        public: static const int sms_short_code_remember_choice_checkbox = 0x0102038b;
        public: static const int sms_short_code_remember_choice_text = 0x0102038c;
        public: static const int sms_short_code_remember_undo_instruction = 0x0102038d;
        public: static const int software = 0x010201b6;
        public: static const int spacingWidth = 0x010201fa;
        public: static const int spacingWidthUniform = 0x010201fb;
        public: static const int spannable = 0x01020208;
        public: static const int spinner = 0x01020213;
        public: static const int splashscreen = 0x010203c8;
        public: static const int splitActionBarWhenNarrow = 0x010202a8;
        public: static const int split_action_bar = 0x01020377;
        public: static const int square = 0x0102022d;
        public: static const int src_atop = 0x010201ca;
        public: static const int src_in = 0x010201cb;
        public: static const int src_over = 0x010201cc;
        public: static const int stack = 0x01020228;
        public: static const int standard = 0x0102027e;
        public: static const int start = 0x01020060;
        /**  Menu ID to perform a "start selecting text" operation. 
         */
        public: static const int startSelectingText = 0x01020028;
        public: static const int stateAlwaysHidden = 0x0102004c;
        public: static const int stateAlwaysVisible = 0x0102004d;
        public: static const int stateHidden = 0x0102004e;
        public: static const int stateUnchanged = 0x0102004f;
        public: static const int stateUnspecified = 0x01020050;
        public: static const int stateVisible = 0x01020051;
        public: static const int status = 0x010202f3;
        public: static const int statusBarBackground = 0x0102002f;
        public: static const int status_bar_latest_event_content = 0x01020331;
        /**  Menu ID to perform a "stop selecting text" operation. 
         */
        public: static const int stopSelectingText = 0x01020029;
        public: static const int string = 0x01020273;
        public: static const int stylus = 0x0102029d;
        public: static const int sub_color = 0x010203a9;
        public: static const int sub_name = 0x010203ab;
        public: static const int sub_number = 0x010203ac;
        public: static const int sub_short_number = 0x010203aa;
        public: static const int submit_area = 0x01020383;
        public: static const int summary = 0x01020010;
        public: static const int sweep = 0x01020223;
        /**  Context menu ID for the "Input Method" menu item to being up the
       input method picker dialog, allowing the user to switch to another
       input method. 
         */
        public: static const int switchInputMethod = 0x01020024;
        public: static const int switchWidget = 0x0102035b;
        public: static const int switch_new = 0x01020305;
        public: static const int switch_old = 0x01020301;
        public: static const int system = 0x0102024f;
        public: static const int tabMode = 0x0102025f;
        public: static const int tabcontent = 0x01020011;
        public: static const int tabhost = 0x01020012;
        public: static const int tabs = 0x01020013;
        public: static const int text = 0x01020068;
        public: static const int text1 = 0x01020014;
        public: static const int text2 = 0x01020015;
        public: static const int textAutoComplete = 0x01020069;
        public: static const int textAutoCorrect = 0x0102006a;
        public: static const int textCapCharacters = 0x0102006b;
        public: static const int textCapSentences = 0x0102006c;
        public: static const int textCapWords = 0x0102006d;
        public: static const int textEmailAddress = 0x0102006e;
        public: static const int textEmailSubject = 0x0102006f;
        public: static const int textEnd = 0x010201be;
        public: static const int textFilter = 0x01020070;
        public: static const int textImeMultiLine = 0x01020071;
        public: static const int textLongMessage = 0x01020072;
        public: static const int textMultiLine = 0x01020073;
        public: static const int textNoSuggestions = 0x01020074;
        public: static const int textPassword = 0x01020075;
        public: static const int textPersonName = 0x01020076;
        public: static const int textPhonetic = 0x01020077;
        public: static const int textPostalAddress = 0x01020078;
        public: static const int textShortMessage = 0x01020079;
        public: static const int textSpacerNoButtons = 0x010202c9;
        public: static const int textStart = 0x010201bf;
        public: static const int textUri = 0x0102007a;
        public: static const int textVisiblePassword = 0x0102007b;
        public: static const int textWebEditText = 0x0102007c;
        public: static const int textWebEmailAddress = 0x0102007d;
        public: static const int textWebPassword = 0x0102007e;
        public: static const int three = 0x010203bb;
        public: static const int time = 0x0102007f;
        public: static const int timePicker = 0x010203b2;
        public: static const int timePickerLayout = 0x010203b4;
        public: static const int time_current = 0x01020322;
        public: static const int time_header = 0x010203ad;
        public: static const int title = 0x01020016;
        public: static const int titleDivider = 0x010202c0;
        public: static const int titleDividerTop = 0x010202c7;
        public: static const int title_container = 0x01020035;
        public: static const int title_separator = 0x0102038f;
        public: static const int title_template = 0x010202be;
        public: static const int to_common = 0x01020392;
        public: static const int to_common_header = 0x01020391;
        public: static const int to_org = 0x01020394;
        public: static const int to_org_header = 0x01020393;
        public: static const int to_org_unit = 0x01020396;
        public: static const int to_org_unit_header = 0x01020395;
        public: static const int together = 0x01020240;
        public: static const int toggle = 0x01020017;
        public: static const int top = 0x0102009a;
        public: static const int topPanel = 0x010202bd;
        public: static const int top_to_bottom = 0x01020237;
        public: static const int touchscreen = 0x01020299;
        public: static const int trackball = 0x010202a4;
        public: static const int transitionPosition = 0x01020045;
        public: static const int transitionTransform = 0x01020046;
        public: static const int translucent = 0x01020225;
        public: static const int transparent = 0x01020226;
        public: static const int twelvekey = 0x010202a1;
        public: static const int two = 0x010203ba;
        public: static const int twoLine = 0x01020216;
        public: static const int typeAllMask = 0x010201d8;
        public: static const int typeNotificationStateChanged = 0x010201d9;
        public: static const int typeTouchExplorationGestureEnd = 0x010201da;
        public: static const int typeTouchExplorationGestureStart = 0x010201db;
        public: static const int typeViewClicked = 0x010201dc;
        public: static const int typeViewFocused = 0x010201dd;
        public: static const int typeViewHoverEnter = 0x010201de;
        public: static const int typeViewHoverExit = 0x010201df;
        public: static const int typeViewLongClicked = 0x010201e0;
        public: static const int typeViewScrolled = 0x010201e1;
        public: static const int typeViewSelected = 0x010201e2;
        public: static const int typeViewTextChanged = 0x010201e3;
        public: static const int typeViewTextSelectionChanged = 0x010201e4;
        public: static const int typeWindowContentChanged = 0x010201e5;
        public: static const int typeWindowStateChanged = 0x010201e6;
        public: static const int uiMode = 0x0102029a;
        public: static const int unbounded = 0x0102025b;
        public: static const int undefined = 0x0102029e;
        public: static const int unmount_button = 0x010203c6;
        public: static const int unspecified = 0x0102028b;
        public: static const int up = 0x0102003b;
        public: static const int useLogo = 0x01020265;
        public: static const int user = 0x01020267;
        public: static const int userIdentification = 0x0102025c;
        public: static const int userLandscape = 0x0102028c;
        public: static const int userPortrait = 0x0102028d;
        public: static const int userSwitcher = 0x0102026c;
        public: static const int validity_header = 0x0102039f;
        public: static const int value = 0x01020312;
        public: static const int vertical = 0x010200a0;
        public: static const int viewEnd = 0x010201c0;
        public: static const int viewStart = 0x010201c1;
        public: static const int visible = 0x010201a9;
        public: static const int voice = 0x01020257;
        public: static const int voiceTrigger = 0x0102025d;
        public: static const int web = 0x0102009e;
        public: static const int websearch = 0x010203db;
        public: static const int webview = 0x010203c7;
        public: static const int wheel = 0x010202a5;
        public: static const int widget = 0x0102026d;
        public: static const int widget_frame = 0x01020018;
        public: static const int widgets = 0x0102026e;
        public: static const int wifi_p2p_wps_pin = 0x010203cb;
        public: static const int withText = 0x01020252;
        public: static const int words = 0x0102020e;
        public: static const int wrap_content = 0x01020055;
        public: static const int xhdpi = 0x010202b3;
        public: static const int xlarge = 0x010202af;
        public: static const int year = 0x010202e6;
        public: static const int yes = 0x010201c4;
        public: static const int zero = 0x010203c2;
        public: static const int zoomControls = 0x010203d0;
        public: static const int zoomIn = 0x010203d2;
        public: static const int zoomMagnify = 0x010203d3;
        public: static const int zoomOut = 0x010203d1;
        public: static const int zoom_fit_page = 0x010203ce;
        public: static const int zoom_page_overview = 0x010203cf;
    };
    public: class integer {
        public: static const int button_pressed_animation_delay = 0x010e0091;
        public: static const int button_pressed_animation_duration = 0x010e0090;
        /**  Max number of downloads allowed to proceed concurrently 
         */
        public: static const int config_MaxConcurrentDownloadsAllowed = 0x010e005e;
        public: static const int config_activityDefaultDur = 0x010e0007;
        /**  The duration (in milliseconds) of the activity open/close and fragment open/close animations. 
         */
        public: static const int config_activityShortDur = 0x010e0006;
        /**  Max number of advertisers supported by bluetooth controller. 0 if the
         device does not support multiple advertisement
 Max number of advertisers supported by bluetooth controller. 0 if the
         device does not support multiple advertisement
         */
        public: static const int config_bluetooth_max_advertisers = 0x010e0054;
        /**  Max number of scan filters supported by blutooth controller. 0 if the
         device does not support hardware scan filters
 Max number of scan filters supported by blutooth controller. 0 if the
         device does not support hardware scan filters
         */
        public: static const int config_bluetooth_max_scan_filters = 0x010e0053;
        /**  Control whether being in the car dock (and powered) always
         keeps the screen on.  By default it stays on when plugged in to
         AC.  0 will not keep it on; or together 1 to stay on when plugged
         in to AC and 2 to stay on when plugged in to USB.  (So 3 for both.) 
         */
        public: static const int config_carDockKeepsScreenOn = 0x010e0038;
        /**  Car dock behavior 
 The number of degrees to rotate the display when the device is in a car dock.
         A value of -1 means no change in orientation by default. 
         */
        public: static const int config_carDockRotation = 0x010e0037;
        /**  Sprint need a 70 ms delay for 3way call 
 Sprint need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 Sprint need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 USC need a 70 ms delay for 3way call 
 Sprint need a 70 ms delay for 3way call 
 Sprint need a 70 ms delay for 3way call 
         */
        public: static const int config_cdma_3waycall_flash_delay = 0x010e0075;
        /**  Display low battery warning when battery level dips to this value.
         Also, the battery stats are flushed to disk when we hit this level.  
         */
        public: static const int config_criticalBatteryWarningLevel = 0x010e003d;
        /**  When a database query is executed, the results retuned are paginated
         in pages of size (in KB) indicated by this value 
         */
        public: static const int config_cursorWindowSize = 0x010e0060;
        /**  The default reduced-datarate notification mask 
 2 means give warning 
         */
        public: static const int config_datause_notification_type = 0x010e0058;
        /**  The default data-use polling period. 
         */
        public: static const int config_datause_polling_period_sec = 0x010e0055;
        /**  The default data-use threshold in bytes. 0 disables
         */
        public: static const int config_datause_threshold_bytes = 0x010e0056;
        /**  The default reduced-datarate value in kilobits per sec 
         */
        public: static const int config_datause_throttle_kbitsps = 0x010e0057;
        /**  Default LED off time for notification LED in milliseconds. 
 Default LED off time for notification LED in milliseconds. 
         */
        public: static const int config_defaultNotificationLedOff = 0x010e0042;
        /**  Default LED on time for notification LED in milliseconds. 
 Default LED on time for notification LED in milliseconds. 
         */
        public: static const int config_defaultNotificationLedOn = 0x010e0041;
        /**  Control the default UI mode type to use when there is no other type override
         happening.  One of the following values (See Configuration.java):
             1  UI_MODE_TYPE_NORMAL
             4  UI_MODE_TYPE_TELEVISION
             5  UI_MODE_TYPE_APPLIANCE
             6  UI_MODE_TYPE_WATCH
         Any other values will have surprising consequences. 
         */
        public: static const int config_defaultUiModeType = 0x010e003a;
        /**  Control whether being in the desk dock (and powered) always
         keeps the screen on.  By default it stays on when plugged in to
         AC.  0 will not keep it on; or together 1 to stay on when plugged
         in to AC and 2 to stay on when plugged in to USB.  (So 3 for both.) 
         */
        public: static const int config_deskDockKeepsScreenOn = 0x010e0036;
        /**  Desk dock behavior 
 The number of degrees to rotate the display when the device is in a desk dock.
         A value of -1 means no change in orientation by default. 
         */
        public: static const int config_deskDockRotation = 0x010e0035;
        /**  Control the behavior when the user double-taps the home button.
            0 - Nothing
            1 - Recent apps view in SystemUI
         This needs to match the constants in
         policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
    
         */
        public: static const int config_doubleTapOnHomeBehavior = 0x010e004a;
        /**  When the free space available in DownloadManager's data dir falls
         below the percentage value specified by this param, DownloadManager
         starts removing files to try to make percentage of available
         free space above this threshold value. 
         */
        public: static const int config_downloadDataDirLowSpaceThreshold = 0x010e005f;
        /**  Max space (in MB) allocated to DownloadManager to store the downloaded
         files if they are to be stored in DownloadManager's data dir,
         which typically is /data/data/com.android.providers.downloads/files 
         */
        public: static const int config_downloadDataDirSize = 0x010e005d;
        /**  If the battery level drops by this percentage and the user activity timeout
         has expired, then assume the device is receiving insufficient current to charge
         effectively and terminate the dream.  Use -1 to disable this safety feature.  
         */
        public: static const int config_dreamsBatteryLevelDrainCutoff = 0x010e0069;
        /**  Minimum battery level to allow dreaming when not powered.
         Use -1 to disable this safety feature. 
         */
        public: static const int config_dreamsBatteryLevelMinimumWhenNotPowered = 0x010e0068;
        /**  Minimum battery level to allow dreaming when powered.
         Use -1 to disable this safety feature. 
         */
        public: static const int config_dreamsBatteryLevelMinimumWhenPowered = 0x010e0067;
        /**  Device configuration setting the /proc/sys/vm/extra_free_kbytes tunable in the kernel
         (if it exists).  A high value will increase the amount of memory that the kernel
         tries to keep free, reducing allocation time and causing the lowmemorykiller to kill
         earlier.  A low value allows more memory to be used by processes but may cause more
         allocations to block waiting on disk I/O or lowmemorykiller.  Overrides the default
         value chosen by ActivityManager based on screen size.  0 prevents keeping any extra
         memory over what the kernel keeps by default.  -1 keeps the default. 
         */
        public: static const int config_extraFreeKbytesAbsolute = 0x010e000a;
        /**  Device configuration adjusting the /proc/sys/vm/extra_free_kbytes tunable in the kernel
         (if it exists).  0 uses the default value chosen by ActivityManager.  A positive value
         will increase the amount of memory that the kernel tries to keep free, reducing
         allocation time and causing the lowmemorykiller to kill earlier.  A negative value
         allows more memory to be used by processes but may cause more allocations to block
         waiting on disk I/O or lowmemorykiller.  Directly added to the default value chosen by
         ActivityManager based on screen size. 
         */
        public: static const int config_extraFreeKbytesAdjust = 0x010e000b;
        /**  Amount of time in ms the user needs to press the relevant key to bring up the global actions dialog 
         */
        public: static const int config_globalActionsKeyTimeout = 0x010e006c;
        /**  Threshold (in ms) under which a screen off / screen on will be considered a reset of the
         immersive mode confirmation prompt.
         */
        public: static const int config_immersive_mode_confirmation_panic = 0x010e0072;
        /**  Indicate whether the lid state impacts the accessibility of
         the physical keyboard.  0 means it doesn't, 1 means it is accessible
         when the lid is open, 2 means it is accessible when the lid is
         closed.  The default is 0. 
         */
        public: static const int config_lidKeyboardAccessibility = 0x010e0033;
        /**  Indicate whether the lid state impacts the accessibility of
         the navigation buttons.  0 means it doesn't, 1 means it is accessible
         when the lid is open, 2 means it is accessible when the lid is
         closed.  The default is 0. 
         */
        public: static const int config_lidNavigationAccessibility = 0x010e0034;
        /**  Lid switch behavior 
 The number of degrees to rotate the display when the keyboard is open.
         A value of -1 means no change in orientation by default. 
         */
        public: static const int config_lidOpenRotation = 0x010e0032;
        /**  Amount of time it takes for the light sensor to warm up in milliseconds.
         For this time after the screen turns on, the Power Manager
         will not debounce light sensor readings 
         */
        public: static const int config_lightSensorWarmupTime = 0x010e0051;
        /**  The attenuation in dB applied to the lock/unlock sounds. 
         */
        public: static const int config_lockSoundVolumeDb = 0x010e0005;
        /**  The duration (in milliseconds) of a long animation. 
         */
        public: static const int config_longAnimTime = 0x010e0002;
        /**  Control the behavior when the user long presses the home button.
            0 - Nothing
            1 - Recent apps view in SystemUI
            2 - Launch assist intent
         This needs to match the constants in
         policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
    
 see comment in values/config.xml 
 see comment in values/config.xml 
         */
        public: static const int config_longPressOnHomeBehavior = 0x010e0049;
        /**  Control the behavior when the user long presses the power button.
            0 - Nothing
            1 - Global actions menu
            2 - Power off (with confirmation)
    
         */
        public: static const int config_longPressOnPowerBehavior = 0x010e003b;
        /**  Close low battery warning when battery level reaches the lowBatteryWarningLevel
         plus this 
         */
        public: static const int config_lowBatteryCloseWarningBump = 0x010e0040;
        /**  Display low battery warning when battery level dips to this value 
         */
        public: static const int config_lowBatteryWarningLevel = 0x010e003f;
        /**  Device configuration setting the minfree tunable in the lowmemorykiller in the kernel.
         A high value will cause the lowmemorykiller to fire earlier, keeping more memory
         in the file cache and preventing I/O thrashing, but allowing fewer processes to
         stay in memory.  A low value will keep more processes in memory but may cause
         thrashing if set too low.  Overrides the default value chosen by ActivityManager
         based on screen size and total memory for the largest lowmemorykiller bucket, and
         scaled proportionally to the smaller buckets.  -1 keeps the default. 
         */
        public: static const int config_lowMemoryKillerMinFreeKbytesAbsolute = 0x010e0008;
        /**  Device configuration adjusting the minfree tunable in the lowmemorykiller in the
         kernel.  A high value will cause the lowmemorykiller to fire earlier, keeping more
         memory in the file cache and preventing I/O thrashing, but allowing fewer processes
         to stay in memory.  A low value will keep more processes in memory but may cause
         thrashing if set too low.  Directly added to the default value chosen by
         ActivityManager based on screen size and total memory for the largest lowmemorykiller
         bucket, and scaled proportionally to the smaller buckets. 0 keeps the default. 
         */
        public: static const int config_lowMemoryKillerMinFreeKbytesAdjust = 0x010e0009;
        /**  Maximum number of grid columns permitted in the ResolverActivity
         used for picking activities to handle an intent. 
 Maximum number of grid columns permitted in the ResolverActivity
         used for picking activities to handle an intent. 
 Maximum number of grid columns permitted in the ResolverActivity
         used for picking activities to handle an intent. 
         */
        public: static const int config_maxResolverActivityColumns = 0x010e006d;
        /**  Max number of Bluetooth tethering connections allowed. If this is
         updated config_tether_dhcp_range has to be updated appropriately. 
         */
        public: static const int config_max_pan_devices = 0x010e000e;
        /**  User activity timeout: Maximum screen dim duration in milliseconds.

         Sets an upper bound for how long the screen will dim before the device goes
         to sleep when there is no user activity.  The dim duration is subtracted from
         the overall screen off timeout to determine the screen dim timeout.
         When the screen dim timeout expires, the screen will dim, shortly thereafter
         the device will go to sleep.

         If the screen off timeout is very short, the dim duration may be reduced
         proportionally.  See config_maximumScreenDimRatio.

         This value may be zero in which case the screen will not dim before the
         device goes to sleep.
    
         */
        public: static const int config_maximumScreenDimDuration = 0x010e006b;
        /**  The duration (in milliseconds) of a medium-length animation. 
         */
        public: static const int config_mediumAnimTime = 0x010e0001;
        /**  User activity timeout: Minimum screen off timeout in milliseconds.

         Sets a lower bound for the {@link Settings.System#SCREEN_OFF_TIMEOUT} setting
         which determines how soon the device will go to sleep when there is no
         user activity.

         This value must be greater than zero, otherwise the device will immediately
         fall asleep again as soon as it is awoken.
    
         */
        public: static const int config_minimumScreenOffTimeout = 0x010e006a;
        /**  Configure mobile network MTU. The standard default is set here but each carrier
         may have a specific value set in an overlay config.xml file. 
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
 Configure mobile network MTU. Carrier specific value is set here.
    
         */
        public: static const int config_mobile_mtu = 0x010e0070;
        /**   Maximum number of supported users 
  Maximum number of supported users 
         */
        public: static const int config_multiuserMaximumUsers = 0x010e006e;
        /**  Default network policy warning threshold, in megabytes. 
 Default network policy warning threshold, in megabytes. 
         */
        public: static const int config_networkPolicyDefaultWarning = 0x010e0066;
        /**  The maximum duration (in milliseconds) we expect a network transition to take 
         */
        public: static const int config_networkTransitionTimeout = 0x010e000d;
        /**  Number of notifications to keep in the notification service historical archive 
 Number of notifications to keep in the notification service historical archive.
         Reduced intentionally for watches to retain minimal memory footprint 
         */
        public: static const int config_notificationServiceArchiveSize = 0x010e0048;
        /**  Default value for led color when battery is fully charged 
         */
        public: static const int config_notificationsBatteryFullARGB = 0x010e0045;
        /**  Default value for LED off time when the battery is low on charge in miliseconds 
         */
        public: static const int config_notificationsBatteryLedOff = 0x010e0047;
        /**  Default value for LED on time when the battery is low on charge in miliseconds 
         */
        public: static const int config_notificationsBatteryLedOn = 0x010e0046;
        /**  Default value for led color when battery is low on charge 
         */
        public: static const int config_notificationsBatteryLowARGB = 0x010e0043;
        /**  Default value for led color when battery is medium charged 
         */
        public: static const int config_notificationsBatteryMediumARGB = 0x010e0044;
        /**  Normal polling frequency in milliseconds 
         */
        public: static const int config_ntpPollingInterval = 0x010e0061;
        /**  Try-again polling interval in milliseconds, in case the network request failed 
         */
        public: static const int config_ntpPollingIntervalShorter = 0x010e0062;
        /**  Number of times to try again with the shorter interval, before backing
         off until the normal polling interval. A value < 0 indicates infinite. 
         */
        public: static const int config_ntpRetry = 0x010e0063;
        /**  If the time difference is greater than this threshold in milliseconds,
         then update the time. 
         */
        public: static const int config_ntpThreshold = 0x010e0064;
        /**  Timeout to wait for NTP server response. 
         */
        public: static const int config_ntpTimeout = 0x010e0065;
        /**  Override the default detection behavior for the framework method
         android.view.ViewConfiguration#hasPermanentMenuKey().
         Valid settings are:
         0 - No change. Use the default autodetection behavior.
         1 - The device DOES have a permanent menu key; ignore autodetection.
         2 - The device DOES NOT have a permanent menu key; ignore autodetection. 
         */
        public: static const int config_overrideHasPermanentMenuKey = 0x010e0074;
        /**  The duration (in milliseconds) that the radio will scan for a signal
         when there's no network connection. If the scan doesn't timeout, use zero 
         */
        public: static const int config_radioScanningTimeout = 0x010e000c;
        /**  Safe headphone volume index. When music stream volume is below this index
    the SPL on headphone output is compliant to EN 60950 requirements for portable music
    players. 
 reference volume index for music stream to limit headphone volume and display warning 
         */
        public: static const int config_safe_media_volume_index = 0x010e006f;
        /**  Minimum allowable screen brightness to use in a very dark room.
         This value sets the floor for the darkest possible auto-brightness
         adjustment.  It is expected to be somewhat less than the first entry in
         config_autoBrightnessLcdBacklightValues so as to allow the user to have
         some range of adjustment to dim the screen further than usual in very
         dark rooms. The contents of the screen must still be clearly visible
         in darkness (although they may not be visible in a bright room). 
         */
        public: static const int config_screenBrightnessDark = 0x010e0050;
        /**  Screen brightness used to dim the screen when the user activity
         timeout expires.  May be less than the minimum allowed brightness setting
         that can be set by the user. 
 Minimum screen brightness allowed by the power manager. 
         */
        public: static const int config_screenBrightnessDim = 0x010e004f;
        /**  Screen brightness used to dim the screen while dozing in a very low power state.
         May be less than the minimum allowed brightness setting
         that can be set by the user. 
         */
        public: static const int config_screenBrightnessDoze = 0x010e004e;
        /**  Default screen brightness setting.
         Must be in the range specified by minimum and maximum. 
 Default screen brightness setting.
         Must be in the range specified by minimum and maximum. 
         */
        public: static const int config_screenBrightnessSettingDefault = 0x010e004d;
        /**  Maximum screen brightness allowed by the power manager.
         The user is forbidden from setting the brightness above this level. 
         */
        public: static const int config_screenBrightnessSettingMaximum = 0x010e004c;
        /**  Minimum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness below this level. 
 Minimum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness below this level. 
         */
        public: static const int config_screenBrightnessSettingMinimum = 0x010e004b;
        /**  The duration (in milliseconds) of a short animation. 
         */
        public: static const int config_shortAnimTime = 0x010e0000;
        /**  Control the behavior when the user short presses the power button.
            0 - Nothing
            1 - Go to sleep (doze)
            2 - Really go to sleep (don't doze)
            3 - Really go to sleep and go home (don't doze)
    
         */
        public: static const int config_shortPressOnPowerBehavior = 0x010e003c;
        /**  Shutdown if the battery temperature exceeds (this value * 0.1) Celsius. 
 Shutdown if the battery temperature exceeds (this value * 0.1) Celsius. 
         */
        public: static const int config_shutdownBatteryTemperature = 0x010e003e;
        /**  The attenuation in dB applied to the sound effects played
         through AudioManager.playSoundEffect() when no volume is specified. 
         */
        public: static const int config_soundEffectVolumeDb = 0x010e0004;
        /**  Default Gravity setting for the system Toast view. Equivalent to: Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM 
         */
        public: static const int config_toastDefaultGravity = 0x010e0071;
        /**  HDMI behavior 
 The number of degrees to rotate the display when the device has HDMI connected
         but is not in a dock.  A value of -1 means no change in orientation by default.
         Use -1 except on older devices whose Hardware Composer HAL does not
         provide full support for multiple displays.  
         */
        public: static const int config_undockedHdmiRotation = 0x010e0039;
        /**  For some operators, PDU has garbages. To fix it, need to use valid index 
 Sometimes, PDU has garbages. So, need to use valid index 
 Sometimes, PDU has garbages. So, need to use valid index 
         */
        public: static const int config_valid_wappush_index = 0x010e0073;
        /**  Specifies the amount of time to disable virtual keys after the screen is touched
         in order to filter out accidental virtual key presses due to swiping gestures
         or taps near the edge of the display.  May be 0 to disable the feature.
         It is recommended that this value be no more than 250 ms.
         This feature should be disabled for most devices. 
         */
        public: static const int config_virtualKeyQuietTimeMillis = 0x010e0052;
        /**  If Voice Radio Technology is RIL_RADIO_TECHNOLOGY_LTE:14 or
         RIL_RADIO_TECHNOLOGY_UNKNOWN:0 this is the value that should be used instead.
         A configuration value of RIL_RADIO_TECHNOLOGY_UNKNOWN:0 means
         there is no replacement value and that the default assumption
         for phone type (GSM) should be used. 
 If Voice Radio Technology is RIL_RADIO_TECHNOLOGY_LTE:14 this is the value
         that should be used instead. A value of RIL_RADIO_TECHNOLOGY_UNKNOWN:0 means
         there is no replacement value and VoLTE is assumed to be supported

         For sprint we will use RIL_RADIO_TECHNOLOGY_1xRTT:6 
         */
        public: static const int config_volte_replacement_rat = 0x010e0059;
        /**  Wifi driver stop delay, in milliseconds.
         Default value is 2 minutes. 
         */
        public: static const int config_wifi_driver_stop_delay = 0x010e0031;
        public: static const int config_wifi_framework_5GHz_preference_boost_factor = 0x010e0010;
        /**  Integer specifying the basic autojoin parameters 
         */
        public: static const int config_wifi_framework_5GHz_preference_boost_threshold = 0x010e000f;
        public: static const int config_wifi_framework_5GHz_preference_penalty_factor = 0x010e0014;
        public: static const int config_wifi_framework_5GHz_preference_penalty_threshold = 0x010e0013;
        /**  Integer indicating associated full scan backoff, representing a fraction: xx/8 
         */
        public: static const int config_wifi_framework_associated_full_scan_backoff = 0x010e0029;
        /**  Integer indicating associated full scan max interval in milliseconds 
         */
        public: static const int config_wifi_framework_associated_full_scan_max_interval = 0x010e002a;
        /**  Integer indicating associated full scan max total dwell time in milliseconds 
         */
        public: static const int config_wifi_framework_associated_full_scan_max_total_dwell_time = 0x010e002b;
        public: static const int config_wifi_framework_associated_full_scan_rx_packet_threshold = 0x010e0020;
        /**  Integer packet threshold used to allow scan while associated 
         */
        public: static const int config_wifi_framework_associated_full_scan_tx_packet_threshold = 0x010e001f;
        /**  Integer indicating associated full scan max num active channels 
         */
        public: static const int config_wifi_framework_associated_partial_scan_max_num_active_channels = 0x010e002c;
        /**  Integer indicating associated full scan max num passive channels 
         */
        public: static const int config_wifi_framework_associated_partial_scan_max_num_passive_channels = 0x010e002d;
        public: static const int config_wifi_framework_associated_partial_scan_rx_packet_threshold = 0x010e0022;
        public: static const int config_wifi_framework_associated_partial_scan_tx_packet_threshold = 0x010e0021;
        /**  Integer indicating associated partial scan interval in milliseconds 
         */
        public: static const int config_wifi_framework_associated_scan_interval = 0x010e0028;
        public: static const int config_wifi_framework_current_association_hysteresis_high = 0x010e0011;
        public: static const int config_wifi_framework_current_association_hysteresis_low = 0x010e0012;
        /**  Integer indicating number of authentication errors leading to blacklisting of the network 
         */
        public: static const int config_wifi_framework_max_auth_errors_to_blacklist = 0x010e002f;
        /**  Integer indicating number of association errors leading to blacklisting of the network 
         */
        public: static const int config_wifi_framework_max_connection_errors_to_blacklist = 0x010e002e;
        /**  Integer indicating minimum blacklisting delay of a wofo configuration due to connectin or auth errors 
         */
        public: static const int config_wifi_framework_network_black_list_min_time_milli = 0x010e0030;
        public: static const int config_wifi_framework_network_switch_rx_packet_threshold = 0x010e0024;
        public: static const int config_wifi_framework_network_switch_tx_packet_threshold = 0x010e0023;
        /**  Integer indicating the framework scan interval in milliseconds. This is used in the scenario
         where the chipset does not support background scanning (config_wifi_background_scan_suport
         is false) to set up a periodic wake up scan so that the device can connect to a new access
         point on the move. A value of 0 means no periodic scans will be used in the framework. 
         */
        public: static const int config_wifi_framework_scan_interval = 0x010e0027;
        public: static const int config_wifi_framework_wifi_score_bad_link_speed_24 = 0x010e001b;
        public: static const int config_wifi_framework_wifi_score_bad_link_speed_5 = 0x010e001c;
        public: static const int config_wifi_framework_wifi_score_bad_rssi_threshold_24GHz = 0x010e0018;
        /**  Integer parameters of the wifi to cellular handover feature
         wifi should not stick to bad networks 
         */
        public: static const int config_wifi_framework_wifi_score_bad_rssi_threshold_5GHz = 0x010e0015;
        public: static const int config_wifi_framework_wifi_score_good_link_speed_24 = 0x010e001d;
        public: static const int config_wifi_framework_wifi_score_good_link_speed_5 = 0x010e001e;
        public: static const int config_wifi_framework_wifi_score_good_rssi_threshold_24GHz = 0x010e001a;
        public: static const int config_wifi_framework_wifi_score_good_rssi_threshold_5GHz = 0x010e0017;
        public: static const int config_wifi_framework_wifi_score_low_rssi_threshold_24GHz = 0x010e0019;
        public: static const int config_wifi_framework_wifi_score_low_rssi_threshold_5GHz = 0x010e0016;
        /**  Integer indicating wpa_supplicant scan interval when p2p is connected in milliseconds 
         */
        public: static const int config_wifi_scan_interval_p2p_connected = 0x010e0026;
        /**  Integer indicating wpa_supplicant scan interval in milliseconds 
         */
        public: static const int config_wifi_supplicant_scan_interval = 0x010e0025;
        /**  Maximum number of database connections opened and managed by framework layer
         to handle queries on each database when using Write-Ahead Logging. 
         */
        public: static const int db_connection_pool_size = 0x010e005a;
        /**  Maximum size of the persistent journal file in bytes.
         If the journal file grows to be larger than this amount then SQLite will
         truncate it after committing the transaction. 
         */
        public: static const int db_journal_size_limit = 0x010e005b;
        /**  The Write-Ahead Log auto-checkpoint interval in database pages (typically 1 to 4KB).
         The log is checkpointed automatically whenever it exceeds this many pages.
         When a database is reopened, its journal mode is set back to the default
         journal mode, which may cause a checkpoint operation to occur.  Checkpoints
         can also happen at other times when transactions are committed.
         The bigger the WAL file, the longer a checkpoint operation takes, so we try
         to keep the WAL file relatively small to avoid long delays.
         The size of the WAL file is also constrained by 'db_journal_size_limit'. 
         */
        public: static const int db_wal_autocheckpoint = 0x010e005c;
        public: static const int disabled_alpha_animation_duration = 0x010e0092;
        public: static const int kg_carousel_angle = 0x010e008e;
        public: static const int kg_glowpad_rotation_offset = 0x010e008f;
        public: static const int kg_security_flipper_weight = 0x010e0095;
        /**  Gravity to make KeyguardSelectorView work in multiple orientations
        0x31 == "top|center_horizontal" 
 Gravity to make KeyguardSelectorView work in multiple orientations
        0x13 == "left|center_vertical" 
         */
        public: static const int kg_selector_gravity = 0x010e0093;
        public: static const int kg_widget_region_weight = 0x010e0094;
        public: static const int leanback_setup_alpha_activity_in_bkg_delay = 0x010e007e;
        public: static const int leanback_setup_alpha_activity_in_bkg_duration = 0x010e007f;
        public: static const int leanback_setup_alpha_activity_out_bkg_delay = 0x010e0080;
        public: static const int leanback_setup_alpha_activity_out_bkg_duration = 0x010e0081;
        public: static const int leanback_setup_alpha_backward_in_content_delay = 0x010e0088;
        public: static const int leanback_setup_alpha_backward_in_content_duration = 0x010e0089;
        public: static const int leanback_setup_alpha_backward_out_content_delay = 0x010e008a;
        public: static const int leanback_setup_alpha_backward_out_content_duration = 0x010e008b;
        public: static const int leanback_setup_alpha_forward_in_content_delay = 0x010e0082;
        public: static const int leanback_setup_alpha_forward_in_content_duration = 0x010e0083;
        public: static const int leanback_setup_alpha_forward_out_content_delay = 0x010e0084;
        public: static const int leanback_setup_alpha_forward_out_content_duration = 0x010e0085;
        /**  The duration of most animations related to screen content transitions 
         */
        public: static const int leanback_setup_base_animation_duration = 0x010e007b;
        public: static const int leanback_setup_translation_backward_out_content_delay = 0x010e008c;
        public: static const int leanback_setup_translation_backward_out_content_duration = 0x010e008d;
        public: static const int leanback_setup_translation_content_cliff_v4 = 0x010e007d;
        public: static const int leanback_setup_translation_content_resting_point_v4 = 0x010e007c;
        public: static const int leanback_setup_translation_forward_in_content_delay = 0x010e0086;
        public: static const int leanback_setup_translation_forward_in_content_duration = 0x010e0087;
        /**  The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
 The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
 The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
 The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
 The maximum number of action buttons that should be permitted within
         an action bar/action mode. This will be used to determine how many
         showAsAction="ifRoom" items can fit. "always" items can override this. 
         */
        public: static const int max_action_buttons = 0x010e0076;
        /**  outsideOverlay 
         */
        public: static const int preference_fragment_scrollbarStyle = 0x010e007a;
        public: static const int preference_screen_header_scrollbarStyle = 0x010e0079;
        /**  Weight of the left pane in a multi-pane preference layout. 
 Weight of the left pane in a multi-pane preference layout. 
         */
        public: static const int preferences_left_pane_weight = 0x010e0077;
        /**  Weight of the right pane in a multi-pane preference layout. So the split is 40:60 
 Weight of the right pane in a multi-pane preference layout. So the split is 1:2 
         */
        public: static const int preferences_right_pane_weight = 0x010e0078;
        /**  Maximum numerical value that will be shown in a status bar
         notification icon or in the notification itself. Will be replaced
         with @string/status_bar_notification_info_overflow when shown in the
         UI. 
         */
        public: static const int status_bar_notification_info_maxnum = 0x010e0003;
    };
    public: class interpolator {
        /**  Acceleration curve matching a cubic ease out function. 
         */
        public: static const int accelerate_cubic = 0x010c0002;
        /**  Acceleration curve matching an ease in + ease out function 
         */
        public: static const int accelerate_decelerate = 0x010c0006;
        /**  Acceleration curve matching a quadtratic ease out function. 
         */
        public: static const int accelerate_quad = 0x010c0000;
        public: static const int accelerate_quart = 0x010c0010;
        /**  Acceleration curve matching a quint ease out function. 
         */
        public: static const int accelerate_quint = 0x010c0004;
        /**  An interpolator where the change starts backward then flings forward. 
         */
        public: static const int anticipate = 0x010c0007;
        /**  An interpolator where the change starts backward then flings forward and
       overshoots the target value and finally goes back to the final value. 
         */
        public: static const int anticipate_overshoot = 0x010c0009;
        /**  An interpolator where the change bounces at the end. 
         */
        public: static const int bounce = 0x010c000a;
        /**  Repeats the animation for one cycle. The rate of change follows a
       sinusoidal pattern. 
         */
        public: static const int cycle = 0x010c000c;
        /**  Acceleration curve matching a cubic ease in function. 
         */
        public: static const int decelerate_cubic = 0x010c0003;
        /**  Acceleration curve matching a quadtratic ease in function. 
         */
        public: static const int decelerate_quad = 0x010c0001;
        public: static const int decelerate_quart = 0x010c0011;
        /**  Acceleration curve matching a quint ease in function. 
         */
        public: static const int decelerate_quint = 0x010c0005;
        /**  An interpolator which accelerates fast and keeps accelerating until the end. 
         */
        public: static const int fast_out_linear_in = 0x010c000f;
        /**  An interpolator which accelerates fast but decelerates slowly. 
         */
        public: static const int fast_out_slow_in = 0x010c000d;
        /**  An interpolator where the rate of change is constant. 
         */
        public: static const int linear = 0x010c000b;
        /**  An interpolator which starts with a peak non-zero velocity and decelerates slowly. 
         */
        public: static const int linear_out_slow_in = 0x010c000e;
        /**  An interpolator where the change flings forward and overshoots the last
       value then comes back. 
         */
        public: static const int overshoot = 0x010c0008;
        public: static const int progress_indeterminate_horizontal_rect1_scalex = 0x010c0012;
        public: static const int progress_indeterminate_horizontal_rect1_translatex = 0x010c0013;
        public: static const int progress_indeterminate_horizontal_rect2_scalex = 0x010c0014;
        public: static const int progress_indeterminate_horizontal_rect2_translatex = 0x010c0015;
        public: static const int trim_end_interpolator = 0x010c0016;
        public: static const int trim_start_interpolator = 0x010c0017;
    };
    public: class layout {
        public: static const int action_bar_home = 0x01090018;
        public: static const int action_bar_home_material = 0x01090019;
        public: static const int action_bar_title_item = 0x0109001a;
        public: static const int action_bar_up_container = 0x0109001b;
        public: static const int action_menu_item_layout = 0x0109001c;
        public: static const int action_menu_layout = 0x0109001d;
        public: static const int action_mode_bar = 0x0109001e;
        public: static const int action_mode_close_item = 0x0109001f;
        public: static const int action_mode_close_item_material = 0x01090020;
        public: static const int activity_chooser_view = 0x01090021;
        public: static const int activity_chooser_view_list_item = 0x01090022;
        public: static const int activity_list = 0x01090023;
        public: static const int activity_list_item = 0x01090000;
        public: static const int activity_list_item_2 = 0x01090024;
        public: static const int adaptive_notification_wrapper = 0x01090025;
        public: static const int alert_dialog = 0x01090026;
        public: static const int alert_dialog_holo = 0x01090027;
        public: static const int alert_dialog_leanback = 0x01090028;
        public: static const int alert_dialog_leanback_button_panel_side = 0x01090029;
        public: static const int alert_dialog_material = 0x0109002a;
        public: static const int alert_dialog_micro = 0x0109002b;
        public: static const int alert_dialog_progress = 0x0109002c;
        public: static const int alert_dialog_progress_holo = 0x0109002d;
        public: static const int alert_dialog_progress_material = 0x0109002e;
        public: static const int always_use_checkbox = 0x0109002f;
        public: static const int am_compat_mode_dialog = 0x01090030;
        public: static const int app_not_authorized = 0x01090031;
        public: static const int app_permission_item = 0x01090032;
        public: static const int app_permission_item_money = 0x01090033;
        public: static const int app_permission_item_old = 0x01090034;
        public: static const int app_perms_summary = 0x01090035;
        public: static const int auto_complete_list = 0x01090036;
        public: static const int breadcrumbs_in_fragment = 0x01090037;
        public: static const int breadcrumbs_in_fragment_material = 0x01090038;
        public: static const int browser_link_context_header = 0x0109000e;
        public: static const int calendar_view = 0x01090039;
        public: static const int character_picker = 0x0109003a;
        public: static const int character_picker_button = 0x0109003b;
        public: static const int choose_account = 0x0109003c;
        public: static const int choose_account_row = 0x0109003d;
        public: static const int choose_account_type = 0x0109003e;
        public: static const int choose_type_and_account = 0x0109003f;
        public: static const int date_picker_dialog = 0x01090040;
        public: static const int date_picker_holo = 0x01090041;
        public: static const int date_picker_legacy = 0x01090042;
        public: static const int date_picker_legacy_holo = 0x01090043;
        public: static const int date_picker_selected_date = 0x01090044;
        public: static const int date_picker_view_animator = 0x01090045;
        public: static const int default_navigation = 0x01090046;
        public: static const int dialog_custom_title = 0x01090047;
        public: static const int dialog_custom_title_holo = 0x01090048;
        public: static const int dialog_custom_title_material = 0x01090049;
        public: static const int dialog_title = 0x0109004a;
        public: static const int dialog_title_holo = 0x0109004b;
        public: static const int dialog_title_icons = 0x0109004c;
        public: static const int dialog_title_icons_holo = 0x0109004d;
        public: static const int dialog_title_icons_material = 0x0109004e;
        public: static const int dialog_title_material = 0x0109004f;
        public: static const int expandable_list_content = 0x01090001;
        public: static const int expanded_menu_layout = 0x01090050;
        public: static const int fragment_bread_crumb_item = 0x01090051;
        public: static const int fragment_bread_crumb_item_material = 0x01090052;
        public: static const int fragment_bread_crumbs = 0x01090053;
        public: static const int global_actions_item = 0x01090054;
        public: static const int global_actions_silent_mode = 0x01090055;
        public: static const int grant_credentials_permission = 0x01090056;
        public: static const int heavy_weight_switcher = 0x01090057;
        public: static const int icon_menu_item_layout = 0x01090058;
        public: static const int icon_menu_layout = 0x01090059;
        public: static const int immersive_mode_cling = 0x0109005a;
        public: static const int input_method = 0x0109005b;
        public: static const int input_method_extract_view = 0x0109005c;
        public: static const int input_method_switch_dialog_title = 0x0109005d;
        public: static const int input_method_switch_item = 0x0109005e;
        public: static const int js_prompt = 0x0109005f;
        public: static const int keyboard_key_preview = 0x01090060;
        public: static const int keyboard_popup_keyboard = 0x01090061;
        public: static const int keyguard = 0x01090062;
        public: static const int launch_warning = 0x01090063;
        /**  Standard content view for a {@link android.app.ListFragment}.
       If you are implementing a subclass of ListFragment with your
       own customized content, you can include this layout in that
       content to still retain all of the standard functionality of
       the base class. 
         */
        public: static const int list_content = 0x01090014;
        public: static const int list_content_simple = 0x01090064;
        public: static const int list_gestures_overlay = 0x01090065;
        public: static const int list_menu_item_checkbox = 0x01090066;
        public: static const int list_menu_item_icon = 0x01090067;
        public: static const int list_menu_item_layout = 0x01090068;
        public: static const int list_menu_item_radio = 0x01090069;
        public: static const int locale_picker_item = 0x0109006a;
        public: static const int lock_to_app_checkbox = 0x0109006b;
        public: static const int media_controller = 0x0109006c;
        public: static const int media_route_chooser_dialog = 0x0109006d;
        public: static const int media_route_controller_dialog = 0x0109006e;
        public: static const int media_route_list_item = 0x0109006f;
        public: static const int menu_item = 0x01090070;
        public: static const int notification_action_list = 0x01090071;
        public: static const int notification_intruder_content = 0x01090072;
        public: static const int notification_material_action = 0x01090073;
        public: static const int notification_material_action_list = 0x01090074;
        public: static const int notification_material_action_tombstone = 0x01090075;
        public: static const int notification_material_media_action = 0x01090076;
        public: static const int notification_template_icon_group = 0x01090077;
        public: static const int notification_template_material_base = 0x01090078;
        public: static const int notification_template_material_big_base = 0x01090079;
        public: static const int notification_template_material_big_media = 0x0109007a;
        public: static const int notification_template_material_big_media_narrow = 0x0109007b;
        public: static const int notification_template_material_big_picture = 0x0109007c;
        public: static const int notification_template_material_big_text = 0x0109007d;
        public: static const int notification_template_material_inbox = 0x0109007e;
        public: static const int notification_template_material_media = 0x0109007f;
        public: static const int notification_template_part_chronometer = 0x01090080;
        public: static const int notification_template_part_line1 = 0x01090081;
        public: static const int notification_template_part_line2 = 0x01090082;
        public: static const int notification_template_part_line3 = 0x01090083;
        public: static const int notification_template_part_time = 0x01090084;
        public: static const int notification_template_progressbar = 0x01090085;
        public: static const int number_picker = 0x01090086;
        public: static const int number_picker_with_selector_wheel = 0x01090087;
        public: static const int number_picker_with_selector_wheel_micro = 0x01090088;
        public: static const int overlay_display_window = 0x01090089;
        public: static const int permissions_account_and_authtokentype = 0x0109008a;
        public: static const int permissions_package_list_item = 0x0109008b;
        public: static const int popup_menu_item_layout = 0x0109008c;
        public: static const int power_dialog = 0x0109008d;
        public: static const int preference = 0x0109008e;
        public: static const int preference_category = 0x01090002;
        public: static const int preference_category_holo = 0x0109008f;
        public: static const int preference_category_material = 0x01090090;
        public: static const int preference_child = 0x01090091;
        public: static const int preference_child_holo = 0x01090092;
        public: static const int preference_child_material = 0x01090093;
        public: static const int preference_dialog_edittext = 0x01090094;
        public: static const int preference_header_item = 0x01090095;
        public: static const int preference_header_item_material = 0x01090096;
        public: static const int preference_holo = 0x01090097;
        public: static const int preference_information = 0x01090098;
        public: static const int preference_information_holo = 0x01090099;
        public: static const int preference_information_material = 0x0109009a;
        public: static const int preference_list_content = 0x0109009b;
        public: static const int preference_list_content_material = 0x0109009c;
        public: static const int preference_list_content_single = 0x0109009d;
        public: static const int preference_list_fragment = 0x0109009e;
        public: static const int preference_list_fragment_material = 0x0109009f;
        public: static const int preference_material = 0x010900a0;
        public: static const int preference_widget_checkbox = 0x010900a1;
        public: static const int preference_widget_seekbar = 0x010900a2;
        public: static const int preference_widget_seekbar_material = 0x010900a3;
        public: static const int preference_widget_switch = 0x010900a4;
        public: static const int preferences = 0x010900a5;
        public: static const int progress_dialog = 0x010900a6;
        public: static const int progress_dialog_holo = 0x010900a7;
        public: static const int progress_dialog_material = 0x010900a8;
        public: static const int recent_apps_dialog = 0x010900a9;
        public: static const int recent_apps_icon = 0x010900aa;
        public: static const int remote_views_adapter_default_loading_view = 0x010900ab;
        public: static const int resolve_list_item = 0x010900ac;
        public: static const int resolver_different_item_header = 0x010900ad;
        public: static const int resolver_list = 0x010900ae;
        public: static const int resolver_list_with_default = 0x010900af;
        public: static const int restrictions_pin_challenge = 0x010900b0;
        public: static const int restrictions_pin_setup = 0x010900b1;
        public: static const int safe_mode = 0x010900b2;
        public: static const int screen = 0x010900b3;
        public: static const int screen_action_bar = 0x010900b4;
        public: static const int screen_custom_title = 0x010900b5;
        public: static const int screen_progress = 0x010900b6;
        public: static const int screen_simple = 0x010900b7;
        public: static const int screen_simple_overlay_action_mode = 0x010900b8;
        public: static const int screen_swipe_dismiss = 0x010900b9;
        public: static const int screen_title = 0x010900ba;
        public: static const int screen_title_icons = 0x010900bb;
        public: static const int screen_toolbar = 0x010900bc;
        public: static const int search_bar = 0x010900bd;
        public: static const int search_dropdown_item_icons_2line = 0x010900be;
        public: static const int search_view = 0x010900bf;
        public: static const int seekbar_dialog = 0x010900c0;
        public: static const int select_dialog = 0x010900c1;
        public: static const int select_dialog_holo = 0x010900c2;
        public: static const int select_dialog_item = 0x01090011;
        public: static const int select_dialog_item_holo = 0x010900c3;
        public: static const int select_dialog_item_material = 0x010900c4;
        public: static const int select_dialog_material = 0x010900c5;
        public: static const int select_dialog_multichoice = 0x01090013;
        public: static const int select_dialog_multichoice_holo = 0x010900c6;
        public: static const int select_dialog_multichoice_material = 0x010900c7;
        public: static const int select_dialog_singlechoice = 0x01090012;
        public: static const int select_dialog_singlechoice_holo = 0x010900c8;
        public: static const int select_dialog_singlechoice_material = 0x010900c9;
        public: static const int simple_dropdown_hint = 0x010900ca;
        public: static const int simple_dropdown_item_1line = 0x0109000a;
        public: static const int simple_dropdown_item_2line = 0x010900cb;
        public: static const int simple_expandable_list_item_1 = 0x01090006;
        public: static const int simple_expandable_list_item_2 = 0x01090007;
        public: static const int simple_gallery_item = 0x0109000b;
        public: static const int simple_list_item_1 = 0x01090003;
        public: static const int simple_list_item_2 = 0x01090004;
        public: static const int simple_list_item_2_single_choice = 0x010900cc;
        /**  A version of {@link #simple_list_item_1} that is able to change its
       background state to indicate when it is activated (that is checked by
       a ListView). 
         */
        public: static const int simple_list_item_activated_1 = 0x01090016;
        /**  A version of {@link #simple_list_item_2} that is able to change its
       background state to indicate when it is activated (that is checked by
       a ListView). 
         */
        public: static const int simple_list_item_activated_2 = 0x01090017;
        public: static const int simple_list_item_checked = 0x01090005;
        public: static const int simple_list_item_multiple_choice = 0x01090010;
        public: static const int simple_list_item_single_choice = 0x0109000f;
        /**  A simple ListView item layout which can contain text and support (single or multiple) item selection. 
         */
        public: static const int simple_selectable_list_item = 0x01090015;
        public: static const int simple_spinner_dropdown_item = 0x01090009;
        public: static const int simple_spinner_item = 0x01090008;
        public: static const int sms_short_code_confirmation_dialog = 0x010900cd;
        public: static const int ssl_certificate = 0x010900ce;
        public: static const int status_bar_latest_event_content = 0x010900cf;
        public: static const int subscription_item_layout = 0x010900d0;
        public: static const int tab_content = 0x010900d1;
        public: static const int tab_indicator = 0x010900d2;
        public: static const int tab_indicator_holo = 0x010900d3;
        public: static const int tab_indicator_material = 0x010900d4;
        public: static const int test_list_item = 0x0109000c;
        public: static const int text_drag_thumbnail = 0x010900d5;
        public: static const int text_edit_action_popup_text = 0x010900d6;
        public: static const int text_edit_no_paste_window = 0x010900d7;
        public: static const int text_edit_paste_window = 0x010900d8;
        public: static const int text_edit_side_no_paste_window = 0x010900d9;
        public: static const int text_edit_side_paste_window = 0x010900da;
        public: static const int text_edit_suggestion_item = 0x010900db;
        public: static const int text_edit_suggestions_window = 0x010900dc;
        public: static const int textview_hint = 0x010900dd;
        public: static const int time_header_label = 0x010900de;
        public: static const int time_picker_dialog = 0x010900df;
        public: static const int time_picker_holo = 0x010900e0;
        public: static const int time_picker_legacy = 0x010900e1;
        public: static const int time_picker_legacy_holo = 0x010900e2;
        public: static const int transient_notification = 0x010900e3;
        public: static const int twelve_key_entry = 0x010900e4;
        public: static const int two_line_list_item = 0x0109000d;
        public: static const int typing_filter = 0x010900e5;
        public: static const int usb_storage_activity = 0x010900e6;
        public: static const int user_switching_dialog = 0x010900e7;
        public: static const int voice_interaction_session = 0x010900e8;
        public: static const int web_runtime = 0x010900e9;
        public: static const int web_text_view_dropdown = 0x010900ea;
        public: static const int webview_find = 0x010900eb;
        public: static const int webview_select_singlechoice = 0x010900ec;
        public: static const int wifi_p2p_dialog = 0x010900ed;
        public: static const int wifi_p2p_dialog_row = 0x010900ee;
        public: static const int year_label_text_view = 0x010900ef;
        public: static const int zoom_browser_accessory_buttons = 0x010900f0;
        public: static const int zoom_container = 0x010900f1;
        public: static const int zoom_controls = 0x010900f2;
        public: static const int zoom_magnify = 0x010900f3;
    };
    public: class menu {
        public: static const int webview_copy = 0x01150000;
        public: static const int webview_find = 0x01150001;
    };
    public: class mipmap {
        public: static const int sym_app_on_sd_unavailable_icon = 0x010d0001;
        /**  Default icon for applications that don't specify an icon. 
         */
        public: static const int sym_def_app_icon = 0x010d0000;
    };
    public: class plurals {
        /**  This is used to express that something will occur some number of abbreviated days in the future (e.g., in 5 days). 
         */
        public: static const int abbrev_in_num_days = 0x01140011;
        /**  This is used to express that something will occur some number of abbreviated hours in the future (e.g., in 5 hrs). 
         */
        public: static const int abbrev_in_num_hours = 0x01140010;
        /**  This is used to express that something will occur some number of abbreviated minutes in the future (e.g., in 5 mins). 
         */
        public: static const int abbrev_in_num_minutes = 0x0114000f;
        /**  This is used to express that something will occur some number of abbreviated seconds in the future (e.g., in 5 secs). 
         */
        public: static const int abbrev_in_num_seconds = 0x0114000e;
        /**  This is used to express that something occurred some number of abbreviated days in the past (e.g., 5 days ago). 
         */
        public: static const int abbrev_num_days_ago = 0x0114000d;
        /**  This is used to express that something occurred some number of abbreviated hours in the past (e.g., 5 hrs ago). 
         */
        public: static const int abbrev_num_hours_ago = 0x0114000c;
        /**  This is used to express that something occurred some number of abbreviated minutes in the past (e.g., 5 mins ago). 
         */
        public: static const int abbrev_num_minutes_ago = 0x0114000b;
        /**  This is used to express that something occurred some number of abbreviated seconds in the past (e.g., 5 secs ago). 
         */
        public: static const int abbrev_num_seconds_ago = 0x0114000a;
        /**  Phrase describing a time duration using hours [CHAR LIMIT=16] 
         */
        public: static const int duration_hours = 0x01140014;
        /**  Phrase describing a time duration using minutes [CHAR LIMIT=16] 
         */
        public: static const int duration_minutes = 0x01140013;
        /**  Phrase describing a time duration using seconds [CHAR LIMIT=16] 
         */
        public: static const int duration_seconds = 0x01140012;
        /**  This is used to express that something will occur some number of days in the future (e.g., in 5 days). 
         */
        public: static const int in_num_days = 0x01140009;
        /**  This is used to express that something will occur some number of hours in the future (e.g., in 5 hours). 
         */
        public: static const int in_num_hours = 0x01140008;
        /**  This is used to express that something will occur some number of minutes in the future (e.g., in 5 minutes). 
         */
        public: static const int in_num_minutes = 0x01140007;
        /**  This is used to express that something will occur some number of seconds in the future (e.g., in 5 seconds). 
         */
        public: static const int in_num_seconds = 0x01140006;
        /**  This is used to express that something occurred within the last X days (e.g., Last 7 days). 
         */
        public: static const int last_num_days = 0x01140004;
        /**  Displayed on the Find dialog to display the index of the highlighted
         match and total number of matches found in the current page. [CHAR LIMIT=NONE] 
         */
        public: static const int matches_found = 0x01140017;
        /**  This is used to express that something occurred some number of days in the past (e.g., 5 days ago). 
         */
        public: static const int num_days_ago = 0x01140005;
        /**  This is used to express that something occurred some number of hours in the past (e.g., 5 hours ago). 
         */
        public: static const int num_hours_ago = 0x01140003;
        /**  This is used to express that something occurred some number of minutes in the past (e.g., 5 minutes ago). 
         */
        public: static const int num_minutes_ago = 0x01140002;
        /**  This is used to express that something occurred some number of seconds in the past (e.g., 5 seconds ago). 
         */
        public: static const int num_seconds_ago = 0x01140001;
        /**  Displayed when a SIM PIN/PUK is entered incorrectly. 
         */
        public: static const int pinpuk_attempts = 0x01140000;
        /**  PIN entry dialog countdown message for next chance to enter the PIN [CHAR LIMIT=none] 
 Phrase describing a time duration using seconds [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_countdown = 0x01140018;
        /**  A notification is shown when there are open wireless networks nearby.  This is the notification's title. 
         */
        public: static const int wifi_available = 0x01140015;
        /**  A notification is shown when there are open wireless networks nearby.  This is the notification's message. 
         */
        public: static const int wifi_available_detailed = 0x01140016;
        /**  Zen mode condition: time duration in hours. [CHAR LIMIT=NONE] 
         */
        public: static const int zen_mode_duration_hours = 0x0114001a;
        /**  Zen mode condition: time duration in minutes. [CHAR LIMIT=NONE] 
         */
        public: static const int zen_mode_duration_minutes = 0x01140019;
    };
    public: class raw {
        public: static const int accessibility_gestures = 0x01100002;
        public: static const int color_fade_frag = 0x01100003;
        public: static const int color_fade_vert = 0x01100004;
        public: static const int fallbackring = 0x01100005;
        public: static const int incognito_mode_start_page = 0x01100006;
        /**  WebView error page for when the load fails. @hide @SystemApi 
         */
        public: static const int loaderror = 0x01100000;
        /**  WebView error page for when domain lookup fails. @hide @SystemApi 
         */
        public: static const int nodomain = 0x01100001;
    };
    public: class string {
        /**  Displayed as the title for a success/failure report enabling/disabling call barring. 
         */
        public: static const int BaMmi = 0x01040098;
        /**  Displayed to confirm to the user that caller ID will not be restricted on the next call or in general. 
         */
        public: static const int CLIRDefaultOffNextCallOff = 0x010400a4;
        /**  Displayed to confirm to the user that caller ID will not be restricted on the next call but usually is. 
         */
        public: static const int CLIRDefaultOffNextCallOn = 0x010400a3;
        /**  Displayed to confirm to the user that caller ID will be not restricted on the next call even though it usually is. 
         */
        public: static const int CLIRDefaultOnNextCallOff = 0x010400a2;
        /**  Displayed to confirm to the user that caller ID will be restricted on the next call as usual. 
         */
        public: static const int CLIRDefaultOnNextCallOn = 0x010400a1;
        /**  Displayed to tell the user that they cannot change the caller ID setting. 
         */
        public: static const int CLIRPermanent = 0x010400a6;
        /**  Displayed as the title for a success/failure report enabling/disabling call forwarding. 
         */
        public: static const int CfMmi = 0x01040096;
        /**  Displayed as the title for a success/failure report enabling/disabling caller ID. 
         */
        public: static const int ClipMmi = 0x01040092;
        /**  Displayed as the title for a success/failure report enabling/disabling caller ID. 
         */
        public: static const int ClirMmi = 0x01040093;
        public: static const int CndMmi = 0x0104009f;
        public: static const int CnipMmi = 0x0104009b;
        public: static const int CnirMmi = 0x0104009c;
        /**  Displayed as the title for a success/failure report enabling/disabling connected line ID. 
         */
        public: static const int ColpMmi = 0x01040094;
        /**  Displayed as the title for a success/failure report enabling/disabling connected line ID restriction. 
         */
        public: static const int ColrMmi = 0x01040095;
        /**  Displayed as the title for a success/failure report enabling/disabling call waiting. 
         */
        public: static const int CwMmi = 0x01040097;
        public: static const int DndMmi = 0x010400a0;
        /**  Quoted name for 12am, uppercase first letter 
         */
        public: static const int Midnight = 0x0104044e;
        /**  Quoted name for 12pm, uppercase first letter 
         */
        public: static const int Noon = 0x0104044c;
        /**  Displayed as the title for a success/failure report changing the SIM PIN. 
         */
        public: static const int PinMmi = 0x0104009a;
        /**  Displayed as the title for a success/failure report changing the SIM password. 
         */
        public: static const int PwdMmi = 0x01040099;
        /**  Notification title to tell the user that restricted state is changed by access control. 
         */
        public: static const int RestrictedChangedTitle = 0x010400a7;
        /**  Displayed to tell the user that all service is blocked by access control. 
         */
        public: static const int RestrictedOnAll = 0x010400af;
        /**  Displayed to tell the user that all emergency and normal voice services are blocked by access control. 
         */
        public: static const int RestrictedOnAllVoice = 0x010400ab;
        /**  Displayed to tell the user that data service is blocked by access control. 
         */
        public: static const int RestrictedOnData = 0x010400a8;
        /**  Displayed to tell the user that emergency service is blocked by access control. 
         */
        public: static const int RestrictedOnEmergency = 0x010400a9;
        /**  Displayed to tell the user that normal service is blocked by access control. 
         */
        public: static const int RestrictedOnNormal = 0x010400aa;
        /**  Displayed to tell the user that sms service is blocked by access control. 
         */
        public: static const int RestrictedOnSms = 0x010400ac;
        /**  Displayed to tell the user that voice/data service is blocked by access control. 
         */
        public: static const int RestrictedOnVoiceData = 0x010400ad;
        /**  Displayed to tell the user that voice and sms service are blocked by access control. 
         */
        public: static const int RestrictedOnVoiceSms = 0x010400ae;
        public: static const int RuacMmi = 0x0104009e;
        /**  STK setup Call 
         */
        public: static const int SetupCallDefault = 0x010405b5;
        public: static const int ThreeWCMmi = 0x0104009d;
        /**  Button to close error alert when a video cannot be played 
         */
        public: static const int VideoView_error_button = 0x01040010;
        /**  Text for error alert when a video container is not valid for progressive download/playback. 
         */
        public: static const int VideoView_error_text_invalid_progressive_playback = 0x01040015;
        /**  Text for error alert when a video cannot be played. it can be used by any app. 
         */
        public: static const int VideoView_error_text_unknown = 0x01040011;
        /**  Title for error alert when a video cannot be played.  it can be used by any app. 
         */
        public: static const int VideoView_error_title = 0x01040012;
        public: static const int accept = 0x010404b0;
        /**  Label to show for a service that is running because it is an accessibility module. 
         */
        public: static const int accessibility_binding_label = 0x01040535;
        /**  Text spoken when the user enabled accessibility. [CHAR LIMIT=none] 
         */
        public: static const int accessibility_enabled = 0x010405f5;
        /**  Content description for the action bar "home" affordance. [CHAR LIMIT=NONE] 
         */
        public: static const int action_bar_home_description = 0x0104058a;
        /**  Formatting string for describing the action bar's title/home/up affordance.
         This is a single tappable "button" that includes the app icon, the Up indicator
         (usually a "<" chevron) and the window title text.
         %1$s is the title. %2$s is the description of what tapping/clicking the whole
         thing is going to do. 
         */
        public: static const int action_bar_home_description_format = 0x0104058d;
        /**  Just like action_bar_home_description_format, but this one will be used
         if the window is also providing subtitle text.
         %1$s is the title. %2$s is the subtitle. %3$s is the description of what
         tapping/clicking the whole thing is going to do. 
         */
        public: static const int action_bar_home_subtitle_description_format = 0x0104058e;
        /**  Content description for the action bar "up" affordance. [CHAR LIMIT=NONE] 
         */
        public: static const int action_bar_up_description = 0x0104058b;
        /**  Content description for the action menu overflow button. [CHAR LIMIT=NONE] 
         */
        public: static const int action_menu_overflow_description = 0x0104058c;
        /**  Label for the "Done" button on the far left of action mode toolbars. 
         */
        public: static const int action_mode_done = 0x01040550;
        /**  Title default for a dialog showing possible activities in ActivityChooserView [CHAR LIMIT=25] 
         */
        public: static const int activity_chooser_view_dialog_title_default = 0x010405b0;
        /**  Title for a button to expand the list of activities in ActivityChooserView [CHAR LIMIT=25] 
         */
        public: static const int activity_chooser_view_see_all = 0x010405af;
        /**  Shown in LauncherActivity when the requested target Intent didn't return any matching Activities, leaving the list empty. 
         */
        public: static const int activity_list_empty = 0x01040506;
        /**  Title for a button to choose the currently selected activity
         as the default in the activity resolver. [CHAR LIMIT=25] 
         */
        public: static const int activity_resolver_use_always = 0x010405b6;
        /**  Title for a button to choose the currently selected activity
         from the activity resolver to use just this once. [CHAR LIMIT=25] 
         */
        public: static const int activity_resolver_use_once = 0x010405b7;
        /**  Text for the toast that is shown when the user clicks on a launcher that
         doesn't support the work profile. [CHAR LIMIT=100] 
         */
        public: static const int activity_resolver_work_profiles_support = 0x010405b8;
        /**  ActivityChooserView - accessibility support 
 Description of the shwoing of a popup window with activities to choose from. [CHAR LIMIT=NONE] 
         */
        public: static const int activitychooserview_choose_application = 0x01040582;
        /**  Error message if the share target app cannto be launched. [CHAR LIMIT=NONE] 
         */
        public: static const int activitychooserview_choose_application_error = 0x01040583;
        /**  Message of notification shown when ADB is actively connected to the phone. 
         */
        public: static const int adb_active_notification_message = 0x010404ef;
        /**  Title of notification shown when ADB is actively connected to the phone. 
         */
        public: static const int adb_active_notification_title = 0x010404ee;
        /**  Option to add the current misspelled word to the user dictionary. [CHAR LIMIT=25] 
         */
        public: static const int addToDictionary = 0x01040454;
        /**  List item to add an account [CHAR LIMIT=20] 
         */
        public: static const int add_account_button_label = 0x0104056a;
        public: static const int add_account_label = 0x01040569;
        /**  Text of the alert that is displayed when an application has crashed. 
         */
        public: static const int aerr_application = 0x01040471;
        /**  Text of the alert that is displayed when an application has crashed. 
         */
        public: static const int aerr_process = 0x01040472;
        /**  Title of the alert when an application has crashed. 
         */
        public: static const int aerr_title = 0x01040470;
        public: static const int allow = 0x0104052d;
        /**  Do Not Translate: Alternate eri.xml 
         */
        public: static const int alternate_eri_file = 0x0104053a;
        /**  Option to always use the selected application resolution in the future. See the "Complete action using" dialog title
         */
        public: static const int alwaysUse = 0x0104046a;
        /**  Label for the Android system components when they are shown to the user. 
         */
        public: static const int android_system_label = 0x01040104;
        /**  [CHAR LIMIT=NONE] Message shown in upgrading dialog for each .apk that is optimized. 
         */
        public: static const int android_upgrading_apk = 0x01040486;
        /**  [CHAR LIMIT=NONE] Message to show in upgrading dialog when the bulk of the upgrade work is done. 
         */
        public: static const int android_upgrading_complete = 0x01040488;
        /**  [CHAR LIMIT=NONE] Message shown in upgrading dialog when doing an fstrim. 
         */
        public: static const int android_upgrading_fstrim = 0x01040485;
        /**  [CHAR LIMIT=NONE] Message to show in upgrading dialog when reached the point of starting apps. 
         */
        public: static const int android_upgrading_starting_apps = 0x01040487;
        /**  [CHAR LIMIT=40] Title of dialog that is shown when performing a system upgrade. 
         */
        public: static const int android_upgrading_title = 0x01040484;
        /**  Text of the alert that is displayed when an application is not responding. 
         */
        public: static const int anr_activity_application = 0x01040474;
        /**  Text of the alert that is displayed when an application is not responding. 
         */
        public: static const int anr_activity_process = 0x01040475;
        /**  Text of the alert that is displayed when an application is not responding. 
         */
        public: static const int anr_application_process = 0x01040476;
        /**  Text of the alert that is displayed when an application is not responding. 
         */
        public: static const int anr_process = 0x01040477;
        /**  Title of the alert when an application is not responding. 
         */
        public: static const int anr_title = 0x01040473;
        public: static const int app_no_restricted_accounts = 0x0104069c;
        /**  Message informing user that the requested activity could not be found [CHAR LIMIT=none] 
         */
        public: static const int app_not_found = 0x010405fc;
        /**  [CHAR LIMIT=NONE] Stub notification text for an app running a service that has provided
         a bad bad notification for itself. 
         */
        public: static const int app_running_notification_text = 0x0104045c;
        /**  [CHAR LIMIT=NONE] Stub notification title for an app running a service that has provided
         a bad bad notification for itself. 
         */
        public: static const int app_running_notification_title = 0x0104045b;
        /**  Do not translate. Regex used by AutoFill. 
 fr-FR 
 it-IT 
 ja-JP 
 zh-CN 
         */
        public: static const int autofill_address_line_1_label_re = 0x010403dc;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 en-GB 
 es 
 fr-FR 
 it-IT 
 ja-JP 
 pt-BR, pt-PT 
 ru 
 zh-CN 
         */
        public: static const int autofill_address_line_1_re = 0x010403db;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 es 
 fr-FR 
 it-IT 
 ja-JP 
         */
        public: static const int autofill_address_line_2_re = 0x010403dd;
        /**  Do not translate. Regex used by AutoFill. 
 es 
 fr-FR 
 it-IT 
         */
        public: static const int autofill_address_line_3_re = 0x010403de;
        /**  String used to separate FirstName and LastName when writing out a local name
         e.g. John<separator>Smith [CHAR-LIMIT=NONE]
         */
        public: static const int autofill_address_name_separator = 0x010403d4;
        /**  Format string for displaying a name and address summary. $1 is the Full Name, $2 is autofill_address_summary_separator, $3 is the Address
         e.g. (John Smith)(, )(123 Main Street) 
         */
        public: static const int autofill_address_summary_format = 0x010403d7;
        /**  Format string for displaying a name. $1 is First Name, $2 is autofill_address_name_separator, $3 is Last Name.
         e.g. (John)( )(Smith) 
         */
        public: static const int autofill_address_summary_name_format = 0x010403d5;
        /**  String used to separate Name and Address Line 1
         e.g. John Smith<separator>123 Main Street [CHAR-LIMIT=NONE]
         */
        public: static const int autofill_address_summary_separator = 0x010403d6;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_address_type_same_as_re = 0x010403e4;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_address_type_use_my_re = 0x010403e5;
        /**  Label in a web form for "Area" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_area = 0x0104040b;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_area_code_notext_re = 0x010403fe;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_area_code_re = 0x010403f1;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_attention_ignored_re = 0x010403d8;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_billing_designator_re = 0x010403e6;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_card_cvc_re = 0x010403f7;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_card_ignored_re = 0x010403fb;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 es 
 fr-FR 
 ja-JP 
 ru 
 zh-CN 
 zh-TW 
         */
        public: static const int autofill_card_number_re = 0x010403f8;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 en-AU 
 es 
 fr-FR 
 it-IT 
 ja-JP 
 pt-BR, pt-PT 
 ru 
 zh-CN 
 zh-TW 
         */
        public: static const int autofill_city_re = 0x010403e2;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 es 
 fr-FR 
 it-IT 
 ja-JP 
 ru 
 zh-CN 
         */
        public: static const int autofill_company_re = 0x010403da;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_country_code_re = 0x010403fd;
        /**  Do not translate. Regex used by AutoFill. 
 ja-JP 
 zh-CN 
         */
        public: static const int autofill_country_re = 0x010403df;
        /**  Label in a web form for "County" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_county = 0x01040405;
        /**  Label in a web form for "Department" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_department = 0x01040408;
        /**  Label in a web form for "District" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_district = 0x01040407;
        /**  Do not translate. Regex used by AutoFill. 
 ja-JP 
 ru 
 zh-CN 
 zh-TW 
         */
        public: static const int autofill_email_re = 0x010403e8;
        /**  Label in a web form for "Emirate" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_emirate = 0x0104040c;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 es 
 it-IT 
 ja-JP 
 pt-BR, pt-PT 
 ru 
 zh-CN 
         */
        public: static const int autofill_expiration_date_re = 0x010403fa;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 es 
 fr-FR 
 it-IT 
 ja-JP 
 pt-BR, pt-PT 
 ru 
 zh-CN 
         */
        public: static const int autofill_expiration_month_re = 0x010403f9;
        /**  Do not translate. Regex used by AutoFill. 
 fr-FR 
 ja-JP 
 ru 
 zh-CN 
 zh-TW 
         */
        public: static const int autofill_fax_re = 0x010403fc;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 es 
 fr-FR 
 ja-JP 
 pt-BR, pt-PT 
 ru 
         */
        public: static const int autofill_first_name_re = 0x010403ec;
        /**  Label in a web form for "Island" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_island = 0x01040406;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 es 
 fr-FR 
 it-IT 
 ja-JP 
 pt-BR, pt-PT 
 ru 
         */
        public: static const int autofill_last_name_re = 0x010403ef;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_middle_initial_re = 0x010403ed;
        /**  Do not translate. Regex used by AutoFill. 
 es 
         */
        public: static const int autofill_middle_name_re = 0x010403ee;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_name_on_card_contextual_re = 0x010403f6;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 es 
 fr-FR 
 it-IT 
 ja-JP 
 ru 
 zh-CN 
 zh-TW 
         */
        public: static const int autofill_name_on_card_re = 0x010403f5;
        /**  Do not translate. Regex used by AutoFill. 
 es 
 fr-FR 
 ja-JP 
 pt-BR, pt-PT 
 zh-CN 
         */
        public: static const int autofill_name_re = 0x010403ea;
        /**  Do not translate. Regex used by AutoFill. 
 fr-FR 
 pt-BR, pt-PT 
         */
        public: static const int autofill_name_specific_re = 0x010403eb;
        /**  Label in a web form for "Parish" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_parish = 0x0104040a;
        /**  Do not translate. Regex used by AutoFill. 
 pt-BR, pt-PT 
         */
        public: static const int autofill_phone_extension_re = 0x010403f4;
        /**  Do not translate. Regex used by AutoFill. 
 fr-FR 
 pt-BR, pt-PT 
         */
        public: static const int autofill_phone_prefix_re = 0x010403f2;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_phone_prefix_separator_re = 0x010403ff;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 es 
 fr-FR 
 ja-JP 
 pt-BR, pt-PT 
 ru 
 zh-CN 
         */
        public: static const int autofill_phone_re = 0x010403f0;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_phone_suffix_re = 0x010403f3;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_phone_suffix_separator_re = 0x01040400;
        /**  Label in a web form for "Postal code" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_postal_code = 0x01040402;
        /**  Label in a web form for "Prefecture" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_prefecture = 0x01040409;
        /**  Label in a web form for "Province" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_province = 0x01040401;
        /**  Do not translate. Regex used by AutoFill. 
 es 
 pt-BR, pt-PT 
         */
        public: static const int autofill_region_ignored_re = 0x010403d9;
        /**  Do not translate. Regex used by AutoFill. 
         */
        public: static const int autofill_shipping_designator_re = 0x010403e7;
        /**  Label in a web form for "State" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_state = 0x01040403;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 en-UK 
 ja-JP 
 pt-BR, pt-PT 
 ru 
 zh-CN 
 zh-TW 
         */
        public: static const int autofill_state_re = 0x010403e3;
        /**  Text to show in the auto complete drop down list on a text view when the WebView can auto fill the entire form, and the user has configured an AutoFill profile [CHAR-LIMIT=8] 
         */
        public: static const int autofill_this_form = 0x010403d2;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 zh-CN 
         */
        public: static const int autofill_username_re = 0x010403e9;
        /**  Do not translate. Regex used by AutoFill. 
 pt-BR, pt-PT 
         */
        public: static const int autofill_zip_4_re = 0x010403e1;
        /**  Label in a web form for "ZIP code" [CHAR-LIMIT=NONE]  
         */
        public: static const int autofill_zip_code = 0x01040404;
        /**  Do not translate. Regex used by AutoFill. 
 de-DE 
 es 
 fr-FR 
 it-IT 
 ja-JP 
 pt-BR, pt-PT 
 ru 
zh-CN 
 zh-TW 
         */
        public: static const int autofill_zip_code_re = 0x010403e0;
        /**   Strings for possible PreferenceActivity Back/Next buttons 
         */
        public: static const int back_button_label = 0x0104054b;
        /**  Displayed when a SIM PIN password is entered incorrectly. 
         */
        public: static const int badPin = 0x01040088;
        /**  Displayed when a SIM PUK password is entered incorrectly. 
         */
        public: static const int badPuk = 0x01040089;
        /**  [CHAR_LIMIT=NONE] Battery saver: Feature description 
         */
        public: static const int battery_saver_description = 0x0104067f;
        /**  String used to display the date. This is the string to say something happened more than 1 month ago. 
         */
        public: static const int beforeOneMonthDurationPast = 0x01040438;
        /**  Description of the bluetooth a2dp audio route. [CHAR LIMIT=50] 
         */
        public: static const int bluetooth_a2dp_audio_route_name = 0x010405be;
        /**  Message in bugreport dialog describing what it does [CHAR LIMIT=NONE] 
         */
        public: static const int bugreport_message = 0x010400f9;
        /**  Format for build summary info [CHAR LIMIT=NONE] 
         */
        public: static const int bugreport_status = 0x010400fa;
        /**  Take bug report menu title [CHAR LIMIT=NONE] 
         */
        public: static const int bugreport_title = 0x010400f8;
        /**  Suffix added to a number to signify size in bytes. 
         */
        public: static const int byteShort = 0x0104006b;
        /**  Preference framework strings. 
         */
        public: static const int cancel = 0x01040000;
        public: static const int candidates_style = 0x010404f9;
        /**  Description for the capability of an accessibility service to request enhanced web accessibility. 
         */
        public: static const int capability_desc_canRequestEnhancedWebAccessibility = 0x0104014a;
        /**  Description for the capability of an accessibility service to request to filter key events. 
         */
        public: static const int capability_desc_canRequestFilterKeyEvents = 0x0104014c;
        /**  Description for the capability of an accessibility service to request touch exploration. 
         */
        public: static const int capability_desc_canRequestTouchExploration = 0x01040148;
        /**  Description for the capability of an accessibility service to retrieve window content. 
         */
        public: static const int capability_desc_canRetrieveWindowContent = 0x01040146;
        /**  Title for the capability of an accessibility service to request enhanced web accessibility. 
         */
        public: static const int capability_title_canRequestEnhancedWebAccessibility = 0x01040149;
        /**  Title for the capability of an accessibility service to request to filter key events. 
         */
        public: static const int capability_title_canRequestFilterKeyEvents = 0x0104014b;
        /**  Title for the capability of an accessibility service to request touch exploration. 
         */
        public: static const int capability_title_canRequestTouchExploration = 0x01040147;
        /**  Title for the capability of an accessibility service to retrieve window content. 
         */
        public: static const int capability_title_canRetrieveWindowContent = 0x01040145;
        /**  Default text for a button that can be toggled on and off. 
         */
        public: static const int capital_off = 0x0104045f;
        /**  Default text for a button that can be toggled on and off. 
         */
        public: static const int capital_on = 0x0104045e;
        public: static const int car_mode_disable_notification_message = 0x01040548;
        /**  Strings for car mode notification 
 Shown when car mode is enabled 
         */
        public: static const int car_mode_disable_notification_title = 0x01040547;
        /**  Displayed when the call forwarding query was forwarded. 
         */
        public: static const int cfTemplateForwarded = 0x010400c7;
        /**  Displayed when the call forwarding query will be forwarded after some time. 
         */
        public: static const int cfTemplateForwardedTime = 0x010400c8;
        /**  Displayed when the call forwarding query was not able to be forwarded. 
         */
        public: static const int cfTemplateNotForwarded = 0x010400c6;
        /**  Displayed when the call forwarding query was set but forwarding is not enabled. 
         */
        public: static const int cfTemplateRegistered = 0x010400c9;
        /**  Displayed when the call forwarding query was set but forwarding is not enabled. 
         */
        public: static const int cfTemplateRegisteredTime = 0x010400ca;
        /**  Default title for the activity chooser, when one is not given. Android allows multiple activities to perform an action.  for example, there may be many ringtone pickers installed.  A dialog is shown to the user allowing him to pick which activity should be used.  This is the title. 
         */
        public: static const int chooseActivity = 0x0104046d;
        /**  title for the USB activity chooser. 
         */
        public: static const int chooseUsbActivity = 0x0104046e;
        /**  Choose Account Activity label 
         */
        public: static const int choose_account_label = 0x01040568;
        /**  Dialog title for user to select a different wallpaper from service list 
         */
        public: static const int chooser_wallpaper = 0x01040537;
        /**  Text displayed when the user selects the check box for setting default application.  See the "Use by default for this action" check box. 
         */
        public: static const int clearDefaultHintMsg = 0x0104046c;
        public: static const int common_last_name_prefixes = 0x0104005a;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int common_name = 0x010405a4;
        public: static const int common_name_conjunctions = 0x0104005b;
        public: static const int common_name_prefixes = 0x01040058;
        public: static const int common_name_suffixes = 0x01040059;
        /**  Label to show for a service that is running because it is providing conditions. 
         */
        public: static const int condition_provider_service_binding_label = 0x01040539;
        /**  Package name providing Hardware Activity-Recognition API support. Used only when
         config_enableActivityRecognitionHardwareOverlay is false. 
         */
        public: static const int config_activityRecognitionHardwarePackageName = 0x01040025;
        /**  Apps that are authorized to access shared accounts, overridden by product overlays 
         */
        public: static const int config_appsAuthorizedForSharedAccounts = 0x01040043;
        /**  Class name of the framework account picker activity.
         Can be customized for other product types 
         */
        public: static const int config_chooseAccountActivity = 0x0104003e;
        /**  Class name of the account type and account picker activity.
         Can be customized for other product types 
         */
        public: static const int config_chooseTypeAndAccountActivity = 0x0104003f;
        /**  Name of the activity or service that prompts the user to reject, accept, or whitelist
         an adb host's public key, when an unwhitelisted host connects to the local adbd.
         Can be customized for other product types 
         */
        public: static const int config_customAdbPublicKeyConfirmationComponent = 0x01040041;
        /**  Component name of a custom ResolverActivity (Intent resolver) to be used instead of
         the default framework version. If left empty, then the framework version will be used.
         Example: com.google.android.myapp/.resolver.MyResolverActivity  
         */
        public: static const int config_customResolverActivity = 0x01040040;
        /**  Name of the CustomDialog that is used for VPN 
         */
        public: static const int config_customVpnConfirmDialogComponent = 0x01040042;
        /**  The default iface on which to monitor data use 
         */
        public: static const int config_datause_iface = 0x01040026;
        /**  Package name for default network scorer app; overridden by product overlays. 
         */
        public: static const int config_defaultNetworkScorerPackageName = 0x01040044;
        /**  IP address of the dns server to use if nobody else suggests one 
         */
        public: static const int config_default_dns_server = 0x01040028;
        /**  ComponentName of a dream to show whenever the system would otherwise have
         gone to sleep.  When the PowerManager is asked to go to sleep, it will instead
         try to start this dream if possible.  The dream should typically call startDozing()
         to put the display into a low power state and allow the application processor
         to be suspended.  When the dream ends, the system will go to sleep as usual.
         Specify the component name or an empty string if none.

         Note that doze dreams are not subject to the same start conditions as ordinary dreams.
         Doze dreams will run whenever the power manager is in a dozing state. 
         */
        public: static const int config_dozeComponent = 0x0104003b;
        /**  ComponentName of the default dream (Settings.Secure.DEFAULT_SCREENSAVER_COMPONENT) 
         */
        public: static const int config_dreamsDefaultComponent = 0x0104003a;
        /**  Regex of wired ethernet ifaces 
         */
        public: static const int config_ethernet_iface_regex = 0x01040018;
        /**  Configure ethernet tcp buffersizes in the form:
         rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max 
         */
        public: static const int config_ethernet_tcp_buffers = 0x0104003c;
        /**  Package name providing fused location support. Used only when
         config_enableFusedLocationOverlay is false. 
         */
        public: static const int config_fusedLocationProviderPackageName = 0x01040021;
        /**  Package name providing geocoder API support. Used only when
         config_enableGeocoderOverlay is false. 
         */
        public: static const int config_geocoderProviderPackageName = 0x01040023;
        /**  Package name providing geofence API support. Used only when
         config_enableGeofenceOverlay is false. 
         */
        public: static const int config_geofenceProviderPackageName = 0x01040024;
        /**  Package name providing Hardware Flp. Used only when
         config_enableHardwareFlpOverlay is false. 
         */
        public: static const int config_hardwareFlpPackageName = 0x01040022;
        /**  Path to an ISO image to be shared with via USB mass storage.
         This is intended to allow packaging drivers or tools for installation on a PC. 
         */
        public: static const int config_isoImagePath = 0x01040033;
        /**  MMS user agent string 
 MMS user agent string 
         */
        public: static const int config_mms_user_agent = 0x01040031;
        /**  MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
 MMS user agent prolfile url 
         */
        public: static const int config_mms_user_agent_profile_url = 0x01040032;
        /**  Package name providing network location support. Used only when
         config_enableNetworkLocationOverlay is false. 
         */
        public: static const int config_networkLocationProviderPackageName = 0x01040020;
        /**  Remote server that can provide NTP responses. 
         */
        public: static const int config_ntpServer = 0x01040034;
        /**  Flag indicating which package name can access the persistent data partition 
         */
        public: static const int config_persistentDataPackageName = 0x01040045;
        /**  String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,270,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
 String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 
         */
        public: static const int config_tether_apndata = 0x01040019;
        /**  The URL that should be sent in an x-wap-profile header with an HTTP request,
         as defined in the Open Mobile Alliance User Agent Profile specification
         OMA-TS-UAProf-V2_0-20060206-A Section 8.1.1.1. If the URL contains a '%s'
         format string then that substring will be replaced with the value of
         Build.MODEL. The format string shall not be escaped. 
         */
        public: static const int config_useragentprofile_url = 0x01040030;
        /**  Package name providing WebView implementation. 
         */
        public: static const int config_webViewPackageName = 0x01040046;
        /**  Device type information conforming to Annex B format in WiFi Direct specification.
         The default represents a dual-mode smartphone 
         */
        public: static const int config_wifi_p2p_device_type = 0x0104001a;
        public: static const int config_wifi_random_mac_oui = 0x0104001b;
        /**  Configure wifi tcp buffersizes in the form:
         rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max 
         */
        public: static const int config_wifi_tcp_buffers = 0x0104003d;
        /**  Name of the wimax manager class 
         */
        public: static const int config_wimaxManagerClassname = 0x01040037;
        /**  Location of the wimax native library locaiton 
         */
        public: static const int config_wimaxNativeLibLocation = 0x01040036;
        /**  Name of the wimax service class 
         */
        public: static const int config_wimaxServiceClassname = 0x01040038;
        /**  Location of the wimax framwork jar location 
         */
        public: static const int config_wimaxServiceJarLocation = 0x01040035;
        /**  Name of the wimax state tracker clas 
         */
        public: static const int config_wimaxStateTrackerClassname = 0x01040039;
        /**  Title of a button to open the settings to enable or disable keyboards, also known as input methods [CHAR LIMIT=30] 
         */
        public: static const int configure_input_methods = 0x010404f2;
        /**  A notification is shown when there is a sync error.  This is the text that will scroll through the notification bar (will be seen by the user as he uses another application). 
         */
        public: static const int contentServiceSync = 0x010400dc;
        /**  A notification is shown when there is a sync error.  This is the title of the notification.  It will be seen in the pull-down notification tray. 
         */
        public: static const int contentServiceSyncNotificationTitle = 0x010400dd;
        /**  A notification is shown when there is a sync error.  This is the message of the notification.  It describes the error, in this case is there were too many deletes. The argument is the type of content, for example Gmail or Calendar. It will be seen in the pull-down notification tray. 
         */
        public: static const int contentServiceTooManyDeletesNotificationDesc = 0x010400de;
        /**  Slide lock screen 
 Description of the sliding handle in the Slide unlock screen. [CHAR LIMIT=NONE] 
         */
        public: static const int content_description_sliding_handle = 0x01040586;
        /**  Text spoken when the user is performing a gesture that will enable accessibility. [CHAR LIMIT=none] 
         */
        public: static const int continue_to_enable_accessibility = 0x010405f4;
        /**  Item on EditText context menu. This action is used to cut selected the text into the clipboard. 
         */
        public: static const int copy = 0x01040001;
        /**  Item on EditText context menu. This action is used to copy a URL from the edit field into the clipboard. 
         */
        public: static const int copyUrl = 0x01040002;
        /**  This string appears (on two lines) when you type a number into contacts search, to let you create a contact whose phone number is the number you typed.  The first line will be in bigger type than the second. 
         */
        public: static const int create_contact_using = 0x01040529;
        /**  Item on EditText context menu.  This action is used to cut selected the text into the clipboard.  
         */
        public: static const int cut = 0x01040003;
        /**  Notification title when 2G-3G data usage has exceeded limit threshold. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_3g_limit_snoozed_title = 0x0104059a;
        /**  Notification title when 2G-3G data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_3g_limit_title = 0x01040595;
        /**  Notification title when 4G data usage has exceeded limit threshold. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_4g_limit_snoozed_title = 0x0104059b;
        /**  Notification title when 4G data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_4g_limit_title = 0x01040596;
        /**  Notification body when data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_limit_body = 0x01040599;
        /**  Notification body when data usage has exceeded limit threshold. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_limit_snoozed_body = 0x0104059e;
        /**  Notification title when mobile data usage has exceeded limit threshold. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_mobile_limit_snoozed_title = 0x0104059c;
        /**  Notification title when mobile data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_mobile_limit_title = 0x01040597;
        /**  Notification body when background data usage is limited. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_restricted_body = 0x010405a0;
        /**  Notification title when background data usage is limited. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_restricted_title = 0x0104059f;
        /**  Notification body when data usage has exceeded warning threshold. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_warning_body = 0x01040594;
        /**  Notification title when data usage has exceeded warning threshold. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_warning_title = 0x01040593;
        /**  Notification title when Wi-Fi data usage has exceeded limit threshold. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_wifi_limit_snoozed_title = 0x0104059d;
        /**  Notification title when Wi-Fi data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32] 
         */
        public: static const int data_usage_wifi_limit_title = 0x01040598;
        public: static const int date_and_time = 0x01040056;
        /**  Description of the button to decrease the DatePicker's day value. [CHAR LIMIT=NONE] 
         */
        public: static const int date_picker_decrement_day_button = 0x01040578;
        /**  Description of the button to decrease the DatePicker's month value. [CHAR LIMIT=NONE] 
         */
        public: static const int date_picker_decrement_month_button = 0x01040576;
        /**  Description of the button to decrease the DatePicker's year value. [CHAR LIMIT=NONE] 
         */
        public: static const int date_picker_decrement_year_button = 0x0104057a;
        /**  The title of the date picker dialog. [CHAR LIMIT=NONE] 
         */
        public: static const int date_picker_dialog_title = 0x010404ce;
        /**  Description of the button to increase the DatePicker's day value. [CHAR LIMIT=NONE] 
         */
        public: static const int date_picker_increment_day_button = 0x01040577;
        /**  DatePicker - accessibility support 
 Description of the button to increase the DatePicker's month value. [CHAR LIMIT=NONE] 
         */
        public: static const int date_picker_increment_month_button = 0x01040575;
        /**  Description of the button to increase the DatePicker's year value. [CHAR LIMIT=NONE] 
         */
        public: static const int date_picker_increment_year_button = 0x01040579;
        public: static const int date_time = 0x01040057;
        /**  Name of the button in the date/time picker to accept the date/time change 
         */
        public: static const int date_time_done = 0x010404d0;
        /**  Name of the button in the date/time picker to accept the date/time change 
         */
        public: static const int date_time_set = 0x010404cf;
        /**  Appened to express the value is this unit of time: singular day 
         */
        public: static const int day = 0x0104043e;
        /**  DO NOT TRANSLATE 
         */
        public: static const int day_of_week_label_typeface = 0x01040671;
        /** 
        Content description for the month and day selector in the date picker, which displays
        a selectable grid of days laid out by month.
        [CHAR LIMIT=50]
     
         */
        public: static const int day_picker_description = 0x01040667;
        /**  Appened to express the value is this unit of time: plural days 
         */
        public: static const int days = 0x0104043f;
        /**  The default journal mode to use use when Write-Ahead Logging is not active.
         Choices are: OFF, DELETE, TRUNCATE, PERSIST and MEMORY.
         PERSIST may improve performance by reducing how often journal blocks are
         reallocated (compared to truncation) resulting in better data block locality
         and less churn of the storage media. 
         */
        public: static const int db_default_journal_mode = 0x0104002d;
        /**  The database synchronization mode when using the default journal mode.
         FULL is safest and preserves durability at the cost of extra fsyncs.
         NORMAL also preserves durability in non-WAL modes and uses checksums to ensure
         integrity although there is a small chance that an error might go unnoticed.
         Choices are: FULL, NORMAL, OFF. 
         */
        public: static const int db_default_sync_mode = 0x0104002e;
        /**  The database synchronization mode when using Write-Ahead Logging.
         FULL is safest and preserves durability at the cost of extra fsyncs.
         NORMAL sacrifices durability in WAL mode because syncs are only performed before
         and after checkpoint operations.  If checkpoints are infrequent and power loss
         occurs, then committed transactions could be lost and applications might break.
         Choices are: FULL, NORMAL, OFF. 
         */
        public: static const int db_wal_sync_mode = 0x0104002f;
        public: static const int decline = 0x010404b1;
        /**  What the UI should display for "Msisdn" unless overridden by the SIM
         */
        public: static const int defaultMsisdnAlphaTag = 0x01040005;
        /**  What the UI should display for "voice mail" unless overridden by the SIM
         */
        public: static const int defaultVoiceMailAlphaTag = 0x01040004;
        /**  Name of the default audio route category. [CHAR LIMIT=50] 
         */
        public: static const int default_audio_route_category_name = 0x010405bd;
        /**  Name of the default audio route when nothing is connected to
         a headphone or other wired audio output jack. [CHAR LIMIT=50] 
         */
        public: static const int default_audio_route_name = 0x010405b9;
        /**  Name of the default audio route when an audio dock is connected. [CHAR LIMIT=50] 
         */
        public: static const int default_audio_route_name_dock_speakers = 0x010405bb;
        /**  Name of the default audio route when wired headphones are
         connected. [CHAR LIMIT=50] 
         */
        public: static const int default_audio_route_name_headphones = 0x010405ba;
        /**  Name of the default media route when HDMI is connected. [CHAR LIMIT=50] 
         */
        public: static const int default_media_route_name_hdmi = 0x010405bc;
        /**  Default SMS Application. This will be the default SMS application when
         the phone first boots. The user can then change the default app to oe
         of their choosing.
         This can be overridden for devices where a different default SMS
         application is desired. 
         */
        public: static const int default_sms_application = 0x01040027;
        /**  Component name of the default wallpaper. This will be ImageWallpaper if not
         specified 
         */
        public: static const int default_wallpaper_component = 0x0104001e;
        /**  Item on EditText pop-up window. This action is used to delete the text that the user recently added. [CHAR LIMIT=15] 
         */
        public: static const int delete_ = 0x01040452;
        /**  Option to delete the highlighted part of the text from the suggestion popup. [CHAR LIMIT=25] 
         */
        public: static const int deleteText = 0x01040455;
        /**  Accessibility announcement when a number that had been typed in is deleted [CHAR_LIMIT=NONE] 
         */
        public: static const int deleted_key = 0x0104066c;
        public: static const int deny = 0x0104052e;
        public: static const int description_direction_down = 0x01040690;
        public: static const int description_direction_left = 0x01040691;
        public: static const int description_direction_right = 0x01040692;
        public: static const int description_direction_up = 0x0104068f;
        public: static const int description_target_camera = 0x01040694;
        public: static const int description_target_search = 0x01040697;
        public: static const int description_target_silent = 0x01040695;
        public: static const int description_target_soundon = 0x01040696;
        public: static const int description_target_unlock = 0x01040693;
        /**  Description of the unlock handle in the Slide unlock screen for tablets. [CHAR LIMIT=NONE] 
         */
        public: static const int description_target_unlock_tablet = 0x01040587;
        /**  This string appears (on two lines) when you type a number into contacts search, to let you dial the phone number you typed.  The first line will be in bigger type than the second. 
         */
        public: static const int dial_number_using = 0x01040528;
        /**  This is the generic "attention" string to be used in attention dialogs.  Typically
         combined with setIconAttribute(android.R.attr.alertDialogIcon)
         (or setIcon(android.R.drawable.ic_dialog_alert) on legacy versions of the platform) 
         */
        public: static const int dialog_alert_title = 0x01040014;
        /**  Display manager service 
 Name of the built-in display.  [CHAR LIMIT=50] 
         */
        public: static const int display_manager_built_in_display_name = 0x010405cb;
        /**  Name of the HDMI display.  [CHAR LIMIT=50] 
         */
        public: static const int display_manager_hdmi_display_name = 0x010405cc;
        /**  Name of the N'th overlay display for testing.  [CHAR LIMIT=50] 
         */
        public: static const int display_manager_overlay_display_name = 0x010405cd;
        /**  Title text to append when the display is secure.  [CHAR LIMIT=30] 
         */
        public: static const int display_manager_overlay_display_secure_suffix = 0x010405cf;
        /**  Title text to show within the overlay.  [CHAR LIMIT=50] 
         */
        public: static const int display_manager_overlay_display_title = 0x010405ce;
        /**  USB_STORAGE_KILL_STORAGE_USERS dialog message text 
         */
        public: static const int dlg_confirm_kill_storage_users_text = 0x010404e3;
        /**  USB_STORAGE_KILL_STORAGE_USERS dialog  
         */
        public: static const int dlg_confirm_kill_storage_users_title = 0x010404e2;
        /**  USB_STORAGE_ERROR dialog  dialog
         */
        public: static const int dlg_error_title = 0x010404e4;
        /**  USB_STORAGE_ERROR dialog  ok button
         */
        public: static const int dlg_ok = 0x010404e5;
        /**  Label for button to confirm chosen date or time [CHAR LIMIT=30] 
         */
        public: static const int done_label = 0x01040662;
        /**  Toast for double-tap 
         */
        public: static const int double_tap_toast = 0x010403d1;
        /**  [CHAR_LIMIT=NONE] Zen mode: Condition summary for built-in downtime condition, if active 
         */
        public: static const int downtime_condition_summary = 0x01040680;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration of one day with one hours 
         */
        public: static const int durationDayHour = 0x01040074;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration of one day with hours 
         */
        public: static const int durationDayHours = 0x01040073;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration in days 
         */
        public: static const int durationDays = 0x01040072;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration of one hour with one minute 
         */
        public: static const int durationHourMinute = 0x01040077;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration of one hour with minutes 
         */
        public: static const int durationHourMinutes = 0x01040076;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration in hours 
         */
        public: static const int durationHours = 0x01040075;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration of one minute with one second 
         */
        public: static const int durationMinuteSecond = 0x0104007a;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration of one minute with seconds 
         */
        public: static const int durationMinuteSeconds = 0x01040079;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration in minutes 
         */
        public: static const int durationMinutes = 0x01040078;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration of one second 
         */
        public: static const int durationSecond = 0x0104007c;
        /**  [CHAR_LIMIT=10] Suffix added to signify duration in seconds 
         */
        public: static const int durationSeconds = 0x0104007b;
        /**  Title for EditText context menu [CHAR LIMIT=20] 
         */
        public: static const int editTextMenuTitle = 0x01040457;
        /**  Format string for times like "1:43:33" (1 hour, 43 minutes, 33 seconds) 
 no translation found for elapsed_time_short_format_h_mm_ss (2997059666628785039) 
         */
        public: static const int elapsed_time_short_format_h_mm_ss = 0x01040450;
        /**  Format string for durations like "01:23" (1 minute, 23 seconds) 
 no translation found for elapsed_time_short_format_mm_ss (1294409362352514646) 
         */
        public: static const int elapsed_time_short_format_mm_ss = 0x0104044f;
        /**  Used to replace a range of characters in text that is too wide
         for the space allocated to it (three dots). 
         */
        public: static const int ellipsis = 0x0104007d;
        /**  Used to replace a range of characters in text that is too wide
         for the space allocated to it (two dots). 
         */
        public: static const int ellipsis_two_dots = 0x0104007e;
        /**  Custom email type 
         */
        public: static const int emailTypeCustom = 0x01040334;
        /**  Home email type 
         */
        public: static const int emailTypeHome = 0x01040335;
        /**  Mobile email type 
         */
        public: static const int emailTypeMobile = 0x01040338;
        /**  Other email type 
         */
        public: static const int emailTypeOther = 0x01040337;
        /**  Work email type 
         */
        public: static const int emailTypeWork = 0x01040336;
        /**  This can be used in any application wanting to disable the text "Emergency number" 
         */
        public: static const int emergency_call_dialog_number_for_display = 0x0104036b;
        /**  Shown in the lock screen when there is emergency calls only mode. 
         */
        public: static const int emergency_calls_only = 0x01040388;
        /**  How to display the lack of a phone number 
         */
        public: static const int emptyPhoneNumber = 0x01040006;
        /**  Displayed when user attempts to change SIM PIN1 without enabling PIN1. 
         */
        public: static const int enablePin = 0x0104008f;
        /**  Text spoken when the user stops preforming a gesture that would enable accessibility. [CHAR LIMIT=none] 
         */
        public: static const int enable_accessibility_canceled = 0x010405f6;
        /**  Summary for a warning message about the interaction model changes after allowing an accessibility
         service to put the device into explore by touch mode, displayed as a dialog message when
         the user selects to enables the service. (default). [CHAR LIMIT=NONE] 
         */
        public: static const int enable_explore_by_touch_warning_message = 0x01040436;
        /**  Title for a warning message about the interaction model changes after allowing an accessibility
         service to put the device into explore by touch mode, displayed as a dialog message when
         the user selects to enables the service. (default). [CHAR LIMIT=45] 
         */
        public: static const int enable_explore_by_touch_warning_title = 0x01040435;
        /**  Message informing user that the change was disallowed by an administrator. [CHAR LIMIT=none] 
         */
        public: static const int error_message_change_not_allowed = 0x010405fb;
        /**  Error message title [CHAR LIMIT=35] 
         */
        public: static const int error_message_title = 0x010405fa;
        /**  Label for an anniversary event  [CHAR LIMIT=20] 
         */
        public: static const int eventTypeAnniversary = 0x01040332;
        /**  Label for a birthday event  [CHAR LIMIT=20] 
         */
        public: static const int eventTypeBirthday = 0x01040331;
        /**  Label for custom events  [CHAR LIMIT=20] 
         */
        public: static const int eventTypeCustom = 0x01040330;
        /**  Label for other events  [CHAR LIMIT=20] 
         */
        public: static const int eventTypeOther = 0x01040333;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int expires_on = 0x010405aa;
        public: static const int ext_media_badremoval_notification_message = 0x01040501;
        /**  Shown when external media is unsafely removed 
         */
        public: static const int ext_media_badremoval_notification_title = 0x01040500;
        public: static const int ext_media_checking_notification_message = 0x010404fb;
        /**  Shown when external media is being checked 
         */
        public: static const int ext_media_checking_notification_title = 0x010404fa;
        public: static const int ext_media_nofs_notification_message = 0x010404fd;
        /**  Shown when external media is blank (or unsupported filesystem) 
         */
        public: static const int ext_media_nofs_notification_title = 0x010404fc;
        public: static const int ext_media_nomedia_notification_message = 0x01040505;
        /**  Shown when external media is missing 
         */
        public: static const int ext_media_nomedia_notification_title = 0x01040504;
        public: static const int ext_media_safe_unmount_notification_message = 0x01040503;
        /**  Shown when external media has been safely removed 
         */
        public: static const int ext_media_safe_unmount_notification_title = 0x01040502;
        public: static const int ext_media_unmountable_notification_message = 0x010404ff;
        /**  Shown when external media is unmountable (corrupt)) 
         */
        public: static const int ext_media_unmountable_notification_title = 0x010404fe;
        /**  See EXTMEDIA_FORMAT.    This is the button text to format the sd card. 
         */
        public: static const int extmedia_format_button_format = 0x010404ed;
        /**  See EXTMEDIA_FORMAT.   This is the message. 
         */
        public: static const int extmedia_format_message = 0x010404ec;
        /**  See EXTMEDIA_FORMAT.  EXTMEDIA_FORMAT_DIALOG:  After the user selects the notification, a dialog is shown asking if he wants to format the SD card.  This is the title. 
         */
        public: static const int extmedia_format_title = 0x010404eb;
        /**  Button text for the edit menu in input method extract mode. [CHAR LIMIT=16] 
         */
        public: static const int extract_edit_menu_button = 0x01040592;
        /**  Shown when face unlock failed multiple times so we're just using the backup 
         */
        public: static const int faceunlock_multiple_failures = 0x01040376;
        /**  Title of the alert when something went wrong in the factory test. 
         */
        public: static const int factorytest_failed = 0x010403c4;
        /**  Error message displayed when the factory test could not be started. 
         */
        public: static const int factorytest_no_action = 0x010403c6;
        /**  Error message displayed when a non-system application tries to start a factory test. 
         */
        public: static const int factorytest_not_system = 0x010403c5;
        /**  Button to restart the device after the factory test. 
         */
        public: static const int factorytest_reboot = 0x010403c7;
        public: static const int fast_scroll_alphabet = 0x010404f7;
        public: static const int fast_scroll_numeric_alphabet = 0x010404f8;
        /**  Displayed when a feature code (non-phone number) is dialed and completes successfully. 
         */
        public: static const int fcComplete = 0x010400cb;
        /**  Displayed when a feature code (non-phone number) is dialed and completes unsuccessfully. 
         */
        public: static const int fcError = 0x010400cc;
        /**  Format string used to add a suffix like "KB" or "MB" to a number
         to display a size in kilobytes, megabytes, or other size units.
         Some languages (like French) will want to add a space between
         the placeholders. 
         */
        public: static const int fileSizeSuffix = 0x01040071;
        /**  ActionBar action to use the current selection to open the Find on page functionality [CHAR LIMIT=10]
         */
        public: static const int find = 0x0104055a;
        /**  ActionBar action to find the next match in the page [CHAR LIMIT=24] 
         */
        public: static const int find_next = 0x0104055c;
        /**  Find dialog hint text.  Also used in the menu item to open find on page [CHAR LIMIT=NONE] 
         */
        public: static const int find_on_page = 0x0104054f;
        /**  ActionBar action to find the previous match in the page [CHAR LIMIT=24] 
         */
        public: static const int find_previous = 0x0104055d;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int fingerprints = 0x010405ac;
        public: static const int font_family_body_1_material = 0x01040068;
        public: static const int font_family_body_2_material = 0x01040067;
        public: static const int font_family_button_material = 0x0104006a;
        public: static const int font_family_caption_material = 0x01040069;
        public: static const int font_family_display_1_material = 0x01040062;
        public: static const int font_family_display_2_material = 0x01040061;
        public: static const int font_family_display_3_material = 0x01040060;
        public: static const int font_family_display_4_material = 0x0104005f;
        public: static const int font_family_headline_material = 0x01040063;
        public: static const int font_family_menu_material = 0x01040066;
        public: static const int font_family_subhead_material = 0x01040065;
        public: static const int font_family_title_material = 0x01040064;
        /**  Button allowing the user to close an application that is not responding. This will kill the application. 
         */
        public: static const int force_close = 0x01040478;
        /**  Text for message to user that an error happened when formatting SD card [CHAR LIMIT=NONE] 
         */
        public: static const int format_error = 0x01040553;
        /**  Message to show when an intent automatically switches users into the personal profile. 
         */
        public: static const int forward_intent_to_owner = 0x01040531;
        /**  Message to show when an intent automatically switches users into a work profile. 
         */
        public: static const int forward_intent_to_work = 0x01040532;
        /**  Shown in gadget hosts (e.g. the home screen) when there was an error inflating
    the gadget. 
         */
        public: static const int gadget_host_error_inflating = 0x01040520;
        /**  Suffix added to a number to signify size in gigabytes. 
         */
        public: static const int gigabyteShort = 0x0104006e;
        /**  label for item that generates a bug report in the phone options dialog 
         */
        public: static const int global_action_bug_report = 0x010400f7;
        /**  label for item that locks the phone in the phone options dialog 
         */
        public: static const int global_action_lock = 0x010400f5;
        /**  label for item that locks the phone and enforces that it can't be unlocked without entering a credential. [CHAR LIMIT=15] 
         */
        public: static const int global_action_lockdown = 0x01040102;
        /**  label for item that turns off power in phone options dialog 
         */
        public: static const int global_action_power_off = 0x010400f6;
        /**  label for item that launches settings in phone options dialog [CHAR LIMIT=15]
         */
        public: static const int global_action_settings = 0x01040101;
        /**  status message in phone options dialog for when silent mode is disabled 
         */
        public: static const int global_action_silent_mode_off_status = 0x010400fd;
        /**  status message in phone options dialog for when silent mode is enabled 
         */
        public: static const int global_action_silent_mode_on_status = 0x010400fc;
        /**  label for item that enables silent mode in phone options dialog 
         */
        public: static const int global_action_toggle_silent_mode = 0x010400fb;
        /**  Title of the Global Actions Dialog 
         */
        public: static const int global_actions = 0x010400f4;
        /**  status message in phone options dialog for when airplane mode is off 
         */
        public: static const int global_actions_airplane_mode_off_status = 0x01040100;
        /**  status message in phone options dialog for when airplane mode is on 
         */
        public: static const int global_actions_airplane_mode_on_status = 0x010400ff;
        /**  label for item that toggles airplane mode 
         */
        public: static const int global_actions_toggle_airplane_mode = 0x010400fe;
        /**  Network positioning notification message. The name of the user (e.g. John Doe) and
         service (SUPL-service) who sent the request is shown as dynamic strings.
         Translation should not be longer than master text. 
         */
        public: static const int gpsNotifMessage = 0x01040560;
        /**  Network positioning notification ticker. The name of the user (e.g. John Doe) who sent
         the request is shown as a dynamic string. 
         */
        public: static const int gpsNotifTicker = 0x0104055e;
        /**  Network positioning notification and verification title to inform the user about
         an incoming location request. 
         */
        public: static const int gpsNotifTitle = 0x0104055f;
        /**  Network positioning verification No. Button to push to deny sharing of location
         information. 
         */
        public: static const int gpsVerifNo = 0x01040562;
        /**  Network positioning verification Yes. Button to push to share location information. 
         */
        public: static const int gpsVerifYes = 0x01040561;
        public: static const int grant_credentials_permission_message_footer = 0x0104052b;
        public: static const int grant_credentials_permission_message_header = 0x0104052a;
        public: static const int grant_permissions_header_text = 0x0104052c;
        /**  Label for granularity to traverse the content on an AccessibilityNodeInfo by character. Only spoken to the user. [CHAR LIMIT=NONE] 
         */
        public: static const int granularity_label_character = 0x010403be;
        /**  Label for granularity to traverse the content on an AccessibilityNodeInfo by line. Only spoken to the user. [CHAR LIMIT=NONE] 
         */
        public: static const int granularity_label_line = 0x010403c1;
        /**  Label for granularity to traverse the content on an AccessibilityNodeInfo by link. Only spoken to the user. [CHAR LIMIT=NONE] 
         */
        public: static const int granularity_label_link = 0x010403c0;
        /**  Label for granularity to traverse the content on an AccessibilityNodeInfo by word. Only spoken to the user. [CHAR LIMIT=NONE] 
         */
        public: static const int granularity_label_word = 0x010403bf;
        /**  The default character set for GsmAlphabet 
 Empty string means MBCS is not considered 
         */
        public: static const int gsm_alphabet_default_charset = 0x0104002c;
        /**  Title of the physical keyboard category in the input method selector [CHAR LIMIT=10] 
         */
        public: static const int hardware = 0x010404f4;
        /**  Notification text to tell the user that a heavy-weight application is running. 
         */
        public: static const int heavy_weight_notification = 0x01040489;
        /**  Notification details to tell the user that a heavy-weight application is running. 
         */
        public: static const int heavy_weight_notification_detail = 0x0104048a;
        /**  Descriptive text for switching to a new heavy-weight application. 
         */
        public: static const int heavy_weight_switcher_text = 0x0104048c;
        /**  Title of dialog prompting whether user wants to switch between heavy-weight apps. 
         */
        public: static const int heavy_weight_switcher_title = 0x0104048b;
        /**  Appened to express the value is this unit of time: singular hour 
         */
        public: static const int hour = 0x01040440;
        /**  A format string for 12-hour time of day, just the hour, not the minute, with lower-case "am" or "pm" (example: "3pm"). 
         */
        public: static const int hour_ampm = 0x010403c2;
        /**  A format string for 12-hour time of day, just the hour, not the minute, with capital "AM" or "PM" (example: "3PM"). 
         */
        public: static const int hour_cap_ampm = 0x010403c3;
        /** 
         Content description for the hour selector in the time picker, which displays
         selectable hours of the day along the inside edge of a circle, as in an analog clock.
         [CHAR LIMIT=50]
    
         */
        public: static const int hour_picker_description = 0x01040663;
        /**  Appened to express the value is this unit of time: plural hours 
         */
        public: static const int hours = 0x01040441;
        /**  Displayed when a web request failed with a generic network error. 
         */
        public: static const int httpError = 0x010400ce;
        /**  Displayed when a web request failed because the authentication failed. 
         */
        public: static const int httpErrorAuth = 0x010400d1;
        /**  Displayed when a web request failed because the URL isn't in a valid form. 
         */
        public: static const int httpErrorBadUrl = 0x01040007;
        /**  Displayed when a web request failed because there was a connection error. 
         */
        public: static const int httpErrorConnect = 0x010400d3;
        /**  Displayed when a web request failed because the a secure connection couldn't be made to the server.
         */
        public: static const int httpErrorFailedSslHandshake = 0x010400d7;
        /**  Displayed when a request failed because we failed to open the file. 
         */
        public: static const int httpErrorFile = 0x010400d8;
        /**  Displayed when a request failed because the file wasn't found. 
         */
        public: static const int httpErrorFileNotFound = 0x010400d9;
        /**  Displayed when a web request failed because there was an input or output error. 
         */
        public: static const int httpErrorIO = 0x010400d4;
        /**  Displayed when a web request failed because the URL could not be found. 
         */
        public: static const int httpErrorLookup = 0x010400cf;
        /**  Displayed when a web request was successful. 
         */
        public: static const int httpErrorOk = 0x010400cd;
        /**  Displayed when a web request failed because the authentication with the proxy failed. 
         */
        public: static const int httpErrorProxyAuth = 0x010400d2;
        /**  Displayed when a web request failed because the site tried to redirect us one too many times 
         */
        public: static const int httpErrorRedirectLoop = 0x010400d6;
        /**  Displayed when a web request failed because the request timed out 
         */
        public: static const int httpErrorTimeout = 0x010400d5;
        /**  Displayed when a request failed because there are too many requests right now. 
         */
        public: static const int httpErrorTooManyRequests = 0x010400da;
        /**  Displayed when a web request failed because the site's authentication scheme is not supported by us. 
         */
        public: static const int httpErrorUnsupportedAuthScheme = 0x010400d0;
        /**  Displayed when a web request failed because the protocol of the server is not supported. 
         */
        public: static const int httpErrorUnsupportedScheme = 0x01040008;
        /**  @hide DO NOT TRANSLATE. ICU pattern for "Mon, 14 January" 
         */
        public: static const int icu_abbrev_wday_month_day_no_year = 0x0104005d;
        /**  AIM IM protocol type 
         */
        public: static const int imProtocolAim = 0x01040342;
        /**  Custom IM protocol type 
         */
        public: static const int imProtocolCustom = 0x01040341;
        /**  Google Talk IM protocol type 
         */
        public: static const int imProtocolGoogleTalk = 0x01040347;
        /**  ICQ IM protocol type 
         */
        public: static const int imProtocolIcq = 0x01040348;
        /**  Jabber IM protocol type 
         */
        public: static const int imProtocolJabber = 0x01040349;
        /**  MSN IM protocol type 
         */
        public: static const int imProtocolMsn = 0x01040343;
        /**  NetMeeting IM protocol type 
         */
        public: static const int imProtocolNetMeeting = 0x0104034a;
        /**  QQ IM protocol type 
         */
        public: static const int imProtocolQq = 0x01040346;
        /**  Skype IM protocol type 
         */
        public: static const int imProtocolSkype = 0x01040345;
        /**  Yahoo IM protocol type 
         */
        public: static const int imProtocolYahoo = 0x01040344;
        /**  Custom IM address type 
         */
        public: static const int imTypeCustom = 0x0104033d;
        /**  Home IM address type 
         */
        public: static const int imTypeHome = 0x0104033e;
        /**  Other IM address type 
         */
        public: static const int imTypeOther = 0x01040340;
        /**  Work IM address type 
         */
        public: static const int imTypeWork = 0x0104033f;
        /**  Component name of the built in wallpaper used to display bitmap wallpapers. This must not be null. 
         */
        public: static const int image_wallpaper_component = 0x0104001f;
        /**  Long label for a button on a full-screen input method for an unknown action. 
         */
        public: static const int ime_action_default = 0x01040527;
        /**  Long label for a button on a full-screen input method for the "Done" action. 
         */
        public: static const int ime_action_done = 0x01040525;
        /**  Long label for a button on a full-screen input method for the "Go" action. 
         */
        public: static const int ime_action_go = 0x01040521;
        /**  Long label for a button on a full-screen input method for the "Next" action. 
         */
        public: static const int ime_action_next = 0x01040524;
        /**  [CHAR LIMIT=6] Long label for a button on a full-screen input method for the "Previous" action. 
         */
        public: static const int ime_action_previous = 0x01040526;
        /**  Long label for a button on a full-screen input method for the "Search" action. 
         */
        public: static const int ime_action_search = 0x01040522;
        /**  Long label for a button on a full-screen input method for the "Send" action. 
         */
        public: static const int ime_action_send = 0x01040523;
        /**  Title for the dialog used to display the user's IMEI number [CHAR LIMIT=10] 
         */
        public: static const int imei = 0x01040090;
        /**  Cling help message when hiding the navigation bar entering immersive mode [CHAR LIMIT=none] 
         */
        public: static const int immersive_mode_confirmation = 0x01040661;
        /**  EditText context menu 
         */
        public: static const int inputMethod = 0x01040456;
        /**  Label to show for a service that is running because it is an input method. 
         */
        public: static const int input_method_binding_label = 0x01040533;
        /**  Displayed when a SIM PIN password is too long or too short. 
         */
        public: static const int invalidPin = 0x0104008b;
        /**  Displayed when a SIM PUK password is too short. 
         */
        public: static const int invalidPuk = 0x0104008c;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int issued_by = 0x010405a7;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int issued_on = 0x010405a9;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int issued_to = 0x010405a3;
        /**  Accessibility description for the item that is currently selected. 
         */
        public: static const int item_is_selected = 0x0104066b;
        /**  Message in a javascript dialog asking if the user wishes to leave the current page 
         */
        public: static const int js_dialog_before_unload = 0x010403cf;
        /**  Text for the negative button on the unload javascript dialog 
         */
        public: static const int js_dialog_before_unload_negative_button = 0x010403ce;
        /**  Text for the positive button on the unload javascript dialog 
         */
        public: static const int js_dialog_before_unload_positive_button = 0x010403cd;
        /**  Title for the unload javascript dialog 
         */
        public: static const int js_dialog_before_unload_title = 0x010403cc;
        /**  Title for a JavaScript dialog. "The page at <url of current page> says:" 
         */
        public: static const int js_dialog_title = 0x010403ca;
        /**  Default title for a javascript dialog 
         */
        public: static const int js_dialog_title_default = 0x010403cb;
        /**  Announce that a headset is required to hear keyboard keys while typing a password. [CHAR LIMIT=NONE] 
         */
        public: static const int keyboard_headset_required_to_hear_password = 0x01040588;
        /**  The value of a keyboard key announced when accessibility is enabled and no headsed is used. [CHAR LIMIT=NONE] 
         */
        public: static const int keyboard_password_character_no_headset = 0x01040589;
        /**  KeyboardView - accessibility support 
 Description of the Alt button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public: static const int keyboardview_keycode_alt = 0x0104057b;
        /**  Description of the Cancel button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public: static const int keyboardview_keycode_cancel = 0x0104057c;
        /**  Description of the Delete button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public: static const int keyboardview_keycode_delete = 0x0104057d;
        /**  Description of the Done button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public: static const int keyboardview_keycode_done = 0x0104057e;
        /**  Description of the Enter button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public: static const int keyboardview_keycode_enter = 0x01040581;
        /**  Description of the Mode change button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public: static const int keyboardview_keycode_mode_change = 0x0104057f;
        /**  Description of the Shift button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public: static const int keyboardview_keycode_shift = 0x01040580;
        /**  Accessibility description of the lock media control widget. [CHAR_LIMIT=none] 
         */
        public: static const int keygaurd_accessibility_media_controls = 0x010403af;
        /**  Accessibility description of the add widget button. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_add_widget = 0x010403a7;
        /**  Accessibility description of the camera widget. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_camera = 0x010403ae;
        /**  Accessibility description of the button to expand the lock area. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_expand_lock_area = 0x010403b3;
        /**  Accessibility description of the face unlock. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_face_unlock = 0x010403b6;
        /**  Accessibility description of the password lock. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_password_unlock = 0x010403b8;
        /**  Accessibility description of the unlock pattern area. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_pattern_area = 0x010403b9;
        /**  Accessibility description of the pattern unlock. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_pattern_unlock = 0x010403b5;
        /**  Accessibility description of the pin lock. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_pin_unlock = 0x010403b7;
        /**  Accessibility description of the unlock slide area. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_slide_area = 0x010403ba;
        /**  Accessibility description of the slide unlock. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_slide_unlock = 0x010403b4;
        /**  Accessibility description of the lock screen status widget. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_status = 0x010403ad;
        /**  Accessibility description of the event of collapsing an unlock area. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_unlock_area_collapsed = 0x010403aa;
        /**  Accessibility description of the event of expanding an unlock area. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_unlock_area_expanded = 0x010403a9;
        /**  Accessibility description of the lock screen user selector widget. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_user_selector = 0x010403ac;
        /**  Accessibility description of a lock screen widget. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_widget = 0x010403ab;
        /**  Accessibility description sent when user changes the current lock screen widget. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_widget_changed = 0x010403a6;
        /**  Accessibility description of the a widget deletion event. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_widget_deleted = 0x010403b2;
        /**  Accessibility description of the empty sidget slot (place holder for a new widget). [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_widget_empty_slot = 0x010403a8;
        /**  Accessibility description of widget reordering end. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_widget_reorder_end = 0x010403b1;
        /**  Accessibility description of widget reordering start. [CHAR_LIMIT=none] 
         */
        public: static const int keyguard_accessibility_widget_reorder_start = 0x010403b0;
        /**  Instructions telling the user how to unlock the phone. 
         */
        public: static const int keyguard_label_text = 0x0104036a;
        /**  Instructions telling the user to enter their text password to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public: static const int keyguard_password_enter_password_code = 0x01040367;
        /**  Instructions telling the user to enter their SIM PIN to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public: static const int keyguard_password_enter_pin_code = 0x01040362;
        /**  Instructions telling the user to enter their PIN password to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public: static const int keyguard_password_enter_pin_password_code = 0x01040368;
        /**  Prompt to enter New SIM PIN in Edit Text Box in unlock screen 
         */
        public: static const int keyguard_password_enter_pin_prompt = 0x01040365;
        /**  Instructions telling the user to enter their SIM PUK to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public: static const int keyguard_password_enter_puk_code = 0x01040363;
        /**  Prompt to enter SIM PUK in Edit Text Box in unlock screen 
         */
        public: static const int keyguard_password_enter_puk_prompt = 0x01040364;
        /**  Displayed as hint in passwordEntry EditText on PasswordUnlockScreen [CHAR LIMIT=30]
         */
        public: static const int keyguard_password_entry_touch_hint = 0x01040366;
        /**  Instructions telling the user that they entered the wrong pin while trying
         to unlock the keyguard.  Displayed in one line in a large font.  
         */
        public: static const int keyguard_password_wrong_pin_code = 0x01040369;
        /**  Keyguard strings 
 Label shown on emergency call button in keyguard 
         */
        public: static const int kg_emergency_call_label = 0x010405d0;
        /**  Message shown when the user needs to confirm the PIN they just entered in the PUK screen 
         */
        public: static const int kg_enter_confirm_pin_hint = 0x010405dc;
        /**  Message shown in dialog when user is almost at the limit where they will be
    locked out and may have to enter an alternate username/password to unlock the phone 
         */
        public: static const int kg_failed_attempts_almost_at_login = 0x010405f0;
        /**  Message shown when user is almost at the limit of password attempts where the device will be wiped. 
         */
        public: static const int kg_failed_attempts_almost_at_wipe = 0x010405ee;
        /**  Message shown in dialog when user has exceeded the maximum attempts and the device will now be wiped 
         */
        public: static const int kg_failed_attempts_now_wiping = 0x010405ef;
        /**  Message shown in pattern unlock after some number of unsuccessful attempts 
         */
        public: static const int kg_forgot_pattern_button_text = 0x010405d1;
        /**  String shown in PUK screen when PIN codes don't match 
         */
        public: static const int kg_invalid_confirm_pin_hint = 0x010405e2;
        /**  Message shown when the user enters an invalid PUK code 
         */
        public: static const int kg_invalid_puk = 0x010405e1;
        /**  Message shown when the user enters an invalid SIM pin password in PUK screen 
         */
        public: static const int kg_invalid_sim_pin_hint = 0x010405df;
        /**  Message shown when the user enters an invalid PUK code in the PUK screen 
         */
        public: static const int kg_invalid_sim_puk_hint = 0x010405e0;
        /**  Hint text shown when user has too many failed password attempts in account unlock screen of keyguard 
         */
        public: static const int kg_login_account_recovery_hint = 0x010405e9;
        /**  Message shown while device checks username/password in account unlock screen of keyguard 
         */
        public: static const int kg_login_checking_password = 0x010405ea;
        /**  Instructions show in account unlock screen allowing user to enter their email password 
         */
        public: static const int kg_login_instructions = 0x010405e4;
        /**  Message shown when the user enters an invalid username/password combination in account unlock screen of keyguard 
         */
        public: static const int kg_login_invalid_input = 0x010405e8;
        /**  Hint shown in TextView in account unlock screen of keyguard 
         */
        public: static const int kg_login_password_hint = 0x010405e6;
        /**  Label shown on sign in button on account unlock screen of keyguard 
         */
        public: static const int kg_login_submit_button = 0x010405e7;
        /**  Message shown when the user exceeds the maximum number of pattern attempts 
         */
        public: static const int kg_login_too_many_attempts = 0x010405e3;
        /**  Hint shown in TextView in account unlock screen of keyguard 
         */
        public: static const int kg_login_username_hint = 0x010405e5;
        /**  Instructions for using the password unlock screen 
         */
        public: static const int kg_password_instructions = 0x010405d9;
        /**  Message shown when the user enters the wrong PIN code 
         */
        public: static const int kg_password_wrong_pin_code = 0x010405de;
        /**  Instructions for using the pattern unlock screen 
         */
        public: static const int kg_pattern_instructions = 0x010405d6;
        /**  Instructions for using the PIN unlock screen 
         */
        public: static const int kg_pin_instructions = 0x010405d8;
        /**  Hint shown in the PUK unlock screen PIN TextView 
         */
        public: static const int kg_puk_enter_pin_hint = 0x010405db;
        /**  Hint shown in the PUK screen that asks the user to enter the PUK code given to them by their provider 
         */
        public: static const int kg_puk_enter_puk_hint = 0x010405da;
        /**  The delete-widget drop target button text 
         */
        public: static const int kg_reordering_delete_drop_target_text = 0x010405f2;
        /**  Instructions for using the SIM PIN unlock screen 
         */
        public: static const int kg_sim_pin_instructions = 0x010405d7;
        /**  Message shown in dialog while the device is unlocking the SIM card 
         */
        public: static const int kg_sim_unlock_progress_dialog_message = 0x010405dd;
        /**  Sequence of characters used to separate message strings in keyguard. Typically just em-dash
         with spaces on either side. [CHAR LIMIT=3] 
         */
        public: static const int kg_text_message_separator = 0x010405f1;
        /**  Countdown message shown after too many failed unlock attempts 
         */
        public: static const int kg_too_many_failed_attempts_countdown = 0x010405d5;
        /**  Message shown in dialog when max number of attempts are reached for password screen of keyguard 
         */
        public: static const int kg_too_many_failed_password_attempts_dialog_message = 0x010405ec;
        public: static const int kg_too_many_failed_pattern_attempts_dialog_message = 0x010405ed;
        /**  Message shown in dialog when max number of attempts are reached for PIN screen of keyguard 
         */
        public: static const int kg_too_many_failed_pin_attempts_dialog_message = 0x010405eb;
        /**  Message shown when user enters wrong password 
         */
        public: static const int kg_wrong_password = 0x010405d3;
        /**  Message shown when user enters wrong pattern 
         */
        public: static const int kg_wrong_pattern = 0x010405d2;
        /**  Message shown when user enters wrong PIN 
         */
        public: static const int kg_wrong_pin = 0x010405d4;
        /**  Suffix added to a number to signify size in kilobytes. 
         */
        public: static const int kilobyteShort = 0x0104006c;
        /**  This is used to express that something has occurred within the last month 
         */
        public: static const int last_month = 0x01040439;
        /**  STK launch Browser 
         */
        public: static const int launchBrowserDefault = 0x010405b4;
        /**  [CHAR LIMIT=50] Title of the alert when application launches on top of another. 
         */
        public: static const int launch_warning_original = 0x0104047e;
        /**  [CHAR LIMIT=50] Title of the alert when application launches on top of another. 
         */
        public: static const int launch_warning_replace = 0x0104047d;
        /**  [CHAR LIMIT=25] Title of the alert when application launches on top of another. 
         */
        public: static const int launch_warning_title = 0x0104047c;
        /**  Delimeter used between each item in a textual list; for example "Alpha, Beta". [CHAR LIMIT=3] 
         */
        public: static const int list_delimeter = 0x010405b2;
        /**  Text shown by list fragment when waiting for data to display. 
         */
        public: static const int loading = 0x0104045d;
        /**  Used to replace %s in urls retreived from the signin server with locales.  For Some        
 devices we don't support all the locales we ship to and need to replace the '%s' with a    
 locale string based on mcc values.  By default (0-length string) we don't replace the %s   
 at all and later replace it with a locale string based on the users chosen locale          
 DO NOT TRANSLATE 
 A string used to replace %s in a URL to fill in the locale for countries  
 whose locale we don't natively support.  A 0 length string triggers no replacement.  Do not translate 
 A string used to replace %s in a URL to fill in the locale for countries  
 whose locale we don't natively support.  A 0 length string triggers no replacement. Do not translate 
 A string used to replace %s in a URL to fill in the locale for countries  
 whose locale we don't natively support.  A 0 length string triggers no replacement. Do not translate 
 A string used to replace %s in a URL to fill in the locale for countries  
 whose locale we don't natively support.  A 0 length string triggers no replacement. Do not translate 
 A string used to replace %s in a URL to fill in the locale for countries  
 whose locale we don't natively support.  A 0 length string triggers no replacement. Do not translate 
 A string used to replace %s in a URL to fill in the locale for countries  
 whose locale we don't natively support.  A 0 length string triggers no replacement. Do not translate 
         */
        public: static const int locale_replacement = 0x010404f0;
        /**  @hide DO NOT TRANSLATE. Control aspect ratio of lock pattern 
 @hide DO NOT TRANSLATE. There isn't enough room on mdpi devices, allow height to vary 
         */
        public: static const int lock_pattern_view_aspect = 0x0104005c;
        /**  Lock-to-app dialog description. 
         */
        public: static const int lock_to_app_description = 0x01040676;
        /**  Lock-to-app dialog description when in accessibility mode. 
         */
        public: static const int lock_to_app_description_accessible = 0x01040677;
        /**  Exting lock-to-app indication. 
         */
        public: static const int lock_to_app_exit = 0x0104067b;
        /**  Lock-to-app negative response. 
         */
        public: static const int lock_to_app_negative = 0x01040678;
        /**  Lock-to-app positive response. 
         */
        public: static const int lock_to_app_positive = 0x01040679;
        /**  Starting lock-to-app indication. 
         */
        public: static const int lock_to_app_start = 0x0104067a;
        /**  Lock-to-app dialog title. 
         */
        public: static const int lock_to_app_title = 0x01040675;
        /**  Notify use that they are in Lock-to-app 
         */
        public: static const int lock_to_app_toast = 0x01040672;
        /**  Notify use that they are in Lock-to-app in accessibility mode 
         */
        public: static const int lock_to_app_toast_accessible = 0x01040673;
        /**  Notify user that they are locked in lock-to-app mode 
         */
        public: static const int lock_to_app_toast_locked = 0x01040674;
        /**  Lock-to-app unlock password string 
         */
        public: static const int lock_to_app_unlock_password = 0x0104067e;
        /**  Lock-to-app unlock pattern string 
         */
        public: static const int lock_to_app_unlock_pattern = 0x0104067d;
        /**  Lock-to-app unlock pin string 
         */
        public: static const int lock_to_app_unlock_pin = 0x0104067c;
        /**  Accessibility description sent when user adds a cell to the pattern. [CHAR LIMIT=NONE]  
         */
        public: static const int lockscreen_access_pattern_cell_added = 0x010403a4;
        /**  Accessibility description sent when the pattern times out and is cleared. [CHAR LIMIT=NONE] 
         */
        public: static const int lockscreen_access_pattern_cleared = 0x010403a3;
        /**  Accessibility description sent when user completes drawing a pattern. [CHAR LIMIT=NONE] 
         */
        public: static const int lockscreen_access_pattern_detected = 0x010403a5;
        /**  Accessibility description sent when user starts drawing a lock pattern. [CHAR LIMIT=NONE] 
         */
        public: static const int lockscreen_access_pattern_start = 0x010403a2;
        /**  A short representation of charging information, e.g "34%" 
         */
        public: static const int lockscreen_battery_short = 0x01040379;
        /**  On the keyguard screen, it shows the carrier the phone is connected to.  This is displayed if the phone is not connected to a carrier.
         */
        public: static const int lockscreen_carrier_default = 0x0104036c;
        /**  When the lock screen is showing, the phone is plugged in and the battery is fully
         charged, say that it is charged. 
         */
        public: static const int lockscreen_charged = 0x01040378;
        /**  Button at the bottom of the unlock screen to make an emergency call. 
         */
        public: static const int lockscreen_emergency_call = 0x01040371;
        /**  For the unlock screen, informational message shown in dialog when user is almost at the limit
         where the device will be wiped. 
         */
        public: static const int lockscreen_failed_attempts_almost_at_wipe = 0x01040392;
        /**  For the unlock screen, informational message shown in dialog when user is almost at the limit
         where they will be locked out and may have to enter an alternate username/password to unlock the phone 
         */
        public: static const int lockscreen_failed_attempts_almost_glogin = 0x01040391;
        /**  For the unlock screen, informational message shown in dialog when user has exceeded the
        maximum attempts and the device will now be wiped 
         */
        public: static const int lockscreen_failed_attempts_now_wiping = 0x01040393;
        /**  On the unlock screen, message shown on button that appears once it's apparent the user may have forgotten
         their lock gesture 
         */
        public: static const int lockscreen_forgot_pattern_button_text = 0x01040395;
        /**  Hint displayed on account unlock screen to advise the user on how to recover the account. 
         */
        public: static const int lockscreen_glogin_account_recovery_hint = 0x0104039d;
        /**  Displayed in a progress dialog while a username and password are being checked. 
         */
        public: static const int lockscreen_glogin_checking_password = 0x0104039e;
        /**  Title of the unlock screen that uses your Google login and password when the user hit
         the 'forgot pattern' button.
         */
        public: static const int lockscreen_glogin_forgot_pattern = 0x01040396;
        /**  In the unlock screen, message telling the user that they need to use their Google login and password to unlock the phone 
         */
        public: static const int lockscreen_glogin_instructions = 0x01040398;
        /**  Displayed to the user when unlocking the phone with a username and password fails. 
         */
        public: static const int lockscreen_glogin_invalid_input = 0x0104039c;
        /**  Hint caption for the password field when unlocking the phone using login and password 
         */
        public: static const int lockscreen_glogin_password_hint = 0x0104039a;
        /**  Button to try to unlock the phone using username and password 
         */
        public: static const int lockscreen_glogin_submit_button = 0x0104039b;
        /**  Title of the unlock screen that uses your Google login and password when the user attempted
         too many patterns and we are forcing them to use their account instead. 
         */
        public: static const int lockscreen_glogin_too_many_attempts = 0x01040397;
        /**  Hint caption for the username field when unlocking the phone using login and password 
         */
        public: static const int lockscreen_glogin_username_hint = 0x01040399;
        /**  On the keyguard screen, when pattern lock is disabled, only tell them to press menu to unlock.  This is shown in small font at the bottom. 
         */
        public: static const int lockscreen_instructions_when_pattern_disabled = 0x0104036f;
        /**  when pattern lock is enabled, tell them about the emergency dial 
         */
        public: static const int lockscreen_instructions_when_pattern_enabled = 0x0104036e;
        /**  When the lock screen is showing and the battery is low, warn user to plug
         in the phone soon. 
         */
        public: static const int lockscreen_low_battery = 0x0104037a;
        /**  Shown in the lock screen to ask the user to insert a SIM card. 
         */
        public: static const int lockscreen_missing_sim_instructions = 0x0104037d;
        /**  Shown in the lock screen to ask the user to insert a SIM card when sim is missing or not readable. 
         */
        public: static const int lockscreen_missing_sim_instructions_long = 0x0104037e;
        /**  Shown in the lock screen when there is no SIM card. 
         */
        public: static const int lockscreen_missing_sim_message = 0x0104037c;
        /**  Shown in the lock screen when there is no SIM card. 
         */
        public: static const int lockscreen_missing_sim_message_short = 0x0104037b;
        /**  When the user inserts a sim card from an unsupported network, it becomes network
         locked 
         */
        public: static const int lockscreen_network_locked_message = 0x01040389;
        /**  On the unlock password screen, shown when the user enters the wrong lock password and must try again. 
         */
        public: static const int lockscreen_password_wrong = 0x01040375;
        /**  Shown to confirm that the user entered their lock pattern correctly. 
         */
        public: static const int lockscreen_pattern_correct = 0x01040373;
        /**  On the unlock pattern screen, shown at the top of the unlock screen to tell the user what to do. Below this text is the place for theu ser to draw the pattern. 
         */
        public: static const int lockscreen_pattern_instructions = 0x01040370;
        /**  On the unlock pattern screen, shown when the user enters the wrong lock pattern and must try again. 
         */
        public: static const int lockscreen_pattern_wrong = 0x01040374;
        /**  Shown in the lock screen to inform the user to SIM card is permanently disabled. 
         */
        public: static const int lockscreen_permanent_disabled_sim_instructions = 0x01040380;
        /**  Shown in the lock screen when SIM card is permanently disabled. 
         */
        public: static const int lockscreen_permanent_disabled_sim_message_short = 0x0104037f;
        /**  When the lock screen is showing and the phone plugged in, and the battery
         is not fully charged, show the current charge %.  
         */
        public: static const int lockscreen_plugged_in = 0x01040377;
        /**  Button at the bottom of the unlock screen that lets the user return to a call 
         */
        public: static const int lockscreen_return_to_call = 0x01040372;
        /**  Shown in the lock screen to tell the user that the screen is locked. 
         */
        public: static const int lockscreen_screen_locked = 0x0104036d;
        /**  Shown in the lock screen to tell the user that their SIM is locked and they must unlock it. 
         */
        public: static const int lockscreen_sim_locked_message = 0x0104038c;
        /**  Shown in the lock screen when the SIM has become PUK locked and the user must call customer care to unlock it. 
         */
        public: static const int lockscreen_sim_puk_locked_instructions = 0x0104038b;
        /**  When the user enters a wrong sim pin too many times, it becomes
         PUK locked (Pin Unlock Kode) 
         */
        public: static const int lockscreen_sim_puk_locked_message = 0x0104038a;
        /**  For the unlock screen, When the user enters a sim unlock code, it takes a little while to check
         whether it is valid, and to unlock the sim if it is valid.  we display a
         progress dialog in the meantime.  this is the emssage. 
         */
        public: static const int lockscreen_sim_unlock_progress_dialog_message = 0x0104038d;
        /**  Displayed on lock screen's right tab - turn sound off 
         */
        public: static const int lockscreen_sound_off_label = 0x010403a1;
        /**  Displayed on lock screen's right tab - turn sound on 
         */
        public: static const int lockscreen_sound_on_label = 0x010403a0;
        /**  On the unlock screen, countdown message shown while user is waiting to try again after too many
         failed attempts 
         */
        public: static const int lockscreen_too_many_failed_attempts_countdown = 0x01040394;
        /**  For the unlock screen, Information message shown in dialog when user has too many failed attempts at
         drawing the unlock pattern 
         */
        public: static const int lockscreen_too_many_failed_attempts_dialog_message = 0x0104038e;
        /**  For the unlock screen, Information message shown in dialog when user has too many failed attempts at
         entering the password 
         */
        public: static const int lockscreen_too_many_failed_password_attempts_dialog_message = 0x0104038f;
        /**  For the unlock screen, Information message shown in dialog when user has too many failed attempts at
         entering the PIN 
         */
        public: static const int lockscreen_too_many_failed_pin_attempts_dialog_message = 0x01040390;
        /**  Shown on transport control screens. Pressing button fast forwards playback [CHAR LIMIT=NONE]
         */
        public: static const int lockscreen_transport_ffw_description = 0x01040387;
        /**  Shown on transport control of lockscreen. Pressing button goes to next track. 
         */
        public: static const int lockscreen_transport_next_description = 0x01040382;
        /**  Shown on transport control of lockscreen. Pressing button pauses playback 
         */
        public: static const int lockscreen_transport_pause_description = 0x01040383;
        /**  Shown on transport control of lockscreen. Pressing button pauses playback 
         */
        public: static const int lockscreen_transport_play_description = 0x01040384;
        /**  Shown on transport control of lockscreen. Pressing button goes to previous track. 
         */
        public: static const int lockscreen_transport_prev_description = 0x01040381;
        /**  Shown on transport control screens. Pressing button rewinds playback [CHAR LIMIT=NONE]
         */
        public: static const int lockscreen_transport_rew_description = 0x01040386;
        /**  Shown on transport control of lockscreen. Pressing button pauses playback 
         */
        public: static const int lockscreen_transport_stop_description = 0x01040385;
        /**  Displayed on lock screen's left tab - unlock 
         */
        public: static const int lockscreen_unlock_label = 0x0104039f;
        /**  If the device is getting low on internal storage, a notification is shown to the user.  This is the message of that notification. 
         */
        public: static const int low_internal_storage_view_text = 0x01040459;
        /**  If the device does not have storage for the main system classes, a notification is shown to the user.  This is the message of that notification. 
         */
        public: static const int low_internal_storage_view_text_no_boot = 0x0104045a;
        /**  If the device is getting low on internal storage, a notification is shown to the user.  This is the title of that notification. 
         */
        public: static const int low_internal_storage_view_title = 0x01040458;
        /**  If MMS discovers there isn't much space left on the device, it will show a toast with this message. 
         */
        public: static const int low_memory = 0x010400df;
        /**  Label for a corporate profile in the intent forwarding app. 
         */
        public: static const int managed_profile_label = 0x01040106;
        /** 
        Used to wrap a label for content description for a work profile, e.g. "Work Email" instead
        of email when there are two email apps.
        [CHAR LIMIT=20]
     
         */
        public: static const int managed_profile_label_badge = 0x0104066d;
        /**  Display name for any time a piece of data refers to the owner of the phone. For example, this could be used in place of the phone's phone number. 
         */
        public: static const int me = 0x010400e3;
        public: static const int mediaSize_iso_a0 = 0x0104069d;
        public: static const int mediaSize_iso_a1 = 0x0104069e;
        public: static const int mediaSize_iso_a10 = 0x010406a7;
        public: static const int mediaSize_iso_a2 = 0x0104069f;
        public: static const int mediaSize_iso_a3 = 0x010406a0;
        public: static const int mediaSize_iso_a4 = 0x010406a1;
        public: static const int mediaSize_iso_a5 = 0x010406a2;
        public: static const int mediaSize_iso_a6 = 0x010406a3;
        public: static const int mediaSize_iso_a7 = 0x010406a4;
        public: static const int mediaSize_iso_a8 = 0x010406a5;
        public: static const int mediaSize_iso_a9 = 0x010406a6;
        public: static const int mediaSize_iso_b0 = 0x010406a8;
        public: static const int mediaSize_iso_b1 = 0x010406a9;
        public: static const int mediaSize_iso_b10 = 0x010406b2;
        public: static const int mediaSize_iso_b2 = 0x010406aa;
        public: static const int mediaSize_iso_b3 = 0x010406ab;
        public: static const int mediaSize_iso_b4 = 0x010406ac;
        public: static const int mediaSize_iso_b5 = 0x010406ad;
        public: static const int mediaSize_iso_b6 = 0x010406ae;
        public: static const int mediaSize_iso_b7 = 0x010406af;
        public: static const int mediaSize_iso_b8 = 0x010406b0;
        public: static const int mediaSize_iso_b9 = 0x010406b1;
        public: static const int mediaSize_iso_c0 = 0x010406b3;
        public: static const int mediaSize_iso_c1 = 0x010406b4;
        public: static const int mediaSize_iso_c10 = 0x010406bd;
        public: static const int mediaSize_iso_c2 = 0x010406b5;
        public: static const int mediaSize_iso_c3 = 0x010406b6;
        public: static const int mediaSize_iso_c4 = 0x010406b7;
        public: static const int mediaSize_iso_c5 = 0x010406b8;
        public: static const int mediaSize_iso_c6 = 0x010406b9;
        public: static const int mediaSize_iso_c7 = 0x010406ba;
        public: static const int mediaSize_iso_c8 = 0x010406bb;
        public: static const int mediaSize_iso_c9 = 0x010406bc;
        public: static const int mediaSize_na_gvrnmt_letter = 0x010406bf;
        public: static const int mediaSize_na_junior_legal = 0x010406c1;
        public: static const int mediaSize_na_ledger = 0x010406c2;
        public: static const int mediaSize_na_legal = 0x010406c0;
        public: static const int mediaSize_na_letter = 0x010406be;
        public: static const int mediaSize_na_tabloid = 0x010406c3;
        /**  Text for message to user that SD card has been removed while in use [CHAR LIMIT=NONE] 
         */
        public: static const int media_bad_removal = 0x01040554;
        /**  Text for message to user SD card is currently being checked [CHAR LIMIT=NONE] 
         */
        public: static const int media_checking = 0x01040555;
        /**  Text for message to user SD card has been removed [CHAR LIMIT=NONE] 
         */
        public: static const int media_removed = 0x01040556;
        /**  Content description of a MediaRouteButton for accessibility support.
        Cast is the standard android verb for sending content to a remote device. [CHAR LIMIT=50] 
         */
        public: static const int media_route_button_content_description = 0x010405c0;
        /**  Button to access extended settings.  [CHAR LIMIT=30] 
         */
        public: static const int media_route_chooser_extended_settings = 0x010405c4;
        public: static const int media_route_chooser_grouping_done = 0x01040698;
        /**  Placeholder text to show when no devices have been found. [CHAR LIMIT=50] 
         */
        public: static const int media_route_chooser_searching = 0x010405c3;
        /**  Title of the media route chooser dialog. [CHAR LIMIT=40] 
         */
        public: static const int media_route_chooser_title = 0x010405c1;
        /**  Title of the media route chooser dialog for selecting remote display routes. [CHAR LIMIT=40] 
         */
        public: static const int media_route_chooser_title_for_remote_display = 0x010405c2;
        /**  Button to disconnect from a media route.  [CHAR LIMIT=30] 
         */
        public: static const int media_route_controller_disconnect = 0x010405c5;
        /**  Status message for a remote route that is confirmed to be available for connection 
         */
        public: static const int media_route_status_available = 0x010405c8;
        /**  Status message for a remote route attempting to connect 
         */
        public: static const int media_route_status_connecting = 0x010405c7;
        /**  Status message for a remote route that is in use (and thus unavailabe) right now 
         */
        public: static const int media_route_status_in_use = 0x010405ca;
        /**  Status message for remote routes that are not available for connection right now 
         */
        public: static const int media_route_status_not_available = 0x010405c9;
        /**  Status message for remote routes attempting to scan/determine availability 
         */
        public: static const int media_route_status_scanning = 0x010405c6;
        /**  Text for message to user SD card is currently mounted on a computer [CHAR LIMIT=NONE] 
         */
        public: static const int media_shared = 0x01040557;
        /**  Text for message for an unknown external media state [CHAR LIMIT=NONE] 
         */
        public: static const int media_unknown_state = 0x01040558;
        /**  Chinese Dai Pa Kai media (paper) size: 275mm x 395mm (10.827" x 15.551") 
         */
        public: static const int mediasize_chinese_om_dai_pa_kai = 0x01040639;
        /**  Chinese Jurro Ku Kai media (paper) size: 275mm x 395mm (10.827" x 15.551") 
         */
        public: static const int mediasize_chinese_om_jurro_ku_kai = 0x0104063a;
        /**  Chinese Pa Kai media (paper) size: 146mm x 215mm (5.749" x 8.465") 
         */
        public: static const int mediasize_chinese_om_pa_kai = 0x01040638;
        /**  Chinese PRC 1 media (paper) size: 102mm x 165mm (4.015" x 6.496") 
         */
        public: static const int mediasize_chinese_prc_1 = 0x0104062d;
        /**  Chinese PRC 10 media (paper) size: 324mm x 458mm (12.756" x 18.032") 
         */
        public: static const int mediasize_chinese_prc_10 = 0x01040636;
        /**  Chinese RPC 16K media (paper) size: 146mm x 215mm (5.749" x 8.465") 
         */
        public: static const int mediasize_chinese_prc_16k = 0x01040637;
        /**  Chinese PRC 2 media (paper) size: 102mm x 176mm (4.015" x 6.929") 
         */
        public: static const int mediasize_chinese_prc_2 = 0x0104062e;
        /**  Chinese PRC 3 media (paper) size: 125mm x 176mm (4.921" x 6.929") 
         */
        public: static const int mediasize_chinese_prc_3 = 0x0104062f;
        /**  Chinese PRC 4 media (paper) size: 110mm x 208mm (4.330" x 8.189") 
         */
        public: static const int mediasize_chinese_prc_4 = 0x01040630;
        /**  Chinese PRC 5 media (paper) size: 110mm x 220mm (4.330" x 8.661") 
         */
        public: static const int mediasize_chinese_prc_5 = 0x01040631;
        /**  Chinese PRC 6 media (paper) size: 120mm x 320mm (4.724" x 12.599") 
         */
        public: static const int mediasize_chinese_prc_6 = 0x01040632;
        /**  Chinese PRC 7 media (paper) size: 160mm x 230mm (6.299" x 9.055") 
         */
        public: static const int mediasize_chinese_prc_7 = 0x01040633;
        /**  Chinese PRC 8 media (paper) size: 120mm x 309mm (4.724" x 12.165") 
         */
        public: static const int mediasize_chinese_prc_8 = 0x01040634;
        /**  Chinese PRC 9 media (paper) size: 229mm x 324mm (9.016" x 12.756") 
         */
        public: static const int mediasize_chinese_prc_9 = 0x01040635;
        /**  Chinese Roc 16k media (paper) size: 195mm x 270mm (7.677" x 10.629") 
         */
        public: static const int mediasize_chinese_roc_16k = 0x0104062c;
        /**  Chinese Roc 8k media (paper) size: 270mm x 390mm (10.629" x 15.3543") 
         */
        public: static const int mediasize_chinese_roc_8k = 0x0104062b;
        /**  Printing 
 ISO (European standard) A0 media (paper) size: 33.11" × 46.81" 
         */
        public: static const int mediasize_iso_a0 = 0x010405fe;
        /**  ISO (European standard) A1 media (paper) size: 23.39" × 33.11" 
         */
        public: static const int mediasize_iso_a1 = 0x010405ff;
        /**  ISO (European standard) A10 media (paper) size: 1.02" x 1.46" 
         */
        public: static const int mediasize_iso_a10 = 0x01040608;
        /**  ISO (European standard) A2 media (paper) size: 16.54" x 23.39" 
         */
        public: static const int mediasize_iso_a2 = 0x01040600;
        /**  ISO (European standard) A3 media (paper) size: 11.69" x 16.54" 
         */
        public: static const int mediasize_iso_a3 = 0x01040601;
        /**  ISO (European standard) A4 media (paper) size: 8.27" x 11.69" 
         */
        public: static const int mediasize_iso_a4 = 0x01040602;
        /**  ISO (European standard) A5 media (paper) size: 5.83" x 8.27" 
         */
        public: static const int mediasize_iso_a5 = 0x01040603;
        /**  ISO (European standard) A6 media (paper) size: 4.13" x 5.83" 
         */
        public: static const int mediasize_iso_a6 = 0x01040604;
        /**  ISO (European standard) A7 media (paper) size: 2.91" x 4.13" 
         */
        public: static const int mediasize_iso_a7 = 0x01040605;
        /**  ISO (European standard) A8 media (paper) size: 2.05" x 2.91" 
         */
        public: static const int mediasize_iso_a8 = 0x01040606;
        /**  ISO (European standard) A9 media (paper) size: 1.46" x 2.05" 
         */
        public: static const int mediasize_iso_a9 = 0x01040607;
        /**  ISO (European standard) B0 media (paper) size: 39.37" x 55.67" 
         */
        public: static const int mediasize_iso_b0 = 0x01040609;
        /**  ISO (European standard) B1 media (paper) size: 27.83" x 39.37" 
         */
        public: static const int mediasize_iso_b1 = 0x0104060a;
        /**  ISO (European standard) B10 media (paper) size: 1.22" x 1.73" 
         */
        public: static const int mediasize_iso_b10 = 0x01040613;
        /**  ISO (European standard) B2 media (paper) size - 19.69" x 27.83" 
         */
        public: static const int mediasize_iso_b2 = 0x0104060b;
        /**  ISO (European standard) B3 media (paper) size: 13.90" x 19.69" 
         */
        public: static const int mediasize_iso_b3 = 0x0104060c;
        /**  ISO (European standard) B4 media (paper) size: 9.84" x 13.90" 
         */
        public: static const int mediasize_iso_b4 = 0x0104060d;
        /**  ISO (European standard) B5 media (paper) size: 6.93" x 9.84" 
         */
        public: static const int mediasize_iso_b5 = 0x0104060e;
        /**  ISO (European standard) B6 media (paper) size: 4.92" x 6.93" 
         */
        public: static const int mediasize_iso_b6 = 0x0104060f;
        /**  ISO (European standard) B7 media (paper) size: 3.46" x 4.92" 
         */
        public: static const int mediasize_iso_b7 = 0x01040610;
        /**  ISO (European standard) B8 media (paper) size: 2.44" x 3.46" 
         */
        public: static const int mediasize_iso_b8 = 0x01040611;
        /**  ISO (European standard) B9 media (paper) size: 1.73" x 2.44" 
         */
        public: static const int mediasize_iso_b9 = 0x01040612;
        /**  ISO (European standard) C0 media (paper) size: 36.10" x 51.06" 
         */
        public: static const int mediasize_iso_c0 = 0x01040614;
        /**  ISO (European standard) C1 media (paper) size: 25.51" x 36.10" 
         */
        public: static const int mediasize_iso_c1 = 0x01040615;
        /**  ISO (European standard) C10 media (paper) size: 1.10" x 1.57" 
         */
        public: static const int mediasize_iso_c10 = 0x0104061e;
        /**  ISO (European standard) C2 media (paper) size: 18.03" x 25.51" 
         */
        public: static const int mediasize_iso_c2 = 0x01040616;
        /**  ISO (European standard) C3 media (paper) size: 12.76" x 18.03" 
         */
        public: static const int mediasize_iso_c3 = 0x01040617;
        /**  ISO (European standard) C4 media (paper) size: 9.02" x 12.76" 
         */
        public: static const int mediasize_iso_c4 = 0x01040618;
        /**  ISO (European standard) C5 media (paper) size: 6.38" x 9.02" 
         */
        public: static const int mediasize_iso_c5 = 0x01040619;
        /**  ISO (European standard) C6 media (paper) size: 4.49" x 6.38" 
         */
        public: static const int mediasize_iso_c6 = 0x0104061a;
        /**  ISO (European standard) C7 media (paper) size: 3.19" x 4.49" 
         */
        public: static const int mediasize_iso_c7 = 0x0104061b;
        /**  ISO ISO C8 media (paper) size: 2.24" x 3.19" 
         */
        public: static const int mediasize_iso_c8 = 0x0104061c;
        /**  ISO ISO C9 media (paper) size: 1.57" x 2.24" 
         */
        public: static const int mediasize_iso_c9 = 0x0104061d;
        /**  Japanese Chou2 media (paper) size: 111.1mm x 146mm (4.374" x 5.748") 
         */
        public: static const int mediasize_japanese_chou2 = 0x01040649;
        /**  Japanese Chou3 media (paper) size: 120mm x 235mm (4.724" x 9.252") 
         */
        public: static const int mediasize_japanese_chou3 = 0x01040648;
        /**  Japanese Chou4 media (paper) size: 90mm x 205mm (3.543" x 8.071") 
         */
        public: static const int mediasize_japanese_chou4 = 0x01040647;
        /**  Japanese Hagaki media (paper) size: 100mm x 148mm (3.937" x 5.827") 
         */
        public: static const int mediasize_japanese_hagaki = 0x0104064a;
        /**  Japanese JIS B0 media (paper) size: 1030mm x 1456mm (40.551" x 57.323") 
         */
        public: static const int mediasize_japanese_jis_b0 = 0x01040645;
        /**  Japanese JIS B1 media (paper) size: 728mm x 1030mm (28.661" x 40.551") 
         */
        public: static const int mediasize_japanese_jis_b1 = 0x01040644;
        /**  Japanese JIS B10 media (paper) size: 32mm x 45mm (1.259" x 1.772") 
         */
        public: static const int mediasize_japanese_jis_b10 = 0x0104063b;
        /**  Japanese JIS B2 media (paper) size: 515mm x 728mm (20.276" x 28.661") 
         */
        public: static const int mediasize_japanese_jis_b2 = 0x01040643;
        /**  Japanese JIS B3 media (paper) size: 364mm x 515mm (14.331" x 20.276") 
         */
        public: static const int mediasize_japanese_jis_b3 = 0x01040642;
        /**  Japanese JIS B4 media (paper) size: 257mm x 364mm (10.118" x 14.331") 
         */
        public: static const int mediasize_japanese_jis_b4 = 0x01040641;
        /**  Japanese JIS B5 media (paper) size: 182mm x 257mm (7.165" x 10.118") 
         */
        public: static const int mediasize_japanese_jis_b5 = 0x01040640;
        /**  Japanese JIS B6 media (paper) size: 128mm x 182mm (5.049" x 7.165") 
         */
        public: static const int mediasize_japanese_jis_b6 = 0x0104063f;
        /**  Japanese JIS B7 media (paper) size: 91mm x 128mm (3.583" x 5.049") 
         */
        public: static const int mediasize_japanese_jis_b7 = 0x0104063e;
        /**  Japanese JIS B8 media (paper) size: 64mm x 91mm (2.52" x 3.583") 
         */
        public: static const int mediasize_japanese_jis_b8 = 0x0104063d;
        /**  Japanese JIS B9 media (paper) size: 45mm x 64mm (1.772" x 2.52") 
         */
        public: static const int mediasize_japanese_jis_b9 = 0x0104063c;
        /**  Japanese JIS Exec media (paper) size: 216mm x 330mm (8.504" x 12.992") 
         */
        public: static const int mediasize_japanese_jis_exec = 0x01040646;
        /**  Japanese Kahu media (paper) size: 240mm x 322.1mm (9.449" x 12.681") 
         */
        public: static const int mediasize_japanese_kahu = 0x0104064c;
        /**  Japanese Kaku2 media (paper) size: 240mm x 332mm (9.449" x 13.071") 
         */
        public: static const int mediasize_japanese_kaku2 = 0x0104064d;
        /**  Japanese Oufuku media (paper) size: 148mm x 200mm (5.827" x 7.874") 
         */
        public: static const int mediasize_japanese_oufuku = 0x0104064b;
        /**  Japanese You4 media (paper) size: 105mm x 235mm (4.134" x 9.252") 
         */
        public: static const int mediasize_japanese_you4 = 0x0104064e;
        /**  North America Foolscap media (paper) size: 8" x 13" (203mm x 330mm) 
         */
        public: static const int mediasize_na_foolscap = 0x0104062a;
        /**  North America Government Letter media (paper) size: 8.0" × 10.5" (203mm x 267mm) 
         */
        public: static const int mediasize_na_gvrnmt_letter = 0x01040620;
        /**  North America Index Card 3x5 media (paper) size: 3" x 5" (76mm x 127mm) 
         */
        public: static const int mediasize_na_index_3x5 = 0x01040625;
        /**  North America Index Card 4x6 media (paper) size: 4" x 6" (102mm x 152mm) 
         */
        public: static const int mediasize_na_index_4x6 = 0x01040626;
        /**  North America Index Card 5x8 media (paper) size: 5" x 8" (127mm x 203mm) 
         */
        public: static const int mediasize_na_index_5x8 = 0x01040627;
        /**  North America Junior Legal media (paper) size: 8.0" × 5.0" (203mm × 127mm) 
         */
        public: static const int mediasize_na_junior_legal = 0x01040622;
        /**  North America Ledger media (paper) size: 17" × 11" (432mm × 279mm) 
         */
        public: static const int mediasize_na_ledger = 0x01040623;
        /**  North America Legal media (paper) size: 8.5" × 14" (216mm x 356mm) 
         */
        public: static const int mediasize_na_legal = 0x01040621;
        /**  North America Letter media (paper) size: 8.5" × 11" (279mm x 216mm) 
         */
        public: static const int mediasize_na_letter = 0x0104061f;
        /**  North America Monarch media (paper) size: 7.25" x 10.5" (184mm x 267mm) 
         */
        public: static const int mediasize_na_monarch = 0x01040628;
        /**  North America Quarto media (paper) size: 8" x 10" (203mm x 254mm) 
         */
        public: static const int mediasize_na_quarto = 0x01040629;
        /**  North America Tabloid media (paper) size: 11" × 17" (279mm × 432mm) 
         */
        public: static const int mediasize_na_tabloid = 0x01040624;
        /**  Media (paper) size for specifying any paper size in landscape.
         */
        public: static const int mediasize_unknown_landscape = 0x01040650;
        /**  Media (paper) size for specifying any paper size in portrait.
         */
        public: static const int mediasize_unknown_portrait = 0x0104064f;
        /**  Suffix added to a number to signify size in megabytes. 
         */
        public: static const int megabyteShort = 0x0104006d;
        /**  Title for the dialog used to display the user's MEID number on CDMA network
         [CHAR LIMIT=10] 
         */
        public: static const int meid = 0x01040091;
        /**  Displayed in place of the regular shortcut letter when a menu item has Menu+delete for the shortcut. 
         */
        public: static const int menu_delete_shortcut_label = 0x0104042f;
        /**  Displayed in place of the regular shortcut letter when a menu item has Menu+enter for the shortcut. 
         */
        public: static const int menu_enter_shortcut_label = 0x0104042e;
        /**  Displayed in place of the regular shortcut letter when a menu item has Menu+space for the shortcut. 
         */
        public: static const int menu_space_shortcut_label = 0x0104042d;
        /**  Quoted name for 12am, lowercase 
         */
        public: static const int midnight = 0x0104044d;
        /**  Appened to express the value is this unit of time: singular minute 
         */
        public: static const int minute = 0x01040442;
        /** 
         Content description for the minute selector in the time picker, which displays
         selectable five-minute intervals along the inside edge of a circle, as in an analog clock.
         [CHAR LIMIT=50]
    
         */
        public: static const int minute_picker_description = 0x01040664;
        /**  Appened to express the value is this unit of time: plural minutes 
         */
        public: static const int minutes = 0x01040443;
        /**  Displayed when SIM PIN passwords are entered inconsistently. 
         */
        public: static const int mismatchPin = 0x0104008a;
        /**  Displayed when a phone feature triggered by an MMI code is complete. 
         */
        public: static const int mmiComplete = 0x01040087;
        /**  Displayed when the user dialed an MMI code whose function
         could not be performed. This will be displayed in a toast. 
         */
        public: static const int mmiError = 0x0104007f;
        /**  Displayed when the user dialed an MMI code whose function
         could not be performed because FDN is enabled. This will be displayed in a toast. 
         */
        public: static const int mmiFdnError = 0x01040080;
        /**  The default mobile provisioning apn. Empty by default, maybe overridden by
         an mcc/mnc specific config.xml 
         */
        public: static const int mobile_provisioning_apn = 0x01040029;
        /**  The default mobile provisioning url. Empty by default, maybe overridden by
         an mcc/mnc specific config.xml 
         */
        public: static const int mobile_provisioning_url = 0x0104002a;
        /**  This url is used as the default url when redirection is detected. Any
         should work as all url's get redirected. But maybe overridden by
         if needed. 
         */
        public: static const int mobile_redirected_provisioning_url = 0x0104002b;
        public: static const int month_day_year = 0x01040054;
        /**  Menu item displayed at the end of a menu to allow users to see another page worth of menu items. This is shown on any app's menu as long as the app has too many items in the menu.
         */
        public: static const int more_item_label = 0x0104042b;
        /**  Displayed to prompt the user to type the PUK password to unlock
         the SIM card. 
         */
        public: static const int needPuk = 0x0104008d;
        public: static const int needPuk2 = 0x0104008e;
        /**  A notification is shown when a captive portal network is detected.  This is the notification's title. 
         */
        public: static const int network_available_sign_in = 0x010404a6;
        /**  A notification is shown when a captive portal network is detected.  This is the notification's message. 
         */
        public: static const int network_available_sign_in_detailed = 0x010404a7;
        public: static const int new_app_action = 0x0104048f;
        public: static const int new_app_description = 0x01040490;
        public: static const int next_button_label = 0x0104054c;
        /**  Preference framework strings. 
         */
        public: static const int no = 0x01040009;
        /**  Text to display when there are no activities found to display in the
         activity chooser. See the "Select an action" title. 
         */
        public: static const int noApplications = 0x0104046f;
        /**  Label for the file upload control when no file has been chosen yet 
         */
        public: static const int no_file_chosen = 0x01040544;
        /**  Displayed on the Find dialog when there are no matches [CHAR LIMIT=NONE]
         */
        public: static const int no_matches = 0x0104054e;
        /**  Shown for an application when it doesn't require any permission grants. 
         */
        public: static const int no_permissions = 0x010404d3;
        /**  Recent Tasks dialog: message when there are no recent applications
     TODO: this should move to SystemUI.apk, but the code for the old
            recent dialog is still in the framework
     
         */
        public: static const int no_recent_tasks = 0x010400f3;
        /**  Quoted name for 12pm, lowercase 
         */
        public: static const int noon = 0x0104044b;
        /**  Label to show for a service that is running because it is observing
         the user's notifications. 
         */
        public: static const int notification_listener_binding_label = 0x01040538;
        /**  A notification is shown when the AccountManager is unable to
    supply an auth token without prompting the user to re-enter the
    password.  This is the text that will scroll through the
    notification bar (will be seen by the user as he uses another application). 
         */
        public: static const int notification_title = 0x010400db;
        /**  Description of the button to decrease the NumberPicker value. [CHAR LIMIT=NONE] 
         */
        public: static const int number_picker_decrement_button = 0x0104056c;
        /**  NumberPicker - accessibility support 
 Description of the button to increase the NumberPicker value. [CHAR LIMIT=NONE] 
         */
        public: static const int number_picker_increment_button = 0x0104056b;
        /**  Description of the scrolling action in NumberPicker. [CHAR LIMIT=NONE] 
         */
        public: static const int number_picker_increment_scroll_action = 0x0104056e;
        /**  Description of the tap and hold action to get into scroll mode in NumberPicker. [CHAR LIMIT=NONE] 
         */
        public: static const int number_picker_increment_scroll_mode = 0x0104056d;
        public: static const int numeric_date_template = 0x01040053;
        /**  Preference framework strings. 
         */
        public: static const int ok = 0x0104000a;
        public: static const int old_app_action = 0x0104048d;
        public: static const int old_app_description = 0x0104048e;
        /**  This is used to express that something happened longer ago than the previous options 
         */
        public: static const int older = 0x0104043a;
        /**  String used to display the date. This is the string to say something happened 1 month ago. 
         */
        public: static const int oneMonthDurationPast = 0x01040437;
        /**  Displayed to the user when they do not have permission to open a particular web page. 
         */
        public: static const int open_permission_deny = 0x01040429;
        /**  Custom organization type 
         */
        public: static const int orgTypeCustom = 0x0104034d;
        /**  Other organization type 
         */
        public: static const int orgTypeOther = 0x0104034c;
        /**  Work organization type 
         */
        public: static const int orgTypeWork = 0x0104034b;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int org_name = 0x010405a5;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int org_unit = 0x010405a6;
        /**  Default name of the owner user [CHAR LIMIT=20] 
         */
        public: static const int owner_name = 0x010405f9;
        /**  Displayed when a SIM password was entered incorrectly. 
         */
        public: static const int passwordIncorrect = 0x01040086;
        /**  Label for "switch to alphabetic" key.  Must be short to fit on key! 
         */
        public: static const int password_keyboard_label_alpha_key = 0x010403bc;
        /**  Label for ALT modifier key.  Must be short to fit on key! 
         */
        public: static const int password_keyboard_label_alt_key = 0x010403bd;
        /**  Label for "switch to symbols" key.  Must be short to fit on key! 
         */
        public: static const int password_keyboard_label_symbol_key = 0x010403bb;
        /**  Item on EditText context menu. This action is used to paste from the clipboard into the eidt field 
         */
        public: static const int paste = 0x0104000b;
        /**  [CHAR LIMIT=NONE] Additional text in permission description for perms that can cost money. 
         */
        public: static const int perm_costs_money = 0x010404d4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessCoarseLocation = 0x0104023a;
        /**  Description of an application permission which allows the holder to access
         content providers from outside an ApplicationThread. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_accessContentProvidersExternally = 0x01040422;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessDrmCertificates = 0x01040302;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessFineLocation = 0x01040238;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessInputFlinger = 0x01040240;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessLocationExtraCommands = 0x01040234;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessMockLocation = 0x01040232;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessMtp = 0x01040274;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessNetworkConditions = 0x010402fe;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessNetworkState = 0x010402a8;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessNotifications = 0x010402f4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessSurfaceFlinger = 0x0104023c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accessWifiState = 0x010402b4;
        public: static const int permdesc_accessWimaxState = 0x010402c0;
        /**  Description of an application permission that lets an application access keyguard secure storage. 
         */
        public: static const int permdesc_access_keyguard_secure_storage = 0x0104050e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_accountManagerService = 0x0104029e;
        /**  Description of an application permission, listed so the user can choose whether
        they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_addVoicemail = 0x01040416;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_anyCodecForPlayback = 0x01040204;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_asec_access = 0x01040264;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_asec_create = 0x01040266;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_asec_destroy = 0x01040268;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_asec_mount_unmount = 0x0104026a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_asec_rename = 0x0104026c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_authenticateAccounts = 0x010402a2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_backup = 0x010401b8;
        /**  [CHAR LIMIT=NONE] Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_batteryStats = 0x010401b0;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindAccessibilityService = 0x010401cc;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindConditionProviderService = 0x010402f8;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindDeviceAdmin = 0x010401e2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindDreamService = 0x010402fa;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindGadget = 0x01040282;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindInputMethod = 0x010401ca;
        /**  Description of an application permission, so that the user can understand
         what is being done if they are curious. 
         */
        public: static const int permdesc_bindJobService = 0x01040208;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindNfcService = 0x010401d2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindNotificationListenerService = 0x010402f6;
        /**  Description of an application permission which allows the application to verify whether
         a different package is able to be installed by some internal heuristic. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_bindPackageVerifier = 0x0104041e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindPrintService = 0x010401ce;
        /**  Description of an application permission, listed so the user can
         choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindPrintSpoolerService = 0x010401d0;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindRemoteDisplay = 0x010401de;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindRemoteViews = 0x010401e0;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindTextService = 0x010401d4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindTvInput = 0x010401e4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindVoiceInteraction = 0x010401da;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindVpnService = 0x010401d6;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bindWallpaper = 0x010401d8;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bind_connection_service = 0x010402ea;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bind_incall_service = 0x010402e8;
        /**  Description of an application permission that lets it bind to a trust agent service. 
         */
        public: static const int permdesc_bind_trust_agent_service = 0x01040518;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bluetooth = 0x010402c6;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bluetoothAdmin = 0x010402ba;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bluetoothMap = 0x010402be;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_bluetoothPriv = 0x010402bc;
        /**  Description of the body sensors permission, listed so the user can decide whether to allow the application to access data from body sensors. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_bodySensors = 0x01040228;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_brick = 0x0104025c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_broadcastPackageRemoved = 0x010401a4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_broadcastScoreNetworks = 0x010401aa;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_broadcastSmsReceived = 0x010401a6;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_broadcastSticky = 0x0104021a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_broadcastWapPush = 0x010401a8;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_cache_filesystem = 0x010402e4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_callPhone = 0x01040278;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_callPrivileged = 0x0104027a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_camera = 0x01040258;
        /**  Description of a camera app permission, listed so the user can choose whether or not they want to allow it to disable the may-transmit light indicator. 
         */
        public: static const int permdesc_cameraDisableTransmitLed = 0x0104025a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_captureAudioHotword = 0x01040248;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_captureAudioOutput = 0x01040246;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_captureSecureVideoOutput = 0x0104024e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_captureVideoOutput = 0x0104024c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_changeBackgroundDataSetting = 0x010402b2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_changeComponentState = 0x0104020c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_changeConfiguration = 0x01040186;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_changeNetworkState = 0x010402ae;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the applicaiton to do this. 
         */
        public: static const int permdesc_changeTetherState = 0x010402b0;
        public: static const int permdesc_changeWifiMulticastState = 0x010402b8;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_changeWifiState = 0x010402b6;
        public: static const int permdesc_changeWimaxState = 0x010402c2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_checkinProperties = 0x01040280;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_clearAppCache = 0x010401fe;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_clearAppUserData = 0x010401f6;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_configureWifiDisplay = 0x01040242;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_confirm_full_backup = 0x010401ba;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_controlWifiDisplay = 0x01040244;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_control_incall_experience = 0x010402ec;
        /**  Description of an application permission that lets it control keyguard. 
         */
        public: static const int permdesc_control_keyguard = 0x01040510;
        /**  Description of an application permission,  used to invoke default container service to copy content. 
         */
        public: static const int permdesc_copyProtectedData = 0x0104050a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_createNetworkSockets = 0x010402aa;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_deleteCacheFiles = 0x010401f8;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_deletePackages = 0x010401f4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_devicePower = 0x0104028e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_diagnostic = 0x0104020a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_disableKeyguard = 0x010402ca;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_dump = 0x01040190;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_enableCarMode = 0x01040188;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_expandStatusBar = 0x01040152;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_factoryTest = 0x01040292;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_filter_events = 0x0104019a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_flashlight = 0x01040270;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_forceBack = 0x0104018e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_forceStopPackages = 0x0104018c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_frameStats = 0x01040198;
        /**  [CHAR LIMIT=NONE] Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_freezeScreen = 0x010401c4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_getAccounts = 0x010402a0;
        /**  [CHAR LIMIT=NONE] Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_getAppOpsStats = 0x010401b4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_getDetailedTasks = 0x01040178;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_getPackageSize = 0x010401fa;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_getTasks = 0x0104016e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_getTopActivityInfo = 0x010401a0;
        /**  Description of an application permission for granting or revoking other permissions [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_grantRevokePermissions = 0x0104020e;
        public: static const int permdesc_handoverStatus = 0x01040304;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_hardware_test = 0x01040276;
        public: static const int permdesc_hotwordRecognition = 0x01040689;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_injectEvents = 0x010401c6;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_installLocationProvider = 0x01040236;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_installPackages = 0x010401fc;
        /**  Description of an application permission, listed so the user can install application shortcuts
    in their Launcher 
         */
        public: static const int permdesc_install_shortcut = 0x01040154;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_interactAcrossUsers = 0x01040172;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_interactAcrossUsersFull = 0x01040174;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_internalSystemWindow = 0x010401bc;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_invokeCarrierSetup = 0x010402fc;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_killBackgroundProcesses = 0x0104018a;
        /**  Description of an application permission that lets it launch the trust agent settings menu 
         */
        public: static const int permdesc_launch_trust_agent_settings = 0x01040516;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_locationUpdates = 0x0104027e;
        public: static const int permdesc_magnify_display = 0x01040685;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_manageAccounts = 0x010402a4;
        /**  [CHAR LIMIT=NONE] Description of an application permission, allowing an application to create,
             change, remove activity stacks. 
         */
        public: static const int permdesc_manageActivityStacks = 0x0104017e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_manageAppTokens = 0x010401c2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE]
         */
        public: static const int permdesc_manageCaCertificates = 0x01040206;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_manageDeviceAdmins = 0x010401e8;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_manageDocs = 0x010402e0;
        /**  Description of an application permission that lets it manage media projection sessions. 
         */
        public: static const int permdesc_manageMediaProjection = 0x0104051c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_manageNetworkPolicy = 0x010402f0;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_manageUsb = 0x01040272;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to create/remove/query users. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_manageUsers = 0x01040176;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_manageVoiceKeyphrases = 0x010401dc;
        public: static const int permdesc_markNetworkSocket = 0x01040687;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_masterClear = 0x01040298;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_mediaContentControl = 0x01040250;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_mediaStorageWrite = 0x010402de;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_modifyAudioRouting = 0x0104024a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_modifyAudioSettings = 0x01040252;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_modifyNetworkAccounting = 0x010402f2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_modifyParentalControls = 0x010401e6;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_modifyPhoneState = 0x01040284;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_mount_format_filesystems = 0x01040262;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_mount_unmount_filesystems = 0x01040260;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_movePackage = 0x01040200;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_nfc = 0x010402c8;
        /**  Description of an application permission which allows the application to verify whether
         a different package is able to be installed by some internal heuristic. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_packageVerificationAgent = 0x0104041c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_performCdmaProvisioning = 0x0104027c;
        public: static const int permdesc_persistentActivity = 0x010401f2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_pkgUsageStats = 0x01040508;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_processOutgoingCalls = 0x01040158;
        /**  Description of an application permission that lets it provide a trust agent. 
         */
        public: static const int permdesc_provide_trust_agent = 0x01040514;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readCalendar = 0x0104022e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readCallLog = 0x01040220;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readCellBroadcasts = 0x01040160;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readContacts = 0x0104021c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readDictionary = 0x010402d6;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readFrameBuffer = 0x0104023e;
        /**  Description of an application permission, listed so the user can choose whether
        they want to allow the application to do this. 
         */
        public: static const int permdesc_readHistoryBookmarks = 0x0104040e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readInputState = 0x010401c8;
        /**  Description of an application permission that lets it read install sessions. 
         */
        public: static const int permdesc_readInstallSessions = 0x0104051e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readLogs = 0x01040202;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readNetworkUsageHistory = 0x010402ee;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readPhoneState = 0x01040286;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readPrecisePhoneState = 0x01040288;
        /**  Description of the read profile permission, listed so the user can decide whether to allow the application to read the user's personal profile data. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_readProfile = 0x01040224;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readSms = 0x01040166;
        public: static const int permdesc_readSocialStream = 0x0104022a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readSyncSettings = 0x010402cc;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_readSyncStats = 0x010402d0;
        /**  Description of an application permission, listed so the user can choose whether
        they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_readVoicemail = 0x01040418;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_reboot = 0x0104025e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_receiveBluetoothMap = 0x0104016c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_receiveBootCompleted = 0x01040218;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_receiveEmergencyBroadcast = 0x0104015e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_receiveMms = 0x0104015c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_receiveSms = 0x0104015a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_receiveWapPush = 0x0104016a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_recordAudio = 0x01040254;
        /**  Description of an application permission that lets it control keyguard. 
         */
        public: static const int permdesc_recovery = 0x0104051a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_removeDrmCertificates = 0x01040306;
        /**  Description of an application permission, allowing an application to remove/kill tasks 
         */
        public: static const int permdesc_removeTasks = 0x0104017c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_reorderTasks = 0x0104017a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_retrieveWindowToken = 0x01040196;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_retrieve_window_content = 0x01040192;
        public: static const int permdesc_retrieve_window_info = 0x01040683;
        /**  Description of an application permission that lets an application route media output. 
         */
        public: static const int permdesc_route_media_output = 0x0104050c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_runSetActivityWatcher = 0x010401a2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_scoreNetworks = 0x010402c4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_sdcardAccessAll = 0x010402e2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_sdcardRead = 0x010402da;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_sdcardWrite = 0x010402dc;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_sendRespondViaMessageRequest = 0x01040164;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_sendSms = 0x01040162;
        /**  Description of an application permission which allows the application access serial ports via the SerialManager. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_serialPort = 0x01040420;
        /**  Description of an application permission, listed so the user can choose whether
        they want to allow the application to do this. 
         */
        public: static const int permdesc_setAlarm = 0x01040412;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setAlwaysFinish = 0x010401ae;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setAnimationScale = 0x010401c0;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setDebugApp = 0x01040184;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setInputCalibration = 0x01040300;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_setKeyboardLayout = 0x010401ee;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setOrientation = 0x010401ea;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_setPointerSpeed = 0x010401ec;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setPreferredApplications = 0x01040210;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setProcessLimit = 0x010401ac;
        /**  Description of an application permission, allowing control of app screen compatibility mode 
         */
        public: static const int permdesc_setScreenCompatibility = 0x01040182;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setTime = 0x0104029a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setTimeZone = 0x0104029c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setWallpaper = 0x01040294;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_setWallpaperHints = 0x01040296;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_shutdown = 0x0104019c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_signalPersistentProcesses = 0x010401f0;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_sim_communication = 0x01040256;
        /**  Description of an application permission, allowing an application to start any activity, regardless of permission protection or exported state. 
         */
        public: static const int permdesc_startAnyActivity = 0x01040180;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_startTasksFromRecents = 0x01040170;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_statusBar = 0x0104014e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_statusBarService = 0x01040150;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_stopAppSwitches = 0x0104019e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_subscribedFeedsRead = 0x010402d2;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_subscribedFeedsWrite = 0x010402d4;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_systemAlertWindow = 0x010401be;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_temporary_enable_accessibility = 0x01040194;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_transmitIr = 0x0104028c;
        /**  Description of an application permission that lets it listen to trust state changes. 
         */
        public: static const int permdesc_trust_listener = 0x01040512;
        /**  Description of an application permission, listed so the user can install application shortcuts
    in their Launcher 
         */
        public: static const int permdesc_uninstall_shortcut = 0x01040156;
        /**  [CHAR LIMIT=NONE] Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_updateAppOpsStats = 0x010401b6;
        /**  [CHAR LIMIT=NONE] Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_updateBatteryStats = 0x010401b2;
        /**  Description of an application permission which allows the application to suggest that now is a bad time to reboot the device in order to apply an OTA.  [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_updateLock = 0x01040424;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_useCredentials = 0x010402a6;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_use_sip = 0x010402e6;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_userActivity = 0x01040290;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_vibrate = 0x0104026e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_wakeLock = 0x0104028a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_writeApnSettings = 0x010402ac;
        public: static const int permdesc_writeCalendar = 0x01040230;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_writeCallLog = 0x01040222;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_writeContacts = 0x0104021e;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_writeDictionary = 0x010402d8;
        /**  Description of an application permission, listed so the user can choose whether
        they want to allow the application to do this. 
         */
        public: static const int permdesc_writeGeolocationPermissions = 0x0104041a;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_writeGservices = 0x01040216;
        /**  Description of an application permission, listed so the user can choose whether
        they want to allow the application to do this. 
         */
        public: static const int permdesc_writeHistoryBookmarks = 0x01040410;
        /**  Description of the write profile permission, listed so the user can decide whether to allow the application to write to the user's personal profile data. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_writeProfile = 0x01040226;
        public: static const int permdesc_writeSecureSettings = 0x01040214;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_writeSettings = 0x01040212;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_writeSms = 0x01040168;
        public: static const int permdesc_writeSocialStream = 0x0104022c;
        /**  Description of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permdesc_writeSyncSettings = 0x010402ce;
        /**  Description of an application permission, listed so the user can choose whether
        they want to allow the application to modify and remove voicemails in the user's voicemail
        inbox. [CHAR LIMIT=NONE] 
         */
        public: static const int permdesc_writeVoicemail = 0x01040414;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_accessibilityFeatures = 0x01040144;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_accounts = 0x01040136;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_affectsBattery = 0x01040118;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_appInfo = 0x0104012c;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_audioSettings = 0x01040116;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_bluetoothNetwork = 0x01040114;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_bookmarks = 0x01040120;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_calendar = 0x0104011a;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_camera = 0x01040128;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_costMoney = 0x01040108;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_developmentTools = 0x0104013e;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_deviceAlarms = 0x01040122;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_dictionary = 0x0104011c;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_display = 0x01040140;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_hardwareControls = 0x01040138;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_location = 0x01040110;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_messages = 0x0104010a;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_microphone = 0x01040126;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_network = 0x01040112;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_personalInfo = 0x0104010c;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_phoneCalls = 0x0104013a;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_screenlock = 0x0104012a;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_socialInfo = 0x0104010e;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_statusBar = 0x01040132;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_storage = 0x01040142;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_syncSettings = 0x01040134;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_systemClock = 0x01040130;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_systemTools = 0x0104013c;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_voicemail = 0x01040124;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_wallpaper = 0x0104012e;
        /**  Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgroupdesc_writeDictionary = 0x0104011e;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_accessibilityFeatures = 0x01040143;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_accounts = 0x01040135;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_affectsBattery = 0x01040117;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_appInfo = 0x0104012b;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_audioSettings = 0x01040115;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_bluetoothNetwork = 0x01040113;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_bookmarks = 0x0104011f;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_calendar = 0x01040119;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_camera = 0x01040127;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_costMoney = 0x01040107;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_developmentTools = 0x0104013d;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_deviceAlarms = 0x01040121;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_dictionary = 0x0104011b;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_display = 0x0104013f;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_hardwareControls = 0x01040137;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_location = 0x0104010f;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_messages = 0x01040109;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_microphone = 0x01040125;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_network = 0x01040111;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_personalInfo = 0x0104010b;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_phoneCalls = 0x01040139;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_screenlock = 0x01040129;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_socialInfo = 0x0104010d;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_statusBar = 0x01040131;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_storage = 0x01040141;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_syncSettings = 0x01040133;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_systemClock = 0x0104012f;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_systemTools = 0x0104013b;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_voicemail = 0x01040123;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_wallpaper = 0x0104012d;
        /**  Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permgrouplab_writeDictionary = 0x0104011d;
        public: static const int permission_request_notification_title = 0x0104052f;
        public: static const int permission_request_notification_with_subtitle = 0x01040530;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessCoarseLocation = 0x01040239;
        /**  Title of an application permission which allows the holder to access content
         providers from outside an ApplicationThread. [CHAR LIMIT=40] 
         */
        public: static const int permlab_accessContentProvidersExternally = 0x01040421;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessDrmCertificates = 0x01040301;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessFineLocation = 0x01040237;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessInputFlinger = 0x0104023f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessLocationExtraCommands = 0x01040233;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessMockLocation = 0x01040231;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessMtp = 0x01040273;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessNetworkConditions = 0x010402fd;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessNetworkState = 0x010402a7;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessNotifications = 0x010402f3;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessSurfaceFlinger = 0x0104023b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accessWifiState = 0x010402b3;
        public: static const int permlab_accessWimaxState = 0x010402bf;
        /**  Title of an application permission that lets an application access keyguard secure storage. 
         */
        public: static const int permlab_access_keyguard_secure_storage = 0x0104050d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_accountManagerService = 0x0104029d;
        /**  Title of an application permission, listed so the user can choose whether
        they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permlab_addVoicemail = 0x01040415;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_anyCodecForPlayback = 0x01040203;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_asec_access = 0x01040263;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_asec_create = 0x01040265;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_asec_destroy = 0x01040267;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_asec_mount_unmount = 0x01040269;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_asec_rename = 0x0104026b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_authenticateAccounts = 0x010402a1;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_backup = 0x010401b7;
        /**  [CHAR LIMIT=NONE] Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_batteryStats = 0x010401af;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindAccessibilityService = 0x010401cb;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindConditionProviderService = 0x010402f7;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindDeviceAdmin = 0x010401e1;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindDreamService = 0x010402f9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindGadget = 0x01040281;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindInputMethod = 0x010401c9;
        /**  Title of a permission that is never presented to the user.  This is not a
         permission that an application must be granted by the user.  Instead, it
         is part of a mechanism that applications use to indicate to the system
         that they want to do scheduled background work.  
         */
        public: static const int permlab_bindJobService = 0x01040207;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindNfcService = 0x010401d1;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindNotificationListenerService = 0x010402f5;
        /**  Title of an application permission which allows the application to verify whether
         a different package is able to be installed by some internal heuristic. [CHAR LIMIT=40] 
         */
        public: static const int permlab_bindPackageVerifier = 0x0104041d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindPrintService = 0x010401cd;
        /**  Title of an application permission, listed so the user can choose
         whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindPrintSpoolerService = 0x010401cf;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindRemoteDisplay = 0x010401dd;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindRemoteViews = 0x010401df;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindTextService = 0x010401d3;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindTvInput = 0x010401e3;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindVoiceInteraction = 0x010401d9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindVpnService = 0x010401d5;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bindWallpaper = 0x010401d7;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bind_connection_service = 0x010402e9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bind_incall_service = 0x010402e7;
        /**  Title of an application permission that lets it bind to a trust agent service. 
         */
        public: static const int permlab_bind_trust_agent_service = 0x01040517;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bluetooth = 0x010402c5;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bluetoothAdmin = 0x010402b9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bluetoothMap = 0x010402bd;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_bluetoothPriv = 0x010402bb;
        /**  Title of the body sensors permission, listed so the user can decide whether to allow the application to access body sensor data. [CHAR LIMIT=30] 
         */
        public: static const int permlab_bodySensors = 0x01040227;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_brick = 0x0104025b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_broadcastPackageRemoved = 0x010401a3;
        /**  TODO: Mark these as translatable when API is finalized. 
 Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_broadcastScoreNetworks = 0x010401a9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_broadcastSmsReceived = 0x010401a5;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_broadcastSticky = 0x01040219;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_broadcastWapPush = 0x010401a7;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_cache_filesystem = 0x010402e3;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_callPhone = 0x01040277;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_callPrivileged = 0x01040279;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_camera = 0x01040257;
        /**  Title of a camera app permission, listed so the user can choose whether or not they want to allow it to disable the may-transmit light indicator. 
         */
        public: static const int permlab_cameraDisableTransmitLed = 0x01040259;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_captureAudioHotword = 0x01040247;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_captureAudioOutput = 0x01040245;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_captureSecureVideoOutput = 0x0104024d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_captureVideoOutput = 0x0104024b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_changeBackgroundDataSetting = 0x010402b1;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_changeComponentState = 0x0104020b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_changeConfiguration = 0x01040185;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_changeNetworkState = 0x010402ad;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_changeTetherState = 0x010402af;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_changeWifiMulticastState = 0x010402b7;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_changeWifiState = 0x010402b5;
        public: static const int permlab_changeWimaxState = 0x010402c1;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_checkinProperties = 0x0104027f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_clearAppCache = 0x010401fd;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_clearAppUserData = 0x010401f5;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_configureWifiDisplay = 0x01040241;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_confirm_full_backup = 0x010401b9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_controlWifiDisplay = 0x01040243;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_control_incall_experience = 0x010402eb;
        /**  Title of an application permission that lets it control keyguard. 
         */
        public: static const int permlab_control_keyguard = 0x0104050f;
        /**  permission attributes related to default container service 
 Title of an application permission that lets an application use default container service. 
         */
        public: static const int permlab_copyProtectedData = 0x01040509;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_createNetworkSockets = 0x010402a9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_deleteCacheFiles = 0x010401f7;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_deletePackages = 0x010401f3;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_devicePower = 0x0104028d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_diagnostic = 0x01040209;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_disableKeyguard = 0x010402c9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_dump = 0x0104018f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_enableCarMode = 0x01040187;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_expandStatusBar = 0x01040151;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_factoryTest = 0x01040291;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_filter_events = 0x01040199;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_flashlight = 0x0104026f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_forceBack = 0x0104018d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_forceStopPackages = 0x0104018b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_frameStats = 0x01040197;
        /**  [CHAR LIMIT=NONE] Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_freezeScreen = 0x010401c3;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_getAccounts = 0x0104029f;
        /**  [CHAR LIMIT=NONE] Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_getAppOpsStats = 0x010401b3;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=50] 
         */
        public: static const int permlab_getDetailedTasks = 0x01040177;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_getPackageSize = 0x010401f9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_getTasks = 0x0104016d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_getTopActivityInfo = 0x0104019f;
        /**  Title of an application permission for granting or revoking other permissions [CHAR LIMIT=NONE] 
         */
        public: static const int permlab_grantRevokePermissions = 0x0104020d;
        public: static const int permlab_handoverStatus = 0x01040303;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_hardware_test = 0x01040275;
        public: static const int permlab_hotwordRecognition = 0x01040688;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_injectEvents = 0x010401c5;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_installLocationProvider = 0x01040235;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_installPackages = 0x010401fb;
        /**  Title of an application permission, listed so the user can install application shortcuts
    in their Launcher 
         */
        public: static const int permlab_install_shortcut = 0x01040153;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permlab_interactAcrossUsers = 0x01040171;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permlab_interactAcrossUsersFull = 0x01040173;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_internalSystemWindow = 0x010401bb;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_invokeCarrierSetup = 0x010402fb;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_killBackgroundProcesses = 0x01040189;
        /**  Title of an application permission that lets it launch the trust agent settings menu 
         */
        public: static const int permlab_launch_trust_agent_settings = 0x01040515;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_locationUpdates = 0x0104027d;
        public: static const int permlab_magnify_display = 0x01040684;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_manageAccounts = 0x010402a3;
        /**  [CHAR LIMIT=NONE] Title of an application permission, allowing an application to create,
         change, remove activity stacks. 
         */
        public: static const int permlab_manageActivityStacks = 0x0104017d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_manageAppTokens = 0x010401c1;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. This permission allows the app to install or uninstall trusted credentials, a.k.a. CA certificates. [CHAR LIMIT=NONE] 
         */
        public: static const int permlab_manageCaCertificates = 0x01040205;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_manageDeviceAdmins = 0x010401e7;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30] 
         */
        public: static const int permlab_manageDocs = 0x010402df;
        /**  Title of an application permission that lets it manage media projection sessions. 
         */
        public: static const int permlab_manageMediaProjection = 0x0104051b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_manageNetworkPolicy = 0x010402ef;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_manageUsb = 0x01040271;
        /**   Title of an application permission, listed so the user can choose whether they want to allow the application to create/remove/query users. [CHAR LIMIT=none] 
         */
        public: static const int permlab_manageUsers = 0x01040175;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_manageVoiceKeyphrases = 0x010401db;
        public: static const int permlab_markNetworkSocket = 0x01040686;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_masterClear = 0x01040297;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_mediaContentControl = 0x0104024f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30] 
         */
        public: static const int permlab_mediaStorageWrite = 0x010402dd;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_modifyAudioRouting = 0x01040249;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_modifyAudioSettings = 0x01040251;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_modifyNetworkAccounting = 0x010402f1;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_modifyParentalControls = 0x010401e5;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_modifyPhoneState = 0x01040283;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_mount_format_filesystems = 0x01040261;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_mount_unmount_filesystems = 0x0104025f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_movePackage = 0x010401ff;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_nfc = 0x010402c7;
        /**  Title of an application permission which allows the application to verify whether
         a different package is able to be installed by some internal logic. [CHAR LIMIT=40] 
         */
        public: static const int permlab_packageVerificationAgent = 0x0104041b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_performCdmaProvisioning = 0x0104027b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_persistentActivity = 0x010401f1;
        /**  permission attributes related to package usage statistics 
 Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_pkgUsageStats = 0x01040507;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_processOutgoingCalls = 0x01040157;
        /**  Title of an application permission that lets it provide a trust agent. 
         */
        public: static const int permlab_provide_trust_agent = 0x01040513;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readCalendar = 0x0104022d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readCallLog = 0x0104021f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readCellBroadcasts = 0x0104015f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readContacts = 0x0104021b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readDictionary = 0x010402d5;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readFrameBuffer = 0x0104023d;
        /**  Title of an application permission, listed so the user can choose whether
        they want to allow the application to do this. 
         */
        public: static const int permlab_readHistoryBookmarks = 0x0104040d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readInputState = 0x010401c7;
        /**  Title of an application permission that lets it read install sessions. 
         */
        public: static const int permlab_readInstallSessions = 0x0104051d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readLogs = 0x01040201;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readNetworkUsageHistory = 0x010402ed;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readPhoneState = 0x01040285;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readPrecisePhoneState = 0x01040287;
        /**  Title of the read profile permission, listed so the user can decide whether to allow the application to read the user's personal profile data. [CHAR LIMIT=30] 
         */
        public: static const int permlab_readProfile = 0x01040223;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readSms = 0x01040165;
        /**  Title of the read social stream permission, listed so the user can decide whether to allow the application to read information from the user's social stream. [CHAR LIMIT=30] 
         */
        public: static const int permlab_readSocialStream = 0x01040229;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readSyncSettings = 0x010402cb;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_readSyncStats = 0x010402cf;
        /**  Title of an application permission, listed so the user can choose whether
        they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permlab_readVoicemail = 0x01040417;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_reboot = 0x0104025d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_receiveBluetoothMap = 0x0104016b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_receiveBootCompleted = 0x01040217;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_receiveEmergencyBroadcast = 0x0104015d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_receiveMms = 0x0104015b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_receiveSms = 0x01040159;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_receiveWapPush = 0x01040169;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_recordAudio = 0x01040253;
        /**  Title of an application permission that lets it interact with recovery. 
         */
        public: static const int permlab_recovery = 0x01040519;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_removeDrmCertificates = 0x01040305;
        /**  Title of an application permission, allowing an application to remove/kill tasks 
         */
        public: static const int permlab_removeTasks = 0x0104017b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_reorderTasks = 0x01040179;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_retrieveWindowToken = 0x01040195;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_retrieve_window_content = 0x01040191;
        public: static const int permlab_retrieve_window_info = 0x01040682;
        /**  Title of an application permission that lets an application route media output. 
         */
        public: static const int permlab_route_media_output = 0x0104050b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_runSetActivityWatcher = 0x010401a1;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_scoreNetworks = 0x010402c3;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30] 
         */
        public: static const int permlab_sdcardAccessAll = 0x010402e1;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_sdcardRead = 0x010402d9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_sdcardWrite = 0x010402db;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE] 
         */
        public: static const int permlab_sendRespondViaMessageRequest = 0x01040163;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_sendSms = 0x01040161;
        /**  Title of an application permission which allows the application to access serial ports via the SerialManager. [CHAR LIMIT=40] 
         */
        public: static const int permlab_serialPort = 0x0104041f;
        /**  Title of an application permission, listed so the user can choose whether
        they want to allow the application to do this. 
         */
        public: static const int permlab_setAlarm = 0x01040411;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_setAlwaysFinish = 0x010401ad;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_setAnimationScale = 0x010401bf;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_setDebugApp = 0x01040183;
        public: static const int permlab_setInputCalibration = 0x010402ff;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30] 
         */
        public: static const int permlab_setKeyboardLayout = 0x010401ed;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_setOrientation = 0x010401e9;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30] 
         */
        public: static const int permlab_setPointerSpeed = 0x010401eb;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_setPreferredApplications = 0x0104020f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_setProcessLimit = 0x010401ab;
        /**  Title of an application permission, allowing control of app screen compatibility mode 
         */
        public: static const int permlab_setScreenCompatibility = 0x01040181;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_setTime = 0x01040299;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_setTimeZone = 0x0104029b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_setWallpaper = 0x01040293;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_setWallpaperHints = 0x01040295;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_shutdown = 0x0104019b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_signalPersistentProcesses = 0x010401ef;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_sim_communication = 0x01040255;
        /**  Title of an application permission, allowing an application to start any activity, regardless of permission protection or exported state. 
         */
        public: static const int permlab_startAnyActivity = 0x0104017f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_startTasksFromRecents = 0x0104016f;
        /**   Permissions 
 Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_statusBar = 0x0104014d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_statusBarService = 0x0104014f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_stopAppSwitches = 0x0104019d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_subscribedFeedsRead = 0x010402d1;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_subscribedFeedsWrite = 0x010402d3;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_systemAlertWindow = 0x010401bd;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_temporary_enable_accessibility = 0x01040193;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_transmitIr = 0x0104028b;
        /**  Title of an application permission that lets it listen to trust state changes. 
         */
        public: static const int permlab_trust_listener = 0x01040511;
        /**  Title of an application permission, listed so the user can uninstall application shortcuts
    in their Launcher 
         */
        public: static const int permlab_uninstall_shortcut = 0x01040155;
        /**  [CHAR LIMIT=NONE] Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_updateAppOpsStats = 0x010401b5;
        /**  [CHAR LIMIT=NONE] Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_updateBatteryStats = 0x010401b1;
        /**  Title of an application permission which allows the application to suggest that now is a bad time to reboot the device in order to apply an OTA.  [CHAR LIMIT=40] 
         */
        public: static const int permlab_updateLock = 0x01040423;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_useCredentials = 0x010402a5;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_use_sip = 0x010402e5;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_userActivity = 0x0104028f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_vibrate = 0x0104026d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_wakeLock = 0x01040289;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_writeApnSettings = 0x010402ab;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_writeCalendar = 0x0104022f;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_writeCallLog = 0x01040221;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_writeContacts = 0x0104021d;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_writeDictionary = 0x010402d7;
        /**  Title of an application permission, listed so the user can choose whether
        they want to allow the application to do this. 
         */
        public: static const int permlab_writeGeolocationPermissions = 0x01040419;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_writeGservices = 0x01040215;
        /**  Title of an application permission, listed so the user can choose whether
        they want to allow the application to do this. 
         */
        public: static const int permlab_writeHistoryBookmarks = 0x0104040f;
        /**  Title of the write profile permission, listed so the user can decide whether to allow the application to write to the user's personal profile data. [CHAR LIMIT=30] 
         */
        public: static const int permlab_writeProfile = 0x01040225;
        public: static const int permlab_writeSecureSettings = 0x01040213;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_writeSettings = 0x01040211;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_writeSms = 0x01040167;
        /**  Title of the write social stream permission, listed so the user can decide whether to allow the application to write information to the user's social stream. [CHAR LIMIT=30] 
         */
        public: static const int permlab_writeSocialStream = 0x0104022b;
        /**  Title of an application permission, listed so the user can choose whether they want to allow the application to do this. 
         */
        public: static const int permlab_writeSyncSettings = 0x010402cd;
        /**  Title of an application permission, listed so the user can choose whether
        they want to allow the application to modify and remove voicemails in the user's voicemail
        inbox. [CHAR LIMIT=NONE] 
         */
        public: static const int permlab_writeVoicemail = 0x01040413;
        /**  Text that is placed at the front of a permission name that is being added to an app [CHAR LIMIT=NONE] 
         */
        public: static const int perms_description_app = 0x010404d2;
        /**  Security Permissions strings
 Text that is placed at the front of a permission name that is being added to an app [CHAR LIMIT=NONE] 
         */
        public: static const int perms_new_perm_prefix = 0x010404d1;
        /**  Suffix added to a number to signify size in petabytes. 
         */
        public: static const int petabyteShort = 0x01040070;
        /**  Assistant phone number type 
         */
        public: static const int phoneTypeAssistant = 0x0104032e;
        /**  Callback phone number type 
         */
        public: static const int phoneTypeCallback = 0x01040323;
        /**  Car phone number type 
         */
        public: static const int phoneTypeCar = 0x01040324;
        /**  Company main phone number type 
         */
        public: static const int phoneTypeCompanyMain = 0x01040325;
        /**  Custom phone number type 
         */
        public: static const int phoneTypeCustom = 0x0104031b;
        /**  Home fax phone number type 
         */
        public: static const int phoneTypeFaxHome = 0x01040320;
        /**  Work fax phone number type 
         */
        public: static const int phoneTypeFaxWork = 0x0104031f;
        /**  Home phone number type 
         */
        public: static const int phoneTypeHome = 0x0104031c;
        /**  ISDN phone number type 
         */
        public: static const int phoneTypeIsdn = 0x01040326;
        /**  Main phone number type 
         */
        public: static const int phoneTypeMain = 0x01040327;
        /**  MMS phone number type 
         */
        public: static const int phoneTypeMms = 0x0104032f;
        /**  Mobile phone number type 
         */
        public: static const int phoneTypeMobile = 0x0104031d;
        /**  Other phone number type 
         */
        public: static const int phoneTypeOther = 0x01040322;
        /**  Other fax phone number type 
         */
        public: static const int phoneTypeOtherFax = 0x01040328;
        /**  Pager phone number type 
         */
        public: static const int phoneTypePager = 0x01040321;
        /**  Radio phone number type 
         */
        public: static const int phoneTypeRadio = 0x01040329;
        /**  Telex phone number type 
         */
        public: static const int phoneTypeTelex = 0x0104032a;
        /**  TTY TDD phone number type 
         */
        public: static const int phoneTypeTtyTdd = 0x0104032b;
        /**  Work phone number type 
         */
        public: static const int phoneTypeWork = 0x0104031e;
        /**  Work mobile phone number type 
         */
        public: static const int phoneTypeWorkMobile = 0x0104032c;
        /**  Work pager phone number type 
         */
        public: static const int phoneTypeWorkPager = 0x0104032d;
        /**  Description of policy access to disable all device cameras [CHAR LIMIT=110]
         */
        public: static const int policydesc_disableCamera = 0x01040318;
        /**  Description of policy access to disable all device cameras [CHAR LIMIT=110]
         */
        public: static const int policydesc_disableKeyguardFeatures = 0x0104031a;
        /**  Description of policy access to require encrypted storage [CHAR LIMIT=110]
         */
        public: static const int policydesc_encryptedStorage = 0x01040316;
        /**  Description of policy access to enforce password expiration [CHAR LIMIT=110]
         */
        public: static const int policydesc_expirePassword = 0x01040314;
        /**  Description of policy access to limiting the user's password choices 
         */
        public: static const int policydesc_forceLock = 0x0104030e;
        /**  Description of policy access to limiting the user's password choices 
         */
        public: static const int policydesc_limitPassword = 0x01040308;
        /**  Description of policy access to reset user's password 
         */
        public: static const int policydesc_resetPassword = 0x0104030c;
        /**  Description of policy access to wipe the user's data 
         */
        public: static const int policydesc_setGlobalProxy = 0x01040312;
        /**  Description of policy access to watch user login attempts 
         */
        public: static const int policydesc_watchLogin = 0x0104030a;
        /**  Description of policy access to wipe the user's data 
         */
        public: static const int policydesc_wipeData = 0x01040310;
        /**  Title of policy access to disable all device cameras [CHAR LIMIT=30]
         */
        public: static const int policylab_disableCamera = 0x01040317;
        /**  Title of policy access to disable all device cameras [CHAR LIMIT=30]
         */
        public: static const int policylab_disableKeyguardFeatures = 0x01040319;
        /**  Title of policy access to require encrypted storage [CHAR LIMIT=30]
         */
        public: static const int policylab_encryptedStorage = 0x01040315;
        /**  Title of policy access to enforce password expiration [CHAR LIMIT=30]
         */
        public: static const int policylab_expirePassword = 0x01040313;
        /**  Title of policy access to force lock the device 
         */
        public: static const int policylab_forceLock = 0x0104030d;
        /**  Policy administration 
 Title of policy access to limiting the user's password choices 
         */
        public: static const int policylab_limitPassword = 0x01040307;
        /**  Title of policy access to reset user's password 
         */
        public: static const int policylab_resetPassword = 0x0104030b;
        public: static const int policylab_setGlobalProxy = 0x01040311;
        /**  Title of policy access to watch user login attempts 
         */
        public: static const int policylab_watchLogin = 0x01040309;
        /**  Title of policy access to wipe the user's data 
         */
        public: static const int policylab_wipeData = 0x0104030f;
        /**  Custom postal address type 
         */
        public: static const int postalTypeCustom = 0x01040339;
        /**  Home postal address type 
         */
        public: static const int postalTypeHome = 0x0104033a;
        /**  Other postal address type 
         */
        public: static const int postalTypeOther = 0x0104033c;
        /**  Work postal address type 
         */
        public: static const int postalTypeWork = 0x0104033b;
        /**  Title for the Phone Options dialog to lock the screen, turn off the phone etc. 
         */
        public: static const int power_dialog = 0x010400e4;
        /**  Button to turn off the phone, within the Phone Options dialog 
         */
        public: static const int power_off = 0x010400e9;
        /**  Prepended to the shortcut for a menu item to indicate that the user should hold the MENU button together with the shortcut to invoke the item. For example, if the shortcut to open a new tab in browser is MENU and B together, then this would be prepended to the letter "B" 
         */
        public: static const int prepend_shortcut_label = 0x0104042c;
        /**  String used to display the date. Preposition for date display ("on May 29") 
         */
        public: static const int preposition_for_date = 0x0104043b;
        /**  String used to display the date. Preposition for time display ("at 2:33am") 
         */
        public: static const int preposition_for_time = 0x0104043c;
        /**  String used to display the date. Preposition for year display ("in 2008") 
         */
        public: static const int preposition_for_year = 0x0104043d;
        /**  Message for the notification that a print service was installed. [CHAR LIMIT=50] 
         */
        public: static const int print_service_installed_message = 0x01040656;
        /**  Title for the notification that a print service was installed. [CHAR LIMIT=50] 
         */
        public: static const int print_service_installed_title = 0x01040655;
        /**  Text for progress dialog while erasing SD card [CHAR LIMIT=NONE] 
         */
        public: static const int progress_erasing = 0x01040552;
        /**  Text for progress dialog while unmounting SD card [CHAR LIMIT=NONE] 
         */
        public: static const int progress_unmounting = 0x01040551;
        /**  Error message that is displayed when the user clicks on a quick contacts badge, but
         there is no contacts application installed that can display the quick contact 
         */
        public: static const int quick_contacts_not_available = 0x01040361;
        /**  DO NOT TRANSLATE 
         */
        public: static const int radial_numbers_typeface = 0x0104066f;
        /**  Print fail reason: the print service that has to process the print job is not available. [CHAR LIMIT=none] 
         */
        public: static const int reason_service_unavailable = 0x01040654;
        /**  Print fail reason: unknown. [CHAR LIMIT=25] 
         */
        public: static const int reason_unknown = 0x01040653;
        /**  Shutdown Confirmation Dialog.  Message in the confirmation dialog
         when the user asks to reboot into safe mode. [CHAR LIMIT=NONE] 
         */
        public: static const int reboot_safemode_confirm = 0x010400f1;
        /**  Title of dialog to confirm rebooting into safe mode. [CHAR LIMIT=50] 
         */
        public: static const int reboot_safemode_title = 0x010400f0;
        /**  Recent Tasks dialog: title
     TODO: this should move to SystemUI.apk, but the code for the old
            recent dialog is still in the framework
     
         */
        public: static const int recent_tasks_title = 0x010400f2;
        /**  Assistant relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeAssistant = 0x0104034f;
        /**  Brother relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeBrother = 0x01040350;
        /**  Child relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeChild = 0x01040351;
        /**  Custom relationship custom [CHAR LIMIT=20] 
         */
        public: static const int relationTypeCustom = 0x0104034e;
        /**  Domestic Partner relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeDomesticPartner = 0x01040352;
        /**  Father relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeFather = 0x01040353;
        /**  Friend relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeFriend = 0x01040354;
        /**  Manager relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeManager = 0x01040355;
        /**  Mother relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeMother = 0x01040356;
        /**  Parent relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeParent = 0x01040357;
        /**  Partner relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypePartner = 0x01040358;
        /**  Referred by relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeReferredBy = 0x01040359;
        /**  Relative relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeRelative = 0x0104035a;
        /**  Sister relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeSister = 0x0104035b;
        /**  Spouse relationship type [CHAR LIMIT=20] 
         */
        public: static const int relationTypeSpouse = 0x0104035c;
        /**  Format indicating a relative expression and time.
         Example: "4 hours ago, 11:00 am" 
         */
        public: static const int relative_time = 0x0104044a;
        /**  Item on EditText context menu. This action is used to replace the current word by other suggested words, suggested by the IME or the spell checker 
         */
        public: static const int replace = 0x01040451;
        /**  Button allowing the user to send a bug report for application which has encountered an error. 
         */
        public: static const int report = 0x01040479;
        /**  Label for <input type="reset"> button in html 
         */
        public: static const int reset = 0x01040545;
        /**  PIN entry dialog label for new PIN confirmation [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_confirm_pin = 0x0104065c;
        /**  PIN creation dialog message [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_create_pin = 0x0104065d;
        /**  PIN entry dialog title for entering the administrator PIN [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_enter_admin_pin = 0x01040657;
        /**  PIN entry dialog label for new PIN [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_enter_new_pin = 0x0104065b;
        /**  PIN entry dialog label/hint for old PIN [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_enter_old_pin = 0x0104065a;
        /**  PIN entry dialog label/hint for PIN [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_enter_pin = 0x01040658;
        /**  PIN entry dialog error when PINs are not the same [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_error_doesnt_match = 0x0104065e;
        /**  PIN entry dialog error when PIN is too short [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_error_too_short = 0x0104065f;
        /**  PIN entry dialog label/hint for incorrect PIN entry [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_incorrect = 0x01040659;
        /**  PIN entry dialog tells the user to not enter a PIN for a while. [CHAR LIMIT=none] 
         */
        public: static const int restr_pin_try_later = 0x01040660;
        public: static const int revoke = 0x010405fd;
        /**  Choice in the ringtone picker.  If chosen, the default ringtone will be used. 
         */
        public: static const int ringtone_default = 0x010404a0;
        /**  Choice in the ringtone picker.  If chosen, the default ringtone will be used. This fills in the actual ringtone's title into the message. 
         */
        public: static const int ringtone_default_with_actual = 0x010404a1;
        /**  The title of the ringtone picker dialog. 
         */
        public: static const int ringtone_picker_title = 0x010404a3;
        /**  Choice in the ringtone picker.  If chosen, there will be silence instead of a ringtone played. 
         */
        public: static const int ringtone_silent = 0x010404a2;
        /**  If there is ever a ringtone set for some setting, but that ringtone can no longer be resolved, t his is shown instead.  For example, if the ringtone was on a SD card and it had been removed, this woudl be shown for ringtones on that SD card. 
         */
        public: static const int ringtone_unknown = 0x010404a4;
        /**  Default roaming indicator text 
 Default roaming indicator text 
         */
        public: static const int roamingText0 = 0x010400b8;
        public: static const int roamingText1 = 0x010400b9;
        public: static const int roamingText10 = 0x010400c2;
        public: static const int roamingText11 = 0x010400c3;
        public: static const int roamingText12 = 0x010400c4;
        public: static const int roamingText2 = 0x010400ba;
        public: static const int roamingText3 = 0x010400bb;
        public: static const int roamingText4 = 0x010400bc;
        public: static const int roamingText5 = 0x010400bd;
        public: static const int roamingText6 = 0x010400be;
        public: static const int roamingText7 = 0x010400bf;
        public: static const int roamingText8 = 0x010400c0;
        public: static const int roamingText9 = 0x010400c1;
        public: static const int roamingTextSearching = 0x010400c5;
        /**  Displayed to the user to tell them that they have started up the phone in "safe mode" 
         */
        public: static const int safeMode = 0x01040103;
        /**  Message shown in dialog when user is attempting to set the music volume above the
    recommended maximum level for headphones 
         */
        public: static const int safe_media_volume_warning = 0x010405f3;
        /**  DO NOT TRANSLATE 
         */
        public: static const int sans_serif = 0x01040670;
        /**  Title of the WebView save password dialog.  If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. 
         */
        public: static const int save_password_label = 0x010403d0;
        /**  If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Text in the save password dialog, asking if the browser should remember a password. 
         */
        public: static const int save_password_message = 0x01040425;
        /**  Button in the save password dialog, saying never to remember this password. This should be short. Should be "Never for this site". But it is too long, use "Never" instead 
         */
        public: static const int save_password_never = 0x01040428;
        /**  If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Button in the save password dialog, saying not to remember this password. 
         */
        public: static const int save_password_notnow = 0x01040426;
        /**  If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Button in the save password dialog, saying to remember this password. 
         */
        public: static const int save_password_remember = 0x01040427;
        /**  [CHAR LIMIT=200] Compat mode dialog: hint to re-enable compat mode dialog. 
         */
        public: static const int screen_compat_mode_hint = 0x01040481;
        /**  [CHAR LIMIT=50] Compat mode dialog: compat mode switch label. 
         */
        public: static const int screen_compat_mode_scale = 0x0104047f;
        /**  [CHAR LIMIT=50] Compat mode dialog: compat mode switch label. 
         */
        public: static const int screen_compat_mode_show = 0x01040480;
        /**  Button to lock the screen, within the Phone Options dialog 
         */
        public: static const int screen_lock = 0x010400e8;
        /**  This is the default button label in the system-wide search UI.
         It is also used by the home screen's search "widget". It should be short 
         */
        public: static const int search_go = 0x0104000c;
        /**  SearchView accessibility description for clear button [CHAR LIMIT=NONE] 
         */
        public: static const int searchview_description_clear = 0x01040432;
        /**  SearchView accessibility description for search text field [CHAR LIMIT=NONE] 
         */
        public: static const int searchview_description_query = 0x01040431;
        /**  SearchView accessibility description for search button [CHAR LIMIT=NONE] 
         */
        public: static const int searchview_description_search = 0x01040430;
        /**  SearchView accessibility description for submit button [CHAR LIMIT=NONE] 
         */
        public: static const int searchview_description_submit = 0x01040433;
        /**  SearchView accessibility description for voice button [CHAR LIMIT=NONE] 
         */
        public: static const int searchview_description_voice = 0x01040434;
        /**  Appened to express the value is this unit of time. 
         */
        public: static const int second = 0x01040444;
        /**  Appened to express the value is this unit of time. 
         */
        public: static const int seconds = 0x01040445;
        /**  Item on EditText context menu. This action is used to select all text in the edit field. 
         */
        public: static const int selectAll = 0x0104000d;
        /**  Item on EditText context menu. Added only when the context menu is not empty, it enable selection context mode. [CHAR LIMIT=20] 
         */
        public: static const int selectTextMode = 0x01040016;
        /**  Name of the dialog that lets the user choose an accented character to insert 
         */
        public: static const int select_character = 0x010404b9;
        /**  Accessibility announcement for the day picker [CHAR LIMIT=NONE] 
         */
        public: static const int select_day = 0x01040669;
        /**  Accessibility announcement for hour circular picker [CHAR LIMIT=NONE] 
         */
        public: static const int select_hours = 0x01040665;
        /**  Title of the pop-up dialog in which the user switches keyboard, also known as input method. 
         */
        public: static const int select_input_method = 0x010404f1;
        /**  Message of the notification to prompt the user to select a keyboard layout. 
         */
        public: static const int select_keyboard_layout_notification_message = 0x010404f6;
        /**  Title of the notification to prompt the user to select a keyboard layout. 
         */
        public: static const int select_keyboard_layout_notification_title = 0x010404f5;
        /**  Accessibility announcement for minute circular picker [CHAR LIMIT=NONE] 
         */
        public: static const int select_minutes = 0x01040666;
        /**  Accessibility announcement for the year picker [CHAR LIMIT=NONE] 
         */
        public: static const int select_year = 0x0104066a;
        /**  Displayed in the title of the chooser for things to do with text that
         is to be sent to another application. For example, I can send
         text through SMS or IM.  A dialog with those choices would be shown,
         and this would be the title. 
         */
        public: static const int sendText = 0x01040491;
        /**  STK sending DTMF, SMS, USSD, SS 
         */
        public: static const int sending = 0x010405b3;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int serial_number = 0x010405ab;
        /**  Example: Service was enabled for: Voice, Data 
         */
        public: static const int serviceClassData = 0x010400b1;
        /**  Meaning: asynchronous data.  Example: Service was enabled for: Voice, Async 
         */
        public: static const int serviceClassDataAsync = 0x010400b4;
        /**  Meaning: synchronous data.  Example: Service was enabled for: Voice, Async 
         */
        public: static const int serviceClassDataSync = 0x010400b5;
        /**  Example: Service was enabled for: Voice, FAX 
         */
        public: static const int serviceClassFAX = 0x010400b2;
        /**  Meaning: unknown.  Example: Service was enabled for: Voice, PAD 
         */
        public: static const int serviceClassPAD = 0x010400b7;
        /**  Meaning: packet data.  Example: Service was enabled for: Voice, Packet 
         */
        public: static const int serviceClassPacket = 0x010400b6;
        /**  Example: Service was enabled for: Voice, SMS 
         */
        public: static const int serviceClassSMS = 0x010400b3;
        /**  Example: Service was enabled for: Voice, Data 
         */
        public: static const int serviceClassVoice = 0x010400b0;
        /**  Displayed when a phone feature such as call forwarding was deactivated. 
         */
        public: static const int serviceDisabled = 0x01040083;
        /**  Displayed when a phone feature such as call barring was activated. 
         */
        public: static const int serviceEnabled = 0x01040081;
        /**  Displayed in front of the list of a set of service classes
         (voice, data, fax, etc.) that were enabled. 
         */
        public: static const int serviceEnabledFor = 0x01040082;
        /**  Displayed when a phone property such as a SIM password was erased. 
         */
        public: static const int serviceErased = 0x01040085;
        /**  Displayed to tell the user that caller ID is not provisioned for their SIM. 
         */
        public: static const int serviceNotProvisioned = 0x010400a5;
        /**  Displayed when a phone property such as a SIM password was registered. 
         */
        public: static const int serviceRegistered = 0x01040084;
        /**  Text to show in the auto complete drop down list on a text view when the WebView can auto fill the entire form but the user has not configured an AutoFill profile [CHAR-LIMIT=19] 
         */
        public: static const int setup_autofill = 0x010403d3;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int sha1_fingerprint = 0x010405ae;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int sha256_fingerprint = 0x010405ad;
        /**  Text for WebView's text selection Action Mode 
 ActionBar action to share the current selection [CHAR LIMIT=10] 
         */
        public: static const int share = 0x01040559;
        /**  Title for a dialog showing possible activities for sharing in ShareActionProvider [CHAR LIMIT=25] 
         */
        public: static const int share_action_provider_share_with = 0x010405b1;
        /**  ShareActionProvider - accessibility support 
 Description of the choose target button in a ShareActionProvider (share UI). [CHAR LIMIT=NONE] 
         */
        public: static const int shareactionprovider_share_with = 0x01040584;
        /**  Description of a share target (both in the list of such or the default share button) in a ShareActionProvider (share UI). [CHAR LIMIT=NONE] 
         */
        public: static const int shareactionprovider_share_with_application = 0x01040585;
        /**  Summary text of a toggle switch to enable/disable use of the IME while a physical
         keyboard is connected[CHAR LIMIT=25] 
         */
        public: static const int show_ime = 0x010404f3;
        /**  Shutdown Confirmation Dialog.  When the user chooses to power off the phone, there will
         be a confirmation dialog.  This is the message. 
         */
        public: static const int shutdown_confirm = 0x010400ee;
        /**  Shutdown Confirmation Dialog.  When the user chooses to power off the phone, it asks
         the user if they'd like to shut down.  This is the message.  This is used instead of
         shutdown_confirm when the system is configured to use long press to go directly to the
         power off dialog instead of the global actions menu. 
         */
        public: static const int shutdown_confirm_question = 0x010400ef;
        /**  Shutdown Progress Dialog. This is shown if the user chooses to power off the phone. 
         */
        public: static const int shutdown_progress = 0x010400ed;
        /**  Button to turn on silent mode, within the Phone Options dialog 
         */
        public: static const int silent_mode = 0x010400e5;
        /**  Spoken description for ringer normal option. [CHAR LIMIT=NONE] 
         */
        public: static const int silent_mode_ring = 0x010400ec;
        /**  Spoken description for ringer silent option. [CHAR LIMIT=NONE] 
         */
        public: static const int silent_mode_silent = 0x010400ea;
        /**  Spoken description for ringer vibrate option. [CHAR LIMIT=NONE] 
         */
        public: static const int silent_mode_vibrate = 0x010400eb;
        /**  See SIM_ADDED_DIALOG.  This is the message of that dialog. 
         */
        public: static const int sim_added_message = 0x010404cb;
        /**  See SIM_ADDED_DIALOG.  This is the title of that dialog. 
         */
        public: static const int sim_added_title = 0x010404ca;
        /**  See SIM_REMOVED_DIALOG.  This is the button of that dialog. 
         */
        public: static const int sim_done_button = 0x010404c9;
        /**  See SIM_REMOVED_DIALOG.  This is the message of that dialog. 
         */
        public: static const int sim_removed_message = 0x010404c8;
        /**  See SIM_REMOVED_DIALOG.  This is the title of that dialog. 
         */
        public: static const int sim_removed_title = 0x010404c7;
        /**  See SIM_ADDED_DIALOG.  This is the button of that dialog. 
         */
        public: static const int sim_restart_button = 0x010404cc;
        /**  Custom SIP address type. Same context as Custom phone type.  
         */
        public: static const int sipAddressTypeCustom = 0x0104035d;
        /**  Home SIP address type. Same context as Home phone type. 
         */
        public: static const int sipAddressTypeHome = 0x0104035e;
        /**  Other SIP address type. Same context as Other phone type. 
         */
        public: static const int sipAddressTypeOther = 0x01040360;
        /**  Work SIP address type. Same context as Work phone type. 
         */
        public: static const int sipAddressTypeWork = 0x0104035f;
        /**  Optional button to Skip a PreferenceActivity [CHAR LIMIT=20] 
         */
        public: static const int skip_button_label = 0x0104054d;
        /**  See SMS_DIALOG.  This is the message shown in that dialog. [CHAR LIMIT=NONE] 
         */
        public: static const int sms_control_message = 0x010404bb;
        /**  See SMS_DIALOG.  This is a button choice to disallow sending the SMSes. [CHAR LIMIT=30] 
         */
        public: static const int sms_control_no = 0x010404bd;
        /**  SMS_DIALOG: An SMS dialog is shown if an application tries to send too many SMSes.  This is the title of that dialog. 
         */
        public: static const int sms_control_title = 0x010404ba;
        /**  See SMS_DIALOG.  This is a button choice to allow sending the SMSes. [CHAR LIMIT=30] 
         */
        public: static const int sms_control_yes = 0x010404bc;
        /**  Message details for the SMS short code confirmation dialog (premium short code). [CHAR LIMIT=NONE] 
         */
        public: static const int sms_premium_short_code_details = 0x010404c0;
        /**  Text of the approval button for the SMS short code confirmation dialog. [CHAR LIMIT=30] 
         */
        public: static const int sms_short_code_confirm_allow = 0x010404c1;
        /**  Text of the approval button for the SMS short code confirmation dialog when checkbox is checked. [CHAR LIMIT=30] 
         */
        public: static const int sms_short_code_confirm_always_allow = 0x010404c5;
        /**  Text of the cancel button for the SMS short code confirmation dialog. [CHAR LIMIT=30] 
         */
        public: static const int sms_short_code_confirm_deny = 0x010404c2;
        /**  The message text for the SMS short code confirmation dialog. [CHAR LIMIT=NONE] 
         */
        public: static const int sms_short_code_confirm_message = 0x010404be;
        /**  Text of the cancel button for the SMS short code confirmation dialog when checkbox is checked. [CHAR LIMIT=30] 
         */
        public: static const int sms_short_code_confirm_never_allow = 0x010404c6;
        /**  Message details for the SMS short code confirmation dialog (possible premium short code). [CHAR LIMIT=NONE] 
         */
        public: static const int sms_short_code_details = 0x010404bf;
        /**  Text of the checkbox for the SMS short code confirmation dialog to remember the user's choice. [CHAR LIMIT=40] 
         */
        public: static const int sms_short_code_remember_choice = 0x010404c3;
        /**  Text shown when remember checkbox is checked to inform the user how they may undo the setting. [CHAR LIMIT=40] 
         */
        public: static const int sms_short_code_remember_undo_instruction = 0x010404c4;
        /**  Text of the alert that is displayed when an application has violated StrictMode. 
         */
        public: static const int smv_application = 0x01040482;
        /**  Text of the alert that is displayed when an application has violated StrictMode. 
         */
        public: static const int smv_process = 0x01040483;
        /**  Content text for a notification. The Title of the notification is "ssl_ca_cert_warning",
         i.e.  "Network may be monitored". This says that an unknown party is doing the monitoring.
         [CHAR LIMIT=100]
         */
        public: static const int ssl_ca_cert_noti_by_unknown = 0x010400e1;
        /**  Content text for a notification. The Title of the notification is "ssl_ca_cert_warning",
         i.e.  "Network may be monitored". This indicates who is doing the monitoring.
         [CHAR LIMIT=100]
         */
        public: static const int ssl_ca_cert_noti_managed = 0x010400e2;
        /**  Shows up when there is a user SSL CA Cert installed on the
         device.  Indicates to the user that SSL traffic can be intercepted.  [CHAR LIMIT=NONE] 
         */
        public: static const int ssl_ca_cert_warning = 0x010400e0;
        /**  SSL Certificate dialogs 
 Title for an SSL Certificate dialog 
         */
        public: static const int ssl_certificate = 0x010405a1;
        /**  Message on an SSL Certificate dialog 
         */
        public: static const int ssl_certificate_is_valid = 0x010405a2;
        /**  Text to use when the number in a notification info is too large
         (greater than status_bar_notification_info_maxnum, defined in
         values/config.xml) and must be truncated. May need to be localized
         for most appropriate textual indicator of "more than X".
         [CHAR LIMIT=4] 
         */
        public: static const int status_bar_notification_info_overflow = 0x01040017;
        /**  Storage description for internal storage. [CHAR LIMIT=NONE] 
         */
        public: static const int storage_internal = 0x0104058f;
        /**  Storage description for the SD card. [CHAR LIMIT=NONE] 
         */
        public: static const int storage_sd_card = 0x01040590;
        /**  Storage description for USB storage. [CHAR LIMIT=NONE] 
         */
        public: static const int storage_usb = 0x01040591;
        /**  Label for <input type="submit"> button in html 
         */
        public: static const int submit = 0x01040546;
        /**  Label to show for a service that is running because it is a sync adapter. 
         */
        public: static const int sync_binding_label = 0x01040534;
        /**  Dialog action for when there are too many deletes that would take place and we want user confirmation, and the user wants to do nothing for now 
         */
        public: static const int sync_do_nothing = 0x01040567;
        /**  Dialog action for when there are too many deletes that would take place and we want user confirmation, and the user wants to delete the items 
         */
        public: static const int sync_really_delete = 0x01040565;
        /**  Error message when the sync tried to delete too many things 
         */
        public: static const int sync_too_many_deletes = 0x01040563;
        /**  Dialog message for when there are too many deletes that would take place and we want user confirmation 
         */
        public: static const int sync_too_many_deletes_desc = 0x01040564;
        /**  Dialog action for when there are too many deletes that would take place and we want user confirmation, and the user wants to undo the deletions 
         */
        public: static const int sync_undo_deletes = 0x01040566;
        /**  @hide DO NOT TRANSLATE. date formatting pattern for system ui.
         */
        public: static const int system_ui_date_pattern = 0x0104005e;
        /**  Suffix added to a number to signify size in terabytes. 
         */
        public: static const int terabyteShort = 0x0104006f;
        public: static const int tethered_notification_message = 0x0104054a;
        /**  Strings for tethered notification 
 Shown when the device is tethered 
         */
        public: static const int tethered_notification_title = 0x01040549;
        /**  Text selection contextual mode title, displayed in the CAB. [CHAR LIMIT=20] 
         */
        public: static const int textSelectionCABTitle = 0x01040453;
        /**  Displayed to the user to confirm that they have copied text from a web page to the clipboard. 
         */
        public: static const int text_copied = 0x0104042a;
        public: static const int throttle_warning_notification_message = 0x0104068c;
        public: static const int throttle_warning_notification_title = 0x0104068b;
        public: static const int throttled_notification_message = 0x0104068e;
        public: static const int throttled_notification_title = 0x0104068d;
        public: static const int time_of_day = 0x01040055;
        /**  Description of the button to decrease the TimePicker's hour value. [CHAR LIMIT=NONE] 
         */
        public: static const int time_picker_decrement_hour_button = 0x01040572;
        /**  Description of the button to decrease the TimePicker's minute value. [CHAR LIMIT=NONE] 
         */
        public: static const int time_picker_decrement_minute_button = 0x01040570;
        /**  Description of the button to decrease the TimePicker's set AM value. [CHAR LIMIT=NONE] 
         */
        public: static const int time_picker_decrement_set_am_button = 0x01040574;
        /**  Date/Time picker dialogs strings 
 The title of the time picker dialog. [CHAR LIMIT=NONE] 
         */
        public: static const int time_picker_dialog_title = 0x010404cd;
        /**  Description of the button to increase the TimePicker's hour value. [CHAR LIMIT=NONE] 
         */
        public: static const int time_picker_increment_hour_button = 0x01040571;
        /**  TimePicker - accessibility support 
 Description of the button to increase the TimePicker's minute value. [CHAR LIMIT=NONE] 
         */
        public: static const int time_picker_increment_minute_button = 0x0104056f;
        /**  Description of the button to increase the TimePicker's set PM value. [CHAR LIMIT=NONE] 
         */
        public: static const int time_picker_increment_set_pm_button = 0x01040573;
        /**  DO NOT TRANSLATE 
         */
        public: static const int time_placeholder = 0x0104066e;
        public: static const int timepicker_ampm_circle_radius_multiplier = 0x0104004a;
        /**  New TimePicker dimensions. 
         */
        public: static const int timepicker_circle_radius_multiplier = 0x01040047;
        public: static const int timepicker_circle_radius_multiplier_24HourMode = 0x01040048;
        public: static const int timepicker_numbers_radius_multiplier_inner = 0x0104004c;
        public: static const int timepicker_numbers_radius_multiplier_normal = 0x0104004b;
        public: static const int timepicker_numbers_radius_multiplier_outer = 0x0104004d;
        public: static const int timepicker_selection_radius_multiplier = 0x01040049;
        public: static const int timepicker_text_size_multiplier_inner = 0x0104004f;
        public: static const int timepicker_text_size_multiplier_normal = 0x0104004e;
        public: static const int timepicker_text_size_multiplier_outer = 0x01040050;
        public: static const int timepicker_transition_end_radius_multiplier = 0x01040052;
        public: static const int timepicker_transition_mid_radius_multiplier = 0x01040051;
        public: static const int transient_navigation_confirmation = 0x010406c4;
        public: static const int transient_navigation_confirmation_long = 0x010406c5;
        /**  Button to turn off the radio, within the Phone Options dialog 
         */
        public: static const int turn_off_radio = 0x010400e7;
        /**  Button to turn on the radio, within the Phone Options dialog 
         */
        public: static const int turn_on_radio = 0x010400e6;
        /**  Shown in the tutorial for tap twice for zoom control. 
         */
        public: static const int tutorial_double_tap_to_zoom_message_short = 0x0104051f;
        /**  How to display the lack of a name 
         */
        public: static const int unknownName = 0x0104000e;
        /**  Used in Contacts for a field that has no label and in Note Pad
         for a note with no name. 
         */
        public: static const int untitled = 0x0104000f;
        /**  Localized strings for WebView 
 Label for button in a WebView that will open a chooser to choose a file to upload 
         */
        public: static const int upload_file = 0x01040543;
        /**  USB_PREFERENCES: Notification for when a USB accessory is attached.  This is the title 
         */
        public: static const int usb_accessory_notification_title = 0x010404e9;
        /**  USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in mass storage mode (for installer CD image).  This is the title 
         */
        public: static const int usb_cd_installer_notification_title = 0x010404e8;
        /**  USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in MTP mode.  This is the title 
         */
        public: static const int usb_mtp_notification_title = 0x010404e6;
        /**  See USB_PREFERENCES. This is the message. 
         */
        public: static const int usb_notification_message = 0x010404ea;
        /**  USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in PTP mode.  This is the title 
         */
        public: static const int usb_ptp_notification_title = 0x010404e7;
        /**  USB storage dialog strings 
 This is the title for the activity's window. 
         */
        public: static const int usb_storage_activity_title = 0x010404d5;
        /**  See USB_STORAGE.    This is the button text to mount the phone on the computer. 
         */
        public: static const int usb_storage_button_mount = 0x010404d8;
        /**  See USB_STORAGE_DIALOG.  If there was an error mounting, this is the text. 
         */
        public: static const int usb_storage_error_message = 0x010404d9;
        /**  See USB_STORAGE.    This is the message. [CHAR LIMIT=NONE] 
         */
        public: static const int usb_storage_message = 0x010404d7;
        /**  See USB_STORAGE. This is the message. 
         */
        public: static const int usb_storage_notification_message = 0x010404db;
        /**  USB_STORAGE: When the user connects the phone to a computer via USB, we show a notification asking if he wants to share files across.  This is the title 
         */
        public: static const int usb_storage_notification_title = 0x010404da;
        /**  See USB_STORAGE_STOP.    This is the button text to stop usb storage. 
         */
        public: static const int usb_storage_stop_button_mount = 0x010404e0;
        /**  See USB_STORAGE_STOP_DIALOG.  If there was an error stopping, this is the text. 
         */
        public: static const int usb_storage_stop_error_message = 0x010404e1;
        /**  See USB_STORAGE_STOP.    This is the message. 
         */
        public: static const int usb_storage_stop_message = 0x010404df;
        /**  See USB_STORAGE. This is the message. 
         */
        public: static const int usb_storage_stop_notification_message = 0x010404dd;
        /**  USB_STORAGE_STOP: While USB storage is enabled, we show a notification dialog asking if he wants to stop. This is the title 
         */
        public: static const int usb_storage_stop_notification_title = 0x010404dc;
        /**  USB storage stop dialog strings 
 This is the label for the activity, and should never be visible to the user. 
 See USB_STORAGE_STOP.  USB_STORAGE_STOP_DIALOG:  After the user selects the notification, a dialog is shown asking if he wants to stop usb storage.  This is the title. 
         */
        public: static const int usb_storage_stop_title = 0x010404de;
        /**  See USB_STORAGE.  USB_STORAGE_DIALOG:  After the user selects the notification, a dialog is shown asking if he wants to mount.  This is the title. 
         */
        public: static const int usb_storage_title = 0x010404d6;
        /**  Title of the list of alternate options to complete an action shown when the
         last used option is being displayed separately. 
         */
        public: static const int use_a_different_app = 0x0104046b;
        public: static const int use_physical_keyboard = 0x0104068a;
        /**  Label for the user owner in the intent forwarding app. 
         */
        public: static const int user_owner_label = 0x01040105;
        /**  Text spoken when the current user is switched if accessibility is enabled. [CHAR LIMIT=none] 
         */
        public: static const int user_switched = 0x010405f7;
        /**  Message shown when switching to a user [CHAR LIMIT=none] 
         */
        public: static const int user_switching_message = 0x010405f8;
        /**  Label for an information field on an SSL Certificate Dialog 
         */
        public: static const int validity_period = 0x010405a8;
        /**  Title of the dialog where the user is adjusting the audio volume for alarms 
         */
        public: static const int volume_alarm = 0x01040498;
        /**  Title of the dialog where the user is adjusting the phone call volume when connected on bluetooth
         */
        public: static const int volume_bluetooth_call = 0x01040497;
        /**  Title of the dialog where the user is adjusting the phone call volume 
         */
        public: static const int volume_call = 0x01040496;
        /**  Content description for bluetooth volume icon [CHAR LIMIT=100] 
         */
        public: static const int volume_icon_description_bluetooth = 0x0104049b;
        /**  Content description for in-call volume icon [CHAR LIMIT=100] 
         */
        public: static const int volume_icon_description_incall = 0x0104049d;
        /**  Content description for media volume icon [CHAR LIMIT=100] 
         */
        public: static const int volume_icon_description_media = 0x0104049e;
        /**  Content description for notification volume icon [CHAR LIMIT=100] 
         */
        public: static const int volume_icon_description_notification = 0x0104049f;
        /**  Content description for ringer volume icon [CHAR LIMIT=100] 
         */
        public: static const int volume_icon_description_ringer = 0x0104049c;
        /**  Title of the dialog where the user is adjusting the music volume 
         */
        public: static const int volume_music = 0x01040493;
        /**  Hint shown in the volume toast to inform the user that the media audio is playing through Bluetooth. 
         */
        public: static const int volume_music_hint_playing_through_bluetooth = 0x01040494;
        /**  Hint shown in the volume toast to inform the user that the current ringtone is the silent ringtone. 
         */
        public: static const int volume_music_hint_silent_ringtone_selected = 0x01040495;
        /**  Title of the dialog where the user is adjusting the audio volume for notifications 
         */
        public: static const int volume_notification = 0x01040499;
        /**  Title of the dialog where the user is adjusting the phone ringer volume 
         */
        public: static const int volume_ringtone = 0x01040492;
        /**  Title of the dialog where the user is adjusting the general audio volume 
         */
        public: static const int volume_unknown = 0x0104049a;
        /**  Notification body that indicates user can touch to configure lockdown VPN connection. 
         */
        public: static const int vpn_lockdown_config = 0x01040542;
        /**  Notification title when connected to lockdown VPN. 
         */
        public: static const int vpn_lockdown_connected = 0x01040540;
        /**  Notification title when connecting to lockdown VPN. 
         */
        public: static const int vpn_lockdown_connecting = 0x0104053f;
        /**  Notification title when error connecting to lockdown VPN. 
         */
        public: static const int vpn_lockdown_error = 0x01040541;
        /**  The text of the notification when VPN is active. 
         */
        public: static const int vpn_text = 0x0104053d;
        /**  The text of the notification when VPN is active with a session name. 
         */
        public: static const int vpn_text_long = 0x0104053e;
        /**  The title of the notification when VPN is active. 
         */
        public: static const int vpn_title = 0x0104053b;
        /**  The title of the notification when VPN is active with an application name. 
         */
        public: static const int vpn_title_long = 0x0104053c;
        /**  Button allowing the user to choose to wait for an application that is not responding to become responsive again. 
         */
        public: static const int wait = 0x0104047a;
        /**  Label to show for a service that is running because it is a wallpaper. 
         */
        public: static const int wallpaper_binding_label = 0x01040536;
        /**  Do not translate.  WebView User Agent string 
         */
        public: static const int web_user_agent = 0x010403c8;
        /**  Do not translate.  WebView User Agent targeted content 
 Do not translate.  WebView User Agent targeted content 
 Do not translate.  WebView User Agent targeted content 
         */
        public: static const int web_user_agent_target_content = 0x010403c9;
        /**  Text of the alert that is displayed when a web page is not responding. [CHAR-LIMIT=NONE] 
         */
        public: static const int webpage_unresponsive = 0x0104047b;
        /**  ActionBar action to use the current selection to perform a web search [CHAR-LIMIT=16] 
         */
        public: static const int websearch = 0x0104055b;
        /**  Appened to express the value is this unit of time. 
         */
        public: static const int week = 0x01040446;
        /**  Appened to express the value is this unit of time. 
         */
        public: static const int weeks = 0x01040447;
        /**  Title of intent resolver dialog when selecting an application to run. 
         */
        public: static const int whichApplication = 0x01040460;
        /**  Title of intent resolver dialog when selecting an application to run
         and a previously used application is known. 
         */
        public: static const int whichApplicationNamed = 0x01040461;
        /**  Title of intent resolver dialog when selecting an editor application to run. 
         */
        public: static const int whichEditApplication = 0x01040464;
        /**  Title of intent resolver dialog when selecting an editor application to run
         and a previously used application is known. 
         */
        public: static const int whichEditApplicationNamed = 0x01040465;
        /**  Title of intent resolver dialog when selecting a HOME application to run. 
         */
        public: static const int whichHomeApplication = 0x01040468;
        /**  Title of intent resolver dialog when selecting a HOME application to run
         and a previously used application is known. 
         */
        public: static const int whichHomeApplicationNamed = 0x01040469;
        /**  Title of intent resolver dialog when selecting a sharing application to run. 
         */
        public: static const int whichSendApplication = 0x01040466;
        /**  Title of intent resolver dialog when selecting a sharing application to run
         and a previously used application is known. 
         */
        public: static const int whichSendApplicationNamed = 0x01040467;
        /**  Title of intent resolver dialog when selecting a viewer application to run. 
         */
        public: static const int whichViewApplication = 0x01040462;
        /**  Title of intent resolver dialog when selecting a viewer application to run
         and a previously used application is known. 
         */
        public: static const int whichViewApplicationNamed = 0x01040463;
        /**  Class name for default keyguard appwidget [DO NOT TRANSLATE] 
         */
        public: static const int widget_default_class_name = 0x0104001d;
        /**  Package name for default keyguard appwidget [DO NOT TRANSLATE] 
         */
        public: static const int widget_default_package_name = 0x0104001c;
        /**  A notification is shown when a wifi captive portal network is detected.  This is the notification's title. 
 no translation found for wifi_available:one (6654123987418168693) 
 no translation found for wifi_available:other (4192424489168397386) 
 no translation found for wifi_available_detailed:one (1634101450343277345) 
 no translation found for wifi_available_detailed:other (7915895323644292768) 
         */
        public: static const int wifi_available_sign_in = 0x010404a5;
        public: static const int wifi_display_notification_disconnect = 0x0104069b;
        public: static const int wifi_display_notification_message = 0x0104069a;
        public: static const int wifi_display_notification_title = 0x01040699;
        public: static const int wifi_p2p_dialog_title = 0x010404ab;
        public: static const int wifi_p2p_enabled_notification_message = 0x010404af;
        public: static const int wifi_p2p_enabled_notification_title = 0x010404ae;
        public: static const int wifi_p2p_enter_pin_message = 0x010404b6;
        public: static const int wifi_p2p_failed_message = 0x010404ad;
        public: static const int wifi_p2p_frequency_conflict_message = 0x010404b8;
        public: static const int wifi_p2p_from_message = 0x010404b4;
        public: static const int wifi_p2p_invitation_sent_title = 0x010404b2;
        public: static const int wifi_p2p_invitation_to_connect_title = 0x010404b3;
        public: static const int wifi_p2p_show_pin_message = 0x010404b7;
        public: static const int wifi_p2p_to_message = 0x010404b5;
        public: static const int wifi_p2p_turnon_message = 0x010404ac;
        /**  Do not translate. Default access point SSID used for tethering 
         */
        public: static const int wifi_tether_configure_ssid_default = 0x010404aa;
        /**  A notification is shown when a user's selected SSID is later disabled due to connectivity problems.  This is the notification's title / ticker. 
         */
        public: static const int wifi_watchdog_network_disabled = 0x010404a8;
        /**  A notification is shown when a user's selected SSID is later disabled due to connectivity problems.  The complete alert msg is: <hotspot name> + this string, i.e. "Linksys has a poor internet connection" 
         */
        public: static const int wifi_watchdog_network_disabled_detailed = 0x010404a9;
        /**  Description of a wireless display route. [CHAR LIMIT=50] 
         */
        public: static const int wireless_display_route_description = 0x010405bf;
        /**  Write fail reason: printing was cancelled.[CHAR LIMIT=none] 
         */
        public: static const int write_fail_reason_cancelled = 0x01040651;
        /**  Write fail reason: couldn't write the printed content. [CHAR LIMIT=none] 
         */
        public: static const int write_fail_reason_cannot_write = 0x01040652;
        /**  Appened to express the value is this unit of time. 
         */
        public: static const int year = 0x01040448;
        /** 
        Content description for the year selector in the date picker, which displays
        a scrolling, vertical list of years.
        [CHAR LIMIT=50]
     
         */
        public: static const int year_picker_description = 0x01040668;
        /**  Appened to express the value is this unit of time. 
         */
        public: static const int years = 0x01040449;
        /**  Preference framework strings. 
         */
        public: static const int yes = 0x01040013;
        /**  Zen mode condition: no exit criteria. [CHAR LIMIT=NONE] 
 String.format failed for translation 
 no translation found for zen_mode_duration_hours:other (5408537517529822157) 
         */
        public: static const int zen_mode_forever = 0x01040681;
    };
    public: class style {
        /**  Style to apply on top of a wallpaper settings theme when it is being
         shown on top of the real wallpaper 
         */
        public: static const int ActiveWallpaperSettings = 0x01030473;
        public: static const int AlertDialog = 0x010302d4;
        /**  AlertDialog Styles 
         */
        public: static const int AlertDialog.DeviceDefault = 0x0103037b;
        public: static const int AlertDialog.DeviceDefault.Light = 0x0103037c;
        /**  Dialog styles 
         */
        public: static const int AlertDialog.Holo = 0x010303e1;
        public: static const int AlertDialog.Holo.Light = 0x010303e2;
        public: static const int AlertDialog.Leanback = 0x010303fa;
        public: static const int AlertDialog.Leanback.Light = 0x010303fb;
        /**  Dialog styles 
         */
        public: static const int AlertDialog.Material = 0x01030464;
        public: static const int AlertDialog.Material.Light = 0x01030465;
        public: static const int AlertDialog.Micro = 0x0103046c;
        /**  Base style for animations.  This style specifies no animations. 
         */
        public: static const int Animation = 0x01030000;
        /**  Standard animations for a full-screen window or activity. 
         */
        public: static const int Animation.Activity = 0x01030001;
        /**  Animation Styles 
         */
        public: static const int Animation.DeviceDefault.Activity = 0x0103037d;
        public: static const int Animation.DeviceDefault.Dialog = 0x0103037e;
        /**  Standard animations for a non-full-screen window or activity. 
         */
        public: static const int Animation.Dialog = 0x01030002;
        /**  Window animations for screen savers. {@hide} 
         */
        public: static const int Animation.Dream = 0x010302e7;
        public: static const int Animation.DropDownDown = 0x010302db;
        public: static const int Animation.DropDownUp = 0x010302dc;
        /**  Animation Styles 
         */
        public: static const int Animation.Holo = 0x010303de;
        public: static const int Animation.Holo.Activity = 0x010303df;
        public: static const int Animation.Holo.Dialog = 0x010303e0;
        /**  Window animations that are applied to input method overlay windows. 
         */
        public: static const int Animation.InputMethod = 0x01030056;
        /**  Special optional fancy IM animations. @hide 
         */
        public: static const int Animation.InputMethodFancy = 0x010302df;
        /**  Standard animations for a non-full-screen window or activity. 
         */
        public: static const int Animation.LockScreen = 0x010302d6;
        /**  Animation Styles 
         */
        public: static const int Animation.Material = 0x01030460;
        public: static const int Animation.Material.Activity = 0x01030461;
        public: static const int Animation.Material.Dialog = 0x01030462;
        public: static const int Animation.Material.Popup = 0x01030463;
        public: static const int Animation.Micro = 0x0103046a;
        public: static const int Animation.Micro.Activity = 0x0103046b;
        public: static const int Animation.OptionsPanel = 0x010302d7;
        /**  A special animation value used internally for popup windows. 
         */
        public: static const int Animation.PopupWindow = 0x010302e4;
        /**  Window animations used for action mode UI in overlay mode. 
         */
        public: static const int Animation.PopupWindow.ActionMode = 0x010302e5;
        /**  A special animation we can use for recent applications,
         for devices that can support it (do alpha transformations). 
         */
        public: static const int Animation.RecentApplications = 0x010302e3;
        /**  Window animations that are applied to the search bar overlay window.
	Previously used, but currently unused.
         {@hide Pending API council approval} 
         */
        public: static const int Animation.SearchBar = 0x010302e0;
        public: static const int Animation.SubMenuPanel = 0x010302d8;
        /**  Style for animating text selection handles. 
         */
        public: static const int Animation.TextSelectHandle = 0x01030332;
        public: static const int Animation.Toast = 0x01030004;
        /**  Standard animations for a translucent window or activity.  This
         style is <em>not</em> used by default for the translucent theme
         (since translucent activities are a special case that have no
         clear UI paradigm), but you can make your own specialized theme
         with this animation style if you would like to have the standard
         platform transition animation. 
         */
        public: static const int Animation.Translucent = 0x01030003;
        public: static const int Animation.TypingFilter = 0x010302d9;
        public: static const int Animation.TypingFilterRestore = 0x010302da;
        /**  Window animations that are applied to voice activity windows. 
         */
        public: static const int Animation.VoiceActivity = 0x010302dd;
        /**  Window animations that are applied to voice interaction overlay windows. 
         */
        public: static const int Animation.VoiceInteractionSession = 0x010302de;
        /**  Window animations used for volume panel. 
         */
        public: static const int Animation.VolumePanel = 0x010302e6;
        /**  Standard animations for wallpapers. 
         */
        public: static const int Animation.Wallpaper = 0x010302e2;
        /**  Window animations that are applied to the zoom buttons overlay window. 
         */
        public: static const int Animation.ZoomButtons = 0x010302e1;
        /**  Style you can use with a container (typically a horizontal
         LinearLayout) to get the standard "button bar" background and
         spacing. @hide 
         */
        public: static const int ButtonBar = 0x01030058;
        /**  Other Styles 
         */
        public: static const int DeviceDefault.ButtonBar = 0x010301cf;
        public: static const int DeviceDefault.ButtonBar.AlertDialog = 0x010301d0;
        public: static const int DeviceDefault.Light.ButtonBar = 0x010301d2;
        public: static const int DeviceDefault.Light.ButtonBar.AlertDialog = 0x010301d3;
        public: static const int DeviceDefault.Light.SegmentedButton = 0x010301d4;
        public: static const int DeviceDefault.SegmentedButton = 0x010301d1;
        public: static const int DialogWindowTitle = 0x010302d3;
        /**  DialogWindowTitle Styles 
         */
        public: static const int DialogWindowTitle.DeviceDefault = 0x0103037f;
        public: static const int DialogWindowTitle.DeviceDefault.Light = 0x01030380;
        public: static const int DialogWindowTitle.Holo = 0x010303e5;
        public: static const int DialogWindowTitle.Holo.Light = 0x010303e6;
        public: static const int DialogWindowTitle.Material = 0x01030468;
        public: static const int DialogWindowTitle.Material.Light = 0x01030469;
        public: static const int DialogWindowTitle.Micro = 0x0103046d;
        public: static const int Holo = 0x0103039f;
        public: static const int Holo.ButtonBar = 0x010300e5;
        public: static const int Holo.ButtonBar.AlertDialog = 0x010300e7;
        public: static const int Holo.Light = 0x010303a0;
        public: static const int Holo.Light.ButtonBar = 0x010300e6;
        public: static const int Holo.Light.ButtonBar.AlertDialog = 0x010300e8;
        public: static const int Holo.Light.SegmentedButton = 0x010300ea;
        public: static const int Holo.SegmentedButton = 0x010300e9;
        /**  Widget Styles 
         */
        public: static const int Material = 0x01030427;
        public: static const int Material.Light = 0x01030428;
        public: static const int MediaButton = 0x01030037;
        public: static const int MediaButton.Ffwd = 0x0103003b;
        public: static const int MediaButton.Next = 0x01030039;
        public: static const int MediaButton.Pause = 0x0103003d;
        public: static const int MediaButton.Play = 0x0103003a;
        public: static const int MediaButton.Previous = 0x01030038;
        public: static const int MediaButton.Rew = 0x0103003c;
        /**  Pointer styles 
         */
        public: static const int Pointer = 0x0103033c;
        /**  Preference Styles 
         */
        public: static const int Preference = 0x01030311;
        public: static const int Preference.Category = 0x01030315;
        public: static const int Preference.CheckBoxPreference = 0x01030316;
        /**  Preference Styles 
         */
        public: static const int Preference.DeviceDefault = 0x01030370;
        public: static const int Preference.DeviceDefault.Category = 0x01030371;
        public: static const int Preference.DeviceDefault.CheckBoxPreference = 0x01030372;
        public: static const int Preference.DeviceDefault.DialogPreference = 0x01030373;
        public: static const int Preference.DeviceDefault.DialogPreference.EditTextPreference = 0x01030374;
        public: static const int Preference.DeviceDefault.DialogPreference.YesNoPreference = 0x01030375;
        public: static const int Preference.DeviceDefault.Information = 0x01030376;
        public: static const int Preference.DeviceDefault.PreferenceScreen = 0x01030377;
        public: static const int Preference.DeviceDefault.RingtonePreference = 0x01030378;
        public: static const int Preference.DeviceDefault.SeekBarPreference = 0x0103037a;
        public: static const int Preference.DeviceDefault.SwitchPreference = 0x01030379;
        public: static const int Preference.DialogPreference = 0x0103031a;
        public: static const int Preference.DialogPreference.EditTextPreference = 0x0103031c;
        public: static const int Preference.DialogPreference.YesNoPreference = 0x0103031b;
        public: static const int Preference.Holo = 0x0103031e;
        public: static const int Preference.Holo.Category = 0x01030321;
        public: static const int Preference.Holo.CheckBoxPreference = 0x01030322;
        public: static const int Preference.Holo.DialogPreference = 0x01030326;
        public: static const int Preference.Holo.DialogPreference.EditTextPreference = 0x01030328;
        public: static const int Preference.Holo.DialogPreference.YesNoPreference = 0x01030327;
        public: static const int Preference.Holo.Information = 0x01030320;
        public: static const int Preference.Holo.PreferenceScreen = 0x01030325;
        public: static const int Preference.Holo.RingtonePreference = 0x01030329;
        public: static const int Preference.Holo.SeekBarPreference = 0x01030324;
        public: static const int Preference.Holo.SwitchPreference = 0x01030323;
        public: static const int Preference.Information = 0x01030314;
        public: static const int Preference.Material = 0x01030405;
        public: static const int Preference.Material.Category = 0x01030409;
        public: static const int Preference.Material.CheckBoxPreference = 0x0103040a;
        public: static const int Preference.Material.DialogPreference = 0x0103040e;
        public: static const int Preference.Material.DialogPreference.EditTextPreference = 0x01030410;
        public: static const int Preference.Material.DialogPreference.YesNoPreference = 0x0103040f;
        public: static const int Preference.Material.Information = 0x01030408;
        public: static const int Preference.Material.PreferenceScreen = 0x0103040d;
        public: static const int Preference.Material.RingtonePreference = 0x01030411;
        public: static const int Preference.Material.SeekBarPreference = 0x0103040c;
        public: static const int Preference.Material.SwitchPreference = 0x0103040b;
        public: static const int Preference.PreferenceScreen = 0x01030319;
        public: static const int Preference.RingtonePreference = 0x0103031d;
        public: static const int Preference.SeekBarPreference = 0x01030318;
        public: static const int Preference.SwitchPreference = 0x01030317;
        public: static const int PreferenceActivity = 0x01030313;
        public: static const int PreferenceActivity.Material = 0x01030407;
        public: static const int PreferenceFragment = 0x01030312;
        public: static const int PreferenceFragment.Holo = 0x0103031f;
        public: static const int PreferenceFragment.Material = 0x01030406;
        public: static const int PreferenceFragmentList = 0x0103032e;
        public: static const int PreferenceFragmentList.Material = 0x01030416;
        public: static const int PreferenceHeaderList = 0x0103032d;
        public: static const int PreferenceHeaderList.Material = 0x01030415;
        public: static const int PreferenceHeaderPanel = 0x0103032c;
        public: static const int PreferenceHeaderPanel.Material = 0x01030414;
        /**  No margins or background by default. Could be different for x-large screens 
         */
        public: static const int PreferencePanel = 0x0103032a;
        /**  The attributes are overridden here because the x-large or large resources may have
         changed the margins and background in the parent PreferencePanel style. 
         */
        public: static const int PreferencePanel.Dialog = 0x0103032b;
        /**  No margins or background by default. Could be different for x-large screens 
         */
        public: static const int PreferencePanel.Material = 0x01030412;
        /**  The attributes are overridden here because the x-large or large resources may have
         changed the margins and background in the parent PreferencePanel style. 
         */
        public: static const int PreferencePanel.Material.Dialog = 0x01030413;
        /**  Style to apply on top of a wallpaper settings theme when it is being
         shown on top of the real wallpaper 
         */
        public: static const int PreviewWallpaperSettings = 0x01030474;
        /**  Style you can use with a container (typically a horizontal
         LinearLayout) to get a "segmented button" background and spacing. 
         */
        public: static const int SegmentedButton = 0x01030330;
        public: static const int TextAppearance = 0x0103003e;
        public: static const int TextAppearance.AutoCorrectionSuggestion = 0x010302f2;
        /**  Text Appearance Styles 
         */
        public: static const int TextAppearance.DeviceDefault = 0x010301ad;
        public: static const int TextAppearance.DeviceDefault.DatePicker.DayOfMonthLabel = 0x0103036e;
        public: static const int TextAppearance.DeviceDefault.DatePicker.DayOfWeekLabel = 0x0103036c;
        public: static const int TextAppearance.DeviceDefault.DatePicker.MonthLabel = 0x0103036d;
        public: static const int TextAppearance.DeviceDefault.DatePicker.YearLabel = 0x0103036f;
        public: static const int TextAppearance.DeviceDefault.DialogWindowTitle = 0x010301b8;
        public: static const int TextAppearance.DeviceDefault.Inverse = 0x010301ae;
        public: static const int TextAppearance.DeviceDefault.Large = 0x010301af;
        public: static const int TextAppearance.DeviceDefault.Large.Inverse = 0x010301b0;
        public: static const int TextAppearance.DeviceDefault.Medium = 0x010301b1;
        public: static const int TextAppearance.DeviceDefault.Medium.Inverse = 0x010301b2;
        public: static const int TextAppearance.DeviceDefault.SearchResult.Subtitle = 0x010301b6;
        public: static const int TextAppearance.DeviceDefault.SearchResult.Title = 0x010301b5;
        public: static const int TextAppearance.DeviceDefault.Small = 0x010301b3;
        public: static const int TextAppearance.DeviceDefault.Small.Inverse = 0x010301b4;
        public: static const int TextAppearance.DeviceDefault.Widget = 0x010301b9;
        public: static const int TextAppearance.DeviceDefault.Widget.ActionBar.Menu = 0x010301ce;
        public: static const int TextAppearance.DeviceDefault.Widget.ActionBar.Subtitle = 0x010301c7;
        /**  @deprecated Action bars are now themed using the inheritable android:theme attribute. 
         */
        public: static const int TextAppearance.DeviceDefault.Widget.ActionBar.Subtitle.Inverse = 0x010301cb;
        public: static const int TextAppearance.DeviceDefault.Widget.ActionBar.Title = 0x010301c6;
        /**  @deprecated Action bars are now themed using the inheritable android:theme attribute. 
         */
        public: static const int TextAppearance.DeviceDefault.Widget.ActionBar.Title.Inverse = 0x010301ca;
        public: static const int TextAppearance.DeviceDefault.Widget.ActionMode.Subtitle = 0x010301c9;
        /**  @deprecated Action bars are now themed using the inheritable android:theme attribute. 
         */
        public: static const int TextAppearance.DeviceDefault.Widget.ActionMode.Subtitle.Inverse = 0x010301cd;
        public: static const int TextAppearance.DeviceDefault.Widget.ActionMode.Title = 0x010301c8;
        /**  @deprecated Action bars are now themed using the inheritable android:theme attribute. 
         */
        public: static const int TextAppearance.DeviceDefault.Widget.ActionMode.Title.Inverse = 0x010301cc;
        public: static const int TextAppearance.DeviceDefault.Widget.Button = 0x010301ba;
        public: static const int TextAppearance.DeviceDefault.Widget.DropDownHint = 0x010301bf;
        public: static const int TextAppearance.DeviceDefault.Widget.DropDownItem = 0x010301c0;
        public: static const int TextAppearance.DeviceDefault.Widget.EditText = 0x010301c2;
        public: static const int TextAppearance.DeviceDefault.Widget.IconMenu.Item = 0x010301bb;
        public: static const int TextAppearance.DeviceDefault.Widget.PopupMenu = 0x010301c3;
        public: static const int TextAppearance.DeviceDefault.Widget.PopupMenu.Large = 0x010301c4;
        public: static const int TextAppearance.DeviceDefault.Widget.PopupMenu.Small = 0x010301c5;
        public: static const int TextAppearance.DeviceDefault.Widget.TabWidget = 0x010301bc;
        public: static const int TextAppearance.DeviceDefault.Widget.TextView = 0x010301bd;
        public: static const int TextAppearance.DeviceDefault.Widget.TextView.PopupMenu = 0x010301be;
        public: static const int TextAppearance.DeviceDefault.Widget.TextView.SpinnerItem = 0x010301c1;
        public: static const int TextAppearance.DeviceDefault.WindowTitle = 0x010301b7;
        public: static const int TextAppearance.DialogWindowTitle = 0x01030041;
        public: static const int TextAppearance.EasyCorrectSuggestion = 0x010302f0;
        /**  Begin Holo theme styles 
 Text Styles 
         */
        public: static const int TextAppearance.Holo = 0x010300fb;
        public: static const int TextAppearance.Holo.CalendarViewWeekDayView = 0x01030387;
        public: static const int TextAppearance.Holo.DatePicker.DayOfWeekLabel = 0x010303ec;
        public: static const int TextAppearance.Holo.DatePicker.List.YearLabel = 0x010303f1;
        public: static const int TextAppearance.Holo.DatePicker.Selector = 0x010303ed;
        public: static const int TextAppearance.Holo.DatePicker.Selector.DayOfMonthLabel = 0x010303ef;
        public: static const int TextAppearance.Holo.DatePicker.Selector.MonthLabel = 0x010303ee;
        public: static const int TextAppearance.Holo.DatePicker.Selector.YearLabel = 0x010303f0;
        public: static const int TextAppearance.Holo.DialogWindowTitle = 0x01030117;
        public: static const int TextAppearance.Holo.Inverse = 0x010300fc;
        public: static const int TextAppearance.Holo.Large = 0x010300fd;
        public: static const int TextAppearance.Holo.Large.Inverse = 0x010300fe;
        /**  Light text styles 
         */
        public: static const int TextAppearance.Holo.Light = 0x01030388;
        public: static const int TextAppearance.Holo.Light.CalendarViewWeekDayView = 0x0103039e;
        public: static const int TextAppearance.Holo.Light.DatePicker.DayOfWeekLabel = 0x010303f2;
        public: static const int TextAppearance.Holo.Light.DatePicker.List.YearLabel = 0x010303f7;
        public: static const int TextAppearance.Holo.Light.DatePicker.Selector = 0x010303f3;
        public: static const int TextAppearance.Holo.Light.DatePicker.Selector.DayOfMonthLabel = 0x010303f5;
        public: static const int TextAppearance.Holo.Light.DatePicker.Selector.MonthLabel = 0x010303f4;
        public: static const int TextAppearance.Holo.Light.DatePicker.Selector.YearLabel = 0x010303f6;
        public: static const int TextAppearance.Holo.Light.DialogWindowTitle = 0x0103039d;
        public: static const int TextAppearance.Holo.Light.Inverse = 0x01030389;
        public: static const int TextAppearance.Holo.Light.Large = 0x0103038a;
        public: static const int TextAppearance.Holo.Light.Large.Inverse = 0x0103038d;
        public: static const int TextAppearance.Holo.Light.Medium = 0x0103038b;
        public: static const int TextAppearance.Holo.Light.Medium.Inverse = 0x0103038e;
        public: static const int TextAppearance.Holo.Light.SearchResult = 0x01030390;
        public: static const int TextAppearance.Holo.Light.SearchResult.Subtitle = 0x01030392;
        public: static const int TextAppearance.Holo.Light.SearchResult.Title = 0x01030391;
        public: static const int TextAppearance.Holo.Light.Small = 0x0103038c;
        public: static const int TextAppearance.Holo.Light.Small.Inverse = 0x0103038f;
        public: static const int TextAppearance.Holo.Light.TimePicker.AmPmLabel = 0x010303eb;
        public: static const int TextAppearance.Holo.Light.TimePicker.TimeLabel = 0x010303ea;
        public: static const int TextAppearance.Holo.Light.Widget = 0x01030393;
        public: static const int TextAppearance.Holo.Light.Widget.ActionMode.Subtitle = 0x0103039b;
        public: static const int TextAppearance.Holo.Light.Widget.ActionMode.Title = 0x0103039a;
        public: static const int TextAppearance.Holo.Light.Widget.Button = 0x01030394;
        public: static const int TextAppearance.Holo.Light.Widget.DropDownHint = 0x01030399;
        public: static const int TextAppearance.Holo.Light.Widget.EditText = 0x01030395;
        public: static const int TextAppearance.Holo.Light.Widget.PopupMenu = 0x01030396;
        public: static const int TextAppearance.Holo.Light.Widget.PopupMenu.Large = 0x01030397;
        public: static const int TextAppearance.Holo.Light.Widget.PopupMenu.Small = 0x01030398;
        public: static const int TextAppearance.Holo.Light.Widget.Switch = 0x01030386;
        public: static const int TextAppearance.Holo.Light.WindowTitle = 0x0103039c;
        public: static const int TextAppearance.Holo.Medium = 0x010300ff;
        public: static const int TextAppearance.Holo.Medium.Inverse = 0x01030100;
        public: static const int TextAppearance.Holo.SearchResult = 0x01030383;
        public: static const int TextAppearance.Holo.SearchResult.Subtitle = 0x01030104;
        public: static const int TextAppearance.Holo.SearchResult.Title = 0x01030103;
        public: static const int TextAppearance.Holo.Small = 0x01030101;
        public: static const int TextAppearance.Holo.Small.Inverse = 0x01030102;
        public: static const int TextAppearance.Holo.TimePicker.AmPmLabel = 0x010303e9;
        public: static const int TextAppearance.Holo.TimePicker.TimeLabel = 0x010303e8;
        public: static const int TextAppearance.Holo.Widget = 0x01030105;
        public: static const int TextAppearance.Holo.Widget.ActionBar.Menu = 0x01030120;
        public: static const int TextAppearance.Holo.Widget.ActionBar.Subtitle = 0x01030113;
        public: static const int TextAppearance.Holo.Widget.ActionBar.Subtitle.Inverse = 0x0103011d;
        public: static const int TextAppearance.Holo.Widget.ActionBar.Title = 0x01030112;
        public: static const int TextAppearance.Holo.Widget.ActionBar.Title.Inverse = 0x0103011c;
        public: static const int TextAppearance.Holo.Widget.ActionMode = 0x01030384;
        public: static const int TextAppearance.Holo.Widget.ActionMode.Subtitle = 0x01030115;
        public: static const int TextAppearance.Holo.Widget.ActionMode.Subtitle.Inverse = 0x0103011f;
        public: static const int TextAppearance.Holo.Widget.ActionMode.Title = 0x01030114;
        public: static const int TextAppearance.Holo.Widget.ActionMode.Title.Inverse = 0x0103011e;
        public: static const int TextAppearance.Holo.Widget.Button = 0x01030106;
        public: static const int TextAppearance.Holo.Widget.DropDownHint = 0x0103010b;
        public: static const int TextAppearance.Holo.Widget.DropDownItem = 0x0103010c;
        public: static const int TextAppearance.Holo.Widget.EditText = 0x0103010e;
        public: static const int TextAppearance.Holo.Widget.IconMenu.Item = 0x01030107;
        public: static const int TextAppearance.Holo.Widget.PopupMenu = 0x0103010f;
        public: static const int TextAppearance.Holo.Widget.PopupMenu.Large = 0x01030110;
        public: static const int TextAppearance.Holo.Widget.PopupMenu.Small = 0x01030111;
        public: static const int TextAppearance.Holo.Widget.Switch = 0x01030385;
        /**  This style is for smaller screens; values-xlarge defines a version
         for larger screens. 
         */
        public: static const int TextAppearance.Holo.Widget.TabWidget = 0x01030108;
        public: static const int TextAppearance.Holo.Widget.TextView = 0x01030109;
        public: static const int TextAppearance.Holo.Widget.TextView.PopupMenu = 0x0103010a;
        public: static const int TextAppearance.Holo.Widget.TextView.SpinnerItem = 0x0103010d;
        public: static const int TextAppearance.Holo.WindowTitle = 0x01030116;
        public: static const int TextAppearance.Inverse = 0x0103003f;
        public: static const int TextAppearance.Large = 0x01030042;
        public: static const int TextAppearance.Large.Inverse = 0x01030043;
        public: static const int TextAppearance.Large.Inverse.NumberPickerInputText = 0x0103030e;
        /**  Setup and form wizard themes 
         */
        public: static const int TextAppearance.Leanback.FormWizard = 0x010303ff;
        public: static const int TextAppearance.Leanback.FormWizard.Large = 0x01030402;
        public: static const int TextAppearance.Leanback.FormWizard.ListItem = 0x01030403;
        public: static const int TextAppearance.Leanback.FormWizard.Medium = 0x01030401;
        public: static const int TextAppearance.Leanback.FormWizard.Small = 0x01030400;
        /**  Begin Material theme styles 
 Text styles 
         */
        public: static const int TextAppearance.Material = 0x010301ed;
        public: static const int TextAppearance.Material.Body1 = 0x010301f0;
        public: static const int TextAppearance.Material.Body2 = 0x010301ef;
        public: static const int TextAppearance.Material.Button = 0x010301ee;
        public: static const int TextAppearance.Material.CalendarViewWeekDayView = 0x0103041e;
        public: static const int TextAppearance.Material.Caption = 0x010301f1;
        public: static const int TextAppearance.Material.DatePicker.DayOfMonthLabel = 0x01030423;
        public: static const int TextAppearance.Material.DatePicker.DayOfWeekLabel = 0x01030421;
        public: static const int TextAppearance.Material.DatePicker.List.YearLabel = 0x01030425;
        public: static const int TextAppearance.Material.DatePicker.MonthLabel = 0x01030422;
        public: static const int TextAppearance.Material.DatePicker.YearLabel = 0x01030424;
        public: static const int TextAppearance.Material.DialogWindowTitle = 0x010301f2;
        public: static const int TextAppearance.Material.Display1 = 0x010301f6;
        public: static const int TextAppearance.Material.Display2 = 0x010301f5;
        public: static const int TextAppearance.Material.Display3 = 0x010301f4;
        public: static const int TextAppearance.Material.Display4 = 0x010301f3;
        public: static const int TextAppearance.Material.Headline = 0x010301f7;
        /**  Deprecated text styles 
         */
        public: static const int TextAppearance.Material.Inverse = 0x010301f8;
        public: static const int TextAppearance.Material.Large = 0x010301f9;
        public: static const int TextAppearance.Material.Large.Inverse = 0x010301fa;
        public: static const int TextAppearance.Material.Medium = 0x010301fb;
        public: static const int TextAppearance.Material.Medium.Inverse = 0x010301fc;
        public: static const int TextAppearance.Material.Menu = 0x010301fd;
        public: static const int TextAppearance.Material.Menu.Inverse = 0x01030419;
        public: static const int TextAppearance.Material.Notification = 0x010301fe;
        public: static const int TextAppearance.Material.Notification.Emphasis = 0x010301ff;
        public: static const int TextAppearance.Material.Notification.Info = 0x01030200;
        public: static const int TextAppearance.Material.Notification.Line2 = 0x01030201;
        public: static const int TextAppearance.Material.Notification.Time = 0x01030202;
        public: static const int TextAppearance.Material.Notification.Title = 0x01030203;
        public: static const int TextAppearance.Material.SearchResult = 0x0103041a;
        public: static const int TextAppearance.Material.SearchResult.Subtitle = 0x01030204;
        public: static const int TextAppearance.Material.SearchResult.Title = 0x01030205;
        public: static const int TextAppearance.Material.Small = 0x01030206;
        public: static const int TextAppearance.Material.Small.Inverse = 0x01030207;
        public: static const int TextAppearance.Material.Subhead = 0x01030208;
        public: static const int TextAppearance.Material.Subhead.Inverse = 0x01030418;
        public: static const int TextAppearance.Material.TimePicker.AmPmLabel = 0x01030420;
        public: static const int TextAppearance.Material.TimePicker.TimeLabel = 0x0103041f;
        public: static const int TextAppearance.Material.Title = 0x01030209;
        public: static const int TextAppearance.Material.Title.Inverse = 0x01030417;
        public: static const int TextAppearance.Material.Widget = 0x0103020b;
        public: static const int TextAppearance.Material.Widget.ActionBar.Menu = 0x0103020c;
        public: static const int TextAppearance.Material.Widget.ActionBar.Menu.Inverse = 0x0103041d;
        public: static const int TextAppearance.Material.Widget.ActionBar.Subtitle = 0x0103020d;
        public: static const int TextAppearance.Material.Widget.ActionBar.Subtitle.Inverse = 0x0103020e;
        public: static const int TextAppearance.Material.Widget.ActionBar.Title = 0x0103020f;
        public: static const int TextAppearance.Material.Widget.ActionBar.Title.Inverse = 0x01030210;
        public: static const int TextAppearance.Material.Widget.ActionMode = 0x0103041c;
        public: static const int TextAppearance.Material.Widget.ActionMode.Subtitle = 0x01030211;
        public: static const int TextAppearance.Material.Widget.ActionMode.Subtitle.Inverse = 0x01030212;
        public: static const int TextAppearance.Material.Widget.ActionMode.Title = 0x01030213;
        public: static const int TextAppearance.Material.Widget.ActionMode.Title.Inverse = 0x01030214;
        public: static const int TextAppearance.Material.Widget.Button = 0x01030215;
        public: static const int TextAppearance.Material.Widget.DropDownHint = 0x01030216;
        public: static const int TextAppearance.Material.Widget.DropDownItem = 0x01030217;
        public: static const int TextAppearance.Material.Widget.EditText = 0x01030218;
        public: static const int TextAppearance.Material.Widget.IconMenu.Item = 0x01030219;
        public: static const int TextAppearance.Material.Widget.PopupMenu = 0x0103021a;
        public: static const int TextAppearance.Material.Widget.PopupMenu.Large = 0x0103021b;
        public: static const int TextAppearance.Material.Widget.PopupMenu.Small = 0x0103021c;
        public: static const int TextAppearance.Material.Widget.Switch = 0x0103041b;
        public: static const int TextAppearance.Material.Widget.TabWidget = 0x0103021d;
        public: static const int TextAppearance.Material.Widget.TextView = 0x0103021e;
        public: static const int TextAppearance.Material.Widget.TextView.PopupMenu = 0x0103021f;
        public: static const int TextAppearance.Material.Widget.TextView.SpinnerItem = 0x01030220;
        public: static const int TextAppearance.Material.Widget.Toolbar.Subtitle = 0x01030221;
        public: static const int TextAppearance.Material.Widget.Toolbar.Title = 0x01030222;
        public: static const int TextAppearance.Material.WindowTitle = 0x0103020a;
        public: static const int TextAppearance.Medium = 0x01030044;
        public: static const int TextAppearance.Medium.Inverse = 0x01030045;
        public: static const int TextAppearance.Micro = 0x0103046e;
        public: static const int TextAppearance.Micro.DialogWindowTitle = 0x0103046f;
        public: static const int TextAppearance.MisspelledSuggestion = 0x010302f1;
        /**  @hide 
         */
        public: static const int TextAppearance.SearchResult = 0x0103030d;
        /**  @hide 
         */
        public: static const int TextAppearance.SearchResult.Subtitle = 0x01030064;
        /**  @hide 
         */
        public: static const int TextAppearance.SearchResult.Title = 0x01030063;
        /**  @hide 
         */
        public: static const int TextAppearance.SlidingTabActive = 0x0103030c;
        /**  @hide 
         */
        public: static const int TextAppearance.SlidingTabNormal = 0x0103030b;
        public: static const int TextAppearance.Small = 0x01030046;
        public: static const int TextAppearance.Small.CalendarViewWeekDayView = 0x010302ee;
        public: static const int TextAppearance.Small.Inverse = 0x01030047;
        /**  Status Bar Styles 
         */
        public: static const int TextAppearance.StatusBar = 0x010302e8;
        /**  Notification content styles 
         */
        public: static const int TextAppearance.StatusBar.EventContent = 0x01030067;
        public: static const int TextAppearance.StatusBar.EventContent.Emphasis = 0x010302ed;
        public: static const int TextAppearance.StatusBar.EventContent.Info = 0x010302eb;
        public: static const int TextAppearance.StatusBar.EventContent.Line2 = 0x010302ea;
        public: static const int TextAppearance.StatusBar.EventContent.Time = 0x010302ec;
        public: static const int TextAppearance.StatusBar.EventContent.Title = 0x01030068;
        public: static const int TextAppearance.StatusBar.Icon = 0x01030066;
        public: static const int TextAppearance.StatusBar.Ticker = 0x010302e9;
        public: static const int TextAppearance.StatusBar.Title = 0x01030065;
        public: static const int TextAppearance.Suggestion = 0x010302ef;
        public: static const int TextAppearance.SuggestionHighlight = 0x01030118;
        public: static const int TextAppearance.Theme = 0x01030040;
        public: static const int TextAppearance.Theme.Dialog = 0x01030048;
        public: static const int TextAppearance.Toast = 0x0103030f;
        public: static const int TextAppearance.Widget = 0x01030049;
        public: static const int TextAppearance.Widget.ActionBar.Subtitle = 0x01030336;
        public: static const int TextAppearance.Widget.ActionBar.Title = 0x01030335;
        public: static const int TextAppearance.Widget.ActionMode.Subtitle = 0x01030338;
        public: static const int TextAppearance.Widget.ActionMode.Title = 0x01030337;
        public: static const int TextAppearance.Widget.Button = 0x0103004a;
        public: static const int TextAppearance.Widget.DropDownHint = 0x01030050;
        public: static const int TextAppearance.Widget.DropDownItem = 0x01030051;
        public: static const int TextAppearance.Widget.EditText = 0x0103004c;
        public: static const int TextAppearance.Widget.IconMenu.Item = 0x0103004b;
        public: static const int TextAppearance.Widget.PopupMenu = 0x0103033b;
        public: static const int TextAppearance.Widget.PopupMenu.Large = 0x01030080;
        public: static const int TextAppearance.Widget.PopupMenu.Small = 0x01030081;
        public: static const int TextAppearance.Widget.TabWidget = 0x0103004d;
        public: static const int TextAppearance.Widget.TextView = 0x0103004e;
        public: static const int TextAppearance.Widget.TextView.PopupMenu = 0x0103004f;
        public: static const int TextAppearance.Widget.TextView.SpinnerItem = 0x01030052;
        public: static const int TextAppearance.Widget.Toolbar.Subtitle = 0x0103033a;
        public: static const int TextAppearance.Widget.Toolbar.Title = 0x01030339;
        public: static const int TextAppearance.WindowTitle = 0x01030053;
        /**  The default theme for apps on API level 10 and lower. This is the theme used for
         activities that have not explicitly set their own theme.
         <p>You can count on this being a dark
         background with light text on top, but should try to make no
         other assumptions about its appearance. In particular, the text
         inside of widgets using this theme may be completely different,
         with the widget container being a light color and the text on top
         of it a dark color.
         <p>If you're developing for API level 11 and higher, you should instead use {@link
         #Theme_Holo} or {@link #Theme_DeviceDefault}.</p>
    
         */
        public: static const int Theme = 0x01030005;
        /**  Variant on {@link #Theme} that ensures the background is
         completely black.  This is useful for things like image viewers and
         media players.   If you want the normal (dark background) theme
         do <em>not</em> use this, use {@link #Theme}. 
         */
        public: static const int Theme.Black = 0x01030008;
        /**  Variant of {@link #Theme_Black} with no title bar 
         */
        public: static const int Theme.Black.NoTitleBar = 0x01030009;
        /**  Variant of {@link #Theme_Black} that has no title bar and
         no status bar.  This theme
         sets {@link android.R.attr#windowFullscreen} to true.  
         */
        public: static const int Theme.Black.NoTitleBar.Fullscreen = 0x0103000a;
        /**  The default theme for apps that target API level XX and higher.
         <p>The DeviceDefault themes are aliases for a specific device’s native look and feel. The
         DeviceDefault theme family and widget style family offer ways for you to target your app
         to a device’s native theme with all device customizations intact.</p>
         <p>For example, when you set your app's {@code targetSdkVersion} to XX or higher, this
         theme is applied to your application by default. As such, your app might appear with the
         {@link #Theme_Material Material} styles on one device, but with a different set of styles on
         another device. This is great if you want your app to fit with the device's native look and
         feel. If, however, you prefer to keep your UI style the same across all devices, you should
         apply a specific theme such as {@link #Theme_Material Material} or one of your own design.
         For more information, read <a
         href="http://android-developers.blogspot.com/20XX/XX/material-everywhere.html">Material
         Everywhere</a>.</p>
         <p>Styles used by the DeviceDefault theme are named using the convention
         Type.DeviceDefault.Etc (for example, {@code Widget.DeviceDefault.Button} and
         {@code TextAppearance.DeviceDefault.Widget.PopupMenu.Large}).</p>
          
         */
        public: static const int Theme.DeviceDefault = 0x01030128;
        /**  DeviceDefault theme for dialog windows and activities. This changes the window to be
    floating (not fill the entire screen), and puts a frame around its contents. You can set this
    theme on an activity if you would like to make an activity that looks like a Dialog. 
         */
        public: static const int Theme.DeviceDefault.Dialog = 0x0103012e;
        public: static const int Theme.DeviceDefault.Dialog.Alert = 0x01030487;
        /**  Variant of Theme.DeviceDefault.Dialog that has a fixed size. 
         */
        public: static const int Theme.DeviceDefault.Dialog.FixedSize = 0x01030483;
        /**  Variant of {@link #Theme_DeviceDefault_Dialog} that has a nice minimum width for a
    regular dialog. 
         */
        public: static const int Theme.DeviceDefault.Dialog.MinWidth = 0x0103012f;
        /**  Variant of {@link #Theme_DeviceDefault_Dialog} without an action bar 
         */
        public: static const int Theme.DeviceDefault.Dialog.NoActionBar = 0x01030130;
        /**  Variant of Theme.DeviceDefault.Dialog.NoActionBar that has a fixed size. 
         */
        public: static const int Theme.DeviceDefault.Dialog.NoActionBar.FixedSize = 0x01030484;
        /**  Variant of {@link #Theme_DeviceDefault_Dialog_NoActionBar} that has a nice minimum width
    for a regular dialog. 
         */
        public: static const int Theme.DeviceDefault.Dialog.NoActionBar.MinWidth = 0x01030131;
        public: static const int Theme.DeviceDefault.Dialog.NoFrame = 0x01030489;
        /**  DeviceDefault theme for a presentation window on a secondary display. 
         */
        public: static const int Theme.DeviceDefault.Dialog.Presentation = 0x01030485;
        /**  DeviceDefault theme for a window that will be displayed either full-screen on smaller
    screens (small, normal) or as a dialog on larger screens (large, xlarge). 
         */
        public: static const int Theme.DeviceDefault.DialogWhenLarge = 0x01030136;
        /**  DeviceDefault theme for a window without an action bar that will be displayed either
    full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
    xlarge). 
         */
        public: static const int Theme.DeviceDefault.DialogWhenLarge.NoActionBar = 0x01030137;
        /**  DeviceDefault style for input methods, which is used by the
         {@link android.inputmethodservice.InputMethodService} class.
         */
        public: static const int Theme.DeviceDefault.InputMethod = 0x0103013e;
        /**  Variant of {@link #Theme_DeviceDefault} with a light-colored style 
         */
        public: static const int Theme.DeviceDefault.Light = 0x0103012b;
        /**  Variant of the DeviceDefault (light) theme that has a solid (opaque) action bar with an
    inverse color profile. 
         */
        public: static const int Theme.DeviceDefault.Light.DarkActionBar = 0x0103013f;
        /**  DeviceDefault light theme for dialog windows and activities. This changes the window to be
    floating (not fill the entire screen), and puts a frame around its contents. You can set this
    theme on an activity if you would like to make an activity that looks like a Dialog.
         */
        public: static const int Theme.DeviceDefault.Light.Dialog = 0x01030132;
        public: static const int Theme.DeviceDefault.Light.Dialog.Alert = 0x0103048d;
        /**  Variant of Theme.DeviceDefault.Dialog that has a fixed size. 
         */
        public: static const int Theme.DeviceDefault.Light.Dialog.FixedSize = 0x0103048a;
        /**  Variant of {@link #Theme_DeviceDefault_Light_Dialog} that has a nice minimum width for a
    regular dialog. 
         */
        public: static const int Theme.DeviceDefault.Light.Dialog.MinWidth = 0x01030133;
        /**  Variant of {@link #Theme_DeviceDefault_Light_Dialog} without an action bar 
         */
        public: static const int Theme.DeviceDefault.Light.Dialog.NoActionBar = 0x01030134;
        /**  Variant of Theme.DeviceDefault.Dialog.NoActionBar that has a fixed size. 
         */
        public: static const int Theme.DeviceDefault.Light.Dialog.NoActionBar.FixedSize = 0x0103048b;
        /**  Variant of {@link #Theme_DeviceDefault_Light_Dialog_NoActionBar} that has a nice minimum
    width for a regular dialog. 
         */
        public: static const int Theme.DeviceDefault.Light.Dialog.NoActionBar.MinWidth = 0x01030135;
        /**  DeviceDefault light theme for a presentation window on a secondary display. 
         */
        public: static const int Theme.DeviceDefault.Light.Dialog.Presentation = 0x0103048c;
        /**  DeviceDefault light theme for a window that will be displayed either full-screen on smaller
    screens (small, normal) or as a dialog on larger screens (large, xlarge). 
         */
        public: static const int Theme.DeviceDefault.Light.DialogWhenLarge = 0x01030138;
        /**  DeviceDefault light theme for a window without an action bar that will be displayed either
    full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
    xlarge). 
         */
        public: static const int Theme.DeviceDefault.Light.DialogWhenLarge.NoActionBar = 0x01030139;
        /**  Variant of {@link #Theme_DeviceDefault_Light} with no action bar 
         */
        public: static const int Theme.DeviceDefault.Light.NoActionBar = 0x0103012c;
        /**  Variant of {@link #Theme_DeviceDefault_Light} with no action bar and no status bar.
         This theme sets {@link android.R.attr#windowFullscreen} to true.  
         */
        public: static const int Theme.DeviceDefault.Light.NoActionBar.Fullscreen = 0x0103012d;
        /**  Variant of {@link #Theme_DeviceDefault_Light} with no action bar and no status bar
    and extending in to overscan region.  This theme
    sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
    to true. 
         */
        public: static const int Theme.DeviceDefault.Light.NoActionBar.Overscan = 0x010301e0;
        /**  Variant of {@link #Theme_DeviceDefault_Light} that has no title bar and translucent
         system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
         {@link android.R.attr#windowTranslucentNavigation} to true. 
         */
        public: static const int Theme.DeviceDefault.Light.NoActionBar.TranslucentDecor = 0x010301e4;
        /**  DeviceDefault light theme for panel windows. This removes all extraneous window
    decorations, so you basically have an empty rectangle in which to place your content. It makes
    the window floating, with a transparent background, and turns off dimming behind the window. 
         */
        public: static const int Theme.DeviceDefault.Light.Panel = 0x0103013b;
        public: static const int Theme.DeviceDefault.Light.SearchBar = 0x0103048e;
        /**  Variant of {@link #Theme_DeviceDefault} with no action bar 
         */
        public: static const int Theme.DeviceDefault.NoActionBar = 0x01030129;
        /**  Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar.  This theme
         sets {@link android.R.attr#windowFullscreen} to true.  
         */
        public: static const int Theme.DeviceDefault.NoActionBar.Fullscreen = 0x0103012a;
        /**  Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar and
    extending in to overscan region.  This theme
    sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
    to true. 
         */
        public: static const int Theme.DeviceDefault.NoActionBar.Overscan = 0x010301df;
        /**  Variant of {@link #Theme_DeviceDefault} that has no title bar and translucent
         system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
         {@link android.R.attr#windowTranslucentNavigation} to true. 
         */
        public: static const int Theme.DeviceDefault.NoActionBar.TranslucentDecor = 0x010301e3;
        /**  DeviceDefault theme for panel windows. This removes all extraneous window
    decorations, so you basically have an empty rectangle in which to place your content. It makes
    the window floating, with a transparent background, and turns off dimming behind the window. 
         */
        public: static const int Theme.DeviceDefault.Panel = 0x0103013a;
        /**  Theme used for the intent picker activity. 
         */
        public: static const int Theme.DeviceDefault.Resolver = 0x0103048f;
        public: static const int Theme.DeviceDefault.SearchBar = 0x01030488;
        /**  DeviceDefault theme for a window that should look like the Settings app.  
         */
        public: static const int Theme.DeviceDefault.Settings = 0x01030223;
        /**  DeviceDefault style for input methods, which is used by the
         {@link android.service.voice.VoiceInteractionSession} class.
         */
        public: static const int Theme.DeviceDefault.VoiceInteractionSession = 0x01030486;
        /**  DeviceDefault theme for windows that want to have the user's selected wallpaper appear
    behind them. 
         */
        public: static const int Theme.DeviceDefault.Wallpaper = 0x0103013c;
        /**  DeviceDefault theme for windows that want to have the user's selected wallpaper appear
    behind them and without an action bar. 
         */
        public: static const int Theme.DeviceDefault.Wallpaper.NoTitleBar = 0x0103013d;
        /**  Default theme for dialog windows and activities (on API level 10 and lower),
         which is used by the
         {@link android.app.Dialog} class.  This changes the window to be
         floating (not fill the entire screen), and puts a frame around its
         contents.  You can set this theme on an activity if you would like to
         make an activity that looks like a Dialog. 
         */
        public: static const int Theme.Dialog = 0x0103000b;
        /**  Default theme for alert dialog windows (on API level 10 and lower), which is used by the
         {@link android.app.AlertDialog} class.  This is basically a dialog
         but sets the background to empty so it can do two-tone backgrounds. 
         */
        public: static const int Theme.Dialog.Alert = 0x01030476;
        /**  Theme for the dialog shown when an app crashes or ANRs. 
         */
        public: static const int Theme.Dialog.AppError = 0x0103047c;
        /**  Variant of {@link Theme_Dialog} that does not include a frame (or background).
         The view hierarchy of the dialog is responsible for drawing all of
         its pixels. 
         */
        public: static const int Theme.Dialog.NoFrame = 0x01030475;
        /**  Special theme for the recent apps dialog, to allow customization
         with overlays. 
         */
        public: static const int Theme.Dialog.RecentApplications = 0x0103047d;
        /**  Default value for ?attr/panelMenuListTheme on pre-ICS. 
         */
        public: static const int Theme.ExpandedMenu = 0x0103047b;
        /**  Theme for the search input bar when doing global search. The only
         difference from non-global search is that we do not dim the background. 
         */
        public: static const int Theme.GlobalSearchBar = 0x01030479;
        /**  The default theme for apps on API level 10 and lower. This is the theme used for
         activities that have not explicitly set their own theme.
         <p>You can count on this being a dark
         background with light text on top, but should try to make no
         other assumptions about its appearance. In particular, the text
         inside of widgets using this theme may be completely different,
         with the widget container being a light color and the text on top
         of it a dark color.
         <p>If you're developing for API level 11 and higher, you should instead use {@link
         #Theme_Holo} or {@link #Theme_DeviceDefault}.</p>
    
 Honeycomb holographic theme (dark version).
         <p>This is the default system theme for apps that target API level 11 - 13. Starting
         with API level 14, the default system theme is supplied by {@link #Theme_DeviceDefault},
         which might apply a different style on different devices. If you want to ensure that your
         app consistently uses the Holo theme at all times, you must explicitly declare it in your
         manifest. For example, {@code &lt;application android:theme="@android:style/Theme.Holo"&gt;}.
         For more information, read <a
         href="http://android-developers.blogspot.com/2012/01/holo-everywhere.html">Holo
         Everywhere</a>.</p>
         <p>The widgets in the holographic theme are translucent on their background, so
         applications must ensure that any background they use with this theme is itself
         dark; otherwise, it will be difficult to see the widgets. This UI style also includes a
         full action bar by default.</p>

         <p>Styles used by the Holo theme are named using the convention Type.Holo.Etc
         (for example, {@code Widget.Holo.Button} and {@code
         TextAppearance.Holo.Widget.PopupMenu.Large}).
         Specific resources used by Holo are named using the convention @type/foo_bar_baz_holo
         with trailing _dark or _light specifiers if they are not shared between both light and
         dark versions of the theme. 
         */
        public: static const int Theme.Holo = 0x0103006b;
        public: static const int Theme.Holo.CompactMenu = 0x0103049b;
        /**  Holo theme for dialog windows and activities, which is used by the
         {@link android.app.Dialog} class.  This changes the window to be
         floating (not fill the entire screen), and puts a frame around its
         contents.  You can set this theme on an activity if you would like to
         make an activity that looks like a Dialog.
         This is the default Dialog theme for applications targeting Honeycomb
         or newer. 
         */
        public: static const int Theme.Holo.Dialog = 0x0103006f;
        /**  Holo theme for alert dialog windows, which is used by the
         {@link android.app.AlertDialog} class.  This is basically a dialog
         but sets the background to empty so it can do two-tone backgrounds.
         For applications targeting Honeycomb or newer, this is the default
         AlertDialog theme. 
         */
        public: static const int Theme.Holo.Dialog.Alert = 0x0103047f;
        public: static const int Theme.Holo.Dialog.BaseAlert = 0x01030493;
        /**  Variant of Theme.Holo.Dialog that has a fixed size. 
         */
        public: static const int Theme.Holo.Dialog.FixedSize = 0x01030490;
        /**  Variant of Theme.Holo.Dialog that has a nice minimum width for
         a regular dialog. 
         */
        public: static const int Theme.Holo.Dialog.MinWidth = 0x01030070;
        /**  Variant of Theme.Holo.Dialog that does not include a title bar. 
         */
        public: static const int Theme.Holo.Dialog.NoActionBar = 0x01030071;
        /**  Variant of Theme.Holo.Dialog.NoActionBar that has a fixed size. 
         */
        public: static const int Theme.Holo.Dialog.NoActionBar.FixedSize = 0x01030491;
        /**  Variant of Theme.Holo.Dialog.NoActionBar that has a nice minimum width for
         a regular dialog. 
         */
        public: static const int Theme.Holo.Dialog.NoActionBar.MinWidth = 0x01030072;
        /**  Variant of Theme.Holo.Dialog that does not include a frame (or background).
         The view hierarchy of the dialog is responsible for drawing all of
         its pixels. 
         */
        public: static const int Theme.Holo.Dialog.NoFrame = 0x01030492;
        /**  Theme for a presentation window on a secondary display. 
         */
        public: static const int Theme.Holo.Dialog.Presentation = 0x01030494;
        /**  Theme for a window that will be displayed either full-screen on
         smaller screens (small, normal) or as a dialog on larger screens
         (large, xlarge). 
         */
        public: static const int Theme.Holo.DialogWhenLarge = 0x01030077;
        /**  Theme for a window without a title bar that will be displayed either
         full-screen on smaller screens (small, normal) or as a dialog on larger screens
         (large, xlarge). 
         */
        public: static const int Theme.Holo.DialogWhenLarge.NoActionBar = 0x01030078;
        /**  Default theme for holo style input methods, which is used by the
         {@link android.inputmethodservice.InputMethodService} class.
         this inherits from Theme.Panel, but sets up IME appropriate animations
         and a few custom attributes. 
         */
        public: static const int Theme.Holo.InputMethod = 0x0103007f;
        /**  Honeycomb holographic theme (light version).  The widgets in the
         holographic theme are translucent on their brackground, so applications
         must ensure that any background they use with this theme is itself
         light; otherwise, it will be difficult to see the widgets.  This
         UI style also includes a full action bar by default. 
         */
        public: static const int Theme.Holo.Light = 0x0103006e;
        public: static const int Theme.Holo.Light.CompactMenu = 0x0103049c;
        /**  Variant of the holographic (light) theme that has a solid (opaque) action bar
         with an inverse color profile. The dark action bar sharply stands out against
         the light content. 
         */
        public: static const int Theme.Holo.Light.DarkActionBar = 0x01030119;
        /**  Light holo dialog themes 
 Holo light theme for dialog windows and activities, which is used by the
         {@link android.app.Dialog} class.  This changes the window to be
         floating (not fill the entire screen), and puts a frame around its
         contents.  You can set this theme on an activity if you would like to
         make an activity that looks like a Dialog.
         This is the default Dialog theme for applications targeting Honeycomb
         or newer. 
         */
        public: static const int Theme.Holo.Light.Dialog = 0x01030073;
        /**  Holo light theme for alert dialog windows, which is used by the
         {@link android.app.AlertDialog} class.  This is basically a dialog
         but sets the background to empty so it can do two-tone backgrounds.
         For applications targeting Honeycomb or newer, this is the default
         AlertDialog theme. 
         */
        public: static const int Theme.Holo.Light.Dialog.Alert = 0x01030480;
        public: static const int Theme.Holo.Light.Dialog.BaseAlert = 0x01030497;
        /**  Variant of Theme.Holo.Light.Dialog that has a fixed size. 
         */
        public: static const int Theme.Holo.Light.Dialog.FixedSize = 0x01030495;
        /**  Variant of Theme.Holo.Light.Dialog that has a nice minimum width for
         a regular dialog. 
         */
        public: static const int Theme.Holo.Light.Dialog.MinWidth = 0x01030074;
        /**  Variant of Theme.Holo.Light.Dialog that does not include a title bar. 
         */
        public: static const int Theme.Holo.Light.Dialog.NoActionBar = 0x01030075;
        /**  Variant of Theme.Holo.Light.Dialog.NoActionBar that has a fixed size. 
         */
        public: static const int Theme.Holo.Light.Dialog.NoActionBar.FixedSize = 0x01030496;
        /**  Variant of Theme.Holo.Light.Dialog.NoActionBar that has a nice minimum width for
         a regular dialog. 
         */
        public: static const int Theme.Holo.Light.Dialog.NoActionBar.MinWidth = 0x01030076;
        /**  Theme for a presentation window on a secondary display. 
         */
        public: static const int Theme.Holo.Light.Dialog.Presentation = 0x01030498;
        /**  Theme for a window that will be displayed either full-screen on
         smaller screens (small, normal) or as a dialog on larger screens
         (large, xlarge). 
         */
        public: static const int Theme.Holo.Light.DialogWhenLarge = 0x01030079;
        /**  Theme for a window without an action bar that will be displayed either full-screen
         on smaller screens (small, normal) or as a dialog on larger screens
         (large, xlarge). 
         */
        public: static const int Theme.Holo.Light.DialogWhenLarge.NoActionBar = 0x0103007a;
        /**  Variant of the holographic (light) theme with no action bar. 
         */
        public: static const int Theme.Holo.Light.NoActionBar = 0x010300f0;
        /**  Variant of the holographic (light) theme that has no title bar and fills
         the entire screen.  This theme
         sets {@link android.R.attr#windowFullscreen} to true.  
         */
        public: static const int Theme.Holo.Light.NoActionBar.Fullscreen = 0x010300f1;
        /**  Variant of the holographic (light) theme that has no title bar and fills
         the entire screen and extends into the display overscan region.  This theme
         sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
         to true. 
         */
        public: static const int Theme.Holo.Light.NoActionBar.Overscan = 0x010301de;
        /**  Variant of the holographic (light) theme that has no title bar and translucent
         system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
         {@link android.R.attr#windowTranslucentNavigation} to true. 
         */
        public: static const int Theme.Holo.Light.NoActionBar.TranslucentDecor = 0x010301e2;
        /**  Default holo light theme for panel windows.  This removes all extraneous
         window decorations, so you basically have an empty rectangle in which
         to place your content.  It makes the window floating, with a transparent
         background, and turns off dimming behind the window. 
         */
        public: static const int Theme.Holo.Light.Panel = 0x0103007c;
        public: static const int Theme.Holo.Light.SearchBar = 0x0103049a;
        /**  Variant of the holographic (dark) theme with no action bar. 
         */
        public: static const int Theme.Holo.NoActionBar = 0x0103006c;
        /**  Variant of the holographic (dark) theme that has no title bar and fills
         the entire screen.  This theme
         sets {@link android.R.attr#windowFullscreen} to true.  
         */
        public: static const int Theme.Holo.NoActionBar.Fullscreen = 0x0103006d;
        /**  Variant of the holographic (dark) theme that has no title bar and fills
         the entire screen and extends into the display overscan region.  This theme
         sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
         to true. 
         */
        public: static const int Theme.Holo.NoActionBar.Overscan = 0x010301dd;
        /**  Variant of the holographic (dark) theme that has no title bar and translucent
         system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
         {@link android.R.attr#windowTranslucentNavigation} to true. 
         */
        public: static const int Theme.Holo.NoActionBar.TranslucentDecor = 0x010301e1;
        /**  Default holo dark theme for panel windows.  This removes all extraneous
         window decorations, so you basically have an empty rectangle in which
         to place your content.  It makes the window floating, with a transparent
         background, and turns off dimming behind the window. 
         */
        public: static const int Theme.Holo.Panel = 0x0103007b;
        public: static const int Theme.Holo.SearchBar = 0x01030499;
        /**  Default holographic (dark) for windows that want to have the user's selected
         wallpaper appear behind them.  
         */
        public: static const int Theme.Holo.Wallpaper = 0x0103007d;
        /** Default holographic (dark) for windows that want to have the user's selected
         wallpaper appear behind them and without an action bar. 
         */
        public: static const int Theme.Holo.Wallpaper.NoTitleBar = 0x0103007e;
        /**  Theme for the classic "six-pack" icon menu. 
         */
        public: static const int Theme.IconMenu = 0x0103047a;
        /**  Default theme for input methods (on API level 10 and lower), which is used by the
         {@link android.inputmethodservice.InputMethodService} class.
         this inherits from Theme.Panel, but sets up IME appropriate animations
         and a few custom attributes. 
         */
        public: static const int Theme.InputMethod = 0x01030054;
        public: static const int Theme.Leanback.Dialog = 0x0103049d;
        public: static const int Theme.Leanback.Dialog.Alert = 0x010304a0;
        public: static const int Theme.Leanback.Dialog.AppError = 0x010304a3;
        /**  @hide This really shouldn't be public; clients using it should use @* to ref it.  
 Setup and form wizard themes @hide @SystemApi
         */
        public: static const int Theme.Leanback.FormWizard = 0x010302d0;
        public: static const int Theme.Leanback.Light.Dialog = 0x0103049e;
        public: static const int Theme.Leanback.Light.Dialog.Alert = 0x010304a1;
        public: static const int Theme.Leanback.Settings.Dialog = 0x0103049f;
        public: static const int Theme.Leanback.Settings.Dialog.Alert = 0x010304a2;
        /**  Theme for a light background with dark text on top.  Set your activity
         to this theme if you would like such an appearance.  As with the
         default theme, you should try to assume little more than that the
         background will be a light color.
         <p>This is designed for API level 10 and lower.</p>
         */
        public: static const int Theme.Light = 0x0103000c;
        /**  Variant of {@link #Theme_Light} with no title bar 
         */
        public: static const int Theme.Light.NoTitleBar = 0x0103000d;
        /**  Variant of {@link #Theme_Light} that has no title bar and
         no status bar.  This theme
         sets {@link android.R.attr#windowFullscreen} to true. 
         */
        public: static const int Theme.Light.NoTitleBar.Fullscreen = 0x0103000e;
        /**  Default light theme for panel windows (on API level 10 and lower).  This removes all
         extraneous window decorations, so you basically have an empty rectangle in which
         to place your content.  It makes the window floating, with a transparent
         background, and turns off dimming behind the window. 
         */
        public: static const int Theme.Light.Panel = 0x0103005a;
        /**  Theme for a wallpaper's setting activity, which is designed to be a transparent
         background with a light shade, so the previous Activity is visible in the background. 
         */
        public: static const int Theme.Light.WallpaperSettings = 0x01030062;
        /**  Material theme (dark version).
         <p>If you want to ensure that your
         app consistently uses the Material theme at all times, you must explicitly declare it in your
         manifest. For example, {@code &lt;application android:theme="@style/Theme.Material"&gt;}.

         <p>Styles used by the Material theme are named using the convention Type.Material.Etc
         (for example, {@code Widget.Material.Button} and {@code
         TextAppearance.Material.Widget.PopupMenu.Large}).
         Specific resources used by Material are named using the convention @type/foo_bar_baz_material
         with trailing _dark or _light specifiers if they are not shared between both light and
         dark versions of the theme. 
         */
        public: static const int Theme.Material = 0x01030224;
        public: static const int Theme.Material.BaseDialog = 0x010304a9;
        public: static const int Theme.Material.CompactMenu = 0x010304a7;
        /**  Material theme for dialog windows and activities, which is used by the
         {@link android.app.Dialog} class.  This changes the window to be
         floating (not fill the entire screen), and puts a frame around its
         contents.  You can set this theme on an activity if you would like to
         make an activity that looks like a Dialog. 
         */
        public: static const int Theme.Material.Dialog = 0x01030225;
        /**  Material theme for alert dialog windows, which is used by the
         {@link android.app.AlertDialog} class.  This is basically a dialog
         but sets the background to empty so it can do two-tone backgrounds.
         For applications targeting Honeycomb or newer, this is the default
         AlertDialog theme. 
         */
        public: static const int Theme.Material.Dialog.Alert = 0x01030226;
        public: static const int Theme.Material.Dialog.BaseAlert = 0x010304ad;
        /**  Variant of Theme.Material.Dialog that has a fixed size. 
         */
        public: static const int Theme.Material.Dialog.FixedSize = 0x010304aa;
        /**  Variant of Theme.Material.Dialog that has a nice minimum width for
         a regular dialog. 
         */
        public: static const int Theme.Material.Dialog.MinWidth = 0x01030227;
        /**  Variant of Theme.Material.Dialog that does not include a title bar. 
         */
        public: static const int Theme.Material.Dialog.NoActionBar = 0x01030228;
        /**  Variant of Theme.Material.Dialog.NoActionBar that has a fixed size. 
         */
        public: static const int Theme.Material.Dialog.NoActionBar.FixedSize = 0x010304ab;
        /**  Variant of Theme.Material.Dialog.NoActionBar that has a nice minimum width for
         a regular dialog. 
         */
        public: static const int Theme.Material.Dialog.NoActionBar.MinWidth = 0x01030229;
        /**  Variant of Theme.Material.Dialog that does not include a frame (or background).
         The view hierarchy of the dialog is responsible for drawing all of
         its pixels. 
         */
        public: static const int Theme.Material.Dialog.NoFrame = 0x010304ac;
        /**  Theme for a presentation window on a secondary display. 
         */
        public: static const int Theme.Material.Dialog.Presentation = 0x0103022a;
        /**  Theme for a window that will be displayed either full-screen on
         smaller screens (small, normal) or as a dialog on larger screens
         (large, xlarge). 
         */
        public: static const int Theme.Material.DialogWhenLarge = 0x0103022b;
        /**  Theme for a window without a title bar that will be displayed either
         full-screen on smaller screens (small, normal) or as a dialog on larger screens
         (large, xlarge). 
         */
        public: static const int Theme.Material.DialogWhenLarge.NoActionBar = 0x0103022c;
        /**  Default theme for material style input methods, which is used by the
         {@link android.inputmethodservice.InputMethodService} class.
         this inherits from Theme.Panel, but sets up IME appropriate animations
         and a few custom attributes. 
         */
        public: static const int Theme.Material.InputMethod = 0x0103022d;
        /**  Material theme (light version). 
         */
        public: static const int Theme.Material.Light = 0x01030237;
        /**  Light material dialog themes 
         */
        public: static const int Theme.Material.Light.BaseDialog = 0x010304ae;
        public: static const int Theme.Material.Light.CompactMenu = 0x010304a8;
        /**  Variant of the material (light) theme that has a solid (opaque) action bar
         with an inverse color profile. The dark action bar sharply stands out against
         the light content. 
         */
        public: static const int Theme.Material.Light.DarkActionBar = 0x01030238;
        /**  Material light theme for dialog windows and activities, which is used by the
         {@link android.app.Dialog} class.  This changes the window to be
         floating (not fill the entire screen), and puts a frame around its
         contents.  You can set this theme on an activity if you would like to
         make an activity that looks like a Dialog. 
         */
        public: static const int Theme.Material.Light.Dialog = 0x01030239;
        /**  Material light theme for alert dialog windows, which is used by the
         {@link android.app.AlertDialog} class.  This is basically a dialog
         but sets the background to empty so it can do two-tone backgrounds.
         For applications targeting Honeycomb or newer, this is the default
         AlertDialog theme. 
         */
        public: static const int Theme.Material.Light.Dialog.Alert = 0x0103023a;
        public: static const int Theme.Material.Light.Dialog.BaseAlert = 0x010304b1;
        /**  Variant of Theme.Material.Light.Dialog that has a fixed size. 
         */
        public: static const int Theme.Material.Light.Dialog.FixedSize = 0x010304af;
        /**  Variant of Theme.Material.Light.Dialog that has a nice minimum width for
         a regular dialog. 
         */
        public: static const int Theme.Material.Light.Dialog.MinWidth = 0x0103023b;
        /**  Variant of Theme.Material.Light.Dialog that does not include a title bar. 
         */
        public: static const int Theme.Material.Light.Dialog.NoActionBar = 0x0103023c;
        /**  Variant of Theme.Material.Light.Dialog.NoActionBar that has a fixed size. 
         */
        public: static const int Theme.Material.Light.Dialog.NoActionBar.FixedSize = 0x010304b0;
        /**  Variant of Theme.Material.Light.Dialog.NoActionBar that has a nice minimum width for
         a regular dialog. 
         */
        public: static const int Theme.Material.Light.Dialog.NoActionBar.MinWidth = 0x0103023d;
        /**  Theme for a presentation window on a secondary display. 
         */
        public: static const int Theme.Material.Light.Dialog.Presentation = 0x0103023e;
        /**  Theme for a window that will be displayed either full-screen on
         smaller screens (small, normal) or as a dialog on larger screens
         (large, xlarge). 
         */
        public: static const int Theme.Material.Light.DialogWhenLarge = 0x0103023f;
        /**  Theme for a window without an action bar that will be displayed either full-screen
         on smaller screens (small, normal) or as a dialog on larger screens
         (large, xlarge). 
         */
        public: static const int Theme.Material.Light.DialogWhenLarge.NoActionBar = 0x01030240;
        /**  Variant of the material (light) theme with no action bar. 
         */
        public: static const int Theme.Material.Light.NoActionBar = 0x01030241;
        /**  Variant of the material (light) theme that has no title bar and fills
         the entire screen.  This theme
         sets {@link android.R.attr#windowFullscreen} to true.  
         */
        public: static const int Theme.Material.Light.NoActionBar.Fullscreen = 0x01030242;
        /**  Variant of the material (light) theme that has no title bar and fills
         the entire screen and extends into the display overscan region.  This theme
         sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
         to true. 
         */
        public: static const int Theme.Material.Light.NoActionBar.Overscan = 0x01030243;
        /**  Variant of the material (light) theme that has no title bar and translucent
         system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
         {@link android.R.attr#windowTranslucentNavigation} to true. 
         */
        public: static const int Theme.Material.Light.NoActionBar.TranslucentDecor = 0x01030244;
        /**  Default material light theme for panel windows.  This removes all extraneous
         window decorations, so you basically have an empty rectangle in which
         to place your content.  It makes the window floating, with a transparent
         background, and turns off dimming behind the window. 
         */
        public: static const int Theme.Material.Light.Panel = 0x01030245;
        public: static const int Theme.Material.Light.SearchBar = 0x010304a6;
        /**  Material light theme for an activity that is to be used for voice interaction.
         This gives the activity a floating dialog style, to incorporate with the
         system voice experience. 
         */
        public: static const int Theme.Material.Light.Voice = 0x01030246;
        /**  Variant of the material (dark) theme with no action bar. 
         */
        public: static const int Theme.Material.NoActionBar = 0x0103022e;
        /**  Variant of the material (dark) theme that has no title bar and fills
         the entire screen.  This theme
         sets {@link android.R.attr#windowFullscreen} to true.  
         */
        public: static const int Theme.Material.NoActionBar.Fullscreen = 0x0103022f;
        /**  Variant of the material (dark) theme that has no title bar and fills
         the entire screen and extends into the display overscan region.  This theme
         sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
         to true. 
         */
        public: static const int Theme.Material.NoActionBar.Overscan = 0x01030230;
        /**  Variant of the material (dark) theme that has no title bar and translucent
         system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
         {@link android.R.attr#windowTranslucentNavigation} to true. 
         */
        public: static const int Theme.Material.NoActionBar.TranslucentDecor = 0x01030231;
        /**  Default material dark theme for panel windows.  This removes all extraneous
         window decorations, so you basically have an empty rectangle in which
         to place your content.  It makes the window floating, with a transparent
         background, and turns off dimming behind the window. 
         */
        public: static const int Theme.Material.Panel = 0x01030232;
        /**  Theme for the search input bar. 
         */
        public: static const int Theme.Material.SearchBar = 0x010304a5;
        /**  Default theme for Settings and activities launched from Settings. 
         */
        public: static const int Theme.Material.Settings = 0x01030233;
        public: static const int Theme.Material.Settings.BaseDialog = 0x010304b2;
        public: static const int Theme.Material.Settings.CompactMenu = 0x010304b6;
        public: static const int Theme.Material.Settings.Dialog = 0x01030482;
        public: static const int Theme.Material.Settings.Dialog.Alert = 0x01030481;
        public: static const int Theme.Material.Settings.Dialog.BaseAlert = 0x010304b3;
        public: static const int Theme.Material.Settings.Dialog.Presentation = 0x010304b4;
        public: static const int Theme.Material.Settings.SearchBar = 0x010304b5;
        /**  Material theme for an activity that is to be used for voice interaction.
         This gives the activity a floating dialog style, to incorporate with the
         system voice experience. 
         */
        public: static const int Theme.Material.Voice = 0x01030234;
        /**  Default theme for material style voice interaction, which is used by the
         {@link android.service.voice.VoiceInteractionSession} class.
         this inherits from Theme.Panel, but sets up appropriate animations
         and a few custom attributes. 
         */
        public: static const int Theme.Material.VoiceInteractionSession = 0x010304a4;
        /**  Default material (dark) for windows that want to have the user's selected
         wallpaper appear behind them.  
         */
        public: static const int Theme.Material.Wallpaper = 0x01030235;
        /** Default material (dark) for windows that want to have the user's selected
         wallpaper appear behind them and without an action bar. 
         */
        public: static const int Theme.Material.Wallpaper.NoTitleBar = 0x01030236;
        public: static const int Theme.Micro = 0x010304b7;
        public: static const int Theme.Micro.Dialog = 0x010304b9;
        public: static const int Theme.Micro.Dialog.Alert = 0x010304ba;
        public: static const int Theme.Micro.Dialog.AppError = 0x010304bb;
        public: static const int Theme.Micro.Light = 0x010304b8;
        /**  Default theme for activities that don't actually display a UI; that
         is, they finish themselves before being resumed.  
         */
        public: static const int Theme.NoDisplay = 0x01030055;
        /**  Variant of {@link #Theme} with no title bar 
         */
        public: static const int Theme.NoTitleBar = 0x01030006;
        /**  Variant of {@link #Theme} that has no title bar and no status bar.  This theme
         sets {@link android.R.attr#windowFullscreen} to true.  
         */
        public: static const int Theme.NoTitleBar.Fullscreen = 0x01030007;
        /**  No title bar, but Action Mode bars will overlay application content
         instead of pushing it down to make room. 
         */
        public: static const int Theme.NoTitleBar.OverlayActionModes = 0x0103006a;
        /**  Default dark theme for panel windows (on API level 10 and lower).  This removes all
         extraneous window decorations, so you basically have an empty rectangle in which
         to place your content.  It makes the window floating, with a transparent
         background, and turns off dimming behind the window. 
         */
        public: static const int Theme.Panel = 0x01030059;
        /**  Theme for the search input bar. 
         */
        public: static const int Theme.SearchBar = 0x01030478;
        /**  Theme for a window that looks like a toast. 
         */
        public: static const int Theme.Toast = 0x0103047e;
        /**  Theme for translucent activities (on API level 10 and lower). That is, windows
         that allow you to see through them to the windows behind.  This sets up the translucent
         flag and appropriate animations for your windows.  
         */
        public: static const int Theme.Translucent = 0x0103000f;
        /**  Variant of {@link #Theme_Translucent} with no title bar 
         */
        public: static const int Theme.Translucent.NoTitleBar = 0x01030010;
        /**  Variant of {@link #Theme_Translucent} that has no title bar and
         no status bar 
         */
        public: static const int Theme.Translucent.NoTitleBar.Fullscreen = 0x01030011;
        /**  Default theme for voice interaction, which is used by the
         {@link android.service.voice.VoiceInteractionSession} class.
         this inherits from Theme.Panel, but sets up appropriate animations
         and a few custom attributes. 
         */
        public: static const int Theme.VoiceInteractionSession = 0x01030477;
        /**  Theme for windows that want to have the user's selected
         wallpaper appear behind them (for API level 10 and lower).  
         */
        public: static const int Theme.Wallpaper = 0x0103005e;
        /**  Variant of {@link #Theme_Wallpaper} that has no title bar 
         */
        public: static const int Theme.Wallpaper.NoTitleBar = 0x0103005f;
        /**  Variant of {@link #Theme_Wallpaper} that
         has no title bar or status bar. 
         */
        public: static const int Theme.Wallpaper.NoTitleBar.Fullscreen = 0x01030060;
        /**  Theme for a wallpaper's setting activity, which is designed to be a transparent
         background with a dark shade, so the previous Activity is visible in the background. 
         */
        public: static const int Theme.WallpaperSettings = 0x01030061;
        /**  Default theme with an Action Bar. 
         */
        public: static const int Theme.WithActionBar = 0x01030069;
        public: static const int ThemeOverlay = 0x01030247;
        public: static const int ThemeOverlay.Material = 0x01030248;
        /**  Theme overlay that replaces the normal control color, which by default is the same as the
         secondary text color, with the primary text color. 
         */
        public: static const int ThemeOverlay.Material.ActionBar = 0x01030249;
        /**  Theme overlay that replaces colors with their dark versions but preserves
         the value of colorAccent, colorPrimary and its variants. 
         */
        public: static const int ThemeOverlay.Material.Dark = 0x0103024b;
        /**  Theme overlay that replaces colors with their dark versions and replaces the normal
         control color, which by default is the same as the secondary text color, with the primary
         text color. 
         */
        public: static const int ThemeOverlay.Material.Dark.ActionBar = 0x0103024c;
        /**  Theme overlay that replaces colors with their light versions but preserves
         the value of colorAccent, colorPrimary and its variants. 
         */
        public: static const int ThemeOverlay.Material.Light = 0x0103024a;
        /**  Widget Styles 
         */
        public: static const int Widget = 0x01030012;
        public: static const int Widget.AbsListView = 0x01030013;
        public: static const int Widget.ActionBar = 0x01030082;
        public: static const int Widget.ActionBar.TabBar = 0x010300f4;
        public: static const int Widget.ActionBar.TabText = 0x010300f3;
        public: static const int Widget.ActionBar.TabView = 0x010300f2;
        public: static const int Widget.ActionButton = 0x01030084;
        public: static const int Widget.ActionButton.CloseMode = 0x01030088;
        public: static const int Widget.ActionButton.Overflow = 0x01030087;
        public: static const int Widget.ActionMode = 0x01030334;
        public: static const int Widget.ActivityChooserView = 0x01030310;
        public: static const int Widget.AutoCompleteTextView = 0x01030027;
        public: static const int Widget.Button = 0x01030014;
        public: static const int Widget.Button.Inset = 0x01030015;
        public: static const int Widget.Button.Small = 0x01030016;
        public: static const int Widget.Button.Toggle = 0x01030017;
        public: static const int Widget.Button.Transparent = 0x010302f5;
        public: static const int Widget.CalendarView = 0x010300eb;
        public: static const int Widget.CheckedTextView = 0x010302f9;
        public: static const int Widget.CompoundButton = 0x01030018;
        public: static const int Widget.CompoundButton.CheckBox = 0x01030019;
        public: static const int Widget.CompoundButton.RadioButton = 0x0103001a;
        public: static const int Widget.CompoundButton.Star = 0x0103001b;
        public: static const int Widget.CompoundButton.Switch = 0x0103030a;
        public: static const int Widget.DatePicker = 0x010300ee;
        /**  Widget Styles 
         */
        public: static const int Widget.DeviceDefault = 0x01030140;
        public: static const int Widget.DeviceDefault.AbsListView = 0x01030341;
        public: static const int Widget.DeviceDefault.ActionBar = 0x0103016b;
        public: static const int Widget.DeviceDefault.ActionBar.Solid = 0x01030173;
        public: static const int Widget.DeviceDefault.ActionBar.TabBar = 0x01030172;
        public: static const int Widget.DeviceDefault.ActionBar.TabText = 0x01030171;
        public: static const int Widget.DeviceDefault.ActionBar.TabView = 0x01030170;
        public: static const int Widget.DeviceDefault.ActionButton = 0x01030166;
        public: static const int Widget.DeviceDefault.ActionButton.CloseMode = 0x0103016a;
        public: static const int Widget.DeviceDefault.ActionButton.Overflow = 0x01030167;
        public: static const int Widget.DeviceDefault.ActionButton.TextButton = 0x01030168;
        public: static const int Widget.DeviceDefault.ActionMode = 0x01030169;
        public: static const int Widget.DeviceDefault.AutoCompleteTextView = 0x01030147;
        public: static const int Widget.DeviceDefault.Button = 0x01030141;
        public: static const int Widget.DeviceDefault.Button.Borderless = 0x0103016c;
        public: static const int Widget.DeviceDefault.Button.Borderless.Small = 0x01030145;
        public: static const int Widget.DeviceDefault.Button.Inset = 0x01030143;
        public: static const int Widget.DeviceDefault.Button.Small = 0x01030142;
        public: static const int Widget.DeviceDefault.Button.Toggle = 0x01030144;
        public: static const int Widget.DeviceDefault.CalendarView = 0x0103016e;
        public: static const int Widget.DeviceDefault.CheckedTextView = 0x010301db;
        public: static const int Widget.DeviceDefault.CompoundButton.CheckBox = 0x01030148;
        public: static const int Widget.DeviceDefault.CompoundButton.RadioButton = 0x01030159;
        public: static const int Widget.DeviceDefault.CompoundButton.Star = 0x0103015d;
        public: static const int Widget.DeviceDefault.CompoundButton.Switch = 0x01030344;
        public: static const int Widget.DeviceDefault.DatePicker = 0x0103016f;
        public: static const int Widget.DeviceDefault.DropDownItem = 0x01030161;
        public: static const int Widget.DeviceDefault.DropDownItem.Spinner = 0x01030162;
        public: static const int Widget.DeviceDefault.EditText = 0x0103014a;
        public: static const int Widget.DeviceDefault.ExpandableListView = 0x0103014b;
        public: static const int Widget.DeviceDefault.ExpandableListView.White = 0x01030345;
        public: static const int Widget.DeviceDefault.FastScroll = 0x010301e9;
        /**  The FragmentBreadCrumbs widget is deprecated starting in API level 21 ({@link android.os.Build.VERSION_CODES#.L}). 
         */
        public: static const int Widget.DeviceDefault.FragmentBreadCrumbs = 0x01030346;
        public: static const int Widget.DeviceDefault.Gallery = 0x01030347;
        public: static const int Widget.DeviceDefault.GestureOverlayView = 0x01030348;
        public: static const int Widget.DeviceDefault.GridView = 0x0103014c;
        public: static const int Widget.DeviceDefault.HorizontalScrollView = 0x0103015b;
        public: static const int Widget.DeviceDefault.ImageButton = 0x0103014d;
        public: static const int Widget.DeviceDefault.ImageWell = 0x01030349;
        public: static const int Widget.DeviceDefault.KeyboardView = 0x0103034a;
        public: static const int Widget.DeviceDefault.Light = 0x01030174;
        public: static const int Widget.DeviceDefault.Light.AbsListView = 0x0103035d;
        public: static const int Widget.DeviceDefault.Light.ActionBar = 0x010301a3;
        public: static const int Widget.DeviceDefault.Light.ActionBar.Solid = 0x010301a7;
        /**  @deprecated Action bars are now themed using the inheritable android:theme attribute. 
         */
        public: static const int Widget.DeviceDefault.Light.ActionBar.Solid.Inverse = 0x010301a8;
        public: static const int Widget.DeviceDefault.Light.ActionBar.TabBar = 0x010301a6;
        /**  @deprecated Action bars are now themed using the inheritable android:theme attribute. 
         */
        public: static const int Widget.DeviceDefault.Light.ActionBar.TabBar.Inverse = 0x010301a9;
        public: static const int Widget.DeviceDefault.Light.ActionBar.TabText = 0x010301a5;
        /**  @deprecated Action bars are now themed using the inheritable android:theme attribute. 
         */
        public: static const int Widget.DeviceDefault.Light.ActionBar.TabText.Inverse = 0x010301ab;
        public: static const int Widget.DeviceDefault.Light.ActionBar.TabView = 0x010301a4;
        /**  @deprecated Action bars are now themed using the inheritable android:theme attribute. 
         */
        public: static const int Widget.DeviceDefault.Light.ActionBar.TabView.Inverse = 0x010301aa;
        public: static const int Widget.DeviceDefault.Light.ActionButton = 0x0103019f;
        public: static const int Widget.DeviceDefault.Light.ActionButton.CloseMode = 0x010301a2;
        public: static const int Widget.DeviceDefault.Light.ActionButton.Overflow = 0x010301a0;
        public: static const int Widget.DeviceDefault.Light.ActionMode = 0x010301a1;
        /**  @deprecated Action bars are now themed using the inheritable android:theme attribute. 
         */
        public: static const int Widget.DeviceDefault.Light.ActionMode.Inverse = 0x010301ac;
        public: static const int Widget.DeviceDefault.Light.AutoCompleteTextView = 0x0103017b;
        public: static const int Widget.DeviceDefault.Light.Button = 0x01030175;
        public: static const int Widget.DeviceDefault.Light.Button.Borderless = 0x01030360;
        public: static const int Widget.DeviceDefault.Light.Button.Borderless.Small = 0x01030179;
        public: static const int Widget.DeviceDefault.Light.Button.Inset = 0x01030177;
        public: static const int Widget.DeviceDefault.Light.Button.Small = 0x01030176;
        public: static const int Widget.DeviceDefault.Light.Button.Toggle = 0x01030178;
        public: static const int Widget.DeviceDefault.Light.CalendarView = 0x0103019e;
        public: static const int Widget.DeviceDefault.Light.CheckedTextView = 0x010301dc;
        public: static const int Widget.DeviceDefault.Light.CompoundButton.CheckBox = 0x0103017c;
        public: static const int Widget.DeviceDefault.Light.CompoundButton.RadioButton = 0x01030190;
        public: static const int Widget.DeviceDefault.Light.CompoundButton.Star = 0x01030194;
        public: static const int Widget.DeviceDefault.Light.DatePicker = 0x01030361;
        public: static const int Widget.DeviceDefault.Light.DropDownItem = 0x01030198;
        public: static const int Widget.DeviceDefault.Light.DropDownItem.Spinner = 0x01030199;
        public: static const int Widget.DeviceDefault.Light.EditText = 0x0103017e;
        public: static const int Widget.DeviceDefault.Light.ExpandableListView = 0x0103017f;
        public: static const int Widget.DeviceDefault.Light.ExpandableListView.White = 0x01030362;
        public: static const int Widget.DeviceDefault.Light.FastScroll = 0x010301eb;
        /**  The FragmentBreadCrumbs widget is deprecated starting in API level 21 ({@link android.os.Build.VERSION_CODES#.L}). 
         */
        public: static const int Widget.DeviceDefault.Light.FragmentBreadCrumbs = 0x0103035c;
        public: static const int Widget.DeviceDefault.Light.Gallery = 0x01030363;
        public: static const int Widget.DeviceDefault.Light.GestureOverlayView = 0x01030364;
        public: static const int Widget.DeviceDefault.Light.GridView = 0x01030180;
        public: static const int Widget.DeviceDefault.Light.HorizontalScrollView = 0x01030192;
        public: static const int Widget.DeviceDefault.Light.ImageButton = 0x01030181;
        public: static const int Widget.DeviceDefault.Light.ImageWell = 0x01030365;
        public: static const int Widget.DeviceDefault.Light.ListPopupWindow = 0x0103019b;
        public: static const int Widget.DeviceDefault.Light.ListView = 0x01030182;
        public: static const int Widget.DeviceDefault.Light.ListView.DropDown = 0x0103017d;
        public: static const int Widget.DeviceDefault.Light.ListView.White = 0x01030366;
        public: static const int Widget.DeviceDefault.Light.MediaRouteButton = 0x010301d8;
        public: static const int Widget.DeviceDefault.Light.NumberPicker = 0x01030367;
        public: static const int Widget.DeviceDefault.Light.PopupMenu = 0x0103019c;
        public: static const int Widget.DeviceDefault.Light.PopupWindow = 0x01030183;
        public: static const int Widget.DeviceDefault.Light.PopupWindow.ActionMode = 0x0103035f;
        public: static const int Widget.DeviceDefault.Light.ProgressBar = 0x01030184;
        public: static const int Widget.DeviceDefault.Light.ProgressBar.Horizontal = 0x01030185;
        public: static const int Widget.DeviceDefault.Light.ProgressBar.Inverse = 0x01030189;
        public: static const int Widget.DeviceDefault.Light.ProgressBar.Large = 0x01030188;
        public: static const int Widget.DeviceDefault.Light.ProgressBar.Large.Inverse = 0x0103018b;
        public: static const int Widget.DeviceDefault.Light.ProgressBar.Small = 0x01030186;
        public: static const int Widget.DeviceDefault.Light.ProgressBar.Small.Inverse = 0x0103018a;
        public: static const int Widget.DeviceDefault.Light.ProgressBar.Small.Title = 0x01030187;
        public: static const int Widget.DeviceDefault.Light.RatingBar = 0x0103018d;
        public: static const int Widget.DeviceDefault.Light.RatingBar.Indicator = 0x0103018e;
        public: static const int Widget.DeviceDefault.Light.RatingBar.Small = 0x0103018f;
        public: static const int Widget.DeviceDefault.Light.ScrollView = 0x01030191;
        public: static const int Widget.DeviceDefault.Light.SeekBar = 0x0103018c;
        public: static const int Widget.DeviceDefault.Light.Spinner = 0x01030193;
        public: static const int Widget.DeviceDefault.Light.Spinner.DropDown = 0x01030368;
        public: static const int Widget.DeviceDefault.Light.Spinner.DropDown.ActionBar = 0x0103035e;
        public: static const int Widget.DeviceDefault.Light.StackView = 0x010301ec;
        public: static const int Widget.DeviceDefault.Light.Tab = 0x0103019d;
        public: static const int Widget.DeviceDefault.Light.TabWidget = 0x01030195;
        public: static const int Widget.DeviceDefault.Light.TextSuggestionsPopupWindow = 0x0103036b;
        public: static const int Widget.DeviceDefault.Light.TextView = 0x0103017a;
        public: static const int Widget.DeviceDefault.Light.TextView.ListSeparator = 0x01030369;
        public: static const int Widget.DeviceDefault.Light.TextView.SpinnerItem = 0x0103019a;
        public: static const int Widget.DeviceDefault.Light.TimePicker = 0x0103036a;
        public: static const int Widget.DeviceDefault.Light.WebTextView = 0x01030196;
        public: static const int Widget.DeviceDefault.Light.WebView = 0x01030197;
        public: static const int Widget.DeviceDefault.ListPopupWindow = 0x01030164;
        public: static const int Widget.DeviceDefault.ListView = 0x0103014e;
        public: static const int Widget.DeviceDefault.ListView.DropDown = 0x01030149;
        public: static const int Widget.DeviceDefault.ListView.White = 0x0103034b;
        public: static const int Widget.DeviceDefault.MediaRouteButton = 0x010301d7;
        public: static const int Widget.DeviceDefault.NumberPicker = 0x0103034c;
        public: static const int Widget.DeviceDefault.PopupMenu = 0x01030165;
        public: static const int Widget.DeviceDefault.PopupWindow = 0x0103014f;
        public: static const int Widget.DeviceDefault.PopupWindow.ActionMode = 0x01030343;
        public: static const int Widget.DeviceDefault.PreferenceFrameLayout = 0x0103034d;
        public: static const int Widget.DeviceDefault.ProgressBar = 0x01030150;
        public: static const int Widget.DeviceDefault.ProgressBar.Horizontal = 0x01030151;
        public: static const int Widget.DeviceDefault.ProgressBar.Inverse = 0x0103034e;
        public: static const int Widget.DeviceDefault.ProgressBar.Large = 0x01030154;
        public: static const int Widget.DeviceDefault.ProgressBar.Large.Inverse = 0x0103034f;
        public: static const int Widget.DeviceDefault.ProgressBar.Small = 0x01030152;
        public: static const int Widget.DeviceDefault.ProgressBar.Small.Inverse = 0x01030350;
        public: static const int Widget.DeviceDefault.ProgressBar.Small.Title = 0x01030153;
        public: static const int Widget.DeviceDefault.QuickContactBadge.WindowLarge = 0x01030351;
        public: static const int Widget.DeviceDefault.QuickContactBadge.WindowMedium = 0x01030352;
        public: static const int Widget.DeviceDefault.QuickContactBadge.WindowSmall = 0x01030353;
        public: static const int Widget.DeviceDefault.QuickContactBadgeSmall.WindowLarge = 0x01030354;
        public: static const int Widget.DeviceDefault.QuickContactBadgeSmall.WindowMedium = 0x01030355;
        public: static const int Widget.DeviceDefault.QuickContactBadgeSmall.WindowSmall = 0x01030356;
        public: static const int Widget.DeviceDefault.RatingBar = 0x01030156;
        public: static const int Widget.DeviceDefault.RatingBar.Indicator = 0x01030157;
        public: static const int Widget.DeviceDefault.RatingBar.Small = 0x01030158;
        public: static const int Widget.DeviceDefault.ScrollView = 0x0103015a;
        public: static const int Widget.DeviceDefault.SeekBar = 0x01030155;
        public: static const int Widget.DeviceDefault.Spinner = 0x0103015c;
        public: static const int Widget.DeviceDefault.Spinner.DropDown = 0x01030357;
        public: static const int Widget.DeviceDefault.Spinner.DropDown.ActionBar = 0x01030342;
        public: static const int Widget.DeviceDefault.StackView = 0x010301ea;
        public: static const int Widget.DeviceDefault.Tab = 0x0103016d;
        public: static const int Widget.DeviceDefault.TabWidget = 0x0103015e;
        public: static const int Widget.DeviceDefault.TextSelectHandle = 0x01030358;
        public: static const int Widget.DeviceDefault.TextSuggestionsPopupWindow = 0x01030359;
        public: static const int Widget.DeviceDefault.TextView = 0x01030146;
        public: static const int Widget.DeviceDefault.TextView.ListSeparator = 0x0103035a;
        public: static const int Widget.DeviceDefault.TextView.SpinnerItem = 0x01030163;
        public: static const int Widget.DeviceDefault.TimePicker = 0x0103035b;
        public: static const int Widget.DeviceDefault.WebTextView = 0x0103015f;
        public: static const int Widget.DeviceDefault.WebView = 0x01030160;
        public: static const int Widget.DropDownItem = 0x0103002b;
        public: static const int Widget.DropDownItem.Spinner = 0x0103002c;
        public: static const int Widget.EditText = 0x01030023;
        public: static const int Widget.ExpandableListView = 0x01030024;
        public: static const int Widget.ExpandableListView.White = 0x010302fc;
        public: static const int Widget.FastScroll = 0x010301e5;
        public: static const int Widget.FragmentBreadCrumbs = 0x01030089;
        public: static const int Widget.Gallery = 0x01030035;
        public: static const int Widget.GenericQuickContactBadge = 0x01030301;
        public: static const int Widget.GestureOverlayView = 0x010302f3;
        public: static const int Widget.GestureOverlayView.White = 0x010302f4;
        public: static const int Widget.GridView = 0x01030032;
        /**  Widget Styles 
         */
        public: static const int Widget.Holo = 0x0103008a;
        public: static const int Widget.Holo.AbsListView = 0x010303a6;
        public: static const int Widget.Holo.ActionBar = 0x010300b4;
        public: static const int Widget.Holo.ActionBar.Solid = 0x01030121;
        public: static const int Widget.Holo.ActionBar.TabBar = 0x010300f7;
        public: static const int Widget.Holo.ActionBar.TabText = 0x010300f6;
        public: static const int Widget.Holo.ActionBar.TabView = 0x010300f5;
        public: static const int Widget.Holo.ActionButton = 0x010300af;
        public: static const int Widget.Holo.ActionButton.CloseMode = 0x010300b3;
        public: static const int Widget.Holo.ActionButton.Overflow = 0x010300b0;
        public: static const int Widget.Holo.ActionButton.TextButton = 0x010300b1;
        public: static const int Widget.Holo.ActionMode = 0x010300b2;
        public: static const int Widget.Holo.ActivityChooserView = 0x010303ae;
        public: static const int Widget.Holo.AutoCompleteTextView = 0x01030090;
        public: static const int Widget.Holo.Button = 0x0103008b;
        public: static const int Widget.Holo.Button.Borderless = 0x010300e2;
        public: static const int Widget.Holo.Button.Borderless.Small = 0x0103011a;
        public: static const int Widget.Holo.Button.Inset = 0x0103008d;
        public: static const int Widget.Holo.Button.Small = 0x0103008c;
        public: static const int Widget.Holo.Button.Toggle = 0x0103008e;
        public: static const int Widget.Holo.ButtonBar = 0x010303bf;
        public: static const int Widget.Holo.ButtonBar.Button = 0x010303c0;
        public: static const int Widget.Holo.CalendarView = 0x010300ec;
        public: static const int Widget.Holo.CheckedTextView = 0x010301d9;
        public: static const int Widget.Holo.CompoundButton = 0x010303a7;
        public: static const int Widget.Holo.CompoundButton.CheckBox = 0x01030091;
        public: static const int Widget.Holo.CompoundButton.RadioButton = 0x010300a2;
        public: static const int Widget.Holo.CompoundButton.Star = 0x010300a6;
        public: static const int Widget.Holo.CompoundButton.Switch = 0x010303c1;
        public: static const int Widget.Holo.DatePicker = 0x010300ef;
        public: static const int Widget.Holo.DropDownItem = 0x010300aa;
        public: static const int Widget.Holo.DropDownItem.Spinner = 0x010300ab;
        public: static const int Widget.Holo.EditText = 0x01030093;
        public: static const int Widget.Holo.ExpandableListView = 0x01030094;
        public: static const int Widget.Holo.ExpandableListView.White = 0x010303a8;
        public: static const int Widget.Holo.FastScroll = 0x010303f8;
        public: static const int Widget.Holo.FragmentBreadCrumbs = 0x010303a9;
        public: static const int Widget.Holo.Gallery = 0x010303aa;
        public: static const int Widget.Holo.GestureOverlayView = 0x010303ab;
        public: static const int Widget.Holo.GridView = 0x01030095;
        public: static const int Widget.Holo.HorizontalScrollView = 0x010300a4;
        public: static const int Widget.Holo.ImageButton = 0x01030096;
        public: static const int Widget.Holo.ImageWell = 0x010303af;
        public: static const int Widget.Holo.KeyboardView = 0x010303b8;
        /**  Light widget styles 
         */
        public: static const int Widget.Holo.Light = 0x010300b5;
        public: static const int Widget.Holo.Light.AbsListView = 0x010303c8;
        public: static const int Widget.Holo.Light.ActionBar = 0x010300e1;
        public: static const int Widget.Holo.Light.ActionBar.Solid = 0x01030122;
        public: static const int Widget.Holo.Light.ActionBar.Solid.Inverse = 0x01030123;
        public: static const int Widget.Holo.Light.ActionBar.TabBar = 0x010300fa;
        public: static const int Widget.Holo.Light.ActionBar.TabBar.Inverse = 0x01030124;
        public: static const int Widget.Holo.Light.ActionBar.TabText = 0x010300f9;
        public: static const int Widget.Holo.Light.ActionBar.TabText.Inverse = 0x01030126;
        public: static const int Widget.Holo.Light.ActionBar.TabView = 0x010300f8;
        public: static const int Widget.Holo.Light.ActionBar.TabView.Inverse = 0x01030125;
        public: static const int Widget.Holo.Light.ActionButton = 0x010300dd;
        public: static const int Widget.Holo.Light.ActionButton.CloseMode = 0x010300e0;
        public: static const int Widget.Holo.Light.ActionButton.Overflow = 0x010300de;
        public: static const int Widget.Holo.Light.ActionMode = 0x010300df;
        public: static const int Widget.Holo.Light.ActionMode.Inverse = 0x01030127;
        public: static const int Widget.Holo.Light.ActivityChooserView = 0x010303d0;
        public: static const int Widget.Holo.Light.AutoCompleteTextView = 0x010300bb;
        public: static const int Widget.Holo.Light.Button = 0x010300b6;
        public: static const int Widget.Holo.Light.Button.Borderless = 0x010303c2;
        public: static const int Widget.Holo.Light.Button.Borderless.Small = 0x0103011b;
        public: static const int Widget.Holo.Light.Button.Inset = 0x010300b8;
        public: static const int Widget.Holo.Light.Button.Small = 0x010300b7;
        public: static const int Widget.Holo.Light.Button.Toggle = 0x010300b9;
        public: static const int Widget.Holo.Light.CalendarView = 0x010300ed;
        public: static const int Widget.Holo.Light.CheckedTextView = 0x010301da;
        public: static const int Widget.Holo.Light.CompoundButton.CheckBox = 0x010300bc;
        public: static const int Widget.Holo.Light.CompoundButton.RadioButton = 0x010300d0;
        public: static const int Widget.Holo.Light.CompoundButton.Star = 0x010300d4;
        public: static const int Widget.Holo.Light.CompoundButton.Switch = 0x010303dd;
        public: static const int Widget.Holo.Light.DatePicker = 0x010303cf;
        public: static const int Widget.Holo.Light.DropDownItem = 0x010300d8;
        public: static const int Widget.Holo.Light.DropDownItem.Spinner = 0x010300d9;
        public: static const int Widget.Holo.Light.EditText = 0x010300be;
        public: static const int Widget.Holo.Light.ExpandableListView = 0x010300bf;
        public: static const int Widget.Holo.Light.ExpandableListView.White = 0x010303c9;
        public: static const int Widget.Holo.Light.FastScroll = 0x010303f9;
        public: static const int Widget.Holo.Light.FragmentBreadCrumbs = 0x010303ca;
        public: static const int Widget.Holo.Light.Gallery = 0x010303cb;
        public: static const int Widget.Holo.Light.GestureOverlayView = 0x010303cc;
        public: static const int Widget.Holo.Light.GridView = 0x010300c0;
        public: static const int Widget.Holo.Light.HorizontalScrollView = 0x010300d2;
        public: static const int Widget.Holo.Light.ImageButton = 0x010300c1;
        public: static const int Widget.Holo.Light.ImageWell = 0x010303d1;
        public: static const int Widget.Holo.Light.KeyboardView = 0x010303d6;
        public: static const int Widget.Holo.Light.ListPopupWindow = 0x010300db;
        public: static const int Widget.Holo.Light.ListView = 0x010300c2;
        public: static const int Widget.Holo.Light.ListView.DropDown = 0x010300bd;
        public: static const int Widget.Holo.Light.ListView.White = 0x010303d2;
        public: static const int Widget.Holo.Light.MediaRouteButton = 0x010301d6;
        public: static const int Widget.Holo.Light.NumberPicker = 0x010303cd;
        public: static const int Widget.Holo.Light.PopupMenu = 0x010300dc;
        public: static const int Widget.Holo.Light.PopupWindow = 0x010300c3;
        public: static const int Widget.Holo.Light.PopupWindow.ActionMode = 0x010303d3;
        public: static const int Widget.Holo.Light.ProgressBar = 0x010300c4;
        public: static const int Widget.Holo.Light.ProgressBar.Horizontal = 0x010300c5;
        public: static const int Widget.Holo.Light.ProgressBar.Inverse = 0x010300c9;
        public: static const int Widget.Holo.Light.ProgressBar.Large = 0x010300c8;
        public: static const int Widget.Holo.Light.ProgressBar.Large.Inverse = 0x010300cb;
        public: static const int Widget.Holo.Light.ProgressBar.Small = 0x010300c6;
        public: static const int Widget.Holo.Light.ProgressBar.Small.Inverse = 0x010300ca;
        public: static const int Widget.Holo.Light.ProgressBar.Small.Title = 0x010300c7;
        public: static const int Widget.Holo.Light.QuickContactBadge.WindowLarge = 0x010303d9;
        public: static const int Widget.Holo.Light.QuickContactBadge.WindowMedium = 0x010303d8;
        public: static const int Widget.Holo.Light.QuickContactBadge.WindowSmall = 0x010303d7;
        public: static const int Widget.Holo.Light.QuickContactBadgeSmall.WindowLarge = 0x010303dc;
        public: static const int Widget.Holo.Light.QuickContactBadgeSmall.WindowMedium = 0x010303db;
        public: static const int Widget.Holo.Light.QuickContactBadgeSmall.WindowSmall = 0x010303da;
        public: static const int Widget.Holo.Light.RatingBar = 0x010300cd;
        public: static const int Widget.Holo.Light.RatingBar.Indicator = 0x010300ce;
        public: static const int Widget.Holo.Light.RatingBar.Small = 0x010300cf;
        public: static const int Widget.Holo.Light.ScrollView = 0x010300d1;
        public: static const int Widget.Holo.Light.SearchView = 0x010303c3;
        public: static const int Widget.Holo.Light.SeekBar = 0x010300cc;
        public: static const int Widget.Holo.Light.Spinner = 0x010300d3;
        public: static const int Widget.Holo.Light.Spinner.DropDown = 0x010303d4;
        public: static const int Widget.Holo.Light.Spinner.DropDown.ActionBar = 0x010303d5;
        public: static const int Widget.Holo.Light.StackView = 0x010303c4;
        public: static const int Widget.Holo.Light.Tab = 0x010300e4;
        public: static const int Widget.Holo.Light.TabWidget = 0x010300d5;
        public: static const int Widget.Holo.Light.TextSelectHandle = 0x010303c6;
        public: static const int Widget.Holo.Light.TextSuggestionsPopupWindow = 0x010303c7;
        public: static const int Widget.Holo.Light.TextView = 0x010300ba;
        public: static const int Widget.Holo.Light.TextView.ListSeparator = 0x010303c5;
        public: static const int Widget.Holo.Light.TextView.SpinnerItem = 0x010300da;
        public: static const int Widget.Holo.Light.TimePicker = 0x010303ce;
        public: static const int Widget.Holo.Light.WebTextView = 0x010300d6;
        public: static const int Widget.Holo.Light.WebView = 0x010300d7;
        public: static const int Widget.Holo.ListPopupWindow = 0x010300ad;
        public: static const int Widget.Holo.ListView = 0x01030097;
        public: static const int Widget.Holo.ListView.DropDown = 0x01030092;
        public: static const int Widget.Holo.ListView.White = 0x010303b0;
        public: static const int Widget.Holo.MediaRouteButton = 0x010301d5;
        public: static const int Widget.Holo.NumberPicker = 0x010303ac;
        public: static const int Widget.Holo.PopupMenu = 0x010300ae;
        public: static const int Widget.Holo.PopupWindow = 0x01030098;
        public: static const int Widget.Holo.PopupWindow.ActionMode = 0x010303b1;
        public: static const int Widget.Holo.PreferenceFrameLayout = 0x010303e7;
        public: static const int Widget.Holo.ProgressBar = 0x01030099;
        public: static const int Widget.Holo.ProgressBar.Horizontal = 0x0103009a;
        public: static const int Widget.Holo.ProgressBar.Inverse = 0x010303b2;
        public: static const int Widget.Holo.ProgressBar.Large = 0x0103009d;
        public: static const int Widget.Holo.ProgressBar.Large.Inverse = 0x010303b4;
        public: static const int Widget.Holo.ProgressBar.Small = 0x0103009b;
        public: static const int Widget.Holo.ProgressBar.Small.Inverse = 0x010303b3;
        public: static const int Widget.Holo.ProgressBar.Small.Title = 0x0103009c;
        public: static const int Widget.Holo.QuickContactBadge.WindowLarge = 0x010303bb;
        public: static const int Widget.Holo.QuickContactBadge.WindowMedium = 0x010303ba;
        public: static const int Widget.Holo.QuickContactBadge.WindowSmall = 0x010303b9;
        public: static const int Widget.Holo.QuickContactBadgeSmall.WindowLarge = 0x010303be;
        public: static const int Widget.Holo.QuickContactBadgeSmall.WindowMedium = 0x010303bd;
        public: static const int Widget.Holo.QuickContactBadgeSmall.WindowSmall = 0x010303bc;
        public: static const int Widget.Holo.RatingBar = 0x0103009f;
        public: static const int Widget.Holo.RatingBar.Indicator = 0x010300a0;
        public: static const int Widget.Holo.RatingBar.Small = 0x010300a1;
        public: static const int Widget.Holo.ScrollView = 0x010300a3;
        public: static const int Widget.Holo.SearchView = 0x010303a1;
        public: static const int Widget.Holo.SeekBar = 0x0103009e;
        public: static const int Widget.Holo.Spinner = 0x010300a5;
        public: static const int Widget.Holo.Spinner.DropDown = 0x010303b5;
        public: static const int Widget.Holo.Spinner.DropDown.ActionBar = 0x010303b6;
        public: static const int Widget.Holo.StackView = 0x010303a2;
        public: static const int Widget.Holo.Tab = 0x010300e3;
        public: static const int Widget.Holo.TabText = 0x010303b7;
        public: static const int Widget.Holo.TabWidget = 0x010300a7;
        public: static const int Widget.Holo.TextSelectHandle = 0x010303a4;
        public: static const int Widget.Holo.TextSuggestionsPopupWindow = 0x010303a5;
        public: static const int Widget.Holo.TextView = 0x0103008f;
        public: static const int Widget.Holo.TextView.ListSeparator = 0x010303a3;
        public: static const int Widget.Holo.TextView.SpinnerItem = 0x010300ac;
        public: static const int Widget.Holo.TimePicker = 0x010303ad;
        public: static const int Widget.Holo.WebTextView = 0x010300a8;
        public: static const int Widget.Holo.WebView = 0x010300a9;
        public: static const int Widget.HorizontalScrollView = 0x010302ff;
        public: static const int Widget.ImageButton = 0x01030026;
        public: static const int Widget.ImageWell = 0x01030025;
        public: static const int Widget.KeyboardView = 0x01030057;
        public: static const int Widget.Leanback.DatePicker = 0x010303fd;
        public: static const int Widget.Leanback.NumberPicker = 0x010303fe;
        public: static const int Widget.Leanback.TimePicker = 0x010303fc;
        public: static const int Widget.ListPopupWindow = 0x01030085;
        public: static const int Widget.ListView = 0x0103002e;
        public: static const int Widget.ListView.DropDown = 0x01030030;
        public: static const int Widget.ListView.Menu = 0x01030031;
        public: static const int Widget.ListView.White = 0x0103002f;
        public: static const int Widget.Material = 0x0103024d;
        public: static const int Widget.Material.AbsListView = 0x0103042d;
        public: static const int Widget.Material.ActionBar = 0x0103024e;
        public: static const int Widget.Material.ActionBar.Solid = 0x0103024f;
        public: static const int Widget.Material.ActionBar.TabBar = 0x01030250;
        public: static const int Widget.Material.ActionBar.TabText = 0x01030251;
        public: static const int Widget.Material.ActionBar.TabView = 0x01030252;
        public: static const int Widget.Material.ActionButton = 0x01030253;
        public: static const int Widget.Material.ActionButton.CloseMode = 0x01030254;
        public: static const int Widget.Material.ActionButton.Overflow = 0x01030255;
        public: static const int Widget.Material.ActionMode = 0x01030256;
        public: static const int Widget.Material.ActivityChooserView = 0x01030435;
        public: static const int Widget.Material.AutoCompleteTextView = 0x01030257;
        /**  Bordered ink button 
         */
        public: static const int Widget.Material.Button = 0x01030258;
        /**  Borderless ink button 
         */
        public: static const int Widget.Material.Button.Borderless = 0x01030259;
        /**  Colored borderless ink button 
         */
        public: static const int Widget.Material.Button.Borderless.Colored = 0x0103025a;
        /**  Small borderless ink button 
         */
        public: static const int Widget.Material.Button.Borderless.Small = 0x0103025b;
        /**  Alert dialog button bar button 
         */
        public: static const int Widget.Material.Button.ButtonBar.AlertDialog = 0x01030429;
        public: static const int Widget.Material.Button.Inset = 0x0103025c;
        /**  Small bordered ink button 
         */
        public: static const int Widget.Material.Button.Small = 0x0103025d;
        public: static const int Widget.Material.Button.Toggle = 0x0103025e;
        public: static const int Widget.Material.ButtonBar = 0x0103025f;
        public: static const int Widget.Material.ButtonBar.AlertDialog = 0x01030260;
        public: static const int Widget.Material.CalendarView = 0x01030261;
        public: static const int Widget.Material.CheckedTextView = 0x01030262;
        public: static const int Widget.Material.CompoundButton = 0x0103042e;
        public: static const int Widget.Material.CompoundButton.CheckBox = 0x01030263;
        public: static const int Widget.Material.CompoundButton.RadioButton = 0x01030264;
        public: static const int Widget.Material.CompoundButton.Star = 0x01030265;
        public: static const int Widget.Material.CompoundButton.Switch = 0x0103042f;
        public: static const int Widget.Material.DatePicker = 0x01030266;
        public: static const int Widget.Material.DropDownItem = 0x01030267;
        public: static const int Widget.Material.DropDownItem.Spinner = 0x01030268;
        public: static const int Widget.Material.EditText = 0x01030269;
        public: static const int Widget.Material.ExpandableListView = 0x0103026a;
        public: static const int Widget.Material.ExpandableListView.White = 0x01030430;
        public: static const int Widget.Material.FastScroll = 0x0103026b;
        public: static const int Widget.Material.FragmentBreadCrumbs = 0x01030431;
        public: static const int Widget.Material.Gallery = 0x01030432;
        public: static const int Widget.Material.GestureOverlayView = 0x01030433;
        public: static const int Widget.Material.GridView = 0x0103026c;
        public: static const int Widget.Material.HorizontalScrollView = 0x0103026d;
        public: static const int Widget.Material.ImageButton = 0x0103026e;
        public: static const int Widget.Material.ImageWell = 0x01030436;
        public: static const int Widget.Material.KeyboardView = 0x0103043f;
        /**  Light widget styles 
         */
        public: static const int Widget.Material.Light = 0x0103028e;
        public: static const int Widget.Material.Light.AbsListView = 0x0103044b;
        public: static const int Widget.Material.Light.ActionBar = 0x0103028f;
        public: static const int Widget.Material.Light.ActionBar.Solid = 0x01030290;
        public: static const int Widget.Material.Light.ActionBar.TabBar = 0x01030291;
        public: static const int Widget.Material.Light.ActionBar.TabText = 0x01030292;
        public: static const int Widget.Material.Light.ActionBar.TabView = 0x01030293;
        public: static const int Widget.Material.Light.ActionButton = 0x01030294;
        public: static const int Widget.Material.Light.ActionButton.CloseMode = 0x01030295;
        public: static const int Widget.Material.Light.ActionButton.Overflow = 0x01030296;
        public: static const int Widget.Material.Light.ActionMode = 0x01030297;
        public: static const int Widget.Material.Light.ActivityChooserView = 0x01030453;
        public: static const int Widget.Material.Light.AutoCompleteTextView = 0x01030298;
        public: static const int Widget.Material.Light.Button = 0x01030299;
        public: static const int Widget.Material.Light.Button.Borderless = 0x0103029a;
        public: static const int Widget.Material.Light.Button.Borderless.Colored = 0x0103029b;
        public: static const int Widget.Material.Light.Button.Borderless.Small = 0x0103029c;
        public: static const int Widget.Material.Light.Button.ButtonBar.AlertDialog = 0x01030447;
        public: static const int Widget.Material.Light.Button.Inset = 0x0103029d;
        public: static const int Widget.Material.Light.Button.Small = 0x0103029e;
        public: static const int Widget.Material.Light.Button.Toggle = 0x0103029f;
        public: static const int Widget.Material.Light.ButtonBar = 0x010302a0;
        public: static const int Widget.Material.Light.ButtonBar.AlertDialog = 0x010302a1;
        public: static const int Widget.Material.Light.CalendarView = 0x010302a2;
        public: static const int Widget.Material.Light.CheckedTextView = 0x010302a3;
        public: static const int Widget.Material.Light.CompoundButton = 0x0103044c;
        public: static const int Widget.Material.Light.CompoundButton.CheckBox = 0x010302a4;
        public: static const int Widget.Material.Light.CompoundButton.RadioButton = 0x010302a5;
        public: static const int Widget.Material.Light.CompoundButton.Star = 0x010302a6;
        public: static const int Widget.Material.Light.CompoundButton.Switch = 0x0103044d;
        public: static const int Widget.Material.Light.DatePicker = 0x010302a7;
        public: static const int Widget.Material.Light.DropDownItem = 0x010302a8;
        public: static const int Widget.Material.Light.DropDownItem.Spinner = 0x010302a9;
        public: static const int Widget.Material.Light.EditText = 0x010302aa;
        public: static const int Widget.Material.Light.ExpandableListView = 0x010302ab;
        public: static const int Widget.Material.Light.ExpandableListView.White = 0x0103044e;
        public: static const int Widget.Material.Light.FastScroll = 0x010302ac;
        public: static const int Widget.Material.Light.FragmentBreadCrumbs = 0x0103044f;
        public: static const int Widget.Material.Light.Gallery = 0x01030450;
        public: static const int Widget.Material.Light.GestureOverlayView = 0x01030451;
        public: static const int Widget.Material.Light.GridView = 0x010302ad;
        public: static const int Widget.Material.Light.HorizontalScrollView = 0x010302ae;
        public: static const int Widget.Material.Light.ImageButton = 0x010302af;
        public: static const int Widget.Material.Light.ImageWell = 0x01030454;
        public: static const int Widget.Material.Light.KeyboardView = 0x01030459;
        public: static const int Widget.Material.Light.ListPopupWindow = 0x010302b0;
        public: static const int Widget.Material.Light.ListView = 0x010302b1;
        public: static const int Widget.Material.Light.ListView.DropDown = 0x010302b2;
        public: static const int Widget.Material.Light.ListView.White = 0x01030455;
        public: static const int Widget.Material.Light.MediaRouteButton = 0x010302b3;
        public: static const int Widget.Material.Light.NumberPicker = 0x01030452;
        public: static const int Widget.Material.Light.PopupMenu = 0x010302b4;
        public: static const int Widget.Material.Light.PopupMenu.Overflow = 0x010302b5;
        public: static const int Widget.Material.Light.PopupWindow = 0x010302b6;
        public: static const int Widget.Material.Light.PopupWindow.ActionMode = 0x01030456;
        public: static const int Widget.Material.Light.ProgressBar = 0x010302b7;
        public: static const int Widget.Material.Light.ProgressBar.Horizontal = 0x010302b8;
        public: static const int Widget.Material.Light.ProgressBar.Inverse = 0x010302b9;
        public: static const int Widget.Material.Light.ProgressBar.Large = 0x010302ba;
        public: static const int Widget.Material.Light.ProgressBar.Large.Inverse = 0x010302bb;
        public: static const int Widget.Material.Light.ProgressBar.Small = 0x010302bc;
        public: static const int Widget.Material.Light.ProgressBar.Small.Inverse = 0x010302bd;
        public: static const int Widget.Material.Light.ProgressBar.Small.Title = 0x010302be;
        public: static const int Widget.Material.Light.QuickContactBadge.WindowLarge = 0x0103045c;
        public: static const int Widget.Material.Light.QuickContactBadge.WindowMedium = 0x0103045b;
        public: static const int Widget.Material.Light.QuickContactBadge.WindowSmall = 0x0103045a;
        public: static const int Widget.Material.Light.QuickContactBadgeSmall.WindowLarge = 0x0103045f;
        public: static const int Widget.Material.Light.QuickContactBadgeSmall.WindowMedium = 0x0103045e;
        public: static const int Widget.Material.Light.QuickContactBadgeSmall.WindowSmall = 0x0103045d;
        public: static const int Widget.Material.Light.RatingBar = 0x010302bf;
        public: static const int Widget.Material.Light.RatingBar.Indicator = 0x010302c0;
        public: static const int Widget.Material.Light.RatingBar.Small = 0x010302c1;
        public: static const int Widget.Material.Light.ScrollView = 0x010302c2;
        public: static const int Widget.Material.Light.SearchView = 0x010302c3;
        public: static const int Widget.Material.Light.SeekBar = 0x010302c4;
        public: static const int Widget.Material.Light.SegmentedButton = 0x010302c5;
        public: static const int Widget.Material.Light.Spinner = 0x010302c7;
        public: static const int Widget.Material.Light.Spinner.DropDown = 0x01030457;
        public: static const int Widget.Material.Light.Spinner.DropDown.ActionBar = 0x01030458;
        public: static const int Widget.Material.Light.Spinner.Underlined = 0x010302c8;
        public: static const int Widget.Material.Light.StackView = 0x010302c6;
        public: static const int Widget.Material.Light.Tab = 0x010302c9;
        public: static const int Widget.Material.Light.TabWidget = 0x010302ca;
        public: static const int Widget.Material.Light.TextSelectHandle = 0x01030449;
        public: static const int Widget.Material.Light.TextSuggestionsPopupWindow = 0x0103044a;
        public: static const int Widget.Material.Light.TextView = 0x010302cb;
        public: static const int Widget.Material.Light.TextView.ListSeparator = 0x01030448;
        public: static const int Widget.Material.Light.TextView.SpinnerItem = 0x010302cc;
        public: static const int Widget.Material.Light.TimePicker = 0x010302cd;
        public: static const int Widget.Material.Light.WebTextView = 0x010302ce;
        public: static const int Widget.Material.Light.WebView = 0x010302cf;
        public: static const int Widget.Material.ListPopupWindow = 0x0103026f;
        public: static const int Widget.Material.ListView = 0x01030270;
        public: static const int Widget.Material.ListView.DropDown = 0x01030271;
        public: static const int Widget.Material.ListView.White = 0x01030437;
        public: static const int Widget.Material.MediaRouteButton = 0x01030272;
        public: static const int Widget.Material.Notification.ProgressBar = 0x01030426;
        public: static const int Widget.Material.NumberPicker = 0x01030434;
        public: static const int Widget.Material.PopupMenu = 0x01030273;
        public: static const int Widget.Material.PopupMenu.Overflow = 0x01030274;
        public: static const int Widget.Material.PopupWindow = 0x01030275;
        public: static const int Widget.Material.PopupWindow.ActionMode = 0x01030438;
        public: static const int Widget.Material.PreferenceFrameLayout = 0x01030446;
        public: static const int Widget.Material.ProgressBar = 0x01030276;
        public: static const int Widget.Material.ProgressBar.Horizontal = 0x01030277;
        public: static const int Widget.Material.ProgressBar.Inverse = 0x01030439;
        public: static const int Widget.Material.ProgressBar.Large = 0x01030278;
        public: static const int Widget.Material.ProgressBar.Large.Inverse = 0x0103043b;
        public: static const int Widget.Material.ProgressBar.Small = 0x01030279;
        public: static const int Widget.Material.ProgressBar.Small.Inverse = 0x0103043a;
        public: static const int Widget.Material.ProgressBar.Small.Title = 0x0103027a;
        public: static const int Widget.Material.QuickContactBadge.WindowLarge = 0x01030442;
        public: static const int Widget.Material.QuickContactBadge.WindowMedium = 0x01030441;
        public: static const int Widget.Material.QuickContactBadge.WindowSmall = 0x01030440;
        public: static const int Widget.Material.QuickContactBadgeSmall.WindowLarge = 0x01030445;
        public: static const int Widget.Material.QuickContactBadgeSmall.WindowMedium = 0x01030444;
        public: static const int Widget.Material.QuickContactBadgeSmall.WindowSmall = 0x01030443;
        public: static const int Widget.Material.RatingBar = 0x0103027b;
        public: static const int Widget.Material.RatingBar.Indicator = 0x0103027c;
        public: static const int Widget.Material.RatingBar.Small = 0x0103027d;
        public: static const int Widget.Material.ScrollView = 0x0103027e;
        public: static const int Widget.Material.SearchView = 0x0103027f;
        public: static const int Widget.Material.SeekBar = 0x01030280;
        public: static const int Widget.Material.SegmentedButton = 0x01030281;
        public: static const int Widget.Material.Spinner = 0x01030283;
        public: static const int Widget.Material.Spinner.DropDown = 0x0103043c;
        public: static const int Widget.Material.Spinner.DropDown.ActionBar = 0x0103043d;
        public: static const int Widget.Material.Spinner.Underlined = 0x01030284;
        public: static const int Widget.Material.StackView = 0x01030282;
        public: static const int Widget.Material.Tab = 0x01030285;
        public: static const int Widget.Material.TabText = 0x0103043e;
        public: static const int Widget.Material.TabWidget = 0x01030286;
        public: static const int Widget.Material.TextSelectHandle = 0x0103042b;
        public: static const int Widget.Material.TextSuggestionsPopupWindow = 0x0103042c;
        public: static const int Widget.Material.TextView = 0x01030287;
        public: static const int Widget.Material.TextView.ListSeparator = 0x0103042a;
        public: static const int Widget.Material.TextView.SpinnerItem = 0x01030288;
        public: static const int Widget.Material.TimePicker = 0x01030289;
        public: static const int Widget.Material.Toolbar = 0x0103028a;
        public: static const int Widget.Material.Toolbar.Button.Navigation = 0x0103028b;
        public: static const int Widget.Material.WebTextView = 0x0103028c;
        public: static const int Widget.Material.WebView = 0x0103028d;
        public: static const int Widget.Micro = 0x01030470;
        public: static const int Widget.Micro.NumberPicker = 0x01030472;
        public: static const int Widget.Micro.TextView = 0x01030471;
        public: static const int Widget.NumberPicker = 0x010302fd;
        public: static const int Widget.PopupMenu = 0x01030086;
        public: static const int Widget.PopupWindow = 0x01030036;
        public: static const int Widget.PreferenceFrameLayout = 0x010302d5;
        public: static const int Widget.ProgressBar = 0x0103001c;
        public: static const int Widget.ProgressBar.Horizontal = 0x0103001f;
        public: static const int Widget.ProgressBar.Inverse = 0x0103005b;
        public: static const int Widget.ProgressBar.Large = 0x0103001d;
        public: static const int Widget.ProgressBar.Large.Inverse = 0x0103005c;
        public: static const int Widget.ProgressBar.Small = 0x0103001e;
        public: static const int Widget.ProgressBar.Small.Inverse = 0x0103005d;
        public: static const int Widget.ProgressBar.Small.Title = 0x010302f6;
        public: static const int Widget.QuickContactBadge = 0x01030302;
        public: static const int Widget.QuickContactBadge.WindowLarge = 0x01030306;
        public: static const int Widget.QuickContactBadge.WindowMedium = 0x01030305;
        public: static const int Widget.QuickContactBadge.WindowSmall = 0x01030304;
        public: static const int Widget.QuickContactBadgeSmall = 0x01030303;
        public: static const int Widget.QuickContactBadgeSmall.WindowLarge = 0x01030309;
        public: static const int Widget.QuickContactBadgeSmall.WindowMedium = 0x01030308;
        public: static const int Widget.QuickContactBadgeSmall.WindowSmall = 0x01030307;
        public: static const int Widget.RatingBar = 0x01030021;
        public: static const int Widget.RatingBar.Indicator = 0x010302f7;
        public: static const int Widget.RatingBar.Small = 0x010302f8;
        public: static const int Widget.ScrollView = 0x0103002d;
        public: static const int Widget.SeekBar = 0x01030020;
        public: static const int Widget.Spinner = 0x01030028;
        public: static const int Widget.Spinner.DropDown = 0x01030083;
        public: static const int Widget.StackView = 0x010301e6;
        public: static const int Widget.TabWidget = 0x01030034;
        /**  Style for the small popup windows that contain text selection anchors. 
         */
        public: static const int Widget.TextSelectHandle = 0x01030331;
        /**  Style for the popup window that contains text suggestions. 
         */
        public: static const int Widget.TextSuggestionsPopupWindow = 0x01030333;
        public: static const int Widget.TextView = 0x01030022;
        public: static const int Widget.TextView.ListSeparator = 0x010302fa;
        public: static const int Widget.TextView.ListSeparator.White = 0x010302fb;
        public: static const int Widget.TextView.PopupMenu = 0x01030029;
        public: static const int Widget.TextView.SpinnerItem = 0x0103002a;
        public: static const int Widget.TimePicker = 0x010302fe;
        public: static const int Widget.Toolbar = 0x010301e7;
        public: static const int Widget.Toolbar.Button.Navigation = 0x010301e8;
        public: static const int Widget.WebTextView = 0x01030300;
        public: static const int Widget.WebView = 0x01030033;
        public: static const int WindowAnimationStyle.Leanback.Setup = 0x01030404;
        public: static const int WindowTitle = 0x010302d2;
        /**  WindowTitle Styles 
         */
        public: static const int WindowTitle.DeviceDefault = 0x01030381;
        public: static const int WindowTitle.Holo = 0x010303e4;
        public: static const int WindowTitle.Material = 0x01030467;
        public: static const int WindowTitleBackground = 0x010302d1;
        public: static const int WindowTitleBackground.DeviceDefault = 0x01030382;
        /**  Window title 
         */
        public: static const int WindowTitleBackground.Holo = 0x010303e3;
        /**  Window title 
         */
        public: static const int WindowTitleBackground.Material = 0x01030466;
        public: static const int ZoomControls = 0x0103032f;
        /**  Wifi dialog styles 
 @hide 
         */
        public: static const int wifi_item = 0x0103033d;
        /**  @hide 
         */
        public: static const int wifi_item_content = 0x0103033f;
        /**  @hide 
         */
        public: static const int wifi_item_label = 0x0103033e;
        /**  @hide 
         */
        public: static const int wifi_section = 0x01030340;
    };
    public: class transition {
        /**  A transition that moves views in or out of the scene to or from the edges when
         a view visibility changes. 
         */
        public: static const int explode = 0x010f0003;
        /**  A transition that fades views in and out. 
         */
        public: static const int fade = 0x010f0002;
        /**  A transition that moves and resizes a view 
         */
        public: static const int move = 0x010f0001;
        /**  Used for Activity Transitions, this transition indicates that no Transition
         should be used. 
         */
        public: static const int no_transition = 0x010f0000;
        /**  A transition that moves views in or out of the scene to or from the bottom edge when
         a view visibility changes. 
         */
        public: static const int slide_bottom = 0x010f0004;
        /**  A transition that moves views in or out of the scene to or from the left edge when
         a view visibility changes. 
         */
        public: static const int slide_left = 0x010f0007;
        /**  A transition that moves views in or out of the scene to or from the right edge when
         a view visibility changes. 
         */
        public: static const int slide_right = 0x010f0006;
        /**  A transition that moves views in or out of the scene to or from the top edge when
         a view visibility changes. 
         */
        public: static const int slide_top = 0x010f0005;
    };
    public: class xml {
        public: static const int apns = 0x01110000;
        public: static const int audio_assets = 0x01110001;
        public: static const int autotext = 0x01110002;
        public: static const int default_zen_mode_config = 0x01110003;
        public: static const int eri = 0x01110004;
        public: static const int global_keys = 0x01110005;
        public: static const int kg_password_kbd_numeric = 0x01110006;
        public: static const int password_kbd_extension = 0x01110007;
        public: static const int password_kbd_numeric = 0x01110008;
        public: static const int password_kbd_popup_template = 0x01110009;
        public: static const int password_kbd_qwerty = 0x0111000a;
        public: static const int password_kbd_qwerty_shifted = 0x0111000b;
        public: static const int password_kbd_symbols = 0x0111000c;
        public: static const int password_kbd_symbols_shift = 0x0111000d;
        public: static const int power_profile = 0x0111000e;
        public: static const int preferred_time_zones = 0x0111000f;
        public: static const int sms_7bit_translation_table = 0x01110010;
        public: static const int sms_short_codes = 0x01110011;
        public: static const int storage_list = 0x01110012;
        public: static const int time_zones_by_country = 0x01110013;
    };
    public: class styleable {
        /** Attributes that can be used with a AbsListView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AbsListView_cacheColorHint android:cacheColorHint}</code></td><td> Indicates that this list will always be drawn on top of solid, single-color
             opaque background.</td></tr>
           <tr><td><code>{@link #AbsListView_choiceMode android:choiceMode}</code></td><td> Defines the choice behavior for the view.</td></tr>
           <tr><td><code>{@link #AbsListView_drawSelectorOnTop android:drawSelectorOnTop}</code></td><td> When set to true, the selector will be drawn over the selected item.</td></tr>
           <tr><td><code>{@link #AbsListView_fastScrollAlwaysVisible android:fastScrollAlwaysVisible}</code></td><td> When set to true, the list will always show the fast scroll interface.</td></tr>
           <tr><td><code>{@link #AbsListView_fastScrollEnabled android:fastScrollEnabled}</code></td><td> Enables the fast scroll thumb that can be dragged to quickly scroll through
             the list.</td></tr>
           <tr><td><code>{@link #AbsListView_fastScrollStyle android:fastScrollStyle}</code></td><td> Specifies the style of the fast scroll decorations.</td></tr>
           <tr><td><code>{@link #AbsListView_listSelector android:listSelector}</code></td><td> Drawable used to indicate the currently selected item in the list.</td></tr>
           <tr><td><code>{@link #AbsListView_scrollingCache android:scrollingCache}</code></td><td> When set to true, the list uses a drawing cache during scrolling.</td></tr>
           <tr><td><code>{@link #AbsListView_smoothScrollbar android:smoothScrollbar}</code></td><td> When set to true, the list will use a more refined calculation
             method based on the pixels height of the items visible on screen.</td></tr>
           <tr><td><code>{@link #AbsListView_stackFromBottom android:stackFromBottom}</code></td><td> Used by ListView and GridView to stack their content from the bottom.</td></tr>
           <tr><td><code>{@link #AbsListView_textFilterEnabled android:textFilterEnabled}</code></td><td> When set to true, the list will filter results as the user types.</td></tr>
           <tr><td><code>{@link #AbsListView_transcriptMode android:transcriptMode}</code></td><td> Sets the transcript mode for the list.</td></tr>
           </table>
           @see #AbsListView_cacheColorHint
           @see #AbsListView_choiceMode
           @see #AbsListView_drawSelectorOnTop
           @see #AbsListView_fastScrollAlwaysVisible
           @see #AbsListView_fastScrollEnabled
           @see #AbsListView_fastScrollStyle
           @see #AbsListView_listSelector
           @see #AbsListView_scrollingCache
           @see #AbsListView_smoothScrollbar
           @see #AbsListView_stackFromBottom
           @see #AbsListView_textFilterEnabled
           @see #AbsListView_transcriptMode
         */
        public: static const int AbsListView[12];
        /**
          <p>
          @attr description
           Indicates that this list will always be drawn on top of solid, single-color
             opaque background. This allows the list to optimize drawing. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#cacheColorHint}.
          @attr name android:cacheColorHint
        */
        public: static const int AbsListView_cacheColorHint = 6;
        /**
          <p>
          @attr description
           Defines the choice behavior for the view. By default, lists do not have
             any choice behavior. By setting the choiceMode to singleChoice, the list
             allows up to one item to be in a chosen state. By setting the choiceMode to
             multipleChoice, the list allows any number of items to be chosen.
             Finally, by setting the choiceMode to multipleChoiceModal the list allows
             any number of items to be chosen in a special selection mode.
             The application will supply a
             {@link android.widget.AbsListView.MultiChoiceModeListener} using
             {@link android.widget.AbsListView#setMultiChoiceModeListener} to control the
             selection mode. This uses the {@link android.view.ActionMode} API. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Normal list that does not indicate choices. </td></tr>
<tr><td><code>singleChoice</code></td><td>1</td><td> The list allows up to one choice. </td></tr>
<tr><td><code>multipleChoice</code></td><td>2</td><td> The list allows multiple choices. </td></tr>
<tr><td><code>multipleChoiceModal</code></td><td>3</td><td> The list allows multiple choices in a custom selection mode. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#choiceMode}.
          @attr name android:choiceMode
        */
        public: static const int AbsListView_choiceMode = 7;
        /**
          <p>
          @attr description
           When set to true, the selector will be drawn over the selected item.
             Otherwise the selector is drawn behind the selected item. The default
             value is false. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawSelectorOnTop}.
          @attr name android:drawSelectorOnTop
        */
        public: static const int AbsListView_drawSelectorOnTop = 1;
        /**
          <p>
          @attr description
           When set to true, the list will always show the fast scroll interface.
             This setting implies fastScrollEnabled. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fastScrollAlwaysVisible}.
          @attr name android:fastScrollAlwaysVisible
        */
        public: static const int AbsListView_fastScrollAlwaysVisible = 10;
        /**
          <p>
          @attr description
           Enables the fast scroll thumb that can be dragged to quickly scroll through
             the list. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fastScrollEnabled}.
          @attr name android:fastScrollEnabled
        */
        public: static const int AbsListView_fastScrollEnabled = 8;
        /**
          <p>
          @attr description
           Specifies the style of the fast scroll decorations. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fastScrollStyle}.
          @attr name android:fastScrollStyle
        */
        public: static const int AbsListView_fastScrollStyle = 11;
        /**
          <p>
          @attr description
           Drawable used to indicate the currently selected item in the list. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listSelector}.
          @attr name android:listSelector
        */
        public: static const int AbsListView_listSelector = 0;
        /**
          <p>
          @attr description
           When set to true, the list uses a drawing cache during scrolling.
             This makes the rendering faster but uses more memory. The default
             value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollingCache}.
          @attr name android:scrollingCache
        */
        public: static const int AbsListView_scrollingCache = 3;
        /**
          <p>
          @attr description
           When set to true, the list will use a more refined calculation
             method based on the pixels height of the items visible on screen. This
             property is set to true by default but should be set to false if your adapter
             will display items of varying heights. When this property is set to true and
             your adapter displays items of varying heights, the scrollbar thumb will
             change size as the user scrolls through the list. When set to fale, the list
             will use only the number of items in the adapter and the number of items visible
             on screen to determine the scrollbar's properties. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#smoothScrollbar}.
          @attr name android:smoothScrollbar
        */
        public: static const int AbsListView_smoothScrollbar = 9;
        /**
          <p>
          @attr description
           Used by ListView and GridView to stack their content from the bottom. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#stackFromBottom}.
          @attr name android:stackFromBottom
        */
        public: static const int AbsListView_stackFromBottom = 2;
        /**
          <p>
          @attr description
           When set to true, the list will filter results as the user types. The
             List's adapter must support the Filterable interface for this to work. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textFilterEnabled}.
          @attr name android:textFilterEnabled
        */
        public: static const int AbsListView_textFilterEnabled = 4;
        /**
          <p>
          @attr description
           Sets the transcript mode for the list. In transcript mode, the list
             scrolls to the bottom to make new items visible when they are added. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>disabled</code></td><td>0</td><td> Disables transcript mode. This is the default value. </td></tr>
<tr><td><code>normal</code></td><td>1</td><td> The list will automatically scroll to the bottom when
                 a data set change notification is received and only if the last item is
                 already visible on screen. </td></tr>
<tr><td><code>alwaysScroll</code></td><td>2</td><td> The list will automatically scroll to the bottom, no matter what items
                 are currently visible. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#transcriptMode}.
          @attr name android:transcriptMode
        */
        public: static const int AbsListView_transcriptMode = 5;
        /** Attributes that can be used with a AbsSpinner.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AbsSpinner_entries android:entries}</code></td><td> Reference to an array resource that will populate the Spinner.</td></tr>
           </table>
           @see #AbsSpinner_entries
         */
        public: static const int AbsSpinner[1];
        /**
          <p>
          @attr description
           Reference to an array resource that will populate the Spinner.  For static content,
             this is simpler than populating the Spinner programmatically. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#entries}.
          @attr name android:entries
        */
        public: static const int AbsSpinner_entries = 0;
        /** Attributes that can be used with a AbsoluteLayout_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AbsoluteLayout_Layout_layout_x android:layout_x}</code></td><td></td></tr>
           <tr><td><code>{@link #AbsoluteLayout_Layout_layout_y android:layout_y}</code></td><td></td></tr>
           </table>
           @see #AbsoluteLayout_Layout_layout_x
           @see #AbsoluteLayout_Layout_layout_y
         */
        public: static const int AbsoluteLayout_Layout[2];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#layout_x}
          attribute's value can be found in the {@link #AbsoluteLayout_Layout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:layout_x
        */
        public: static const int AbsoluteLayout_Layout_layout_x = 0;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#layout_y}
          attribute's value can be found in the {@link #AbsoluteLayout_Layout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:layout_y
        */
        public: static const int AbsoluteLayout_Layout_layout_y = 1;
        /** Attributes that can be used with a AccelerateInterpolator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AccelerateInterpolator_factor android:factor}</code></td><td> This is the amount of deceleration to add when easing in.</td></tr>
           </table>
           @see #AccelerateInterpolator_factor
         */
        public: static const int AccelerateInterpolator[1];
        /**
          <p>
          @attr description
           This is the amount of deceleration to add when easing in. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#factor}.
          @attr name android:factor
        */
        public: static const int AccelerateInterpolator_factor = 0;
        /**  Use <code>accessibility-service</code> as the root tag of the XML resource that
         describes an {@link android.accessibilityservice.AccessibilityService} service,
         which is referenced from its
         {@link android.accessibilityservice.AccessibilityService#SERVICE_META_DATA}
         meta-data entry. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AccessibilityService_accessibilityEventTypes android:accessibilityEventTypes}</code></td><td> The event types this serivce would like to receive as specified in
             {@link android.view.accessibility.AccessibilityEvent}.</td></tr>
           <tr><td><code>{@link #AccessibilityService_accessibilityFeedbackType android:accessibilityFeedbackType}</code></td><td> The feedback types this serivce provides as specified in
             {@link android.accessibilityservice.AccessibilityServiceInfo}.</td></tr>
           <tr><td><code>{@link #AccessibilityService_accessibilityFlags android:accessibilityFlags}</code></td><td> Additional flags as specified in
             {@link android.accessibilityservice.AccessibilityServiceInfo}.</td></tr>
           <tr><td><code>{@link #AccessibilityService_canRequestEnhancedWebAccessibility android:canRequestEnhancedWebAccessibility}</code></td><td> Attribute whether the accessibility service wants to be able to request enhanced
             web accessibility enhancements.</td></tr>
           <tr><td><code>{@link #AccessibilityService_canRequestFilterKeyEvents android:canRequestFilterKeyEvents}</code></td><td> Attribute whether the accessibility service wants to be able to request to
             filter key events.</td></tr>
           <tr><td><code>{@link #AccessibilityService_canRequestTouchExplorationMode android:canRequestTouchExplorationMode}</code></td><td> Attribute whether the accessibility service wants to be able to request touch
             exploration mode in which touched items are spoken aloud and the UI can be
             explored via gestures.</td></tr>
           <tr><td><code>{@link #AccessibilityService_canRetrieveWindowContent android:canRetrieveWindowContent}</code></td><td> Attribute whether the accessibility service wants to be able to retrieve the
             active window content.</td></tr>
           <tr><td><code>{@link #AccessibilityService_description android:description}</code></td><td> Short description of the accessibility serivce purpose or behavior.</td></tr>
           <tr><td><code>{@link #AccessibilityService_notificationTimeout android:notificationTimeout}</code></td><td> The minimal period in milliseconds between two accessibility events of the same type
             are sent to this serivce.</td></tr>
           <tr><td><code>{@link #AccessibilityService_packageNames android:packageNames}</code></td><td> Comma separated package names from which this serivce would like to receive events (leave out for all packages).</td></tr>
           <tr><td><code>{@link #AccessibilityService_settingsActivity android:settingsActivity}</code></td><td> Component name of an activity that allows the user to modify
             the settings for this service.</td></tr>
           </table>
           @see #AccessibilityService_accessibilityEventTypes
           @see #AccessibilityService_accessibilityFeedbackType
           @see #AccessibilityService_accessibilityFlags
           @see #AccessibilityService_canRequestEnhancedWebAccessibility
           @see #AccessibilityService_canRequestFilterKeyEvents
           @see #AccessibilityService_canRequestTouchExplorationMode
           @see #AccessibilityService_canRetrieveWindowContent
           @see #AccessibilityService_description
           @see #AccessibilityService_notificationTimeout
           @see #AccessibilityService_packageNames
           @see #AccessibilityService_settingsActivity
         */
        public: static const int AccessibilityService[11];
        /**
          <p>
          @attr description
           The event types this serivce would like to receive as specified in
             {@link android.view.accessibility.AccessibilityEvent}. This setting
             can be changed at runtime by calling
             {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
             android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>typeViewClicked</code></td><td>0x00000001</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED} events.</td></tr>
<tr><td><code>typeViewLongClicked</code></td><td>0x00000002</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_LONG_CLICKED} events. </td></tr>
<tr><td><code>typeViewSelected</code></td><td>0x00000004</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SELECTED} events. </td></tr>
<tr><td><code>typeViewFocused</code></td><td>0x00000008</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_FOCUSED} events. </td></tr>
<tr><td><code>typeViewTextChanged</code></td><td>0x00000010</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED} events. </td></tr>
<tr><td><code>typeWindowStateChanged</code></td><td>0x00000020</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED} events. </td></tr>
<tr><td><code>typeNotificationStateChanged</code></td><td>0x00000040</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED} events. </td></tr>
<tr><td><code>typeViewHoverEnter</code></td><td>0x00000080</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER} events. </td></tr>
<tr><td><code>typeViewHoverExit</code></td><td>0x00000100</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_EXIT} events. </td></tr>
<tr><td><code>typeTouchExplorationGestureStart</code></td><td>0x00000200</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_START} events. </td></tr>
<tr><td><code>typeTouchExplorationGestureEnd</code></td><td>0x00000400</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_END} events. </td></tr>
<tr><td><code>typeWindowContentChanged</code></td><td>0x00000800</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} events. </td></tr>
<tr><td><code>typeViewScrolled</code></td><td>0x000001000</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED} events. </td></tr>
<tr><td><code>typeViewTextSelectionChanged</code></td><td>0x000002000</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED} events. </td></tr>
<tr><td><code>typeAllMask</code></td><td>0xffffffff</td><td> Receives {@link android.view.accessibility.AccessibilityEvent#TYPES_ALL_MASK} i.e. all events. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#accessibilityEventTypes}.
          @attr name android:accessibilityEventTypes
        */
        public: static const int AccessibilityService_accessibilityEventTypes = 2;
        /**
          <p>
          @attr description
           The feedback types this serivce provides as specified in
             {@link android.accessibilityservice.AccessibilityServiceInfo}. This setting
             can be changed at runtime by calling
             {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
             android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>feedbackSpoken</code></td><td>0x00000001</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_SPOKEN} feedback. </td></tr>
<tr><td><code>feedbackHaptic</code></td><td>0x00000002</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_HAPTIC} feedback. </td></tr>
<tr><td><code>feedbackAudible</code></td><td>0x00000004</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_AUDIBLE} feedback. </td></tr>
<tr><td><code>feedbackVisual</code></td><td>0x00000008</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_VISUAL} feedback. </td></tr>
<tr><td><code>feedbackGeneric</code></td><td>0x00000010</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_GENERIC} feedback. </td></tr>
<tr><td><code>feedbackAllMask</code></td><td>0xffffffff</td><td> Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_ALL_MASK} feedback. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#accessibilityFeedbackType}.
          @attr name android:accessibilityFeedbackType
        */
        public: static const int AccessibilityService_accessibilityFeedbackType = 4;
        /**
          <p>
          @attr description
           Additional flags as specified in
             {@link android.accessibilityservice.AccessibilityServiceInfo}.
             This setting can be changed at runtime by calling
             {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
             android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>flagDefault</code></td><td>0x00000001</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#DEFAULT} </td></tr>
<tr><td><code>flagIncludeNotImportantViews</code></td><td>0x00000002</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS} </td></tr>
<tr><td><code>flagRequestTouchExplorationMode</code></td><td>0x00000004</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} </td></tr>
<tr><td><code>flagRequestEnhancedWebAccessibility</code></td><td>0x00000008</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY} </td></tr>
<tr><td><code>flagReportViewIds</code></td><td>0x00000010</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS} </td></tr>
<tr><td><code>flagRequestFilterKeyEvents</code></td><td>0x00000020</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS} </td></tr>
<tr><td><code>flagRetrieveInteractiveWindows</code></td><td>0x00000040</td><td> Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#accessibilityFlags}.
          @attr name android:accessibilityFlags
        */
        public: static const int AccessibilityService_accessibilityFlags = 6;
        /**
          <p>
          @attr description
           Attribute whether the accessibility service wants to be able to request enhanced
             web accessibility enhancements. For example, installing scripts to make app
             content more accessible.
             <p>
             Required to allow setting the {@link android.accessibilityservice
             #AccessibilityServiceInfo#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY} flag.
             </p>
         


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#canRequestEnhancedWebAccessibility}.
          @attr name android:canRequestEnhancedWebAccessibility
        */
        public: static const int AccessibilityService_canRequestEnhancedWebAccessibility = 9;
        /**
          <p>
          @attr description
           Attribute whether the accessibility service wants to be able to request to
             filter key events.
             <p>
             Required to allow setting the {@link android.accessibilityservice
             #AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS} flag.
             </p>
         


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#canRequestFilterKeyEvents}.
          @attr name android:canRequestFilterKeyEvents
        */
        public: static const int AccessibilityService_canRequestFilterKeyEvents = 10;
        /**
          <p>
          @attr description
           Attribute whether the accessibility service wants to be able to request touch
             exploration mode in which touched items are spoken aloud and the UI can be
             explored via gestures.
             <p>
             Required to allow setting the {@link android.accessibilityservice
             #AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} flag.
             </p>
         


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#canRequestTouchExplorationMode}.
          @attr name android:canRequestTouchExplorationMode
        */
        public: static const int AccessibilityService_canRequestTouchExplorationMode = 8;
        /**
          <p>
          @attr description
           Attribute whether the accessibility service wants to be able to retrieve the
             active window content. This setting cannot be changed at runtime. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#canRetrieveWindowContent}.
          @attr name android:canRetrieveWindowContent
        */
        public: static const int AccessibilityService_canRetrieveWindowContent = 7;
        /**
          <p>
          @attr description
           Short description of the accessibility serivce purpose or behavior.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int AccessibilityService_description = 0;
        /**
          <p>
          @attr description
           The minimal period in milliseconds between two accessibility events of the same type
             are sent to this serivce. This setting can be changed at runtime by calling
             {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
             android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#notificationTimeout}.
          @attr name android:notificationTimeout
        */
        public: static const int AccessibilityService_notificationTimeout = 5;
        /**
          <p>
          @attr description
           Comma separated package names from which this serivce would like to receive events (leave out for all packages).
             {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
             android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#packageNames}.
          @attr name android:packageNames
        */
        public: static const int AccessibilityService_packageNames = 3;
        /**
          <p>
          @attr description
           Component name of an activity that allows the user to modify
             the settings for this service. This setting cannot be changed at runtime. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int AccessibilityService_settingsActivity = 1;
        /**  Use <code>account-authenticator</code> as the root tag of the XML resource that
         describes an account authenticator.
     
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AccountAuthenticator_accountPreferences android:accountPreferences}</code></td><td> A preferences.</td></tr>
           <tr><td><code>{@link #AccountAuthenticator_accountType android:accountType}</code></td><td> The account type this authenticator handles.</td></tr>
           <tr><td><code>{@link #AccountAuthenticator_customTokens android:customTokens}</code></td><td> Account handles its own token storage and permissions.</td></tr>
           <tr><td><code>{@link #AccountAuthenticator_icon android:icon}</code></td><td> The icon of the authenticator.</td></tr>
           <tr><td><code>{@link #AccountAuthenticator_label android:label}</code></td><td> The user-visible name of the authenticator.</td></tr>
           <tr><td><code>{@link #AccountAuthenticator_smallIcon android:smallIcon}</code></td><td> Smaller icon of the authenticator.</td></tr>
           </table>
           @see #AccountAuthenticator_accountPreferences
           @see #AccountAuthenticator_accountType
           @see #AccountAuthenticator_customTokens
           @see #AccountAuthenticator_icon
           @see #AccountAuthenticator_label
           @see #AccountAuthenticator_smallIcon
         */
        public: static const int AccountAuthenticator[6];
        /**
          <p>
          @attr description
           A preferences.xml file for authenticator-specific settings. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#accountPreferences}.
          @attr name android:accountPreferences
        */
        public: static const int AccountAuthenticator_accountPreferences = 4;
        /**
          <p>
          @attr description
           The account type this authenticator handles. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#accountType}.
          @attr name android:accountType
        */
        public: static const int AccountAuthenticator_accountType = 2;
        /**
          <p>
          @attr description
           Account handles its own token storage and permissions.
             Default to false
          


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#customTokens}.
          @attr name android:customTokens
        */
        public: static const int AccountAuthenticator_customTokens = 5;
        /**
          <p>
          @attr description
           The icon of the authenticator. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AccountAuthenticator_icon = 1;
        /**
          <p>
          @attr description
           The user-visible name of the authenticator. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AccountAuthenticator_label = 0;
        /**
          <p>
          @attr description
           Smaller icon of the authenticator. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#smallIcon}.
          @attr name android:smallIcon
        */
        public: static const int AccountAuthenticator_smallIcon = 3;
        /**  Attributes used to style the Action Bar. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActionBar_background android:background}</code></td><td> Specifies a background drawable for the action bar.</td></tr>
           <tr><td><code>{@link #ActionBar_backgroundSplit android:backgroundSplit}</code></td><td> Specifies a background drawable for the bottom component of a split action bar.</td></tr>
           <tr><td><code>{@link #ActionBar_backgroundStacked android:backgroundStacked}</code></td><td> Specifies a background drawable for a second stacked row of the action bar.</td></tr>
           <tr><td><code>{@link #ActionBar_contentInsetEnd android:contentInsetEnd}</code></td><td> Minimum inset for content views within a bar.</td></tr>
           <tr><td><code>{@link #ActionBar_contentInsetLeft android:contentInsetLeft}</code></td><td> Minimum inset for content views within a bar.</td></tr>
           <tr><td><code>{@link #ActionBar_contentInsetRight android:contentInsetRight}</code></td><td> Minimum inset for content views within a bar.</td></tr>
           <tr><td><code>{@link #ActionBar_contentInsetStart android:contentInsetStart}</code></td><td> Minimum inset for content views within a bar.</td></tr>
           <tr><td><code>{@link #ActionBar_customNavigationLayout android:customNavigationLayout}</code></td><td> Specifies a layout for custom navigation.</td></tr>
           <tr><td><code>{@link #ActionBar_displayOptions android:displayOptions}</code></td><td> Options affecting how the action bar is displayed.</td></tr>
           <tr><td><code>{@link #ActionBar_divider android:divider}</code></td><td> Specifies the drawable used for item dividers.</td></tr>
           <tr><td><code>{@link #ActionBar_elevation android:elevation}</code></td><td> Elevation for the action bar itself </td></tr>
           <tr><td><code>{@link #ActionBar_height android:height}</code></td><td> Specifies a fixed height.</td></tr>
           <tr><td><code>{@link #ActionBar_hideOnContentScroll android:hideOnContentScroll}</code></td><td> Set true to hide the action bar on a vertical nested scroll of content.</td></tr>
           <tr><td><code>{@link #ActionBar_homeAsUpIndicator android:homeAsUpIndicator}</code></td><td> Up navigation glyph </td></tr>
           <tr><td><code>{@link #ActionBar_homeLayout android:homeLayout}</code></td><td> Specifies a layout to use for the "home" section of the action bar.</td></tr>
           <tr><td><code>{@link #ActionBar_icon android:icon}</code></td><td> Specifies the drawable used for the application icon.</td></tr>
           <tr><td><code>{@link #ActionBar_indeterminateProgressStyle android:indeterminateProgressStyle}</code></td><td> Specifies a style resource to use for an indeterminate progress spinner.</td></tr>
           <tr><td><code>{@link #ActionBar_itemPadding android:itemPadding}</code></td><td> Specifies padding that should be applied to the left and right sides of
             system-provided items in the bar.</td></tr>
           <tr><td><code>{@link #ActionBar_logo android:logo}</code></td><td> Specifies the drawable used for the application logo.</td></tr>
           <tr><td><code>{@link #ActionBar_navigationMode android:navigationMode}</code></td><td> The type of navigation to use.</td></tr>
           <tr><td><code>{@link #ActionBar_popupTheme android:popupTheme}</code></td><td> Reference to a theme that should be used to inflate popups
             shown by widgets in the action bar.</td></tr>
           <tr><td><code>{@link #ActionBar_progressBarPadding android:progressBarPadding}</code></td><td> Specifies the horizontal padding on either end for an embedded progress bar.</td></tr>
           <tr><td><code>{@link #ActionBar_progressBarStyle android:progressBarStyle}</code></td><td> Specifies a style resource to use for an embedded progress bar.</td></tr>
           <tr><td><code>{@link #ActionBar_subtitle android:subtitle}</code></td><td> Specifies subtitle text used for navigationMode="normal" </td></tr>
           <tr><td><code>{@link #ActionBar_subtitleTextStyle android:subtitleTextStyle}</code></td><td> Specifies a style to use for subtitle text.</td></tr>
           <tr><td><code>{@link #ActionBar_title android:title}</code></td><td> Specifies title text used for navigationMode="normal" </td></tr>
           <tr><td><code>{@link #ActionBar_titleTextStyle android:titleTextStyle}</code></td><td> Specifies a style to use for title text.</td></tr>
           </table>
           @see #ActionBar_background
           @see #ActionBar_backgroundSplit
           @see #ActionBar_backgroundStacked
           @see #ActionBar_contentInsetEnd
           @see #ActionBar_contentInsetLeft
           @see #ActionBar_contentInsetRight
           @see #ActionBar_contentInsetStart
           @see #ActionBar_customNavigationLayout
           @see #ActionBar_displayOptions
           @see #ActionBar_divider
           @see #ActionBar_elevation
           @see #ActionBar_height
           @see #ActionBar_hideOnContentScroll
           @see #ActionBar_homeAsUpIndicator
           @see #ActionBar_homeLayout
           @see #ActionBar_icon
           @see #ActionBar_indeterminateProgressStyle
           @see #ActionBar_itemPadding
           @see #ActionBar_logo
           @see #ActionBar_navigationMode
           @see #ActionBar_popupTheme
           @see #ActionBar_progressBarPadding
           @see #ActionBar_progressBarStyle
           @see #ActionBar_subtitle
           @see #ActionBar_subtitleTextStyle
           @see #ActionBar_title
           @see #ActionBar_titleTextStyle
         */
        public: static const int ActionBar[27];
        /**
          <p>
          @attr description
           Specifies a background drawable for the action bar. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#background}.
          @attr name android:background
        */
        public: static const int ActionBar_background = 2;
        /**
          <p>
          @attr description
           Specifies a background drawable for the bottom component of a split action bar. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundSplit}.
          @attr name android:backgroundSplit
        */
        public: static const int ActionBar_backgroundSplit = 19;
        /**
          <p>
          @attr description
           Specifies a background drawable for a second stacked row of the action bar. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundStacked}.
          @attr name android:backgroundStacked
        */
        public: static const int ActionBar_backgroundStacked = 18;
        /**
          <p>
          @attr description
           Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentInsetEnd}.
          @attr name android:contentInsetEnd
        */
        public: static const int ActionBar_contentInsetEnd = 23;
        /**
          <p>
          @attr description
           Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentInsetLeft}.
          @attr name android:contentInsetLeft
        */
        public: static const int ActionBar_contentInsetLeft = 24;
        /**
          <p>
          @attr description
           Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentInsetRight}.
          @attr name android:contentInsetRight
        */
        public: static const int ActionBar_contentInsetRight = 25;
        /**
          <p>
          @attr description
           Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentInsetStart}.
          @attr name android:contentInsetStart
        */
        public: static const int ActionBar_contentInsetStart = 22;
        /**
          <p>
          @attr description
           Specifies a layout for custom navigation. Overrides navigationMode. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#customNavigationLayout}.
          @attr name android:customNavigationLayout
        */
        public: static const int ActionBar_customNavigationLayout = 10;
        /**
          <p>
          @attr description
           Options affecting how the action bar is displayed. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>useLogo</code></td><td>0x1</td><td></td></tr>
<tr><td><code>showHome</code></td><td>0x2</td><td></td></tr>
<tr><td><code>homeAsUp</code></td><td>0x4</td><td></td></tr>
<tr><td><code>showTitle</code></td><td>0x8</td><td></td></tr>
<tr><td><code>showCustom</code></td><td>0x10</td><td></td></tr>
<tr><td><code>disableHome</code></td><td>0x20</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#displayOptions}.
          @attr name android:displayOptions
        */
        public: static const int ActionBar_displayOptions = 8;
        /**
          <p>
          @attr description
           Specifies the drawable used for item dividers. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#divider}.
          @attr name android:divider
        */
        public: static const int ActionBar_divider = 3;
        /**
          <p>
          @attr description
           Elevation for the action bar itself 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#elevation}.
          @attr name android:elevation
        */
        public: static const int ActionBar_elevation = 20;
        /**
          <p>
          @attr description
           Specifies a fixed height. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#height}.
          @attr name android:height
        */
        public: static const int ActionBar_height = 4;
        /**
          <p>
          @attr description
           Set true to hide the action bar on a vertical nested scroll of content. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#hideOnContentScroll}.
          @attr name android:hideOnContentScroll
        */
        public: static const int ActionBar_hideOnContentScroll = 21;
        /**
          <p>
          @attr description
           Up navigation glyph 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#homeAsUpIndicator}.
          @attr name android:homeAsUpIndicator
        */
        public: static const int ActionBar_homeAsUpIndicator = 13;
        /**
          <p>
          @attr description
           Specifies a layout to use for the "home" section of the action bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#homeLayout}.
          @attr name android:homeLayout
        */
        public: static const int ActionBar_homeLayout = 16;
        /**
          <p>
          @attr description
           Specifies the drawable used for the application icon. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int ActionBar_icon = 0;
        /**
          <p>
          @attr description
           Specifies a style resource to use for an indeterminate progress spinner. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indeterminateProgressStyle}.
          @attr name android:indeterminateProgressStyle
        */
        public: static const int ActionBar_indeterminateProgressStyle = 14;
        /**
          <p>
          @attr description
           Specifies padding that should be applied to the left and right sides of
             system-provided items in the bar. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#itemPadding}.
          @attr name android:itemPadding
        */
        public: static const int ActionBar_itemPadding = 17;
        /**
          <p>
          @attr description
           Specifies the drawable used for the application logo. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int ActionBar_logo = 6;
        /**
          <p>
          @attr description
           The type of navigation to use. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> Normal static title text </td></tr>
<tr><td><code>listMode</code></td><td>1</td><td> The action bar will use a selection list for navigation. </td></tr>
<tr><td><code>tabMode</code></td><td>2</td><td> The action bar will use a series of horizontal tabs for navigation. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#navigationMode}.
          @attr name android:navigationMode
        */
        public: static const int ActionBar_navigationMode = 7;
        /**
          <p>
          @attr description
           Reference to a theme that should be used to inflate popups
             shown by widgets in the action bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupTheme}.
          @attr name android:popupTheme
        */
        public: static const int ActionBar_popupTheme = 26;
        /**
          <p>
          @attr description
           Specifies the horizontal padding on either end for an embedded progress bar. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBarPadding}.
          @attr name android:progressBarPadding
        */
        public: static const int ActionBar_progressBarPadding = 15;
        /**
          <p>
          @attr description
           Specifies a style resource to use for an embedded progress bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBarStyle}.
          @attr name android:progressBarStyle
        */
        public: static const int ActionBar_progressBarStyle = 1;
        /**
          <p>
          @attr description
           Specifies subtitle text used for navigationMode="normal" 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#subtitle}.
          @attr name android:subtitle
        */
        public: static const int ActionBar_subtitle = 9;
        /**
          <p>
          @attr description
           Specifies a style to use for subtitle text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#subtitleTextStyle}.
          @attr name android:subtitleTextStyle
        */
        public: static const int ActionBar_subtitleTextStyle = 12;
        /**
          <p>
          @attr description
           Specifies title text used for navigationMode="normal" 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public: static const int ActionBar_title = 5;
        /**
          <p>
          @attr description
           Specifies a style to use for title text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#titleTextStyle}.
          @attr name android:titleTextStyle
        */
        public: static const int ActionBar_titleTextStyle = 11;
        /** Attributes that can be used with a ActionBar_LayoutParams.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActionBar_LayoutParams_layout_gravity android:layout_gravity}</code></td><td> Standard gravity constant that a child supplies to its parent.</td></tr>
           </table>
           @see #ActionBar_LayoutParams_layout_gravity
         */
        public: static const int ActionBar_LayoutParams[1];
        /**
          <p>
          @attr description
           Standard gravity constant that a child supplies to its parent.
         Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_gravity}.
          @attr name android:layout_gravity
        */
        public: static const int ActionBar_LayoutParams_layout_gravity = 0;
        /** Attributes that can be used with a ActionMenuItemView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActionMenuItemView_minWidth android:minWidth}</code></td><td></td></tr>
           </table>
           @see #ActionMenuItemView_minWidth
         */
        public: static const int ActionMenuItemView[1];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#minWidth}
          attribute's value can be found in the {@link #ActionMenuItemView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:minWidth
        */
        public: static const int ActionMenuItemView_minWidth = 0;
        /** Attributes that can be used with a ActionMode.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActionMode_background android:background}</code></td><td> Specifies a background for the action mode bar.</td></tr>
           <tr><td><code>{@link #ActionMode_backgroundSplit android:backgroundSplit}</code></td><td> Specifies a background for the split action mode bar.</td></tr>
           <tr><td><code>{@link #ActionMode_closeItemLayout android:closeItemLayout}</code></td><td> Specifies a layout to use for the "close" item at the starting edge.</td></tr>
           <tr><td><code>{@link #ActionMode_height android:height}</code></td><td> Specifies a fixed height for the action mode bar.</td></tr>
           <tr><td><code>{@link #ActionMode_subtitleTextStyle android:subtitleTextStyle}</code></td><td> Specifies a style to use for subtitle text.</td></tr>
           <tr><td><code>{@link #ActionMode_titleTextStyle android:titleTextStyle}</code></td><td> Specifies a style to use for title text.</td></tr>
           </table>
           @see #ActionMode_background
           @see #ActionMode_backgroundSplit
           @see #ActionMode_closeItemLayout
           @see #ActionMode_height
           @see #ActionMode_subtitleTextStyle
           @see #ActionMode_titleTextStyle
         */
        public: static const int ActionMode[6];
        /**
          <p>
          @attr description
           Specifies a background for the action mode bar. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#background}.
          @attr name android:background
        */
        public: static const int ActionMode_background = 0;
        /**
          <p>
          @attr description
           Specifies a background for the split action mode bar. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundSplit}.
          @attr name android:backgroundSplit
        */
        public: static const int ActionMode_backgroundSplit = 4;
        /**
          <p>
          @attr description
           Specifies a layout to use for the "close" item at the starting edge. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:closeItemLayout
        */
        public: static const int ActionMode_closeItemLayout = 5;
        /**
          <p>
          @attr description
           Specifies a fixed height for the action mode bar. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#height}.
          @attr name android:height
        */
        public: static const int ActionMode_height = 1;
        /**
          <p>
          @attr description
           Specifies a style to use for subtitle text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#subtitleTextStyle}.
          @attr name android:subtitleTextStyle
        */
        public: static const int ActionMode_subtitleTextStyle = 3;
        /**
          <p>
          @attr description
           Specifies a style to use for title text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#titleTextStyle}.
          @attr name android:titleTextStyle
        */
        public: static const int ActionMode_titleTextStyle = 2;
        /**  Attrbitutes for a ActvityChooserView. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ActivityChooserView_expandActivityOverflowButtonDrawable android:expandActivityOverflowButtonDrawable}</code></td><td> The drawable to show in the button for expanding the activities overflow popup.</td></tr>
           <tr><td><code>{@link #ActivityChooserView_initialActivityCount android:initialActivityCount}</code></td><td> The maximal number of items initially shown in the activity list.</td></tr>
           </table>
           @see #ActivityChooserView_expandActivityOverflowButtonDrawable
           @see #ActivityChooserView_initialActivityCount
         */
        public: static const int ActivityChooserView[2];
        /**
          <p>
          @attr description
           The drawable to show in the button for expanding the activities overflow popup.
             <strong>Note:</strong> Clients would like to set this drawable
             as a clue about the action the chosen activity will perform. For
             example, if share activity is to be chosen the drawable should
             give a clue that sharing is to be performed.
         


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:expandActivityOverflowButtonDrawable
        */
        public: static const int ActivityChooserView_expandActivityOverflowButtonDrawable = 1;
        /**
          <p>
          @attr description
           The maximal number of items initially shown in the activity list. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:initialActivityCount
        */
        public: static const int ActivityChooserView_initialActivityCount = 0;
        /** Attributes that can be used with a AdapterViewAnimator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AdapterViewAnimator_animateFirstView android:animateFirstView}</code></td><td> Defines whether to animate the current View when the ViewAnimation
        is first displayed.</td></tr>
           <tr><td><code>{@link #AdapterViewAnimator_inAnimation android:inAnimation}</code></td><td> Identifier for the animation to use when a view is shown.</td></tr>
           <tr><td><code>{@link #AdapterViewAnimator_loopViews android:loopViews}</code></td><td>Defines whether the animator loops to the first view once it
        has reached the end of the list.</td></tr>
           <tr><td><code>{@link #AdapterViewAnimator_outAnimation android:outAnimation}</code></td><td> Identifier for the animation to use when a view is hidden.</td></tr>
           </table>
           @see #AdapterViewAnimator_animateFirstView
           @see #AdapterViewAnimator_inAnimation
           @see #AdapterViewAnimator_loopViews
           @see #AdapterViewAnimator_outAnimation
         */
        public: static const int AdapterViewAnimator[4];
        /**
          <p>
          @attr description
           Defines whether to animate the current View when the ViewAnimation
        is first displayed. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animateFirstView}.
          @attr name android:animateFirstView
        */
        public: static const int AdapterViewAnimator_animateFirstView = 2;
        /**
          <p>
          @attr description
           Identifier for the animation to use when a view is shown. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#inAnimation}.
          @attr name android:inAnimation
        */
        public: static const int AdapterViewAnimator_inAnimation = 0;
        /**
          <p>
          @attr description
          Defines whether the animator loops to the first view once it
        has reached the end of the list. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#loopViews}.
          @attr name android:loopViews
        */
        public: static const int AdapterViewAnimator_loopViews = 3;
        /**
          <p>
          @attr description
           Identifier for the animation to use when a view is hidden. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#outAnimation}.
          @attr name android:outAnimation
        */
        public: static const int AdapterViewAnimator_outAnimation = 1;
        /** Attributes that can be used with a AdapterViewFlipper.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AdapterViewFlipper_autoStart android:autoStart}</code></td><td> When true, automatically start animating </td></tr>
           <tr><td><code>{@link #AdapterViewFlipper_flipInterval android:flipInterval}</code></td><td></td></tr>
           </table>
           @see #AdapterViewFlipper_autoStart
           @see #AdapterViewFlipper_flipInterval
         */
        public: static const int AdapterViewFlipper[2];
        /**
          <p>
          @attr description
           When true, automatically start animating 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoStart}.
          @attr name android:autoStart
        */
        public: static const int AdapterViewFlipper_autoStart = 1;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#flipInterval}
          attribute's value can be found in the {@link #AdapterViewFlipper} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:flipInterval
        */
        public: static const int AdapterViewFlipper_flipInterval = 0;
        /**  Specify one or more <code>aid-filter</code> elements inside a
         <code>aid-group</code> element to specify an ISO7816 Application ID (AID)
         your service can handle. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AidFilter_name android:name}</code></td><td> The ISO7816 Application ID.</td></tr>
           </table>
           @see #AidFilter_name
         */
        public: static const int AidFilter[1];
        /**
          <p>
          @attr description
           The ISO7816 Application ID. This attribute is mandatory. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AidFilter_name = 0;
        /**  Specify one or more <code>aid-group</code> elements inside a
         <code>host-apdu-service</code> or <code>offhost-apdu-service</code>
         element to define a group of ISO7816 Application ID (AIDs) that
         your service can handle.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AidGroup_category android:category}</code></td><td> The category attribute will be used by the Android platform to present
             multiple applications that register ISO 7816 Application IDs (AIDs) in the
             same category uniformly.</td></tr>
           <tr><td><code>{@link #AidGroup_description android:description}</code></td><td> Short description of what the AID group implements.</td></tr>
           </table>
           @see #AidGroup_category
           @see #AidGroup_description
         */
        public: static const int AidGroup[2];
        /**
          <p>
          @attr description
           The category attribute will be used by the Android platform to present
             multiple applications that register ISO 7816 Application IDs (AIDs) in the
             same category uniformly.
             Additionally, when a category is specified, Android will ensure that either
             all AIDs in this group are routed to this application, or none at all.
             This attribute is optional.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#category}.
          @attr name android:category
        */
        public: static const int AidGroup_category = 1;
        /**
          <p>
          @attr description
           Short description of what the AID group implements. This attribute is mandatory.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int AidGroup_description = 0;
        /**  Specify one or more <code>aid-prefix-filter</code> elements inside a
         <code>aid-group</code> element to specify an ISO7816 Application ID (AID)
         prefix your service can handle. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AidPrefixFilter_name android:name}</code></td><td> The ISO7816 Application ID.</td></tr>
           </table>
           @see #AidPrefixFilter_name
         */
        public: static const int AidPrefixFilter[1];
        /**
          <p>
          @attr description
           The ISO7816 Application ID. This attribute is mandatory. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AidPrefixFilter_name = 0;
        /**  The set of attributes that describe a AlertDialog's theme. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AlertDialog_bottomBright android:bottomBright}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_bottomDark android:bottomDark}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_bottomMedium android:bottomMedium}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_buttonPanelSideLayout android:buttonPanelSideLayout}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_centerBright android:centerBright}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_centerDark android:centerDark}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_centerMedium android:centerMedium}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_fullBright android:fullBright}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_fullDark android:fullDark}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_horizontalProgressLayout android:horizontalProgressLayout}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_layout android:layout}</code></td><td> Supply an identifier for the layout resource to inflate when the ViewStub
             becomes visible or when forced to do so.</td></tr>
           <tr><td><code>{@link #AlertDialog_listItemLayout android:listItemLayout}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_listLayout android:listLayout}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_multiChoiceItemLayout android:multiChoiceItemLayout}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_needsDefaultBackgrounds android:needsDefaultBackgrounds}</code></td><td> @hide Whether fullDark, etc.</td></tr>
           <tr><td><code>{@link #AlertDialog_progressLayout android:progressLayout}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_singleChoiceItemLayout android:singleChoiceItemLayout}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_topBright android:topBright}</code></td><td></td></tr>
           <tr><td><code>{@link #AlertDialog_topDark android:topDark}</code></td><td></td></tr>
           </table>
           @see #AlertDialog_bottomBright
           @see #AlertDialog_bottomDark
           @see #AlertDialog_bottomMedium
           @see #AlertDialog_buttonPanelSideLayout
           @see #AlertDialog_centerBright
           @see #AlertDialog_centerDark
           @see #AlertDialog_centerMedium
           @see #AlertDialog_fullBright
           @see #AlertDialog_fullDark
           @see #AlertDialog_horizontalProgressLayout
           @see #AlertDialog_layout
           @see #AlertDialog_listItemLayout
           @see #AlertDialog_listLayout
           @see #AlertDialog_multiChoiceItemLayout
           @see #AlertDialog_needsDefaultBackgrounds
           @see #AlertDialog_progressLayout
           @see #AlertDialog_singleChoiceItemLayout
           @see #AlertDialog_topBright
           @see #AlertDialog_topDark
         */
        public: static const int AlertDialog[19];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#bottomBright}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:bottomBright
        */
        public: static const int AlertDialog_bottomBright = 7;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#bottomDark}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:bottomDark
        */
        public: static const int AlertDialog_bottomDark = 3;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#bottomMedium}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:bottomMedium
        */
        public: static const int AlertDialog_bottomMedium = 8;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#buttonPanelSideLayout}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:buttonPanelSideLayout
        */
        public: static const int AlertDialog_buttonPanelSideLayout = 11;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#centerBright}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:centerBright
        */
        public: static const int AlertDialog_centerBright = 6;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#centerDark}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:centerDark
        */
        public: static const int AlertDialog_centerDark = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#centerMedium}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:centerMedium
        */
        public: static const int AlertDialog_centerMedium = 9;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fullBright}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:fullBright
        */
        public: static const int AlertDialog_fullBright = 4;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fullDark}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:fullDark
        */
        public: static const int AlertDialog_fullDark = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#horizontalProgressLayout}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:horizontalProgressLayout
        */
        public: static const int AlertDialog_horizontalProgressLayout = 17;
        /**
          <p>
          @attr description
           Supply an identifier for the layout resource to inflate when the ViewStub
             becomes visible or when forced to do so. The layout resource must be a
             valid reference to a layout. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout}.
          @attr name android:layout
        */
        public: static const int AlertDialog_layout = 10;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#listItemLayout}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:listItemLayout
        */
        public: static const int AlertDialog_listItemLayout = 15;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#listLayout}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:listLayout
        */
        public: static const int AlertDialog_listLayout = 12;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#multiChoiceItemLayout}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:multiChoiceItemLayout
        */
        public: static const int AlertDialog_multiChoiceItemLayout = 13;
        /**
          <p>
          @attr description
           @hide Whether fullDark, etc. should use default values if null. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:needsDefaultBackgrounds
        */
        public: static const int AlertDialog_needsDefaultBackgrounds = 18;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#progressLayout}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:progressLayout
        */
        public: static const int AlertDialog_progressLayout = 16;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#singleChoiceItemLayout}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:singleChoiceItemLayout
        */
        public: static const int AlertDialog_singleChoiceItemLayout = 14;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#topBright}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:topBright
        */
        public: static const int AlertDialog_topBright = 5;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#topDark}
          attribute's value can be found in the {@link #AlertDialog} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:topDark
        */
        public: static const int AlertDialog_topDark = 1;
        /** Attributes that can be used with a AlphaAnimation.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AlphaAnimation_fromAlpha android:fromAlpha}</code></td><td></td></tr>
           <tr><td><code>{@link #AlphaAnimation_toAlpha android:toAlpha}</code></td><td></td></tr>
           </table>
           @see #AlphaAnimation_fromAlpha
           @see #AlphaAnimation_toAlpha
         */
        public: static const int AlphaAnimation[2];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fromAlpha}
          attribute's value can be found in the {@link #AlphaAnimation} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:fromAlpha
        */
        public: static const int AlphaAnimation_fromAlpha = 0;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#toAlpha}
          attribute's value can be found in the {@link #AlphaAnimation} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:toAlpha
        */
        public: static const int AlphaAnimation_toAlpha = 1;
        /** Attributes that can be used with a AnalogClock.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnalogClock_dial android:dial}</code></td><td></td></tr>
           <tr><td><code>{@link #AnalogClock_hand_hour android:hand_hour}</code></td><td></td></tr>
           <tr><td><code>{@link #AnalogClock_hand_minute android:hand_minute}</code></td><td></td></tr>
           </table>
           @see #AnalogClock_dial
           @see #AnalogClock_hand_hour
           @see #AnalogClock_hand_minute
         */
        public: static const int AnalogClock[3];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#dial}
          attribute's value can be found in the {@link #AnalogClock} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:dial
        */
        public: static const int AnalogClock_dial = 0;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#hand_hour}
          attribute's value can be found in the {@link #AnalogClock} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:hand_hour
        */
        public: static const int AnalogClock_hand_hour = 1;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#hand_minute}
          attribute's value can be found in the {@link #AnalogClock} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:hand_minute
        */
        public: static const int AnalogClock_hand_minute = 2;
        /**  The <code>manifest</code> tag is the root of an
         <code>AndroidManifest.xml</code> file,
         describing the contents of an Android package (.apk) file.  One
         attribute must always be supplied: <code>package</code> gives a
         unique name for the package, using a Java-style naming convention
         to avoid name collisions.  For example, applications published
         by Google could have names of the form
         <code>com.google.app.<em>appname</em></code>
         
         <p>Inside of the manifest tag, may appear the following tags
         in any order: {@link #AndroidManifestPermission permission},
         {@link #AndroidManifestPermissionGroup permission-group},
         {@link #AndroidManifestPermissionTree permission-tree},
         {@link #AndroidManifestUsesSdk uses-sdk},
         {@link #AndroidManifestUsesPermission uses-permission},
         {@link #AndroidManifestUsesConfiguration uses-configuration},
         {@link #AndroidManifestApplication application},
         {@link #AndroidManifestInstrumentation instrumentation},
         {@link #AndroidManifestUsesFeature uses-feature}.  
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifest_installLocation android:installLocation}</code></td><td> The default install location defined by an application.</td></tr>
           <tr><td><code>{@link #AndroidManifest_sharedUserId android:sharedUserId}</code></td><td> Specify the name of a user ID that will be shared between multiple
         packages.</td></tr>
           <tr><td><code>{@link #AndroidManifest_sharedUserLabel android:sharedUserLabel}</code></td><td> Specify a label for the shared user UID of this package.</td></tr>
           <tr><td><code>{@link #AndroidManifest_versionCode android:versionCode}</code></td><td> Internal version code.</td></tr>
           <tr><td><code>{@link #AndroidManifest_versionName android:versionName}</code></td><td> The text shown to the user to indicate the version they have.</td></tr>
           </table>
           @see #AndroidManifest_installLocation
           @see #AndroidManifest_sharedUserId
           @see #AndroidManifest_sharedUserLabel
           @see #AndroidManifest_versionCode
           @see #AndroidManifest_versionName
         */
        public: static const int AndroidManifest[5];
        /**
          <p>
          @attr description
           The default install location defined by an application. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto</code></td><td>0</td><td> Let the system decide ideal install location </td></tr>
<tr><td><code>internalOnly</code></td><td>1</td><td> Explicitly request to be installed on internal phone storage
             only. </td></tr>
<tr><td><code>preferExternal</code></td><td>2</td><td> Prefer to be installed on SD card. There is no guarantee that
             the system will honor this request. The application might end
             up being installed on internal storage if external media
             is unavailable or too full. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#installLocation}.
          @attr name android:installLocation
        */
        public: static const int AndroidManifest_installLocation = 4;
        /**
          <p>
          @attr description
           Specify the name of a user ID that will be shared between multiple
         packages.  By default, each package gets its own unique user-id.
         By setting this value on two or more packages, each of these packages
         will be given a single shared user ID, so they can for example run
         in the same process.  Note that for them to actually get the same
         user ID, they must also be signed with the same signature. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#sharedUserId}.
          @attr name android:sharedUserId
        */
        public: static const int AndroidManifest_sharedUserId = 0;
        /**
          <p>
          @attr description
           Specify a label for the shared user UID of this package.  This is
         only used if you have also used android:sharedUserId.  This must
         be a reference to a string resource; it can not be an explicit
         string. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#sharedUserLabel}.
          @attr name android:sharedUserLabel
        */
        public: static const int AndroidManifest_sharedUserLabel = 3;
        /**
          <p>
          @attr description
           Internal version code.  This is the number used to determine whether
         one version is more recent than another: it has no other meaning than
         that higher numbers are more recent.  You could use this number to
         encode a "x.y" in the lower and upper 16 bits, make it a build
         number, simply increase it by one each time a new version is
         released, or define it however else you want, as long as each
         successive version has a higher number.  This is not a version
         number generally shown to the user, that is usually supplied 
         with {@link android.R.attr#versionName}. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#versionCode}.
          @attr name android:versionCode
        */
        public: static const int AndroidManifest_versionCode = 1;
        /**
          <p>
          @attr description
           The text shown to the user to indicate the version they have.  This
         is used for no other purpose than display to the user; the actual
         significant version number is given by {@link android.R.attr#versionCode}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#versionName}.
          @attr name android:versionName
        */
        public: static const int AndroidManifest_versionName = 2;
        /**  Attributes that can be supplied in an AndroidManifest.xml
         <code>action</code> tag, a child of the
         {@link #AndroidManifestIntentFilter intent-filter} tag.
         See {@link android.content.IntentFilter#addAction} for
         more information. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestAction_name android:name}</code></td><td> The name of an action that is handled, using the Java-style
             naming convention.</td></tr>
           </table>
           @see #AndroidManifestAction_name
         */
        public: static const int AndroidManifestAction[1];
        /**
          <p>
          @attr description
           The name of an action that is handled, using the Java-style
             naming convention.  For example, to support
             {@link android.content.Intent#ACTION_VIEW Intent.ACTION_VIEW}
             you would put <code>android.intent.action.VIEW</code> here.
             Custom actions should generally use a prefix matching the
             package name. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestAction_name = 0;
        /**  The <code>activity</code> tag declares an
         {@link android.app.Activity} class that is available
         as part of the package's application components, implementing
         a part of the application's user interface.
         
         <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
         tags can be included inside of an activity, to specify the Intents
         that it can handle.  If none are specified, the activity can
         only be started through direct specification of its class name.
         The activity tag appears as a child tag of the
         {@link #AndroidManifestApplication application} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestActivity_allowEmbedded android:allowEmbedded}</code></td><td> Indicate that the activity can be launched as the embedded child of another
         activity.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_allowTaskReparenting android:allowTaskReparenting}</code></td><td> Specify that an activity can be moved out of a task it is in to
         the task it has an affinity for when appropriate.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_alwaysRetainTaskState android:alwaysRetainTaskState}</code></td><td> Specify whether an acitivty's task state should always be maintained
         by the system, or if it is allowed to reset the task to its initial
         state in certain situations.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_autoRemoveFromRecents android:autoRemoveFromRecents}</code></td><td> Tasks launched by activities with this attribute will remain in the recent tasks
         list until the last activity in the task is completed.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_clearTaskOnLaunch android:clearTaskOnLaunch}</code></td><td> Specify whether an activity's task should be cleared when it
         is re-launched from the home screen.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_configChanges android:configChanges}</code></td><td> Specify one or more configuration changes that the activity will
         handle itself.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_description android:description}</code></td><td> Descriptive text for the associated data.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_documentLaunchMode android:documentLaunchMode}</code></td><td> This attribute specifies that an activity shall become the root activity of a
         new task each time it is launched.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_enabled android:enabled}</code></td><td> Specify whether the activity is enabled or not (that is, can be instantiated by the system).</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_excludeFromRecents android:excludeFromRecents}</code></td><td> Indicates that an Activity should be excluded from the list of
         recently launched activities.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_exported android:exported}</code></td><td> Flag indicating whether the given application component is available
         to other applications.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_finishOnCloseSystemDialogs android:finishOnCloseSystemDialogs}</code></td><td> Specify whether an activity should be finished when a "close system
         windows" request has been made.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_finishOnTaskLaunch android:finishOnTaskLaunch}</code></td><td> Specify whether an activity should be finished when its task is
         brought to the foreground by relaunching from the home screen.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_hardwareAccelerated android:hardwareAccelerated}</code></td><td> <p>Flag indicating whether the application's rendering should be hardware
         accelerated if possible.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_immersive android:immersive}</code></td><td> Flag declaring this activity to be 'immersive'; immersive activities
         should not be interrupted with other activities or notifications.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_launchMode android:launchMode}</code></td><td> Specify how an activity should be launched.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_maxRecents android:maxRecents}</code></td><td> The maximum number of entries of tasks rooted at this activity in the recent task list.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_multiprocess android:multiprocess}</code></td><td> Specify whether a component is allowed to have multiple instances
         of itself running in different processes.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_name android:name}</code></td><td> Required name of the class implementing the activity, deriving from
            {@link android.app.Activity}.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_noHistory android:noHistory}</code></td><td> Specify whether an activity should be kept in its history stack.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_parentActivityName android:parentActivityName}</code></td><td> The name of the logical parent of the activity as it appears in the manifest.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_permission android:permission}</code></td><td> Specify a permission that a client is required to have in order to
    	 use the associated object.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_persistableMode android:persistableMode}</code></td><td> Define how an activity persist across reboots.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_primaryUserOnly android:primaryUserOnly}</code></td><td> @hide This broacast receiver will only receive broadcasts for the
             primary user.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_process android:process}</code></td><td> Specify a specific process that the associated code is to run in.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_relinquishTaskIdentity android:relinquishTaskIdentity}</code></td><td> Tasks whose root has this attribute set to true will replace baseIntent with that of the
         next activity in the task.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_resumeWhilePausing android:resumeWhilePausing}</code></td><td> Indicate that it is okay for this activity be resumed while the previous
         activity is in the process of pausing, without waiting for the previous pause
         to complete.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_screenOrientation android:screenOrientation}</code></td><td> Specify the orientation an activity should be run in.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_showOnLockScreen android:showOnLockScreen}</code></td><td> Specify that an Activity should be shown over the lock screen and,
         in a multiuser environment, across all users' windows </td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_singleUser android:singleUser}</code></td><td> If set to true, a single instance of this component will run for
         all users.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_stateNotNeeded android:stateNotNeeded}</code></td><td> Indicates that an Activity does not need to have its freeze state
         (as returned by {@link android.app.Activity#onSaveInstanceState}
         retained in order to be restarted.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_taskAffinity android:taskAffinity}</code></td><td> Specify a task name that activities have an "affinity" to.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_theme android:theme}</code></td><td> The overall theme to use for an activity.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_uiOptions android:uiOptions}</code></td><td> Extra options for an activity's UI.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivity_windowSoftInputMode android:windowSoftInputMode}</code></td><td> Specify the default soft-input mode for the main window of
             this activity.</td></tr>
           </table>
           @see #AndroidManifestActivity_allowEmbedded
           @see #AndroidManifestActivity_allowTaskReparenting
           @see #AndroidManifestActivity_alwaysRetainTaskState
           @see #AndroidManifestActivity_autoRemoveFromRecents
           @see #AndroidManifestActivity_banner
           @see #AndroidManifestActivity_clearTaskOnLaunch
           @see #AndroidManifestActivity_configChanges
           @see #AndroidManifestActivity_description
           @see #AndroidManifestActivity_documentLaunchMode
           @see #AndroidManifestActivity_enabled
           @see #AndroidManifestActivity_excludeFromRecents
           @see #AndroidManifestActivity_exported
           @see #AndroidManifestActivity_finishOnCloseSystemDialogs
           @see #AndroidManifestActivity_finishOnTaskLaunch
           @see #AndroidManifestActivity_hardwareAccelerated
           @see #AndroidManifestActivity_icon
           @see #AndroidManifestActivity_immersive
           @see #AndroidManifestActivity_label
           @see #AndroidManifestActivity_launchMode
           @see #AndroidManifestActivity_logo
           @see #AndroidManifestActivity_maxRecents
           @see #AndroidManifestActivity_multiprocess
           @see #AndroidManifestActivity_name
           @see #AndroidManifestActivity_noHistory
           @see #AndroidManifestActivity_parentActivityName
           @see #AndroidManifestActivity_permission
           @see #AndroidManifestActivity_persistableMode
           @see #AndroidManifestActivity_primaryUserOnly
           @see #AndroidManifestActivity_process
           @see #AndroidManifestActivity_relinquishTaskIdentity
           @see #AndroidManifestActivity_resumeWhilePausing
           @see #AndroidManifestActivity_screenOrientation
           @see #AndroidManifestActivity_showOnLockScreen
           @see #AndroidManifestActivity_singleUser
           @see #AndroidManifestActivity_stateNotNeeded
           @see #AndroidManifestActivity_taskAffinity
           @see #AndroidManifestActivity_theme
           @see #AndroidManifestActivity_uiOptions
           @see #AndroidManifestActivity_windowSoftInputMode
         */
        public: static const int AndroidManifestActivity[39];
        /**
          <p>
          @attr description
           Indicate that the activity can be launched as the embedded child of another
         activity. Particularly in the case where the child lives in a container
         such as a Display owned by another activity.

         <p>The default value of this attribute is <code>false</code>. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#allowEmbedded}.
          @attr name android:allowEmbedded
        */
        public: static const int AndroidManifestActivity_allowEmbedded = 31;
        /**
          <p>
          @attr description
           Specify that an activity can be moved out of a task it is in to
         the task it has an affinity for when appropriate.  Use with the
         application tag (to supply a default for all activities in the
         application), or with an activity tag (to supply a specific
         setting for that component).
    
         <p>Normally when an application is started, it is associated with
         the task of the activity that started it and stays there for its
         entire lifetime.  You can use the allowTaskReparenting feature to force an
         activity to be re-parented to a different task when the task it is
         in goes to the background.  Typically this is used to cause the
         activities of an application to move back to the main task associated
         with that application.  The activity is re-parented to the task
         with the same {@link android.R.attr#taskAffinity} as it has. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#allowTaskReparenting}.
          @attr name android:allowTaskReparenting
        */
        public: static const int AndroidManifestActivity_allowTaskReparenting = 19;
        /**
          <p>
          @attr description
           Specify whether an acitivty's task state should always be maintained
         by the system, or if it is allowed to reset the task to its initial
         state in certain situations.
         
         <p>Normally the system will reset a task (remove all activities from
         the stack and reset the root activity) in certain situations when
         the user re-selects that task from the home screen.  Typically this
         will be done if the user hasn't visited that task for a certain
         amount of time, such as 30 minutes.
         
         <p>By setting this attribute, the user will always return to your
         task in its last state, regardless of how they get there.  This is
         useful, for example, in an application like the web browser where there
         is a lot of state (such as multiple open tabs) that the application
         would not like to lose. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#alwaysRetainTaskState}.
          @attr name android:alwaysRetainTaskState
        */
        public: static const int AndroidManifestActivity_alwaysRetainTaskState = 18;
        /**
          <p>
          @attr description
           Tasks launched by activities with this attribute will remain in the recent tasks
         list until the last activity in the task is completed.  When that happens the task
         will be automatically removed from the recent tasks list.  This overrides the caller's
         use of {@link android.content.Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS
         Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS} 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoRemoveFromRecents}.
          @attr name android:autoRemoveFromRecents
        */
        public: static const int AndroidManifestActivity_autoRemoveFromRecents = 35;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestActivity_banner = 30;
        /**
          <p>
          @attr description
           Specify whether an activity's task should be cleared when it
         is re-launched from the home screen.  As a result, every time the
         user starts the task, they will be brought to its root activity,
         regardless of whether they used BACK or HOME to last leave it.
         This flag only applies to activities that
         are used to start the root of a new task.
         
         <p>An example of the use of this flag would be for the case where
         a user launches activity A from home, and from there goes to
         activity B.  They now press home, and then return to activity A.
         Normally they would see activity B, since that is what they were
         last doing in A's task.  However, if A has set this flag to true,
         then upon going to the background all of the tasks on top of it (B
         in this case) are removed, so when the user next returns to A they
         will restart at its original activity.
         
         <p>When this option is used in conjunction with
         {@link android.R.attr#allowTaskReparenting}, the allowTaskReparenting trumps the
         clear.  That is, all activities above the root activity of the
         task will be removed: those that have an affinity will be moved
         to the task they are associated with, otherwise they will simply
         be dropped as described here. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#clearTaskOnLaunch}.
          @attr name android:clearTaskOnLaunch
        */
        public: static const int AndroidManifestActivity_clearTaskOnLaunch = 11;
        /**
          <p>
          @attr description
           Specify one or more configuration changes that the activity will
         handle itself.  If not specified, the activity will be restarted
         if any of these configuration changes happen in the system.  Otherwise,
         the activity will remain running and its
         {@link android.app.Activity#onConfigurationChanged Activity.onConfigurationChanged}
         method called with the new configuration.
         
         <p>Note that all of these configuration changes can impact the
         resource values seen by the application, so you will generally need
         to re-retrieve all resources (including view layouts, drawables, etc)
         to correctly handle any configuration change.
         
         <p>These values must be kept in sync with those in
         {@link android.content.pm.ActivityInfo} and
         include/utils/ResourceTypes.h. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>mcc</code></td><td>0x0001</td><td> The IMSI MCC has changed, that is a SIM has been detected and
             updated the Mobile Country Code. </td></tr>
<tr><td><code>mnc</code></td><td>0x0002</td><td> The IMSI MNC has changed, that is a SIM has been detected and
             updated the Mobile Network Code. </td></tr>
<tr><td><code>locale</code></td><td>0x0004</td><td> The locale has changed, that is the user has selected a new
             language that text should be displayed in. </td></tr>
<tr><td><code>touchscreen</code></td><td>0x0008</td><td> The touchscreen has changed.  Should never normally happen. </td></tr>
<tr><td><code>keyboard</code></td><td>0x0010</td><td> The keyboard type has changed, for example the user has plugged
             in an external keyboard. </td></tr>
<tr><td><code>keyboardHidden</code></td><td>0x0020</td><td> The keyboard or navigation accessibility has changed, for example
             the user has slid the keyboard out to expose it.  Note that
             despite its name, this applied to any accessibility: keyboard
             or navigation. </td></tr>
<tr><td><code>navigation</code></td><td>0x0040</td><td> The navigation type has changed.  Should never normally happen. </td></tr>
<tr><td><code>orientation</code></td><td>0x0080</td><td> The screen orientation has changed, that is the user has
             rotated the device. </td></tr>
<tr><td><code>screenLayout</code></td><td>0x0100</td><td> The screen layout has changed.  This might be caused by a
             different display being activated. </td></tr>
<tr><td><code>uiMode</code></td><td>0x0200</td><td> The global user interface mode has changed.  For example,
             going in or out of car mode, night mode changing, etc. </td></tr>
<tr><td><code>screenSize</code></td><td>0x0400</td><td> The current available screen size has changed.  If applications don't
             target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
             then the activity will always handle this itself (the change
             will not result in a restart).  This represents a change in the
             currently available size, so will change when the user switches
             between landscape and portrait. </td></tr>
<tr><td><code>smallestScreenSize</code></td><td>0x0800</td><td> The physical screen size has changed.  If applications don't
             target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
             then the activity will always handle this itself (the change
             will not result in a restart).  This represents a change in size
             regardless of orientation, so will only change when the actual
             physical screen size has changed such as switching to an external
             display. </td></tr>
<tr><td><code>layoutDirection</code></td><td>0x2000</td><td> The layout direction has changed. For example going from LTR to RTL. </td></tr>
<tr><td><code>fontScale</code></td><td>0x40000000</td><td> The font scaling factor has changed, that is the user has
             selected a new global font size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#configChanges}.
          @attr name android:configChanges
        */
        public: static const int AndroidManifestActivity_configChanges = 16;
        /**
          <p>
          @attr description
           Descriptive text for the associated data. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int AndroidManifestActivity_description = 17;
        /**
          <p>
          @attr description
           This attribute specifies that an activity shall become the root activity of a
         new task each time it is launched. Using this attribute permits the user to
         have multiple documents from the same applications appear in the recent tasks list.

         <p>Such a document is any kind of item for which an application may want to
         maintain multiple simultaneous instances. Examples might be text files, web
         pages, spreadsheets, or emails. Each such document will be in a separate
         task in the recent taskss list.

         <p>This attribute is equivalent to adding the flag {@link
         android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT} to every Intent used to launch
         the activity.

         <p>The documentLaunchMode attribute may be assigned one of four values, "none",
         "intoExisting", "always" and "never", described in detail below. For values other than
         <code>none</code> and <code>never</code> the activity must be defined with
         {@link android.R.attr#launchMode} <code>standard</code>.
         If this attribute is not specified, <code>none</code> will be used.
         Note that <code>none</code> can be overridden at run time if the Intent used
         to launch it contains the flag {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
         Intent.FLAG_ACTIVITY_NEW_DOCUMENT}.
         Similarly <code>intoExisting</code> will be overridden by the flag
         {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
         Intent.FLAG_ACTIVITY_NEW_DOCUMENT} combined with
         {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
         Intent.FLAG_ACTIVITY_MULTIPLE_TASK}. If the value of
         documentLaunchModes is <code>never</code> then any use of
         {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
         Intent.FLAG_ACTIVITY_NEW_DOCUMENT} to launch this activity will be ignored. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> The default mode, which will create a new task only when
             {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
             Intent.FLAG_ACTIVITY_NEW_TASK} is set. </td></tr>
<tr><td><code>intoExisting</code></td><td>1</td><td> All tasks will be searched for one whose base Intent's ComponentName and
             data URI match those of the launching Intent. If such a task is found
             that task will be cleared and restarted with the root activity receiving a call
             to {@link android.app.Activity#onNewIntent Activity.onNewIntent}. If no
             such task is found a new task will be created.
             <p>This is the equivalent of launching an activity with {@link
             android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
             set and without {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
             Intent.FLAG_ACTIVITY_MULTIPLE_TASK} set. </td></tr>
<tr><td><code>always</code></td><td>2</td><td> A new task rooted at this activity will be created. This will happen whether or
             not there is an existing task whose ComponentName and data URI match
             that of the launcing intent This is the equivalent of launching an activity
             with {@link
             android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
             and {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
             Intent.FLAG_ACTIVITY_MULTIPLE_TASK} both set. </td></tr>
<tr><td><code>never</code></td><td>3</td><td> This activity will not be launched into a new document even if the Intent contains
             {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
             Intent.FLAG_ACTIVITY_NEW_DOCUMENT}. This gives the activity writer ultimate
             control over how their activity is used. Note that applications prior to api
             21 will default to documentLaunchMode="none" so only activities that explicitly
             opt out with <code>"never"</code> may do so. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#documentLaunchMode}.
          @attr name android:documentLaunchMode
        */
        public: static const int AndroidManifestActivity_documentLaunchMode = 33;
        /**
          <p>
          @attr description
           Specify whether the activity is enabled or not (that is, can be instantiated by the system).
             It can also be specified for an application as a whole, in which case a value of "false"
             will override any component specific values (a value of "true" will not override the
             component specific values). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public: static const int AndroidManifestActivity_enabled = 5;
        /**
          <p>
          @attr description
           Indicates that an Activity should be excluded from the list of
         recently launched activities. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#excludeFromRecents}.
          @attr name android:excludeFromRecents
        */
        public: static const int AndroidManifestActivity_excludeFromRecents = 13;
        /**
          <p>
          @attr description
           Flag indicating whether the given application component is available
         to other applications.  If false, it can only be accessed by
         applications with its same user id (which usually means only by
         code in its own package).  If true, it can be invoked by external
         entities, though which ones can do so may be controlled through
         permissions.  The default value is false for activity, receiver,
         and service components that do not specify any intent filters; it
         is true for activity, receiver, and service components that do
         have intent filters (implying they expect to be invoked by others
         who do not know their particular component name) and for all
         content providers. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#exported}.
          @attr name android:exported
        */
        public: static const int AndroidManifestActivity_exported = 6;
        /**
          <p>
          @attr description
           Specify whether an activity should be finished when a "close system
         windows" request has been made.  This happens, for example, when
         the home key is pressed, when the device is locked, when a system
         dialog showing recent applications is displayed, etc. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#finishOnCloseSystemDialogs}.
          @attr name android:finishOnCloseSystemDialogs
        */
        public: static const int AndroidManifestActivity_finishOnCloseSystemDialogs = 22;
        /**
          <p>
          @attr description
           Specify whether an activity should be finished when its task is
         brought to the foreground by relaunching from the home screen.
         
         <p>If both this option and {@link android.R.attr#allowTaskReparenting} are
         specified, the finish trumps the affinity: the affinity will be
         ignored and the activity simply finished. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#finishOnTaskLaunch}.
          @attr name android:finishOnTaskLaunch
        */
        public: static const int AndroidManifestActivity_finishOnTaskLaunch = 10;
        /**
          <p>
          @attr description
           <p>Flag indicating whether the application's rendering should be hardware
         accelerated if possible. This flag is turned on by default for applications
         that are targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}
         or later.</p>
         <p>This flag can be set on the application and any activity declared
         in the manifest. When enabled for the application, each activity is
         automatically assumed to be hardware accelerated. This flag can be
         overridden in the activity tags, either turning it off (if on for the
         application) or on (if off for the application.)</p>
         <p>When this flag is turned on for an activity (either directly or via
         the application tag), every window created from the activity, including
         the activity's own window, will be hardware accelerated, if possible.</p>
         <p>Please refer to the documentation of
         {@link android.view.WindowManager.LayoutParams#FLAG_HARDWARE_ACCELERATED}
         for more information on how to control this flag programmatically.</p> 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#hardwareAccelerated}.
          @attr name android:hardwareAccelerated
        */
        public: static const int AndroidManifestActivity_hardwareAccelerated = 25;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestActivity_icon = 2;
        /**
          <p>
          @attr description
           Flag declaring this activity to be 'immersive'; immersive activities
         should not be interrupted with other activities or notifications. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#immersive}.
          @attr name android:immersive
        */
        public: static const int AndroidManifestActivity_immersive = 24;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestActivity_label = 1;
        /**
          <p>
          @attr description
           Specify how an activity should be launched.  See the
         <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
         Stack</a> document for important information on how these options impact
         the behavior of your application.
         
         <p>If this attribute is not specified, <code>standard</code> launch
         mode will be used.  Note that the particular launch behavior can
         be changed in some ways at runtime through the
         {@link android.content.Intent} flags
         {@link android.content.Intent#FLAG_ACTIVITY_SINGLE_TOP},
         {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK}, and
         {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK}. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>standard</code></td><td>0</td><td> The default mode, which will usually create a new instance of
             the activity when it is started, though this behavior may change
             with the introduction of other options such as
             {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
             Intent.FLAG_ACTIVITY_NEW_TASK}. </td></tr>
<tr><td><code>singleTop</code></td><td>1</td><td> If, when starting the activity, there is already an
            instance of the same activity class in the foreground that is
            interacting with the user, then
            re-use that instance.  This existing instance will receive a call to
            {@link android.app.Activity#onNewIntent Activity.onNewIntent()} with
            the new Intent that is being started. </td></tr>
<tr><td><code>singleTask</code></td><td>2</td><td> If, when starting the activity, there is already a task running
            that starts with this activity, then instead of starting a new
            instance the current task is brought to the front.  The existing
            instance will receive a call to {@link android.app.Activity#onNewIntent
            Activity.onNewIntent()}
            with the new Intent that is being started, and with the
            {@link android.content.Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT
            Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT} flag set.  This is a superset
            of the singleTop mode, where if there is already an instance
            of the activity being started at the top of the stack, it will
            receive the Intent as described there (without the
            FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set).  See the
            <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
            Stack</a> document for more details about tasks.</td></tr>
<tr><td><code>singleInstance</code></td><td>3</td><td> Only allow one instance of this activity to ever be 
            running.  This activity gets a unique task with only itself running 
            in it; if it is ever launched again with the same Intent, then that 
            task will be brought forward and its 
            {@link android.app.Activity#onNewIntent Activity.onNewIntent()}
            method called.  If this 
            activity tries to start a new activity, that new activity will be 
            launched in a separate task.  See the
            <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
            Stack</a> document for more details about tasks.</td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#launchMode}.
          @attr name android:launchMode
        */
        public: static const int AndroidManifestActivity_launchMode = 14;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestActivity_logo = 23;
        /**
          <p>
          @attr description
           The maximum number of entries of tasks rooted at this activity in the recent task list.
         When this number of entries is reached the least recently used instance of this activity
         will be removed from recents. The value will be clamped between 1 and 100 inclusive.
         The default value for this if it is not specified is 15. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxRecents}.
          @attr name android:maxRecents
        */
        public: static const int AndroidManifestActivity_maxRecents = 34;
        /**
          <p>
          @attr description
           Specify whether a component is allowed to have multiple instances
         of itself running in different processes.  Use with the activity
         and provider tags.
    
         <p>Normally the system will ensure that all instances of a particular
         component are only running in a single process.  You can use this
         attribute to disable that behavior, allowing the system to create
         instances wherever they are used (provided permissions allow it).
         This is most often used with content providers, so that instances
         of a provider can be created in each client process, allowing them
         to be used without performing IPC.  


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#multiprocess}.
          @attr name android:multiprocess
        */
        public: static const int AndroidManifestActivity_multiprocess = 9;
        /**
          <p>
          @attr description
           Required name of the class implementing the activity, deriving from
            {@link android.app.Activity}.  This is a fully
            qualified class name (for example, com.mycompany.myapp.MyActivity); as a
            short-hand if the first character of the class
            is a period then it is appended to your package name. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestActivity_name = 3;
        /**
          <p>
          @attr description
           Specify whether an activity should be kept in its history stack.
         If this attribute is set, then as soon as the user navigates away
         from the activity it will be finished and they will no longer be
         able to return to it. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#noHistory}.
          @attr name android:noHistory
        */
        public: static const int AndroidManifestActivity_noHistory = 21;
        /**
          <p>
          @attr description
           The name of the logical parent of the activity as it appears in the manifest. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#parentActivityName}.
          @attr name android:parentActivityName
        */
        public: static const int AndroidManifestActivity_parentActivityName = 27;
        /**
          <p>
          @attr description
           Specify a permission that a client is required to have in order to
    	 use the associated object.  If the client does not hold the named
    	 permission, its request will fail.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#permission}.
          @attr name android:permission
        */
        public: static const int AndroidManifestActivity_permission = 4;
        /**
          <p>
          @attr description
           Define how an activity persist across reboots. Activities defined as "never" will not
         be persisted. Those defined as "always" will be persisted. Those defined as "taskOnly"
         will persist the root activity of the task only. See below for more detail as to
         what gets persisted. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>persistRootOnly</code></td><td>0</td><td> The default. If this activity forms the root of a task then that task will be
             persisted across reboots but only the launching intent will be used. All
             activities above this activity in the task will not be persisted. In addition
             this activity will not be passed a PersistableBundle into which it could have
             stored its state. </td></tr>
<tr><td><code>persistNever</code></td><td>1</td><td> If this activity forms the root of a task then that task will not be persisted
             across reboots </td></tr>
<tr><td><code>persistAcrossReboots</code></td><td>2</td><td> If this activity forms the root of a task then the task and this activity will
             be persisted across reboots. If the activity above this activity is also
             tagged with the attribute <code>"persist"</code> then it will be persisted as well.
             And so on up the task stack until either an activity without the
             <code>persistableMode="persistAcrossReboots"</code> attribute or one that was launched
             with the flag Intent.FLAG_CLEAR_TASK_WHEN_RESET is encountered.

             <p>Activities that are declared with the persistAcrossReboots attribute will be
             provided with a PersistableBundle in onSavedInstanceState(), These activities may
             use this PeristableBundle to save their state. Then, following a reboot, that
             PersistableBundle will be provided back to the activity in its onCreate() method. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#persistableMode}.
          @attr name android:persistableMode
        */
        public: static const int AndroidManifestActivity_persistableMode = 32;
        /**
          <p>
          @attr description
           @hide This broacast receiver will only receive broadcasts for the
             primary user.  Can only be used with receivers. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:primaryUserOnly
        */
        public: static const int AndroidManifestActivity_primaryUserOnly = 38;
        /**
          <p>
          @attr description
           Specify a specific process that the associated code is to run in.
         Use with the application tag (to supply a default process for all
         application components), or with the activity, receiver, service,
         or provider tag (to supply a specific icon for that component).
    
         <p>Application components are normally run in a single process that
         is created for the entire application.  You can use this tag to modify
         where they run.  If the process name begins with a ':' character,
         a new process private to that application will be created when needed
         to run that component (allowing you to spread your application across
         multiple processes).  If the process name begins with a lower-case
         character, the component will be run in a global process of that name,
         provided that you have permission to do so, allowing multiple
         applications to share one process to reduce resource usage. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#process}.
          @attr name android:process
        */
        public: static const int AndroidManifestActivity_process = 7;
        /**
          <p>
          @attr description
           Tasks whose root has this attribute set to true will replace baseIntent with that of the
         next activity in the task. If the next activity also has this attribute set to true then
         it will yield the baseIntent to any activity that it launches in the same task. This
         continues until an activity is encountered which has this attribute set to false. False
         is the default. This attribute set to true also permits activity's use of the
         TaskDescription to change labels, colors and icons in the recent task list. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#relinquishTaskIdentity}.
          @attr name android:relinquishTaskIdentity
        */
        public: static const int AndroidManifestActivity_relinquishTaskIdentity = 36;
        /**
          <p>
          @attr description
           Indicate that it is okay for this activity be resumed while the previous
         activity is in the process of pausing, without waiting for the previous pause
         to complete.  Use this with caution: your activity can not acquire any exclusive
         resources (such as opening the camera or recording audio) when it launches, or it
         may conflict with the previous activity and fail.

         <p>The default value of this attribute is <code>false</code>. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#resumeWhilePausing}.
          @attr name android:resumeWhilePausing
        */
        public: static const int AndroidManifestActivity_resumeWhilePausing = 37;
        /**
          <p>
          @attr description
           Specify the orientation an activity should be run in.  If not
         specified, it will run in the current preferred orientation
         of the screen.
         <p>This attribute is supported by the <a
            href="{@docRoot}guide/topics/manifest/activity-element.html">{@code &lt;activity>}</a>
            element. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>unspecified</code></td><td>-1</td><td> No preference specified: let the system decide the best
             orientation.  This will either be the orientation selected
             by the activity below, or the user's preferred orientation
             if this activity is the bottom of a task. If the user
             explicitly turned off sensor based orientation through settings
             sensor based device rotation will be ignored. If not by default
             sensor based orientation will be taken into account and the 
             orientation will changed based on how the user rotates the device.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED}. </td></tr>
<tr><td><code>landscape</code></td><td>0</td><td> Would like to have the screen in a landscape orientation: that
             is, with the display wider than it is tall, ignoring sensor data.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LANDSCAPE}. </td></tr>
<tr><td><code>portrait</code></td><td>1</td><td> Would like to have the screen in a portrait orientation: that
             is, with the display taller than it is wide, ignoring sensor data.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_PORTRAIT}. </td></tr>
<tr><td><code>user</code></td><td>2</td><td> Use the user's current preferred orientation of the handset.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER}. </td></tr>
<tr><td><code>behind</code></td><td>3</td><td> Keep the screen in the same orientation as whatever is behind
             this activity.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_BEHIND}. </td></tr>
<tr><td><code>sensor</code></td><td>4</td><td> Orientation is determined by a physical orientation sensor:
             the display will rotate based on how the user moves the device.
             Ignores user's setting to turn off sensor-based rotation.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR}. </td></tr>
<tr><td><code>nosensor</code></td><td>5</td><td> Always ignore orientation determined by orientation sensor:
             the display will not rotate when the user moves the device.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_NOSENSOR}. </td></tr>
<tr><td><code>sensorLandscape</code></td><td>6</td><td> Would like to have the screen in landscape orientation, but can
             use the sensor to change which direction the screen is facing.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_LANDSCAPE}. </td></tr>
<tr><td><code>sensorPortrait</code></td><td>7</td><td> Would like to have the screen in portrait orientation, but can
             use the sensor to change which direction the screen is facing.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_PORTRAIT}. </td></tr>
<tr><td><code>reverseLandscape</code></td><td>8</td><td> Would like to have the screen in landscape orientation, turned in
             the opposite direction from normal landscape.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_LANDSCAPE}. </td></tr>
<tr><td><code>reversePortrait</code></td><td>9</td><td> Would like to have the screen in portrait orientation, turned in
             the opposite direction from normal portrait.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_PORTRAIT}. </td></tr>
<tr><td><code>fullSensor</code></td><td>10</td><td> Orientation is determined by a physical orientation sensor:
             the display will rotate based on how the user moves the device.
             This allows any of the 4 possible rotations, regardless of what
             the device will normally do (for example some devices won't
             normally use 180 degree rotation).
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_SENSOR}. </td></tr>
<tr><td><code>userLandscape</code></td><td>11</td><td> Would like to have the screen in landscape orientation, but if
             the user has enabled sensor-based rotation then we can use the
             sensor to change which direction the screen is facing.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_LANDSCAPE}. </td></tr>
<tr><td><code>userPortrait</code></td><td>12</td><td> Would like to have the screen in portrait orientation, but if
             the user has enabled sensor-based rotation then we can use the
             sensor to change which direction the screen is facing.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_PORTRAIT}. </td></tr>
<tr><td><code>fullUser</code></td><td>13</td><td> Respect the user's sensor-based rotation preference, but if
             sensor-based rotation is enabled then allow the screen to rotate
             in all 4 possible directions regardless of what
             the device will normally do (for example some devices won't
             normally use 180 degree rotation).
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_USER}. </td></tr>
<tr><td><code>locked</code></td><td>14</td><td> Screen is locked to its current rotation, whatever that is.
             Corresponds to
             {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LOCKED}. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#screenOrientation}.
          @attr name android:screenOrientation
        */
        public: static const int AndroidManifestActivity_screenOrientation = 15;
        /**
          <p>
          @attr description
           Specify that an Activity should be shown over the lock screen and,
         in a multiuser environment, across all users' windows 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#showOnLockScreen}.
          @attr name android:showOnLockScreen
        */
        public: static const int AndroidManifestActivity_showOnLockScreen = 29;
        /**
          <p>
          @attr description
           If set to true, a single instance of this component will run for
         all users.  That instance will run as user 0, the default/primary
         user.  When the app running is in processes for other users and interacts
         with this component (by binding to a service for example) those processes will
         always interact with the instance running for user 0.  Enabling
         single user mode forces "exported" of the component to be false, to
         help avoid introducing multi-user security bugs.  This feature is only
         available to applications built in to the system image; you must hold the
         permission INTERACT_ACROSS_USERS in order
         to use this feature.  This flag can only be used with services,
         receivers, and providers; it can not be used with activities. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#singleUser}.
          @attr name android:singleUser
        */
        public: static const int AndroidManifestActivity_singleUser = 28;
        /**
          <p>
          @attr description
           Indicates that an Activity does not need to have its freeze state
         (as returned by {@link android.app.Activity#onSaveInstanceState}
         retained in order to be restarted.  Generally you use this for activities
         that do not store any state.  When this flag is set, if for some reason
         the activity is killed before it has a chance to save its state,
         then the system will not remove it from the activity stack like
         it normally would.  Instead, the next time the user navigates to
         it its {@link android.app.Activity#onCreate} method will be called
         with a null icicle, just like it was starting for the first time.
         
         <p>This is used by the Home activity to make sure it does not get
         removed if it crashes for some reason. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#stateNotNeeded}.
          @attr name android:stateNotNeeded
        */
        public: static const int AndroidManifestActivity_stateNotNeeded = 12;
        /**
          <p>
          @attr description
           Specify a task name that activities have an "affinity" to.
         Use with the application tag (to supply a default affinity for all
         activities in the application), or with the activity tag (to supply
         a specific affinity for that component).
    
         <p>The default value for this attribute is the same as the package
         name, indicating that all activities in the manifest should generally
         be considered a single "application" to the user.  You can use this
         attribute to modify that behavior: either giving them an affinity
         for another task, if the activities are intended to be part of that
         task from the user's perspective, or using an empty string for
         activities that have no affinity to a task. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#taskAffinity}.
          @attr name android:taskAffinity
        */
        public: static const int AndroidManifestActivity_taskAffinity = 8;
        /**
          <p>
          @attr description
           The overall theme to use for an activity.  Use with either the
         application tag (to supply a default theme for all activities) or
         the activity tag (to supply a specific theme for that activity).
    
         <p>This automatically sets
         your activity's Context to use this theme, and may also be used
         for "starting" animations prior to the activity being launched (to
         better match what the activity actually looks like).  It is a reference
         to a style resource defining the theme.  If not set, the default
         system theme will be used. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#theme}.
          @attr name android:theme
        */
        public: static const int AndroidManifestActivity_theme = 0;
        /**
          <p>
          @attr description
           Extra options for an activity's UI. Applies to either the {@code &lt;activity&gt;} or
         {@code &lt;application&gt;} tag. If specified on the {@code &lt;application&gt;}
         tag these will be considered defaults for all activities in the
         application. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> No extra UI options. This is the default. </td></tr>
<tr><td><code>splitActionBarWhenNarrow</code></td><td>1</td><td> Split the options menu into a separate bar at the bottom of
             the screen when severely constrained for horizontal space.
             (e.g. portrait mode on a phone.) Instead of a small number
             of action buttons appearing in the action bar at the top
             of the screen, the action bar will split into the top navigation
             section and the bottom menu section. Menu items will not be
             split across the two bars; they will always appear together. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#uiOptions}.
          @attr name android:uiOptions
        */
        public: static const int AndroidManifestActivity_uiOptions = 26;
        /**
          <p>
          @attr description
           Specify the default soft-input mode for the main window of
             this activity.  A value besides "unspecified" here overrides
             any value in the theme. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>stateUnspecified</code></td><td>0</td><td> Not specified, use what the system thinks is best.  This
                 is the default. </td></tr>
<tr><td><code>stateUnchanged</code></td><td>1</td><td> Leave the soft input window as-is, in whatever state it
                 last was. </td></tr>
<tr><td><code>stateHidden</code></td><td>2</td><td> Make the soft input area hidden when normally appropriate
                 (when the user is navigating forward to your window). </td></tr>
<tr><td><code>stateAlwaysHidden</code></td><td>3</td><td> Always make the soft input area hidden when this window
                 has input focus. </td></tr>
<tr><td><code>stateVisible</code></td><td>4</td><td> Make the soft input area visible when normally appropriate
                 (when the user is navigating forward to your window). </td></tr>
<tr><td><code>stateAlwaysVisible</code></td><td>5</td><td> Always make the soft input area visible when this window
                 has input focus. </td></tr>
<tr><td><code>adjustUnspecified</code></td><td>0x00</td><td> The window resize/pan adjustment has not been specified,
                 the system will automatically select between resize and pan
                 modes, depending
                 on whether the content of the window has any layout views
                 that can scroll their contents.  If there is such a view,
                 then the window will be resized, with the assumption being
                 that the resizeable area can be reduced to make room for
                 the input UI. </td></tr>
<tr><td><code>adjustResize</code></td><td>0x10</td><td> Always resize the window: the content area of the window is
                 reduced to make room for the soft input area. </td></tr>
<tr><td><code>adjustPan</code></td><td>0x20</td><td> Don't resize the window to make room for the soft input area;
                 instead pan the contents of the window as focus moves inside
                 of it so that the user can see what they are typing.  This is
                 generally less desireable than panning because the user may
                 need to close the input area to get at and interact with
                 parts of the window. </td></tr>
<tr><td><code>adjustNothing</code></td><td>0x30</td><td> Don't resize <em>or</em> pan the window to make room for the
                 soft input area; the window is never adjusted for it. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSoftInputMode}.
          @attr name android:windowSoftInputMode
        */
        public: static const int AndroidManifestActivity_windowSoftInputMode = 20;
        /**  The <code>activity-alias</code> tag declares a new
         name for an existing {@link #AndroidManifestActivity activity}
         tag.
         
         <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
         tags can be included inside of an activity-alias, to specify the Intents
         that it can handle.  If none are specified, the activity can
         only be started through direct specification of its class name.
         The activity-alias tag appears as a child tag of the
         {@link #AndroidManifestApplication application} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_description android:description}</code></td><td> Descriptive text for the associated data.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_enabled android:enabled}</code></td><td> Specify whether the activity-alias is enabled or not (that is, can be instantiated by the system).</td></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_exported android:exported}</code></td><td> Flag indicating whether the given application component is available
         to other applications.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_name android:name}</code></td><td> Required name of the class implementing the activity, deriving from
            {@link android.app.Activity}.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_parentActivityName android:parentActivityName}</code></td><td> The name of the logical parent of the activity as it appears in the manifest.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_permission android:permission}</code></td><td> Specify a permission that a client is required to have in order to
    	 use the associated object.</td></tr>
           <tr><td><code>{@link #AndroidManifestActivityAlias_targetActivity android:targetActivity}</code></td><td> The name of the activity this alias should launch.</td></tr>
           </table>
           @see #AndroidManifestActivityAlias_banner
           @see #AndroidManifestActivityAlias_description
           @see #AndroidManifestActivityAlias_enabled
           @see #AndroidManifestActivityAlias_exported
           @see #AndroidManifestActivityAlias_icon
           @see #AndroidManifestActivityAlias_label
           @see #AndroidManifestActivityAlias_logo
           @see #AndroidManifestActivityAlias_name
           @see #AndroidManifestActivityAlias_parentActivityName
           @see #AndroidManifestActivityAlias_permission
           @see #AndroidManifestActivityAlias_targetActivity
         */
        public: static const int AndroidManifestActivityAlias[11];
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestActivityAlias_banner = 10;
        /**
          <p>
          @attr description
           Descriptive text for the associated data. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int AndroidManifestActivityAlias_description = 6;
        /**
          <p>
          @attr description
           Specify whether the activity-alias is enabled or not (that is, can be instantiated by the system).
             It can also be specified for an application as a whole, in which case a value of "false"
             will override any component specific values (a value of "true" will not override the
             component specific values). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public: static const int AndroidManifestActivityAlias_enabled = 4;
        /**
          <p>
          @attr description
           Flag indicating whether the given application component is available
         to other applications.  If false, it can only be accessed by
         applications with its same user id (which usually means only by
         code in its own package).  If true, it can be invoked by external
         entities, though which ones can do so may be controlled through
         permissions.  The default value is false for activity, receiver,
         and service components that do not specify any intent filters; it
         is true for activity, receiver, and service components that do
         have intent filters (implying they expect to be invoked by others
         who do not know their particular component name) and for all
         content providers. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#exported}.
          @attr name android:exported
        */
        public: static const int AndroidManifestActivityAlias_exported = 5;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestActivityAlias_icon = 1;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestActivityAlias_label = 0;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestActivityAlias_logo = 8;
        /**
          <p>
          @attr description
           Required name of the class implementing the activity, deriving from
            {@link android.app.Activity}.  This is a fully
            qualified class name (for example, com.mycompany.myapp.MyActivity); as a
            short-hand if the first character of the class
            is a period then it is appended to your package name. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestActivityAlias_name = 2;
        /**
          <p>
          @attr description
           The name of the logical parent of the activity as it appears in the manifest. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#parentActivityName}.
          @attr name android:parentActivityName
        */
        public: static const int AndroidManifestActivityAlias_parentActivityName = 9;
        /**
          <p>
          @attr description
           Specify a permission that a client is required to have in order to
    	 use the associated object.  If the client does not hold the named
    	 permission, its request will fail.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#permission}.
          @attr name android:permission
        */
        public: static const int AndroidManifestActivityAlias_permission = 3;
        /**
          <p>
          @attr description
           The name of the activity this alias should launch.  The activity
             must be in the same manifest as the alias, and have been defined
             in that manifest before the alias here.  This must use a Java-style
             naming convention to ensure the name is unique, for example
             "com.mycompany.MyName". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#targetActivity}.
          @attr name android:targetActivity
        */
        public: static const int AndroidManifestActivityAlias_targetActivity = 7;
        /**  The <code>application</code> tag describes application-level components
         contained in the package, as well as general application
         attributes.  Many of the attributes you can supply here (such
         as theme, label, icon, permission, process, taskAffinity,
         and allowTaskReparenting) serve
         as default values for the corresponding attributes of components
         declared inside of the application.
         
         <p>Inside of this element you specify what the application contains,
         using the elements {@link #AndroidManifestProvider provider},
         {@link #AndroidManifestService service},
         {@link #AndroidManifestReceiver receiver},
         {@link #AndroidManifestActivity activity},
         {@link #AndroidManifestActivityAlias activity-alias}, and
         {@link #AndroidManifestUsesLibrary uses-library}.  The application tag
         appears as a child of the root {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestApplication_allowBackup android:allowBackup}</code></td><td> Whether to allow the application to participate in the backup
         and restore infrastructure.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_allowClearUserData android:allowClearUserData}</code></td><td> Option to let applications specify that user data can/cannot be 
         cleared.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_allowTaskReparenting android:allowTaskReparenting}</code></td><td> Specify that an activity can be moved out of a task it is in to
         the task it has an affinity for when appropriate.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_backupAgent android:backupAgent}</code></td><td> The name of the class subclassing <code>BackupAgent</code> to manage
         backup and restore of the application's data on external storage.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_cantSaveState android:cantSaveState}</code></td><td> Declare that this application can't participate in the normal
             state save/restore mechanism.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_debuggable android:debuggable}</code></td><td> Flag indicating whether the application can be debugged, even when
         running on a device that is running in user mode.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_description android:description}</code></td><td> Descriptive text for the associated data.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_enabled android:enabled}</code></td><td> Specify whether the components in this application are enabled or not (that is, can be
             instantiated by the system).</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_fullBackupOnly android:fullBackupOnly}</code></td><td> Indicates that even though the application provides a <code>BackupAgent</code>,
         only full-data streaming backup operations are to be performed to save the app's
         data.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_hardwareAccelerated android:hardwareAccelerated}</code></td><td> <p>Flag indicating whether the application's rendering should be hardware
         accelerated if possible.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_hasCode android:hasCode}</code></td><td> Indicate whether this application contains code.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_isGame android:isGame}</code></td><td> A boolean flag used to indicate if an application is a Game or not.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_killAfterRestore android:killAfterRestore}</code></td><td> Whether the application in question should be terminated after its
         settings have been restored during a full-system restore operation.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_largeHeap android:largeHeap}</code></td><td> Request that your application's processes be created with
             a large Dalvik heap.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_manageSpaceActivity android:manageSpaceActivity}</code></td><td> Name of activity to be launched for managing the application's space on the device.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_multiArch android:multiArch}</code></td><td> Declare that code from this application will need to be loaded into other
         applications' processes.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_name android:name}</code></td><td> An optional name of a class implementing the overall
             {@link android.app.Application} for this package.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_neverEncrypt android:neverEncrypt}</code></td><td> Option to let applications specify that user data should
         never be encrypted if an Encrypted File System solution
         is enabled.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_permission android:permission}</code></td><td> Specify a permission that a client is required to have in order to
    	 use the associated object.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_persistent android:persistent}</code></td><td> Flag to control special persistent mode of an application.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_process android:process}</code></td><td> Specify a specific process that the associated code is to run in.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_requiredAccountType android:requiredAccountType}</code></td><td> Declare that this application requires an account of a certain
             type.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_requiredForAllUsers android:requiredForAllUsers}</code></td><td> Flag to specify if this application needs to be present for all users.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_restoreAnyVersion android:restoreAnyVersion}</code></td><td> Indicate that the application is prepared to attempt a restore of any
         backed-up dataset, even if the backup is apparently from a newer version
         of the application than is currently installed on the device.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_restoreNeedsApplication android:restoreNeedsApplication}</code></td><td> @deprecated This attribute is not used by the Android operating system.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_restrictedAccountType android:restrictedAccountType}</code></td><td> Declare that this application requires access to restricted accounts of a certain
             type.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_supportsRtl android:supportsRtl}</code></td><td> Declare that your application will be able to deal with RTL (right to left) layouts.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_taskAffinity android:taskAffinity}</code></td><td> Specify a task name that activities have an "affinity" to.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_testOnly android:testOnly}</code></td><td> Option to indicate this application is only for testing purposes.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_theme android:theme}</code></td><td> The overall theme to use for an activity.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_uiOptions android:uiOptions}</code></td><td> Extra options for an activity's UI.</td></tr>
           <tr><td><code>{@link #AndroidManifestApplication_vmSafeMode android:vmSafeMode}</code></td><td> Flag indicating whether the application requests the VM to operate in
         the safe mode.</td></tr>
           </table>
           @see #AndroidManifestApplication_allowBackup
           @see #AndroidManifestApplication_allowClearUserData
           @see #AndroidManifestApplication_allowTaskReparenting
           @see #AndroidManifestApplication_backupAgent
           @see #AndroidManifestApplication_banner
           @see #AndroidManifestApplication_cantSaveState
           @see #AndroidManifestApplication_debuggable
           @see #AndroidManifestApplication_description
           @see #AndroidManifestApplication_enabled
           @see #AndroidManifestApplication_fullBackupOnly
           @see #AndroidManifestApplication_hardwareAccelerated
           @see #AndroidManifestApplication_hasCode
           @see #AndroidManifestApplication_icon
           @see #AndroidManifestApplication_isGame
           @see #AndroidManifestApplication_killAfterRestore
           @see #AndroidManifestApplication_label
           @see #AndroidManifestApplication_largeHeap
           @see #AndroidManifestApplication_logo
           @see #AndroidManifestApplication_manageSpaceActivity
           @see #AndroidManifestApplication_multiArch
           @see #AndroidManifestApplication_name
           @see #AndroidManifestApplication_neverEncrypt
           @see #AndroidManifestApplication_permission
           @see #AndroidManifestApplication_persistent
           @see #AndroidManifestApplication_process
           @see #AndroidManifestApplication_requiredAccountType
           @see #AndroidManifestApplication_requiredForAllUsers
           @see #AndroidManifestApplication_restoreAnyVersion
           @see #AndroidManifestApplication_restoreNeedsApplication
           @see #AndroidManifestApplication_restrictedAccountType
           @see #AndroidManifestApplication_supportsRtl
           @see #AndroidManifestApplication_taskAffinity
           @see #AndroidManifestApplication_testOnly
           @see #AndroidManifestApplication_theme
           @see #AndroidManifestApplication_uiOptions
           @see #AndroidManifestApplication_vmSafeMode
         */
        public: static const int AndroidManifestApplication[36];
        /**
          <p>
          @attr description
           Whether to allow the application to participate in the backup
         and restore infrastructure.  If this attribute is set to <code>false</code>,
         no backup or restore of the application will ever be performed, even by a
         full-system backup that would otherwise cause all application data to be saved
         via adb.  The default value of this attribute is <code>true</code>. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#allowBackup}.
          @attr name android:allowBackup
        */
        public: static const int AndroidManifestApplication_allowBackup = 17;
        /**
          <p>
          @attr description
           Option to let applications specify that user data can/cannot be 
         cleared. This flag is turned on by default.
         <em>This attribute is usable only by applications
         included in the system image. Third-party apps cannot use it.</em> 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#allowClearUserData}.
          @attr name android:allowClearUserData
        */
        public: static const int AndroidManifestApplication_allowClearUserData = 5;
        /**
          <p>
          @attr description
           Specify that an activity can be moved out of a task it is in to
         the task it has an affinity for when appropriate.  Use with the
         application tag (to supply a default for all activities in the
         application), or with an activity tag (to supply a specific
         setting for that component).
    
         <p>Normally when an application is started, it is associated with
         the task of the activity that started it and stays there for its
         entire lifetime.  You can use the allowTaskReparenting feature to force an
         activity to be re-parented to a different task when the task it is
         in goes to the background.  Typically this is used to cause the
         activities of an application to move back to the main task associated
         with that application.  The activity is re-parented to the task
         with the same {@link android.R.attr#taskAffinity} as it has. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#allowTaskReparenting}.
          @attr name android:allowTaskReparenting
        */
        public: static const int AndroidManifestApplication_allowTaskReparenting = 14;
        /**
          <p>
          @attr description
           The name of the class subclassing <code>BackupAgent</code> to manage
         backup and restore of the application's data on external storage. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backupAgent}.
          @attr name android:backupAgent
        */
        public: static const int AndroidManifestApplication_backupAgent = 16;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestApplication_banner = 30;
        /**
          <p>
          @attr description
           Declare that this application can't participate in the normal
             state save/restore mechanism.  Since it is not able to save and
             restore its state on demand,
             it can not participate in the normal activity lifecycle.  It will
             not be killed while in the background; the user must explicitly
             quit it.  Only one such app can be running at a time; if the user
             tries to launch a second such app, they will be prompted
             to quit the first before doing so.  While the
             application is running, the user will be informed of this.
             @hide 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:cantSaveState
        */
        public: static const int AndroidManifestApplication_cantSaveState = 35;
        /**
          <p>
          @attr description
           Flag indicating whether the application can be debugged, even when
         running on a device that is running in user mode. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#debuggable}.
          @attr name android:debuggable
        */
        public: static const int AndroidManifestApplication_debuggable = 10;
        /**
          <p>
          @attr description
           Descriptive text for the associated data. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int AndroidManifestApplication_description = 13;
        /**
          <p>
          @attr description
           Specify whether the components in this application are enabled or not (that is, can be
             instantiated by the system).
             If "false", it overrides any component specific values (a value of "true" will not
             override the component specific values). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public: static const int AndroidManifestApplication_enabled = 9;
        /**
          <p>
          @attr description
           Indicates that even though the application provides a <code>BackupAgent</code>,
         only full-data streaming backup operations are to be performed to save the app's
         data.  This lets the app rely on full-data backups while still participating in
         the backup and restore process via the BackupAgent's full-data backup APIs.
         When this attribute is <code>true</code> the app's BackupAgent overrides of
         the onBackup() and onRestore() callbacks can be empty stubs. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fullBackupOnly}.
          @attr name android:fullBackupOnly
        */
        public: static const int AndroidManifestApplication_fullBackupOnly = 32;
        /**
          <p>
          @attr description
           <p>Flag indicating whether the application's rendering should be hardware
         accelerated if possible. This flag is turned on by default for applications
         that are targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}
         or later.</p>
         <p>This flag can be set on the application and any activity declared
         in the manifest. When enabled for the application, each activity is
         automatically assumed to be hardware accelerated. This flag can be
         overridden in the activity tags, either turning it off (if on for the
         application) or on (if off for the application.)</p>
         <p>When this flag is turned on for an activity (either directly or via
         the application tag), every window created from the activity, including
         the activity's own window, will be hardware accelerated, if possible.</p>
         <p>Please refer to the documentation of
         {@link android.view.WindowManager.LayoutParams#FLAG_HARDWARE_ACCELERATED}
         for more information on how to control this flag programmatically.</p> 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#hardwareAccelerated}.
          @attr name android:hardwareAccelerated
        */
        public: static const int AndroidManifestApplication_hardwareAccelerated = 23;
        /**
          <p>
          @attr description
           Indicate whether this application contains code.  If set to false,
             there is no code associated with it and thus the system will not
             try to load its code when launching components.  The default is true
             for normal behavior. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#hasCode}.
          @attr name android:hasCode
        */
        public: static const int AndroidManifestApplication_hasCode = 7;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestApplication_icon = 2;
        /**
          <p>
          @attr description
           A boolean flag used to indicate if an application is a Game or not.
         <p>This information can be used by the system to group together
         applications that are classified as games, and display them separately
         from the other applications. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isGame}.
          @attr name android:isGame
        */
        public: static const int AndroidManifestApplication_isGame = 31;
        /**
          <p>
          @attr description
           Whether the application in question should be terminated after its
         settings have been restored during a full-system restore operation.
         Single-package restore operations will never cause the application to
         be shut down.  Full-system restore operations typically only occur once,
         when the phone is first set up.  Third-party applications will not usually
         need to use this attribute.

         <p>The default is <code>true</code>, which means that after the application
         has finished processing its data during a full-system restore, it will be
         terminated. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#killAfterRestore}.
          @attr name android:killAfterRestore
        */
        public: static const int AndroidManifestApplication_killAfterRestore = 18;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestApplication_label = 1;
        /**
          <p>
          @attr description
           Request that your application's processes be created with
             a large Dalvik heap.  This applies to <em>all</em> processes
             created for the application.  It only applies to the first
             application loaded into a process; if using a sharedUserId
             to allow multiple applications to use a process, they all must
             use this option consistently or will get unpredictable results. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#largeHeap}.
          @attr name android:largeHeap
        */
        public: static const int AndroidManifestApplication_largeHeap = 24;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestApplication_logo = 22;
        /**
          <p>
          @attr description
           Name of activity to be launched for managing the application's space on the device. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#manageSpaceActivity}.
          @attr name android:manageSpaceActivity
        */
        public: static const int AndroidManifestApplication_manageSpaceActivity = 4;
        /**
          <p>
          @attr description
           Declare that code from this application will need to be loaded into other
         applications' processes. On devices that support multiple instruction sets,
         this implies the code might be loaded into a process that's using any of the devices
         supported instruction sets.
         
         <p> The system might treat such applications specially, for eg., by
         extracting the application's native libraries for all supported instruction
         sets or by compiling the application's dex code for all supported instruction
         sets. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#multiArch}.
          @attr name android:multiArch
        */
        public: static const int AndroidManifestApplication_multiArch = 33;
        /**
          <p>
          @attr description
           An optional name of a class implementing the overall
             {@link android.app.Application} for this package.  When the
             process for your package is started, this class is instantiated
             before any of the other application components.  Note that this
             is not required, and in fact most applications will probably
             not need it. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestApplication_name = 3;
        /**
          <p>
          @attr description
           Option to let applications specify that user data should
         never be encrypted if an Encrypted File System solution
         is enabled. Specifically, this is an "opt-out" feature, meaning
         that, by default, user data will be encrypted if the EFS feature
         is enabled. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:neverEncrypt
        */
        public: static const int AndroidManifestApplication_neverEncrypt = 34;
        /**
          <p>
          @attr description
           Specify a permission that a client is required to have in order to
    	 use the associated object.  If the client does not hold the named
    	 permission, its request will fail.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#permission}.
          @attr name android:permission
        */
        public: static const int AndroidManifestApplication_permission = 6;
        /**
          <p>
          @attr description
           Flag to control special persistent mode of an application.  This should
         not normally be used by applications; it requires that the system keep
         your application running at all times. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#persistent}.
          @attr name android:persistent
        */
        public: static const int AndroidManifestApplication_persistent = 8;
        /**
          <p>
          @attr description
           Specify a specific process that the associated code is to run in.
         Use with the application tag (to supply a default process for all
         application components), or with the activity, receiver, service,
         or provider tag (to supply a specific icon for that component).
    
         <p>Application components are normally run in a single process that
         is created for the entire application.  You can use this tag to modify
         where they run.  If the process name begins with a ':' character,
         a new process private to that application will be created when needed
         to run that component (allowing you to spread your application across
         multiple processes).  If the process name begins with a lower-case
         character, the component will be run in a global process of that name,
         provided that you have permission to do so, allowing multiple
         applications to share one process to reduce resource usage. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#process}.
          @attr name android:process
        */
        public: static const int AndroidManifestApplication_process = 11;
        /**
          <p>
          @attr description
           Declare that this application requires an account of a certain
             type. The default value is null and indicates that the application can work without
             any accounts. The type should correspond to the account authenticator type, such as
             "com.google". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#requiredAccountType}.
          @attr name android:requiredAccountType
        */
        public: static const int AndroidManifestApplication_requiredAccountType = 29;
        /**
          <p>
          @attr description
           Flag to specify if this application needs to be present for all users. Only pre-installed
         applications can request this feature. Default value is false. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#requiredForAllUsers}.
          @attr name android:requiredForAllUsers
        */
        public: static const int AndroidManifestApplication_requiredForAllUsers = 27;
        /**
          <p>
          @attr description
           Indicate that the application is prepared to attempt a restore of any
         backed-up dataset, even if the backup is apparently from a newer version
         of the application than is currently installed on the device.  Setting
         this attribute to <code>true</code> will permit the Backup Manager to
         attempt restore even when a version mismatch suggests that the data are
         incompatible.  <em>Use with caution!</em>

         <p>The default value of this attribute is <code>false</code>. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#restoreAnyVersion}.
          @attr name android:restoreAnyVersion
        */
        public: static const int AndroidManifestApplication_restoreAnyVersion = 21;
        /**
          <p>
          @attr description
           @deprecated This attribute is not used by the Android operating system. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#restoreNeedsApplication}.
          @attr name android:restoreNeedsApplication
        */
        public: static const int AndroidManifestApplication_restoreNeedsApplication = 19;
        /**
          <p>
          @attr description
           Declare that this application requires access to restricted accounts of a certain
             type. The default value is null and restricted accounts won\'t be visible to this
             application. The type should correspond to the account authenticator type, such as
             "com.google". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#restrictedAccountType}.
          @attr name android:restrictedAccountType
        */
        public: static const int AndroidManifestApplication_restrictedAccountType = 28;
        /**
          <p>
          @attr description
           Declare that your application will be able to deal with RTL (right to left) layouts.
             If set to  false (default value), your application will not care about RTL layouts. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#supportsRtl}.
          @attr name android:supportsRtl
        */
        public: static const int AndroidManifestApplication_supportsRtl = 26;
        /**
          <p>
          @attr description
           Specify a task name that activities have an "affinity" to.
         Use with the application tag (to supply a default affinity for all
         activities in the application), or with the activity tag (to supply
         a specific affinity for that component).
    
         <p>The default value for this attribute is the same as the package
         name, indicating that all activities in the manifest should generally
         be considered a single "application" to the user.  You can use this
         attribute to modify that behavior: either giving them an affinity
         for another task, if the activities are intended to be part of that
         task from the user's perspective, or using an empty string for
         activities that have no affinity to a task. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#taskAffinity}.
          @attr name android:taskAffinity
        */
        public: static const int AndroidManifestApplication_taskAffinity = 12;
        /**
          <p>
          @attr description
           Option to indicate this application is only for testing purposes.
         For example, it may expose functionality or data outside of itself
         that would cause a security hole, but is useful for testing.  This
         kind of application can not be installed without the
         INSTALL_ALLOW_TEST flag, which means only through adb install.  


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#testOnly}.
          @attr name android:testOnly
        */
        public: static const int AndroidManifestApplication_testOnly = 15;
        /**
          <p>
          @attr description
           The overall theme to use for an activity.  Use with either the
         application tag (to supply a default theme for all activities) or
         the activity tag (to supply a specific theme for that activity).
    
         <p>This automatically sets
         your activity's Context to use this theme, and may also be used
         for "starting" animations prior to the activity being launched (to
         better match what the activity actually looks like).  It is a reference
         to a style resource defining the theme.  If not set, the default
         system theme will be used. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#theme}.
          @attr name android:theme
        */
        public: static const int AndroidManifestApplication_theme = 0;
        /**
          <p>
          @attr description
           Extra options for an activity's UI. Applies to either the {@code &lt;activity&gt;} or
         {@code &lt;application&gt;} tag. If specified on the {@code &lt;application&gt;}
         tag these will be considered defaults for all activities in the
         application. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> No extra UI options. This is the default. </td></tr>
<tr><td><code>splitActionBarWhenNarrow</code></td><td>1</td><td> Split the options menu into a separate bar at the bottom of
             the screen when severely constrained for horizontal space.
             (e.g. portrait mode on a phone.) Instead of a small number
             of action buttons appearing in the action bar at the top
             of the screen, the action bar will split into the top navigation
             section and the bottom menu section. Menu items will not be
             split across the two bars; they will always appear together. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#uiOptions}.
          @attr name android:uiOptions
        */
        public: static const int AndroidManifestApplication_uiOptions = 25;
        /**
          <p>
          @attr description
           Flag indicating whether the application requests the VM to operate in
         the safe mode.  


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#vmSafeMode}.
          @attr name android:vmSafeMode
        */
        public: static const int AndroidManifestApplication_vmSafeMode = 20;
        /**  Attributes that can be supplied in an AndroidManifest.xml
         <code>category</code> tag, a child of the
         {@link #AndroidManifestIntentFilter intent-filter} tag. 
         See {@link android.content.IntentFilter#addCategory} for
         more information. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestCategory_name android:name}</code></td><td> The name of category that is handled, using the Java-style
             naming convention.</td></tr>
           </table>
           @see #AndroidManifestCategory_name
         */
        public: static const int AndroidManifestCategory[1];
        /**
          <p>
          @attr description
           The name of category that is handled, using the Java-style
             naming convention.  For example, to support
             {@link android.content.Intent#CATEGORY_LAUNCHER Intent.CATEGORY_LAUNCHER}
             you would put <code>android.intent.category.LAUNCHER</code> here.
             Custom actions should generally use a prefix matching the
             package name. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestCategory_name = 0;
        /**  Attributes that can be supplied in an AndroidManifest.xml
         <code>screen</code> tag, a child of <code>compatible-screens</code>,
         which is itself a child of the root
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestCompatibleScreensScreen_screenDensity android:screenDensity}</code></td><td> Specifies a compatible screen density, as per the device
             configuration screen density bins.</td></tr>
           <tr><td><code>{@link #AndroidManifestCompatibleScreensScreen_screenSize android:screenSize}</code></td><td> Specifies a compatible screen size, as per the device
             configuration screen size bins.</td></tr>
           </table>
           @see #AndroidManifestCompatibleScreensScreen_screenDensity
           @see #AndroidManifestCompatibleScreensScreen_screenSize
         */
        public: static const int AndroidManifestCompatibleScreensScreen[2];
        /**
          <p>
          @attr description
           Specifies a compatible screen density, as per the device
             configuration screen density bins. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>ldpi</code></td><td>120</td><td> A low density screen, approximately 120dpi. </td></tr>
<tr><td><code>mdpi</code></td><td>160</td><td> A medium density screen, approximately 160dpi. </td></tr>
<tr><td><code>hdpi</code></td><td>240</td><td> A high density screen, approximately 240dpi. </td></tr>
<tr><td><code>xhdpi</code></td><td>320</td><td> An extra high density screen, approximately 320dpi. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#screenDensity}.
          @attr name android:screenDensity
        */
        public: static const int AndroidManifestCompatibleScreensScreen_screenDensity = 1;
        /**
          <p>
          @attr description
           Specifies a compatible screen size, as per the device
             configuration screen size bins. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>small</code></td><td>200</td><td> A small screen configuration, at least 240x320dp. </td></tr>
<tr><td><code>normal</code></td><td>300</td><td> A normal screen configuration, at least 320x480dp. </td></tr>
<tr><td><code>large</code></td><td>400</td><td> A large screen configuration, at least 400x530dp. </td></tr>
<tr><td><code>xlarge</code></td><td>500</td><td> An extra large screen configuration, at least 600x800dp. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#screenSize}.
          @attr name android:screenSize
        */
        public: static const int AndroidManifestCompatibleScreensScreen_screenSize = 0;
        /**  Attributes that can be supplied in an AndroidManifest.xml
         <code>data</code> tag, a child of the
         {@link #AndroidManifestIntentFilter intent-filter} tag, describing
         the types of data that match.  This tag can be specified multiple
         times to supply multiple data options, as described in the
         {@link android.content.IntentFilter} class.  Note that all such
         tags are adding options to the same IntentFilter so that, for example,
         <code>&lt;data android:scheme="myscheme" android:host="me.com" /&gt;</code>
         is equivalent to <code>&lt;data android:scheme="myscheme" /&gt;
         &lt;data android:host="me.com" /&gt;</code>. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestData_host android:host}</code></td><td> Specify a URI authority host that is handled, as per
             {@link android.content.IntentFilter#addDataAuthority
             IntentFilter.addDataAuthority()}.</td></tr>
           <tr><td><code>{@link #AndroidManifestData_mimeType android:mimeType}</code></td><td> Specify a MIME type that is handled, as per
             {@link android.content.IntentFilter#addDataType
             IntentFilter.addDataType()}.</td></tr>
           <tr><td><code>{@link #AndroidManifestData_path android:path}</code></td><td> Specify a URI path that must exactly match, as per
             {@link android.content.IntentFilter#addDataPath
             IntentFilter.addDataPath()} with
             {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
           <tr><td><code>{@link #AndroidManifestData_pathPattern android:pathPattern}</code></td><td> Specify a URI path that matches a simple pattern, as per
             {@link android.content.IntentFilter#addDataPath
             IntentFilter.addDataPath()} with
             {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
           <tr><td><code>{@link #AndroidManifestData_pathPrefix android:pathPrefix}</code></td><td> Specify a URI path that must be a prefix to match, as per
             {@link android.content.IntentFilter#addDataPath
             IntentFilter.addDataPath()} with
             {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
           <tr><td><code>{@link #AndroidManifestData_port android:port}</code></td><td> Specify a URI authority port that is handled, as per
             {@link android.content.IntentFilter#addDataAuthority
             IntentFilter.addDataAuthority()}.</td></tr>
           <tr><td><code>{@link #AndroidManifestData_scheme android:scheme}</code></td><td> Specify a URI scheme that is handled, as per
             {@link android.content.IntentFilter#addDataScheme
             IntentFilter.addDataScheme()}.</td></tr>
           <tr><td><code>{@link #AndroidManifestData_ssp android:ssp}</code></td><td> Specify a URI scheme specific part that must exactly match, as per
             {@link android.content.IntentFilter#addDataSchemeSpecificPart
             IntentFilter.addDataSchemeSpecificPart()} with
             {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
           <tr><td><code>{@link #AndroidManifestData_sspPattern android:sspPattern}</code></td><td> Specify a URI scheme specific part that matches a simple pattern, as per
             {@link android.content.IntentFilter#addDataSchemeSpecificPart
             IntentFilter.addDataSchemeSpecificPart()} with
             {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
           <tr><td><code>{@link #AndroidManifestData_sspPrefix android:sspPrefix}</code></td><td> Specify a URI scheme specific part that must be a prefix to match, as per
             {@link android.content.IntentFilter#addDataSchemeSpecificPart
             IntentFilter.addDataSchemeSpecificPart()} with
             {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
           </table>
           @see #AndroidManifestData_host
           @see #AndroidManifestData_mimeType
           @see #AndroidManifestData_path
           @see #AndroidManifestData_pathPattern
           @see #AndroidManifestData_pathPrefix
           @see #AndroidManifestData_port
           @see #AndroidManifestData_scheme
           @see #AndroidManifestData_ssp
           @see #AndroidManifestData_sspPattern
           @see #AndroidManifestData_sspPrefix
         */
        public: static const int AndroidManifestData[10];
        /**
          <p>
          @attr description
           Specify a URI authority host that is handled, as per
             {@link android.content.IntentFilter#addDataAuthority
             IntentFilter.addDataAuthority()}.
             <p><em>Note: host name matching in the Android framework is
             case-sensitive, unlike the formal RFC.  As a result,
             host names here should always use lower case letters.</em></p> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#host}.
          @attr name android:host
        */
        public: static const int AndroidManifestData_host = 2;
        /**
          <p>
          @attr description
           Specify a MIME type that is handled, as per
             {@link android.content.IntentFilter#addDataType
             IntentFilter.addDataType()}.
             <p><em>Note: MIME type matching in the Android framework is
             case-sensitive, unlike formal RFC MIME types.  As a result,
             MIME types here should always use lower case letters.</em></p> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#mimeType}.
          @attr name android:mimeType
        */
        public: static const int AndroidManifestData_mimeType = 0;
        /**
          <p>
          @attr description
           Specify a URI path that must exactly match, as per
             {@link android.content.IntentFilter#addDataPath
             IntentFilter.addDataPath()} with
             {@link android.os.PatternMatcher#PATTERN_LITERAL}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#path}.
          @attr name android:path
        */
        public: static const int AndroidManifestData_path = 4;
        /**
          <p>
          @attr description
           Specify a URI path that matches a simple pattern, as per
             {@link android.content.IntentFilter#addDataPath
             IntentFilter.addDataPath()} with
             {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}. 
             Note that because '\' is used as an escape character when
             reading the string from XML (before it is parsed as a pattern),
             you will need to double-escape: for example a literal "*" would
             be written as "\\*" and a literal "\" would be written as
             "\\\\".  This is basically the same as what you would need to
             write if constructing the string in Java code. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pathPattern}.
          @attr name android:pathPattern
        */
        public: static const int AndroidManifestData_pathPattern = 6;
        /**
          <p>
          @attr description
           Specify a URI path that must be a prefix to match, as per
             {@link android.content.IntentFilter#addDataPath
             IntentFilter.addDataPath()} with
             {@link android.os.PatternMatcher#PATTERN_PREFIX}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pathPrefix}.
          @attr name android:pathPrefix
        */
        public: static const int AndroidManifestData_pathPrefix = 5;
        /**
          <p>
          @attr description
           Specify a URI authority port that is handled, as per
             {@link android.content.IntentFilter#addDataAuthority
             IntentFilter.addDataAuthority()}.  If a host is supplied
             but not a port, any port is matched. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#port}.
          @attr name android:port
        */
        public: static const int AndroidManifestData_port = 3;
        /**
          <p>
          @attr description
           Specify a URI scheme that is handled, as per
             {@link android.content.IntentFilter#addDataScheme
             IntentFilter.addDataScheme()}.
             <p><em>Note: scheme matching in the Android framework is
             case-sensitive, unlike the formal RFC.  As a result,
             schemes here should always use lower case letters.</em></p> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scheme}.
          @attr name android:scheme
        */
        public: static const int AndroidManifestData_scheme = 1;
        /**
          <p>
          @attr description
           Specify a URI scheme specific part that must exactly match, as per
             {@link android.content.IntentFilter#addDataSchemeSpecificPart
             IntentFilter.addDataSchemeSpecificPart()} with
             {@link android.os.PatternMatcher#PATTERN_LITERAL}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ssp}.
          @attr name android:ssp
        */
        public: static const int AndroidManifestData_ssp = 7;
        /**
          <p>
          @attr description
           Specify a URI scheme specific part that matches a simple pattern, as per
             {@link android.content.IntentFilter#addDataSchemeSpecificPart
             IntentFilter.addDataSchemeSpecificPart()} with
             {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
             Note that because '\' is used as an escape character when
             reading the string from XML (before it is parsed as a pattern),
             you will need to double-escape: for example a literal "*" would
             be written as "\\*" and a literal "\" would be written as
             "\\\\".  This is basically the same as what you would need to
             write if constructing the string in Java code. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#sspPattern}.
          @attr name android:sspPattern
        */
        public: static const int AndroidManifestData_sspPattern = 9;
        /**
          <p>
          @attr description
           Specify a URI scheme specific part that must be a prefix to match, as per
             {@link android.content.IntentFilter#addDataSchemeSpecificPart
             IntentFilter.addDataSchemeSpecificPart()} with
             {@link android.os.PatternMatcher#PATTERN_PREFIX}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#sspPrefix}.
          @attr name android:sspPrefix
        */
        public: static const int AndroidManifestData_sspPrefix = 8;
        /**  The <code>feature-group</code> tag specifies
         a set of one or more <code>uses-feature</code> elements that
         the application can utilize. An application uses multiple
         <code>feature-group</code> sets to indicate that it can support
         different combinations of features.

         <p>This appears as a child tag of the root
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestFeatureGroup_label android:label}</code></td><td> The human-readable name of the feature group.</td></tr>
           </table>
           @see #AndroidManifestFeatureGroup_label
         */
        public: static const int AndroidManifestFeatureGroup[1];
        /**
          <p>
          @attr description
           The human-readable name of the feature group. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestFeatureGroup_label = 0;
        /**  Attributes that can be supplied in an AndroidManifest.xml
         <code>grant-uri-permission</code> tag, a child of the
         {@link #AndroidManifestProvider provider} tag, describing a specific
         URI path that can be granted as a permission.  This tag can be
         specified multiple time to supply multiple paths. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestGrantUriPermission_path android:path}</code></td><td> Specify a URI path that must exactly match, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
           <tr><td><code>{@link #AndroidManifestGrantUriPermission_pathPattern android:pathPattern}</code></td><td> Specify a URI path that matches a simple pattern, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
           <tr><td><code>{@link #AndroidManifestGrantUriPermission_pathPrefix android:pathPrefix}</code></td><td> Specify a URI path that must be a prefix to match, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
           </table>
           @see #AndroidManifestGrantUriPermission_path
           @see #AndroidManifestGrantUriPermission_pathPattern
           @see #AndroidManifestGrantUriPermission_pathPrefix
         */
        public: static const int AndroidManifestGrantUriPermission[3];
        /**
          <p>
          @attr description
           Specify a URI path that must exactly match, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_LITERAL}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#path}.
          @attr name android:path
        */
        public: static const int AndroidManifestGrantUriPermission_path = 0;
        /**
          <p>
          @attr description
           Specify a URI path that matches a simple pattern, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}. 
             Note that because '\' is used as an escape character when
             reading the string from XML (before it is parsed as a pattern),
             you will need to double-escape: for example a literal "*" would
             be written as "\\*" and a literal "\" would be written as
             "\\\\".  This is basically the same as what you would need to
             write if constructing the string in Java code. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pathPattern}.
          @attr name android:pathPattern
        */
        public: static const int AndroidManifestGrantUriPermission_pathPattern = 2;
        /**
          <p>
          @attr description
           Specify a URI path that must be a prefix to match, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_PREFIX}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pathPrefix}.
          @attr name android:pathPrefix
        */
        public: static const int AndroidManifestGrantUriPermission_pathPrefix = 1;
        /**  Attributes that can be supplied in an AndroidManifest.xml
         <code>instrumentation</code> tag, a child of the root
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestInstrumentation_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestInstrumentation_functionalTest android:functionalTest}</code></td><td> Flag indicating that an Instrumentation class should be run as a
         functional test.</td></tr>
           <tr><td><code>{@link #AndroidManifestInstrumentation_handleProfiling android:handleProfiling}</code></td><td> Flag indicating that an Instrumentation class wants to take care
         of starting/stopping profiling itself, rather than relying on
         the default behavior of profiling the complete time it is running.</td></tr>
           <tr><td><code>{@link #AndroidManifestInstrumentation_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestInstrumentation_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestInstrumentation_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestInstrumentation_name android:name}</code></td><td> Required name of the class implementing the instrumentation, deriving from
            {@link android.app.Instrumentation}.</td></tr>
           <tr><td><code>{@link #AndroidManifestInstrumentation_targetPackage android:targetPackage}</code></td><td> The name of the application package that an Instrumentation object
         will run against.</td></tr>
           </table>
           @see #AndroidManifestInstrumentation_banner
           @see #AndroidManifestInstrumentation_functionalTest
           @see #AndroidManifestInstrumentation_handleProfiling
           @see #AndroidManifestInstrumentation_icon
           @see #AndroidManifestInstrumentation_label
           @see #AndroidManifestInstrumentation_logo
           @see #AndroidManifestInstrumentation_name
           @see #AndroidManifestInstrumentation_targetPackage
         */
        public: static const int AndroidManifestInstrumentation[8];
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestInstrumentation_banner = 7;
        /**
          <p>
          @attr description
           Flag indicating that an Instrumentation class should be run as a
         functional test. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#functionalTest}.
          @attr name android:functionalTest
        */
        public: static const int AndroidManifestInstrumentation_functionalTest = 5;
        /**
          <p>
          @attr description
           Flag indicating that an Instrumentation class wants to take care
         of starting/stopping profiling itself, rather than relying on
         the default behavior of profiling the complete time it is running.
         This allows it to target profiling data at a specific set of
         operations. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#handleProfiling}.
          @attr name android:handleProfiling
        */
        public: static const int AndroidManifestInstrumentation_handleProfiling = 4;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestInstrumentation_icon = 1;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestInstrumentation_label = 0;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestInstrumentation_logo = 6;
        /**
          <p>
          @attr description
           Required name of the class implementing the instrumentation, deriving from
            {@link android.app.Instrumentation}.  This is a fully
            qualified class name (for example, com.mycompany.myapp.MyActivity); as a
            short-hand if the first character of the class
            is a period then it is appended to your package name. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestInstrumentation_name = 2;
        /**
          <p>
          @attr description
           The name of the application package that an Instrumentation object
         will run against. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#targetPackage}.
          @attr name android:targetPackage
        */
        public: static const int AndroidManifestInstrumentation_targetPackage = 3;
        /**  The <code>intent-filter</code> tag is used to construct an
         {@link android.content.IntentFilter} object that will be used
         to determine which component can handle a particular
         {@link android.content.Intent} that has been given to the system.
         It can be used as a child of the
         {@link #AndroidManifestActivity activity},
         {@link #AndroidManifestReceiver receiver} and 
         {@link #AndroidManifestService service}
         tags.
         
         <p> Zero or more {@link #AndroidManifestAction action},
         {@link #AndroidManifestCategory category}, and/or
         {@link #AndroidManifestData data} tags should be
         included inside to describe the contents of the filter.
         
         <p> The optional label and icon attributes here are used with
         an activity to supply an alternative description of that activity
         when it is being started through an Intent matching this filter. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestIntentFilter_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestIntentFilter_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestIntentFilter_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestIntentFilter_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestIntentFilter_priority android:priority}</code></td><td> Specify the relative importance or ability in handling a particular
         Intent.</td></tr>
           </table>
           @see #AndroidManifestIntentFilter_banner
           @see #AndroidManifestIntentFilter_icon
           @see #AndroidManifestIntentFilter_label
           @see #AndroidManifestIntentFilter_logo
           @see #AndroidManifestIntentFilter_priority
         */
        public: static const int AndroidManifestIntentFilter[5];
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestIntentFilter_banner = 4;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestIntentFilter_icon = 1;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestIntentFilter_label = 0;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestIntentFilter_logo = 3;
        /**
          <p>
          @attr description
           Specify the relative importance or ability in handling a particular
         Intent.  For receivers, this controls the order in which they are
         executed to receive a broadcast (note that for
         asynchronous broadcasts, this order is ignored).  For activities,
         this provides information about how good an activity is handling an
         Intent; when multiple activities match an intent and have different
         priorities, only those with the higher priority value will be
         considered a match.
         
         <p>Only use if you really need to impose some specific
         order in which the broadcasts are received, or want to forcibly
         place an activity to always be preferred over others.  The value is a
         single integer, with higher numbers considered to be better. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#priority}.
          @attr name android:priority
        */
        public: static const int AndroidManifestIntentFilter_priority = 2;
        /** Attributes that can be used with a AndroidManifestKeySet.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestKeySet_name android:name}</code></td><td> A unique name for the given item.</td></tr>
           </table>
           @see #AndroidManifestKeySet_name
         */
        public: static const int AndroidManifestKeySet[1];
        /**
          <p>
          @attr description
           A unique name for the given item.  This must use a Java-style naming
         convention to ensure the name is unique, for example
         "com.mycompany.MyName". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestKeySet_name = 0;
        /**  The <code>library</code> tag declares that this apk is providing itself
         as a shared library for other applications to use.  It can only be used
         with apks that are built in to the system image.  Other apks can link to
         it with the {@link #AndroidManifestUsesLibrary uses-library} tag.

         <p>This appears as a child tag of the
         {@link #AndroidManifestApplication application} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestLibrary_name android:name}</code></td><td> Required public name of the library, which other components and
        packages will use when referring to this library.</td></tr>
           </table>
           @see #AndroidManifestLibrary_name
         */
        public: static const int AndroidManifestLibrary[1];
        /**
          <p>
          @attr description
           Required public name of the library, which other components and
        packages will use when referring to this library.  This is a string using
        Java-style scoping to ensure it is unique.  The name should typically
        be the same as the apk's package name. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestLibrary_name = 0;
        /**  The <code>meta-data</code> tag is used to attach additional
         arbitrary data to an application component.  The data can later
         be retrieved programmatically from the
         {@link android.content.pm.ComponentInfo#metaData
         ComponentInfo.metaData} field.  There is no meaning given to this
         data by the system.  You may supply the data through either the
         <code>value</code> or <code>resource</code> attribute; if both
         are given, then <code>resource</code> will be used.
         
         <p>It is highly recommended that you avoid supplying related data as
         multiple separate meta-data entries.  Instead, if you have complex
         data to associate with a component, then use the <code>resource</code>
         attribute to assign an XML resource that the client can parse to
         retrieve the complete data. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestMetaData_name android:name}</code></td><td> A unique name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestMetaData_resource android:resource}</code></td><td> Resource identifier to assign to this piece of named meta-data.</td></tr>
           <tr><td><code>{@link #AndroidManifestMetaData_value android:value}</code></td><td> Concrete value to assign to this piece of named meta-data.</td></tr>
           </table>
           @see #AndroidManifestMetaData_name
           @see #AndroidManifestMetaData_resource
           @see #AndroidManifestMetaData_value
         */
        public: static const int AndroidManifestMetaData[3];
        /**
          <p>
          @attr description
           A unique name for the given item.  This must use a Java-style naming
         convention to ensure the name is unique, for example
         "com.mycompany.MyName". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestMetaData_name = 0;
        /**
          <p>
          @attr description
           Resource identifier to assign to this piece of named meta-data.
             The resource identifier can later be retrieved from the meta data
             Bundle through {@link android.os.Bundle#getInt Bundle.getInt}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#resource}.
          @attr name android:resource
        */
        public: static const int AndroidManifestMetaData_resource = 2;
        /**
          <p>
          @attr description
           Concrete value to assign to this piece of named meta-data.
             The data can later be retrieved from the meta data Bundle
             through {@link android.os.Bundle#getString Bundle.getString},
             {@link android.os.Bundle#getInt Bundle.getInt},
             {@link android.os.Bundle#getBoolean Bundle.getBoolean},
             or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
             on the type used here. 


          <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>May be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#value}.
          @attr name android:value
        */
        public: static const int AndroidManifestMetaData_value = 1;
        /**  Private tag to declare the original package name that this package is
         based on.  Only used for packages installed in the system image.  If
         given, and different than the actual package name, and the given
         original package was previously installed on the device but the new
         one was not, then the data for the old one will be renamed to be
         for the new package.

         <p>This appears as a child tag of the root
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestOriginalPackage_name android:name}</code></td><td> A unique name for the given item.</td></tr>
           </table>
           @see #AndroidManifestOriginalPackage_name
         */
        public: static const int AndroidManifestOriginalPackage[1];
        /**
          <p>
          @attr description
           A unique name for the given item.  This must use a Java-style naming
         convention to ensure the name is unique, for example
         "com.mycompany.MyName". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestOriginalPackage_name = 0;
        /**  Attributes relating to a package verifier. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestPackageVerifier_name android:name}</code></td><td> Specifies the Java-style package name that defines this
             package verifier.</td></tr>
           <tr><td><code>{@link #AndroidManifestPackageVerifier_publicKey android:publicKey}</code></td><td> The Base64 encoded public key of the package verifier's
             signature.</td></tr>
           </table>
           @see #AndroidManifestPackageVerifier_name
           @see #AndroidManifestPackageVerifier_publicKey
         */
        public: static const int AndroidManifestPackageVerifier[2];
        /**
          <p>
          @attr description
           Specifies the Java-style package name that defines this
             package verifier. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestPackageVerifier_name = 0;
        /**
          <p>
          @attr description
           The Base64 encoded public key of the package verifier's
             signature. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#publicKey}.
          @attr name android:publicKey
        */
        public: static const int AndroidManifestPackageVerifier_publicKey = 1;
        /**  Attributes that can be supplied in an AndroidManifest.xml
         <code>path-permission</code> tag, a child of the
         {@link #AndroidManifestProvider provider} tag, describing a permission
         that allows access to a specific path in the provider.  This tag can be
         specified multiple time to supply multiple paths. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestPathPermission_path android:path}</code></td><td> Specify a URI path that must exactly match, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
           <tr><td><code>{@link #AndroidManifestPathPermission_pathPattern android:pathPattern}</code></td><td> Specify a URI path that matches a simple pattern, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
           <tr><td><code>{@link #AndroidManifestPathPermission_pathPrefix android:pathPrefix}</code></td><td> Specify a URI path that must be a prefix to match, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
           <tr><td><code>{@link #AndroidManifestPathPermission_permission android:permission}</code></td><td> Specify a permission that a client is required to have in order to
    	 use the associated object.</td></tr>
           <tr><td><code>{@link #AndroidManifestPathPermission_readPermission android:readPermission}</code></td><td> A specific {@link android.R.attr#permission} name for read-only
         access to a {@link android.content.ContentProvider}.</td></tr>
           <tr><td><code>{@link #AndroidManifestPathPermission_writePermission android:writePermission}</code></td><td> A specific {@link android.R.attr#permission} name for write
         access to a {@link android.content.ContentProvider}.</td></tr>
           </table>
           @see #AndroidManifestPathPermission_path
           @see #AndroidManifestPathPermission_pathPattern
           @see #AndroidManifestPathPermission_pathPrefix
           @see #AndroidManifestPathPermission_permission
           @see #AndroidManifestPathPermission_readPermission
           @see #AndroidManifestPathPermission_writePermission
         */
        public: static const int AndroidManifestPathPermission[6];
        /**
          <p>
          @attr description
           Specify a URI path that must exactly match, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_LITERAL}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#path}.
          @attr name android:path
        */
        public: static const int AndroidManifestPathPermission_path = 3;
        /**
          <p>
          @attr description
           Specify a URI path that matches a simple pattern, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}. 
             Note that because '\' is used as an escape character when
             reading the string from XML (before it is parsed as a pattern),
             you will need to double-escape: for example a literal "*" would
             be written as "\\*" and a literal "\" would be written as
             "\\\\".  This is basically the same as what you would need to
             write if constructing the string in Java code. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pathPattern}.
          @attr name android:pathPattern
        */
        public: static const int AndroidManifestPathPermission_pathPattern = 5;
        /**
          <p>
          @attr description
           Specify a URI path that must be a prefix to match, as per
             {@link android.os.PatternMatcher} with
             {@link android.os.PatternMatcher#PATTERN_PREFIX}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pathPrefix}.
          @attr name android:pathPrefix
        */
        public: static const int AndroidManifestPathPermission_pathPrefix = 4;
        /**
          <p>
          @attr description
           Specify a permission that a client is required to have in order to
    	 use the associated object.  If the client does not hold the named
    	 permission, its request will fail.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#permission}.
          @attr name android:permission
        */
        public: static const int AndroidManifestPathPermission_permission = 0;
        /**
          <p>
          @attr description
           A specific {@link android.R.attr#permission} name for read-only
         access to a {@link android.content.ContentProvider}.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#readPermission}.
          @attr name android:readPermission
        */
        public: static const int AndroidManifestPathPermission_readPermission = 1;
        /**
          <p>
          @attr description
           A specific {@link android.R.attr#permission} name for write
         access to a {@link android.content.ContentProvider}.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#writePermission}.
          @attr name android:writePermission
        */
        public: static const int AndroidManifestPathPermission_writePermission = 2;
        /**  The <code>permission</code> tag declares a security permission that can be
         used to control access from other packages to specific components or
         features in your package (or other packages).  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions.
         
         <p>This appears as a child tag of the root
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestPermission_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermission_description android:description}</code></td><td> Descriptive text for the associated data.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermission_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermission_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermission_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermission_name android:name}</code></td><td> Required public name of the permission, which other components and
        packages will use when referring to this permission.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermission_permissionFlags android:permissionFlags}</code></td><td> Flags indicating more context for a permission.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermission_permissionGroup android:permissionGroup}</code></td><td> Specified the name of a group that this permission is associated
         with.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermission_protectionLevel android:protectionLevel}</code></td><td> Characterizes the potential risk implied in a permission and
         indicates the procedure the system should follow when determining
         whether to grant the permission to an application requesting it.</td></tr>
           </table>
           @see #AndroidManifestPermission_banner
           @see #AndroidManifestPermission_description
           @see #AndroidManifestPermission_icon
           @see #AndroidManifestPermission_label
           @see #AndroidManifestPermission_logo
           @see #AndroidManifestPermission_name
           @see #AndroidManifestPermission_permissionFlags
           @see #AndroidManifestPermission_permissionGroup
           @see #AndroidManifestPermission_protectionLevel
         */
        public: static const int AndroidManifestPermission[9];
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestPermission_banner = 8;
        /**
          <p>
          @attr description
           Descriptive text for the associated data. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int AndroidManifestPermission_description = 5;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestPermission_icon = 1;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestPermission_label = 0;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestPermission_logo = 6;
        /**
          <p>
          @attr description
           Required public name of the permission, which other components and
        packages will use when referring to this permission.  This is a string using
        Java-style scoping to ensure it is unique.  The prefix will often
        be the same as our overall package name, for example
        "com.mycompany.android.myapp.SomePermission". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestPermission_name = 2;
        /**
          <p>
          @attr description
           Flags indicating more context for a permission. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>costsMoney</code></td><td>0x0001</td><td> Set to indicate that this permission allows an operation that
             may cost the user money.  Such permissions may be highlighted
             when shown to the user with this additional information.  </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#permissionFlags}.
          @attr name android:permissionFlags
        */
        public: static const int AndroidManifestPermission_permissionFlags = 7;
        /**
          <p>
          @attr description
           Specified the name of a group that this permission is associated
         with.  The group must have been defined with the
         {@link android.R.styleable#AndroidManifestPermissionGroup permission-group} tag. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#permissionGroup}.
          @attr name android:permissionGroup
        */
        public: static const int AndroidManifestPermission_permissionGroup = 4;
        /**
          <p>
          @attr description
           Characterizes the potential risk implied in a permission and
         indicates the procedure the system should follow when determining
         whether to grant the permission to an application requesting it. {@link
         android.Manifest.permission Standard permissions} have a predefined and
         permanent protectionLevel. If you are creating a custom permission in an
         application, you can define a protectionLevel attribute with one of the
         values listed below. If no protectionLevel is defined for a custom
         permission, the system assigns the default ("normal"). 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> A lower-risk permission that gives an application access to isolated
             application-level features, with minimal risk to other applications,
             the system, or the user. The system automatically grants this type
             of permission to a requesting application at installation, without
             asking for the user's explicit approval (though the user always
             has the option to review these permissions before installing). </td></tr>
<tr><td><code>dangerous</code></td><td>1</td><td> A higher-risk permission that would give a requesting application
             access to private user data or control over the device that can
             negatively impact the user.  Because this type of permission
             introduces potential risk, the system may not automatically
             grant it to the requesting application.  For example, any dangerous
             permissions requested by an application may be displayed to the
             user and require confirmation before proceeding, or some other
             approach may be taken to avoid the user automatically allowing
             the use of such facilities.  </td></tr>
<tr><td><code>signature</code></td><td>2</td><td> A permission that the system is to grant only if the requesting
             application is signed with the same certificate as the application
             that declared the permission. If the certificates match, the system
             automatically grants the permission without notifying the user or
             asking for the user's explicit approval. </td></tr>
<tr><td><code>signatureOrSystem</code></td><td>3</td><td> A permission that the system is to grant only to packages in the
             Android system image <em>or</em> that are signed with the same
             certificates. Please avoid using this option, as the
             signature protection level should be sufficient for most needs and
             works regardless of exactly where applications are installed.  This
             permission is used for certain special situations where multiple
             vendors have applications built in to a system image which need
             to share specific features explicitly because they are being built
             together. </td></tr>
<tr><td><code>system</code></td><td>0x10</td><td> Additional flag from base permission type: this permission can also
             be granted to any applications installed on the system image.
             Please avoid using this option, as the
             signature protection level should be sufficient for most needs and
             works regardless of exactly where applications are installed.  This
             permission flag is used for certain special situations where multiple
             vendors have applications built in to a system image which need
             to share specific features explicitly because they are being built
             together. </td></tr>
<tr><td><code>development</code></td><td>0x20</td><td> Additional flag from base permission type: this permission can also
             (optionally) be granted to development applications. </td></tr>
<tr><td><code>appop</code></td><td>0x40</td><td> Additional flag from base permission type: this permission is closely
             associated with an app op for controlling access. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#protectionLevel}.
          @attr name android:protectionLevel
        */
        public: static const int AndroidManifestPermission_protectionLevel = 3;
        /**  The <code>permission-group</code> tag declares a logical grouping of
         related permissions.
         
         <p>Note that this tag does not declare a permission itself, only
         a namespace in which further permissions can be placed.  See
         the {@link #AndroidManifestPermission &lt;permission&gt;} tag for
         more information.
         
         <p>This appears as a child tag of the root
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestPermissionGroup_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionGroup_description android:description}</code></td><td> Descriptive text for the associated data.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionGroup_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionGroup_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionGroup_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionGroup_name android:name}</code></td><td> Required public name of the permission group, permissions will use
        to specify the group they are in.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionGroup_permissionGroupFlags android:permissionGroupFlags}</code></td><td> Flags indicating more context for a permission group.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionGroup_priority android:priority}</code></td><td> Specify the relative importance or ability in handling a particular
         Intent.</td></tr>
           </table>
           @see #AndroidManifestPermissionGroup_banner
           @see #AndroidManifestPermissionGroup_description
           @see #AndroidManifestPermissionGroup_icon
           @see #AndroidManifestPermissionGroup_label
           @see #AndroidManifestPermissionGroup_logo
           @see #AndroidManifestPermissionGroup_name
           @see #AndroidManifestPermissionGroup_permissionGroupFlags
           @see #AndroidManifestPermissionGroup_priority
         */
        public: static const int AndroidManifestPermissionGroup[8];
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestPermissionGroup_banner = 7;
        /**
          <p>
          @attr description
           Descriptive text for the associated data. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int AndroidManifestPermissionGroup_description = 4;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestPermissionGroup_icon = 1;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestPermissionGroup_label = 0;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestPermissionGroup_logo = 5;
        /**
          <p>
          @attr description
           Required public name of the permission group, permissions will use
        to specify the group they are in.  This is a string using
        Java-style scoping to ensure it is unique.  The prefix will often
        be the same as our overall package name, for example
        "com.mycompany.android.myapp.SomePermission". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestPermissionGroup_name = 2;
        /**
          <p>
          @attr description
           Flags indicating more context for a permission group. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>personalInfo</code></td><td>0x0001</td><td> Set to indicate that this permission group contains permissions
             protecting access to some information that is considered
             personal to the user (such as contacts, e-mails, etc). </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#permissionGroupFlags}.
          @attr name android:permissionGroupFlags
        */
        public: static const int AndroidManifestPermissionGroup_permissionGroupFlags = 6;
        /**
          <p>
          @attr description
           Specify the relative importance or ability in handling a particular
         Intent.  For receivers, this controls the order in which they are
         executed to receive a broadcast (note that for
         asynchronous broadcasts, this order is ignored).  For activities,
         this provides information about how good an activity is handling an
         Intent; when multiple activities match an intent and have different
         priorities, only those with the higher priority value will be
         considered a match.
         
         <p>Only use if you really need to impose some specific
         order in which the broadcasts are received, or want to forcibly
         place an activity to always be preferred over others.  The value is a
         single integer, with higher numbers considered to be better. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#priority}.
          @attr name android:priority
        */
        public: static const int AndroidManifestPermissionGroup_priority = 3;
        /**  The <code>permission-tree</code> tag declares the base of a tree of
         permission values: it declares that this package has ownership of
         the given permission name, as well as all names underneath it
         (separated by '.').  This allows you to use the
         {@link android.content.pm.PackageManager#addPermission
         PackageManager.addPermission()} method to dynamically add new
         permissions under this tree.
         
         <p>Note that this tag does not declare a permission itself, only
         a namespace in which further permissions can be placed.  See
         the {@link #AndroidManifestPermission &lt;permission&gt;} tag for
         more information.
         
         <p>This appears as a child tag of the root
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestPermissionTree_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionTree_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionTree_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionTree_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPermissionTree_name android:name}</code></td><td> Required public name of the permission tree, which is the base name
        of all permissions under it.</td></tr>
           </table>
           @see #AndroidManifestPermissionTree_banner
           @see #AndroidManifestPermissionTree_icon
           @see #AndroidManifestPermissionTree_label
           @see #AndroidManifestPermissionTree_logo
           @see #AndroidManifestPermissionTree_name
         */
        public: static const int AndroidManifestPermissionTree[5];
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestPermissionTree_banner = 4;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestPermissionTree_icon = 1;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestPermissionTree_label = 0;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestPermissionTree_logo = 3;
        /**
          <p>
          @attr description
           Required public name of the permission tree, which is the base name
        of all permissions under it.  This is a string using
        Java-style scoping to ensure it is unique.  The prefix will often
        be the same as our overall package name, for example
        "com.mycompany.android.myapp.SomePermission".  A permission tree name
        must have more than two segments in its path; that is,
        "com.me.foo" is okay, but not "com.me" or "com". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestPermissionTree_name = 2;
        /**  Private tag to declare system protected broadcast actions.

         <p>This appears as a child tag of the root
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestProtectedBroadcast_name android:name}</code></td><td> A unique name for the given item.</td></tr>
           </table>
           @see #AndroidManifestProtectedBroadcast_name
         */
        public: static const int AndroidManifestProtectedBroadcast[1];
        /**
          <p>
          @attr description
           A unique name for the given item.  This must use a Java-style naming
         convention to ensure the name is unique, for example
         "com.mycompany.MyName". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestProtectedBroadcast_name = 0;
        /**  The <code>provider</code> tag declares a
         {@link android.content.ContentProvider} class that is available
         as part of the package's application components, supplying structured
         access to data managed by the application.
         
         <p>This appears as a child tag of the
         {@link #AndroidManifestApplication application} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestProvider_authorities android:authorities}</code></td><td> Specify the authorities under which this content provider can be
         found.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_description android:description}</code></td><td> Descriptive text for the associated data.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_enabled android:enabled}</code></td><td> Specify whether this provider is enabled or not (that is, can be instantiated by the system).</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_exported android:exported}</code></td><td> Flag indicating whether the given application component is available
         to other applications.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_grantUriPermissions android:grantUriPermissions}</code></td><td> If true, the {@link android.content.Context#grantUriPermission
         Context.grantUriPermission} or corresponding Intent flags can
         be used to allow others to access specific URIs in the content
         provider, even if they do not have an explicit read or write
         permission.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_initOrder android:initOrder}</code></td><td> Specify the order in which content providers hosted by a process
         are instantiated when that process is created.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_multiprocess android:multiprocess}</code></td><td> Specify whether a component is allowed to have multiple instances
         of itself running in different processes.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_name android:name}</code></td><td> Required name of the class implementing the provider, deriving from
            {@link android.content.ContentProvider}.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_permission android:permission}</code></td><td> Specify a permission that a client is required to have in order to
    	 use the associated object.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_process android:process}</code></td><td> Specify a specific process that the associated code is to run in.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_readPermission android:readPermission}</code></td><td> A specific {@link android.R.attr#permission} name for read-only
         access to a {@link android.content.ContentProvider}.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_singleUser android:singleUser}</code></td><td> If set to true, a single instance of this component will run for
         all users.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_syncable android:syncable}</code></td><td> Flag indicating whether this content provider would like to
         participate in data synchronization.</td></tr>
           <tr><td><code>{@link #AndroidManifestProvider_writePermission android:writePermission}</code></td><td> A specific {@link android.R.attr#permission} name for write
         access to a {@link android.content.ContentProvider}.</td></tr>
           </table>
           @see #AndroidManifestProvider_authorities
           @see #AndroidManifestProvider_banner
           @see #AndroidManifestProvider_description
           @see #AndroidManifestProvider_enabled
           @see #AndroidManifestProvider_exported
           @see #AndroidManifestProvider_grantUriPermissions
           @see #AndroidManifestProvider_icon
           @see #AndroidManifestProvider_initOrder
           @see #AndroidManifestProvider_label
           @see #AndroidManifestProvider_logo
           @see #AndroidManifestProvider_multiprocess
           @see #AndroidManifestProvider_name
           @see #AndroidManifestProvider_permission
           @see #AndroidManifestProvider_process
           @see #AndroidManifestProvider_readPermission
           @see #AndroidManifestProvider_singleUser
           @see #AndroidManifestProvider_syncable
           @see #AndroidManifestProvider_writePermission
         */
        public: static const int AndroidManifestProvider[18];
        /**
          <p>
          @attr description
           Specify the authorities under which this content provider can be
         found.  Multiple authorities may be supplied by separating them
         with a semicolon.  Authority names should use a Java-style naming
         convention (such as <code>com.google.provider.MyProvider</code>)
         in order to avoid conflicts.  Typically this name is the same
         as the class implementation describing the provider's data structure. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#authorities}.
          @attr name android:authorities
        */
        public: static const int AndroidManifestProvider_authorities = 10;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestProvider_banner = 17;
        /**
          <p>
          @attr description
           Descriptive text for the associated data. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int AndroidManifestProvider_description = 14;
        /**
          <p>
          @attr description
           Specify whether this provider is enabled or not (that is, can be instantiated by the system).
             It can also be specified for an application as a whole, in which case a value of "false"
             will override any component specific values (a value of "true" will not override the
             component specific values). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public: static const int AndroidManifestProvider_enabled = 6;
        /**
          <p>
          @attr description
           Flag indicating whether the given application component is available
         to other applications.  If false, it can only be accessed by
         applications with its same user id (which usually means only by
         code in its own package).  If true, it can be invoked by external
         entities, though which ones can do so may be controlled through
         permissions.  The default value is false for activity, receiver,
         and service components that do not specify any intent filters; it
         is true for activity, receiver, and service components that do
         have intent filters (implying they expect to be invoked by others
         who do not know their particular component name) and for all
         content providers. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#exported}.
          @attr name android:exported
        */
        public: static const int AndroidManifestProvider_exported = 7;
        /**
          <p>
          @attr description
           If true, the {@link android.content.Context#grantUriPermission
         Context.grantUriPermission} or corresponding Intent flags can
         be used to allow others to access specific URIs in the content
         provider, even if they do not have an explicit read or write
         permission.  If you are supporting this feature, you must be
         sure to call {@link android.content.Context#revokeUriPermission
         Context.revokeUriPermission} when URIs are deleted from your
         provider.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#grantUriPermissions}.
          @attr name android:grantUriPermissions
        */
        public: static const int AndroidManifestProvider_grantUriPermissions = 13;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestProvider_icon = 1;
        /**
          <p>
          @attr description
           Specify the order in which content providers hosted by a process
         are instantiated when that process is created.  Not needed unless
         you have providers with dependencies between each other, to make
         sure that they are created in the order needed by those dependencies.
         The value is a simple integer, with higher numbers being
         initialized first. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#initOrder}.
          @attr name android:initOrder
        */
        public: static const int AndroidManifestProvider_initOrder = 12;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestProvider_label = 0;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestProvider_logo = 15;
        /**
          <p>
          @attr description
           Specify whether a component is allowed to have multiple instances
         of itself running in different processes.  Use with the activity
         and provider tags.
    
         <p>Normally the system will ensure that all instances of a particular
         component are only running in a single process.  You can use this
         attribute to disable that behavior, allowing the system to create
         instances wherever they are used (provided permissions allow it).
         This is most often used with content providers, so that instances
         of a provider can be created in each client process, allowing them
         to be used without performing IPC.  


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#multiprocess}.
          @attr name android:multiprocess
        */
        public: static const int AndroidManifestProvider_multiprocess = 9;
        /**
          <p>
          @attr description
           Required name of the class implementing the provider, deriving from
            {@link android.content.ContentProvider}.  This is a fully
            qualified class name (for example, com.mycompany.myapp.MyProvider); as a
            short-hand if the first character of the class
            is a period then it is appended to your package name. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestProvider_name = 2;
        /**
          <p>
          @attr description
           Specify a permission that a client is required to have in order to
    	 use the associated object.  If the client does not hold the named
    	 permission, its request will fail.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#permission}.
          @attr name android:permission
        */
        public: static const int AndroidManifestProvider_permission = 3;
        /**
          <p>
          @attr description
           Specify a specific process that the associated code is to run in.
         Use with the application tag (to supply a default process for all
         application components), or with the activity, receiver, service,
         or provider tag (to supply a specific icon for that component).
    
         <p>Application components are normally run in a single process that
         is created for the entire application.  You can use this tag to modify
         where they run.  If the process name begins with a ':' character,
         a new process private to that application will be created when needed
         to run that component (allowing you to spread your application across
         multiple processes).  If the process name begins with a lower-case
         character, the component will be run in a global process of that name,
         provided that you have permission to do so, allowing multiple
         applications to share one process to reduce resource usage. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#process}.
          @attr name android:process
        */
        public: static const int AndroidManifestProvider_process = 8;
        /**
          <p>
          @attr description
           A specific {@link android.R.attr#permission} name for read-only
         access to a {@link android.content.ContentProvider}.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#readPermission}.
          @attr name android:readPermission
        */
        public: static const int AndroidManifestProvider_readPermission = 4;
        /**
          <p>
          @attr description
           If set to true, a single instance of this component will run for
         all users.  That instance will run as user 0, the default/primary
         user.  When the app running is in processes for other users and interacts
         with this component (by binding to a service for example) those processes will
         always interact with the instance running for user 0.  Enabling
         single user mode forces "exported" of the component to be false, to
         help avoid introducing multi-user security bugs.  This feature is only
         available to applications built in to the system image; you must hold the
         permission INTERACT_ACROSS_USERS in order
         to use this feature.  This flag can only be used with services,
         receivers, and providers; it can not be used with activities. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#singleUser}.
          @attr name android:singleUser
        */
        public: static const int AndroidManifestProvider_singleUser = 16;
        /**
          <p>
          @attr description
           Flag indicating whether this content provider would like to
         participate in data synchronization. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#syncable}.
          @attr name android:syncable
        */
        public: static const int AndroidManifestProvider_syncable = 11;
        /**
          <p>
          @attr description
           A specific {@link android.R.attr#permission} name for write
         access to a {@link android.content.ContentProvider}.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#writePermission}.
          @attr name android:writePermission
        */
        public: static const int AndroidManifestProvider_writePermission = 5;
        /** Attributes that can be used with a AndroidManifestPublicKey.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestPublicKey_name android:name}</code></td><td> A unique name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestPublicKey_value android:value}</code></td><td> Concrete value to assign to this piece of named meta-data.</td></tr>
           </table>
           @see #AndroidManifestPublicKey_name
           @see #AndroidManifestPublicKey_value
         */
        public: static const int AndroidManifestPublicKey[2];
        /**
          <p>
          @attr description
           A unique name for the given item.  This must use a Java-style naming
         convention to ensure the name is unique, for example
         "com.mycompany.MyName". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestPublicKey_name = 0;
        /**
          <p>
          @attr description
           Concrete value to assign to this piece of named meta-data.
             The data can later be retrieved from the meta data Bundle
             through {@link android.os.Bundle#getString Bundle.getString},
             {@link android.os.Bundle#getInt Bundle.getInt},
             {@link android.os.Bundle#getBoolean Bundle.getBoolean},
             or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
             on the type used here. 


          <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>May be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#value}.
          @attr name android:value
        */
        public: static const int AndroidManifestPublicKey_value = 1;
        /**  The <code>receiver</code> tag declares an
         {@link android.content.BroadcastReceiver} class that is available
         as part of the package's application components, allowing the
         application to receive actions or data broadcast by other
         applications even if it is not currently running.
         
         <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
         tags can be included inside of a receiver, to specify the Intents
         it will receive.  If none are specified, the receiver will only
         be run when an Intent is broadcast that is directed at its specific
         class name.  The receiver tag appears as a child tag of the
         {@link #AndroidManifestApplication application} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_description android:description}</code></td><td> Descriptive text for the associated data.</td></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_enabled android:enabled}</code></td><td> Specify whether the receiver is enabled or not (that is, can be instantiated by the system).</td></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_exported android:exported}</code></td><td> Flag indicating whether the given application component is available
         to other applications.</td></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_name android:name}</code></td><td> Required name of the class implementing the receiver, deriving from
            {@link android.content.BroadcastReceiver}.</td></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_permission android:permission}</code></td><td> Specify a permission that a client is required to have in order to
    	 use the associated object.</td></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_process android:process}</code></td><td> Specify a specific process that the associated code is to run in.</td></tr>
           <tr><td><code>{@link #AndroidManifestReceiver_singleUser android:singleUser}</code></td><td> If set to true, a single instance of this component will run for
         all users.</td></tr>
           </table>
           @see #AndroidManifestReceiver_banner
           @see #AndroidManifestReceiver_description
           @see #AndroidManifestReceiver_enabled
           @see #AndroidManifestReceiver_exported
           @see #AndroidManifestReceiver_icon
           @see #AndroidManifestReceiver_label
           @see #AndroidManifestReceiver_logo
           @see #AndroidManifestReceiver_name
           @see #AndroidManifestReceiver_permission
           @see #AndroidManifestReceiver_process
           @see #AndroidManifestReceiver_singleUser
         */
        public: static const int AndroidManifestReceiver[11];
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestReceiver_banner = 10;
        /**
          <p>
          @attr description
           Descriptive text for the associated data. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int AndroidManifestReceiver_description = 7;
        /**
          <p>
          @attr description
           Specify whether the receiver is enabled or not (that is, can be instantiated by the system).
             It can also be specified for an application as a whole, in which case a value of "false"
             will override any component specific values (a value of "true" will not override the
             component specific values). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public: static const int AndroidManifestReceiver_enabled = 4;
        /**
          <p>
          @attr description
           Flag indicating whether the given application component is available
         to other applications.  If false, it can only be accessed by
         applications with its same user id (which usually means only by
         code in its own package).  If true, it can be invoked by external
         entities, though which ones can do so may be controlled through
         permissions.  The default value is false for activity, receiver,
         and service components that do not specify any intent filters; it
         is true for activity, receiver, and service components that do
         have intent filters (implying they expect to be invoked by others
         who do not know their particular component name) and for all
         content providers. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#exported}.
          @attr name android:exported
        */
        public: static const int AndroidManifestReceiver_exported = 5;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestReceiver_icon = 1;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestReceiver_label = 0;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestReceiver_logo = 8;
        /**
          <p>
          @attr description
           Required name of the class implementing the receiver, deriving from
            {@link android.content.BroadcastReceiver}.  This is a fully
            qualified class name (for example, com.mycompany.myapp.MyReceiver); as a
            short-hand if the first character of the class
            is a period then it is appended to your package name. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestReceiver_name = 2;
        /**
          <p>
          @attr description
           Specify a permission that a client is required to have in order to
    	 use the associated object.  If the client does not hold the named
    	 permission, its request will fail.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#permission}.
          @attr name android:permission
        */
        public: static const int AndroidManifestReceiver_permission = 3;
        /**
          <p>
          @attr description
           Specify a specific process that the associated code is to run in.
         Use with the application tag (to supply a default process for all
         application components), or with the activity, receiver, service,
         or provider tag (to supply a specific icon for that component).
    
         <p>Application components are normally run in a single process that
         is created for the entire application.  You can use this tag to modify
         where they run.  If the process name begins with a ':' character,
         a new process private to that application will be created when needed
         to run that component (allowing you to spread your application across
         multiple processes).  If the process name begins with a lower-case
         character, the component will be run in a global process of that name,
         provided that you have permission to do so, allowing multiple
         applications to share one process to reduce resource usage. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#process}.
          @attr name android:process
        */
        public: static const int AndroidManifestReceiver_process = 6;
        /**
          <p>
          @attr description
           If set to true, a single instance of this component will run for
         all users.  That instance will run as user 0, the default/primary
         user.  When the app running is in processes for other users and interacts
         with this component (by binding to a service for example) those processes will
         always interact with the instance running for user 0.  Enabling
         single user mode forces "exported" of the component to be false, to
         help avoid introducing multi-user security bugs.  This feature is only
         available to applications built in to the system image; you must hold the
         permission INTERACT_ACROSS_USERS in order
         to use this feature.  This flag can only be used with services,
         receivers, and providers; it can not be used with activities. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#singleUser}.
          @attr name android:singleUser
        */
        public: static const int AndroidManifestReceiver_singleUser = 9;
        /**  Attributes relating to resource overlay packages. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestResourceOverlay_priority android:priority}</code></td><td> Load order of overlay package.</td></tr>
           <tr><td><code>{@link #AndroidManifestResourceOverlay_targetPackage android:targetPackage}</code></td><td> Package name of base package whose resources will be overlaid.</td></tr>
           </table>
           @see #AndroidManifestResourceOverlay_priority
           @see #AndroidManifestResourceOverlay_targetPackage
         */
        public: static const int AndroidManifestResourceOverlay[2];
        /**
          <p>
          @attr description
           Load order of overlay package. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#priority}.
          @attr name android:priority
        */
        public: static const int AndroidManifestResourceOverlay_priority = 0;
        /**
          <p>
          @attr description
           Package name of base package whose resources will be overlaid. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#targetPackage}.
          @attr name android:targetPackage
        */
        public: static const int AndroidManifestResourceOverlay_targetPackage = 1;
        /**  The <code>service</code> tag declares a
         {@link android.app.Service} class that is available
         as part of the package's application components, implementing
         long-running background operations or a rich communication API
         that can be called by other packages.
         
         <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
         tags can be included inside of a service, to specify the Intents
         that can connect with it.  If none are specified, the service can
         only be accessed by direct specification of its class name.
         The service tag appears as a child tag of the
         {@link #AndroidManifestApplication application} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestService_banner android:banner}</code></td><td> A Drawable resource providing an extended graphical banner for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_description android:description}</code></td><td> Descriptive text for the associated data.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_enabled android:enabled}</code></td><td> Specify whether the service is enabled or not (that is, can be instantiated by the system).</td></tr>
           <tr><td><code>{@link #AndroidManifestService_exported android:exported}</code></td><td> Flag indicating whether the given application component is available
         to other applications.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_isolatedProcess android:isolatedProcess}</code></td><td> If set to true, this service will run under a special process
             that is isolated from the rest of the system.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_label android:label}</code></td><td> A user-legible name for the given item.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_logo android:logo}</code></td><td> A Drawable resource providing an extended graphical logo for its
         associated item.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_name android:name}</code></td><td> Required name of the class implementing the service, deriving from
            {@link android.app.Service}.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_permission android:permission}</code></td><td> Specify a permission that a client is required to have in order to
    	 use the associated object.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_process android:process}</code></td><td> Specify a specific process that the associated code is to run in.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_singleUser android:singleUser}</code></td><td> If set to true, a single instance of this component will run for
         all users.</td></tr>
           <tr><td><code>{@link #AndroidManifestService_stopWithTask android:stopWithTask}</code></td><td> If set to true, this service with be automatically stopped
             when the user remove a task rooted in an activity owned by
             the application.</td></tr>
           </table>
           @see #AndroidManifestService_banner
           @see #AndroidManifestService_description
           @see #AndroidManifestService_enabled
           @see #AndroidManifestService_exported
           @see #AndroidManifestService_icon
           @see #AndroidManifestService_isolatedProcess
           @see #AndroidManifestService_label
           @see #AndroidManifestService_logo
           @see #AndroidManifestService_name
           @see #AndroidManifestService_permission
           @see #AndroidManifestService_process
           @see #AndroidManifestService_singleUser
           @see #AndroidManifestService_stopWithTask
         */
        public: static const int AndroidManifestService[13];
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical banner for its
         associated item. Use with the application tag (to supply a default
         banner for all application activities), or with the activity, tag to
         supply a banner for a specific activity.

         <p>The given banner will be used to display to the user a graphical
         representation of an activity in the Leanback application launcher.
         Since banners are displayed only in the Leanback launcher, they should
         only be used with activities (and applications) that support Leanback
         mode. These are activities that handle Intents of category
         {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
         Intent.CATEGORY_LEANBACK_LAUNCHER}.
         <p>This must be a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#banner}.
          @attr name android:banner
        */
        public: static const int AndroidManifestService_banner = 12;
        /**
          <p>
          @attr description
           Descriptive text for the associated data. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int AndroidManifestService_description = 7;
        /**
          <p>
          @attr description
           Specify whether the service is enabled or not (that is, can be instantiated by the system).
             It can also be specified for an application as a whole, in which case a value of "false"
             will override any component specific values (a value of "true" will not override the
             component specific values). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public: static const int AndroidManifestService_enabled = 4;
        /**
          <p>
          @attr description
           Flag indicating whether the given application component is available
         to other applications.  If false, it can only be accessed by
         applications with its same user id (which usually means only by
         code in its own package).  If true, it can be invoked by external
         entities, though which ones can do so may be controlled through
         permissions.  The default value is false for activity, receiver,
         and service components that do not specify any intent filters; it
         is true for activity, receiver, and service components that do
         have intent filters (implying they expect to be invoked by others
         who do not know their particular component name) and for all
         content providers. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#exported}.
          @attr name android:exported
        */
        public: static const int AndroidManifestService_exported = 5;
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int AndroidManifestService_icon = 1;
        /**
          <p>
          @attr description
           If set to true, this service will run under a special process
             that is isolated from the rest of the system.  The only communication
             with it is through the Service API (binding and starting). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isolatedProcess}.
          @attr name android:isolatedProcess
        */
        public: static const int AndroidManifestService_isolatedProcess = 10;
        /**
          <p>
          @attr description
           A user-legible name for the given item.  Use with the
         application tag (to supply a default label for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific label for that component).  It may also be
         used with the intent-filter tag to supply a label to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given label will be used wherever the user sees information
         about its associated component; for example, as the name of a
         main activity that is displayed in the launcher.  You should
         generally set this to a reference to a string resource, so that
         it can be localized, however it is also allowed to supply a plain
         string for quick and dirty programming. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int AndroidManifestService_label = 0;
        /**
          <p>
          @attr description
           A Drawable resource providing an extended graphical logo for its
         associated item. Use with the application tag (to supply a default
         logo for all application components), or with the activity, receiver,
         service, or instrumentation tag (to supply a specific logo for that
         component). It may also be used with the intent-filter tag to supply
         a logo to show to the user when an activity is being selected based
         on a particular Intent.

         <p>The given logo will be used to display to the user a graphical
         representation of its associated component; for example as the
         header in the Action Bar. The primary differences between an icon
         and a logo are that logos are often wider and more detailed, and are
         used without an accompanying text caption. This must be a reference
         to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#logo}.
          @attr name android:logo
        */
        public: static const int AndroidManifestService_logo = 8;
        /**
          <p>
          @attr description
           Required name of the class implementing the service, deriving from
            {@link android.app.Service}.  This is a fully
            qualified class name (for example, com.mycompany.myapp.MyService); as a
            short-hand if the first character of the class
            is a period then it is appended to your package name. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestService_name = 2;
        /**
          <p>
          @attr description
           Specify a permission that a client is required to have in order to
    	 use the associated object.  If the client does not hold the named
    	 permission, its request will fail.  See the
         <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#permission}.
          @attr name android:permission
        */
        public: static const int AndroidManifestService_permission = 3;
        /**
          <p>
          @attr description
           Specify a specific process that the associated code is to run in.
         Use with the application tag (to supply a default process for all
         application components), or with the activity, receiver, service,
         or provider tag (to supply a specific icon for that component).
    
         <p>Application components are normally run in a single process that
         is created for the entire application.  You can use this tag to modify
         where they run.  If the process name begins with a ':' character,
         a new process private to that application will be created when needed
         to run that component (allowing you to spread your application across
         multiple processes).  If the process name begins with a lower-case
         character, the component will be run in a global process of that name,
         provided that you have permission to do so, allowing multiple
         applications to share one process to reduce resource usage. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#process}.
          @attr name android:process
        */
        public: static const int AndroidManifestService_process = 6;
        /**
          <p>
          @attr description
           If set to true, a single instance of this component will run for
         all users.  That instance will run as user 0, the default/primary
         user.  When the app running is in processes for other users and interacts
         with this component (by binding to a service for example) those processes will
         always interact with the instance running for user 0.  Enabling
         single user mode forces "exported" of the component to be false, to
         help avoid introducing multi-user security bugs.  This feature is only
         available to applications built in to the system image; you must hold the
         permission INTERACT_ACROSS_USERS in order
         to use this feature.  This flag can only be used with services,
         receivers, and providers; it can not be used with activities. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#singleUser}.
          @attr name android:singleUser
        */
        public: static const int AndroidManifestService_singleUser = 11;
        /**
          <p>
          @attr description
           If set to true, this service with be automatically stopped
             when the user remove a task rooted in an activity owned by
             the application.  The default is false. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#stopWithTask}.
          @attr name android:stopWithTask
        */
        public: static const int AndroidManifestService_stopWithTask = 9;
        /**  The <code>input-type</code> tag is a child of the <code>supports-input</code> tag, which
         is itself a child of the root {@link #AndroidManifest manifest} tag. Each
         <code>input-type</code> tag specifices the name of a specific input device type. When
         grouped with the other elements of the parent <code>supports-input</code> tag it defines
         a collection of input devices, which when all used together, are considered a supported
         input mechanism for the application. There may be multiple <code>supports-input</code>
         tags defined, each containing a different combination of input device types. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestSupportsInputInputType_name android:name}</code></td><td> Specifices the name of the input device type </td></tr>
           </table>
           @see #AndroidManifestSupportsInputInputType_name
         */
        public: static const int AndroidManifestSupportsInputInputType[1];
        /**
          <p>
          @attr description
           Specifices the name of the input device type 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestSupportsInputInputType_name = 0;
        /**  The <code>supports-screens</code> specifies the screen dimensions an
         application supports.  By default a modern application supports all
         screen sizes and must explicitly disable certain screen sizes here;
         older applications are assumed to only support the traditional normal
         (HVGA) screen size.  Note that screen size is a separate axis from
         density, and is determined as the available pixels to an application
         after density scaling has been applied.
         
         <p>This appears as a child tag of the
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestSupportsScreens_anyDensity android:anyDensity}</code></td><td> Indicates whether the application can accommodate any screen
             density.</td></tr>
           <tr><td><code>{@link #AndroidManifestSupportsScreens_compatibleWidthLimitDp android:compatibleWidthLimitDp}</code></td><td> Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
             this is the new way to specify the largest screens an application is
             compatible with.</td></tr>
           <tr><td><code>{@link #AndroidManifestSupportsScreens_largeScreens android:largeScreens}</code></td><td> Indicates whether the application supports larger screen form-factors.</td></tr>
           <tr><td><code>{@link #AndroidManifestSupportsScreens_largestWidthLimitDp android:largestWidthLimitDp}</code></td><td> Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
             this is the new way to specify the screens an application is
             compatible with.</td></tr>
           <tr><td><code>{@link #AndroidManifestSupportsScreens_normalScreens android:normalScreens}</code></td><td> Indicates whether an application supports the normal screen
             form-factors.</td></tr>
           <tr><td><code>{@link #AndroidManifestSupportsScreens_requiresSmallestWidthDp android:requiresSmallestWidthDp}</code></td><td> Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
             this is the new way to specify the minimum screen size an application is
             compatible with.</td></tr>
           <tr><td><code>{@link #AndroidManifestSupportsScreens_resizeable android:resizeable}</code></td><td> Indicates whether the application can resize itself to newer
             screen sizes.</td></tr>
           <tr><td><code>{@link #AndroidManifestSupportsScreens_smallScreens android:smallScreens}</code></td><td> Indicates whether the application supports smaller screen form-factors.</td></tr>
           <tr><td><code>{@link #AndroidManifestSupportsScreens_xlargeScreens android:xlargeScreens}</code></td><td> Indicates whether the application supports extra large screen form-factors.</td></tr>
           </table>
           @see #AndroidManifestSupportsScreens_anyDensity
           @see #AndroidManifestSupportsScreens_compatibleWidthLimitDp
           @see #AndroidManifestSupportsScreens_largeScreens
           @see #AndroidManifestSupportsScreens_largestWidthLimitDp
           @see #AndroidManifestSupportsScreens_normalScreens
           @see #AndroidManifestSupportsScreens_requiresSmallestWidthDp
           @see #AndroidManifestSupportsScreens_resizeable
           @see #AndroidManifestSupportsScreens_smallScreens
           @see #AndroidManifestSupportsScreens_xlargeScreens
         */
        public: static const int AndroidManifestSupportsScreens[9];
        /**
          <p>
          @attr description
           Indicates whether the application can accommodate any screen
             density.  Older applications are assumed to not be able to,
             new ones able to.  You can explicitly supply your abilities
             here. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#anyDensity}.
          @attr name android:anyDensity
        */
        public: static const int AndroidManifestSupportsScreens_anyDensity = 0;
        /**
          <p>
          @attr description
           Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
             this is the new way to specify the largest screens an application is
             compatible with.  This attribute provides the maximum
             "smallest screen width" (as per the -swNNNdp resource configuration)
             that the application is designed for.  If this value is smaller than
             the "smallest screen width" of the device it is running on, the user
             is offered to run it in a compatibility mode that emulates a
             smaller screen and zooms it to fit the screen. Currently the compatibility mode only
             emulates phone screens with a 320dp width, so compatibility mode is not applied if the
             value for compatibleWidthLimitDp is larger than 320. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#compatibleWidthLimitDp}.
          @attr name android:compatibleWidthLimitDp
        */
        public: static const int AndroidManifestSupportsScreens_compatibleWidthLimitDp = 7;
        /**
          <p>
          @attr description
           Indicates whether the application supports larger screen form-factors.
             A large screen is defined as a screen that is significantly larger
             than a normal phone screen, and thus may require some special care
             on the application's part to make good use of it.  An example would
             be a VGA <em>normal density</em> screen, though even larger screens
             are certainly possible.  An application that does not support
             large screens will be placed as a postage stamp on such a
             screen, so that it retains the dimensions it was originally
             designed for. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#largeScreens}.
          @attr name android:largeScreens
        */
        public: static const int AndroidManifestSupportsScreens_largeScreens = 3;
        /**
          <p>
          @attr description
           Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
             this is the new way to specify the screens an application is
             compatible with.  This attribute provides the maximum
             "smallest screen width" (as per the -swNNNdp resource configuration)
             that the application can work well on.  If this value is smaller than
             the "smallest screen width" of the device it is running on, the
             application will be forced in to screen compatibility mode with
             no way for the user to turn it off. Currently the compatibility mode only
             emulates phone screens with a 320dp width, so compatibility mode is not applied if the
             value for largestWidthLimitDp is larger than 320. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#largestWidthLimitDp}.
          @attr name android:largestWidthLimitDp
        */
        public: static const int AndroidManifestSupportsScreens_largestWidthLimitDp = 8;
        /**
          <p>
          @attr description
           Indicates whether an application supports the normal screen
             form-factors.  Traditionally this is an HVGA normal density
             screen, but WQVGA low density and WVGA high density are also
             considered to be normal.  This attribute is true by default,
             and applications currently should leave it that way. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#normalScreens}.
          @attr name android:normalScreens
        */
        public: static const int AndroidManifestSupportsScreens_normalScreens = 2;
        /**
          <p>
          @attr description
           Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
             this is the new way to specify the minimum screen size an application is
             compatible with.  This attribute provides the required minimum
             "smallest screen width" (as per the -swNNNdp resource configuration)
             that the application can run on.  For example, a typical phone
             screen is 320, a 7" tablet 600, and a 10" tablet 720.  If the
             smallest screen width of the device is below the value supplied here,
             then the application is considered incompatible with that device.
             If not supplied, then any old smallScreens, normalScreens, largeScreens,
             or xlargeScreens attributes will be used instead. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#requiresSmallestWidthDp}.
          @attr name android:requiresSmallestWidthDp
        */
        public: static const int AndroidManifestSupportsScreens_requiresSmallestWidthDp = 6;
        /**
          <p>
          @attr description
           Indicates whether the application can resize itself to newer
             screen sizes.  This is mostly used to distinguish between old
             applications that may not be compatible with newly introduced
             screen sizes and newer applications that should be; it will be
             set for you automatically based on whether you are targeting
             a newer platform that supports more screens. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#resizeable}.
          @attr name android:resizeable
        */
        public: static const int AndroidManifestSupportsScreens_resizeable = 4;
        /**
          <p>
          @attr description
           Indicates whether the application supports smaller screen form-factors.
             A small screen is defined as one with a smaller aspect ratio than
             the traditional HVGA screen; that is, for a portrait screen, less
             tall than an HVGA screen.  In practice, this means a QVGA low
             density or VGA high density screen.  An application that does
             not support small screens <em>will not be available</em> for
             small screen devices, since there is little the platform can do
             to make such an application work on a smaller screen. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#smallScreens}.
          @attr name android:smallScreens
        */
        public: static const int AndroidManifestSupportsScreens_smallScreens = 1;
        /**
          <p>
          @attr description
           Indicates whether the application supports extra large screen form-factors. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#xlargeScreens}.
          @attr name android:xlargeScreens
        */
        public: static const int AndroidManifestSupportsScreens_xlargeScreens = 5;
        /**  Associate declared KeySets with upgrading capability 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestUpgradeKeySet_name android:name}</code></td><td> A unique name for the given item.</td></tr>
           </table>
           @see #AndroidManifestUpgradeKeySet_name
         */
        public: static const int AndroidManifestUpgradeKeySet[1];
        /**
          <p>
          @attr description
           A unique name for the given item.  This must use a Java-style naming
         convention to ensure the name is unique, for example
         "com.mycompany.MyName". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestUpgradeKeySet_name = 0;
        /**  The <code>uses-configuration</code> tag specifies
         a specific hardware configuration value used by the application.
         For example an application might specify that it requires
         a physical keyboard or a particular navigation method like
         trackball. Multiple such attribute values can be specified by the
         application.

         <p>This appears as a child tag of the root
         {@link #AndroidManifest manifest} tag.

         @deprecated Use <code>feature-group</code> instead.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqFiveWayNav android:reqFiveWayNav}</code></td><td> Application's requirement for five way navigation </td></tr>
           <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqHardKeyboard android:reqHardKeyboard}</code></td><td> Application's requirement for a hard keyboard </td></tr>
           <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqKeyboardType android:reqKeyboardType}</code></td><td> The input method preferred by an application.</td></tr>
           <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqNavigation android:reqNavigation}</code></td><td> The navigation device preferred by an application.</td></tr>
           <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqTouchScreen android:reqTouchScreen}</code></td><td> The type of touch screen used by an application.</td></tr>
           </table>
           @see #AndroidManifestUsesConfiguration_reqFiveWayNav
           @see #AndroidManifestUsesConfiguration_reqHardKeyboard
           @see #AndroidManifestUsesConfiguration_reqKeyboardType
           @see #AndroidManifestUsesConfiguration_reqNavigation
           @see #AndroidManifestUsesConfiguration_reqTouchScreen
         */
        public: static const int AndroidManifestUsesConfiguration[5];
        /**
          <p>
          @attr description
           Application's requirement for five way navigation 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#reqFiveWayNav}.
          @attr name android:reqFiveWayNav
        */
        public: static const int AndroidManifestUsesConfiguration_reqFiveWayNav = 4;
        /**
          <p>
          @attr description
           Application's requirement for a hard keyboard 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#reqHardKeyboard}.
          @attr name android:reqHardKeyboard
        */
        public: static const int AndroidManifestUsesConfiguration_reqHardKeyboard = 2;
        /**
          <p>
          @attr description
           The input method preferred by an application. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>undefined</code></td><td>0</td><td></td></tr>
<tr><td><code>nokeys</code></td><td>1</td><td></td></tr>
<tr><td><code>qwerty</code></td><td>2</td><td></td></tr>
<tr><td><code>twelvekey</code></td><td>3</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#reqKeyboardType}.
          @attr name android:reqKeyboardType
        */
        public: static const int AndroidManifestUsesConfiguration_reqKeyboardType = 1;
        /**
          <p>
          @attr description
           The navigation device preferred by an application. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>undefined</code></td><td>0</td><td></td></tr>
<tr><td><code>nonav</code></td><td>1</td><td></td></tr>
<tr><td><code>dpad</code></td><td>2</td><td></td></tr>
<tr><td><code>trackball</code></td><td>3</td><td></td></tr>
<tr><td><code>wheel</code></td><td>4</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#reqNavigation}.
          @attr name android:reqNavigation
        */
        public: static const int AndroidManifestUsesConfiguration_reqNavigation = 3;
        /**
          <p>
          @attr description
           The type of touch screen used by an application. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>undefined</code></td><td>0</td><td></td></tr>
<tr><td><code>notouch</code></td><td>1</td><td></td></tr>
<tr><td><code>stylus</code></td><td>2</td><td></td></tr>
<tr><td><code>finger</code></td><td>3</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#reqTouchScreen}.
          @attr name android:reqTouchScreen
        */
        public: static const int AndroidManifestUsesConfiguration_reqTouchScreen = 0;
        /**  The <code>uses-feature</code> tag specifies
         a specific feature used by the application.
         For example an application might specify that it requires
         specific version of OpenGL. Multiple such attribute
         values can be specified by the application.

         <p>This appears as a child tag of the root
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestUsesFeature_glEsVersion android:glEsVersion}</code></td><td> The GLES driver version number needed by an application.</td></tr>
           <tr><td><code>{@link #AndroidManifestUsesFeature_name android:name}</code></td><td>  The name of the feature that is being used.</td></tr>
           <tr><td><code>{@link #AndroidManifestUsesFeature_required android:required}</code></td><td>  Specify whether this feature is required for the application.</td></tr>
           </table>
           @see #AndroidManifestUsesFeature_glEsVersion
           @see #AndroidManifestUsesFeature_name
           @see #AndroidManifestUsesFeature_required
         */
        public: static const int AndroidManifestUsesFeature[3];
        /**
          <p>
          @attr description
           The GLES driver version number needed by an application.
             The higher 16 bits represent the major number and the lower 16 bits
             represent the minor number. For example for GL 1.2 referring to
             0x00000102, the actual value should be set as 0x00010002. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#glEsVersion}.
          @attr name android:glEsVersion
        */
        public: static const int AndroidManifestUsesFeature_glEsVersion = 1;
        /**
          <p>
          @attr description
            The name of the feature that is being used. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestUsesFeature_name = 0;
        /**
          <p>
          @attr description
            Specify whether this feature is required for the application.
              The default is true, meaning the application requires the
              feature, and does not want to be installed on devices that
              don't support it.  If you set this to false, then this will
              not impose a restriction on where the application can be
              installed. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#required}.
          @attr name android:required
        */
        public: static const int AndroidManifestUsesFeature_required = 2;
        /**  The <code>uses-libraries</code> specifies a shared library that this
         package requires to be linked against.  Specifying this flag tells the
         system to include this library's code in your class loader.
         
         <p>This appears as a child tag of the
         {@link #AndroidManifestApplication application} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestUsesLibrary_name android:name}</code></td><td> Required name of the library you use.</td></tr>
           <tr><td><code>{@link #AndroidManifestUsesLibrary_required android:required}</code></td><td>  Specify whether this library is required for the application.</td></tr>
           </table>
           @see #AndroidManifestUsesLibrary_name
           @see #AndroidManifestUsesLibrary_required
         */
        public: static const int AndroidManifestUsesLibrary[2];
        /**
          <p>
          @attr description
           Required name of the library you use. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestUsesLibrary_name = 0;
        /**
          <p>
          @attr description
            Specify whether this library is required for the application.
              The default is true, meaning the application requires the
              library, and does not want to be installed on devices that
              don't support it.  If you set this to false, then this will
              allow the application to be installed even if the library
              doesn't exist, and you will need to check for its presence
              dynamically at runtime. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#required}.
          @attr name android:required
        */
        public: static const int AndroidManifestUsesLibrary_required = 1;
        /**  The <code>uses-permission</code> tag requests a
         {@link #AndroidManifestPermission &lt;permission&gt;} that the containing
         package must be granted in order for it to operate correctly.
         See the <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
         document for more information on permissions.  Also available is a
         {@link android.Manifest.permission list of permissions} included
         with the base platform.
         
         <p>This appears as a child tag of the root
         {@link #AndroidManifest manifest} tag. 
  Specify whether this permission is required for the application.
              The default is true, meaning the application requires the
              permission, and it must always be granted when it is installed.
              If you set this to false, then in some cases the application may
              be installed with it being granted the permission, and it will
              need to request the permission later if it needs it.
        <attr name="required" format="boolean" />
        
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestUsesPermission_maxSdkVersion android:maxSdkVersion}</code></td><td> Optional: specify the maximum version of the Android OS for which the
             application wishes to request the permission.</td></tr>
           <tr><td><code>{@link #AndroidManifestUsesPermission_name android:name}</code></td><td> Required name of the permission you use, as published with the
        corresponding name attribute of a
        {@link android.R.styleable#AndroidManifestPermission &lt;permission&gt;}
        tag; often this is one of the {@link android.Manifest.permission standard
        system permissions}.</td></tr>
           </table>
           @see #AndroidManifestUsesPermission_maxSdkVersion
           @see #AndroidManifestUsesPermission_name
         */
        public: static const int AndroidManifestUsesPermission[2];
        /**
          <p>
          @attr description
           Optional: specify the maximum version of the Android OS for which the
             application wishes to request the permission.  When running on a version
             of Android higher than the number given here, the permission will not
             be requested.  


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxSdkVersion}.
          @attr name android:maxSdkVersion
        */
        public: static const int AndroidManifestUsesPermission_maxSdkVersion = 1;
        /**
          <p>
          @attr description
           Required name of the permission you use, as published with the
        corresponding name attribute of a
        {@link android.R.styleable#AndroidManifestPermission &lt;permission&gt;}
        tag; often this is one of the {@link android.Manifest.permission standard
        system permissions}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AndroidManifestUsesPermission_name = 0;
        /**  The <code>uses-sdk</code> tag describes the SDK features that the
         containing package must be running on to operate correctly.
         
         <p>This appears as a child tag of the root
         {@link #AndroidManifest manifest} tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AndroidManifestUsesSdk_maxSdkVersion android:maxSdkVersion}</code></td><td> This is the maximum SDK version number that an application works
             on.</td></tr>
           <tr><td><code>{@link #AndroidManifestUsesSdk_minSdkVersion android:minSdkVersion}</code></td><td> This is the minimum SDK version number that the application
             requires.</td></tr>
           <tr><td><code>{@link #AndroidManifestUsesSdk_targetSdkVersion android:targetSdkVersion}</code></td><td> This is the SDK version number that the application is targeting.</td></tr>
           </table>
           @see #AndroidManifestUsesSdk_maxSdkVersion
           @see #AndroidManifestUsesSdk_minSdkVersion
           @see #AndroidManifestUsesSdk_targetSdkVersion
         */
        public: static const int AndroidManifestUsesSdk[3];
        /**
          <p>
          @attr description
           This is the maximum SDK version number that an application works
             on.  You can use this to ensure your application is filtered out
             of later versions of the platform when you know you have
             incompatibility with them. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxSdkVersion}.
          @attr name android:maxSdkVersion
        */
        public: static const int AndroidManifestUsesSdk_maxSdkVersion = 2;
        /**
          <p>
          @attr description
           This is the minimum SDK version number that the application
             requires.  This number is an abstract integer, from the list
             in {@link android.os.Build.VERSION_CODES}  If
             not supplied, the application will work on any SDK.  This
             may also be string (such as "Donut") if the application was built
             against a development branch, in which case it will only work against
             the development builds. 


          <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minSdkVersion}.
          @attr name android:minSdkVersion
        */
        public: static const int AndroidManifestUsesSdk_minSdkVersion = 0;
        /**
          <p>
          @attr description
           This is the SDK version number that the application is targeting.
             It is able to run on older versions (down to minSdkVersion), but
             was explicitly tested to work with the version specified here.
             Specifying this version allows the platform to disable compatibility
             code that are not required or enable newer features that are not
             available to older applications.  This may also be a string
             (such as "Donut") if this is built against a development
             branch, in which case minSdkVersion is also forced to be that
             string. 


          <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#targetSdkVersion}.
          @attr name android:targetSdkVersion
        */
        public: static const int AndroidManifestUsesSdk_targetSdkVersion = 1;
        /** Attributes that can be used with a AnimatedRotateDrawable.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnimatedRotateDrawable_drawable android:drawable}</code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
           <tr><td><code>{@link #AnimatedRotateDrawable_frameDuration android:frameDuration}</code></td><td></td></tr>
           <tr><td><code>{@link #AnimatedRotateDrawable_framesCount android:framesCount}</code></td><td></td></tr>
           <tr><td><code>{@link #AnimatedRotateDrawable_pivotX android:pivotX}</code></td><td></td></tr>
           <tr><td><code>{@link #AnimatedRotateDrawable_pivotY android:pivotY}</code></td><td></td></tr>
           <tr><td><code>{@link #AnimatedRotateDrawable_visible android:visible}</code></td><td> Provides initial visibility state of the drawable; the default
             value is false.</td></tr>
           </table>
           @see #AnimatedRotateDrawable_drawable
           @see #AnimatedRotateDrawable_frameDuration
           @see #AnimatedRotateDrawable_framesCount
           @see #AnimatedRotateDrawable_pivotX
           @see #AnimatedRotateDrawable_pivotY
           @see #AnimatedRotateDrawable_visible
         */
        public: static const int AnimatedRotateDrawable[6];
        /**
          <p>
          @attr description
           Reference to a drawable resource to use for the frame.  If not
             given, the drawable must be defined by the first child tag. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int AnimatedRotateDrawable_drawable = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#frameDuration}
          attribute's value can be found in the {@link #AnimatedRotateDrawable} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:frameDuration
        */
        public: static const int AnimatedRotateDrawable_frameDuration = 4;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#framesCount}
          attribute's value can be found in the {@link #AnimatedRotateDrawable} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:framesCount
        */
        public: static const int AnimatedRotateDrawable_framesCount = 5;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#pivotX}
          attribute's value can be found in the {@link #AnimatedRotateDrawable} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pivotX
        */
        public: static const int AnimatedRotateDrawable_pivotX = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#pivotY}
          attribute's value can be found in the {@link #AnimatedRotateDrawable} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pivotY
        */
        public: static const int AnimatedRotateDrawable_pivotY = 3;
        /**
          <p>
          @attr description
           Provides initial visibility state of the drawable; the default
             value is false.  See
             {@link android.graphics.drawable.Drawable#setVisible}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int AnimatedRotateDrawable_visible = 0;
        /**  Drawable used to render several states with animated transitions. Each state
         is represented by a child drawable with an optional keyframe ID. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnimatedStateListDrawable_autoMirrored android:autoMirrored}</code></td><td> Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left).</td></tr>
           <tr><td><code>{@link #AnimatedStateListDrawable_constantSize android:constantSize}</code></td><td> If true, the drawable's reported internal size will remain
             constant as the state changes; the size is the maximum of all
             of the states.</td></tr>
           <tr><td><code>{@link #AnimatedStateListDrawable_dither android:dither}</code></td><td> Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen).</td></tr>
           <tr><td><code>{@link #AnimatedStateListDrawable_enterFadeDuration android:enterFadeDuration}</code></td><td> Amount of time (in milliseconds) to fade in a new state drawable.</td></tr>
           <tr><td><code>{@link #AnimatedStateListDrawable_exitFadeDuration android:exitFadeDuration}</code></td><td> Amount of time (in milliseconds) to fade out an old state drawable.</td></tr>
           <tr><td><code>{@link #AnimatedStateListDrawable_variablePadding android:variablePadding}</code></td><td> If true, allows the drawable's padding to change based on the
             current state that is selected.</td></tr>
           <tr><td><code>{@link #AnimatedStateListDrawable_visible android:visible}</code></td><td> Indicates whether the drawable should be initially visible.</td></tr>
           </table>
           @see #AnimatedStateListDrawable_autoMirrored
           @see #AnimatedStateListDrawable_constantSize
           @see #AnimatedStateListDrawable_dither
           @see #AnimatedStateListDrawable_enterFadeDuration
           @see #AnimatedStateListDrawable_exitFadeDuration
           @see #AnimatedStateListDrawable_variablePadding
           @see #AnimatedStateListDrawable_visible
         */
        public: static const int AnimatedStateListDrawable[7];
        /**
          <p>
          @attr description
           Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoMirrored}.
          @attr name android:autoMirrored
        */
        public: static const int AnimatedStateListDrawable_autoMirrored = 6;
        /**
          <p>
          @attr description
           If true, the drawable's reported internal size will remain
             constant as the state changes; the size is the maximum of all
             of the states.  If false, the size will vary based on the
             current state. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#constantSize}.
          @attr name android:constantSize
        */
        public: static const int AnimatedStateListDrawable_constantSize = 3;
        /**
          <p>
          @attr description
           Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dither}.
          @attr name android:dither
        */
        public: static const int AnimatedStateListDrawable_dither = 0;
        /**
          <p>
          @attr description
           Amount of time (in milliseconds) to fade in a new state drawable. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enterFadeDuration}.
          @attr name android:enterFadeDuration
        */
        public: static const int AnimatedStateListDrawable_enterFadeDuration = 4;
        /**
          <p>
          @attr description
           Amount of time (in milliseconds) to fade out an old state drawable. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#exitFadeDuration}.
          @attr name android:exitFadeDuration
        */
        public: static const int AnimatedStateListDrawable_exitFadeDuration = 5;
        /**
          <p>
          @attr description
           If true, allows the drawable's padding to change based on the
             current state that is selected.  If false, the padding will
             stay the same (based on the maximum padding of all the states).
             Enabling this feature requires that the owner of the drawable
             deal with performing layout when the state changes, which is
             often not supported. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#variablePadding}.
          @attr name android:variablePadding
        */
        public: static const int AnimatedStateListDrawable_variablePadding = 2;
        /**
          <p>
          @attr description
           Indicates whether the drawable should be initially visible. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int AnimatedStateListDrawable_visible = 1;
        /**  Transition used to animate between states with keyframe IDs. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnimatedStateListDrawableItem_drawable android:drawable}</code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
           <tr><td><code>{@link #AnimatedStateListDrawableItem_id android:id}</code></td><td> Keyframe identifier for use in specifying transitions.</td></tr>
           </table>
           @see #AnimatedStateListDrawableItem_drawable
           @see #AnimatedStateListDrawableItem_id
         */
        public: static const int AnimatedStateListDrawableItem[2];
        /**
          <p>
          @attr description
           Reference to a drawable resource to use for the frame.  If not
             given, the drawable must be defined by the first child tag. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int AnimatedStateListDrawableItem_drawable = 1;
        /**
          <p>
          @attr description
           Keyframe identifier for use in specifying transitions. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#id}.
          @attr name android:id
        */
        public: static const int AnimatedStateListDrawableItem_id = 0;
        /**  Transition used to animate between states with keyframe IDs. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnimatedStateListDrawableTransition_drawable android:drawable}</code></td><td> Reference to a animation drawable resource to use for the frame.</td></tr>
           <tr><td><code>{@link #AnimatedStateListDrawableTransition_fromId android:fromId}</code></td><td> Keyframe identifier for the starting state.</td></tr>
           <tr><td><code>{@link #AnimatedStateListDrawableTransition_reversible android:reversible}</code></td><td> Whether this transition is reversible.</td></tr>
           <tr><td><code>{@link #AnimatedStateListDrawableTransition_toId android:toId}</code></td><td> Keyframe identifier for the ending state.</td></tr>
           </table>
           @see #AnimatedStateListDrawableTransition_drawable
           @see #AnimatedStateListDrawableTransition_fromId
           @see #AnimatedStateListDrawableTransition_reversible
           @see #AnimatedStateListDrawableTransition_toId
         */
        public: static const int AnimatedStateListDrawableTransition[4];
        /**
          <p>
          @attr description
           Reference to a animation drawable resource to use for the frame.  If not
             given, the animation drawable must be defined by the first child tag. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int AnimatedStateListDrawableTransition_drawable = 0;
        /**
          <p>
          @attr description
           Keyframe identifier for the starting state. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fromId}.
          @attr name android:fromId
        */
        public: static const int AnimatedStateListDrawableTransition_fromId = 2;
        /**
          <p>
          @attr description
           Whether this transition is reversible. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#reversible}.
          @attr name android:reversible
        */
        public: static const int AnimatedStateListDrawableTransition_reversible = 3;
        /**
          <p>
          @attr description
           Keyframe identifier for the ending state. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#toId}.
          @attr name android:toId
        */
        public: static const int AnimatedStateListDrawableTransition_toId = 1;
        /**  Define the AnimatedVectorDrawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnimatedVectorDrawable_drawable android:drawable}</code></td><td> The static vector drawable.</td></tr>
           </table>
           @see #AnimatedVectorDrawable_drawable
         */
        public: static const int AnimatedVectorDrawable[1];
        /**
          <p>
          @attr description
           The static vector drawable. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int AnimatedVectorDrawable_drawable = 0;
        /**  Defines the target used in the AnimatedVectorDrawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnimatedVectorDrawableTarget_animation android:animation}</code></td><td> The animation for the target path, group or vector drawable </td></tr>
           <tr><td><code>{@link #AnimatedVectorDrawableTarget_name android:name}</code></td><td> The name of the target path, group or vector drawable </td></tr>
           </table>
           @see #AnimatedVectorDrawableTarget_animation
           @see #AnimatedVectorDrawableTarget_name
         */
        public: static const int AnimatedVectorDrawableTarget[2];
        /**
          <p>
          @attr description
           The animation for the target path, group or vector drawable 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animation}.
          @attr name android:animation
        */
        public: static const int AnimatedVectorDrawableTarget_animation = 1;
        /**
          <p>
          @attr description
           The name of the target path, group or vector drawable 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int AnimatedVectorDrawableTarget_name = 0;
        /** Attributes that can be used with a Animation.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Animation_background android:background}</code></td><td> Special background behind animation.</td></tr>
           <tr><td><code>{@link #Animation_detachWallpaper android:detachWallpaper}</code></td><td> Special option for window animations: if this window is on top
             of a wallpaper, don't animate the wallpaper with it.</td></tr>
           <tr><td><code>{@link #Animation_duration android:duration}</code></td><td> Amount of time (in milliseconds) for the animation to run.</td></tr>
           <tr><td><code>{@link #Animation_fillAfter android:fillAfter}</code></td><td> When set to true, the animation transformation is applied after the animation is
             over.</td></tr>
           <tr><td><code>{@link #Animation_fillBefore android:fillBefore}</code></td><td> When set to true or when fillEnabled is not set to true, the animation transformation
             is applied before the animation has started.</td></tr>
           <tr><td><code>{@link #Animation_fillEnabled android:fillEnabled}</code></td><td> When set to true, the value of fillBefore is taken into account.</td></tr>
           <tr><td><code>{@link #Animation_interpolator android:interpolator}</code></td><td> Defines the interpolator used to smooth the animation movement in time.</td></tr>
           <tr><td><code>{@link #Animation_repeatCount android:repeatCount}</code></td><td> Defines how many times the animation should repeat.</td></tr>
           <tr><td><code>{@link #Animation_repeatMode android:repeatMode}</code></td><td> Defines the animation behavior when it reaches the end and the repeat count is
             greater than 0 or infinite.</td></tr>
           <tr><td><code>{@link #Animation_startOffset android:startOffset}</code></td><td> Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
           <tr><td><code>{@link #Animation_zAdjustment android:zAdjustment}</code></td><td> Allows for an adjustment of the Z ordering of the content being
             animated for the duration of the animation.</td></tr>
           </table>
           @see #Animation_background
           @see #Animation_detachWallpaper
           @see #Animation_duration
           @see #Animation_fillAfter
           @see #Animation_fillBefore
           @see #Animation_fillEnabled
           @see #Animation_interpolator
           @see #Animation_repeatCount
           @see #Animation_repeatMode
           @see #Animation_startOffset
           @see #Animation_zAdjustment
         */
        public: static const int Animation[11];
        /**
          <p>
          @attr description
           Special background behind animation.  Only for use with window
             animations.  Can only be a color, and only black.  If 0, the
             default, there is no background. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#background}.
          @attr name android:background
        */
        public: static const int Animation_background = 0;
        /**
          <p>
          @attr description
           Special option for window animations: if this window is on top
             of a wallpaper, don't animate the wallpaper with it. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#detachWallpaper}.
          @attr name android:detachWallpaper
        */
        public: static const int Animation_detachWallpaper = 10;
        /**
          <p>
          @attr description
           Amount of time (in milliseconds) for the animation to run. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#duration}.
          @attr name android:duration
        */
        public: static const int Animation_duration = 2;
        /**
          <p>
          @attr description
           When set to true, the animation transformation is applied after the animation is
             over. The default value is false. If fillEnabled is not set to true and the
             animation is not set on a View, fillAfter is assumed to be true.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fillAfter}.
          @attr name android:fillAfter
        */
        public: static const int Animation_fillAfter = 4;
        /**
          <p>
          @attr description
           When set to true or when fillEnabled is not set to true, the animation transformation
             is applied before the animation has started. The default value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fillBefore}.
          @attr name android:fillBefore
        */
        public: static const int Animation_fillBefore = 3;
        /**
          <p>
          @attr description
           When set to true, the value of fillBefore is taken into account. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fillEnabled}.
          @attr name android:fillEnabled
        */
        public: static const int Animation_fillEnabled = 9;
        /**
          <p>
          @attr description
           Defines the interpolator used to smooth the animation movement in time. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#interpolator}.
          @attr name android:interpolator
        */
        public: static const int Animation_interpolator = 1;
        /**
          <p>
          @attr description
           Defines how many times the animation should repeat. The default value is 0. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>infinite</code></td><td>-1</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#repeatCount}.
          @attr name android:repeatCount
        */
        public: static const int Animation_repeatCount = 6;
        /**
          <p>
          @attr description
           Defines the animation behavior when it reaches the end and the repeat count is
             greater than 0 or infinite. The default value is restart. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>restart</code></td><td>1</td><td> The animation starts again from the beginning. </td></tr>
<tr><td><code>reverse</code></td><td>2</td><td> The animation plays backward. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#repeatMode}.
          @attr name android:repeatMode
        */
        public: static const int Animation_repeatMode = 7;
        /**
          <p>
          @attr description
           Delay in milliseconds before the animation runs, once start time is reached. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#startOffset}.
          @attr name android:startOffset
        */
        public: static const int Animation_startOffset = 5;
        /**
          <p>
          @attr description
           Allows for an adjustment of the Z ordering of the content being
             animated for the duration of the animation.  The default value is normal. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> The content being animated be kept in its current Z order. </td></tr>
<tr><td><code>top</code></td><td>1</td><td> The content being animated is forced on top of all other
                 content for the duration of the animation. </td></tr>
<tr><td><code>bottom</code></td><td>-1</td><td> The content being animated is forced under all other
                 content for the duration of the animation. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#zAdjustment}.
          @attr name android:zAdjustment
        */
        public: static const int Animation_zAdjustment = 8;
        /**  Drawable used to render several animated frames. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnimationDrawable_oneshot android:oneshot}</code></td><td> If true, the animation will only run a single time and then
             stop.</td></tr>
           <tr><td><code>{@link #AnimationDrawable_variablePadding android:variablePadding}</code></td><td> If true, allows the drawable's padding to change based on the
             current state that is selected.</td></tr>
           <tr><td><code>{@link #AnimationDrawable_visible android:visible}</code></td><td> Provides initial visibility state of the drawable; the default
             value is false.</td></tr>
           </table>
           @see #AnimationDrawable_oneshot
           @see #AnimationDrawable_variablePadding
           @see #AnimationDrawable_visible
         */
        public: static const int AnimationDrawable[3];
        /**
          <p>
          @attr description
           If true, the animation will only run a single time and then
             stop.  If false (the default), it will continually run,
             restarting at the first frame after the last has finished. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#oneshot}.
          @attr name android:oneshot
        */
        public: static const int AnimationDrawable_oneshot = 2;
        /**
          <p>
          @attr description
           If true, allows the drawable's padding to change based on the
             current state that is selected.  If false, the padding will
             stay the same (based on the maximum padding of all the states).
             Enabling this feature requires that the owner of the drawable
             deal with performing layout when the state changes, which is
             often not supported. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#variablePadding}.
          @attr name android:variablePadding
        */
        public: static const int AnimationDrawable_variablePadding = 1;
        /**
          <p>
          @attr description
           Provides initial visibility state of the drawable; the default
             value is false.  See
             {@link android.graphics.drawable.Drawable#setVisible}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int AnimationDrawable_visible = 0;
        /**  Represents a single frame inside an AnimationDrawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnimationDrawableItem_drawable android:drawable}</code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
           <tr><td><code>{@link #AnimationDrawableItem_duration android:duration}</code></td><td> Amount of time (in milliseconds) to display this frame.</td></tr>
           </table>
           @see #AnimationDrawableItem_drawable
           @see #AnimationDrawableItem_duration
         */
        public: static const int AnimationDrawableItem[2];
        /**
          <p>
          @attr description
           Reference to a drawable resource to use for the frame.  If not
             given, the drawable must be defined by the first child tag. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int AnimationDrawableItem_drawable = 1;
        /**
          <p>
          @attr description
           Amount of time (in milliseconds) to display this frame. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#duration}.
          @attr name android:duration
        */
        public: static const int AnimationDrawableItem_duration = 0;
        /** Attributes that can be used with a AnimationSet.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnimationSet_duration android:duration}</code></td><td> Amount of time (in milliseconds) to display this frame.</td></tr>
           <tr><td><code>{@link #AnimationSet_fillAfter android:fillAfter}</code></td><td> When set to true, the animation transformation is applied after the animation is
             over.</td></tr>
           <tr><td><code>{@link #AnimationSet_fillBefore android:fillBefore}</code></td><td> When set to true or when fillEnabled is not set to true, the animation transformation
             is applied before the animation has started.</td></tr>
           <tr><td><code>{@link #AnimationSet_repeatMode android:repeatMode}</code></td><td> Defines the animation behavior when it reaches the end and the repeat count is
             greater than 0 or infinite.</td></tr>
           <tr><td><code>{@link #AnimationSet_shareInterpolator android:shareInterpolator}</code></td><td></td></tr>
           <tr><td><code>{@link #AnimationSet_startOffset android:startOffset}</code></td><td> Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
           </table>
           @see #AnimationSet_duration
           @see #AnimationSet_fillAfter
           @see #AnimationSet_fillBefore
           @see #AnimationSet_repeatMode
           @see #AnimationSet_shareInterpolator
           @see #AnimationSet_startOffset
         */
        public: static const int AnimationSet[6];
        /**
          <p>
          @attr description
           Amount of time (in milliseconds) to display this frame. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#duration}.
          @attr name android:duration
        */
        public: static const int AnimationSet_duration = 0;
        /**
          <p>
          @attr description
           When set to true, the animation transformation is applied after the animation is
             over. The default value is false. If fillEnabled is not set to true and the
             animation is not set on a View, fillAfter is assumed to be true.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fillAfter}.
          @attr name android:fillAfter
        */
        public: static const int AnimationSet_fillAfter = 3;
        /**
          <p>
          @attr description
           When set to true or when fillEnabled is not set to true, the animation transformation
             is applied before the animation has started. The default value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fillBefore}.
          @attr name android:fillBefore
        */
        public: static const int AnimationSet_fillBefore = 2;
        /**
          <p>
          @attr description
           Defines the animation behavior when it reaches the end and the repeat count is
             greater than 0 or infinite. The default value is restart. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>restart</code></td><td>1</td><td> The animation starts again from the beginning. </td></tr>
<tr><td><code>reverse</code></td><td>2</td><td> The animation plays backward. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#repeatMode}.
          @attr name android:repeatMode
        */
        public: static const int AnimationSet_repeatMode = 5;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#shareInterpolator}
          attribute's value can be found in the {@link #AnimationSet} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:shareInterpolator
        */
        public: static const int AnimationSet_shareInterpolator = 1;
        /**
          <p>
          @attr description
           Delay in milliseconds before the animation runs, once start time is reached. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#startOffset}.
          @attr name android:startOffset
        */
        public: static const int AnimationSet_startOffset = 4;
        /** Attributes that can be used with a Animator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Animator_duration android:duration}</code></td><td> Amount of time (in milliseconds) for the animation to run.</td></tr>
           <tr><td><code>{@link #Animator_interpolator android:interpolator}</code></td><td> Defines the interpolator used to smooth the animation movement in time.</td></tr>
           <tr><td><code>{@link #Animator_repeatCount android:repeatCount}</code></td><td> Defines how many times the animation should repeat.</td></tr>
           <tr><td><code>{@link #Animator_repeatMode android:repeatMode}</code></td><td> Defines the animation behavior when it reaches the end and the repeat count is
             greater than 0 or infinite.</td></tr>
           <tr><td><code>{@link #Animator_startOffset android:startOffset}</code></td><td> Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
           <tr><td><code>{@link #Animator_valueFrom android:valueFrom}</code></td><td> Value the animation starts from.</td></tr>
           <tr><td><code>{@link #Animator_valueTo android:valueTo}</code></td><td> Value the animation animates to.</td></tr>
           <tr><td><code>{@link #Animator_valueType android:valueType}</code></td><td> The type of valueFrom and valueTo.</td></tr>
           </table>
           @see #Animator_duration
           @see #Animator_interpolator
           @see #Animator_repeatCount
           @see #Animator_repeatMode
           @see #Animator_startOffset
           @see #Animator_valueFrom
           @see #Animator_valueTo
           @see #Animator_valueType
         */
        public: static const int Animator[8];
        /**
          <p>
          @attr description
           Amount of time (in milliseconds) for the animation to run. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#duration}.
          @attr name android:duration
        */
        public: static const int Animator_duration = 1;
        /**
          <p>
          @attr description
           Defines the interpolator used to smooth the animation movement in time. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#interpolator}.
          @attr name android:interpolator
        */
        public: static const int Animator_interpolator = 0;
        /**
          <p>
          @attr description
           Defines how many times the animation should repeat. The default value is 0. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>infinite</code></td><td>-1</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#repeatCount}.
          @attr name android:repeatCount
        */
        public: static const int Animator_repeatCount = 3;
        /**
          <p>
          @attr description
           Defines the animation behavior when it reaches the end and the repeat count is
             greater than 0 or infinite. The default value is restart. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>restart</code></td><td>1</td><td> The animation starts again from the beginning. </td></tr>
<tr><td><code>reverse</code></td><td>2</td><td> The animation plays backward. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#repeatMode}.
          @attr name android:repeatMode
        */
        public: static const int Animator_repeatMode = 4;
        /**
          <p>
          @attr description
           Delay in milliseconds before the animation runs, once start time is reached. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#startOffset}.
          @attr name android:startOffset
        */
        public: static const int Animator_startOffset = 2;
        /**
          <p>
          @attr description
           Value the animation starts from. 


          <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#valueFrom}.
          @attr name android:valueFrom
        */
        public: static const int Animator_valueFrom = 5;
        /**
          <p>
          @attr description
           Value the animation animates to. 


          <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#valueTo}.
          @attr name android:valueTo
        */
        public: static const int Animator_valueTo = 6;
        /**
          <p>
          @attr description
           The type of valueFrom and valueTo. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>floatType</code></td><td>0</td><td> valueFrom and valueTo are floats. This is the default value is valueType is
                 unspecified. Note that if either valueFrom or valueTo represent colors
                 (beginning with "#"), then this attribute is ignored and the color values are
                 interpreted as integers. </td></tr>
<tr><td><code>intType</code></td><td>1</td><td> valueFrom and valueTo are integers. </td></tr>
<tr><td><code>pathType</code></td><td>2</td><td> valueFrom and valueTo are paths defined as strings.
                 This type is used for path morphing in AnimatedVectorDrawable. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#valueType}.
          @attr name android:valueType
        */
        public: static const int Animator_valueType = 7;
        /** Attributes that can be used with a AnimatorSet.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnimatorSet_ordering android:ordering}</code></td><td> Name of the property being animated.</td></tr>
           </table>
           @see #AnimatorSet_ordering
         */
        public: static const int AnimatorSet[1];
        /**
          <p>
          @attr description
           Name of the property being animated. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>together</code></td><td>0</td><td> child animations should be played together. </td></tr>
<tr><td><code>sequentially</code></td><td>1</td><td> child animations should be played sequentially, in the same order as the xml. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ordering}.
          @attr name android:ordering
        */
        public: static const int AnimatorSet_ordering = 0;
        /** Attributes that can be used with a AnticipateInterpolator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnticipateInterpolator_tension android:tension}</code></td><td> This is the amount of tension.</td></tr>
           </table>
           @see #AnticipateInterpolator_tension
         */
        public: static const int AnticipateInterpolator[1];
        /**
          <p>
          @attr description
           This is the amount of tension. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tension}.
          @attr name android:tension
        */
        public: static const int AnticipateInterpolator_tension = 0;
        /** Attributes that can be used with a AnticipateOvershootInterpolator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnticipateOvershootInterpolator_extraTension android:extraTension}</code></td><td> This is the amount by which to multiply the tension.</td></tr>
           <tr><td><code>{@link #AnticipateOvershootInterpolator_tension android:tension}</code></td><td> This is the amount of tension.</td></tr>
           </table>
           @see #AnticipateOvershootInterpolator_extraTension
           @see #AnticipateOvershootInterpolator_tension
         */
        public: static const int AnticipateOvershootInterpolator[2];
        /**
          <p>
          @attr description
           This is the amount by which to multiply the tension. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#extraTension}.
          @attr name android:extraTension
        */
        public: static const int AnticipateOvershootInterpolator_extraTension = 1;
        /**
          <p>
          @attr description
           This is the amount of tension. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tension}.
          @attr name android:tension
        */
        public: static const int AnticipateOvershootInterpolator_tension = 0;
        /**  Use <code>appwidget-provider</code> as the root tag of the XML resource that
         describes an AppWidget provider.  See {@link android.appwidget android.appwidget}
         package for more info.
     
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_autoAdvanceViewId android:autoAdvanceViewId}</code></td><td> The view id of the AppWidget subview which should be auto-advanced.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_configure android:configure}</code></td><td> A class name in the AppWidget's package to be launched to configure.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_initialKeyguardLayout android:initialKeyguardLayout}</code></td><td> A resource id of a layout.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_initialLayout android:initialLayout}</code></td><td> A resource id of a layout.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_minHeight android:minHeight}</code></td><td> Minimum height of the AppWidget.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_minResizeHeight android:minResizeHeight}</code></td><td> Minimum height that the AppWidget can be resized to.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_minResizeWidth android:minResizeWidth}</code></td><td> Minimum width that the AppWidget can be resized to.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_minWidth android:minWidth}</code></td><td> Minimum width of the AppWidget.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_previewImage android:previewImage}</code></td><td> A preview of what the AppWidget will look like after it's configured.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_resizeMode android:resizeMode}</code></td><td> Optional parameter which indicates if and how this widget can be
             resized.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_updatePeriodMillis android:updatePeriodMillis}</code></td><td> Update period in milliseconds, or 0 if the AppWidget will update itself.</td></tr>
           <tr><td><code>{@link #AppWidgetProviderInfo_widgetCategory android:widgetCategory}</code></td><td> Optional parameter which indicates where this widget can be shown,
             ie.</td></tr>
           </table>
           @see #AppWidgetProviderInfo_autoAdvanceViewId
           @see #AppWidgetProviderInfo_configure
           @see #AppWidgetProviderInfo_initialKeyguardLayout
           @see #AppWidgetProviderInfo_initialLayout
           @see #AppWidgetProviderInfo_minHeight
           @see #AppWidgetProviderInfo_minResizeHeight
           @see #AppWidgetProviderInfo_minResizeWidth
           @see #AppWidgetProviderInfo_minWidth
           @see #AppWidgetProviderInfo_previewImage
           @see #AppWidgetProviderInfo_resizeMode
           @see #AppWidgetProviderInfo_updatePeriodMillis
           @see #AppWidgetProviderInfo_widgetCategory
         */
        public: static const int AppWidgetProviderInfo[12];
        /**
          <p>
          @attr description
           The view id of the AppWidget subview which should be auto-advanced.
             by the widget's host. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoAdvanceViewId}.
          @attr name android:autoAdvanceViewId
        */
        public: static const int AppWidgetProviderInfo_autoAdvanceViewId = 6;
        /**
          <p>
          @attr description
           A class name in the AppWidget's package to be launched to configure.
             If not supplied, then no activity will be launched. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#configure}.
          @attr name android:configure
        */
        public: static const int AppWidgetProviderInfo_configure = 4;
        /**
          <p>
          @attr description
           A resource id of a layout. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#initialKeyguardLayout}.
          @attr name android:initialKeyguardLayout
        */
        public: static const int AppWidgetProviderInfo_initialKeyguardLayout = 10;
        /**
          <p>
          @attr description
           A resource id of a layout. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#initialLayout}.
          @attr name android:initialLayout
        */
        public: static const int AppWidgetProviderInfo_initialLayout = 3;
        /**
          <p>
          @attr description
           Minimum height of the AppWidget. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minHeight}.
          @attr name android:minHeight
        */
        public: static const int AppWidgetProviderInfo_minHeight = 1;
        /**
          <p>
          @attr description
           Minimum height that the AppWidget can be resized to. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minResizeHeight}.
          @attr name android:minResizeHeight
        */
        public: static const int AppWidgetProviderInfo_minResizeHeight = 9;
        /**
          <p>
          @attr description
           Minimum width that the AppWidget can be resized to. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minResizeWidth}.
          @attr name android:minResizeWidth
        */
        public: static const int AppWidgetProviderInfo_minResizeWidth = 8;
        /**
          <p>
          @attr description
           Minimum width of the AppWidget. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minWidth}.
          @attr name android:minWidth
        */
        public: static const int AppWidgetProviderInfo_minWidth = 0;
        /**
          <p>
          @attr description
           A preview of what the AppWidget will look like after it's configured.
              If not supplied, the AppWidget's icon will be used. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#previewImage}.
          @attr name android:previewImage
        */
        public: static const int AppWidgetProviderInfo_previewImage = 5;
        /**
          <p>
          @attr description
           Optional parameter which indicates if and how this widget can be
             resized. Supports combined values using | operator. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x0</td><td></td></tr>
<tr><td><code>horizontal</code></td><td>0x1</td><td></td></tr>
<tr><td><code>vertical</code></td><td>0x2</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#resizeMode}.
          @attr name android:resizeMode
        */
        public: static const int AppWidgetProviderInfo_resizeMode = 7;
        /**
          <p>
          @attr description
           Update period in milliseconds, or 0 if the AppWidget will update itself. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#updatePeriodMillis}.
          @attr name android:updatePeriodMillis
        */
        public: static const int AppWidgetProviderInfo_updatePeriodMillis = 2;
        /**
          <p>
          @attr description
           Optional parameter which indicates where this widget can be shown,
             ie. home screen, keyguard, search bar or any combination thereof.
             Supports combined values using | operator. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>home_screen</code></td><td>0x1</td><td></td></tr>
<tr><td><code>keyguard</code></td><td>0x2</td><td></td></tr>
<tr><td><code>searchbox</code></td><td>0x4</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#widgetCategory}.
          @attr name android:widgetCategory
        */
        public: static const int AppWidgetProviderInfo_widgetCategory = 11;
        /**  Use <code>arcMotion</code> as the root tag of the XML resource that
         describes a {@link android.transition.ArcMotion}. This must be used
         within a transition with which the PathMotion should be associated. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ArcMotion_maximumAngle android:maximumAngle}</code></td><td> The maximum arc angle in degrees between the start and end points.</td></tr>
           <tr><td><code>{@link #ArcMotion_minimumHorizontalAngle android:minimumHorizontalAngle}</code></td><td> The minimum arc angle in degrees between the start and end points when
             they are close to horizontal.</td></tr>
           <tr><td><code>{@link #ArcMotion_minimumVerticalAngle android:minimumVerticalAngle}</code></td><td> The minimum arc angle in degrees between the start and end points when
             they are close to vertical.</td></tr>
           </table>
           @see #ArcMotion_maximumAngle
           @see #ArcMotion_minimumHorizontalAngle
           @see #ArcMotion_minimumVerticalAngle
         */
        public: static const int ArcMotion[3];
        /**
          <p>
          @attr description
           The maximum arc angle in degrees between the start and end points. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maximumAngle}.
          @attr name android:maximumAngle
        */
        public: static const int ArcMotion_maximumAngle = 2;
        /**
          <p>
          @attr description
           The minimum arc angle in degrees between the start and end points when
             they are close to horizontal. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minimumHorizontalAngle}.
          @attr name android:minimumHorizontalAngle
        */
        public: static const int ArcMotion_minimumHorizontalAngle = 0;
        /**
          <p>
          @attr description
           The minimum arc angle in degrees between the start and end points when
             they are close to vertical. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minimumVerticalAngle}.
          @attr name android:minimumVerticalAngle
        */
        public: static const int ArcMotion_minimumVerticalAngle = 1;
        /** Attributes that can be used with a AutoCompleteTextView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AutoCompleteTextView_completionHint android:completionHint}</code></td><td> Defines the hint displayed in the drop down menu.</td></tr>
           <tr><td><code>{@link #AutoCompleteTextView_completionHintView android:completionHintView}</code></td><td> Defines the hint view displayed in the drop down menu.</td></tr>
           <tr><td><code>{@link #AutoCompleteTextView_completionThreshold android:completionThreshold}</code></td><td> Defines the number of characters that the user must type before
         completion suggestions are displayed in a drop down menu.</td></tr>
           <tr><td><code>{@link #AutoCompleteTextView_dropDownAnchor android:dropDownAnchor}</code></td><td> View to anchor the auto-complete dropdown to.</td></tr>
           <tr><td><code>{@link #AutoCompleteTextView_dropDownHeight android:dropDownHeight}</code></td><td> Specifies the basic height of the dropdown.</td></tr>
           <tr><td><code>{@link #AutoCompleteTextView_dropDownSelector android:dropDownSelector}</code></td><td> Selector in a drop down list.</td></tr>
           <tr><td><code>{@link #AutoCompleteTextView_dropDownWidth android:dropDownWidth}</code></td><td> Specifies the basic width of the dropdown.</td></tr>
           <tr><td><code>{@link #AutoCompleteTextView_inputType android:inputType}</code></td><td> The type of data being placed in a text field, used to help an
         input method decide how to let the user enter text.</td></tr>
           </table>
           @see #AutoCompleteTextView_completionHint
           @see #AutoCompleteTextView_completionHintView
           @see #AutoCompleteTextView_completionThreshold
           @see #AutoCompleteTextView_dropDownAnchor
           @see #AutoCompleteTextView_dropDownHeight
           @see #AutoCompleteTextView_dropDownSelector
           @see #AutoCompleteTextView_dropDownWidth
           @see #AutoCompleteTextView_inputType
         */
        public: static const int AutoCompleteTextView[8];
        /**
          <p>
          @attr description
           Defines the hint displayed in the drop down menu. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#completionHint}.
          @attr name android:completionHint
        */
        public: static const int AutoCompleteTextView_completionHint = 0;
        /**
          <p>
          @attr description
           Defines the hint view displayed in the drop down menu. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#completionHintView}.
          @attr name android:completionHintView
        */
        public: static const int AutoCompleteTextView_completionHintView = 1;
        /**
          <p>
          @attr description
           Defines the number of characters that the user must type before
         completion suggestions are displayed in a drop down menu. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#completionThreshold}.
          @attr name android:completionThreshold
        */
        public: static const int AutoCompleteTextView_completionThreshold = 2;
        /**
          <p>
          @attr description
           View to anchor the auto-complete dropdown to. If not specified, the text view itself
             is used. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownAnchor}.
          @attr name android:dropDownAnchor
        */
        public: static const int AutoCompleteTextView_dropDownAnchor = 6;
        /**
          <p>
          @attr description
           Specifies the basic height of the dropdown. Its value may
             be a dimension (such as "12dip") for a constant height,
             fill_parent or match_parent to fill the height of the
             screen, or wrap_content to match the height of
             the content of the drop down. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The dropdown should fit the height of the screen.
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The dropdown should fit the height of the screen.
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The dropdown should fit the height of the content. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownHeight}.
          @attr name android:dropDownHeight
        */
        public: static const int AutoCompleteTextView_dropDownHeight = 7;
        /**
          <p>
          @attr description
           Selector in a drop down list. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownSelector}.
          @attr name android:dropDownSelector
        */
        public: static const int AutoCompleteTextView_dropDownSelector = 3;
        /**
          <p>
          @attr description
           Specifies the basic width of the dropdown. Its value may
             be a dimension (such as "12dip") for a constant width,
             fill_parent or match_parent to match the width of the
             screen, or wrap_content to match the width of
             the anchored view. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The dropdown should fill the width of the screen.
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The dropdown should fit the width of the screen.
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The dropdown should fit the width of its anchor. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownWidth}.
          @attr name android:dropDownWidth
        */
        public: static const int AutoCompleteTextView_dropDownWidth = 5;
        /**
          <p>
          @attr description
           The type of data being placed in a text field, used to help an
         input method decide how to let the user enter text.  The constants
         here correspond to those defined by
         {@link android.text.InputType}.  Generally you can select
         a single value, though some can be combined together as
         indicated.  Setting this attribute to anything besides
         <var>none</var> also implies that the text is editable. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> There is no content type.  The text is not editable. </td></tr>
<tr><td><code>text</code></td><td>0x00000001</td><td> Just plain old text.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}. </td></tr>
<tr><td><code>textCapCharacters</code></td><td>0x00001001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of all characters.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}. </td></tr>
<tr><td><code>textCapWords</code></td><td>0x00002001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every word.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}. </td></tr>
<tr><td><code>textCapSentences</code></td><td>0x00004001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every sentence.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}. </td></tr>
<tr><td><code>textAutoCorrect</code></td><td>0x00008001</td><td> Can be combined with <var>text</var> and its variations to
             request auto-correction of text being input.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}. </td></tr>
<tr><td><code>textAutoComplete</code></td><td>0x00010001</td><td> Can be combined with <var>text</var> and its variations to
             specify that this field will be doing its own auto-completion and
             talking with the input method appropriately.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}. </td></tr>
<tr><td><code>textMultiLine</code></td><td>0x00020001</td><td> Can be combined with <var>text</var> and its variations to
             allow multiple lines of text in the field.  If this flag is not set,
             the text field will be constrained to a single line.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}. </td></tr>
<tr><td><code>textImeMultiLine</code></td><td>0x00040001</td><td> Can be combined with <var>text</var> and its variations to
             indicate that though the regular text view should not be multiple
             lines, the IME should provide multiple lines if it can.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}. </td></tr>
<tr><td><code>textNoSuggestions</code></td><td>0x00080001</td><td> Can be combined with <var>text</var> and its variations to
             indicate that the IME should not show any
             dictionary-based word suggestions.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}. </td></tr>
<tr><td><code>textUri</code></td><td>0x00000011</td><td> Text that will be used as a URI.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}. </td></tr>
<tr><td><code>textEmailAddress</code></td><td>0x00000021</td><td> Text that will be used as an e-mail address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}. </td></tr>
<tr><td><code>textEmailSubject</code></td><td>0x00000031</td><td> Text that is being supplied as the subject of an e-mail.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}. </td></tr>
<tr><td><code>textShortMessage</code></td><td>0x00000041</td><td> Text that is the content of a short message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}. </td></tr>
<tr><td><code>textLongMessage</code></td><td>0x00000051</td><td> Text that is the content of a long message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}. </td></tr>
<tr><td><code>textPersonName</code></td><td>0x00000061</td><td> Text that is the name of a person.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}. </td></tr>
<tr><td><code>textPostalAddress</code></td><td>0x00000071</td><td> Text that is being supplied as a postal mailing address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}. </td></tr>
<tr><td><code>textPassword</code></td><td>0x00000081</td><td> Text that is a password.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}. </td></tr>
<tr><td><code>textVisiblePassword</code></td><td>0x00000091</td><td> Text that is a password that should be visible.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}. </td></tr>
<tr><td><code>textWebEditText</code></td><td>0x000000a1</td><td> Text that is being supplied as text in a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}. </td></tr>
<tr><td><code>textFilter</code></td><td>0x000000b1</td><td> Text that is filtering some other data.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}. </td></tr>
<tr><td><code>textPhonetic</code></td><td>0x000000c1</td><td> Text that is for phonetic pronunciation, such as a phonetic name
             field in a contact entry.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}. </td></tr>
<tr><td><code>textWebEmailAddress</code></td><td>0x000000d1</td><td> Text that will be used as an e-mail address on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}. </td></tr>
<tr><td><code>textWebPassword</code></td><td>0x000000e1</td><td> Text that will be used as a password on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}. </td></tr>
<tr><td><code>number</code></td><td>0x00000002</td><td> A numeric only field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}. </td></tr>
<tr><td><code>numberSigned</code></td><td>0x00001002</td><td> Can be combined with <var>number</var> and its other options to
             allow a signed number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}. </td></tr>
<tr><td><code>numberDecimal</code></td><td>0x00002002</td><td> Can be combined with <var>number</var> and its other options to
             allow a decimal (fractional) number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}. </td></tr>
<tr><td><code>numberPassword</code></td><td>0x00000012</td><td> A numeric password field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}. </td></tr>
<tr><td><code>phone</code></td><td>0x00000003</td><td> For entering a phone number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_PHONE}. </td></tr>
<tr><td><code>datetime</code></td><td>0x00000004</td><td> For entering a date and time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}. </td></tr>
<tr><td><code>date</code></td><td>0x00000014</td><td> For entering a date.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}. </td></tr>
<tr><td><code>time</code></td><td>0x00000024</td><td> For entering a time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#inputType}.
          @attr name android:inputType
        */
        public: static const int AutoCompleteTextView_inputType = 4;
        /**  Drawable used to draw bitmaps. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #BitmapDrawable_alpha android:alpha}</code></td><td> Specifies the alpha multiplier to apply to the base drawable.</td></tr>
           <tr><td><code>{@link #BitmapDrawable_antialias android:antialias}</code></td><td> Enables or disables antialiasing.</td></tr>
           <tr><td><code>{@link #BitmapDrawable_autoMirrored android:autoMirrored}</code></td><td> Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left).</td></tr>
           <tr><td><code>{@link #BitmapDrawable_dither android:dither}</code></td><td> Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen).</td></tr>
           <tr><td><code>{@link #BitmapDrawable_filter android:filter}</code></td><td> Enables or disables bitmap filtering.</td></tr>
           <tr><td><code>{@link #BitmapDrawable_gravity android:gravity}</code></td><td> Defines the gravity for the bitmap.</td></tr>
           <tr><td><code>{@link #BitmapDrawable_mipMap android:mipMap}</code></td><td> Enables or disables the mipmap hint.</td></tr>
           <tr><td><code>{@link #BitmapDrawable_src android:src}</code></td><td> Identifier of the bitmap file.</td></tr>
           <tr><td><code>{@link #BitmapDrawable_tileMode android:tileMode}</code></td><td> Defines the tile mode.</td></tr>
           <tr><td><code>{@link #BitmapDrawable_tileModeX android:tileModeX}</code></td><td> Defines the horizontal tile mode.</td></tr>
           <tr><td><code>{@link #BitmapDrawable_tileModeY android:tileModeY}</code></td><td> Defines the vertical tile mode.</td></tr>
           <tr><td><code>{@link #BitmapDrawable_tint android:tint}</code></td><td> If set, specifies the color to apply to the drawable as a tint.</td></tr>
           <tr><td><code>{@link #BitmapDrawable_tintMode android:tintMode}</code></td><td> When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
           </table>
           @see #BitmapDrawable_alpha
           @see #BitmapDrawable_antialias
           @see #BitmapDrawable_autoMirrored
           @see #BitmapDrawable_dither
           @see #BitmapDrawable_filter
           @see #BitmapDrawable_gravity
           @see #BitmapDrawable_mipMap
           @see #BitmapDrawable_src
           @see #BitmapDrawable_tileMode
           @see #BitmapDrawable_tileModeX
           @see #BitmapDrawable_tileModeY
           @see #BitmapDrawable_tint
           @see #BitmapDrawable_tintMode
         */
        public: static const int BitmapDrawable[13];
        /**
          <p>
          @attr description
           Specifies the alpha multiplier to apply to the base drawable. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#alpha}.
          @attr name android:alpha
        */
        public: static const int BitmapDrawable_alpha = 7;
        /**
          <p>
          @attr description
           Enables or disables antialiasing. Antialiasing can be used to smooth the
             edges of a bitmap when rotated. Default value is false. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#antialias}.
          @attr name android:antialias
        */
        public: static const int BitmapDrawable_antialias = 2;
        /**
          <p>
          @attr description
           Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoMirrored}.
          @attr name android:autoMirrored
        */
        public: static const int BitmapDrawable_autoMirrored = 9;
        /**
          <p>
          @attr description
           Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). Default value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dither}.
          @attr name android:dither
        */
        public: static const int BitmapDrawable_dither = 4;
        /**
          <p>
          @attr description
           Enables or disables bitmap filtering. Filtering is used when the bitmap is
             shrunk or stretched to smooth its apperance. Default value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#filter}.
          @attr name android:filter
        */
        public: static const int BitmapDrawable_filter = 3;
        /**
          <p>
          @attr description
           Defines the gravity for the bitmap. The gravity indicates where to position
             the drawable in its container if the bitmap is smaller than the container. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int BitmapDrawable_gravity = 0;
        /**
          <p>
          @attr description
           Enables or disables the mipmap hint. See
            {@link android.graphics.Bitmap#setHasMipMap(boolean)} for more information.
            Default value is false. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#mipMap}.
          @attr name android:mipMap
        */
        public: static const int BitmapDrawable_mipMap = 8;
        /**
          <p>
          @attr description
           Identifier of the bitmap file. This attribute is mandatory. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#src}.
          @attr name android:src
        */
        public: static const int BitmapDrawable_src = 1;
        /**
          <p>
          @attr description
           Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>disabled</code></td><td>-1</td><td> Do not tile the bitmap. This is the default value. </td></tr>
<tr><td><code>clamp</code></td><td>0</td><td> Replicates the edge color. </td></tr>
<tr><td><code>repeat</code></td><td>1</td><td> Repeats the bitmap in both direction. </td></tr>
<tr><td><code>mirror</code></td><td>2</td><td> Repeats the shader's image horizontally and vertically, alternating
                 mirror images so that adjacent images always seam. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tileMode}.
          @attr name android:tileMode
        */
        public: static const int BitmapDrawable_tileMode = 6;
        /**
          <p>
          @attr description
           Defines the horizontal tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>disabled</code></td><td>-1</td><td> Do not tile the bitmap. This is the default value. </td></tr>
<tr><td><code>clamp</code></td><td>0</td><td> Replicates the edge color. </td></tr>
<tr><td><code>repeat</code></td><td>1</td><td> Repeats the bitmap horizontally. </td></tr>
<tr><td><code>mirror</code></td><td>2</td><td> Repeats the shader's image horizontally, alternating
                 mirror images so that adjacent images always seam. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tileModeX}.
          @attr name android:tileModeX
        */
        public: static const int BitmapDrawable_tileModeX = 11;
        /**
          <p>
          @attr description
           Defines the vertical tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>disabled</code></td><td>-1</td><td> Do not tile the bitmap. This is the default value. </td></tr>
<tr><td><code>clamp</code></td><td>0</td><td> Replicates the edge color. </td></tr>
<tr><td><code>repeat</code></td><td>1</td><td> Repeats the bitmap vertically. </td></tr>
<tr><td><code>mirror</code></td><td>2</td><td> Repeats the shader's image vertically, alternating
                 mirror images so that adjacent images always seam. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tileModeY}.
          @attr name android:tileModeY
        */
        public: static const int BitmapDrawable_tileModeY = 12;
        /**
          <p>
          @attr description
           If set, specifies the color to apply to the drawable as a tint. By default,
             no tint is applied. May be a color state list. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tint}.
          @attr name android:tint
        */
        public: static const int BitmapDrawable_tint = 5;
        /**
          <p>
          @attr description
           When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tintMode}.
          @attr name android:tintMode
        */
        public: static const int BitmapDrawable_tintMode = 10;
        /** Attributes that can be used with a Button.
         */
        public: static const int Button[0];
        /** Attributes that can be used with a CalendarView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #CalendarView_dateTextAppearance android:dateTextAppearance}</code></td><td> The text appearance for the calendar dates.</td></tr>
           <tr><td><code>{@link #CalendarView_firstDayOfWeek android:firstDayOfWeek}</code></td><td> The first day of week according to {@link java.util.Calendar}.</td></tr>
           <tr><td><code>{@link #CalendarView_focusedMonthDateColor android:focusedMonthDateColor}</code></td><td> The color for the dates of the focused month.</td></tr>
           <tr><td><code>{@link #CalendarView_maxDate android:maxDate}</code></td><td> The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
           <tr><td><code>{@link #CalendarView_minDate android:minDate}</code></td><td> The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
           <tr><td><code>{@link #CalendarView_selectedDateVerticalBar android:selectedDateVerticalBar}</code></td><td> Drawable for the vertical bar shown at the beginning and at the end of the selected date.</td></tr>
           <tr><td><code>{@link #CalendarView_selectedWeekBackgroundColor android:selectedWeekBackgroundColor}</code></td><td> The background color for the selected week.</td></tr>
           <tr><td><code>{@link #CalendarView_showWeekNumber android:showWeekNumber}</code></td><td> Whether do show week numbers.</td></tr>
           <tr><td><code>{@link #CalendarView_shownWeekCount android:shownWeekCount}</code></td><td> The number of weeks to be shown.</td></tr>
           <tr><td><code>{@link #CalendarView_unfocusedMonthDateColor android:unfocusedMonthDateColor}</code></td><td> The color for the dates of an unfocused month.</td></tr>
           <tr><td><code>{@link #CalendarView_weekDayTextAppearance android:weekDayTextAppearance}</code></td><td> The text appearance for the week day abbreviation of the calendar header.</td></tr>
           <tr><td><code>{@link #CalendarView_weekNumberColor android:weekNumberColor}</code></td><td> The color for the week numbers.</td></tr>
           <tr><td><code>{@link #CalendarView_weekSeparatorLineColor android:weekSeparatorLineColor}</code></td><td> The color for the separator line between weeks.</td></tr>
           </table>
           @see #CalendarView_dateTextAppearance
           @see #CalendarView_firstDayOfWeek
           @see #CalendarView_focusedMonthDateColor
           @see #CalendarView_maxDate
           @see #CalendarView_minDate
           @see #CalendarView_selectedDateVerticalBar
           @see #CalendarView_selectedWeekBackgroundColor
           @see #CalendarView_showWeekNumber
           @see #CalendarView_shownWeekCount
           @see #CalendarView_unfocusedMonthDateColor
           @see #CalendarView_weekDayTextAppearance
           @see #CalendarView_weekNumberColor
           @see #CalendarView_weekSeparatorLineColor
         */
        public: static const int CalendarView[13];
        /**
          <p>
          @attr description
           The text appearance for the calendar dates. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dateTextAppearance}.
          @attr name android:dateTextAppearance
        */
        public: static const int CalendarView_dateTextAppearance = 12;
        /**
          <p>
          @attr description
           The first day of week according to {@link java.util.Calendar}. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#firstDayOfWeek}.
          @attr name android:firstDayOfWeek
        */
        public: static const int CalendarView_firstDayOfWeek = 0;
        /**
          <p>
          @attr description
           The color for the dates of the focused month. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#focusedMonthDateColor}.
          @attr name android:focusedMonthDateColor
        */
        public: static const int CalendarView_focusedMonthDateColor = 6;
        /**
          <p>
          @attr description
           The minimal date shown by this calendar view in mm/dd/yyyy format. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxDate}.
          @attr name android:maxDate
        */
        public: static const int CalendarView_maxDate = 3;
        /**
          <p>
          @attr description
           The minimal date shown by this calendar view in mm/dd/yyyy format. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minDate}.
          @attr name android:minDate
        */
        public: static const int CalendarView_minDate = 2;
        /**
          <p>
          @attr description
           Drawable for the vertical bar shown at the beginning and at the end of the selected date. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#selectedDateVerticalBar}.
          @attr name android:selectedDateVerticalBar
        */
        public: static const int CalendarView_selectedDateVerticalBar = 10;
        /**
          <p>
          @attr description
           The background color for the selected week. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#selectedWeekBackgroundColor}.
          @attr name android:selectedWeekBackgroundColor
        */
        public: static const int CalendarView_selectedWeekBackgroundColor = 5;
        /**
          <p>
          @attr description
           Whether do show week numbers. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#showWeekNumber}.
          @attr name android:showWeekNumber
        */
        public: static const int CalendarView_showWeekNumber = 1;
        /**
          <p>
          @attr description
           The number of weeks to be shown. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shownWeekCount}.
          @attr name android:shownWeekCount
        */
        public: static const int CalendarView_shownWeekCount = 4;
        /**
          <p>
          @attr description
           The color for the dates of an unfocused month. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#unfocusedMonthDateColor}.
          @attr name android:unfocusedMonthDateColor
        */
        public: static const int CalendarView_unfocusedMonthDateColor = 7;
        /**
          <p>
          @attr description
           The text appearance for the week day abbreviation of the calendar header. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#weekDayTextAppearance}.
          @attr name android:weekDayTextAppearance
        */
        public: static const int CalendarView_weekDayTextAppearance = 11;
        /**
          <p>
          @attr description
           The color for the week numbers. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#weekNumberColor}.
          @attr name android:weekNumberColor
        */
        public: static const int CalendarView_weekNumberColor = 8;
        /**
          <p>
          @attr description
           The color for the separator line between weeks. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#weekSeparatorLineColor}.
          @attr name android:weekSeparatorLineColor
        */
        public: static const int CalendarView_weekSeparatorLineColor = 9;
        /**  Use <code>changeTransform</code> as the root tag of the XML resource that
         describes a {@link android.transition.ChangeTransform} transition. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ChangeTransform_reparent android:reparent}</code></td><td> Tells ChangeTransform to track parent changes.</td></tr>
           <tr><td><code>{@link #ChangeTransform_reparentWithOverlay android:reparentWithOverlay}</code></td><td> A parent change should use an overlay or affect the transform of the
             transitionining View.</td></tr>
           </table>
           @see #ChangeTransform_reparent
           @see #ChangeTransform_reparentWithOverlay
         */
        public: static const int ChangeTransform[2];
        /**
          <p>
          @attr description
           Tells ChangeTransform to track parent changes. Default is true. Corresponds to
             {@link android.transition.ChangeTransform#setReparent(boolean)}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#reparent}.
          @attr name android:reparent
        */
        public: static const int ChangeTransform_reparent = 0;
        /**
          <p>
          @attr description
           A parent change should use an overlay or affect the transform of the
             transitionining View. Default is true. Corresponds to
             {@link android.transition.ChangeTransform#setReparentWithOverlay(boolean)}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#reparentWithOverlay}.
          @attr name android:reparentWithOverlay
        */
        public: static const int ChangeTransform_reparentWithOverlay = 1;
        /**  Base attributes available to CheckBoxPreference. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #CheckBoxPreference_disableDependentsState android:disableDependentsState}</code></td><td> The state (true for on, or false for off) that causes dependents to be disabled.</td></tr>
           <tr><td><code>{@link #CheckBoxPreference_summaryOff android:summaryOff}</code></td><td> The summary for the Preference in a PreferenceActivity screen when the
             CheckBoxPreference is unchecked.</td></tr>
           <tr><td><code>{@link #CheckBoxPreference_summaryOn android:summaryOn}</code></td><td> The summary for the Preference in a PreferenceActivity screen when the
             CheckBoxPreference is checked.</td></tr>
           </table>
           @see #CheckBoxPreference_disableDependentsState
           @see #CheckBoxPreference_summaryOff
           @see #CheckBoxPreference_summaryOn
         */
        public: static const int CheckBoxPreference[3];
        /**
          <p>
          @attr description
           The state (true for on, or false for off) that causes dependents to be disabled. By default,
             dependents will be disabled when this is unchecked, so the value of this preference is false. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#disableDependentsState}.
          @attr name android:disableDependentsState
        */
        public: static const int CheckBoxPreference_disableDependentsState = 2;
        /**
          <p>
          @attr description
           The summary for the Preference in a PreferenceActivity screen when the
             CheckBoxPreference is unchecked. If separate on/off summaries are not
             needed, the summary attribute can be used instead. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#summaryOff}.
          @attr name android:summaryOff
        */
        public: static const int CheckBoxPreference_summaryOff = 1;
        /**
          <p>
          @attr description
           The summary for the Preference in a PreferenceActivity screen when the
             CheckBoxPreference is checked. If separate on/off summaries are not
             needed, the summary attribute can be used instead. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#summaryOn}.
          @attr name android:summaryOn
        */
        public: static const int CheckBoxPreference_summaryOn = 0;
        /** Attributes that can be used with a CheckedTextView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #CheckedTextView_checkMark android:checkMark}</code></td><td> Drawable used for the check mark graphic.</td></tr>
           <tr><td><code>{@link #CheckedTextView_checkMarkGravity android:checkMarkGravity}</code></td><td> Gravity for aligning a CheckedTextView's checkmark to one side or the other.</td></tr>
           <tr><td><code>{@link #CheckedTextView_checkMarkTint android:checkMarkTint}</code></td><td> Tint to apply to the check mark.</td></tr>
           <tr><td><code>{@link #CheckedTextView_checkMarkTintMode android:checkMarkTintMode}</code></td><td> Blending mode used to apply the check mark tint.</td></tr>
           <tr><td><code>{@link #CheckedTextView_checked android:checked}</code></td><td> Indicates the initial checked state of this text.</td></tr>
           </table>
           @see #CheckedTextView_checkMark
           @see #CheckedTextView_checkMarkGravity
           @see #CheckedTextView_checkMarkTint
           @see #CheckedTextView_checkMarkTintMode
           @see #CheckedTextView_checked
         */
        public: static const int CheckedTextView[5];
        /**
          <p>
          @attr description
           Drawable used for the check mark graphic. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checkMark}.
          @attr name android:checkMark
        */
        public: static const int CheckedTextView_checkMark = 1;
        /**
          <p>
          @attr description
           Gravity for aligning a CheckedTextView's checkmark to one side or the other. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:checkMarkGravity
        */
        public: static const int CheckedTextView_checkMarkGravity = 4;
        /**
          <p>
          @attr description
           Tint to apply to the check mark. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checkMarkTint}.
          @attr name android:checkMarkTint
        */
        public: static const int CheckedTextView_checkMarkTint = 2;
        /**
          <p>
          @attr description
           Blending mode used to apply the check mark tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checkMarkTintMode}.
          @attr name android:checkMarkTintMode
        */
        public: static const int CheckedTextView_checkMarkTintMode = 3;
        /**
          <p>
          @attr description
           Indicates the initial checked state of this text. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checked}.
          @attr name android:checked
        */
        public: static const int CheckedTextView_checked = 0;
        /** Attributes that can be used with a Chronometer.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Chronometer_format android:format}</code></td><td> Format string: if specified, the Chronometer will display this
             string, with the first "%s" replaced by the current timer value
             in "MM:SS" or "H:MM:SS" form.</td></tr>
           </table>
           @see #Chronometer_format
         */
        public: static const int Chronometer[1];
        /**
          <p>
          @attr description
           Format string: if specified, the Chronometer will display this
             string, with the first "%s" replaced by the current timer value
             in "MM:SS" or "H:MM:SS" form.
             If no format string is specified, the Chronometer will simply display
             "MM:SS" or "H:MM:SS". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#format}.
          @attr name android:format
        */
        public: static const int Chronometer_format = 0;
        /** Attributes that can be used with a ClipDrawable.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ClipDrawable_clipOrientation android:clipOrientation}</code></td><td> The orientation for the clip.</td></tr>
           <tr><td><code>{@link #ClipDrawable_drawable android:drawable}</code></td><td> Reference to a drawable resource to draw with the specified scale.</td></tr>
           <tr><td><code>{@link #ClipDrawable_gravity android:gravity}</code></td><td> Specifies where to clip within the drawable.</td></tr>
           </table>
           @see #ClipDrawable_clipOrientation
           @see #ClipDrawable_drawable
           @see #ClipDrawable_gravity
         */
        public: static const int ClipDrawable[3];
        /**
          <p>
          @attr description
           The orientation for the clip. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>1</td><td> Clip the drawable horizontally. </td></tr>
<tr><td><code>vertical</code></td><td>2</td><td> Clip the drawable vertically. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#clipOrientation}.
          @attr name android:clipOrientation
        */
        public: static const int ClipDrawable_clipOrientation = 2;
        /**
          <p>
          @attr description
           Reference to a drawable resource to draw with the specified scale. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int ClipDrawable_drawable = 1;
        /**
          <p>
          @attr description
           Specifies where to clip within the drawable. The default value is
             left. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int ClipDrawable_gravity = 0;
        /**  Drawable used to draw a single color. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ColorDrawable_color android:color}</code></td><td> The color to use.</td></tr>
           </table>
           @see #ColorDrawable_color
         */
        public: static const int ColorDrawable[1];
        /**
          <p>
          @attr description
           The color to use. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#color}.
          @attr name android:color
        */
        public: static const int ColorDrawable_color = 0;
        /** Attributes that can be used with a CompoundButton.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #CompoundButton_button android:button}</code></td><td> Drawable used for the button graphic (e.</td></tr>
           <tr><td><code>{@link #CompoundButton_buttonTint android:buttonTint}</code></td><td> Tint to apply to the button graphic.</td></tr>
           <tr><td><code>{@link #CompoundButton_buttonTintMode android:buttonTintMode}</code></td><td> Blending mode used to apply the button graphic tint.</td></tr>
           <tr><td><code>{@link #CompoundButton_checked android:checked}</code></td><td> Indicates the initial checked state of this button.</td></tr>
           </table>
           @see #CompoundButton_button
           @see #CompoundButton_buttonTint
           @see #CompoundButton_buttonTintMode
           @see #CompoundButton_checked
         */
        public: static const int CompoundButton[4];
        /**
          <p>
          @attr description
           Drawable used for the button graphic (e.g. checkbox, radio button, etc). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#button}.
          @attr name android:button
        */
        public: static const int CompoundButton_button = 1;
        /**
          <p>
          @attr description
           Tint to apply to the button graphic. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonTint}.
          @attr name android:buttonTint
        */
        public: static const int CompoundButton_buttonTint = 2;
        /**
          <p>
          @attr description
           Blending mode used to apply the button graphic tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonTintMode}.
          @attr name android:buttonTintMode
        */
        public: static const int CompoundButton_buttonTintMode = 3;
        /**
          <p>
          @attr description
           Indicates the initial checked state of this button. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checked}.
          @attr name android:checked
        */
        public: static const int CompoundButton_checked = 0;
        /**  Maps a specific contact data MIME-type to styling information. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ContactsDataKind_allContactsName android:allContactsName}</code></td><td> Resource representing the term "All Contacts" (e.</td></tr>
           <tr><td><code>{@link #ContactsDataKind_detailColumn android:detailColumn}</code></td><td> Column in data table that contains details for this data.</td></tr>
           <tr><td><code>{@link #ContactsDataKind_detailSocialSummary android:detailSocialSummary}</code></td><td> Flag indicating that detail should be built from SocialProvider.</td></tr>
           <tr><td><code>{@link #ContactsDataKind_icon android:icon}</code></td><td> Icon used to represent data of this kind.</td></tr>
           <tr><td><code>{@link #ContactsDataKind_mimeType android:mimeType}</code></td><td> Mime-type handled by this mapping.</td></tr>
           <tr><td><code>{@link #ContactsDataKind_summaryColumn android:summaryColumn}</code></td><td> Column in data table that summarizes this data.</td></tr>
           </table>
           @see #ContactsDataKind_allContactsName
           @see #ContactsDataKind_detailColumn
           @see #ContactsDataKind_detailSocialSummary
           @see #ContactsDataKind_icon
           @see #ContactsDataKind_mimeType
           @see #ContactsDataKind_summaryColumn
         */
        public: static const int ContactsDataKind[6];
        /**
          <p>
          @attr description
           Resource representing the term "All Contacts" (e.g. "All Friends" or
        "All connections"). Optional (Default is "All Contacts"). 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#allContactsName}.
          @attr name android:allContactsName
        */
        public: static const int ContactsDataKind_allContactsName = 5;
        /**
          <p>
          @attr description
           Column in data table that contains details for this data. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#detailColumn}.
          @attr name android:detailColumn
        */
        public: static const int ContactsDataKind_detailColumn = 3;
        /**
          <p>
          @attr description
           Flag indicating that detail should be built from SocialProvider. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#detailSocialSummary}.
          @attr name android:detailSocialSummary
        */
        public: static const int ContactsDataKind_detailSocialSummary = 4;
        /**
          <p>
          @attr description
           Icon used to represent data of this kind. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int ContactsDataKind_icon = 0;
        /**
          <p>
          @attr description
           Mime-type handled by this mapping. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#mimeType}.
          @attr name android:mimeType
        */
        public: static const int ContactsDataKind_mimeType = 1;
        /**
          <p>
          @attr description
           Column in data table that summarizes this data. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#summaryColumn}.
          @attr name android:summaryColumn
        */
        public: static const int ContactsDataKind_summaryColumn = 2;
        /** Attributes that can be used with a CycleInterpolator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #CycleInterpolator_cycles android:cycles}</code></td><td></td></tr>
           </table>
           @see #CycleInterpolator_cycles
         */
        public: static const int CycleInterpolator[1];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#cycles}
          attribute's value can be found in the {@link #CycleInterpolator} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:cycles
        */
        public: static const int CycleInterpolator_cycles = 0;
        /** Attributes that can be used with a DatePicker.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #DatePicker_calendarSelectedTextColor android:calendarSelectedTextColor}</code></td><td> @hide The selected text color for the calendar.</td></tr>
           <tr><td><code>{@link #DatePicker_calendarTextColor android:calendarTextColor}</code></td><td> The text color list of the calendar.</td></tr>
           <tr><td><code>{@link #DatePicker_calendarViewShown android:calendarViewShown}</code></td><td> Whether the calendar view is shown.</td></tr>
           <tr><td><code>{@link #DatePicker_datePickerMode android:datePickerMode}</code></td><td> Defines the look of the widget.</td></tr>
           <tr><td><code>{@link #DatePicker_dayOfWeekBackground android:dayOfWeekBackground}</code></td><td> The background color for the date selector 's day of week.</td></tr>
           <tr><td><code>{@link #DatePicker_dayOfWeekTextAppearance android:dayOfWeekTextAppearance}</code></td><td> The text color for the date selector's day of week.</td></tr>
           <tr><td><code>{@link #DatePicker_endYear android:endYear}</code></td><td> The last year (inclusive), for example "2010".</td></tr>
           <tr><td><code>{@link #DatePicker_firstDayOfWeek android:firstDayOfWeek}</code></td><td> The first day of week according to {@link java.util.Calendar}.</td></tr>
           <tr><td><code>{@link #DatePicker_headerBackground android:headerBackground}</code></td><td> The background for the date selector.</td></tr>
           <tr><td><code>{@link #DatePicker_headerDayOfMonthTextAppearance android:headerDayOfMonthTextAppearance}</code></td><td> The day of month's text appearance in the date selector.</td></tr>
           <tr><td><code>{@link #DatePicker_headerMonthTextAppearance android:headerMonthTextAppearance}</code></td><td> The month's text appearance in the date selector.</td></tr>
           <tr><td><code>{@link #DatePicker_headerSelectedTextColor android:headerSelectedTextColor}</code></td><td> @hide The selected text color for the date selector.</td></tr>
           <tr><td><code>{@link #DatePicker_headerYearTextAppearance android:headerYearTextAppearance}</code></td><td> The year's text appearance in the date selector.</td></tr>
           <tr><td><code>{@link #DatePicker_internalLayout android:internalLayout}</code></td><td> @hide The layout of the date picker.</td></tr>
           <tr><td><code>{@link #DatePicker_legacyLayout android:legacyLayout}</code></td><td> @hide The layout of the legacy DatePicker.</td></tr>
           <tr><td><code>{@link #DatePicker_maxDate android:maxDate}</code></td><td> The maximal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
           <tr><td><code>{@link #DatePicker_minDate android:minDate}</code></td><td> The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
           <tr><td><code>{@link #DatePicker_spinnersShown android:spinnersShown}</code></td><td> Whether the spinners are shown.</td></tr>
           <tr><td><code>{@link #DatePicker_startYear android:startYear}</code></td><td> The first year (inclusive), for example "1940".</td></tr>
           <tr><td><code>{@link #DatePicker_yearListItemTextAppearance android:yearListItemTextAppearance}</code></td><td> The list year's text appearance in the list.</td></tr>
           <tr><td><code>{@link #DatePicker_yearListSelectorColor android:yearListSelectorColor}</code></td><td> The list year's selected circle color in the list.</td></tr>
           </table>
           @see #DatePicker_calendarSelectedTextColor
           @see #DatePicker_calendarTextColor
           @see #DatePicker_calendarViewShown
           @see #DatePicker_datePickerMode
           @see #DatePicker_dayOfWeekBackground
           @see #DatePicker_dayOfWeekTextAppearance
           @see #DatePicker_endYear
           @see #DatePicker_firstDayOfWeek
           @see #DatePicker_headerBackground
           @see #DatePicker_headerDayOfMonthTextAppearance
           @see #DatePicker_headerMonthTextAppearance
           @see #DatePicker_headerSelectedTextColor
           @see #DatePicker_headerYearTextAppearance
           @see #DatePicker_internalLayout
           @see #DatePicker_legacyLayout
           @see #DatePicker_maxDate
           @see #DatePicker_minDate
           @see #DatePicker_spinnersShown
           @see #DatePicker_startYear
           @see #DatePicker_yearListItemTextAppearance
           @see #DatePicker_yearListSelectorColor
         */
        public: static const int DatePicker[21];
        /**
          <p>
          @attr description
           @hide The selected text color for the calendar. Used as a backup
             if the text color does not explicitly have a color set for the
             selected state. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:calendarSelectedTextColor
        */
        public: static const int DatePicker_calendarSelectedTextColor = 18;
        /**
          <p>
          @attr description
           The text color list of the calendar. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#calendarTextColor}.
          @attr name android:calendarTextColor
        */
        public: static const int DatePicker_calendarTextColor = 15;
        /**
          <p>
          @attr description
           Whether the calendar view is shown. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#calendarViewShown}.
          @attr name android:calendarViewShown
        */
        public: static const int DatePicker_calendarViewShown = 7;
        /**
          <p>
          @attr description
           Defines the look of the widget. Prior to the L release, the only choice was
             spinner. As of L, with the Material theme selected, the default layout is calendar,
             but this attribute can be used to force spinner to be used instead. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>spinner</code></td><td>1</td><td> Date picker with spinner controls to select the date. </td></tr>
<tr><td><code>calendar</code></td><td>2</td><td> Date picker with calendar to select the date. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#datePickerMode}.
          @attr name android:datePickerMode
        */
        public: static const int DatePicker_datePickerMode = 16;
        /**
          <p>
          @attr description
           The background color for the date selector 's day of week. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dayOfWeekBackground}.
          @attr name android:dayOfWeekBackground
        */
        public: static const int DatePicker_dayOfWeekBackground = 8;
        /**
          <p>
          @attr description
           The text color for the date selector's day of week. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dayOfWeekTextAppearance}.
          @attr name android:dayOfWeekTextAppearance
        */
        public: static const int DatePicker_dayOfWeekTextAppearance = 9;
        /**
          <p>
          @attr description
           The last year (inclusive), for example "2010".
             {@deprecated Use maxDate instead.} 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#endYear}.
          @attr name android:endYear
        */
        public: static const int DatePicker_endYear = 2;
        /**
          <p>
          @attr description
           The first day of week according to {@link java.util.Calendar}. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#firstDayOfWeek}.
          @attr name android:firstDayOfWeek
        */
        public: static const int DatePicker_firstDayOfWeek = 3;
        /**
          <p>
          @attr description
           The background for the date selector. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#headerBackground}.
          @attr name android:headerBackground
        */
        public: static const int DatePicker_headerBackground = 0;
        /**
          <p>
          @attr description
           The day of month's text appearance in the date selector. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#headerDayOfMonthTextAppearance}.
          @attr name android:headerDayOfMonthTextAppearance
        */
        public: static const int DatePicker_headerDayOfMonthTextAppearance = 11;
        /**
          <p>
          @attr description
           The month's text appearance in the date selector. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#headerMonthTextAppearance}.
          @attr name android:headerMonthTextAppearance
        */
        public: static const int DatePicker_headerMonthTextAppearance = 10;
        /**
          <p>
          @attr description
           @hide The selected text color for the date selector. Used as a
             backup if the text appearance does not explicitly have a color
             set for the selected state. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:headerSelectedTextColor
        */
        public: static const int DatePicker_headerSelectedTextColor = 20;
        /**
          <p>
          @attr description
           The year's text appearance in the date selector. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#headerYearTextAppearance}.
          @attr name android:headerYearTextAppearance
        */
        public: static const int DatePicker_headerYearTextAppearance = 12;
        /**
          <p>
          @attr description
           @hide The layout of the date picker. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:internalLayout
        */
        public: static const int DatePicker_internalLayout = 17;
        /**
          <p>
          @attr description
           @hide The layout of the legacy DatePicker. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:legacyLayout
        */
        public: static const int DatePicker_legacyLayout = 19;
        /**
          <p>
          @attr description
           The maximal date shown by this calendar view in mm/dd/yyyy format. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxDate}.
          @attr name android:maxDate
        */
        public: static const int DatePicker_maxDate = 5;
        /**
          <p>
          @attr description
           The minimal date shown by this calendar view in mm/dd/yyyy format. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minDate}.
          @attr name android:minDate
        */
        public: static const int DatePicker_minDate = 4;
        /**
          <p>
          @attr description
           Whether the spinners are shown. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#spinnersShown}.
          @attr name android:spinnersShown
        */
        public: static const int DatePicker_spinnersShown = 6;
        /**
          <p>
          @attr description
           The first year (inclusive), for example "1940".
             {@deprecated Use minDate instead.} 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#startYear}.
          @attr name android:startYear
        */
        public: static const int DatePicker_startYear = 1;
        /**
          <p>
          @attr description
           The list year's text appearance in the list. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#yearListItemTextAppearance}.
          @attr name android:yearListItemTextAppearance
        */
        public: static const int DatePicker_yearListItemTextAppearance = 13;
        /**
          <p>
          @attr description
           The list year's selected circle color in the list. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#yearListSelectorColor}.
          @attr name android:yearListSelectorColor
        */
        public: static const int DatePicker_yearListSelectorColor = 14;
        /** Attributes that can be used with a DecelerateInterpolator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #DecelerateInterpolator_factor android:factor}</code></td><td> This is the amount of acceleration to add when easing out.</td></tr>
           </table>
           @see #DecelerateInterpolator_factor
         */
        public: static const int DecelerateInterpolator[1];
        /**
          <p>
          @attr description
           This is the amount of acceleration to add when easing out. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#factor}.
          @attr name android:factor
        */
        public: static const int DecelerateInterpolator_factor = 0;
        /**  Use <code>device-admin</code> as the root tag of the XML resource that
         describes a
         {@link android.app.admin.DeviceAdminReceiver}, which is
         referenced from its
         {@link android.app.admin.DeviceAdminReceiver#DEVICE_ADMIN_META_DATA}
         meta-data entry.  Described here are the attributes that can be
         included in that tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #DeviceAdmin_visible android:visible}</code></td><td> Control whether the admin is visible to the user, even when it
             is not enabled.</td></tr>
           </table>
           @see #DeviceAdmin_visible
         */
        public: static const int DeviceAdmin[1];
        /**
          <p>
          @attr description
           Control whether the admin is visible to the user, even when it
             is not enabled.  This is true by default.  You may want to make
             it false if your admin does not make sense to be turned on
             unless some explicit action happens in your app. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int DeviceAdmin_visible = 0;
        /**  Base attributes available to DialogPreference. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #DialogPreference_dialogIcon android:dialogIcon}</code></td><td> The icon for the dialog.</td></tr>
           <tr><td><code>{@link #DialogPreference_dialogLayout android:dialogLayout}</code></td><td> A layout to be used as the content View for the dialog.</td></tr>
           <tr><td><code>{@link #DialogPreference_dialogMessage android:dialogMessage}</code></td><td> The message in the dialog.</td></tr>
           <tr><td><code>{@link #DialogPreference_dialogTitle android:dialogTitle}</code></td><td> The title in the dialog.</td></tr>
           <tr><td><code>{@link #DialogPreference_negativeButtonText android:negativeButtonText}</code></td><td> The negative button text for the dialog.</td></tr>
           <tr><td><code>{@link #DialogPreference_positiveButtonText android:positiveButtonText}</code></td><td> The positive button text for the dialog.</td></tr>
           </table>
           @see #DialogPreference_dialogIcon
           @see #DialogPreference_dialogLayout
           @see #DialogPreference_dialogMessage
           @see #DialogPreference_dialogTitle
           @see #DialogPreference_negativeButtonText
           @see #DialogPreference_positiveButtonText
         */
        public: static const int DialogPreference[6];
        /**
          <p>
          @attr description
           The icon for the dialog. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dialogIcon}.
          @attr name android:dialogIcon
        */
        public: static const int DialogPreference_dialogIcon = 2;
        /**
          <p>
          @attr description
           A layout to be used as the content View for the dialog. By default, this shouldn't
             be needed. If a custom DialogPreference is required, this should be set. For example,
             the EditTextPreference uses a layout with an EditText as this attribute. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dialogLayout}.
          @attr name android:dialogLayout
        */
        public: static const int DialogPreference_dialogLayout = 5;
        /**
          <p>
          @attr description
           The message in the dialog. If a dialogLayout is provided and contains
             a TextView with ID android:id/message, this message will be placed in there. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dialogMessage}.
          @attr name android:dialogMessage
        */
        public: static const int DialogPreference_dialogMessage = 1;
        /**
          <p>
          @attr description
           The title in the dialog. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dialogTitle}.
          @attr name android:dialogTitle
        */
        public: static const int DialogPreference_dialogTitle = 0;
        /**
          <p>
          @attr description
           The negative button text for the dialog. Set to @null to hide the negative button. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#negativeButtonText}.
          @attr name android:negativeButtonText
        */
        public: static const int DialogPreference_negativeButtonText = 4;
        /**
          <p>
          @attr description
           The positive button text for the dialog. Set to @null to hide the positive button. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#positiveButtonText}.
          @attr name android:positiveButtonText
        */
        public: static const int DialogPreference_positiveButtonText = 3;
        /**  Base attributes that are available to all Drawable objects. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Drawable_autoMirrored android:autoMirrored}</code></td><td> Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left).</td></tr>
           <tr><td><code>{@link #Drawable_visible android:visible}</code></td><td> Provides initial visibility state of the drawable; the default
             value is false.</td></tr>
           </table>
           @see #Drawable_autoMirrored
           @see #Drawable_visible
         */
        public: static const int Drawable[2];
        /**
          <p>
          @attr description
           Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left).  See
             {@link android.graphics.drawable.Drawable#setAutoMirrored}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoMirrored}.
          @attr name android:autoMirrored
        */
        public: static const int Drawable_autoMirrored = 1;
        /**
          <p>
          @attr description
           Provides initial visibility state of the drawable; the default
             value is false.  See
             {@link android.graphics.drawable.Drawable#setVisible}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int Drawable_visible = 0;
        /**  Describes the corners for the rectangle shape of a GradientDrawable.
         This can be used to render rounded corners. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #DrawableCorners_bottomLeftRadius android:bottomLeftRadius}</code></td><td> Radius of the bottom left corner.</td></tr>
           <tr><td><code>{@link #DrawableCorners_bottomRightRadius android:bottomRightRadius}</code></td><td> Radius of the bottom right corner.</td></tr>
           <tr><td><code>{@link #DrawableCorners_radius android:radius}</code></td><td> Defines the radius of the four corners.</td></tr>
           <tr><td><code>{@link #DrawableCorners_topLeftRadius android:topLeftRadius}</code></td><td> Radius of the top left corner.</td></tr>
           <tr><td><code>{@link #DrawableCorners_topRightRadius android:topRightRadius}</code></td><td> Radius of the top right corner.</td></tr>
           </table>
           @see #DrawableCorners_bottomLeftRadius
           @see #DrawableCorners_bottomRightRadius
           @see #DrawableCorners_radius
           @see #DrawableCorners_topLeftRadius
           @see #DrawableCorners_topRightRadius
         */
        public: static const int DrawableCorners[5];
        /**
          <p>
          @attr description
           Radius of the bottom left corner. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#bottomLeftRadius}.
          @attr name android:bottomLeftRadius
        */
        public: static const int DrawableCorners_bottomLeftRadius = 3;
        /**
          <p>
          @attr description
           Radius of the bottom right corner. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#bottomRightRadius}.
          @attr name android:bottomRightRadius
        */
        public: static const int DrawableCorners_bottomRightRadius = 4;
        /**
          <p>
          @attr description
           Defines the radius of the four corners. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#radius}.
          @attr name android:radius
        */
        public: static const int DrawableCorners_radius = 0;
        /**
          <p>
          @attr description
           Radius of the top left corner. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#topLeftRadius}.
          @attr name android:topLeftRadius
        */
        public: static const int DrawableCorners_topLeftRadius = 1;
        /**
          <p>
          @attr description
           Radius of the top right corner. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#topRightRadius}.
          @attr name android:topRightRadius
        */
        public: static const int DrawableCorners_topRightRadius = 2;
        /**  Drawable states.
         The mapping of Drawable states to a particular drawables is specified
         in the "state" elements of a Widget's "selector" element.
         Possible values:
         <ul>
         <li>"state_focused"
         <li>"state_window_focused"
         <li>"state_enabled"
         <li>"state_checked"
         <li>"state_selected"
         <li>"state_active"
         <li>"state_single"
         <li>"state_first"
         <li>"state_mid"
         <li>"state_last"
         <li>"state_only"
         <li>"state_pressed"
         <li>"state_activated"
         <li>"state_error"
         <li>"state_circle"
         <li>"state_rect"
         <li>"state_grow"
         <li>"state_move"
         <li>"state_hovered"
         <li>"state_drag_can_accept"
         <li>"state_drag_hovered"
         <li>"state_accessibility_focused"
         </ul>  
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #DrawableStates_state_accelerated android:state_accelerated}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             indicating that the Drawable is in a view that is hardware accelerated.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_accessibility_focused android:state_accessibility_focused}</code></td><td> State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a View has accessibility focus.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_activated android:state_activated}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or its parent has been "activated" meaning the user has currently
             marked it as being of interest.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_active android:state_active}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_checkable android:state_checkable}</code></td><td> State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_checked android:state_checked}</code></td><td> State identifier indicating that the object is currently checked.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_drag_can_accept android:state_drag_can_accept}</code></td><td> State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that the Drawable is in a view that is capable of accepting a drop of
             the content currently being manipulated in a drag-and-drop operation.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_drag_hovered android:state_drag_hovered}</code></td><td> State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a drag operation (for which the Drawable's view is a valid recipient)
             is currently positioned over the Drawable.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_enabled android:state_enabled}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view is enabled.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_first android:state_first}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_focused android:state_focused}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_hovered android:state_hovered}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a pointer is hovering over the view.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_last android:state_last}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_middle android:state_middle}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_pressed android:state_pressed}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when the user is pressing down in a view.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_selected android:state_selected}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view (or one of its parents) is currently selected.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_single android:state_single}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.</td></tr>
           <tr><td><code>{@link #DrawableStates_state_window_focused android:state_window_focused}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view's window has input focus.</td></tr>
           </table>
           @see #DrawableStates_state_accelerated
           @see #DrawableStates_state_accessibility_focused
           @see #DrawableStates_state_activated
           @see #DrawableStates_state_active
           @see #DrawableStates_state_checkable
           @see #DrawableStates_state_checked
           @see #DrawableStates_state_drag_can_accept
           @see #DrawableStates_state_drag_hovered
           @see #DrawableStates_state_enabled
           @see #DrawableStates_state_first
           @see #DrawableStates_state_focused
           @see #DrawableStates_state_hovered
           @see #DrawableStates_state_last
           @see #DrawableStates_state_middle
           @see #DrawableStates_state_pressed
           @see #DrawableStates_state_selected
           @see #DrawableStates_state_single
           @see #DrawableStates_state_window_focused
         */
        public: static const int DrawableStates[18];
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             indicating that the Drawable is in a view that is hardware accelerated.
             This means that the device can at least render a full-screen scaled
             bitmap with one layer of text and bitmaps composited on top of it
             at 60fps.  When this is set, the colorBackgroundCacheHint will be
             ignored even if it specifies a solid color, since that optimization
             is not needed. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_accelerated}.
          @attr name android:state_accelerated
        */
        public: static const int DrawableStates_state_accelerated = 13;
        /**
          <p>
          @attr description
           State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a View has accessibility focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:state_accessibility_focused
        */
        public: static const int DrawableStates_state_accessibility_focused = 17;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or its parent has been "activated" meaning the user has currently
             marked it as being of interest.  This is an alternative representation of
             state_checked for when the state should be propagated down the view hierarchy. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_activated}.
          @attr name android:state_activated
        */
        public: static const int DrawableStates_state_activated = 12;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_active}.
          @attr name android:state_active
        */
        public: static const int DrawableStates_state_active = 6;
        /**
          <p>
          @attr description
           State identifier indicating that the object <var>may</var> display a check mark.
             See {@link R.attr#state_checked} for the identifier that indicates whether it is
             actually checked. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_checkable}.
          @attr name android:state_checkable
        */
        public: static const int DrawableStates_state_checkable = 3;
        /**
          <p>
          @attr description
           State identifier indicating that the object is currently checked.  See
             {@link R.attr#state_checkable} for an additional identifier that can indicate if
             any object may ever display a check, regardless of whether state_checked is
             currently set. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_checked}.
          @attr name android:state_checked
        */
        public: static const int DrawableStates_state_checked = 4;
        /**
          <p>
          @attr description
           State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that the Drawable is in a view that is capable of accepting a drop of
             the content currently being manipulated in a drag-and-drop operation. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_drag_can_accept}.
          @attr name android:state_drag_can_accept
        */
        public: static const int DrawableStates_state_drag_can_accept = 15;
        /**
          <p>
          @attr description
           State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a drag operation (for which the Drawable's view is a valid recipient)
             is currently positioned over the Drawable. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_drag_hovered}.
          @attr name android:state_drag_hovered
        */
        public: static const int DrawableStates_state_drag_hovered = 16;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view is enabled. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_enabled}.
          @attr name android:state_enabled
        */
        public: static const int DrawableStates_state_enabled = 2;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_first}.
          @attr name android:state_first
        */
        public: static const int DrawableStates_state_first = 8;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_focused}.
          @attr name android:state_focused
        */
        public: static const int DrawableStates_state_focused = 0;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a pointer is hovering over the view. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_hovered}.
          @attr name android:state_hovered
        */
        public: static const int DrawableStates_state_hovered = 14;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_last}.
          @attr name android:state_last
        */
        public: static const int DrawableStates_state_last = 10;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_middle}.
          @attr name android:state_middle
        */
        public: static const int DrawableStates_state_middle = 9;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when the user is pressing down in a view. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_pressed}.
          @attr name android:state_pressed
        */
        public: static const int DrawableStates_state_pressed = 11;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view (or one of its parents) is currently selected. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_selected}.
          @attr name android:state_selected
        */
        public: static const int DrawableStates_state_selected = 5;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_single}.
          @attr name android:state_single
        */
        public: static const int DrawableStates_state_single = 7;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view's window has input focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_window_focused}.
          @attr name android:state_window_focused
        */
        public: static const int DrawableStates_state_window_focused = 1;
        /**  Use <code>dream</code> as the root tag of the XML resource that
         describes an
         {@link android.service.dreams.DreamService}, which is
         referenced from its
         {@link android.service.dreams.DreamService#DREAM_META_DATA}
         meta-data entry.  Described here are the attributes that can be
         included in that tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Dream_settingsActivity android:settingsActivity}</code></td><td> Component name of an activity that allows the user to modify
             the settings for this dream.</td></tr>
           </table>
           @see #Dream_settingsActivity
         */
        public: static const int Dream[1];
        /**
          <p>
          @attr description
           Component name of an activity that allows the user to modify
             the settings for this dream. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int Dream_settingsActivity = 0;
        /**  Used as a filter array on the theme to pull out only the EdgeEffect-relevant bits. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #EdgeEffect_colorEdgeEffect android:colorEdgeEffect}</code></td><td> The color applied to the edge effect on scrolling containers.</td></tr>
           </table>
           @see #EdgeEffect_colorEdgeEffect
         */
        public: static const int EdgeEffect[1];
        /**
          <p>
          @attr description
           The color applied to the edge effect on scrolling containers. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorEdgeEffect}.
          @attr name android:colorEdgeEffect
        */
        public: static const int EdgeEffect_colorEdgeEffect = 0;
        /** Attributes that can be used with a EditText.
         */
        public: static const int EditText[0];
        /**  State array representing an expandable list child's indicator. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ExpandableListChildIndicatorState_state_last android:state_last}</code></td><td> State identifier indicating the child is the last child within its group.</td></tr>
           </table>
           @see #ExpandableListChildIndicatorState_state_last
         */
        public: static const int ExpandableListChildIndicatorState[1];
        /**
          <p>
          @attr description
           State identifier indicating the child is the last child within its group. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_last}.
          @attr name android:state_last
        */
        public: static const int ExpandableListChildIndicatorState_state_last = 0;
        /**  State array representing an expandable list group's indicator. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ExpandableListGroupIndicatorState_state_empty android:state_empty}</code></td><td> State identifier indicating the group is empty (has no children).</td></tr>
           <tr><td><code>{@link #ExpandableListGroupIndicatorState_state_expanded android:state_expanded}</code></td><td> State identifier indicating the group is expanded.</td></tr>
           </table>
           @see #ExpandableListGroupIndicatorState_state_empty
           @see #ExpandableListGroupIndicatorState_state_expanded
         */
        public: static const int ExpandableListGroupIndicatorState[2];
        /**
          <p>
          @attr description
           State identifier indicating the group is empty (has no children). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_empty}.
          @attr name android:state_empty
        */
        public: static const int ExpandableListGroupIndicatorState_state_empty = 1;
        /**
          <p>
          @attr description
           State identifier indicating the group is expanded. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_expanded}.
          @attr name android:state_expanded
        */
        public: static const int ExpandableListGroupIndicatorState_state_expanded = 0;
        /** Attributes that can be used with a ExpandableListView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ExpandableListView_childDivider android:childDivider}</code></td><td> Drawable or color that is used as a divider for children.</td></tr>
           <tr><td><code>{@link #ExpandableListView_childIndicator android:childIndicator}</code></td><td> Indicator shown beside the child View.</td></tr>
           <tr><td><code>{@link #ExpandableListView_childIndicatorEnd android:childIndicatorEnd}</code></td><td> The end bound for a child's indicator.</td></tr>
           <tr><td><code>{@link #ExpandableListView_childIndicatorLeft android:childIndicatorLeft}</code></td><td> The left bound for a child's indicator.</td></tr>
           <tr><td><code>{@link #ExpandableListView_childIndicatorRight android:childIndicatorRight}</code></td><td> The right bound for a child's indicator.</td></tr>
           <tr><td><code>{@link #ExpandableListView_childIndicatorStart android:childIndicatorStart}</code></td><td> The start bound for a child's indicator.</td></tr>
           <tr><td><code>{@link #ExpandableListView_groupIndicator android:groupIndicator}</code></td><td> Indicator shown beside the group View.</td></tr>
           <tr><td><code>{@link #ExpandableListView_indicatorEnd android:indicatorEnd}</code></td><td> The end bound for an item's indicator.</td></tr>
           <tr><td><code>{@link #ExpandableListView_indicatorLeft android:indicatorLeft}</code></td><td> The left bound for an item's indicator.</td></tr>
           <tr><td><code>{@link #ExpandableListView_indicatorRight android:indicatorRight}</code></td><td> The right bound for an item's indicator.</td></tr>
           <tr><td><code>{@link #ExpandableListView_indicatorStart android:indicatorStart}</code></td><td> The start bound for an item's indicator.</td></tr>
           </table>
           @see #ExpandableListView_childDivider
           @see #ExpandableListView_childIndicator
           @see #ExpandableListView_childIndicatorEnd
           @see #ExpandableListView_childIndicatorLeft
           @see #ExpandableListView_childIndicatorRight
           @see #ExpandableListView_childIndicatorStart
           @see #ExpandableListView_groupIndicator
           @see #ExpandableListView_indicatorEnd
           @see #ExpandableListView_indicatorLeft
           @see #ExpandableListView_indicatorRight
           @see #ExpandableListView_indicatorStart
         */
        public: static const int ExpandableListView[11];
        /**
          <p>
          @attr description
           Drawable or color that is used as a divider for children. (It will drawn
             below and above child items.) The height of this will be the same as
             the height of the normal list item divider. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#childDivider}.
          @attr name android:childDivider
        */
        public: static const int ExpandableListView_childDivider = 6;
        /**
          <p>
          @attr description
           Indicator shown beside the child View. This can be a stateful Drawable. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#childIndicator}.
          @attr name android:childIndicator
        */
        public: static const int ExpandableListView_childIndicator = 1;
        /**
          <p>
          @attr description
           The end bound for a child's indicator. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#childIndicatorEnd}.
          @attr name android:childIndicatorEnd
        */
        public: static const int ExpandableListView_childIndicatorEnd = 10;
        /**
          <p>
          @attr description
           The left bound for a child's indicator. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#childIndicatorLeft}.
          @attr name android:childIndicatorLeft
        */
        public: static const int ExpandableListView_childIndicatorLeft = 4;
        /**
          <p>
          @attr description
           The right bound for a child's indicator. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#childIndicatorRight}.
          @attr name android:childIndicatorRight
        */
        public: static const int ExpandableListView_childIndicatorRight = 5;
        /**
          <p>
          @attr description
           The start bound for a child's indicator. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#childIndicatorStart}.
          @attr name android:childIndicatorStart
        */
        public: static const int ExpandableListView_childIndicatorStart = 9;
        /**
          <p>
          @attr description
           Indicator shown beside the group View. This can be a stateful Drawable. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#groupIndicator}.
          @attr name android:groupIndicator
        */
        public: static const int ExpandableListView_groupIndicator = 0;
        /**
          <p>
          @attr description
           The end bound for an item's indicator. To specify a right bound specific to children,
             use childIndicatorEnd. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indicatorEnd}.
          @attr name android:indicatorEnd
        */
        public: static const int ExpandableListView_indicatorEnd = 8;
        /**
          <p>
          @attr description
           The left bound for an item's indicator. To specify a left bound specific to children,
             use childIndicatorLeft. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indicatorLeft}.
          @attr name android:indicatorLeft
        */
        public: static const int ExpandableListView_indicatorLeft = 2;
        /**
          <p>
          @attr description
           The right bound for an item's indicator. To specify a right bound specific to children,
             use childIndicatorRight. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indicatorRight}.
          @attr name android:indicatorRight
        */
        public: static const int ExpandableListView_indicatorRight = 3;
        /**
          <p>
          @attr description
           The start bound for an item's indicator. To specify a start bound specific to children,
             use childIndicatorStart. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indicatorStart}.
          @attr name android:indicatorStart
        */
        public: static const int ExpandableListView_indicatorStart = 7;
        /**  An extra data value to place into a an extra/name value pair held
            in a Bundle, as per {@link android.os.Bundle}. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Extra_name android:name}</code></td><td> Required name of the extra data.</td></tr>
           <tr><td><code>{@link #Extra_value android:value}</code></td><td> Concrete value to put for this named extra data.</td></tr>
           </table>
           @see #Extra_name
           @see #Extra_value
         */
        public: static const int Extra[2];
        /**
          <p>
          @attr description
           Required name of the extra data. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int Extra_name = 0;
        /**
          <p>
          @attr description
           Concrete value to put for this named extra data. 


          <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>May be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#value}.
          @attr name android:value
        */
        public: static const int Extra_value = 1;
        /**  Use <code>fade</code>as the root tag of the XML resource that
         describes a {@link android.transition.Fade Fade} transition.
         The attributes of the {@link android.R.styleable#Transition Transition}
         resource are available in addition to the specific attributes of Fade
         described here. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Fade_fadingMode android:fadingMode}</code></td><td> Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
             with the Fade transition.</td></tr>
           </table>
           @see #Fade_fadingMode
         */
        public: static const int Fade[1];
        /**
          <p>
          @attr description
           Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
             with the Fade transition. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fade_in</code></td><td>1</td><td> Fade will only fade appearing items in. </td></tr>
<tr><td><code>fade_out</code></td><td>2</td><td> Fade will only fade disappearing items out. </td></tr>
<tr><td><code>fade_in_out</code></td><td>3</td><td> Fade will fade appearing items in and disappearing items out. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fadingMode}.
          @attr name android:fadingMode
        */
        public: static const int Fade_fadingMode = 0;
        /** Attributes that can be used with a FastScroll.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #FastScroll_backgroundLeft android:backgroundLeft}</code></td><td> Drawable used for the section header preview when left-aligned.</td></tr>
           <tr><td><code>{@link #FastScroll_backgroundRight android:backgroundRight}</code></td><td> Drawable used for the section header preview when right-aligned.</td></tr>
           <tr><td><code>{@link #FastScroll_minHeight android:minHeight}</code></td><td> Minimum height of the section header preview.</td></tr>
           <tr><td><code>{@link #FastScroll_minWidth android:minWidth}</code></td><td> Minimum width of the section header preview.</td></tr>
           <tr><td><code>{@link #FastScroll_padding android:padding}</code></td><td> Padding for the section header preview.</td></tr>
           <tr><td><code>{@link #FastScroll_position android:position}</code></td><td> Position of section header preview.</td></tr>
           <tr><td><code>{@link #FastScroll_textAppearance android:textAppearance}</code></td><td> Default appearance of text: color, typeface, size, and style.</td></tr>
           <tr><td><code>{@link #FastScroll_textColor android:textColor}</code></td><td> Color of text (usually same as colorForeground).</td></tr>
           <tr><td><code>{@link #FastScroll_textSize android:textSize}</code></td><td> Size of text.</td></tr>
           <tr><td><code>{@link #FastScroll_thumbDrawable android:thumbDrawable}</code></td><td> Drawable used for the scroll bar thumb.</td></tr>
           <tr><td><code>{@link #FastScroll_thumbMinHeight android:thumbMinHeight}</code></td><td> Minimum height of the thumb.</td></tr>
           <tr><td><code>{@link #FastScroll_thumbMinWidth android:thumbMinWidth}</code></td><td> Minimum width of the thumb.</td></tr>
           <tr><td><code>{@link #FastScroll_trackDrawable android:trackDrawable}</code></td><td> Drawable used for the scroll bar track.</td></tr>
           </table>
           @see #FastScroll_backgroundLeft
           @see #FastScroll_backgroundRight
           @see #FastScroll_minHeight
           @see #FastScroll_minWidth
           @see #FastScroll_padding
           @see #FastScroll_position
           @see #FastScroll_textAppearance
           @see #FastScroll_textColor
           @see #FastScroll_textSize
           @see #FastScroll_thumbDrawable
           @see #FastScroll_thumbMinHeight
           @see #FastScroll_thumbMinWidth
           @see #FastScroll_trackDrawable
         */
        public: static const int FastScroll[13];
        /**
          <p>
          @attr description
           Drawable used for the section header preview when left-aligned. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:backgroundLeft
        */
        public: static const int FastScroll_backgroundLeft = 11;
        /**
          <p>
          @attr description
           Drawable used for the section header preview when right-aligned. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:backgroundRight
        */
        public: static const int FastScroll_backgroundRight = 10;
        /**
          <p>
          @attr description
           Minimum height of the section header preview. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minHeight}.
          @attr name android:minHeight
        */
        public: static const int FastScroll_minHeight = 5;
        /**
          <p>
          @attr description
           Minimum width of the section header preview. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minWidth}.
          @attr name android:minWidth
        */
        public: static const int FastScroll_minWidth = 4;
        /**
          <p>
          @attr description
           Padding for the section header preview. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#padding}.
          @attr name android:padding
        */
        public: static const int FastScroll_padding = 3;
        /**
          <p>
          @attr description
           Position of section header preview. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>floating</code></td><td>0</td><td> Floating at the top of the content. </td></tr>
<tr><td><code>atThumb</code></td><td>1</td><td> Pinned alongside the thumb. </td></tr>
<tr><td><code>aboveThumb</code></td><td>2</td><td> Pinned above the thumb. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:position
        */
        public: static const int FastScroll_position = 12;
        /**
          <p>
          @attr description
           Default appearance of text: color, typeface, size, and style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearance}.
          @attr name android:textAppearance
        */
        public: static const int FastScroll_textAppearance = 0;
        /**
          <p>
          @attr description
           Color of text (usually same as colorForeground). 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColor}.
          @attr name android:textColor
        */
        public: static const int FastScroll_textColor = 2;
        /**
          <p>
          @attr description
           Size of text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
         Supported values include the following:<p/>
    <ul>
        <li><b>px</b> Pixels</li>
        <li><b>sp</b> Scaled pixels (scaled to relative pixel size on screen). See {@link android.util.DisplayMetrics} for more information.</li>
        <li><b>pt</b> Points</li>
        <li><b>dip</b> Device independent pixels. See {@link android.util.DisplayMetrics} for more information.</li>
    </ul>
        


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSize}.
          @attr name android:textSize
        */
        public: static const int FastScroll_textSize = 1;
        /**
          <p>
          @attr description
           Drawable used for the scroll bar thumb. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:thumbDrawable
        */
        public: static const int FastScroll_thumbDrawable = 6;
        /**
          <p>
          @attr description
           Minimum height of the thumb. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:thumbMinHeight
        */
        public: static const int FastScroll_thumbMinHeight = 8;
        /**
          <p>
          @attr description
           Minimum width of the thumb. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:thumbMinWidth
        */
        public: static const int FastScroll_thumbMinWidth = 7;
        /**
          <p>
          @attr description
           Drawable used for the scroll bar track. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:trackDrawable
        */
        public: static const int FastScroll_trackDrawable = 9;
        /**  Attributes that can be used with <code>&lt;fragment&gt;</code>
         tags inside of the layout of an Activity.  This instantiates
         the given {@link android.app.Fragment} and inserts its content
         view into the current location in the layout. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Fragment_fragmentAllowEnterTransitionOverlap android:fragmentAllowEnterTransitionOverlap}</code></td><td> Sets whether the enter and exit transitions should overlap when transitioning
             forward.</td></tr>
           <tr><td><code>{@link #Fragment_fragmentAllowReturnTransitionOverlap android:fragmentAllowReturnTransitionOverlap}</code></td><td> Sets whether the enter and exit transitions should overlap when transitioning
             because of popping the back stack.</td></tr>
           <tr><td><code>{@link #Fragment_fragmentEnterTransition android:fragmentEnterTransition}</code></td><td> The Transition that will be used to move Views into the initial scene.</td></tr>
           <tr><td><code>{@link #Fragment_fragmentExitTransition android:fragmentExitTransition}</code></td><td> The Transition that will be used to move Views out of the scene when the
             fragment is removed, hidden, or detached when not popping the back stack.</td></tr>
           <tr><td><code>{@link #Fragment_fragmentReenterTransition android:fragmentReenterTransition}</code></td><td> The Transition that will be used to move Views in to the scene when returning due
             to popping a back stack.</td></tr>
           <tr><td><code>{@link #Fragment_fragmentReturnTransition android:fragmentReturnTransition}</code></td><td> The Transition that will be used to move Views out of the scene when the Fragment is
             preparing to be removed, hidden, or detached because of popping the back stack.</td></tr>
           <tr><td><code>{@link #Fragment_fragmentSharedElementEnterTransition android:fragmentSharedElementEnterTransition}</code></td><td> The Transition that will be used for shared elements transferred into the content
             Scene.</td></tr>
           <tr><td><code>{@link #Fragment_fragmentSharedElementReturnTransition android:fragmentSharedElementReturnTransition}</code></td><td> The Transition that will be used for shared elements transferred back during a
             pop of the back stack.</td></tr>
           <tr><td><code>{@link #Fragment_id android:id}</code></td><td> Supply an identifier name for the top-level view, to later retrieve it
             with {@link android.view.View#findViewById View.findViewById()} or
             {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
           <tr><td><code>{@link #Fragment_name android:name}</code></td><td> Supply the name of the fragment class to instantiate.</td></tr>
           <tr><td><code>{@link #Fragment_tag android:tag}</code></td><td> Supply a tag for the top-level view containing a String, to be retrieved
             later with {@link android.view.View#getTag View.getTag()} or
             searched for with {@link android.view.View#findViewWithTag
             View.findViewWithTag()}.</td></tr>
           </table>
           @see #Fragment_fragmentAllowEnterTransitionOverlap
           @see #Fragment_fragmentAllowReturnTransitionOverlap
           @see #Fragment_fragmentEnterTransition
           @see #Fragment_fragmentExitTransition
           @see #Fragment_fragmentReenterTransition
           @see #Fragment_fragmentReturnTransition
           @see #Fragment_fragmentSharedElementEnterTransition
           @see #Fragment_fragmentSharedElementReturnTransition
           @see #Fragment_id
           @see #Fragment_name
           @see #Fragment_tag
         */
        public: static const int Fragment[11];
        /**
          <p>
          @attr description
           Sets whether the enter and exit transitions should overlap when transitioning
             forward.
             Corresponds to {@link android.app.Fragment#setAllowEnterTransitionOverlap(
             boolean)} 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fragmentAllowEnterTransitionOverlap}.
          @attr name android:fragmentAllowEnterTransitionOverlap
        */
        public: static const int Fragment_fragmentAllowEnterTransitionOverlap = 9;
        /**
          <p>
          @attr description
           Sets whether the enter and exit transitions should overlap when transitioning
             because of popping the back stack.
             Corresponds to {@link android.app.Fragment#setAllowReturnTransitionOverlap(
             boolean)} 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fragmentAllowReturnTransitionOverlap}.
          @attr name android:fragmentAllowReturnTransitionOverlap
        */
        public: static const int Fragment_fragmentAllowReturnTransitionOverlap = 10;
        /**
          <p>
          @attr description
           The Transition that will be used to move Views into the initial scene.
             Corresponds to {@link android.app.Fragment#setEnterTransition(
             android.transition.Transition)} 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fragmentEnterTransition}.
          @attr name android:fragmentEnterTransition
        */
        public: static const int Fragment_fragmentEnterTransition = 4;
        /**
          <p>
          @attr description
           The Transition that will be used to move Views out of the scene when the
             fragment is removed, hidden, or detached when not popping the back stack.
             Corresponds to {@link android.app.Fragment#setExitTransition(
             android.transition.Transition)} 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fragmentExitTransition}.
          @attr name android:fragmentExitTransition
        */
        public: static const int Fragment_fragmentExitTransition = 3;
        /**
          <p>
          @attr description
           The Transition that will be used to move Views in to the scene when returning due
             to popping a back stack.
             Corresponds to {@link android.app.Fragment#setReenterTransition(
             android.transition.Transition)} 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fragmentReenterTransition}.
          @attr name android:fragmentReenterTransition
        */
        public: static const int Fragment_fragmentReenterTransition = 8;
        /**
          <p>
          @attr description
           The Transition that will be used to move Views out of the scene when the Fragment is
             preparing to be removed, hidden, or detached because of popping the back stack.
             Corresponds to {@link android.app.Fragment#setReturnTransition(
             android.transition.Transition)} 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fragmentReturnTransition}.
          @attr name android:fragmentReturnTransition
        */
        public: static const int Fragment_fragmentReturnTransition = 6;
        /**
          <p>
          @attr description
           The Transition that will be used for shared elements transferred into the content
             Scene.
             Corresponds to {@link android.app.Fragment#setSharedElementEnterTransition(
             android.transition.Transition)} 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fragmentSharedElementEnterTransition}.
          @attr name android:fragmentSharedElementEnterTransition
        */
        public: static const int Fragment_fragmentSharedElementEnterTransition = 5;
        /**
          <p>
          @attr description
           The Transition that will be used for shared elements transferred back during a
             pop of the back stack. This Transition acts in the leaving Fragment.
             Corresponds to {@link android.app.Fragment#setSharedElementReturnTransition(
             android.transition.Transition)} 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fragmentSharedElementReturnTransition}.
          @attr name android:fragmentSharedElementReturnTransition
        */
        public: static const int Fragment_fragmentSharedElementReturnTransition = 7;
        /**
          <p>
          @attr description
           Supply an identifier name for the top-level view, to later retrieve it
             with {@link android.view.View#findViewById View.findViewById()} or
             {@link android.app.Activity#findViewById Activity.findViewById()}.
             This must be a
             resource reference; typically you set this using the
             <code>@+</code> syntax to create a new ID resources.
             For example: <code>android:id="@+id/my_id"</code> which
             allows you to later retrieve the view
             with <code>findViewById(R.id.my_id)</code>. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#id}.
          @attr name android:id
        */
        public: static const int Fragment_id = 1;
        /**
          <p>
          @attr description
           Supply the name of the fragment class to instantiate. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int Fragment_name = 0;
        /**
          <p>
          @attr description
           Supply a tag for the top-level view containing a String, to be retrieved
             later with {@link android.view.View#getTag View.getTag()} or
             searched for with {@link android.view.View#findViewWithTag
             View.findViewWithTag()}.  It is generally preferable to use
             IDs (through the android:id attribute) instead of tags because
             they are faster and allow for compile-time type checking. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tag}.
          @attr name android:tag
        */
        public: static const int Fragment_tag = 2;
        /**  Fragment animation class attributes. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #FragmentAnimation_fragmentCloseEnterAnimation android:fragmentCloseEnterAnimation}</code></td><td></td></tr>
           <tr><td><code>{@link #FragmentAnimation_fragmentCloseExitAnimation android:fragmentCloseExitAnimation}</code></td><td></td></tr>
           <tr><td><code>{@link #FragmentAnimation_fragmentFadeEnterAnimation android:fragmentFadeEnterAnimation}</code></td><td></td></tr>
           <tr><td><code>{@link #FragmentAnimation_fragmentFadeExitAnimation android:fragmentFadeExitAnimation}</code></td><td></td></tr>
           <tr><td><code>{@link #FragmentAnimation_fragmentOpenEnterAnimation android:fragmentOpenEnterAnimation}</code></td><td></td></tr>
           <tr><td><code>{@link #FragmentAnimation_fragmentOpenExitAnimation android:fragmentOpenExitAnimation}</code></td><td></td></tr>
           </table>
           @see #FragmentAnimation_fragmentCloseEnterAnimation
           @see #FragmentAnimation_fragmentCloseExitAnimation
           @see #FragmentAnimation_fragmentFadeEnterAnimation
           @see #FragmentAnimation_fragmentFadeExitAnimation
           @see #FragmentAnimation_fragmentOpenEnterAnimation
           @see #FragmentAnimation_fragmentOpenExitAnimation
         */
        public: static const int FragmentAnimation[6];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fragmentCloseEnterAnimation}
          attribute's value can be found in the {@link #FragmentAnimation} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:fragmentCloseEnterAnimation
        */
        public: static const int FragmentAnimation_fragmentCloseEnterAnimation = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fragmentCloseExitAnimation}
          attribute's value can be found in the {@link #FragmentAnimation} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:fragmentCloseExitAnimation
        */
        public: static const int FragmentAnimation_fragmentCloseExitAnimation = 3;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fragmentFadeEnterAnimation}
          attribute's value can be found in the {@link #FragmentAnimation} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:fragmentFadeEnterAnimation
        */
        public: static const int FragmentAnimation_fragmentFadeEnterAnimation = 4;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fragmentFadeExitAnimation}
          attribute's value can be found in the {@link #FragmentAnimation} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:fragmentFadeExitAnimation
        */
        public: static const int FragmentAnimation_fragmentFadeExitAnimation = 5;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fragmentOpenEnterAnimation}
          attribute's value can be found in the {@link #FragmentAnimation} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:fragmentOpenEnterAnimation
        */
        public: static const int FragmentAnimation_fragmentOpenEnterAnimation = 0;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fragmentOpenExitAnimation}
          attribute's value can be found in the {@link #FragmentAnimation} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:fragmentOpenExitAnimation
        */
        public: static const int FragmentAnimation_fragmentOpenExitAnimation = 1;
        /**  Attributes that can be used with <code>&lt;FragmentBreadCrumbs&gt;</code>
    tags. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #FragmentBreadCrumbs_gravity android:gravity}</code></td><td> Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.</td></tr>
           <tr><td><code>{@link #FragmentBreadCrumbs_itemColor android:itemColor}</code></td><td></td></tr>
           <tr><td><code>{@link #FragmentBreadCrumbs_itemLayout android:itemLayout}</code></td><td></td></tr>
           </table>
           @see #FragmentBreadCrumbs_gravity
           @see #FragmentBreadCrumbs_itemColor
           @see #FragmentBreadCrumbs_itemLayout
         */
        public: static const int FragmentBreadCrumbs[3];
        /**
          <p>
          @attr description
           Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.  


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int FragmentBreadCrumbs_gravity = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#itemColor}
          attribute's value can be found in the {@link #FragmentBreadCrumbs} array.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          @attr name android:itemColor
        */
        public: static const int FragmentBreadCrumbs_itemColor = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#itemLayout}
          attribute's value can be found in the {@link #FragmentBreadCrumbs} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:itemLayout
        */
        public: static const int FragmentBreadCrumbs_itemLayout = 1;
        /** Attributes that can be used with a FrameLayout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #FrameLayout_foreground android:foreground}</code></td><td> Defines the drawable to draw over the content.</td></tr>
           <tr><td><code>{@link #FrameLayout_foregroundGravity android:foregroundGravity}</code></td><td> Defines the gravity to apply to the foreground drawable.</td></tr>
           <tr><td><code>{@link #FrameLayout_foregroundInsidePadding android:foregroundInsidePadding}</code></td><td> Defines whether the foreground drawable should be drawn inside the padding.</td></tr>
           <tr><td><code>{@link #FrameLayout_foregroundTint android:foregroundTint}</code></td><td> Tint to apply to the foreground.</td></tr>
           <tr><td><code>{@link #FrameLayout_foregroundTintMode android:foregroundTintMode}</code></td><td> Blending mode used to apply the foreground tint.</td></tr>
           <tr><td><code>{@link #FrameLayout_measureAllChildren android:measureAllChildren}</code></td><td> Determines whether to measure all children or just those in
             the VISIBLE or INVISIBLE state when measuring.</td></tr>
           </table>
           @see #FrameLayout_foreground
           @see #FrameLayout_foregroundGravity
           @see #FrameLayout_foregroundInsidePadding
           @see #FrameLayout_foregroundTint
           @see #FrameLayout_foregroundTintMode
           @see #FrameLayout_measureAllChildren
         */
        public: static const int FrameLayout[6];
        /**
          <p>
          @attr description
           Defines the drawable to draw over the content. This can be used as an overlay.
             The foreground drawable participates in the padding of the content if the gravity
             is set to fill. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#foreground}.
          @attr name android:foreground
        */
        public: static const int FrameLayout_foreground = 0;
        /**
          <p>
          @attr description
           Defines the gravity to apply to the foreground drawable. The gravity defaults
             to fill. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the vertical gravity: a top gravity will clip the bottom
                 edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the horizontal gravity: a left gravity will clip the right
                 edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#foregroundGravity}.
          @attr name android:foregroundGravity
        */
        public: static const int FrameLayout_foregroundGravity = 2;
        /**
          <p>
          @attr description
           Defines whether the foreground drawable should be drawn inside the padding.
             This property is turned on by default. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:foregroundInsidePadding
        */
        public: static const int FrameLayout_foregroundInsidePadding = 5;
        /**
          <p>
          @attr description
           Tint to apply to the foreground. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#foregroundTint}.
          @attr name android:foregroundTint
        */
        public: static const int FrameLayout_foregroundTint = 3;
        /**
          <p>
          @attr description
           Blending mode used to apply the foreground tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#foregroundTintMode}.
          @attr name android:foregroundTintMode
        */
        public: static const int FrameLayout_foregroundTintMode = 4;
        /**
          <p>
          @attr description
           Determines whether to measure all children or just those in
             the VISIBLE or INVISIBLE state when measuring. Defaults to false. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#measureAllChildren}.
          @attr name android:measureAllChildren
        */
        public: static const int FrameLayout_measureAllChildren = 1;
        /** Attributes that can be used with a FrameLayout_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #FrameLayout_Layout_layout_gravity android:layout_gravity}</code></td><td> Standard gravity constant that a child supplies to its parent.</td></tr>
           </table>
           @see #FrameLayout_Layout_layout_gravity
         */
        public: static const int FrameLayout_Layout[1];
        /**
          <p>
          @attr description
           Standard gravity constant that a child supplies to its parent.
         Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_gravity}.
          @attr name android:layout_gravity
        */
        public: static const int FrameLayout_Layout_layout_gravity = 0;
        /** Attributes that can be used with a Gallery.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Gallery_animationDuration android:animationDuration}</code></td><td> Sets how long a transition animation should run (in milliseconds)
             when layout has changed.</td></tr>
           <tr><td><code>{@link #Gallery_gravity android:gravity}</code></td><td> Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.</td></tr>
           <tr><td><code>{@link #Gallery_spacing android:spacing}</code></td><td></td></tr>
           <tr><td><code>{@link #Gallery_unselectedAlpha android:unselectedAlpha}</code></td><td> Sets the alpha on the items that are not selected.</td></tr>
           </table>
           @see #Gallery_animationDuration
           @see #Gallery_gravity
           @see #Gallery_spacing
           @see #Gallery_unselectedAlpha
         */
        public: static const int Gallery[4];
        /**
          <p>
          @attr description
           Sets how long a transition animation should run (in milliseconds)
             when layout has changed.  Only relevant if animation is turned on. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animationDuration}.
          @attr name android:animationDuration
        */
        public: static const int Gallery_animationDuration = 1;
        /**
          <p>
          @attr description
           Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.  


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int Gallery_gravity = 0;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#spacing}
          attribute's value can be found in the {@link #Gallery} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:spacing
        */
        public: static const int Gallery_spacing = 2;
        /**
          <p>
          @attr description
           Sets the alpha on the items that are not selected. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#unselectedAlpha}.
          @attr name android:unselectedAlpha
        */
        public: static const int Gallery_unselectedAlpha = 3;
        /**  GestureOverlayView specific attributes. These attributes are used to configure
         a GestureOverlayView from XML. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GestureOverlayView_eventsInterceptionEnabled android:eventsInterceptionEnabled}</code></td><td> Defines whether the overlay should intercept the motion events when a gesture
             is recognized.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_fadeDuration android:fadeDuration}</code></td><td> Duration, in milliseconds, of the fade out effect after the user is done
             drawing a gesture.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_fadeEnabled android:fadeEnabled}</code></td><td> Defines whether the gesture will automatically fade out after being recognized.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_fadeOffset android:fadeOffset}</code></td><td> Time, in milliseconds, to wait before the gesture fades out after the user
             is done drawing it.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_gestureColor android:gestureColor}</code></td><td> Color used to draw a gesture.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_gestureStrokeAngleThreshold android:gestureStrokeAngleThreshold}</code></td><td> Minimum curve angle a stroke must contain before it is recognized as a gesture.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_gestureStrokeLengthThreshold android:gestureStrokeLengthThreshold}</code></td><td> Minimum length of a stroke before it is recognized as a gesture.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_gestureStrokeSquarenessThreshold android:gestureStrokeSquarenessThreshold}</code></td><td> Squareness threshold of a stroke before it is recognized as a gesture.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_gestureStrokeType android:gestureStrokeType}</code></td><td> Defines the type of strokes that define a gesture.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_gestureStrokeWidth android:gestureStrokeWidth}</code></td><td> Width of the stroke used to draw the gesture.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_orientation android:orientation}</code></td><td> Indicates whether horizontal (when the orientation is vertical) or vertical
             (when orientation is horizontal) strokes automatically define a gesture.</td></tr>
           <tr><td><code>{@link #GestureOverlayView_uncertainGestureColor android:uncertainGestureColor}</code></td><td> Color used to draw the user's strokes until we are sure it's a gesture.</td></tr>
           </table>
           @see #GestureOverlayView_eventsInterceptionEnabled
           @see #GestureOverlayView_fadeDuration
           @see #GestureOverlayView_fadeEnabled
           @see #GestureOverlayView_fadeOffset
           @see #GestureOverlayView_gestureColor
           @see #GestureOverlayView_gestureStrokeAngleThreshold
           @see #GestureOverlayView_gestureStrokeLengthThreshold
           @see #GestureOverlayView_gestureStrokeSquarenessThreshold
           @see #GestureOverlayView_gestureStrokeType
           @see #GestureOverlayView_gestureStrokeWidth
           @see #GestureOverlayView_orientation
           @see #GestureOverlayView_uncertainGestureColor
         */
        public: static const int GestureOverlayView[12];
        /**
          <p>
          @attr description
           Defines whether the overlay should intercept the motion events when a gesture
             is recognized. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#eventsInterceptionEnabled}.
          @attr name android:eventsInterceptionEnabled
        */
        public: static const int GestureOverlayView_eventsInterceptionEnabled = 10;
        /**
          <p>
          @attr description
           Duration, in milliseconds, of the fade out effect after the user is done
             drawing a gesture. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fadeDuration}.
          @attr name android:fadeDuration
        */
        public: static const int GestureOverlayView_fadeDuration = 5;
        /**
          <p>
          @attr description
           Defines whether the gesture will automatically fade out after being recognized. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fadeEnabled}.
          @attr name android:fadeEnabled
        */
        public: static const int GestureOverlayView_fadeEnabled = 11;
        /**
          <p>
          @attr description
           Time, in milliseconds, to wait before the gesture fades out after the user
             is done drawing it. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fadeOffset}.
          @attr name android:fadeOffset
        */
        public: static const int GestureOverlayView_fadeOffset = 4;
        /**
          <p>
          @attr description
           Color used to draw a gesture. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gestureColor}.
          @attr name android:gestureColor
        */
        public: static const int GestureOverlayView_gestureColor = 2;
        /**
          <p>
          @attr description
           Minimum curve angle a stroke must contain before it is recognized as a gesture. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gestureStrokeAngleThreshold}.
          @attr name android:gestureStrokeAngleThreshold
        */
        public: static const int GestureOverlayView_gestureStrokeAngleThreshold = 9;
        /**
          <p>
          @attr description
           Minimum length of a stroke before it is recognized as a gesture. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gestureStrokeLengthThreshold}.
          @attr name android:gestureStrokeLengthThreshold
        */
        public: static const int GestureOverlayView_gestureStrokeLengthThreshold = 7;
        /**
          <p>
          @attr description
           Squareness threshold of a stroke before it is recognized as a gesture. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gestureStrokeSquarenessThreshold}.
          @attr name android:gestureStrokeSquarenessThreshold
        */
        public: static const int GestureOverlayView_gestureStrokeSquarenessThreshold = 8;
        /**
          <p>
          @attr description
           Defines the type of strokes that define a gesture. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>single</code></td><td>0</td><td> A gesture is made of only one stroke. </td></tr>
<tr><td><code>multiple</code></td><td>1</td><td> A gesture is made of multiple strokes. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gestureStrokeType}.
          @attr name android:gestureStrokeType
        */
        public: static const int GestureOverlayView_gestureStrokeType = 6;
        /**
          <p>
          @attr description
           Width of the stroke used to draw the gesture. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gestureStrokeWidth}.
          @attr name android:gestureStrokeWidth
        */
        public: static const int GestureOverlayView_gestureStrokeWidth = 1;
        /**
          <p>
          @attr description
           Indicates whether horizontal (when the orientation is vertical) or vertical
             (when orientation is horizontal) strokes automatically define a gesture. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orientation}.
          @attr name android:orientation
        */
        public: static const int GestureOverlayView_orientation = 0;
        /**
          <p>
          @attr description
           Color used to draw the user's strokes until we are sure it's a gesture. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#uncertainGestureColor}.
          @attr name android:uncertainGestureColor
        */
        public: static const int GestureOverlayView_uncertainGestureColor = 3;
        /** Attributes that can be used with a GlowPadView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GlowPadView_allowScaling android:allowScaling}</code></td><td> Determine whether the glow pad is allowed to scale to fit the bounds indicated
            by its parent.</td></tr>
           <tr><td><code>{@link #GlowPadView_alwaysTrackFinger android:alwaysTrackFinger}</code></td><td> Used when the handle shouldn't wait to be hit before following the finger </td></tr>
           <tr><td><code>{@link #GlowPadView_directionDescriptions android:directionDescriptions}</code></td><td> Reference to an array resource that be used to announce the directions with targets around the circle.</td></tr>
           <tr><td><code>{@link #GlowPadView_feedbackCount android:feedbackCount}</code></td><td> Number of waves/chevrons to show in animation.</td></tr>
           <tr><td><code>{@link #GlowPadView_firstItemOffset android:firstItemOffset}</code></td><td> Location along the circle of the first item, in degrees.</td></tr>
           <tr><td><code>{@link #GlowPadView_glowRadius android:glowRadius}</code></td><td> Radius of glow under finger.</td></tr>
           <tr><td><code>{@link #GlowPadView_gravity android:gravity}</code></td><td> Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.</td></tr>
           <tr><td><code>{@link #GlowPadView_handleDrawable android:handleDrawable}</code></td><td> Sets a drawable as the center.</td></tr>
           <tr><td><code>{@link #GlowPadView_innerRadius android:innerRadius}</code></td><td> Inner radius of glow area.</td></tr>
           <tr><td><code>{@link #GlowPadView_magneticTargets android:magneticTargets}</code></td><td> Causes targets to snap to the finger location on activation.</td></tr>
           <tr><td><code>{@link #GlowPadView_outerRadius android:outerRadius}</code></td><td> Outer radius of glow area.</td></tr>
           <tr><td><code>{@link #GlowPadView_outerRingDrawable android:outerRingDrawable}</code></td><td> Drawable to use for wave ripple animation.</td></tr>
           <tr><td><code>{@link #GlowPadView_pointDrawable android:pointDrawable}</code></td><td> Drawble used for drawing points </td></tr>
           <tr><td><code>{@link #GlowPadView_snapMargin android:snapMargin}</code></td><td> How close we need to be before snapping to a target.</td></tr>
           <tr><td><code>{@link #GlowPadView_targetDescriptions android:targetDescriptions}</code></td><td> Reference to an array resource that be used as description for the targets around the circle.</td></tr>
           <tr><td><code>{@link #GlowPadView_targetDrawables android:targetDrawables}</code></td><td> Reference to an array resource that be shown as targets around a circle.</td></tr>
           <tr><td><code>{@link #GlowPadView_vibrationDuration android:vibrationDuration}</code></td><td> Tactile feedback duration for actions.</td></tr>
           </table>
           @see #GlowPadView_allowScaling
           @see #GlowPadView_alwaysTrackFinger
           @see #GlowPadView_directionDescriptions
           @see #GlowPadView_feedbackCount
           @see #GlowPadView_firstItemOffset
           @see #GlowPadView_glowRadius
           @see #GlowPadView_gravity
           @see #GlowPadView_handleDrawable
           @see #GlowPadView_innerRadius
           @see #GlowPadView_magneticTargets
           @see #GlowPadView_outerRadius
           @see #GlowPadView_outerRingDrawable
           @see #GlowPadView_pointDrawable
           @see #GlowPadView_snapMargin
           @see #GlowPadView_targetDescriptions
           @see #GlowPadView_targetDrawables
           @see #GlowPadView_vibrationDuration
         */
        public: static const int GlowPadView[17];
        /**
          <p>
          @attr description
           Determine whether the glow pad is allowed to scale to fit the bounds indicated
            by its parent. If this is set to false, no scaling will occur. If this is set to true
            scaling will occur to fit for any axis in which gravity is set to center. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:allowScaling
        */
        public: static const int GlowPadView_allowScaling = 16;
        /**
          <p>
          @attr description
           Used when the handle shouldn't wait to be hit before following the finger 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:alwaysTrackFinger
        */
        public: static const int GlowPadView_alwaysTrackFinger = 13;
        /**
          <p>
          @attr description
           Reference to an array resource that be used to announce the directions with targets around the circle. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#directionDescriptions}.
          @attr name android:directionDescriptions
        */
        public: static const int GlowPadView_directionDescriptions = 3;
        /**
          <p>
          @attr description
           Number of waves/chevrons to show in animation. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:feedbackCount
        */
        public: static const int GlowPadView_feedbackCount = 12;
        /**
          <p>
          @attr description
           Location along the circle of the first item, in degrees.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:firstItemOffset
        */
        public: static const int GlowPadView_firstItemOffset = 14;
        /**
          <p>
          @attr description
           Radius of glow under finger. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:glowRadius
        */
        public: static const int GlowPadView_glowRadius = 9;
        /**
          <p>
          @attr description
           Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.  


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int GlowPadView_gravity = 0;
        /**
          <p>
          @attr description
           Sets a drawable as the center. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:handleDrawable
        */
        public: static const int GlowPadView_handleDrawable = 5;
        /**
          <p>
          @attr description
           Inner radius of glow area. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#innerRadius}.
          @attr name android:innerRadius
        */
        public: static const int GlowPadView_innerRadius = 1;
        /**
          <p>
          @attr description
           Causes targets to snap to the finger location on activation. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:magneticTargets
        */
        public: static const int GlowPadView_magneticTargets = 15;
        /**
          <p>
          @attr description
           Outer radius of glow area. Target icons will be drawn on this circle. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:outerRadius
        */
        public: static const int GlowPadView_outerRadius = 8;
        /**
          <p>
          @attr description
           Drawable to use for wave ripple animation. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:outerRingDrawable
        */
        public: static const int GlowPadView_outerRingDrawable = 6;
        /**
          <p>
          @attr description
           Drawble used for drawing points 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:pointDrawable
        */
        public: static const int GlowPadView_pointDrawable = 7;
        /**
          <p>
          @attr description
           How close we need to be before snapping to a target. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:snapMargin
        */
        public: static const int GlowPadView_snapMargin = 11;
        /**
          <p>
          @attr description
           Reference to an array resource that be used as description for the targets around the circle. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#targetDescriptions}.
          @attr name android:targetDescriptions
        */
        public: static const int GlowPadView_targetDescriptions = 2;
        /**
          <p>
          @attr description
           Reference to an array resource that be shown as targets around a circle. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:targetDrawables
        */
        public: static const int GlowPadView_targetDrawables = 4;
        /**
          <p>
          @attr description
           Tactile feedback duration for actions. Set to '0' for no vibration. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:vibrationDuration
        */
        public: static const int GlowPadView_vibrationDuration = 10;
        /**  Drawable used to render a geometric shape, with a gradient or a solid color. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GradientDrawable_dither android:dither}</code></td><td> Enables or disables dithering.</td></tr>
           <tr><td><code>{@link #GradientDrawable_innerRadius android:innerRadius}</code></td><td> Inner radius of the ring.</td></tr>
           <tr><td><code>{@link #GradientDrawable_innerRadiusRatio android:innerRadiusRatio}</code></td><td> Inner radius of the ring expressed as a ratio of the ring's width.</td></tr>
           <tr><td><code>{@link #GradientDrawable_shape android:shape}</code></td><td> Indicates what shape to fill with a gradient.</td></tr>
           <tr><td><code>{@link #GradientDrawable_thickness android:thickness}</code></td><td> Thickness of the ring.</td></tr>
           <tr><td><code>{@link #GradientDrawable_thicknessRatio android:thicknessRatio}</code></td><td> Thickness of the ring expressed as a ratio of the ring's width.</td></tr>
           <tr><td><code>{@link #GradientDrawable_useLevel android:useLevel}</code></td><td> Indicates whether the drawable's level affects the way the gradient is drawn.</td></tr>
           <tr><td><code>{@link #GradientDrawable_visible android:visible}</code></td><td> Indicates whether the drawable should intially be visible.</td></tr>
           </table>
           @see #GradientDrawable_dither
           @see #GradientDrawable_innerRadius
           @see #GradientDrawable_innerRadiusRatio
           @see #GradientDrawable_shape
           @see #GradientDrawable_thickness
           @see #GradientDrawable_thicknessRatio
           @see #GradientDrawable_useLevel
           @see #GradientDrawable_visible
         */
        public: static const int GradientDrawable[8];
        /**
          <p>
          @attr description
           Enables or disables dithering. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dither}.
          @attr name android:dither
        */
        public: static const int GradientDrawable_dither = 0;
        /**
          <p>
          @attr description
           Inner radius of the ring. When defined, innerRadiusRatio is ignored. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#innerRadius}.
          @attr name android:innerRadius
        */
        public: static const int GradientDrawable_innerRadius = 6;
        /**
          <p>
          @attr description
           Inner radius of the ring expressed as a ratio of the ring's width. For instance,
             if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
             This value is ignored if innerRadius is defined. Default value is 9. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#innerRadiusRatio}.
          @attr name android:innerRadiusRatio
        */
        public: static const int GradientDrawable_innerRadiusRatio = 3;
        /**
          <p>
          @attr description
           Indicates what shape to fill with a gradient. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>rectangle</code></td><td>0</td><td> Rectangle shape, with optional rounder corners. </td></tr>
<tr><td><code>oval</code></td><td>1</td><td> Oval shape. </td></tr>
<tr><td><code>line</code></td><td>2</td><td> Line shape. </td></tr>
<tr><td><code>ring</code></td><td>3</td><td> Ring shape. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shape}.
          @attr name android:shape
        */
        public: static const int GradientDrawable_shape = 2;
        /**
          <p>
          @attr description
           Thickness of the ring. When defined, thicknessRatio is ignored. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#thickness}.
          @attr name android:thickness
        */
        public: static const int GradientDrawable_thickness = 7;
        /**
          <p>
          @attr description
           Thickness of the ring expressed as a ratio of the ring's width. For instance,
             if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
             This value is ignored if innerRadius is defined. Default value is 3. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#thicknessRatio}.
          @attr name android:thicknessRatio
        */
        public: static const int GradientDrawable_thicknessRatio = 4;
        /**
          <p>
          @attr description
           Indicates whether the drawable's level affects the way the gradient is drawn. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#useLevel}.
          @attr name android:useLevel
        */
        public: static const int GradientDrawable_useLevel = 5;
        /**
          <p>
          @attr description
           Indicates whether the drawable should intially be visible. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int GradientDrawable_visible = 1;
        /**  Used to describe the gradient used to fill the shape of a GradientDrawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GradientDrawableGradient_angle android:angle}</code></td><td> Angle of the gradient.</td></tr>
           <tr><td><code>{@link #GradientDrawableGradient_centerColor android:centerColor}</code></td><td> Optional center color.</td></tr>
           <tr><td><code>{@link #GradientDrawableGradient_centerX android:centerX}</code></td><td> X coordinate of the origin of the gradient within the shape.</td></tr>
           <tr><td><code>{@link #GradientDrawableGradient_centerY android:centerY}</code></td><td> Y coordinate of the origin of the gradient within the shape.</td></tr>
           <tr><td><code>{@link #GradientDrawableGradient_endColor android:endColor}</code></td><td> End color of the gradient.</td></tr>
           <tr><td><code>{@link #GradientDrawableGradient_gradientRadius android:gradientRadius}</code></td><td> Radius of the gradient, used only with radial gradient.</td></tr>
           <tr><td><code>{@link #GradientDrawableGradient_startColor android:startColor}</code></td><td> Start color of the gradient.</td></tr>
           <tr><td><code>{@link #GradientDrawableGradient_type android:type}</code></td><td> Type of gradient.</td></tr>
           <tr><td><code>{@link #GradientDrawableGradient_useLevel android:useLevel}</code></td><td></td></tr>
           </table>
           @see #GradientDrawableGradient_angle
           @see #GradientDrawableGradient_centerColor
           @see #GradientDrawableGradient_centerX
           @see #GradientDrawableGradient_centerY
           @see #GradientDrawableGradient_endColor
           @see #GradientDrawableGradient_gradientRadius
           @see #GradientDrawableGradient_startColor
           @see #GradientDrawableGradient_type
           @see #GradientDrawableGradient_useLevel
         */
        public: static const int GradientDrawableGradient[9];
        /**
          <p>
          @attr description
           Angle of the gradient. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#angle}.
          @attr name android:angle
        */
        public: static const int GradientDrawableGradient_angle = 3;
        /**
          <p>
          @attr description
           Optional center color. For linear gradients, use centerX or centerY
             to place the center color. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#centerColor}.
          @attr name android:centerColor
        */
        public: static const int GradientDrawableGradient_centerColor = 8;
        /**
          <p>
          @attr description
           X coordinate of the origin of the gradient within the shape. 


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#centerX}.
          @attr name android:centerX
        */
        public: static const int GradientDrawableGradient_centerX = 5;
        /**
          <p>
          @attr description
           Y coordinate of the origin of the gradient within the shape. 


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#centerY}.
          @attr name android:centerY
        */
        public: static const int GradientDrawableGradient_centerY = 6;
        /**
          <p>
          @attr description
           End color of the gradient. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#endColor}.
          @attr name android:endColor
        */
        public: static const int GradientDrawableGradient_endColor = 1;
        /**
          <p>
          @attr description
           Radius of the gradient, used only with radial gradient. 


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gradientRadius}.
          @attr name android:gradientRadius
        */
        public: static const int GradientDrawableGradient_gradientRadius = 7;
        /**
          <p>
          @attr description
           Start color of the gradient. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#startColor}.
          @attr name android:startColor
        */
        public: static const int GradientDrawableGradient_startColor = 0;
        /**
          <p>
          @attr description
           Type of gradient. The default type is linear. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>linear</code></td><td>0</td><td> Linear gradient. </td></tr>
<tr><td><code>radial</code></td><td>1</td><td> Radial, or circular, gradient. </td></tr>
<tr><td><code>sweep</code></td><td>2</td><td> Sweep, or angled or diamond, gradient. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#type}.
          @attr name android:type
        */
        public: static const int GradientDrawableGradient_type = 4;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#useLevel}
          attribute's value can be found in the {@link #GradientDrawableGradient} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:useLevel
        */
        public: static const int GradientDrawableGradient_useLevel = 2;
        /**  Used to specify the optional padding of a GradientDrawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GradientDrawablePadding_bottom android:bottom}</code></td><td> Amount of bottom padding inside the gradient shape.</td></tr>
           <tr><td><code>{@link #GradientDrawablePadding_left android:left}</code></td><td> Amount of left padding inside the gradient shape.</td></tr>
           <tr><td><code>{@link #GradientDrawablePadding_right android:right}</code></td><td> Amount of right padding inside the gradient shape.</td></tr>
           <tr><td><code>{@link #GradientDrawablePadding_top android:top}</code></td><td> Amount of top padding inside the gradient shape.</td></tr>
           </table>
           @see #GradientDrawablePadding_bottom
           @see #GradientDrawablePadding_left
           @see #GradientDrawablePadding_right
           @see #GradientDrawablePadding_top
         */
        public: static const int GradientDrawablePadding[4];
        /**
          <p>
          @attr description
           Amount of bottom padding inside the gradient shape. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#bottom}.
          @attr name android:bottom
        */
        public: static const int GradientDrawablePadding_bottom = 3;
        /**
          <p>
          @attr description
           Amount of left padding inside the gradient shape. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#left}.
          @attr name android:left
        */
        public: static const int GradientDrawablePadding_left = 0;
        /**
          <p>
          @attr description
           Amount of right padding inside the gradient shape. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#right}.
          @attr name android:right
        */
        public: static const int GradientDrawablePadding_right = 2;
        /**
          <p>
          @attr description
           Amount of top padding inside the gradient shape. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#top}.
          @attr name android:top
        */
        public: static const int GradientDrawablePadding_top = 1;
        /**  Used to specify the size of the shape for GradientDrawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GradientDrawableSize_height android:height}</code></td><td> Height of the gradient shape.</td></tr>
           <tr><td><code>{@link #GradientDrawableSize_width android:width}</code></td><td> Width of the gradient shape.</td></tr>
           </table>
           @see #GradientDrawableSize_height
           @see #GradientDrawableSize_width
         */
        public: static const int GradientDrawableSize[2];
        /**
          <p>
          @attr description
           Height of the gradient shape. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#height}.
          @attr name android:height
        */
        public: static const int GradientDrawableSize_height = 0;
        /**
          <p>
          @attr description
           Width of the gradient shape. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#width}.
          @attr name android:width
        */
        public: static const int GradientDrawableSize_width = 1;
        /**  Used to fill the shape of GradientDrawable with a solid color. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GradientDrawableSolid_color android:color}</code></td><td> Solid color for the gradient shape.</td></tr>
           </table>
           @see #GradientDrawableSolid_color
         */
        public: static const int GradientDrawableSolid[1];
        /**
          <p>
          @attr description
           Solid color for the gradient shape. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#color}.
          @attr name android:color
        */
        public: static const int GradientDrawableSolid_color = 0;
        /**  Used to describe the optional stroke of a GradientDrawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GradientDrawableStroke_color android:color}</code></td><td> Color of the gradient shape's stroke.</td></tr>
           <tr><td><code>{@link #GradientDrawableStroke_dashGap android:dashGap}</code></td><td> Gap between dashes in the stroke.</td></tr>
           <tr><td><code>{@link #GradientDrawableStroke_dashWidth android:dashWidth}</code></td><td> Length of a dash in the stroke.</td></tr>
           <tr><td><code>{@link #GradientDrawableStroke_width android:width}</code></td><td> Width of the gradient shape's stroke.</td></tr>
           </table>
           @see #GradientDrawableStroke_color
           @see #GradientDrawableStroke_dashGap
           @see #GradientDrawableStroke_dashWidth
           @see #GradientDrawableStroke_width
         */
        public: static const int GradientDrawableStroke[4];
        /**
          <p>
          @attr description
           Color of the gradient shape's stroke. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#color}.
          @attr name android:color
        */
        public: static const int GradientDrawableStroke_color = 1;
        /**
          <p>
          @attr description
           Gap between dashes in the stroke. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dashGap}.
          @attr name android:dashGap
        */
        public: static const int GradientDrawableStroke_dashGap = 3;
        /**
          <p>
          @attr description
           Length of a dash in the stroke. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dashWidth}.
          @attr name android:dashWidth
        */
        public: static const int GradientDrawableStroke_dashWidth = 2;
        /**
          <p>
          @attr description
           Width of the gradient shape's stroke. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#width}.
          @attr name android:width
        */
        public: static const int GradientDrawableStroke_width = 0;
        /** Attributes that can be used with a GridLayout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GridLayout_alignmentMode android:alignmentMode}</code></td><td> When set to alignMargins, causes alignment to take place between the outer
        boundary of a view, as defined by its margins.</td></tr>
           <tr><td><code>{@link #GridLayout_columnCount android:columnCount}</code></td><td> The maxmimum number of columns to create when automatically positioning children.</td></tr>
           <tr><td><code>{@link #GridLayout_columnOrderPreserved android:columnOrderPreserved}</code></td><td> When set to true, forces column boundaries to appear in the same order
        as column indices.</td></tr>
           <tr><td><code>{@link #GridLayout_orientation android:orientation}</code></td><td> The orientation property is not used during layout.</td></tr>
           <tr><td><code>{@link #GridLayout_rowCount android:rowCount}</code></td><td> The maxmimum number of rows to create when automatically positioning children.</td></tr>
           <tr><td><code>{@link #GridLayout_rowOrderPreserved android:rowOrderPreserved}</code></td><td> When set to true, forces row boundaries to appear in the same order
        as row indices.</td></tr>
           <tr><td><code>{@link #GridLayout_useDefaultMargins android:useDefaultMargins}</code></td><td> When set to true, tells GridLayout to use default margins when none are specified
        in a view's layout parameters.</td></tr>
           </table>
           @see #GridLayout_alignmentMode
           @see #GridLayout_columnCount
           @see #GridLayout_columnOrderPreserved
           @see #GridLayout_orientation
           @see #GridLayout_rowCount
           @see #GridLayout_rowOrderPreserved
           @see #GridLayout_useDefaultMargins
         */
        public: static const int GridLayout[7];
        /**
          <p>
          @attr description
           When set to alignMargins, causes alignment to take place between the outer
        boundary of a view, as defined by its margins. When set to alignBounds,
        causes alignment to take place between the edges of the view.
        The default is alignMargins.
        See {@link android.widget.GridLayout#setAlignmentMode(int)}.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>alignBounds</code></td><td>0</td><td> Align the bounds of the children.
        See {@link android.widget.GridLayout#ALIGN_BOUNDS}. </td></tr>
<tr><td><code>alignMargins</code></td><td>1</td><td> Align the margins of the children.
        See {@link android.widget.GridLayout#ALIGN_MARGINS}. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#alignmentMode}.
          @attr name android:alignmentMode
        */
        public: static const int GridLayout_alignmentMode = 6;
        /**
          <p>
          @attr description
           The maxmimum number of columns to create when automatically positioning children. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#columnCount}.
          @attr name android:columnCount
        */
        public: static const int GridLayout_columnCount = 3;
        /**
          <p>
          @attr description
           When set to true, forces column boundaries to appear in the same order
        as column indices.
        The default is true.
        See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#columnOrderPreserved}.
          @attr name android:columnOrderPreserved
        */
        public: static const int GridLayout_columnOrderPreserved = 4;
        /**
          <p>
          @attr description
           The orientation property is not used during layout. It is only used to
        allocate row and column parameters when they are not specified by its children's
        layout paramters. GridLayout works like LinearLayout in this case;
        putting all the components either in a single row or in a single column -
        depending on the value of this flag. In the horizontal case, a columnCount
        property may be additionally supplied to force new rows to be created when a
        row is full. The rowCount attribute may be used similarly in the vertical case.
        The default is horizontal. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orientation}.
          @attr name android:orientation
        */
        public: static const int GridLayout_orientation = 0;
        /**
          <p>
          @attr description
           The maxmimum number of rows to create when automatically positioning children. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#rowCount}.
          @attr name android:rowCount
        */
        public: static const int GridLayout_rowCount = 1;
        /**
          <p>
          @attr description
           When set to true, forces row boundaries to appear in the same order
        as row indices.
        The default is true.
        See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#rowOrderPreserved}.
          @attr name android:rowOrderPreserved
        */
        public: static const int GridLayout_rowOrderPreserved = 2;
        /**
          <p>
          @attr description
           When set to true, tells GridLayout to use default margins when none are specified
        in a view's layout parameters.
        The default value is false.
        See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#useDefaultMargins}.
          @attr name android:useDefaultMargins
        */
        public: static const int GridLayout_useDefaultMargins = 5;
        /** Attributes that can be used with a GridLayoutAnimation.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GridLayoutAnimation_columnDelay android:columnDelay}</code></td><td> Fraction of the animation duration used to delay the beginning of
         the animation of each column.</td></tr>
           <tr><td><code>{@link #GridLayoutAnimation_direction android:direction}</code></td><td> Direction of the animation in the grid.</td></tr>
           <tr><td><code>{@link #GridLayoutAnimation_directionPriority android:directionPriority}</code></td><td> Priority of the rows and columns.</td></tr>
           <tr><td><code>{@link #GridLayoutAnimation_rowDelay android:rowDelay}</code></td><td> Fraction of the animation duration used to delay the beginning of
         the animation of each row.</td></tr>
           </table>
           @see #GridLayoutAnimation_columnDelay
           @see #GridLayoutAnimation_direction
           @see #GridLayoutAnimation_directionPriority
           @see #GridLayoutAnimation_rowDelay
         */
        public: static const int GridLayoutAnimation[4];
        /**
          <p>
          @attr description
           Fraction of the animation duration used to delay the beginning of
         the animation of each column. 


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#columnDelay}.
          @attr name android:columnDelay
        */
        public: static const int GridLayoutAnimation_columnDelay = 0;
        /**
          <p>
          @attr description
           Direction of the animation in the grid. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>left_to_right</code></td><td>0x0</td><td> Animates columns from left to right. </td></tr>
<tr><td><code>right_to_left</code></td><td>0x1</td><td> Animates columns from right to left. </td></tr>
<tr><td><code>top_to_bottom</code></td><td>0x0</td><td> Animates rows from top to bottom. </td></tr>
<tr><td><code>bottom_to_top</code></td><td>0x2</td><td> Animates rows from bottom to top. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#direction}.
          @attr name android:direction
        */
        public: static const int GridLayoutAnimation_direction = 2;
        /**
          <p>
          @attr description
           Priority of the rows and columns. When the priority is none,
         both rows and columns have the same priority. When the priority is
         column, the animations will be applied on the columns first. The same
         goes for rows. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Rows and columns are animated at the same time. </td></tr>
<tr><td><code>column</code></td><td>1</td><td> Columns are animated first. </td></tr>
<tr><td><code>row</code></td><td>2</td><td> Rows are animated first. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#directionPriority}.
          @attr name android:directionPriority
        */
        public: static const int GridLayoutAnimation_directionPriority = 3;
        /**
          <p>
          @attr description
           Fraction of the animation duration used to delay the beginning of
         the animation of each row. 


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#rowDelay}.
          @attr name android:rowDelay
        */
        public: static const int GridLayoutAnimation_rowDelay = 1;
        /** Attributes that can be used with a GridLayout_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_column android:layout_column}</code></td><td> The column boundary delimiting the left of the group of cells
        occupied by this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_columnSpan android:layout_columnSpan}</code></td><td> The column span: the difference between the right and left
        boundaries delimiting the group of cells occupied by this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_columnWeight android:layout_columnWeight}</code></td><td> The relative proportion of horizontal space that should be allocated to this view
        during excess space distribution.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_gravity android:layout_gravity}</code></td><td> Gravity specifies how a component should be placed in its group of cells.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_row android:layout_row}</code></td><td> The row boundary delimiting the top of the group of cells
        occupied by this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_rowSpan android:layout_rowSpan}</code></td><td> The row span: the difference between the top and bottom
        boundaries delimiting the group of cells occupied by this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_rowWeight android:layout_rowWeight}</code></td><td> The relative proportion of vertical space that should be allocated to this view
        during excess space distribution.</td></tr>
           </table>
           @see #GridLayout_Layout_layout_column
           @see #GridLayout_Layout_layout_columnSpan
           @see #GridLayout_Layout_layout_columnWeight
           @see #GridLayout_Layout_layout_gravity
           @see #GridLayout_Layout_layout_row
           @see #GridLayout_Layout_layout_rowSpan
           @see #GridLayout_Layout_layout_rowWeight
         */
        public: static const int GridLayout_Layout[7];
        /**
          <p>
          @attr description
           The column boundary delimiting the left of the group of cells
        occupied by this view. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_column}.
          @attr name android:layout_column
        */
        public: static const int GridLayout_Layout_layout_column = 1;
        /**
          <p>
          @attr description
           The column span: the difference between the right and left
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_columnSpan}.
          @attr name android:layout_columnSpan
        */
        public: static const int GridLayout_Layout_layout_columnSpan = 4;
        /**
          <p>
          @attr description
           The relative proportion of horizontal space that should be allocated to this view
        during excess space distribution. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_columnWeight}.
          @attr name android:layout_columnWeight
        */
        public: static const int GridLayout_Layout_layout_columnWeight = 6;
        /**
          <p>
          @attr description
           Gravity specifies how a component should be placed in its group of cells.
        The default is LEFT | BASELINE.
        See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_gravity}.
          @attr name android:layout_gravity
        */
        public: static const int GridLayout_Layout_layout_gravity = 0;
        /**
          <p>
          @attr description
           The row boundary delimiting the top of the group of cells
        occupied by this view. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_row}.
          @attr name android:layout_row
        */
        public: static const int GridLayout_Layout_layout_row = 2;
        /**
          <p>
          @attr description
           The row span: the difference between the top and bottom
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_rowSpan}.
          @attr name android:layout_rowSpan
        */
        public: static const int GridLayout_Layout_layout_rowSpan = 3;
        /**
          <p>
          @attr description
           The relative proportion of vertical space that should be allocated to this view
        during excess space distribution. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_rowWeight}.
          @attr name android:layout_rowWeight
        */
        public: static const int GridLayout_Layout_layout_rowWeight = 5;
        /** Attributes that can be used with a GridView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GridView_columnWidth android:columnWidth}</code></td><td> Specifies the fixed width for each column.</td></tr>
           <tr><td><code>{@link #GridView_gravity android:gravity}</code></td><td> Specifies the gravity within each cell.</td></tr>
           <tr><td><code>{@link #GridView_horizontalSpacing android:horizontalSpacing}</code></td><td> Defines the default horizontal spacing between columns.</td></tr>
           <tr><td><code>{@link #GridView_numColumns android:numColumns}</code></td><td> Defines how many columns to show.</td></tr>
           <tr><td><code>{@link #GridView_stretchMode android:stretchMode}</code></td><td> Defines how columns should stretch to fill the available empty space, if any.</td></tr>
           <tr><td><code>{@link #GridView_verticalSpacing android:verticalSpacing}</code></td><td> Defines the default vertical spacing between rows.</td></tr>
           </table>
           @see #GridView_columnWidth
           @see #GridView_gravity
           @see #GridView_horizontalSpacing
           @see #GridView_numColumns
           @see #GridView_stretchMode
           @see #GridView_verticalSpacing
         */
        public: static const int GridView[6];
        /**
          <p>
          @attr description
           Specifies the fixed width for each column. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#columnWidth}.
          @attr name android:columnWidth
        */
        public: static const int GridView_columnWidth = 4;
        /**
          <p>
          @attr description
           Specifies the gravity within each cell. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int GridView_gravity = 0;
        /**
          <p>
          @attr description
           Defines the default horizontal spacing between columns. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#horizontalSpacing}.
          @attr name android:horizontalSpacing
        */
        public: static const int GridView_horizontalSpacing = 1;
        /**
          <p>
          @attr description
           Defines how many columns to show. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto_fit</code></td><td>-1</td><td> Display as many columns as possible to fill the available space. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#numColumns}.
          @attr name android:numColumns
        */
        public: static const int GridView_numColumns = 5;
        /**
          <p>
          @attr description
           Defines how columns should stretch to fill the available empty space, if any. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Stretching is disabled. </td></tr>
<tr><td><code>spacingWidth</code></td><td>1</td><td> The spacing between each column is stretched. </td></tr>
<tr><td><code>columnWidth</code></td><td>2</td><td> Each column is stretched equally. </td></tr>
<tr><td><code>spacingWidthUniform</code></td><td>3</td><td> The spacing between each column is uniformly stretched.. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#stretchMode}.
          @attr name android:stretchMode
        */
        public: static const int GridView_stretchMode = 3;
        /**
          <p>
          @attr description
           Defines the default vertical spacing between rows. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#verticalSpacing}.
          @attr name android:verticalSpacing
        */
        public: static const int GridView_verticalSpacing = 2;
        /** Attributes that can be used with a HorizontalScrollView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #HorizontalScrollView_fillViewport android:fillViewport}</code></td><td> Defines whether the scrollview should stretch its content to fill the viewport.</td></tr>
           </table>
           @see #HorizontalScrollView_fillViewport
         */
        public: static const int HorizontalScrollView[1];
        /**
          <p>
          @attr description
           Defines whether the scrollview should stretch its content to fill the viewport. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fillViewport}.
          @attr name android:fillViewport
        */
        public: static const int HorizontalScrollView_fillViewport = 0;
        /**  Use <code>host-apdu-service</code> as the root tag of the XML resource that
         describes an {@link android.nfc.cardemulation.HostApduService} service, which
         is referenced from its {@link android.nfc.cardemulation.HostApduService#SERVICE_META_DATA}
         entry. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #HostApduService_apduServiceBanner android:apduServiceBanner}</code></td><td> A drawable that can be rendered in Android's system UI for representing
             the service.</td></tr>
           <tr><td><code>{@link #HostApduService_description android:description}</code></td><td> Short description of the functionality the service implements.</td></tr>
           <tr><td><code>{@link #HostApduService_requireDeviceUnlock android:requireDeviceUnlock}</code></td><td> Whether the device must be unlocked before routing data to this service.</td></tr>
           </table>
           @see #HostApduService_apduServiceBanner
           @see #HostApduService_description
           @see #HostApduService_requireDeviceUnlock
         */
        public: static const int HostApduService[3];
        /**
          <p>
          @attr description
           A drawable that can be rendered in Android's system UI for representing
             the service. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#apduServiceBanner}.
          @attr name android:apduServiceBanner
        */
        public: static const int HostApduService_apduServiceBanner = 2;
        /**
          <p>
          @attr description
           Short description of the functionality the service implements. This attribute
             is mandatory.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int HostApduService_description = 0;
        /**
          <p>
          @attr description
           Whether the device must be unlocked before routing data to this service.
             The default is false.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#requireDeviceUnlock}.
          @attr name android:requireDeviceUnlock
        */
        public: static const int HostApduService_requireDeviceUnlock = 1;
        /** Attributes that can be used with a Icon.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Icon_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           <tr><td><code>{@link #Icon_mimeType android:mimeType}</code></td><td> Specify a MIME type that is handled, as per
             {@link android.content.IntentFilter#addDataType
             IntentFilter.addDataType()}.</td></tr>
           </table>
           @see #Icon_icon
           @see #Icon_mimeType
         */
        public: static const int Icon[2];
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int Icon_icon = 0;
        /**
          <p>
          @attr description
           Specify a MIME type that is handled, as per
             {@link android.content.IntentFilter#addDataType
             IntentFilter.addDataType()}.
             <p><em>Note: MIME type matching in the Android framework is
             case-sensitive, unlike formal RFC MIME types.  As a result,
             MIME types here should always use lower case letters.</em></p> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#mimeType}.
          @attr name android:mimeType
        */
        public: static const int Icon_mimeType = 1;
        /** Attributes that can be used with a IconDefault.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #IconDefault_icon android:icon}</code></td><td> A Drawable resource providing a graphical representation of its
         associated item.</td></tr>
           </table>
           @see #IconDefault_icon
         */
        public: static const int IconDefault[1];
        /**
          <p>
          @attr description
           A Drawable resource providing a graphical representation of its
         associated item.  Use with the
         application tag (to supply a default icon for all application
         components), or with the activity, receiver, service, or instrumentation
         tag (to supply a specific icon for that component).  It may also be
         used with the intent-filter tag to supply an icon to show to the
         user when an activity is being selected based on a particular Intent.
    
         <p>The given icon will be used to display to the user a graphical
         representation of its associated component; for example, as the icon
         for main activity that is displayed in the launcher.  This must be
         a reference to a Drawable resource containing the image definition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int IconDefault_icon = 0;
        /** Attributes that can be used with a IconMenuView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #IconMenuView_maxItems android:maxItems}</code></td><td> Defines the maximum number of items to show.</td></tr>
           <tr><td><code>{@link #IconMenuView_maxItemsPerRow android:maxItemsPerRow}</code></td><td> Defines the maximum number of items per row.</td></tr>
           <tr><td><code>{@link #IconMenuView_maxRows android:maxRows}</code></td><td> Defines the maximum number of rows displayed.</td></tr>
           <tr><td><code>{@link #IconMenuView_moreIcon android:moreIcon}</code></td><td> 'More' icon.</td></tr>
           <tr><td><code>{@link #IconMenuView_rowHeight android:rowHeight}</code></td><td> Defines the height of each row.</td></tr>
           </table>
           @see #IconMenuView_maxItems
           @see #IconMenuView_maxItemsPerRow
           @see #IconMenuView_maxRows
           @see #IconMenuView_moreIcon
           @see #IconMenuView_rowHeight
         */
        public: static const int IconMenuView[5];
        /**
          <p>
          @attr description
           Defines the maximum number of items to show. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:maxItems
        */
        public: static const int IconMenuView_maxItems = 4;
        /**
          <p>
          @attr description
           Defines the maximum number of items per row. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxItemsPerRow}.
          @attr name android:maxItemsPerRow
        */
        public: static const int IconMenuView_maxItemsPerRow = 2;
        /**
          <p>
          @attr description
           Defines the maximum number of rows displayed. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxRows}.
          @attr name android:maxRows
        */
        public: static const int IconMenuView_maxRows = 1;
        /**
          <p>
          @attr description
           'More' icon. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#moreIcon}.
          @attr name android:moreIcon
        */
        public: static const int IconMenuView_moreIcon = 3;
        /**
          <p>
          @attr description
           Defines the height of each row. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#rowHeight}.
          @attr name android:rowHeight
        */
        public: static const int IconMenuView_rowHeight = 0;
        /** Attributes that can be used with a ImageSwitcher.
         */
        public: static const int ImageSwitcher[0];
        /** Attributes that can be used with a ImageView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ImageView_adjustViewBounds android:adjustViewBounds}</code></td><td> Set this to true if you want the ImageView to adjust its bounds
             to preserve the aspect ratio of its drawable.</td></tr>
           <tr><td><code>{@link #ImageView_baseline android:baseline}</code></td><td> The offset of the baseline within this view.</td></tr>
           <tr><td><code>{@link #ImageView_baselineAlignBottom android:baselineAlignBottom}</code></td><td> If true, the image view will be baseline aligned with based on its
             bottom edge.</td></tr>
           <tr><td><code>{@link #ImageView_cropToPadding android:cropToPadding}</code></td><td> If true, the image will be cropped to fit within its padding.</td></tr>
           <tr><td><code>{@link #ImageView_drawableAlpha android:drawableAlpha}</code></td><td> @hide The alpha value (0-255) set on the ImageView's drawable.</td></tr>
           <tr><td><code>{@link #ImageView_maxHeight android:maxHeight}</code></td><td> An optional argument to supply a maximum height for this view.</td></tr>
           <tr><td><code>{@link #ImageView_maxWidth android:maxWidth}</code></td><td> An optional argument to supply a maximum width for this view.</td></tr>
           <tr><td><code>{@link #ImageView_scaleType android:scaleType}</code></td><td> Controls how the image should be resized or moved to match the size
             of this ImageView.</td></tr>
           <tr><td><code>{@link #ImageView_src android:src}</code></td><td> Sets a drawable as the content of this ImageView.</td></tr>
           <tr><td><code>{@link #ImageView_tint android:tint}</code></td><td> Set a tinting color for the image.</td></tr>
           <tr><td><code>{@link #ImageView_tintMode android:tintMode}</code></td><td> Blending mode used to apply the image tint.</td></tr>
           </table>
           @see #ImageView_adjustViewBounds
           @see #ImageView_baseline
           @see #ImageView_baselineAlignBottom
           @see #ImageView_cropToPadding
           @see #ImageView_drawableAlpha
           @see #ImageView_maxHeight
           @see #ImageView_maxWidth
           @see #ImageView_scaleType
           @see #ImageView_src
           @see #ImageView_tint
           @see #ImageView_tintMode
         */
        public: static const int ImageView[11];
        /**
          <p>
          @attr description
           Set this to true if you want the ImageView to adjust its bounds
             to preserve the aspect ratio of its drawable. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#adjustViewBounds}.
          @attr name android:adjustViewBounds
        */
        public: static const int ImageView_adjustViewBounds = 2;
        /**
          <p>
          @attr description
           The offset of the baseline within this view. See {see android.view.View#getBaseline}
             for details 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#baseline}.
          @attr name android:baseline
        */
        public: static const int ImageView_baseline = 8;
        /**
          <p>
          @attr description
           If true, the image view will be baseline aligned with based on its
             bottom edge. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#baselineAlignBottom}.
          @attr name android:baselineAlignBottom
        */
        public: static const int ImageView_baselineAlignBottom = 6;
        /**
          <p>
          @attr description
           If true, the image will be cropped to fit within its padding. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#cropToPadding}.
          @attr name android:cropToPadding
        */
        public: static const int ImageView_cropToPadding = 7;
        /**
          <p>
          @attr description
           @hide The alpha value (0-255) set on the ImageView's drawable. Equivalent
             to calling ImageView.setAlpha(int), not the same as View.setAlpha(float). 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:drawableAlpha
        */
        public: static const int ImageView_drawableAlpha = 10;
        /**
          <p>
          @attr description
           An optional argument to supply a maximum height for this view.
             See {see android.widget.ImageView#setMaxHeight} for details. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxHeight}.
          @attr name android:maxHeight
        */
        public: static const int ImageView_maxHeight = 4;
        /**
          <p>
          @attr description
           An optional argument to supply a maximum width for this view.
             See {see android.widget.ImageView#setMaxWidth} for details. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxWidth}.
          @attr name android:maxWidth
        */
        public: static const int ImageView_maxWidth = 3;
        /**
          <p>
          @attr description
           Controls how the image should be resized or moved to match the size
             of this ImageView. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>matrix</code></td><td>0</td><td></td></tr>
<tr><td><code>fitXY</code></td><td>1</td><td></td></tr>
<tr><td><code>fitStart</code></td><td>2</td><td></td></tr>
<tr><td><code>fitCenter</code></td><td>3</td><td></td></tr>
<tr><td><code>fitEnd</code></td><td>4</td><td></td></tr>
<tr><td><code>center</code></td><td>5</td><td></td></tr>
<tr><td><code>centerCrop</code></td><td>6</td><td></td></tr>
<tr><td><code>centerInside</code></td><td>7</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scaleType}.
          @attr name android:scaleType
        */
        public: static const int ImageView_scaleType = 1;
        /**
          <p>
          @attr description
           Sets a drawable as the content of this ImageView. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#src}.
          @attr name android:src
        */
        public: static const int ImageView_src = 0;
        /**
          <p>
          @attr description
           Set a tinting color for the image. By default, the tint will blend using SRC_ATOP mode. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tint}.
          @attr name android:tint
        */
        public: static const int ImageView_tint = 5;
        /**
          <p>
          @attr description
           Blending mode used to apply the image tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tintMode}.
          @attr name android:tintMode
        */
        public: static const int ImageView_tintMode = 9;
        /**  An <code>input-extras</code> is a container for extra data to supply to
         an input method.  Contains
         one more more {@link #Extra <extra>} tags.  
         */
        public: static const int InputExtras[0];
        /**  Use <code>input-method</code> as the root tag of the XML resource that
         describes an
         {@link android.view.inputmethod.InputMethod} service, which is
         referenced from its
         {@link android.view.inputmethod.InputMethod#SERVICE_META_DATA}
         meta-data entry.  Described here are the attributes that can be
         included in that tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #InputMethod_isDefault android:isDefault}</code></td><td> Set to true in all of the configurations for which this input
             method should be considered an option as the default.</td></tr>
           <tr><td><code>{@link #InputMethod_settingsActivity android:settingsActivity}</code></td><td> Component name of an activity that allows the user to modify
             the settings for this service.</td></tr>
           <tr><td><code>{@link #InputMethod_supportsSwitchingToNextInputMethod android:supportsSwitchingToNextInputMethod}</code></td><td> Set to true if this input method supports ways to switch to
             a next input method (e.</td></tr>
           </table>
           @see #InputMethod_isDefault
           @see #InputMethod_settingsActivity
           @see #InputMethod_supportsSwitchingToNextInputMethod
         */
        public: static const int InputMethod[3];
        /**
          <p>
          @attr description
           Set to true in all of the configurations for which this input
             method should be considered an option as the default. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isDefault}.
          @attr name android:isDefault
        */
        public: static const int InputMethod_isDefault = 0;
        /**
          <p>
          @attr description
           Component name of an activity that allows the user to modify
             the settings for this service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int InputMethod_settingsActivity = 1;
        /**
          <p>
          @attr description
           Set to true if this input method supports ways to switch to
             a next input method (e.g. a globe key.). When this is true and
             InputMethodManager#shouldOfferSwitchingToNextInputMethod() returns true,
             the IME has to offer ways to invoke InputMethodManager#switchToNextInputMethod()
             accordingly.
             <p> Note that the system determines the most appropriate next input method
             and subtype in order to provide the consistent user experience in switching
             between IMEs and subtypes. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#supportsSwitchingToNextInputMethod}.
          @attr name android:supportsSwitchingToNextInputMethod
        */
        public: static const int InputMethod_supportsSwitchingToNextInputMethod = 2;
        /** Attributes that can be used with a InputMethodService.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #InputMethodService_imeExtractEnterAnimation android:imeExtractEnterAnimation}</code></td><td> Animation to use when showing the fullscreen extract UI after
             it had previously been hidden.</td></tr>
           <tr><td><code>{@link #InputMethodService_imeExtractExitAnimation android:imeExtractExitAnimation}</code></td><td> Animation to use when hiding the fullscreen extract UI after
             it had previously been shown.</td></tr>
           <tr><td><code>{@link #InputMethodService_imeFullscreenBackground android:imeFullscreenBackground}</code></td><td> Background to use for entire input method when it is being
             shown in fullscreen mode with the extract view, to ensure
             that it completely covers the application.</td></tr>
           </table>
           @see #InputMethodService_imeExtractEnterAnimation
           @see #InputMethodService_imeExtractExitAnimation
           @see #InputMethodService_imeFullscreenBackground
         */
        public: static const int InputMethodService[3];
        /**
          <p>
          @attr description
           Animation to use when showing the fullscreen extract UI after
             it had previously been hidden. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeExtractEnterAnimation}.
          @attr name android:imeExtractEnterAnimation
        */
        public: static const int InputMethodService_imeExtractEnterAnimation = 1;
        /**
          <p>
          @attr description
           Animation to use when hiding the fullscreen extract UI after
             it had previously been shown. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeExtractExitAnimation}.
          @attr name android:imeExtractExitAnimation
        */
        public: static const int InputMethodService_imeExtractExitAnimation = 2;
        /**
          <p>
          @attr description
           Background to use for entire input method when it is being
             shown in fullscreen mode with the extract view, to ensure
             that it completely covers the application.  This allows,
             for example, the candidate view to be hidden
             while in fullscreen mode without having the application show through
             behind it.


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeFullscreenBackground}.
          @attr name android:imeFullscreenBackground
        */
        public: static const int InputMethodService_imeFullscreenBackground = 0;
        /**  This is the subtype of InputMethod. Subtype can describe locales (e.g. en_US, fr_FR...)
         and modes (e.g. voice, keyboard...), and is used for IME switch. This subtype allows
         the system to call the specified subtype of the IME directly. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #InputMethod_Subtype_icon android:icon}</code></td><td> The icon of the subtype.</td></tr>
           <tr><td><code>{@link #InputMethod_Subtype_imeSubtypeExtraValue android:imeSubtypeExtraValue}</code></td><td> The extra value of the subtype.</td></tr>
           <tr><td><code>{@link #InputMethod_Subtype_imeSubtypeLocale android:imeSubtypeLocale}</code></td><td> The locale of the subtype.</td></tr>
           <tr><td><code>{@link #InputMethod_Subtype_imeSubtypeMode android:imeSubtypeMode}</code></td><td> The mode of the subtype.</td></tr>
           <tr><td><code>{@link #InputMethod_Subtype_isAsciiCapable android:isAsciiCapable}</code></td><td> Set to true if this subtype is ASCII capable.</td></tr>
           <tr><td><code>{@link #InputMethod_Subtype_isAuxiliary android:isAuxiliary}</code></td><td> Set true if the subtype is auxiliary.</td></tr>
           <tr><td><code>{@link #InputMethod_Subtype_label android:label}</code></td><td> The name of the subtype.</td></tr>
           <tr><td><code>{@link #InputMethod_Subtype_overridesImplicitlyEnabledSubtype android:overridesImplicitlyEnabledSubtype}</code></td><td> Set true when this subtype should be selected by default if no other subtypes are
             selected explicitly.</td></tr>
           <tr><td><code>{@link #InputMethod_Subtype_subtypeId android:subtypeId}</code></td><td> The unique id for the subtype.</td></tr>
           </table>
           @see #InputMethod_Subtype_icon
           @see #InputMethod_Subtype_imeSubtypeExtraValue
           @see #InputMethod_Subtype_imeSubtypeLocale
           @see #InputMethod_Subtype_imeSubtypeMode
           @see #InputMethod_Subtype_isAsciiCapable
           @see #InputMethod_Subtype_isAuxiliary
           @see #InputMethod_Subtype_label
           @see #InputMethod_Subtype_overridesImplicitlyEnabledSubtype
           @see #InputMethod_Subtype_subtypeId
         */
        public: static const int InputMethod_Subtype[9];
        /**
          <p>
          @attr description
           The icon of the subtype. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int InputMethod_Subtype_icon = 1;
        /**
          <p>
          @attr description
           The extra value of the subtype. This string can be any string and will be passed to
             the IME when the framework calls the IME with the subtype.  


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeSubtypeExtraValue}.
          @attr name android:imeSubtypeExtraValue
        */
        public: static const int InputMethod_Subtype_imeSubtypeExtraValue = 4;
        /**
          <p>
          @attr description
           The locale of the subtype. This string should be a locale (e.g. en_US, fr_FR...)
             and will be passed to the IME when the framework calls the IME
             with the subtype. This is also used by the framework to know the supported locales
             of the IME.  


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeSubtypeLocale}.
          @attr name android:imeSubtypeLocale
        */
        public: static const int InputMethod_Subtype_imeSubtypeLocale = 2;
        /**
          <p>
          @attr description
           The mode of the subtype. This string can be a mode (e.g. voice, keyboard...) and this
             string will be passed to the IME when the framework calls the IME with the
             subtype.  


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeSubtypeMode}.
          @attr name android:imeSubtypeMode
        */
        public: static const int InputMethod_Subtype_imeSubtypeMode = 3;
        /**
          <p>
          @attr description
           Set to true if this subtype is ASCII capable. If the subtype is ASCII
             capable, it should guarantee that the user can input ASCII characters with
             this subtype. This is important because many password fields only allow
             ASCII-characters. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isAsciiCapable}.
          @attr name android:isAsciiCapable
        */
        public: static const int InputMethod_Subtype_isAsciiCapable = 8;
        /**
          <p>
          @attr description
           Set true if the subtype is auxiliary.  An auxiliary subtype won't be shown in the
             input method selection list in the settings app.
             InputMethodManager#switchToLastInputMethod will ignore auxiliary subtypes when it
             chooses a target subtype. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isAuxiliary}.
          @attr name android:isAuxiliary
        */
        public: static const int InputMethod_Subtype_isAuxiliary = 5;
        /**
          <p>
          @attr description
           The name of the subtype. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int InputMethod_Subtype_label = 0;
        /**
          <p>
          @attr description
           Set true when this subtype should be selected by default if no other subtypes are
             selected explicitly. Note that a subtype with this parameter being true will
             not be shown in the subtypes list. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#overridesImplicitlyEnabledSubtype}.
          @attr name android:overridesImplicitlyEnabledSubtype
        */
        public: static const int InputMethod_Subtype_overridesImplicitlyEnabledSubtype = 6;
        /**
          <p>
          @attr description
           The unique id for the subtype. The input method framework keeps track of enabled
             subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even
             if other attributes are different. If the ID is unspecified (by calling the other
             constructor or 0. Arrays.hashCode(new Object[] {locale, mode, extraValue,
             isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#subtypeId}.
          @attr name android:subtypeId
        */
        public: static const int InputMethod_Subtype_subtypeId = 7;
        /** Attributes that can be used with a InsetDrawable.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #InsetDrawable_drawable android:drawable}</code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
           <tr><td><code>{@link #InsetDrawable_inset android:inset}</code></td><td></td></tr>
           <tr><td><code>{@link #InsetDrawable_insetBottom android:insetBottom}</code></td><td></td></tr>
           <tr><td><code>{@link #InsetDrawable_insetLeft android:insetLeft}</code></td><td></td></tr>
           <tr><td><code>{@link #InsetDrawable_insetRight android:insetRight}</code></td><td></td></tr>
           <tr><td><code>{@link #InsetDrawable_insetTop android:insetTop}</code></td><td></td></tr>
           <tr><td><code>{@link #InsetDrawable_visible android:visible}</code></td><td> Provides initial visibility state of the drawable; the default
             value is false.</td></tr>
           </table>
           @see #InsetDrawable_drawable
           @see #InsetDrawable_inset
           @see #InsetDrawable_insetBottom
           @see #InsetDrawable_insetLeft
           @see #InsetDrawable_insetRight
           @see #InsetDrawable_insetTop
           @see #InsetDrawable_visible
         */
        public: static const int InsetDrawable[7];
        /**
          <p>
          @attr description
           Reference to a drawable resource to use for the frame.  If not
             given, the drawable must be defined by the first child tag. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int InsetDrawable_drawable = 1;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#inset}
          attribute's value can be found in the {@link #InsetDrawable} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:inset
        */
        public: static const int InsetDrawable_inset = 6;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#insetBottom}
          attribute's value can be found in the {@link #InsetDrawable} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:insetBottom
        */
        public: static const int InsetDrawable_insetBottom = 5;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#insetLeft}
          attribute's value can be found in the {@link #InsetDrawable} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:insetLeft
        */
        public: static const int InsetDrawable_insetLeft = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#insetRight}
          attribute's value can be found in the {@link #InsetDrawable} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:insetRight
        */
        public: static const int InsetDrawable_insetRight = 3;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#insetTop}
          attribute's value can be found in the {@link #InsetDrawable} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:insetTop
        */
        public: static const int InsetDrawable_insetTop = 4;
        /**
          <p>
          @attr description
           Provides initial visibility state of the drawable; the default
             value is false.  See
             {@link android.graphics.drawable.Drawable#setVisible}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int InsetDrawable_visible = 0;
        /**  Declaration of an {@link android.content.Intent} object in XML.  May
         also include zero or more {@link #IntentCategory <category> and
         {@link #Extra <extra>} tags. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Intent_action android:action}</code></td><td> The action name to assign to the Intent, as per
            {@link android.content.Intent#setAction Intent.setAction()}.</td></tr>
           <tr><td><code>{@link #Intent_data android:data}</code></td><td> The data URI to assign to the Intent, as per
            {@link android.content.Intent#setData Intent.setData()}.</td></tr>
           <tr><td><code>{@link #Intent_mimeType android:mimeType}</code></td><td> The MIME type name to assign to the Intent, as per
            {@link android.content.Intent#setType Intent.setType()}.</td></tr>
           <tr><td><code>{@link #Intent_targetClass android:targetClass}</code></td><td> The class part of the ComponentName to assign to the Intent, as per
            {@link android.content.Intent#setComponent Intent.setComponent()}.</td></tr>
           <tr><td><code>{@link #Intent_targetPackage android:targetPackage}</code></td><td> The package part of the ComponentName to assign to the Intent, as per
            {@link android.content.Intent#setComponent Intent.setComponent()}.</td></tr>
           </table>
           @see #Intent_action
           @see #Intent_data
           @see #Intent_mimeType
           @see #Intent_targetClass
           @see #Intent_targetPackage
         */
        public: static const int Intent[5];
        /**
          <p>
          @attr description
           The action name to assign to the Intent, as per
            {@link android.content.Intent#setAction Intent.setAction()}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#action}.
          @attr name android:action
        */
        public: static const int Intent_action = 2;
        /**
          <p>
          @attr description
           The data URI to assign to the Intent, as per
            {@link android.content.Intent#setData Intent.setData()}.
            <p><em>Note: scheme and host name matching in the Android framework is
            case-sensitive, unlike the formal RFC.  As a result,
            URIs here should always be normalized to use lower case letters
            for these elements (as well as other proper Uri normalization).</em></p> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#data}.
          @attr name android:data
        */
        public: static const int Intent_data = 3;
        /**
          <p>
          @attr description
           The MIME type name to assign to the Intent, as per
            {@link android.content.Intent#setType Intent.setType()}.
            <p><em>Note: MIME type matching in the Android framework is
            case-sensitive, unlike formal RFC MIME types.  As a result,
            MIME types here should always use lower case letters.</em></p> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#mimeType}.
          @attr name android:mimeType
        */
        public: static const int Intent_mimeType = 1;
        /**
          <p>
          @attr description
           The class part of the ComponentName to assign to the Intent, as per
            {@link android.content.Intent#setComponent Intent.setComponent()}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#targetClass}.
          @attr name android:targetClass
        */
        public: static const int Intent_targetClass = 4;
        /**
          <p>
          @attr description
           The package part of the ComponentName to assign to the Intent, as per
            {@link android.content.Intent#setComponent Intent.setComponent()}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#targetPackage}.
          @attr name android:targetPackage
        */
        public: static const int Intent_targetPackage = 0;
        /**  A category to add to an Intent, as per
            {@link android.content.Intent#addCategory Intent.addCategory()}. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #IntentCategory_name android:name}</code></td><td> Required name of the category.</td></tr>
           </table>
           @see #IntentCategory_name
         */
        public: static const int IntentCategory[1];
        /**
          <p>
          @attr description
           Required name of the category. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int IntentCategory_name = 0;
        /** Attributes that can be used with a Keyboard.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Keyboard_horizontalGap android:horizontalGap}</code></td><td> Default horizontal gap between keys.</td></tr>
           <tr><td><code>{@link #Keyboard_keyHeight android:keyHeight}</code></td><td> Default height of a key, in pixels or percentage of display width.</td></tr>
           <tr><td><code>{@link #Keyboard_keyWidth android:keyWidth}</code></td><td> Default width of a key, in pixels or percentage of display width.</td></tr>
           <tr><td><code>{@link #Keyboard_verticalGap android:verticalGap}</code></td><td> Default vertical gap between rows of keys.</td></tr>
           </table>
           @see #Keyboard_horizontalGap
           @see #Keyboard_keyHeight
           @see #Keyboard_keyWidth
           @see #Keyboard_verticalGap
         */
        public: static const int Keyboard[4];
        /**
          <p>
          @attr description
           Default horizontal gap between keys. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#horizontalGap}.
          @attr name android:horizontalGap
        */
        public: static const int Keyboard_horizontalGap = 2;
        /**
          <p>
          @attr description
           Default height of a key, in pixels or percentage of display width. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyHeight}.
          @attr name android:keyHeight
        */
        public: static const int Keyboard_keyHeight = 1;
        /**
          <p>
          @attr description
           Default width of a key, in pixels or percentage of display width. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyWidth}.
          @attr name android:keyWidth
        */
        public: static const int Keyboard_keyWidth = 0;
        /**
          <p>
          @attr description
           Default vertical gap between rows of keys. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#verticalGap}.
          @attr name android:verticalGap
        */
        public: static const int Keyboard_verticalGap = 3;
        /**  Use <code>keyboard-layouts</code> as the root tag of the XML resource that
         describes a collection of keyboard layouts provided by an application.
         Each keyboard layout is declared by a <code>keyboard-layout</code> tag
         with these attributes.

         The XML resource that contains the keyboard layouts must be referenced from its
         {@link android.hardware.input.InputManager#META_DATA_KEYBOARD_LAYOUTS}
         meta-data entry used with broadcast receivers for
         {@link android.hardware.input.InputManager#ACTION_QUERY_KEYBOARD_LAYOUTS}. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #KeyboardLayout_keyboardLayout android:keyboardLayout}</code></td><td> The key character map file resource.</td></tr>
           <tr><td><code>{@link #KeyboardLayout_label android:label}</code></td><td> The display label of the keyboard layout.</td></tr>
           <tr><td><code>{@link #KeyboardLayout_name android:name}</code></td><td> The name of the keyboard layout, must be unique in the receiver.</td></tr>
           </table>
           @see #KeyboardLayout_keyboardLayout
           @see #KeyboardLayout_label
           @see #KeyboardLayout_name
         */
        public: static const int KeyboardLayout[3];
        /**
          <p>
          @attr description
           The key character map file resource. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyboardLayout}.
          @attr name android:keyboardLayout
        */
        public: static const int KeyboardLayout_keyboardLayout = 2;
        /**
          <p>
          @attr description
           The display label of the keyboard layout. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int KeyboardLayout_label = 0;
        /**
          <p>
          @attr description
           The name of the keyboard layout, must be unique in the receiver. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int KeyboardLayout_name = 1;
        /** Attributes that can be used with a KeyboardView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #KeyboardView_keyBackground android:keyBackground}</code></td><td> Image for the key.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewHeight android:keyPreviewHeight}</code></td><td> Height of the key press feedback popup.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewLayout android:keyPreviewLayout}</code></td><td> Layout resource for key press feedback.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewOffset android:keyPreviewOffset}</code></td><td> Vertical offset of the key press feedback from the key.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyTextColor android:keyTextColor}</code></td><td> Color to use for the label in a key.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyTextSize android:keyTextSize}</code></td><td> Size of the text for character keys.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyboardViewStyle android:keyboardViewStyle}</code></td><td> Default KeyboardView style.</td></tr>
           <tr><td><code>{@link #KeyboardView_labelTextSize android:labelTextSize}</code></td><td> Size of the text for custom keys with some text and no icon.</td></tr>
           <tr><td><code>{@link #KeyboardView_popupLayout android:popupLayout}</code></td><td> Layout resource for popup keyboards.</td></tr>
           <tr><td><code>{@link #KeyboardView_shadowColor android:shadowColor}</code></td><td> Place a blurred shadow of text underneath the text, drawn with the
             specified color.</td></tr>
           <tr><td><code>{@link #KeyboardView_shadowRadius android:shadowRadius}</code></td><td> Blur radius of the text shadow.</td></tr>
           <tr><td><code>{@link #KeyboardView_verticalCorrection android:verticalCorrection}</code></td><td> Amount to offset the touch Y coordinate by, for bias correction.</td></tr>
           </table>
           @see #KeyboardView_keyBackground
           @see #KeyboardView_keyPreviewHeight
           @see #KeyboardView_keyPreviewLayout
           @see #KeyboardView_keyPreviewOffset
           @see #KeyboardView_keyTextColor
           @see #KeyboardView_keyTextSize
           @see #KeyboardView_keyboardViewStyle
           @see #KeyboardView_labelTextSize
           @see #KeyboardView_popupLayout
           @see #KeyboardView_shadowColor
           @see #KeyboardView_shadowRadius
           @see #KeyboardView_verticalCorrection
         */
        public: static const int KeyboardView[12];
        /**
          <p>
          @attr description
           Image for the key. This image needs to be a StateListDrawable, with the following
             possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
             checkable+checked+pressed. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyBackground}.
          @attr name android:keyBackground
        */
        public: static const int KeyboardView_keyBackground = 2;
        /**
          <p>
          @attr description
           Height of the key press feedback popup. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyPreviewHeight}.
          @attr name android:keyPreviewHeight
        */
        public: static const int KeyboardView_keyPreviewHeight = 8;
        /**
          <p>
          @attr description
           Layout resource for key press feedback.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyPreviewLayout}.
          @attr name android:keyPreviewLayout
        */
        public: static const int KeyboardView_keyPreviewLayout = 6;
        /**
          <p>
          @attr description
           Vertical offset of the key press feedback from the key. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyPreviewOffset}.
          @attr name android:keyPreviewOffset
        */
        public: static const int KeyboardView_keyPreviewOffset = 7;
        /**
          <p>
          @attr description
           Color to use for the label in a key. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyTextColor}.
          @attr name android:keyTextColor
        */
        public: static const int KeyboardView_keyTextColor = 5;
        /**
          <p>
          @attr description
           Size of the text for character keys. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyTextSize}.
          @attr name android:keyTextSize
        */
        public: static const int KeyboardView_keyTextSize = 3;
        /**
          <p>
          @attr description
           Default KeyboardView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyboardViewStyle
        */
        public: static const int KeyboardView_keyboardViewStyle = 11;
        /**
          <p>
          @attr description
           Size of the text for custom keys with some text and no icon. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#labelTextSize}.
          @attr name android:labelTextSize
        */
        public: static const int KeyboardView_labelTextSize = 4;
        /**
          <p>
          @attr description
           Layout resource for popup keyboards. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupLayout}.
          @attr name android:popupLayout
        */
        public: static const int KeyboardView_popupLayout = 10;
        /**
          <p>
          @attr description
           Place a blurred shadow of text underneath the text, drawn with the
             specified color. The text shadow produced does not interact with
             properties on View that are responsible for real time shadows,
             {@link android.R.styleable#View_elevation elevation} and
             {@link android.R.styleable#View_translationZ translationZ}. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shadowColor}.
          @attr name android:shadowColor
        */
        public: static const int KeyboardView_shadowColor = 0;
        /**
          <p>
          @attr description
           Blur radius of the text shadow. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shadowRadius}.
          @attr name android:shadowRadius
        */
        public: static const int KeyboardView_shadowRadius = 1;
        /**
          <p>
          @attr description
           Amount to offset the touch Y coordinate by, for bias correction. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#verticalCorrection}.
          @attr name android:verticalCorrection
        */
        public: static const int KeyboardView_verticalCorrection = 9;
        /** Attributes that can be used with a KeyboardViewPreviewState.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #KeyboardViewPreviewState_state_long_pressable android:state_long_pressable}</code></td><td> State for {@link android.inputmethodservice.KeyboardView KeyboardView}
                key preview background.</td></tr>
           </table>
           @see #KeyboardViewPreviewState_state_long_pressable
         */
        public: static const int KeyboardViewPreviewState[1];
        /**
          <p>
          @attr description
           State for {@link android.inputmethodservice.KeyboardView KeyboardView}
                key preview background. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_long_pressable}.
          @attr name android:state_long_pressable
        */
        public: static const int KeyboardViewPreviewState_state_long_pressable = 0;
        /** Attributes that can be used with a Keyboard_Key.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Keyboard_Key_codes android:codes}</code></td><td> The unicode value or comma-separated values that this key outputs.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_iconPreview android:iconPreview}</code></td><td> The icon to show in the popup preview.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_isModifier android:isModifier}</code></td><td> Whether this is a modifier key such as Alt or Shift.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_isRepeatable android:isRepeatable}</code></td><td> Whether long-pressing on this key will make it repeat.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_isSticky android:isSticky}</code></td><td> Whether this is a toggle key.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyEdgeFlags android:keyEdgeFlags}</code></td><td> Key edge flags.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyIcon android:keyIcon}</code></td><td> The icon to display on the key instead of the label.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyLabel android:keyLabel}</code></td><td> The label to display on the key.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyOutputText android:keyOutputText}</code></td><td> The string of characters to output when this key is pressed.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyboardMode android:keyboardMode}</code></td><td> Mode of the keyboard.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_popupCharacters android:popupCharacters}</code></td><td> The characters to display in the popup keyboard.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_popupKeyboard android:popupKeyboard}</code></td><td> The XML keyboard layout of any popup keyboard.</td></tr>
           </table>
           @see #Keyboard_Key_codes
           @see #Keyboard_Key_iconPreview
           @see #Keyboard_Key_isModifier
           @see #Keyboard_Key_isRepeatable
           @see #Keyboard_Key_isSticky
           @see #Keyboard_Key_keyEdgeFlags
           @see #Keyboard_Key_keyIcon
           @see #Keyboard_Key_keyLabel
           @see #Keyboard_Key_keyOutputText
           @see #Keyboard_Key_keyboardMode
           @see #Keyboard_Key_popupCharacters
           @see #Keyboard_Key_popupKeyboard
         */
        public: static const int Keyboard_Key[12];
        /**
          <p>
          @attr description
           The unicode value or comma-separated values that this key outputs. 


          <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#codes}.
          @attr name android:codes
        */
        public: static const int Keyboard_Key_codes = 0;
        /**
          <p>
          @attr description
           The icon to show in the popup preview. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#iconPreview}.
          @attr name android:iconPreview
        */
        public: static const int Keyboard_Key_iconPreview = 7;
        /**
          <p>
          @attr description
           Whether this is a modifier key such as Alt or Shift. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isModifier}.
          @attr name android:isModifier
        */
        public: static const int Keyboard_Key_isModifier = 4;
        /**
          <p>
          @attr description
           Whether long-pressing on this key will make it repeat. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isRepeatable}.
          @attr name android:isRepeatable
        */
        public: static const int Keyboard_Key_isRepeatable = 6;
        /**
          <p>
          @attr description
           Whether this is a toggle key. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isSticky}.
          @attr name android:isSticky
        */
        public: static const int Keyboard_Key_isSticky = 5;
        /**
          <p>
          @attr description
           Key edge flags. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>left</code></td><td>1</td><td> Key is anchored to the left of the keyboard. </td></tr>
<tr><td><code>right</code></td><td>2</td><td> Key is anchored to the right of the keyboard. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyEdgeFlags}.
          @attr name android:keyEdgeFlags
        */
        public: static const int Keyboard_Key_keyEdgeFlags = 3;
        /**
          <p>
          @attr description
           The icon to display on the key instead of the label. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyIcon}.
          @attr name android:keyIcon
        */
        public: static const int Keyboard_Key_keyIcon = 10;
        /**
          <p>
          @attr description
           The label to display on the key. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyLabel}.
          @attr name android:keyLabel
        */
        public: static const int Keyboard_Key_keyLabel = 9;
        /**
          <p>
          @attr description
           The string of characters to output when this key is pressed. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyOutputText}.
          @attr name android:keyOutputText
        */
        public: static const int Keyboard_Key_keyOutputText = 8;
        /**
          <p>
          @attr description
           Mode of the keyboard. If the mode doesn't match the
             requested keyboard mode, the key will be skipped. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyboardMode}.
          @attr name android:keyboardMode
        */
        public: static const int Keyboard_Key_keyboardMode = 11;
        /**
          <p>
          @attr description
           The characters to display in the popup keyboard. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupCharacters}.
          @attr name android:popupCharacters
        */
        public: static const int Keyboard_Key_popupCharacters = 2;
        /**
          <p>
          @attr description
           The XML keyboard layout of any popup keyboard. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupKeyboard}.
          @attr name android:popupKeyboard
        */
        public: static const int Keyboard_Key_popupKeyboard = 1;
        /** Attributes that can be used with a Keyboard_Row.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Keyboard_Row_keyboardMode android:keyboardMode}</code></td><td> Mode of the keyboard.</td></tr>
           <tr><td><code>{@link #Keyboard_Row_rowEdgeFlags android:rowEdgeFlags}</code></td><td> Row edge flags.</td></tr>
           </table>
           @see #Keyboard_Row_keyboardMode
           @see #Keyboard_Row_rowEdgeFlags
         */
        public: static const int Keyboard_Row[2];
        /**
          <p>
          @attr description
           Mode of the keyboard. If the mode doesn't match the
             requested keyboard mode, the row will be skipped. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keyboardMode}.
          @attr name android:keyboardMode
        */
        public: static const int Keyboard_Row_keyboardMode = 1;
        /**
          <p>
          @attr description
           Row edge flags. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>4</td><td> Row is anchored to the top of the keyboard. </td></tr>
<tr><td><code>bottom</code></td><td>8</td><td> Row is anchored to the bottom of the keyboard. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#rowEdgeFlags}.
          @attr name android:rowEdgeFlags
        */
        public: static const int Keyboard_Row_rowEdgeFlags = 0;
        /** Attributes that can be used with a KeyguardGlowStripView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #KeyguardGlowStripView_dotSize android:dotSize}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyguardGlowStripView_glowDot android:glowDot}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyguardGlowStripView_leftToRight android:leftToRight}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyguardGlowStripView_numDots android:numDots}</code></td><td></td></tr>
           </table>
           @see #KeyguardGlowStripView_dotSize
           @see #KeyguardGlowStripView_glowDot
           @see #KeyguardGlowStripView_leftToRight
           @see #KeyguardGlowStripView_numDots
         */
        public: static const int KeyguardGlowStripView[4];
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#dotSize}
          attribute's value can be found in the {@link #KeyguardGlowStripView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:dotSize
        */
        public: static const int KeyguardGlowStripView_dotSize = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#glowDot}
          attribute's value can be found in the {@link #KeyguardGlowStripView} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:glowDot
        */
        public: static const int KeyguardGlowStripView_glowDot = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#leftToRight}
          attribute's value can be found in the {@link #KeyguardGlowStripView} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:leftToRight
        */
        public: static const int KeyguardGlowStripView_leftToRight = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#numDots}
          attribute's value can be found in the {@link #KeyguardGlowStripView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:numDots
        */
        public: static const int KeyguardGlowStripView_numDots = 1;
        /** Attributes that can be used with a KeyguardSecurityViewFlipper_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #KeyguardSecurityViewFlipper_Layout_layout_maxHeight android:layout_maxHeight}</code></td><td> The maximum valid height for this item.</td></tr>
           <tr><td><code>{@link #KeyguardSecurityViewFlipper_Layout_layout_maxWidth android:layout_maxWidth}</code></td><td></td></tr>
           </table>
           @see #KeyguardSecurityViewFlipper_Layout_layout_maxHeight
           @see #KeyguardSecurityViewFlipper_Layout_layout_maxWidth
         */
        public: static const int KeyguardSecurityViewFlipper_Layout[2];
        /**
          <p>
          @attr description
           The maximum valid height for this item. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>unbounded</code></td><td>-1</td><td> Indicates that the view may be resized arbitrarily large. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:layout_maxHeight
        */
        public: static const int KeyguardSecurityViewFlipper_Layout_layout_maxHeight = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#layout_maxWidth}
          attribute's value can be found in the {@link #KeyguardSecurityViewFlipper_Layout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:layout_maxWidth
        */
        public: static const int KeyguardSecurityViewFlipper_Layout_layout_maxWidth = 1;
        /**  Drawable used to render several drawables stacked on top of each other.
         Each child drawable can be controlled individually. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #LayerDrawable_autoMirrored android:autoMirrored}</code></td><td> Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left).</td></tr>
           <tr><td><code>{@link #LayerDrawable_opacity android:opacity}</code></td><td> Indicates the opacity of the layer.</td></tr>
           <tr><td><code>{@link #LayerDrawable_paddingMode android:paddingMode}</code></td><td> Indicates how layer padding should affect the bounds of subsequent layers.</td></tr>
           </table>
           @see #LayerDrawable_autoMirrored
           @see #LayerDrawable_opacity
           @see #LayerDrawable_paddingMode
         */
        public: static const int LayerDrawable[3];
        /**
          <p>
          @attr description
           Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoMirrored}.
          @attr name android:autoMirrored
        */
        public: static const int LayerDrawable_autoMirrored = 1;
        /**
          <p>
          @attr description
           Indicates the opacity of the layer. This can be useful to allow the
              system to enable drawing optimizations. The default value is
              translucent. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>opaque</code></td><td>-1</td><td> Indicates that the layer is opaque and contains no transparent
                 nor translucent pixels. </td></tr>
<tr><td><code>transparent</code></td><td>-2</td><td> The layer is completely transparent (no pixel will be drawn.) </td></tr>
<tr><td><code>translucent</code></td><td>-3</td><td> The layer has translucent pixels. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#opacity}.
          @attr name android:opacity
        */
        public: static const int LayerDrawable_opacity = 0;
        /**
          <p>
          @attr description
           Indicates how layer padding should affect the bounds of subsequent layers.
             The default padding mode value is nest. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>nest</code></td><td>0</td><td> Nest each layer inside the padding of the previous layer. </td></tr>
<tr><td><code>stack</code></td><td>1</td><td> Stack each layer directly atop the previous layer. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#paddingMode}.
          @attr name android:paddingMode
        */
        public: static const int LayerDrawable_paddingMode = 2;
        /**  Describes an item (or child) of a LayerDrawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #LayerDrawableItem_bottom android:bottom}</code></td><td> Bottom coordinate of the layer.</td></tr>
           <tr><td><code>{@link #LayerDrawableItem_drawable android:drawable}</code></td><td> Drawable used to render the layer.</td></tr>
           <tr><td><code>{@link #LayerDrawableItem_id android:id}</code></td><td> Identifier of the layer.</td></tr>
           <tr><td><code>{@link #LayerDrawableItem_left android:left}</code></td><td> Left coordinate of the layer.</td></tr>
           <tr><td><code>{@link #LayerDrawableItem_right android:right}</code></td><td> Right coordinate of the layer.</td></tr>
           <tr><td><code>{@link #LayerDrawableItem_top android:top}</code></td><td> Top coordinate of the layer.</td></tr>
           </table>
           @see #LayerDrawableItem_bottom
           @see #LayerDrawableItem_drawable
           @see #LayerDrawableItem_id
           @see #LayerDrawableItem_left
           @see #LayerDrawableItem_right
           @see #LayerDrawableItem_top
         */
        public: static const int LayerDrawableItem[6];
        /**
          <p>
          @attr description
           Bottom coordinate of the layer. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#bottom}.
          @attr name android:bottom
        */
        public: static const int LayerDrawableItem_bottom = 5;
        /**
          <p>
          @attr description
           Drawable used to render the layer. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int LayerDrawableItem_drawable = 1;
        /**
          <p>
          @attr description
           Identifier of the layer. This can be used to retrieve the layer
             from a drawable container. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#id}.
          @attr name android:id
        */
        public: static const int LayerDrawableItem_id = 0;
        /**
          <p>
          @attr description
           Left coordinate of the layer. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#left}.
          @attr name android:left
        */
        public: static const int LayerDrawableItem_left = 2;
        /**
          <p>
          @attr description
           Right coordinate of the layer. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#right}.
          @attr name android:right
        */
        public: static const int LayerDrawableItem_right = 4;
        /**
          <p>
          @attr description
           Top coordinate of the layer. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#top}.
          @attr name android:top
        */
        public: static const int LayerDrawableItem_top = 3;
        /** Attributes that can be used with a LayoutAnimation.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #LayoutAnimation_animation android:animation}</code></td><td> Animation to use on each child.</td></tr>
           <tr><td><code>{@link #LayoutAnimation_animationOrder android:animationOrder}</code></td><td> The order in which the animations will be started.</td></tr>
           <tr><td><code>{@link #LayoutAnimation_delay android:delay}</code></td><td> Fraction of the animation duration used to delay the beginning of
         the animation of each child.</td></tr>
           <tr><td><code>{@link #LayoutAnimation_interpolator android:interpolator}</code></td><td> Interpolator used to interpolate the delay between the start of
         each animation.</td></tr>
           </table>
           @see #LayoutAnimation_animation
           @see #LayoutAnimation_animationOrder
           @see #LayoutAnimation_delay
           @see #LayoutAnimation_interpolator
         */
        public: static const int LayoutAnimation[4];
        /**
          <p>
          @attr description
           Animation to use on each child. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animation}.
          @attr name android:animation
        */
        public: static const int LayoutAnimation_animation = 2;
        /**
          <p>
          @attr description
           The order in which the animations will be started. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> Animations are started in the natural order. </td></tr>
<tr><td><code>reverse</code></td><td>1</td><td> Animations are started in the reverse order. </td></tr>
<tr><td><code>random</code></td><td>2</td><td> Animations are started randomly. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animationOrder}.
          @attr name android:animationOrder
        */
        public: static const int LayoutAnimation_animationOrder = 3;
        /**
          <p>
          @attr description
           Fraction of the animation duration used to delay the beginning of
         the animation of each child. 


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#delay}.
          @attr name android:delay
        */
        public: static const int LayoutAnimation_delay = 1;
        /**
          <p>
          @attr description
           Interpolator used to interpolate the delay between the start of
         each animation. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#interpolator}.
          @attr name android:interpolator
        */
        public: static const int LayoutAnimation_interpolator = 0;
        /** Attributes that can be used with a LevelListDrawableItem.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #LevelListDrawableItem_drawable android:drawable}</code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
           <tr><td><code>{@link #LevelListDrawableItem_maxLevel android:maxLevel}</code></td><td> The maximum level allowed for this item.</td></tr>
           <tr><td><code>{@link #LevelListDrawableItem_minLevel android:minLevel}</code></td><td> The minimum level allowed for this item.</td></tr>
           </table>
           @see #LevelListDrawableItem_drawable
           @see #LevelListDrawableItem_maxLevel
           @see #LevelListDrawableItem_minLevel
         */
        public: static const int LevelListDrawableItem[3];
        /**
          <p>
          @attr description
           Reference to a drawable resource to use for the frame.  If not
             given, the drawable must be defined by the first child tag. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int LevelListDrawableItem_drawable = 0;
        /**
          <p>
          @attr description
           The maximum level allowed for this item. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxLevel}.
          @attr name android:maxLevel
        */
        public: static const int LevelListDrawableItem_maxLevel = 2;
        /**
          <p>
          @attr description
           The minimum level allowed for this item. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minLevel}.
          @attr name android:minLevel
        */
        public: static const int LevelListDrawableItem_minLevel = 1;
        /**  @hide 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Lighting_ambientShadowAlpha android:ambientShadowAlpha}</code></td><td> Alpha value of the ambient shadow projected by elevated views, between 0 and 1.</td></tr>
           <tr><td><code>{@link #Lighting_lightRadius android:lightRadius}</code></td><td> @hide The default radius of the light used to project view shadows.</td></tr>
           <tr><td><code>{@link #Lighting_lightY android:lightY}</code></td><td> @hide The default Y position of the light used to project view shadows.</td></tr>
           <tr><td><code>{@link #Lighting_lightZ android:lightZ}</code></td><td> @hide The default Z position of the light used to project view shadows.</td></tr>
           <tr><td><code>{@link #Lighting_spotShadowAlpha android:spotShadowAlpha}</code></td><td> Alpha value of the spot shadow projected by elevated views, between 0 and 1.</td></tr>
           </table>
           @see #Lighting_ambientShadowAlpha
           @see #Lighting_lightRadius
           @see #Lighting_lightY
           @see #Lighting_lightZ
           @see #Lighting_spotShadowAlpha
         */
        public: static const int Lighting[5];
        /**
          <p>
          @attr description
           Alpha value of the ambient shadow projected by elevated views, between 0 and 1. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ambientShadowAlpha}.
          @attr name android:ambientShadowAlpha
        */
        public: static const int Lighting_ambientShadowAlpha = 0;
        /**
          <p>
          @attr description
           @hide The default radius of the light used to project view shadows. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:lightRadius
        */
        public: static const int Lighting_lightRadius = 4;
        /**
          <p>
          @attr description
           @hide The default Y position of the light used to project view shadows. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:lightY
        */
        public: static const int Lighting_lightY = 2;
        /**
          <p>
          @attr description
           @hide The default Z position of the light used to project view shadows. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:lightZ
        */
        public: static const int Lighting_lightZ = 3;
        /**
          <p>
          @attr description
           Alpha value of the spot shadow projected by elevated views, between 0 and 1. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#spotShadowAlpha}.
          @attr name android:spotShadowAlpha
        */
        public: static const int Lighting_spotShadowAlpha = 1;
        /** Attributes that can be used with a LinearLayout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #LinearLayout_baselineAligned android:baselineAligned}</code></td><td> When set to false, prevents the layout from aligning its children's
             baselines.</td></tr>
           <tr><td><code>{@link #LinearLayout_baselineAlignedChildIndex android:baselineAlignedChildIndex}</code></td><td> When a linear layout is part of another layout that is baseline
          aligned, it can specify which of its children to baseline align to
          (that is, which child TextView).</td></tr>
           <tr><td><code>{@link #LinearLayout_divider android:divider}</code></td><td> Drawable to use as a vertical divider between buttons.</td></tr>
           <tr><td><code>{@link #LinearLayout_dividerPadding android:dividerPadding}</code></td><td> Size of padding on either end of a divider.</td></tr>
           <tr><td><code>{@link #LinearLayout_gravity android:gravity}</code></td><td> Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.</td></tr>
           <tr><td><code>{@link #LinearLayout_measureWithLargestChild android:measureWithLargestChild}</code></td><td> When set to true, all children with a weight will be considered having
             the minimum size of the largest child.</td></tr>
           <tr><td><code>{@link #LinearLayout_orientation android:orientation}</code></td><td> Should the layout be a column or a row?  Use "horizontal"
             for a row, "vertical" for a column.</td></tr>
           <tr><td><code>{@link #LinearLayout_showDividers android:showDividers}</code></td><td> Setting for which dividers to show.</td></tr>
           <tr><td><code>{@link #LinearLayout_weightSum android:weightSum}</code></td><td> Defines the maximum weight sum.</td></tr>
           </table>
           @see #LinearLayout_baselineAligned
           @see #LinearLayout_baselineAlignedChildIndex
           @see #LinearLayout_divider
           @see #LinearLayout_dividerPadding
           @see #LinearLayout_gravity
           @see #LinearLayout_measureWithLargestChild
           @see #LinearLayout_orientation
           @see #LinearLayout_showDividers
           @see #LinearLayout_weightSum
         */
        public: static const int LinearLayout[9];
        /**
          <p>
          @attr description
           When set to false, prevents the layout from aligning its children's
             baselines. This attribute is particularly useful when the children
             use different values for gravity. The default value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#baselineAligned}.
          @attr name android:baselineAligned
        */
        public: static const int LinearLayout_baselineAligned = 2;
        /**
          <p>
          @attr description
           When a linear layout is part of another layout that is baseline
          aligned, it can specify which of its children to baseline align to
          (that is, which child TextView).


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#baselineAlignedChildIndex}.
          @attr name android:baselineAlignedChildIndex
        */
        public: static const int LinearLayout_baselineAlignedChildIndex = 3;
        /**
          <p>
          @attr description
           Drawable to use as a vertical divider between buttons. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#divider}.
          @attr name android:divider
        */
        public: static const int LinearLayout_divider = 5;
        /**
          <p>
          @attr description
           Size of padding on either end of a divider. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dividerPadding}.
          @attr name android:dividerPadding
        */
        public: static const int LinearLayout_dividerPadding = 8;
        /**
          <p>
          @attr description
           Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.  


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int LinearLayout_gravity = 0;
        /**
          <p>
          @attr description
           When set to true, all children with a weight will be considered having
             the minimum size of the largest child. If false, all children are
             measured normally. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#measureWithLargestChild}.
          @attr name android:measureWithLargestChild
        */
        public: static const int LinearLayout_measureWithLargestChild = 6;
        /**
          <p>
          @attr description
           Should the layout be a column or a row?  Use "horizontal"
             for a row, "vertical" for a column.  The default is
             horizontal. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orientation}.
          @attr name android:orientation
        */
        public: static const int LinearLayout_orientation = 1;
        /**
          <p>
          @attr description
           Setting for which dividers to show. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>beginning</code></td><td>1</td><td></td></tr>
<tr><td><code>middle</code></td><td>2</td><td></td></tr>
<tr><td><code>end</code></td><td>4</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#showDividers}.
          @attr name android:showDividers
        */
        public: static const int LinearLayout_showDividers = 7;
        /**
          <p>
          @attr description
           Defines the maximum weight sum. If unspecified, the sum is computed
             by adding the layout_weight of all of the children. This can be
             used for instance to give a single child 50% of the total available
             space by giving it a layout_weight of 0.5 and setting the weightSum
             to 1.0. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#weightSum}.
          @attr name android:weightSum
        */
        public: static const int LinearLayout_weightSum = 4;
        /** Attributes that can be used with a LinearLayout_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #LinearLayout_Layout_layout_gravity android:layout_gravity}</code></td><td> Standard gravity constant that a child supplies to its parent.</td></tr>
           <tr><td><code>{@link #LinearLayout_Layout_layout_height android:layout_height}</code></td><td> Specifies the basic height of the view.</td></tr>
           <tr><td><code>{@link #LinearLayout_Layout_layout_weight android:layout_weight}</code></td><td></td></tr>
           <tr><td><code>{@link #LinearLayout_Layout_layout_width android:layout_width}</code></td><td> Specifies the basic width of the view.</td></tr>
           </table>
           @see #LinearLayout_Layout_layout_gravity
           @see #LinearLayout_Layout_layout_height
           @see #LinearLayout_Layout_layout_weight
           @see #LinearLayout_Layout_layout_width
         */
        public: static const int LinearLayout_Layout[4];
        /**
          <p>
          @attr description
           Standard gravity constant that a child supplies to its parent.
         Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_gravity}.
          @attr name android:layout_gravity
        */
        public: static const int LinearLayout_Layout_layout_gravity = 0;
        /**
          <p>
          @attr description
           Specifies the basic height of the view.  This is a required attribute
             for any view inside of a containing layout manager.  Its value may
             be a dimension (such as "12dip") for a constant height or one of
             the special constants. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_height}.
          @attr name android:layout_height
        */
        public: static const int LinearLayout_Layout_layout_height = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#layout_weight}
          attribute's value can be found in the {@link #LinearLayout_Layout} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:layout_weight
        */
        public: static const int LinearLayout_Layout_layout_weight = 3;
        /**
          <p>
          @attr description
           Specifies the basic width of the view.  This is a required attribute
             for any view inside of a containing layout manager.  Its value may
             be a dimension (such as "12dip") for a constant width or one of
             the special constants. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_width}.
          @attr name android:layout_width
        */
        public: static const int LinearLayout_Layout_layout_width = 1;
        /** Attributes that can be used with a ListPopupWindow.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ListPopupWindow_dropDownHorizontalOffset android:dropDownHorizontalOffset}</code></td><td> Amount of pixels by which the drop down should be offset horizontally.</td></tr>
           <tr><td><code>{@link #ListPopupWindow_dropDownVerticalOffset android:dropDownVerticalOffset}</code></td><td> Amount of pixels by which the drop down should be offset vertically.</td></tr>
           </table>
           @see #ListPopupWindow_dropDownHorizontalOffset
           @see #ListPopupWindow_dropDownVerticalOffset
         */
        public: static const int ListPopupWindow[2];
        /**
          <p>
          @attr description
           Amount of pixels by which the drop down should be offset horizontally. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownHorizontalOffset}.
          @attr name android:dropDownHorizontalOffset
        */
        public: static const int ListPopupWindow_dropDownHorizontalOffset = 0;
        /**
          <p>
          @attr description
           Amount of pixels by which the drop down should be offset vertically. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownVerticalOffset}.
          @attr name android:dropDownVerticalOffset
        */
        public: static const int ListPopupWindow_dropDownVerticalOffset = 1;
        /**  Base attributes available to ListPreference. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ListPreference_entries android:entries}</code></td><td> The human-readable array to present as a list.</td></tr>
           <tr><td><code>{@link #ListPreference_entryValues android:entryValues}</code></td><td> The array to find the value to save for a preference when an entry from
             entries is selected.</td></tr>
           </table>
           @see #ListPreference_entries
           @see #ListPreference_entryValues
         */
        public: static const int ListPreference[2];
        /**
          <p>
          @attr description
           The human-readable array to present as a list. Each entry must have a corresponding
             index in entryValues. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#entries}.
          @attr name android:entries
        */
        public: static const int ListPreference_entries = 0;
        /**
          <p>
          @attr description
           The array to find the value to save for a preference when an entry from
             entries is selected. If a user clicks on the second item in entries, the
             second item in this array will be saved to the preference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#entryValues}.
          @attr name android:entryValues
        */
        public: static const int ListPreference_entryValues = 1;
        /** Attributes that can be used with a ListView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ListView_divider android:divider}</code></td><td> Drawable or color to draw between list items.</td></tr>
           <tr><td><code>{@link #ListView_dividerHeight android:dividerHeight}</code></td><td> Height of the divider.</td></tr>
           <tr><td><code>{@link #ListView_entries android:entries}</code></td><td> Reference to an array resource that will populate the ListView.</td></tr>
           <tr><td><code>{@link #ListView_footerDividersEnabled android:footerDividersEnabled}</code></td><td> When set to false, the ListView will not draw the divider before each footer view.</td></tr>
           <tr><td><code>{@link #ListView_headerDividersEnabled android:headerDividersEnabled}</code></td><td> When set to false, the ListView will not draw the divider after each header view.</td></tr>
           <tr><td><code>{@link #ListView_overScrollFooter android:overScrollFooter}</code></td><td> Drawable to draw below list content.</td></tr>
           <tr><td><code>{@link #ListView_overScrollHeader android:overScrollHeader}</code></td><td> Drawable to draw above list content.</td></tr>
           </table>
           @see #ListView_divider
           @see #ListView_dividerHeight
           @see #ListView_entries
           @see #ListView_footerDividersEnabled
           @see #ListView_headerDividersEnabled
           @see #ListView_overScrollFooter
           @see #ListView_overScrollHeader
         */
        public: static const int ListView[7];
        /**
          <p>
          @attr description
           Drawable or color to draw between list items. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#divider}.
          @attr name android:divider
        */
        public: static const int ListView_divider = 1;
        /**
          <p>
          @attr description
           Height of the divider. Will use the intrinsic height of the divider if this
             is not specified. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dividerHeight}.
          @attr name android:dividerHeight
        */
        public: static const int ListView_dividerHeight = 2;
        /**
          <p>
          @attr description
           Reference to an array resource that will populate the ListView.  For static content,
             this is simpler than populating the ListView programmatically. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#entries}.
          @attr name android:entries
        */
        public: static const int ListView_entries = 0;
        /**
          <p>
          @attr description
           When set to false, the ListView will not draw the divider before each footer view.
             The default value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#footerDividersEnabled}.
          @attr name android:footerDividersEnabled
        */
        public: static const int ListView_footerDividersEnabled = 4;
        /**
          <p>
          @attr description
           When set to false, the ListView will not draw the divider after each header view.
             The default value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#headerDividersEnabled}.
          @attr name android:headerDividersEnabled
        */
        public: static const int ListView_headerDividersEnabled = 3;
        /**
          <p>
          @attr description
           Drawable to draw below list content. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#overScrollFooter}.
          @attr name android:overScrollFooter
        */
        public: static const int ListView_overScrollFooter = 6;
        /**
          <p>
          @attr description
           Drawable to draw above list content. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#overScrollHeader}.
          @attr name android:overScrollHeader
        */
        public: static const int ListView_overScrollHeader = 5;
        /** Attributes that can be used with a LockPatternView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #LockPatternView_aspect android:aspect}</code></td><td> Aspect to use when drawing LockPatternView.</td></tr>
           <tr><td><code>{@link #LockPatternView_errorColor android:errorColor}</code></td><td> The error color </td></tr>
           <tr><td><code>{@link #LockPatternView_pathColor android:pathColor}</code></td><td> Color to use when drawing LockPatternView paths.</td></tr>
           <tr><td><code>{@link #LockPatternView_regularColor android:regularColor}</code></td><td> The regular pattern color </td></tr>
           <tr><td><code>{@link #LockPatternView_successColor android:successColor}</code></td><td> The success color </td></tr>
           </table>
           @see #LockPatternView_aspect
           @see #LockPatternView_errorColor
           @see #LockPatternView_pathColor
           @see #LockPatternView_regularColor
           @see #LockPatternView_successColor
         */
        public: static const int LockPatternView[5];
        /**
          <p>
          @attr description
           Aspect to use when drawing LockPatternView. Choices are "square"(default), "lock_width"
             or "lock_height" 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:aspect
        */
        public: static const int LockPatternView_aspect = 0;
        /**
          <p>
          @attr description
           The error color 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:errorColor
        */
        public: static const int LockPatternView_errorColor = 3;
        /**
          <p>
          @attr description
           Color to use when drawing LockPatternView paths. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:pathColor
        */
        public: static const int LockPatternView_pathColor = 1;
        /**
          <p>
          @attr description
           The regular pattern color 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:regularColor
        */
        public: static const int LockPatternView_regularColor = 2;
        /**
          <p>
          @attr description
           The success color 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:successColor
        */
        public: static const int LockPatternView_successColor = 4;
        /**  The set of attributes for a MapView. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MapView_apiKey android:apiKey}</code></td><td> Value is a string that specifies the Maps API Key to use.</td></tr>
           </table>
           @see #MapView_apiKey
         */
        public: static const int MapView[1];
        /**
          <p>
          @attr description
           Value is a string that specifies the Maps API Key to use. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#apiKey}.
          @attr name android:apiKey
        */
        public: static const int MapView_apiKey = 0;
        /**  Drawable used to render the Material progress indicator. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MaterialProgressDrawable_color android:color}</code></td><td> Solid color for the gradient shape.</td></tr>
           <tr><td><code>{@link #MaterialProgressDrawable_height android:height}</code></td><td> Makes the TextView be exactly this many pixels tall.</td></tr>
           <tr><td><code>{@link #MaterialProgressDrawable_innerRadius android:innerRadius}</code></td><td> Inner radius of the ring.</td></tr>
           <tr><td><code>{@link #MaterialProgressDrawable_thickness android:thickness}</code></td><td> Thickness of the ring.</td></tr>
           <tr><td><code>{@link #MaterialProgressDrawable_visible android:visible}</code></td><td> Provides initial visibility state of the drawable; the default
             value is false.</td></tr>
           <tr><td><code>{@link #MaterialProgressDrawable_width android:width}</code></td><td> Makes the TextView be exactly this many pixels wide.</td></tr>
           </table>
           @see #MaterialProgressDrawable_color
           @see #MaterialProgressDrawable_height
           @see #MaterialProgressDrawable_innerRadius
           @see #MaterialProgressDrawable_thickness
           @see #MaterialProgressDrawable_visible
           @see #MaterialProgressDrawable_width
         */
        public: static const int MaterialProgressDrawable[6];
        /**
          <p>
          @attr description
           Solid color for the gradient shape. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#color}.
          @attr name android:color
        */
        public: static const int MaterialProgressDrawable_color = 3;
        /**
          <p>
          @attr description
           Makes the TextView be exactly this many pixels tall.
             You could get the same effect by specifying this number in the
             layout parameters. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#height}.
          @attr name android:height
        */
        public: static const int MaterialProgressDrawable_height = 0;
        /**
          <p>
          @attr description
           Inner radius of the ring. When defined, innerRadiusRatio is ignored. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#innerRadius}.
          @attr name android:innerRadius
        */
        public: static const int MaterialProgressDrawable_innerRadius = 4;
        /**
          <p>
          @attr description
           Thickness of the ring. When defined, thicknessRatio is ignored. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#thickness}.
          @attr name android:thickness
        */
        public: static const int MaterialProgressDrawable_thickness = 5;
        /**
          <p>
          @attr description
           Provides initial visibility state of the drawable; the default
             value is false.  See
             {@link android.graphics.drawable.Drawable#setVisible}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int MaterialProgressDrawable_visible = 2;
        /**
          <p>
          @attr description
           Makes the TextView be exactly this many pixels wide.
             You could get the same effect by specifying this number in the
             layout parameters. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#width}.
          @attr name android:width
        */
        public: static const int MaterialProgressDrawable_width = 1;
        /** Attributes that can be used with a MediaRouteButton.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MediaRouteButton_externalRouteEnabledDrawable android:externalRouteEnabledDrawable}</code></td><td> This drawable is a state list where the "activated" state
             indicates active media routing.</td></tr>
           <tr><td><code>{@link #MediaRouteButton_mediaRouteTypes android:mediaRouteTypes}</code></td><td> The types of media routes the button and its resulting
             chooser will filter by.</td></tr>
           <tr><td><code>{@link #MediaRouteButton_minHeight android:minHeight}</code></td><td></td></tr>
           <tr><td><code>{@link #MediaRouteButton_minWidth android:minWidth}</code></td><td></td></tr>
           </table>
           @see #MediaRouteButton_externalRouteEnabledDrawable
           @see #MediaRouteButton_mediaRouteTypes
           @see #MediaRouteButton_minHeight
           @see #MediaRouteButton_minWidth
         */
        public: static const int MediaRouteButton[4];
        /**
          <p>
          @attr description
           This drawable is a state list where the "activated" state
             indicates active media routing. Non-activated indicates
             that media is playing to the local device only.
             @hide 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:externalRouteEnabledDrawable
        */
        public: static const int MediaRouteButton_externalRouteEnabledDrawable = 3;
        /**
          <p>
          @attr description
           The types of media routes the button and its resulting
             chooser will filter by. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>liveAudio</code></td><td>0x1</td><td> Allow selection of live audio routes. </td></tr>
<tr><td><code>user</code></td><td>0x800000</td><td> Allow selection of user (app-specified) routes. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#mediaRouteTypes}.
          @attr name android:mediaRouteTypes
        */
        public: static const int MediaRouteButton_mediaRouteTypes = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#minHeight}
          attribute's value can be found in the {@link #MediaRouteButton} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:minHeight
        */
        public: static const int MediaRouteButton_minHeight = 1;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#minWidth}
          attribute's value can be found in the {@link #MediaRouteButton} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:minWidth
        */
        public: static const int MediaRouteButton_minWidth = 0;
        /**  Base attributes that are available to all Menu objects. 
         */
        public: static const int Menu[0];
        /**  Base attributes that are available to all groups. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MenuGroup_checkableBehavior android:checkableBehavior}</code></td><td> Whether the items are capable of displaying a check mark.</td></tr>
           <tr><td><code>{@link #MenuGroup_enabled android:enabled}</code></td><td> Whether the items are enabled.</td></tr>
           <tr><td><code>{@link #MenuGroup_id android:id}</code></td><td> The ID of the group.</td></tr>
           <tr><td><code>{@link #MenuGroup_menuCategory android:menuCategory}</code></td><td> The category applied to all items within this group.</td></tr>
           <tr><td><code>{@link #MenuGroup_orderInCategory android:orderInCategory}</code></td><td> The order within the category applied to all items within this group.</td></tr>
           <tr><td><code>{@link #MenuGroup_visible android:visible}</code></td><td> Whether the items are shown/visible.</td></tr>
           </table>
           @see #MenuGroup_checkableBehavior
           @see #MenuGroup_enabled
           @see #MenuGroup_id
           @see #MenuGroup_menuCategory
           @see #MenuGroup_orderInCategory
           @see #MenuGroup_visible
         */
        public: static const int MenuGroup[6];
        /**
          <p>
          @attr description
           Whether the items are capable of displaying a check mark. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> The items are not checkable. </td></tr>
<tr><td><code>all</code></td><td>1</td><td> The items are all checkable. </td></tr>
<tr><td><code>single</code></td><td>2</td><td> The items are checkable and there will only be a single checked item in
                 this group. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checkableBehavior}.
          @attr name android:checkableBehavior
        */
        public: static const int MenuGroup_checkableBehavior = 5;
        /**
          <p>
          @attr description
           Whether the items are enabled. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public: static const int MenuGroup_enabled = 0;
        /**
          <p>
          @attr description
           The ID of the group. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#id}.
          @attr name android:id
        */
        public: static const int MenuGroup_id = 1;
        /**
          <p>
          @attr description
           The category applied to all items within this group.
             (This will be or'ed with the orderInCategory attribute.) 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>container</code></td><td>0x00010000</td><td> Items are part of a container. </td></tr>
<tr><td><code>system</code></td><td>0x00020000</td><td> Items are provided by the system. </td></tr>
<tr><td><code>secondary</code></td><td>0x00030000</td><td> Items are user-supplied secondary (infrequently used). </td></tr>
<tr><td><code>alternative</code></td><td>0x00040000</td><td> Items are alternative actions. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#menuCategory}.
          @attr name android:menuCategory
        */
        public: static const int MenuGroup_menuCategory = 3;
        /**
          <p>
          @attr description
           The order within the category applied to all items within this group.
             (This will be or'ed with the category attribute.) 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orderInCategory}.
          @attr name android:orderInCategory
        */
        public: static const int MenuGroup_orderInCategory = 4;
        /**
          <p>
          @attr description
           Whether the items are shown/visible. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int MenuGroup_visible = 2;
        /**  Base attributes that are available to all Item objects. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MenuItem_actionLayout android:actionLayout}</code></td><td> An optional layout to be used as an action view.</td></tr>
           <tr><td><code>{@link #MenuItem_actionProviderClass android:actionProviderClass}</code></td><td> The name of an optional ActionProvider class to instantiate an action view
             and perform operations such as default action for that menu item.</td></tr>
           <tr><td><code>{@link #MenuItem_actionViewClass android:actionViewClass}</code></td><td> The name of an optional View class to instantiate and use as an
             action view.</td></tr>
           <tr><td><code>{@link #MenuItem_alphabeticShortcut android:alphabeticShortcut}</code></td><td> The alphabetic shortcut key.</td></tr>
           <tr><td><code>{@link #MenuItem_checkable android:checkable}</code></td><td> Whether the item is capable of displaying a check mark.</td></tr>
           <tr><td><code>{@link #MenuItem_checked android:checked}</code></td><td> Whether the item is checked.</td></tr>
           <tr><td><code>{@link #MenuItem_enabled android:enabled}</code></td><td> Whether the item is enabled.</td></tr>
           <tr><td><code>{@link #MenuItem_icon android:icon}</code></td><td> The icon associated with this item.</td></tr>
           <tr><td><code>{@link #MenuItem_id android:id}</code></td><td> The ID of the item.</td></tr>
           <tr><td><code>{@link #MenuItem_menuCategory android:menuCategory}</code></td><td> The category applied to the item.</td></tr>
           <tr><td><code>{@link #MenuItem_numericShortcut android:numericShortcut}</code></td><td> The numeric shortcut key.</td></tr>
           <tr><td><code>{@link #MenuItem_onClick android:onClick}</code></td><td> Name of a method on the Context used to inflate the menu that will be
             called when the item is clicked.</td></tr>
           <tr><td><code>{@link #MenuItem_orderInCategory android:orderInCategory}</code></td><td> The order within the category applied to the item.</td></tr>
           <tr><td><code>{@link #MenuItem_showAsAction android:showAsAction}</code></td><td> How this item should display in the Action Bar, if present.</td></tr>
           <tr><td><code>{@link #MenuItem_title android:title}</code></td><td> The title associated with the item.</td></tr>
           <tr><td><code>{@link #MenuItem_titleCondensed android:titleCondensed}</code></td><td> The condensed title associated with the item.</td></tr>
           <tr><td><code>{@link #MenuItem_visible android:visible}</code></td><td> Whether the item is shown/visible.</td></tr>
           </table>
           @see #MenuItem_actionLayout
           @see #MenuItem_actionProviderClass
           @see #MenuItem_actionViewClass
           @see #MenuItem_alphabeticShortcut
           @see #MenuItem_checkable
           @see #MenuItem_checked
           @see #MenuItem_enabled
           @see #MenuItem_icon
           @see #MenuItem_id
           @see #MenuItem_menuCategory
           @see #MenuItem_numericShortcut
           @see #MenuItem_onClick
           @see #MenuItem_orderInCategory
           @see #MenuItem_showAsAction
           @see #MenuItem_title
           @see #MenuItem_titleCondensed
           @see #MenuItem_visible
         */
        public: static const int MenuItem[17];
        /**
          <p>
          @attr description
           An optional layout to be used as an action view.
             See {@link android.view.MenuItem#setActionView(android.view.View)}
             for more info. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionLayout}.
          @attr name android:actionLayout
        */
        public: static const int MenuItem_actionLayout = 14;
        /**
          <p>
          @attr description
           The name of an optional ActionProvider class to instantiate an action view
             and perform operations such as default action for that menu item.
             See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
             for more info. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionProviderClass}.
          @attr name android:actionProviderClass
        */
        public: static const int MenuItem_actionProviderClass = 16;
        /**
          <p>
          @attr description
           The name of an optional View class to instantiate and use as an
             action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
             for more info. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionViewClass}.
          @attr name android:actionViewClass
        */
        public: static const int MenuItem_actionViewClass = 15;
        /**
          <p>
          @attr description
           The alphabetic shortcut key.  This is the shortcut when using a keyboard
             with alphabetic keys. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#alphabeticShortcut}.
          @attr name android:alphabeticShortcut
        */
        public: static const int MenuItem_alphabeticShortcut = 9;
        /**
          <p>
          @attr description
           Whether the item is capable of displaying a check mark. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checkable}.
          @attr name android:checkable
        */
        public: static const int MenuItem_checkable = 11;
        /**
          <p>
          @attr description
           Whether the item is checked.  Note that you must first have enabled checking with
             the checkable attribute or else the check mark will not appear. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checked}.
          @attr name android:checked
        */
        public: static const int MenuItem_checked = 3;
        /**
          <p>
          @attr description
           Whether the item is enabled. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public: static const int MenuItem_enabled = 1;
        /**
          <p>
          @attr description
           The icon associated with this item.  This icon will not always be shown, so
             the title should be sufficient in describing this item. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int MenuItem_icon = 0;
        /**
          <p>
          @attr description
           The ID of the item. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#id}.
          @attr name android:id
        */
        public: static const int MenuItem_id = 2;
        /**
          <p>
          @attr description
           The category applied to the item.
             (This will be or'ed with the orderInCategory attribute.) 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>container</code></td><td>0x00010000</td><td> Items are part of a container. </td></tr>
<tr><td><code>system</code></td><td>0x00020000</td><td> Items are provided by the system. </td></tr>
<tr><td><code>secondary</code></td><td>0x00030000</td><td> Items are user-supplied secondary (infrequently used). </td></tr>
<tr><td><code>alternative</code></td><td>0x00040000</td><td> Items are alternative actions. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#menuCategory}.
          @attr name android:menuCategory
        */
        public: static const int MenuItem_menuCategory = 5;
        /**
          <p>
          @attr description
           The numeric shortcut key.  This is the shortcut when using a numeric (e.g., 12-key)
             keyboard. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#numericShortcut}.
          @attr name android:numericShortcut
        */
        public: static const int MenuItem_numericShortcut = 10;
        /**
          <p>
          @attr description
           Name of a method on the Context used to inflate the menu that will be
             called when the item is clicked. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#onClick}.
          @attr name android:onClick
        */
        public: static const int MenuItem_onClick = 12;
        /**
          <p>
          @attr description
           The order within the category applied to the item.
             (This will be or'ed with the category attribute.) 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orderInCategory}.
          @attr name android:orderInCategory
        */
        public: static const int MenuItem_orderInCategory = 6;
        /**
          <p>
          @attr description
           How this item should display in the Action Bar, if present. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>never</code></td><td>0</td><td> Never show this item in an action bar, show it in the overflow menu instead.
                 Mutually exclusive with "ifRoom" and "always". </td></tr>
<tr><td><code>ifRoom</code></td><td>1</td><td> Show this item in an action bar if there is room for it as determined
                 by the system. Favor this option over "always" where possible.
                 Mutually exclusive with "never" and "always". </td></tr>
<tr><td><code>always</code></td><td>2</td><td> Always show this item in an actionbar, even if it would override
                 the system's limits of how much stuff to put there. This may make
                 your action bar look bad on some screens. In most cases you should
                 use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never". </td></tr>
<tr><td><code>withText</code></td><td>4</td><td> When this item is shown as an action in the action bar, show a text
                 label with it even if it has an icon representation. </td></tr>
<tr><td><code>collapseActionView</code></td><td>8</td><td> This item's action view collapses to a normal menu
                 item. When expanded, the action view takes over a
                 larger segment of its container. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#showAsAction}.
          @attr name android:showAsAction
        */
        public: static const int MenuItem_showAsAction = 13;
        /**
          <p>
          @attr description
           The title associated with the item. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public: static const int MenuItem_title = 7;
        /**
          <p>
          @attr description
           The condensed title associated with the item.  This is used in situations where the
             normal title may be too long to be displayed. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#titleCondensed}.
          @attr name android:titleCondensed
        */
        public: static const int MenuItem_titleCondensed = 8;
        /**
          <p>
          @attr description
           Whether the item is shown/visible. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int MenuItem_visible = 4;
        /**  State array representing a menu item that is currently focused and checked. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MenuItemCheckedFocusedState_state_checkable android:state_checkable}</code></td><td> State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
           <tr><td><code>{@link #MenuItemCheckedFocusedState_state_checked android:state_checked}</code></td><td> State identifier indicating that the object is currently checked.</td></tr>
           <tr><td><code>{@link #MenuItemCheckedFocusedState_state_focused android:state_focused}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus.</td></tr>
           </table>
           @see #MenuItemCheckedFocusedState_state_checkable
           @see #MenuItemCheckedFocusedState_state_checked
           @see #MenuItemCheckedFocusedState_state_focused
         */
        public: static const int MenuItemCheckedFocusedState[3];
        /**
          <p>
          @attr description
           State identifier indicating that the object <var>may</var> display a check mark.
             See {@link R.attr#state_checked} for the identifier that indicates whether it is
             actually checked. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_checkable}.
          @attr name android:state_checkable
        */
        public: static const int MenuItemCheckedFocusedState_state_checkable = 1;
        /**
          <p>
          @attr description
           State identifier indicating that the object is currently checked.  See
             {@link R.attr#state_checkable} for an additional identifier that can indicate if
             any object may ever display a check, regardless of whether state_checked is
             currently set. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_checked}.
          @attr name android:state_checked
        */
        public: static const int MenuItemCheckedFocusedState_state_checked = 2;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_focused}.
          @attr name android:state_focused
        */
        public: static const int MenuItemCheckedFocusedState_state_focused = 0;
        /**  State array representing a menu item that is currently checked. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MenuItemCheckedState_state_checkable android:state_checkable}</code></td><td> State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
           <tr><td><code>{@link #MenuItemCheckedState_state_checked android:state_checked}</code></td><td> State identifier indicating that the object is currently checked.</td></tr>
           </table>
           @see #MenuItemCheckedState_state_checkable
           @see #MenuItemCheckedState_state_checked
         */
        public: static const int MenuItemCheckedState[2];
        /**
          <p>
          @attr description
           State identifier indicating that the object <var>may</var> display a check mark.
             See {@link R.attr#state_checked} for the identifier that indicates whether it is
             actually checked. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_checkable}.
          @attr name android:state_checkable
        */
        public: static const int MenuItemCheckedState_state_checkable = 0;
        /**
          <p>
          @attr description
           State identifier indicating that the object is currently checked.  See
             {@link R.attr#state_checkable} for an additional identifier that can indicate if
             any object may ever display a check, regardless of whether state_checked is
             currently set. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_checked}.
          @attr name android:state_checked
        */
        public: static const int MenuItemCheckedState_state_checked = 1;
        /**  State array representing a menu item that is focused and checkable but is not currently checked. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MenuItemUncheckedFocusedState_state_checkable android:state_checkable}</code></td><td> State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
           <tr><td><code>{@link #MenuItemUncheckedFocusedState_state_focused android:state_focused}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus.</td></tr>
           </table>
           @see #MenuItemUncheckedFocusedState_state_checkable
           @see #MenuItemUncheckedFocusedState_state_focused
         */
        public: static const int MenuItemUncheckedFocusedState[2];
        /**
          <p>
          @attr description
           State identifier indicating that the object <var>may</var> display a check mark.
             See {@link R.attr#state_checked} for the identifier that indicates whether it is
             actually checked. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_checkable}.
          @attr name android:state_checkable
        */
        public: static const int MenuItemUncheckedFocusedState_state_checkable = 1;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_focused}.
          @attr name android:state_focused
        */
        public: static const int MenuItemUncheckedFocusedState_state_focused = 0;
        /**  State array representing a menu item that is checkable but is not currently checked. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MenuItemUncheckedState_state_checkable android:state_checkable}</code></td><td> State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
           </table>
           @see #MenuItemUncheckedState_state_checkable
         */
        public: static const int MenuItemUncheckedState[1];
        /**
          <p>
          @attr description
           State identifier indicating that the object <var>may</var> display a check mark.
             See {@link R.attr#state_checked} for the identifier that indicates whether it is
             actually checked. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_checkable}.
          @attr name android:state_checkable
        */
        public: static const int MenuItemUncheckedState_state_checkable = 0;
        /** Attributes that can be used with a MenuView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MenuView_headerBackground android:headerBackground}</code></td><td> Default background for the menu header.</td></tr>
           <tr><td><code>{@link #MenuView_horizontalDivider android:horizontalDivider}</code></td><td> Default horizontal divider between rows of menu items.</td></tr>
           <tr><td><code>{@link #MenuView_itemBackground android:itemBackground}</code></td><td> Default background for each menu item.</td></tr>
           <tr><td><code>{@link #MenuView_itemIconDisabledAlpha android:itemIconDisabledAlpha}</code></td><td> Default disabled icon alpha for each menu item that shows an icon.</td></tr>
           <tr><td><code>{@link #MenuView_itemTextAppearance android:itemTextAppearance}</code></td><td> Default appearance of menu item text.</td></tr>
           <tr><td><code>{@link #MenuView_preserveIconSpacing android:preserveIconSpacing}</code></td><td> Whether space should be reserved in layout when an icon is missing.</td></tr>
           <tr><td><code>{@link #MenuView_verticalDivider android:verticalDivider}</code></td><td> Default vertical divider between menu items.</td></tr>
           <tr><td><code>{@link #MenuView_windowAnimationStyle android:windowAnimationStyle}</code></td><td> Default animations for the menu.</td></tr>
           </table>
           @see #MenuView_headerBackground
           @see #MenuView_horizontalDivider
           @see #MenuView_itemBackground
           @see #MenuView_itemIconDisabledAlpha
           @see #MenuView_itemTextAppearance
           @see #MenuView_preserveIconSpacing
           @see #MenuView_verticalDivider
           @see #MenuView_windowAnimationStyle
         */
        public: static const int MenuView[8];
        /**
          <p>
          @attr description
           Default background for the menu header. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#headerBackground}.
          @attr name android:headerBackground
        */
        public: static const int MenuView_headerBackground = 4;
        /**
          <p>
          @attr description
           Default horizontal divider between rows of menu items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#horizontalDivider}.
          @attr name android:horizontalDivider
        */
        public: static const int MenuView_horizontalDivider = 2;
        /**
          <p>
          @attr description
           Default background for each menu item. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#itemBackground}.
          @attr name android:itemBackground
        */
        public: static const int MenuView_itemBackground = 5;
        /**
          <p>
          @attr description
           Default disabled icon alpha for each menu item that shows an icon. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#itemIconDisabledAlpha}.
          @attr name android:itemIconDisabledAlpha
        */
        public: static const int MenuView_itemIconDisabledAlpha = 6;
        /**
          <p>
          @attr description
           Default appearance of menu item text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#itemTextAppearance}.
          @attr name android:itemTextAppearance
        */
        public: static const int MenuView_itemTextAppearance = 1;
        /**
          <p>
          @attr description
           Whether space should be reserved in layout when an icon is missing. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:preserveIconSpacing
        */
        public: static const int MenuView_preserveIconSpacing = 7;
        /**
          <p>
          @attr description
           Default vertical divider between menu items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#verticalDivider}.
          @attr name android:verticalDivider
        */
        public: static const int MenuView_verticalDivider = 3;
        /**
          <p>
          @attr description
           Default animations for the menu. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowAnimationStyle}.
          @attr name android:windowAnimationStyle
        */
        public: static const int MenuView_windowAnimationStyle = 0;
        /** Attributes that can be used with a MultiPaneChallengeLayout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MultiPaneChallengeLayout_orientation android:orientation}</code></td><td> Influences how layout_centerWithinArea behaves </td></tr>
           </table>
           @see #MultiPaneChallengeLayout_orientation
         */
        public: static const int MultiPaneChallengeLayout[1];
        /**
          <p>
          @attr description
           Influences how layout_centerWithinArea behaves 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orientation}.
          @attr name android:orientation
        */
        public: static const int MultiPaneChallengeLayout_orientation = 0;
        /** Attributes that can be used with a MultiPaneChallengeLayout_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MultiPaneChallengeLayout_Layout_layout_centerWithinArea android:layout_centerWithinArea}</code></td><td> Percentage of the screen this child should consume or center within.</td></tr>
           <tr><td><code>{@link #MultiPaneChallengeLayout_Layout_layout_childType android:layout_childType}</code></td><td> Some child types have special behavior.</td></tr>
           <tr><td><code>{@link #MultiPaneChallengeLayout_Layout_layout_gravity android:layout_gravity}</code></td><td> Standard gravity constant that a child supplies to its parent.</td></tr>
           <tr><td><code>{@link #MultiPaneChallengeLayout_Layout_layout_maxHeight android:layout_maxHeight}</code></td><td> The maximum valid height for this item.</td></tr>
           <tr><td><code>{@link #MultiPaneChallengeLayout_Layout_layout_maxWidth android:layout_maxWidth}</code></td><td></td></tr>
           </table>
           @see #MultiPaneChallengeLayout_Layout_layout_centerWithinArea
           @see #MultiPaneChallengeLayout_Layout_layout_childType
           @see #MultiPaneChallengeLayout_Layout_layout_gravity
           @see #MultiPaneChallengeLayout_Layout_layout_maxHeight
           @see #MultiPaneChallengeLayout_Layout_layout_maxWidth
         */
        public: static const int MultiPaneChallengeLayout_Layout[5];
        /**
          <p>
          @attr description
           Percentage of the screen this child should consume or center within.
             If 0/default, the view will be measured by standard rules
             as if this were a FrameLayout. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:layout_centerWithinArea
        */
        public: static const int MultiPaneChallengeLayout_Layout_layout_centerWithinArea = 3;
        /**
          <p>
          @attr description
           Some child types have special behavior. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> No special behavior. Layout will proceed as normal. </td></tr>
<tr><td><code>widget</code></td><td>1</td><td> Widget container.
             This will be resized in response to certain events. </td></tr>
<tr><td><code>challenge</code></td><td>2</td><td> Security challenge container.
             This will be dismissed/shown in response to certain events,
             possibly obscuring widget elements. </td></tr>
<tr><td><code>userSwitcher</code></td><td>3</td><td> User switcher.
             This will consume space from the total layout area. </td></tr>
<tr><td><code>scrim</code></td><td>4</td><td> Scrim. This will block access to child views that
             come before it in the child list in bouncer mode. </td></tr>
<tr><td><code>widgets</code></td><td>5</td><td> The home for widgets. All widgets will be descendents of this. </td></tr>
<tr><td><code>expandChallengeHandle</code></td><td>6</td><td> This is a handle that is used for expanding the
             security challenge container when it is collapsed. </td></tr>
<tr><td><code>pageDeleteDropTarget</code></td><td>7</td><td> Delete drop target.  This will be the drop target to delete pages. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:layout_childType
        */
        public: static const int MultiPaneChallengeLayout_Layout_layout_childType = 2;
        /**
          <p>
          @attr description
           Standard gravity constant that a child supplies to its parent.
         Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_gravity}.
          @attr name android:layout_gravity
        */
        public: static const int MultiPaneChallengeLayout_Layout_layout_gravity = 0;
        /**
          <p>
          @attr description
           The maximum valid height for this item. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>unbounded</code></td><td>-1</td><td> Indicates that the view may be resized arbitrarily large. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:layout_maxHeight
        */
        public: static const int MultiPaneChallengeLayout_Layout_layout_maxHeight = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#layout_maxWidth}
          attribute's value can be found in the {@link #MultiPaneChallengeLayout_Layout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:layout_maxWidth
        */
        public: static const int MultiPaneChallengeLayout_Layout_layout_maxWidth = 4;
        /** Attributes that can be used with a MultiSelectListPreference.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #MultiSelectListPreference_entries android:entries}</code></td><td> The human-readable array to present as a list.</td></tr>
           <tr><td><code>{@link #MultiSelectListPreference_entryValues android:entryValues}</code></td><td> The array to find the value to save for a preference when an entry from
             entries is selected.</td></tr>
           </table>
           @see #MultiSelectListPreference_entries
           @see #MultiSelectListPreference_entryValues
         */
        public: static const int MultiSelectListPreference[2];
        /**
          <p>
          @attr description
           The human-readable array to present as a list. Each entry must have a corresponding
             index in entryValues. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#entries}.
          @attr name android:entries
        */
        public: static const int MultiSelectListPreference_entries = 0;
        /**
          <p>
          @attr description
           The array to find the value to save for a preference when an entry from
             entries is selected. If a user clicks the second item in entries, the
             second item in this array will be saved to the preference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#entryValues}.
          @attr name android:entryValues
        */
        public: static const int MultiSelectListPreference_entryValues = 1;
        /**  Drawable used to draw 9-patches. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #NinePatchDrawable_alpha android:alpha}</code></td><td> Specifies the alpha multiplier to apply to the base drawable.</td></tr>
           <tr><td><code>{@link #NinePatchDrawable_autoMirrored android:autoMirrored}</code></td><td> Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left).</td></tr>
           <tr><td><code>{@link #NinePatchDrawable_dither android:dither}</code></td><td> Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen).</td></tr>
           <tr><td><code>{@link #NinePatchDrawable_src android:src}</code></td><td> Identifier of the bitmap file.</td></tr>
           <tr><td><code>{@link #NinePatchDrawable_tint android:tint}</code></td><td> If set, specifies the color to apply to the drawable as a tint.</td></tr>
           <tr><td><code>{@link #NinePatchDrawable_tintMode android:tintMode}</code></td><td> When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
           </table>
           @see #NinePatchDrawable_alpha
           @see #NinePatchDrawable_autoMirrored
           @see #NinePatchDrawable_dither
           @see #NinePatchDrawable_src
           @see #NinePatchDrawable_tint
           @see #NinePatchDrawable_tintMode
         */
        public: static const int NinePatchDrawable[6];
        /**
          <p>
          @attr description
           Specifies the alpha multiplier to apply to the base drawable. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#alpha}.
          @attr name android:alpha
        */
        public: static const int NinePatchDrawable_alpha = 3;
        /**
          <p>
          @attr description
           Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoMirrored}.
          @attr name android:autoMirrored
        */
        public: static const int NinePatchDrawable_autoMirrored = 4;
        /**
          <p>
          @attr description
           Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dither}.
          @attr name android:dither
        */
        public: static const int NinePatchDrawable_dither = 1;
        /**
          <p>
          @attr description
           Identifier of the bitmap file. This attribute is mandatory. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#src}.
          @attr name android:src
        */
        public: static const int NinePatchDrawable_src = 0;
        /**
          <p>
          @attr description
           If set, specifies the color to apply to the drawable as a tint. By default,
             no tint is applied. May be a color state list. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tint}.
          @attr name android:tint
        */
        public: static const int NinePatchDrawable_tint = 2;
        /**
          <p>
          @attr description
           When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tintMode}.
          @attr name android:tintMode
        */
        public: static const int NinePatchDrawable_tintMode = 5;
        /** Attributes that can be used with a NumberPicker.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #NumberPicker_hideWheelUntilFocused android:hideWheelUntilFocused}</code></td><td> @hide If true then the selector wheel is hidden until the picker has focus.</td></tr>
           <tr><td><code>{@link #NumberPicker_internalLayout android:internalLayout}</code></td><td> @hide The layout of the number picker.</td></tr>
           <tr><td><code>{@link #NumberPicker_internalMaxHeight android:internalMaxHeight}</code></td><td> @hide The max height of the NumberPicker.</td></tr>
           <tr><td><code>{@link #NumberPicker_internalMaxWidth android:internalMaxWidth}</code></td><td> @hide The max width of the NumberPicker.</td></tr>
           <tr><td><code>{@link #NumberPicker_internalMinHeight android:internalMinHeight}</code></td><td> @hide The min height of the NumberPicker.</td></tr>
           <tr><td><code>{@link #NumberPicker_internalMinWidth android:internalMinWidth}</code></td><td> @hide The min width of the NumberPicker.</td></tr>
           <tr><td><code>{@link #NumberPicker_selectionDivider android:selectionDivider}</code></td><td> @hide The divider for making the selection area.</td></tr>
           <tr><td><code>{@link #NumberPicker_selectionDividerHeight android:selectionDividerHeight}</code></td><td> @hide The height of the selection divider.</td></tr>
           <tr><td><code>{@link #NumberPicker_selectionDividersDistance android:selectionDividersDistance}</code></td><td> @hide The distance between the two selection dividers.</td></tr>
           <tr><td><code>{@link #NumberPicker_solidColor android:solidColor}</code></td><td> @hide Color for the solid color background if such for optimized rendering.</td></tr>
           <tr><td><code>{@link #NumberPicker_virtualButtonPressedDrawable android:virtualButtonPressedDrawable}</code></td><td> @hide The drawable for pressed virtual (increment/decrement) buttons.</td></tr>
           </table>
           @see #NumberPicker_hideWheelUntilFocused
           @see #NumberPicker_internalLayout
           @see #NumberPicker_internalMaxHeight
           @see #NumberPicker_internalMaxWidth
           @see #NumberPicker_internalMinHeight
           @see #NumberPicker_internalMinWidth
           @see #NumberPicker_selectionDivider
           @see #NumberPicker_selectionDividerHeight
           @see #NumberPicker_selectionDividersDistance
           @see #NumberPicker_solidColor
           @see #NumberPicker_virtualButtonPressedDrawable
         */
        public: static const int NumberPicker[11];
        /**
          <p>
          @attr description
           @hide If true then the selector wheel is hidden until the picker has focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:hideWheelUntilFocused
        */
        public: static const int NumberPicker_hideWheelUntilFocused = 10;
        /**
          <p>
          @attr description
           @hide The layout of the number picker. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:internalLayout
        */
        public: static const int NumberPicker_internalLayout = 1;
        /**
          <p>
          @attr description
           @hide The max height of the NumberPicker. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:internalMaxHeight
        */
        public: static const int NumberPicker_internalMaxHeight = 6;
        /**
          <p>
          @attr description
           @hide The max width of the NumberPicker. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:internalMaxWidth
        */
        public: static const int NumberPicker_internalMaxWidth = 8;
        /**
          <p>
          @attr description
           @hide The min height of the NumberPicker. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:internalMinHeight
        */
        public: static const int NumberPicker_internalMinHeight = 5;
        /**
          <p>
          @attr description
           @hide The min width of the NumberPicker. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:internalMinWidth
        */
        public: static const int NumberPicker_internalMinWidth = 7;
        /**
          <p>
          @attr description
           @hide The divider for making the selection area. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:selectionDivider
        */
        public: static const int NumberPicker_selectionDivider = 2;
        /**
          <p>
          @attr description
           @hide The height of the selection divider. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:selectionDividerHeight
        */
        public: static const int NumberPicker_selectionDividerHeight = 3;
        /**
          <p>
          @attr description
           @hide The distance between the two selection dividers. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:selectionDividersDistance
        */
        public: static const int NumberPicker_selectionDividersDistance = 4;
        /**
          <p>
          @attr description
           @hide Color for the solid color background if such for optimized rendering. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#solidColor}.
          @attr name android:solidColor
        */
        public: static const int NumberPicker_solidColor = 0;
        /**
          <p>
          @attr description
           @hide The drawable for pressed virtual (increment/decrement) buttons. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:virtualButtonPressedDrawable
        */
        public: static const int NumberPicker_virtualButtonPressedDrawable = 9;
        /**  Use <code>offhost-apdu-service</code> as the root tag of the XML resource that
         describes an {@link android.nfc.cardemulation.OffHostApduService}
         service, which is referenced from its
         {@link android.nfc.cardemulation.OffHostApduService#SERVICE_META_DATA} entry. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #OffHostApduService_apduServiceBanner android:apduServiceBanner}</code></td><td> A drawable that can be rendered in Android's system UI for representing
             the service.</td></tr>
           <tr><td><code>{@link #OffHostApduService_description android:description}</code></td><td> Short description of the functionality the service implements.</td></tr>
           </table>
           @see #OffHostApduService_apduServiceBanner
           @see #OffHostApduService_description
         */
        public: static const int OffHostApduService[2];
        /**
          <p>
          @attr description
           A drawable that can be rendered in Android's system UI for representing
             the service. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#apduServiceBanner}.
          @attr name android:apduServiceBanner
        */
        public: static const int OffHostApduService_apduServiceBanner = 1;
        /**
          <p>
          @attr description
           Short description of the functionality the service implements. This attribute
             is mandatory.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int OffHostApduService_description = 0;
        /** Attributes that can be used with a OvershootInterpolator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #OvershootInterpolator_tension android:tension}</code></td><td> This is the amount of tension.</td></tr>
           </table>
           @see #OvershootInterpolator_tension
         */
        public: static const int OvershootInterpolator[1];
        /**
          <p>
          @attr description
           This is the amount of tension. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tension}.
          @attr name android:tension
        */
        public: static const int OvershootInterpolator_tension = 0;
        /**  PagedView specific attributes. These attributes are used to customize
         a PagedView view in XML files. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PagedView_pageSpacing android:pageSpacing}</code></td><td> The space between adjacent pages of the PagedView.</td></tr>
           <tr><td><code>{@link #PagedView_scrollIndicatorPaddingLeft android:scrollIndicatorPaddingLeft}</code></td><td> The padding for the scroll indicator area </td></tr>
           <tr><td><code>{@link #PagedView_scrollIndicatorPaddingRight android:scrollIndicatorPaddingRight}</code></td><td></td></tr>
           </table>
           @see #PagedView_pageSpacing
           @see #PagedView_scrollIndicatorPaddingLeft
           @see #PagedView_scrollIndicatorPaddingRight
         */
        public: static const int PagedView[3];
        /**
          <p>
          @attr description
           The space between adjacent pages of the PagedView. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:pageSpacing
        */
        public: static const int PagedView_pageSpacing = 0;
        /**
          <p>
          @attr description
           The padding for the scroll indicator area 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:scrollIndicatorPaddingLeft
        */
        public: static const int PagedView_scrollIndicatorPaddingLeft = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#scrollIndicatorPaddingRight}
          attribute's value can be found in the {@link #PagedView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:scrollIndicatorPaddingRight
        */
        public: static const int PagedView_scrollIndicatorPaddingRight = 2;
        /** Attributes that can be used with a PathInterpolator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PathInterpolator_controlX1 android:controlX1}</code></td><td> The x coordinate of the first control point of the cubic Bezier </td></tr>
           <tr><td><code>{@link #PathInterpolator_controlX2 android:controlX2}</code></td><td> The x coordinate of the second control point of the cubic Bezier </td></tr>
           <tr><td><code>{@link #PathInterpolator_controlY1 android:controlY1}</code></td><td> The y coordinate of the first control point of the cubic Bezier </td></tr>
           <tr><td><code>{@link #PathInterpolator_controlY2 android:controlY2}</code></td><td> The y coordinate of the second control point of the cubic Bezier </td></tr>
           <tr><td><code>{@link #PathInterpolator_pathData android:pathData}</code></td><td> The control points defined as a path.</td></tr>
           </table>
           @see #PathInterpolator_controlX1
           @see #PathInterpolator_controlX2
           @see #PathInterpolator_controlY1
           @see #PathInterpolator_controlY2
           @see #PathInterpolator_pathData
         */
        public: static const int PathInterpolator[5];
        /**
          <p>
          @attr description
           The x coordinate of the first control point of the cubic Bezier 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#controlX1}.
          @attr name android:controlX1
        */
        public: static const int PathInterpolator_controlX1 = 0;
        /**
          <p>
          @attr description
           The x coordinate of the second control point of the cubic Bezier 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#controlX2}.
          @attr name android:controlX2
        */
        public: static const int PathInterpolator_controlX2 = 2;
        /**
          <p>
          @attr description
           The y coordinate of the first control point of the cubic Bezier 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#controlY1}.
          @attr name android:controlY1
        */
        public: static const int PathInterpolator_controlY1 = 1;
        /**
          <p>
          @attr description
           The y coordinate of the second control point of the cubic Bezier 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#controlY2}.
          @attr name android:controlY2
        */
        public: static const int PathInterpolator_controlY2 = 3;
        /**
          <p>
          @attr description
           The control points defined as a path.
             When pathData is defined, then both of the control points of the
             cubic Bezier will be ignored. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pathData}.
          @attr name android:pathData
        */
        public: static const int PathInterpolator_pathData = 4;
        /**  Use <code>patternPathMotion</code> as the root tag of the XML resource that
         describes a {@link android.transition.PatternPathMotion}. This must be used
         within a transition with which the PathMotion should be associated. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PatternPathMotion_patternPathData android:patternPathData}</code></td><td> The path string describing the pattern to use for the PathPathMotion.</td></tr>
           </table>
           @see #PatternPathMotion_patternPathData
         */
        public: static const int PatternPathMotion[1];
        /**
          <p>
          @attr description
           The path string describing the pattern to use for the PathPathMotion. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#patternPathData}.
          @attr name android:patternPathData
        */
        public: static const int PatternPathMotion_patternPathData = 0;
        /** Attributes that can be used with a Pointer.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Pointer_pointerIconArrow android:pointerIconArrow}</code></td><td> Reference to a pointer icon drawable with STYLE_ARROW </td></tr>
           <tr><td><code>{@link #Pointer_pointerIconSpotAnchor android:pointerIconSpotAnchor}</code></td><td> Reference to a pointer icon drawable with STYLE_SPOT_ANCHOR </td></tr>
           <tr><td><code>{@link #Pointer_pointerIconSpotHover android:pointerIconSpotHover}</code></td><td> Reference to a pointer icon drawable with STYLE_SPOT_HOVER </td></tr>
           <tr><td><code>{@link #Pointer_pointerIconSpotTouch android:pointerIconSpotTouch}</code></td><td> Reference to a pointer icon drawable with STYLE_SPOT_TOUCH </td></tr>
           </table>
           @see #Pointer_pointerIconArrow
           @see #Pointer_pointerIconSpotAnchor
           @see #Pointer_pointerIconSpotHover
           @see #Pointer_pointerIconSpotTouch
         */
        public: static const int Pointer[4];
        /**
          <p>
          @attr description
           Reference to a pointer icon drawable with STYLE_ARROW 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:pointerIconArrow
        */
        public: static const int Pointer_pointerIconArrow = 0;
        /**
          <p>
          @attr description
           Reference to a pointer icon drawable with STYLE_SPOT_ANCHOR 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:pointerIconSpotAnchor
        */
        public: static const int Pointer_pointerIconSpotAnchor = 3;
        /**
          <p>
          @attr description
           Reference to a pointer icon drawable with STYLE_SPOT_HOVER 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:pointerIconSpotHover
        */
        public: static const int Pointer_pointerIconSpotHover = 1;
        /**
          <p>
          @attr description
           Reference to a pointer icon drawable with STYLE_SPOT_TOUCH 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:pointerIconSpotTouch
        */
        public: static const int Pointer_pointerIconSpotTouch = 2;
        /** Attributes that can be used with a PointerIcon.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PointerIcon_bitmap android:bitmap}</code></td><td> Drawable to use as the icon bitmap.</td></tr>
           <tr><td><code>{@link #PointerIcon_hotSpotX android:hotSpotX}</code></td><td> X coordinate of the icon hot spot.</td></tr>
           <tr><td><code>{@link #PointerIcon_hotSpotY android:hotSpotY}</code></td><td> Y coordinate of the icon hot spot.</td></tr>
           </table>
           @see #PointerIcon_bitmap
           @see #PointerIcon_hotSpotX
           @see #PointerIcon_hotSpotY
         */
        public: static const int PointerIcon[3];
        /**
          <p>
          @attr description
           Drawable to use as the icon bitmap. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:bitmap
        */
        public: static const int PointerIcon_bitmap = 0;
        /**
          <p>
          @attr description
           X coordinate of the icon hot spot. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:hotSpotX
        */
        public: static const int PointerIcon_hotSpotX = 1;
        /**
          <p>
          @attr description
           Y coordinate of the icon hot spot. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:hotSpotY
        */
        public: static const int PointerIcon_hotSpotY = 2;
        /** Attributes that can be used with a PopupWindow.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PopupWindow_overlapAnchor android:overlapAnchor}</code></td><td> Whether the popup window should overlap its anchor view.</td></tr>
           <tr><td><code>{@link #PopupWindow_popupAnimationStyle android:popupAnimationStyle}</code></td><td> The animation style to use for the popup window.</td></tr>
           <tr><td><code>{@link #PopupWindow_popupBackground android:popupBackground}</code></td><td> The background to use for the popup window.</td></tr>
           <tr><td><code>{@link #PopupWindow_popupElevation android:popupElevation}</code></td><td> Window elevation to use for the popup window.</td></tr>
           </table>
           @see #PopupWindow_overlapAnchor
           @see #PopupWindow_popupAnimationStyle
           @see #PopupWindow_popupBackground
           @see #PopupWindow_popupElevation
         */
        public: static const int PopupWindow[4];
        /**
          <p>
          @attr description
           Whether the popup window should overlap its anchor view. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#overlapAnchor}.
          @attr name android:overlapAnchor
        */
        public: static const int PopupWindow_overlapAnchor = 2;
        /**
          <p>
          @attr description
           The animation style to use for the popup window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupAnimationStyle}.
          @attr name android:popupAnimationStyle
        */
        public: static const int PopupWindow_popupAnimationStyle = 1;
        /**
          <p>
          @attr description
           The background to use for the popup window. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupBackground}.
          @attr name android:popupBackground
        */
        public: static const int PopupWindow_popupBackground = 0;
        /**
          <p>
          @attr description
           Window elevation to use for the popup window. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupElevation}.
          @attr name android:popupElevation
        */
        public: static const int PopupWindow_popupElevation = 3;
        /** Attributes that can be used with a PopupWindowBackgroundState.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PopupWindowBackgroundState_state_above_anchor android:state_above_anchor}</code></td><td> State identifier indicating the popup will be above the anchor.</td></tr>
           </table>
           @see #PopupWindowBackgroundState_state_above_anchor
         */
        public: static const int PopupWindowBackgroundState[1];
        /**
          <p>
          @attr description
           State identifier indicating the popup will be above the anchor. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_above_anchor}.
          @attr name android:state_above_anchor
        */
        public: static const int PopupWindowBackgroundState_state_above_anchor = 0;
        /**  Base attributes available to Preference. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Preference_defaultValue android:defaultValue}</code></td><td> The default value for the preference, which will be set either if persistence
             is off or persistence is on and the preference is not found in the persistent
             storage.</td></tr>
           <tr><td><code>{@link #Preference_dependency android:dependency}</code></td><td> The key of another Preference that this Preference will depend on.</td></tr>
           <tr><td><code>{@link #Preference_enabled android:enabled}</code></td><td> Whether the Preference is enabled.</td></tr>
           <tr><td><code>{@link #Preference_fragment android:fragment}</code></td><td> When used inside of a modern PreferenceActivity, this declares
             a new PreferenceFragment to be shown when the user selects this item.</td></tr>
           <tr><td><code>{@link #Preference_icon android:icon}</code></td><td> The optional icon for the preference </td></tr>
           <tr><td><code>{@link #Preference_key android:key}</code></td><td> The key to store the Preference value.</td></tr>
           <tr><td><code>{@link #Preference_layout android:layout}</code></td><td> The layout for the Preference in a PreferenceActivity screen.</td></tr>
           <tr><td><code>{@link #Preference_order android:order}</code></td><td> The order for the Preference (lower values are to be ordered first).</td></tr>
           <tr><td><code>{@link #Preference_persistent android:persistent}</code></td><td> Whether the Preference stores its value to the shared preferences.</td></tr>
           <tr><td><code>{@link #Preference_selectable android:selectable}</code></td><td> Whether the Preference is selectable.</td></tr>
           <tr><td><code>{@link #Preference_shouldDisableView android:shouldDisableView}</code></td><td> Whether the view of this Preference should be disabled when
             this Preference is disabled.</td></tr>
           <tr><td><code>{@link #Preference_summary android:summary}</code></td><td> The summary for the Preference in a PreferenceActivity screen.</td></tr>
           <tr><td><code>{@link #Preference_title android:title}</code></td><td> The title for the Preference in a PreferenceActivity screen.</td></tr>
           <tr><td><code>{@link #Preference_widgetLayout android:widgetLayout}</code></td><td> The layout for the controllable widget portion of a Preference.</td></tr>
           </table>
           @see #Preference_defaultValue
           @see #Preference_dependency
           @see #Preference_enabled
           @see #Preference_fragment
           @see #Preference_icon
           @see #Preference_key
           @see #Preference_layout
           @see #Preference_order
           @see #Preference_persistent
           @see #Preference_selectable
           @see #Preference_shouldDisableView
           @see #Preference_summary
           @see #Preference_title
           @see #Preference_widgetLayout
         */
        public: static const int Preference[14];
        /**
          <p>
          @attr description
           The default value for the preference, which will be set either if persistence
             is off or persistence is on and the preference is not found in the persistent
             storage.  


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>May be a floating point value, such as "<code>1.2</code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#defaultValue}.
          @attr name android:defaultValue
        */
        public: static const int Preference_defaultValue = 11;
        /**
          <p>
          @attr description
           The key of another Preference that this Preference will depend on.  If the other
             Preference is not set or is off, this Preference will be disabled. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dependency}.
          @attr name android:dependency
        */
        public: static const int Preference_dependency = 10;
        /**
          <p>
          @attr description
           Whether the Preference is enabled. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public: static const int Preference_enabled = 2;
        /**
          <p>
          @attr description
           When used inside of a modern PreferenceActivity, this declares
             a new PreferenceFragment to be shown when the user selects this item. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fragment}.
          @attr name android:fragment
        */
        public: static const int Preference_fragment = 13;
        /**
          <p>
          @attr description
           The optional icon for the preference 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int Preference_icon = 0;
        /**
          <p>
          @attr description
           The key to store the Preference value. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#key}.
          @attr name android:key
        */
        public: static const int Preference_key = 6;
        /**
          <p>
          @attr description
           The layout for the Preference in a PreferenceActivity screen. This should
             rarely need to be changed, look at widgetLayout instead. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout}.
          @attr name android:layout
        */
        public: static const int Preference_layout = 3;
        /**
          <p>
          @attr description
           The order for the Preference (lower values are to be ordered first). If this is not
             specified, the default orderin will be alphabetic. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#order}.
          @attr name android:order
        */
        public: static const int Preference_order = 8;
        /**
          <p>
          @attr description
           Whether the Preference stores its value to the shared preferences. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#persistent}.
          @attr name android:persistent
        */
        public: static const int Preference_persistent = 1;
        /**
          <p>
          @attr description
           Whether the Preference is selectable. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#selectable}.
          @attr name android:selectable
        */
        public: static const int Preference_selectable = 5;
        /**
          <p>
          @attr description
           Whether the view of this Preference should be disabled when
             this Preference is disabled. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shouldDisableView}.
          @attr name android:shouldDisableView
        */
        public: static const int Preference_shouldDisableView = 12;
        /**
          <p>
          @attr description
           The summary for the Preference in a PreferenceActivity screen. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#summary}.
          @attr name android:summary
        */
        public: static const int Preference_summary = 7;
        /**
          <p>
          @attr description
           The title for the Preference in a PreferenceActivity screen. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public: static const int Preference_title = 4;
        /**
          <p>
          @attr description
           The layout for the controllable widget portion of a Preference. This is inflated
             into the layout for a Preference and should be used more frequently than
             the layout attribute. For example, a checkbox preference would specify
             a custom layout (consisting of just the CheckBox) here. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#widgetLayout}.
          @attr name android:widgetLayout
        */
        public: static const int Preference_widgetLayout = 9;
        /**  Base attributes available to PreferenceActivity. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PreferenceActivity_headerLayout android:headerLayout}</code></td><td> The layout for the Preference Header.</td></tr>
           <tr><td><code>{@link #PreferenceActivity_headerRemoveIconIfEmpty android:headerRemoveIconIfEmpty}</code></td><td> true if the Icon view will be removed when there is none and thus not showing
             the fixed margins.</td></tr>
           <tr><td><code>{@link #PreferenceActivity_layout android:layout}</code></td><td> The layout for the Preference Activity.</td></tr>
           </table>
           @see #PreferenceActivity_headerLayout
           @see #PreferenceActivity_headerRemoveIconIfEmpty
           @see #PreferenceActivity_layout
         */
        public: static const int PreferenceActivity[3];
        /**
          <p>
          @attr description
           The layout for the Preference Header. This should rarely need to be changed. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:headerLayout
        */
        public: static const int PreferenceActivity_headerLayout = 1;
        /**
          <p>
          @attr description
           true if the Icon view will be removed when there is none and thus not showing
             the fixed margins. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:headerRemoveIconIfEmpty
        */
        public: static const int PreferenceActivity_headerRemoveIconIfEmpty = 2;
        /**
          <p>
          @attr description
           The layout for the Preference Activity. This should rarely need to be changed. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout}.
          @attr name android:layout
        */
        public: static const int PreferenceActivity_layout = 0;
        /**  Base attributes available to PreferenceFragment. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PreferenceFragment_layout android:layout}</code></td><td> The layout for the PreferenceFragment.</td></tr>
           </table>
           @see #PreferenceFragment_layout
         */
        public: static const int PreferenceFragment[1];
        /**
          <p>
          @attr description
           The layout for the PreferenceFragment. This should rarely need to be changed. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout}.
          @attr name android:layout
        */
        public: static const int PreferenceFragment_layout = 0;
        /** Attributes that can be used with a PreferenceFrameLayout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PreferenceFrameLayout_borderBottom android:borderBottom}</code></td><td> Padding to use at the bottom of the prefs content.</td></tr>
           <tr><td><code>{@link #PreferenceFrameLayout_borderLeft android:borderLeft}</code></td><td> Padding to use at the left of the prefs content.</td></tr>
           <tr><td><code>{@link #PreferenceFrameLayout_borderRight android:borderRight}</code></td><td> Padding to use at the right of the prefs content.</td></tr>
           <tr><td><code>{@link #PreferenceFrameLayout_borderTop android:borderTop}</code></td><td> Padding to use at the top of the prefs content.</td></tr>
           </table>
           @see #PreferenceFrameLayout_borderBottom
           @see #PreferenceFrameLayout_borderLeft
           @see #PreferenceFrameLayout_borderRight
           @see #PreferenceFrameLayout_borderTop
         */
        public: static const int PreferenceFrameLayout[4];
        /**
          <p>
          @attr description
           Padding to use at the bottom of the prefs content. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:borderBottom
        */
        public: static const int PreferenceFrameLayout_borderBottom = 1;
        /**
          <p>
          @attr description
           Padding to use at the left of the prefs content. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:borderLeft
        */
        public: static const int PreferenceFrameLayout_borderLeft = 2;
        /**
          <p>
          @attr description
           Padding to use at the right of the prefs content. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:borderRight
        */
        public: static const int PreferenceFrameLayout_borderRight = 3;
        /**
          <p>
          @attr description
           Padding to use at the top of the prefs content. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:borderTop
        */
        public: static const int PreferenceFrameLayout_borderTop = 0;
        /** Attributes that can be used with a PreferenceFrameLayout_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PreferenceFrameLayout_Layout_layout_removeBorders android:layout_removeBorders}</code></td><td> Padding to use at the top of the prefs content.</td></tr>
           </table>
           @see #PreferenceFrameLayout_Layout_layout_removeBorders
         */
        public: static const int PreferenceFrameLayout_Layout[1];
        /**
          <p>
          @attr description
           Padding to use at the top of the prefs content. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:layout_removeBorders
        */
        public: static const int PreferenceFrameLayout_Layout_layout_removeBorders = 0;
        /**  Base attributes available to PreferenceGroup. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PreferenceGroup_orderingFromXml android:orderingFromXml}</code></td><td> Whether to order the Preference under this group as they appear in the XML file.</td></tr>
           </table>
           @see #PreferenceGroup_orderingFromXml
         */
        public: static const int PreferenceGroup[1];
        /**
          <p>
          @attr description
           Whether to order the Preference under this group as they appear in the XML file.
             If this is false, the ordering will follow the Preference order attribute and
             default to alphabetic for those without the order attribute. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orderingFromXml}.
          @attr name android:orderingFromXml
        */
        public: static const int PreferenceGroup_orderingFromXml = 0;
        /**  Attribute for a header describing the item shown in the top-level list
         from which the selects the set of preference to dig in to. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PreferenceHeader_breadCrumbShortTitle android:breadCrumbShortTitle}</code></td><td> The short title for the bread crumb of this item.</td></tr>
           <tr><td><code>{@link #PreferenceHeader_breadCrumbTitle android:breadCrumbTitle}</code></td><td> The title for the bread crumb of this item.</td></tr>
           <tr><td><code>{@link #PreferenceHeader_fragment android:fragment}</code></td><td> The fragment that is displayed when the user selects this item.</td></tr>
           <tr><td><code>{@link #PreferenceHeader_icon android:icon}</code></td><td> An icon for the item.</td></tr>
           <tr><td><code>{@link #PreferenceHeader_id android:id}</code></td><td> Identifier value for the header.</td></tr>
           <tr><td><code>{@link #PreferenceHeader_summary android:summary}</code></td><td> The summary for the item.</td></tr>
           <tr><td><code>{@link #PreferenceHeader_title android:title}</code></td><td> The title of the item that is shown to the user.</td></tr>
           </table>
           @see #PreferenceHeader_breadCrumbShortTitle
           @see #PreferenceHeader_breadCrumbTitle
           @see #PreferenceHeader_fragment
           @see #PreferenceHeader_icon
           @see #PreferenceHeader_id
           @see #PreferenceHeader_summary
           @see #PreferenceHeader_title
         */
        public: static const int PreferenceHeader[7];
        /**
          <p>
          @attr description
           The short title for the bread crumb of this item. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#breadCrumbShortTitle}.
          @attr name android:breadCrumbShortTitle
        */
        public: static const int PreferenceHeader_breadCrumbShortTitle = 6;
        /**
          <p>
          @attr description
           The title for the bread crumb of this item. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#breadCrumbTitle}.
          @attr name android:breadCrumbTitle
        */
        public: static const int PreferenceHeader_breadCrumbTitle = 5;
        /**
          <p>
          @attr description
           The fragment that is displayed when the user selects this item. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fragment}.
          @attr name android:fragment
        */
        public: static const int PreferenceHeader_fragment = 4;
        /**
          <p>
          @attr description
           An icon for the item. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int PreferenceHeader_icon = 0;
        /**
          <p>
          @attr description
           Identifier value for the header. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#id}.
          @attr name android:id
        */
        public: static const int PreferenceHeader_id = 1;
        /**
          <p>
          @attr description
           The summary for the item. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#summary}.
          @attr name android:summary
        */
        public: static const int PreferenceHeader_summary = 3;
        /**
          <p>
          @attr description
           The title of the item that is shown to the user. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public: static const int PreferenceHeader_title = 2;
        /**  Use <code>print-service</code> as the root tag of the XML resource that
         describes an {@link android.printservice.PrintService} service, which is
         referenced from its {@link android.printservice.PrintService#SERVICE_META_DATA}
         meta-data entry. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PrintService_addPrintersActivity android:addPrintersActivity}</code></td><td> Fully qualified class name of an activity that allows the user to manually
             add printers to this print service.</td></tr>
           <tr><td><code>{@link #PrintService_advancedPrintOptionsActivity android:advancedPrintOptionsActivity}</code></td><td> Fully qualified class name of an activity with advanced print options
             specific to this print service.</td></tr>
           <tr><td><code>{@link #PrintService_settingsActivity android:settingsActivity}</code></td><td> Fully qualified class name of an activity that allows the user to modify
             the settings for this service.</td></tr>
           <tr><td><code>{@link #PrintService_vendor android:vendor}</code></td><td> The vendor name if this print service is vendor specific.</td></tr>
           </table>
           @see #PrintService_addPrintersActivity
           @see #PrintService_advancedPrintOptionsActivity
           @see #PrintService_settingsActivity
           @see #PrintService_vendor
         */
        public: static const int PrintService[4];
        /**
          <p>
          @attr description
           Fully qualified class name of an activity that allows the user to manually
             add printers to this print service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#addPrintersActivity}.
          @attr name android:addPrintersActivity
        */
        public: static const int PrintService_addPrintersActivity = 1;
        /**
          <p>
          @attr description
           Fully qualified class name of an activity with advanced print options
             specific to this print service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#advancedPrintOptionsActivity}.
          @attr name android:advancedPrintOptionsActivity
        */
        public: static const int PrintService_advancedPrintOptionsActivity = 3;
        /**
          <p>
          @attr description
           Fully qualified class name of an activity that allows the user to modify
             the settings for this service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int PrintService_settingsActivity = 0;
        /**
          <p>
          @attr description
           The vendor name if this print service is vendor specific. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#vendor}.
          @attr name android:vendor
        */
        public: static const int PrintService_vendor = 2;
        /** Attributes that can be used with a ProgressBar.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ProgressBar_animationResolution android:animationResolution}</code></td><td> Timeout between frames of animation in milliseconds
             {@deprecated Not used by the framework.} </td></tr>
           <tr><td><code>{@link #ProgressBar_backgroundTint android:backgroundTint}</code></td><td> Tint to apply to the background.</td></tr>
           <tr><td><code>{@link #ProgressBar_backgroundTintMode android:backgroundTintMode}</code></td><td> Blending mode used to apply the background tint.</td></tr>
           <tr><td><code>{@link #ProgressBar_indeterminate android:indeterminate}</code></td><td> Allows to enable the indeterminate mode.</td></tr>
           <tr><td><code>{@link #ProgressBar_indeterminateBehavior android:indeterminateBehavior}</code></td><td> Defines how the indeterminate mode should behave when the progress
        reaches max.</td></tr>
           <tr><td><code>{@link #ProgressBar_indeterminateDrawable android:indeterminateDrawable}</code></td><td> Drawable used for the indeterminate mode.</td></tr>
           <tr><td><code>{@link #ProgressBar_indeterminateDuration android:indeterminateDuration}</code></td><td> Duration of the indeterminate animation.</td></tr>
           <tr><td><code>{@link #ProgressBar_indeterminateOnly android:indeterminateOnly}</code></td><td> Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).</td></tr>
           <tr><td><code>{@link #ProgressBar_indeterminateTint android:indeterminateTint}</code></td><td> Tint to apply to the indeterminate progress indicator.</td></tr>
           <tr><td><code>{@link #ProgressBar_indeterminateTintMode android:indeterminateTintMode}</code></td><td> Blending mode used to apply the indeterminate progress indicator tint.</td></tr>
           <tr><td><code>{@link #ProgressBar_interpolator android:interpolator}</code></td><td></td></tr>
           <tr><td><code>{@link #ProgressBar_max android:max}</code></td><td> Defines the maximum value the progress can take.</td></tr>
           <tr><td><code>{@link #ProgressBar_maxHeight android:maxHeight}</code></td><td> An optional argument to supply a maximum height for this view.</td></tr>
           <tr><td><code>{@link #ProgressBar_maxWidth android:maxWidth}</code></td><td> An optional argument to supply a maximum width for this view.</td></tr>
           <tr><td><code>{@link #ProgressBar_minHeight android:minHeight}</code></td><td></td></tr>
           <tr><td><code>{@link #ProgressBar_minWidth android:minWidth}</code></td><td></td></tr>
           <tr><td><code>{@link #ProgressBar_mirrorForRtl android:mirrorForRtl}</code></td><td> Defines if the associated drawables need to be mirrored when in RTL mode.</td></tr>
           <tr><td><code>{@link #ProgressBar_progress android:progress}</code></td><td> Defines the default progress value, between 0 and max.</td></tr>
           <tr><td><code>{@link #ProgressBar_progressBackgroundTint android:progressBackgroundTint}</code></td><td> Tint to apply to the progress indicator background.</td></tr>
           <tr><td><code>{@link #ProgressBar_progressBackgroundTintMode android:progressBackgroundTintMode}</code></td><td> Blending mode used to apply the progress indicator background tint.</td></tr>
           <tr><td><code>{@link #ProgressBar_progressDrawable android:progressDrawable}</code></td><td> Drawable used for the progress mode.</td></tr>
           <tr><td><code>{@link #ProgressBar_progressTint android:progressTint}</code></td><td> Tint to apply to the progress indicator.</td></tr>
           <tr><td><code>{@link #ProgressBar_progressTintMode android:progressTintMode}</code></td><td> Blending mode used to apply the progress indicator tint.</td></tr>
           <tr><td><code>{@link #ProgressBar_secondaryProgress android:secondaryProgress}</code></td><td> Defines the secondary progress value, between 0 and max.</td></tr>
           <tr><td><code>{@link #ProgressBar_secondaryProgressTint android:secondaryProgressTint}</code></td><td> Tint to apply to the secondary progress indicator.</td></tr>
           <tr><td><code>{@link #ProgressBar_secondaryProgressTintMode android:secondaryProgressTintMode}</code></td><td> Blending mode used to apply the secondary progress indicator tint.</td></tr>
           </table>
           @see #ProgressBar_animationResolution
           @see #ProgressBar_backgroundTint
           @see #ProgressBar_backgroundTintMode
           @see #ProgressBar_indeterminate
           @see #ProgressBar_indeterminateBehavior
           @see #ProgressBar_indeterminateDrawable
           @see #ProgressBar_indeterminateDuration
           @see #ProgressBar_indeterminateOnly
           @see #ProgressBar_indeterminateTint
           @see #ProgressBar_indeterminateTintMode
           @see #ProgressBar_interpolator
           @see #ProgressBar_max
           @see #ProgressBar_maxHeight
           @see #ProgressBar_maxWidth
           @see #ProgressBar_minHeight
           @see #ProgressBar_minWidth
           @see #ProgressBar_mirrorForRtl
           @see #ProgressBar_progress
           @see #ProgressBar_progressBackgroundTint
           @see #ProgressBar_progressBackgroundTintMode
           @see #ProgressBar_progressDrawable
           @see #ProgressBar_progressTint
           @see #ProgressBar_progressTintMode
           @see #ProgressBar_secondaryProgress
           @see #ProgressBar_secondaryProgressTint
           @see #ProgressBar_secondaryProgressTintMode
         */
        public: static const int ProgressBar[26];
        /**
          <p>
          @attr description
           Timeout between frames of animation in milliseconds
             {@deprecated Not used by the framework.} 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animationResolution}.
          @attr name android:animationResolution
        */
        public: static const int ProgressBar_animationResolution = 14;
        /**
          <p>
          @attr description
           Tint to apply to the background. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundTint}.
          @attr name android:backgroundTint
        */
        public: static const int ProgressBar_backgroundTint = 24;
        /**
          <p>
          @attr description
           Blending mode used to apply the background tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundTintMode}.
          @attr name android:backgroundTintMode
        */
        public: static const int ProgressBar_backgroundTintMode = 25;
        /**
          <p>
          @attr description
           Allows to enable the indeterminate mode. In this mode the progress
         bar plays an infinite looping animation. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indeterminate}.
          @attr name android:indeterminate
        */
        public: static const int ProgressBar_indeterminate = 5;
        /**
          <p>
          @attr description
           Defines how the indeterminate mode should behave when the progress
        reaches max. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>repeat</code></td><td>1</td><td> Progress starts over from 0. </td></tr>
<tr><td><code>cycle</code></td><td>2</td><td> Progress keeps the current value and goes back to 0. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indeterminateBehavior}.
          @attr name android:indeterminateBehavior
        */
        public: static const int ProgressBar_indeterminateBehavior = 10;
        /**
          <p>
          @attr description
           Drawable used for the indeterminate mode. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indeterminateDrawable}.
          @attr name android:indeterminateDrawable
        */
        public: static const int ProgressBar_indeterminateDrawable = 7;
        /**
          <p>
          @attr description
           Duration of the indeterminate animation. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indeterminateDuration}.
          @attr name android:indeterminateDuration
        */
        public: static const int ProgressBar_indeterminateDuration = 9;
        /**
          <p>
          @attr description
           Restricts to ONLY indeterminate mode (state-keeping progress mode will not work). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indeterminateOnly}.
          @attr name android:indeterminateOnly
        */
        public: static const int ProgressBar_indeterminateOnly = 6;
        /**
          <p>
          @attr description
           Tint to apply to the indeterminate progress indicator. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indeterminateTint}.
          @attr name android:indeterminateTint
        */
        public: static const int ProgressBar_indeterminateTint = 22;
        /**
          <p>
          @attr description
           Blending mode used to apply the indeterminate progress indicator tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#indeterminateTintMode}.
          @attr name android:indeterminateTintMode
        */
        public: static const int ProgressBar_indeterminateTintMode = 23;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#interpolator}
          attribute's value can be found in the {@link #ProgressBar} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:interpolator
        */
        public: static const int ProgressBar_interpolator = 13;
        /**
          <p>
          @attr description
           Defines the maximum value the progress can take. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#max}.
          @attr name android:max
        */
        public: static const int ProgressBar_max = 2;
        /**
          <p>
          @attr description
           An optional argument to supply a maximum height for this view.
             See {see android.widget.ImageView#setMaxHeight} for details. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxHeight}.
          @attr name android:maxHeight
        */
        public: static const int ProgressBar_maxHeight = 1;
        /**
          <p>
          @attr description
           An optional argument to supply a maximum width for this view.
             See {see android.widget.ImageView#setMaxWidth} for details. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxWidth}.
          @attr name android:maxWidth
        */
        public: static const int ProgressBar_maxWidth = 0;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#minHeight}
          attribute's value can be found in the {@link #ProgressBar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:minHeight
        */
        public: static const int ProgressBar_minHeight = 12;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#minWidth}
          attribute's value can be found in the {@link #ProgressBar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:minWidth
        */
        public: static const int ProgressBar_minWidth = 11;
        /**
          <p>
          @attr description
           Defines if the associated drawables need to be mirrored when in RTL mode.
             Default is false 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#mirrorForRtl}.
          @attr name android:mirrorForRtl
        */
        public: static const int ProgressBar_mirrorForRtl = 15;
        /**
          <p>
          @attr description
           Defines the default progress value, between 0 and max. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progress}.
          @attr name android:progress
        */
        public: static const int ProgressBar_progress = 3;
        /**
          <p>
          @attr description
           Tint to apply to the progress indicator background. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBackgroundTint}.
          @attr name android:progressBackgroundTint
        */
        public: static const int ProgressBar_progressBackgroundTint = 18;
        /**
          <p>
          @attr description
           Blending mode used to apply the progress indicator background tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBackgroundTintMode}.
          @attr name android:progressBackgroundTintMode
        */
        public: static const int ProgressBar_progressBackgroundTintMode = 19;
        /**
          <p>
          @attr description
           Drawable used for the progress mode. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressDrawable}.
          @attr name android:progressDrawable
        */
        public: static const int ProgressBar_progressDrawable = 8;
        /**
          <p>
          @attr description
           Tint to apply to the progress indicator. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressTint}.
          @attr name android:progressTint
        */
        public: static const int ProgressBar_progressTint = 16;
        /**
          <p>
          @attr description
           Blending mode used to apply the progress indicator tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressTintMode}.
          @attr name android:progressTintMode
        */
        public: static const int ProgressBar_progressTintMode = 17;
        /**
          <p>
          @attr description
           Defines the secondary progress value, between 0 and max. This progress is drawn between
             the primary progress and the background.  It can be ideal for media scenarios such as
             showing the buffering progress while the default progress shows the play progress. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#secondaryProgress}.
          @attr name android:secondaryProgress
        */
        public: static const int ProgressBar_secondaryProgress = 4;
        /**
          <p>
          @attr description
           Tint to apply to the secondary progress indicator. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#secondaryProgressTint}.
          @attr name android:secondaryProgressTint
        */
        public: static const int ProgressBar_secondaryProgressTint = 20;
        /**
          <p>
          @attr description
           Blending mode used to apply the secondary progress indicator tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#secondaryProgressTintMode}.
          @attr name android:secondaryProgressTintMode
        */
        public: static const int ProgressBar_secondaryProgressTintMode = 21;
        /** Attributes that can be used with a PropertyAnimator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PropertyAnimator_pathData android:pathData}</code></td><td> The path used to animate the properties in the ObjectAnimator </td></tr>
           <tr><td><code>{@link #PropertyAnimator_propertyName android:propertyName}</code></td><td> Name of the property being animated.</td></tr>
           <tr><td><code>{@link #PropertyAnimator_propertyXName android:propertyXName}</code></td><td> Name of the property being animated as the X coordinate of the pathData.</td></tr>
           <tr><td><code>{@link #PropertyAnimator_propertyYName android:propertyYName}</code></td><td> Name of the property being animated as the Y coordinate of the pathData.</td></tr>
           </table>
           @see #PropertyAnimator_pathData
           @see #PropertyAnimator_propertyName
           @see #PropertyAnimator_propertyXName
           @see #PropertyAnimator_propertyYName
         */
        public: static const int PropertyAnimator[4];
        /**
          <p>
          @attr description
           The path used to animate the properties in the ObjectAnimator 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pathData}.
          @attr name android:pathData
        */
        public: static const int PropertyAnimator_pathData = 1;
        /**
          <p>
          @attr description
           Name of the property being animated. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#propertyName}.
          @attr name android:propertyName
        */
        public: static const int PropertyAnimator_propertyName = 0;
        /**
          <p>
          @attr description
           Name of the property being animated as the X coordinate of the pathData. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#propertyXName}.
          @attr name android:propertyXName
        */
        public: static const int PropertyAnimator_propertyXName = 2;
        /**
          <p>
          @attr description
           Name of the property being animated as the Y coordinate of the pathData. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#propertyYName}.
          @attr name android:propertyYName
        */
        public: static const int PropertyAnimator_propertyYName = 3;
        /** Attributes that can be used with a QuickContactBadge.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #QuickContactBadge_quickContactWindowSize android:quickContactWindowSize}</code></td><td></td></tr>
           </table>
           @see #QuickContactBadge_quickContactWindowSize
         */
        public: static const int QuickContactBadge[1];
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#quickContactWindowSize}
          attribute's value can be found in the {@link #QuickContactBadge} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>modeSmall</code></td><td>1</td><td></td></tr>
<tr><td><code>modeMedium</code></td><td>2</td><td></td></tr>
<tr><td><code>modeLarge</code></td><td>3</td><td></td></tr>
</table>
          @attr name android:quickContactWindowSize
        */
        public: static const int QuickContactBadge_quickContactWindowSize = 0;
        /** Attributes that can be used with a RadioGroup.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RadioGroup_checkedButton android:checkedButton}</code></td><td> The id of the child radio button that should be checked by default
             within this radio group.</td></tr>
           <tr><td><code>{@link #RadioGroup_orientation android:orientation}</code></td><td> Should the radio group be a column or a row?  Use "horizontal"
             for a row, "vertical" for a column.</td></tr>
           </table>
           @see #RadioGroup_checkedButton
           @see #RadioGroup_orientation
         */
        public: static const int RadioGroup[2];
        /**
          <p>
          @attr description
           The id of the child radio button that should be checked by default
             within this radio group. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checkedButton}.
          @attr name android:checkedButton
        */
        public: static const int RadioGroup_checkedButton = 1;
        /**
          <p>
          @attr description
           Should the radio group be a column or a row?  Use "horizontal"
             for a row, "vertical" for a column.  The default is
             vertical. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orientation}.
          @attr name android:orientation
        */
        public: static const int RadioGroup_orientation = 0;
        /** Attributes that can be used with a RatingBar.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RatingBar_isIndicator android:isIndicator}</code></td><td> Whether this rating bar is an indicator (and non-changeable by the user).</td></tr>
           <tr><td><code>{@link #RatingBar_numStars android:numStars}</code></td><td> The number of stars (or rating items) to show.</td></tr>
           <tr><td><code>{@link #RatingBar_rating android:rating}</code></td><td> The rating to set by default.</td></tr>
           <tr><td><code>{@link #RatingBar_stepSize android:stepSize}</code></td><td> The step size of the rating.</td></tr>
           </table>
           @see #RatingBar_isIndicator
           @see #RatingBar_numStars
           @see #RatingBar_rating
           @see #RatingBar_stepSize
         */
        public: static const int RatingBar[4];
        /**
          <p>
          @attr description
           Whether this rating bar is an indicator (and non-changeable by the user). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isIndicator}.
          @attr name android:isIndicator
        */
        public: static const int RatingBar_isIndicator = 3;
        /**
          <p>
          @attr description
           The number of stars (or rating items) to show. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#numStars}.
          @attr name android:numStars
        */
        public: static const int RatingBar_numStars = 0;
        /**
          <p>
          @attr description
           The rating to set by default. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#rating}.
          @attr name android:rating
        */
        public: static const int RatingBar_rating = 1;
        /**
          <p>
          @attr description
           The step size of the rating. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#stepSize}.
          @attr name android:stepSize
        */
        public: static const int RatingBar_stepSize = 2;
        /**  Attributes that can be used with <code>rating-definition</code> tags inside of the XML
         resource that describes TV content rating of a {@link android.media.tv.TvInputService},
         which is referenced from its
         {@link android.media.tv.TvInputManager#META_DATA_CONTENT_RATING_SYSTEMS}. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RatingDefinition_contentAgeHint android:contentAgeHint}</code></td><td> The age associated with the content rating.</td></tr>
           <tr><td><code>{@link #RatingDefinition_description android:description}</code></td><td> The short description of the content rating.</td></tr>
           <tr><td><code>{@link #RatingDefinition_name android:name}</code></td><td> The unique name of the content rating.</td></tr>
           <tr><td><code>{@link #RatingDefinition_title android:title}</code></td><td> The title of the content rating which is shown to the user.</td></tr>
           </table>
           @see #RatingDefinition_contentAgeHint
           @see #RatingDefinition_description
           @see #RatingDefinition_name
           @see #RatingDefinition_title
         */
        public: static const int RatingDefinition[4];
        /**
          <p>
          @attr description
           The age associated with the content rating. The content of this rating is suitable for
             people of this age or above. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentAgeHint}.
          @attr name android:contentAgeHint
        */
        public: static const int RatingDefinition_contentAgeHint = 3;
        /**
          <p>
          @attr description
           The short description of the content rating. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int RatingDefinition_description = 1;
        /**
          <p>
          @attr description
           The unique name of the content rating. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int RatingDefinition_name = 0;
        /**
          <p>
          @attr description
           The title of the content rating which is shown to the user. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public: static const int RatingDefinition_title = 2;
        /**  Attributes that can be used with <code>rating-system-definition</code> tags inside of the
         XML resource that describes TV content rating of a {@link android.media.tv.TvInputService},
         which is referenced from its
         {@link android.media.tv.TvInputManager#META_DATA_CONTENT_RATING_SYSTEMS}. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RatingSystemDefinition_country android:country}</code></td><td> The country code associated with the content rating system, which consists of two
             uppercase letters that conform to the ISO 3166 standard.</td></tr>
           <tr><td><code>{@link #RatingSystemDefinition_description android:description}</code></td><td> The short description of the content rating system.</td></tr>
           <tr><td><code>{@link #RatingSystemDefinition_name android:name}</code></td><td> The unique name of the content rating system.</td></tr>
           <tr><td><code>{@link #RatingSystemDefinition_title android:title}</code></td><td> The title of the content rating system which is shown to the user.</td></tr>
           </table>
           @see #RatingSystemDefinition_country
           @see #RatingSystemDefinition_description
           @see #RatingSystemDefinition_name
           @see #RatingSystemDefinition_title
         */
        public: static const int RatingSystemDefinition[4];
        /**
          <p>
          @attr description
           The country code associated with the content rating system, which consists of two
             uppercase letters that conform to the ISO 3166 standard. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#country}.
          @attr name android:country
        */
        public: static const int RatingSystemDefinition_country = 3;
        /**
          <p>
          @attr description
           The short description of the content rating system. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int RatingSystemDefinition_description = 1;
        /**
          <p>
          @attr description
           The unique name of the content rating system. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int RatingSystemDefinition_name = 0;
        /**
          <p>
          @attr description
           The title of the content rating system which is shown to the user. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public: static const int RatingSystemDefinition_title = 2;
        /**  Use <code>recognition-service</code> as the root tag of the XML resource that
         describes a {@link android.speech.RecognitionService}, which is referenced from
         its {@link android.speech.RecognitionService#SERVICE_META_DATA} meta-data entry.
         Described here are the attributes that can be included in that tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RecognitionService_settingsActivity android:settingsActivity}</code></td><td> Component name of an activity that allows the user to modify
             the settings for this service.</td></tr>
           </table>
           @see #RecognitionService_settingsActivity
         */
        public: static const int RecognitionService[1];
        /**
          <p>
          @attr description
           Component name of an activity that allows the user to modify
             the settings for this service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int RecognitionService_settingsActivity = 0;
        /** Attributes that can be used with a RelativeLayout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RelativeLayout_gravity android:gravity}</code></td><td> Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.</td></tr>
           <tr><td><code>{@link #RelativeLayout_ignoreGravity android:ignoreGravity}</code></td><td> Indicates what view should not be affected by gravity.</td></tr>
           </table>
           @see #RelativeLayout_gravity
           @see #RelativeLayout_ignoreGravity
         */
        public: static const int RelativeLayout[2];
        /**
          <p>
          @attr description
           Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.  


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int RelativeLayout_gravity = 0;
        /**
          <p>
          @attr description
           Indicates what view should not be affected by gravity. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ignoreGravity}.
          @attr name android:ignoreGravity
        */
        public: static const int RelativeLayout_ignoreGravity = 1;
        /** Attributes that can be used with a RelativeLayout_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_above android:layout_above}</code></td><td> Positions the bottom edge of this view above the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignBaseline android:layout_alignBaseline}</code></td><td> Positions the baseline of this view on the baseline of the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignBottom android:layout_alignBottom}</code></td><td> Makes the bottom edge of this view match the bottom edge of the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignEnd android:layout_alignEnd}</code></td><td> Makes the end edge of this view match the end edge of the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignLeft android:layout_alignLeft}</code></td><td> Makes the left edge of this view match the left edge of the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentBottom android:layout_alignParentBottom}</code></td><td> If true, makes the bottom edge of this view match the bottom edge of the parent.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentEnd android:layout_alignParentEnd}</code></td><td> If true, makes the end edge of this view match the end edge of the parent.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentLeft android:layout_alignParentLeft}</code></td><td> If true, makes the left edge of this view match the left edge of the parent.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentRight android:layout_alignParentRight}</code></td><td> If true, makes the right edge of this view match the right edge of the parent.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentStart android:layout_alignParentStart}</code></td><td> If true, makes the start edge of this view match the start edge of the parent.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentTop android:layout_alignParentTop}</code></td><td> If true, makes the top edge of this view match the top edge of the parent.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignRight android:layout_alignRight}</code></td><td> Makes the right edge of this view match the right edge of the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignStart android:layout_alignStart}</code></td><td> Makes the start edge of this view match the start edge of the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignTop android:layout_alignTop}</code></td><td> Makes the top edge of this view match the top edge of the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_alignWithParentIfMissing android:layout_alignWithParentIfMissing}</code></td><td> If set to true, the parent will be used as the anchor when the anchor cannot be
             be found for layout_toLeftOf, layout_toRightOf, etc.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_below android:layout_below}</code></td><td> Positions the top edge of this view below the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_centerHorizontal android:layout_centerHorizontal}</code></td><td> If true, centers this child horizontally within its parent.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_centerInParent android:layout_centerInParent}</code></td><td> If true, centers this child horizontally and vertically within its parent.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_centerVertical android:layout_centerVertical}</code></td><td> If true, centers this child vertically within its parent.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_toEndOf android:layout_toEndOf}</code></td><td> Positions the start edge of this view to the end of the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_toLeftOf android:layout_toLeftOf}</code></td><td> Positions the right edge of this view to the left of the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_toRightOf android:layout_toRightOf}</code></td><td> Positions the left edge of this view to the right of the given anchor view ID.</td></tr>
           <tr><td><code>{@link #RelativeLayout_Layout_layout_toStartOf android:layout_toStartOf}</code></td><td> Positions the end edge of this view to the start of the given anchor view ID.</td></tr>
           </table>
           @see #RelativeLayout_Layout_layout_above
           @see #RelativeLayout_Layout_layout_alignBaseline
           @see #RelativeLayout_Layout_layout_alignBottom
           @see #RelativeLayout_Layout_layout_alignEnd
           @see #RelativeLayout_Layout_layout_alignLeft
           @see #RelativeLayout_Layout_layout_alignParentBottom
           @see #RelativeLayout_Layout_layout_alignParentEnd
           @see #RelativeLayout_Layout_layout_alignParentLeft
           @see #RelativeLayout_Layout_layout_alignParentRight
           @see #RelativeLayout_Layout_layout_alignParentStart
           @see #RelativeLayout_Layout_layout_alignParentTop
           @see #RelativeLayout_Layout_layout_alignRight
           @see #RelativeLayout_Layout_layout_alignStart
           @see #RelativeLayout_Layout_layout_alignTop
           @see #RelativeLayout_Layout_layout_alignWithParentIfMissing
           @see #RelativeLayout_Layout_layout_below
           @see #RelativeLayout_Layout_layout_centerHorizontal
           @see #RelativeLayout_Layout_layout_centerInParent
           @see #RelativeLayout_Layout_layout_centerVertical
           @see #RelativeLayout_Layout_layout_toEndOf
           @see #RelativeLayout_Layout_layout_toLeftOf
           @see #RelativeLayout_Layout_layout_toRightOf
           @see #RelativeLayout_Layout_layout_toStartOf
         */
        public: static const int RelativeLayout_Layout[23];
        /**
          <p>
          @attr description
           Positions the bottom edge of this view above the given anchor view ID.
            Accommodates bottom margin of this view and top margin of anchor view. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_above}.
          @attr name android:layout_above
        */
        public: static const int RelativeLayout_Layout_layout_above = 2;
        /**
          <p>
          @attr description
           Positions the baseline of this view on the baseline of the given anchor view ID. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignBaseline}.
          @attr name android:layout_alignBaseline
        */
        public: static const int RelativeLayout_Layout_layout_alignBaseline = 4;
        /**
          <p>
          @attr description
           Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
            Accommodates bottom margin. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignBottom}.
          @attr name android:layout_alignBottom
        */
        public: static const int RelativeLayout_Layout_layout_alignBottom = 8;
        /**
          <p>
          @attr description
           Makes the end edge of this view match the end edge of the given anchor view ID.
            Accommodates end margin. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignEnd}.
          @attr name android:layout_alignEnd
        */
        public: static const int RelativeLayout_Layout_layout_alignEnd = 20;
        /**
          <p>
          @attr description
           Makes the left edge of this view match the left edge of the given anchor view ID.
            Accommodates left margin. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignLeft}.
          @attr name android:layout_alignLeft
        */
        public: static const int RelativeLayout_Layout_layout_alignLeft = 5;
        /**
          <p>
          @attr description
           If true, makes the bottom edge of this view match the bottom edge of the parent.
            Accommodates bottom margin. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignParentBottom}.
          @attr name android:layout_alignParentBottom
        */
        public: static const int RelativeLayout_Layout_layout_alignParentBottom = 12;
        /**
          <p>
          @attr description
           If true, makes the end edge of this view match the end edge of the parent.
            Accommodates end margin. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignParentEnd}.
          @attr name android:layout_alignParentEnd
        */
        public: static const int RelativeLayout_Layout_layout_alignParentEnd = 22;
        /**
          <p>
          @attr description
           If true, makes the left edge of this view match the left edge of the parent.
            Accommodates left margin. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignParentLeft}.
          @attr name android:layout_alignParentLeft
        */
        public: static const int RelativeLayout_Layout_layout_alignParentLeft = 9;
        /**
          <p>
          @attr description
           If true, makes the right edge of this view match the right edge of the parent.
            Accommodates right margin. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignParentRight}.
          @attr name android:layout_alignParentRight
        */
        public: static const int RelativeLayout_Layout_layout_alignParentRight = 11;
        /**
          <p>
          @attr description
           If true, makes the start edge of this view match the start edge of the parent.
            Accommodates start margin. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignParentStart}.
          @attr name android:layout_alignParentStart
        */
        public: static const int RelativeLayout_Layout_layout_alignParentStart = 21;
        /**
          <p>
          @attr description
           If true, makes the top edge of this view match the top edge of the parent.
            Accommodates top margin. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignParentTop}.
          @attr name android:layout_alignParentTop
        */
        public: static const int RelativeLayout_Layout_layout_alignParentTop = 10;
        /**
          <p>
          @attr description
           Makes the right edge of this view match the right edge of the given anchor view ID.
            Accommodates right margin. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignRight}.
          @attr name android:layout_alignRight
        */
        public: static const int RelativeLayout_Layout_layout_alignRight = 7;
        /**
          <p>
          @attr description
           Makes the start edge of this view match the start edge of the given anchor view ID.
            Accommodates start margin. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignStart}.
          @attr name android:layout_alignStart
        */
        public: static const int RelativeLayout_Layout_layout_alignStart = 19;
        /**
          <p>
          @attr description
           Makes the top edge of this view match the top edge of the given anchor view ID.
            Accommodates top margin. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignTop}.
          @attr name android:layout_alignTop
        */
        public: static const int RelativeLayout_Layout_layout_alignTop = 6;
        /**
          <p>
          @attr description
           If set to true, the parent will be used as the anchor when the anchor cannot be
             be found for layout_toLeftOf, layout_toRightOf, etc. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_alignWithParentIfMissing}.
          @attr name android:layout_alignWithParentIfMissing
        */
        public: static const int RelativeLayout_Layout_layout_alignWithParentIfMissing = 16;
        /**
          <p>
          @attr description
           Positions the top edge of this view below the given anchor view ID.
            Accommodates top margin of this view and bottom margin of anchor view. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_below}.
          @attr name android:layout_below
        */
        public: static const int RelativeLayout_Layout_layout_below = 3;
        /**
          <p>
          @attr description
           If true, centers this child horizontally within its parent. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_centerHorizontal}.
          @attr name android:layout_centerHorizontal
        */
        public: static const int RelativeLayout_Layout_layout_centerHorizontal = 14;
        /**
          <p>
          @attr description
           If true, centers this child horizontally and vertically within its parent. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_centerInParent}.
          @attr name android:layout_centerInParent
        */
        public: static const int RelativeLayout_Layout_layout_centerInParent = 13;
        /**
          <p>
          @attr description
           If true, centers this child vertically within its parent. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_centerVertical}.
          @attr name android:layout_centerVertical
        */
        public: static const int RelativeLayout_Layout_layout_centerVertical = 15;
        /**
          <p>
          @attr description
           Positions the start edge of this view to the end of the given anchor view ID.
             Accommodates start margin of this view and end margin of anchor view. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_toEndOf}.
          @attr name android:layout_toEndOf
        */
        public: static const int RelativeLayout_Layout_layout_toEndOf = 18;
        /**
          <p>
          @attr description
           Positions the right edge of this view to the left of the given anchor view ID.
             Accommodates right margin of this view and left margin of anchor view. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_toLeftOf}.
          @attr name android:layout_toLeftOf
        */
        public: static const int RelativeLayout_Layout_layout_toLeftOf = 0;
        /**
          <p>
          @attr description
           Positions the left edge of this view to the right of the given anchor view ID.
            Accommodates left margin of this view and right margin of anchor view. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_toRightOf}.
          @attr name android:layout_toRightOf
        */
        public: static const int RelativeLayout_Layout_layout_toRightOf = 1;
        /**
          <p>
          @attr description
           Positions the end edge of this view to the start of the given anchor view ID.
             Accommodates end margin of this view and start margin of anchor view. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_toStartOf}.
          @attr name android:layout_toStartOf
        */
        public: static const int RelativeLayout_Layout_layout_toStartOf = 17;
        /** Attributes that can be used with a ResolverDrawerLayout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ResolverDrawerLayout_maxCollapsedHeight android:maxCollapsedHeight}</code></td><td></td></tr>
           <tr><td><code>{@link #ResolverDrawerLayout_maxCollapsedHeightSmall android:maxCollapsedHeightSmall}</code></td><td></td></tr>
           <tr><td><code>{@link #ResolverDrawerLayout_maxWidth android:maxWidth}</code></td><td> An optional argument to supply a maximum width for this view.</td></tr>
           </table>
           @see #ResolverDrawerLayout_maxCollapsedHeight
           @see #ResolverDrawerLayout_maxCollapsedHeightSmall
           @see #ResolverDrawerLayout_maxWidth
         */
        public: static const int ResolverDrawerLayout[3];
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#maxCollapsedHeight}
          attribute's value can be found in the {@link #ResolverDrawerLayout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:maxCollapsedHeight
        */
        public: static const int ResolverDrawerLayout_maxCollapsedHeight = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#maxCollapsedHeightSmall}
          attribute's value can be found in the {@link #ResolverDrawerLayout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:maxCollapsedHeightSmall
        */
        public: static const int ResolverDrawerLayout_maxCollapsedHeightSmall = 2;
        /**
          <p>
          @attr description
           An optional argument to supply a maximum width for this view.
             See {see android.widget.ImageView#setMaxWidth} for details. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxWidth}.
          @attr name android:maxWidth
        */
        public: static const int ResolverDrawerLayout_maxWidth = 0;
        /** Attributes that can be used with a ResolverDrawerLayout_LayoutParams.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ResolverDrawerLayout_LayoutParams_layout_alwaysShow android:layout_alwaysShow}</code></td><td></td></tr>
           <tr><td><code>{@link #ResolverDrawerLayout_LayoutParams_layout_gravity android:layout_gravity}</code></td><td> Standard gravity constant that a child supplies to its parent.</td></tr>
           <tr><td><code>{@link #ResolverDrawerLayout_LayoutParams_layout_ignoreOffset android:layout_ignoreOffset}</code></td><td></td></tr>
           </table>
           @see #ResolverDrawerLayout_LayoutParams_layout_alwaysShow
           @see #ResolverDrawerLayout_LayoutParams_layout_gravity
           @see #ResolverDrawerLayout_LayoutParams_layout_ignoreOffset
         */
        public: static const int ResolverDrawerLayout_LayoutParams[3];
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#layout_alwaysShow}
          attribute's value can be found in the {@link #ResolverDrawerLayout_LayoutParams} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:layout_alwaysShow
        */
        public: static const int ResolverDrawerLayout_LayoutParams_layout_alwaysShow = 1;
        /**
          <p>
          @attr description
           Standard gravity constant that a child supplies to its parent.
         Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_gravity}.
          @attr name android:layout_gravity
        */
        public: static const int ResolverDrawerLayout_LayoutParams_layout_gravity = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#layout_ignoreOffset}
          attribute's value can be found in the {@link #ResolverDrawerLayout_LayoutParams} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:layout_ignoreOffset
        */
        public: static const int ResolverDrawerLayout_LayoutParams_layout_ignoreOffset = 2;
        /** Attributes that can be used with a RestrictionEntry.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RestrictionEntry_defaultValue android:defaultValue}</code></td><td> The default value for the preference, which will be set either if persistence
             is off or persistence is on and the preference is not found in the persistent
             storage.</td></tr>
           <tr><td><code>{@link #RestrictionEntry_description android:description}</code></td><td> Descriptive text for the associated data.</td></tr>
           <tr><td><code>{@link #RestrictionEntry_entries android:entries}</code></td><td> Reference to an array resource that will populate a list/adapter.</td></tr>
           <tr><td><code>{@link #RestrictionEntry_entryValues android:entryValues}</code></td><td> The array to find the value to save for a preference when an entry from
             entries is selected.</td></tr>
           <tr><td><code>{@link #RestrictionEntry_key android:key}</code></td><td> The key to store the Preference value.</td></tr>
           <tr><td><code>{@link #RestrictionEntry_restrictionType android:restrictionType}</code></td><td></td></tr>
           <tr><td><code>{@link #RestrictionEntry_title android:title}</code></td><td> The title associated with the item.</td></tr>
           </table>
           @see #RestrictionEntry_defaultValue
           @see #RestrictionEntry_description
           @see #RestrictionEntry_entries
           @see #RestrictionEntry_entryValues
           @see #RestrictionEntry_key
           @see #RestrictionEntry_restrictionType
           @see #RestrictionEntry_title
         */
        public: static const int RestrictionEntry[7];
        /**
          <p>
          @attr description
           The default value for the preference, which will be set either if persistence
             is off or persistence is on and the preference is not found in the persistent
             storage.  


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>May be a floating point value, such as "<code>1.2</code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#defaultValue}.
          @attr name android:defaultValue
        */
        public: static const int RestrictionEntry_defaultValue = 4;
        /**
          <p>
          @attr description
           Descriptive text for the associated data. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int RestrictionEntry_description = 0;
        /**
          <p>
          @attr description
           Reference to an array resource that will populate a list/adapter. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#entries}.
          @attr name android:entries
        */
        public: static const int RestrictionEntry_entries = 1;
        /**
          <p>
          @attr description
           The array to find the value to save for a preference when an entry from
             entries is selected. If a user clicks on the second item in entries, the
             second item in this array will be saved to the preference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#entryValues}.
          @attr name android:entryValues
        */
        public: static const int RestrictionEntry_entryValues = 5;
        /**
          <p>
          @attr description
           The key to store the Preference value. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#key}.
          @attr name android:key
        */
        public: static const int RestrictionEntry_key = 3;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#restrictionType}
          attribute's value can be found in the {@link #RestrictionEntry} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>hidden</code></td><td>0</td><td></td></tr>
<tr><td><code>bool</code></td><td>1</td><td></td></tr>
<tr><td><code>choice</code></td><td>2</td><td></td></tr>
<tr><td><code>multi-select</code></td><td>4</td><td></td></tr>
<tr><td><code>integer</code></td><td>5</td><td></td></tr>
<tr><td><code>string</code></td><td>6</td><td></td></tr>
</table>
          @attr name android:restrictionType
        */
        public: static const int RestrictionEntry_restrictionType = 6;
        /**
          <p>
          @attr description
           The title associated with the item. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public: static const int RestrictionEntry_title = 2;
        /**  Base attributes available to RingtonePreference. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RingtonePreference_ringtoneType android:ringtoneType}</code></td><td> Which ringtone type(s) to show in the picker.</td></tr>
           <tr><td><code>{@link #RingtonePreference_showDefault android:showDefault}</code></td><td> Whether to show an item for a default sound.</td></tr>
           <tr><td><code>{@link #RingtonePreference_showSilent android:showSilent}</code></td><td> Whether to show an item for 'Silent'.</td></tr>
           </table>
           @see #RingtonePreference_ringtoneType
           @see #RingtonePreference_showDefault
           @see #RingtonePreference_showSilent
         */
        public: static const int RingtonePreference[3];
        /**
          <p>
          @attr description
           Which ringtone type(s) to show in the picker. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>ringtone</code></td><td>1</td><td> Ringtones. </td></tr>
<tr><td><code>notification</code></td><td>2</td><td> Notification sounds. </td></tr>
<tr><td><code>alarm</code></td><td>4</td><td> Alarm sounds. </td></tr>
<tr><td><code>all</code></td><td>7</td><td> All available ringtone sounds. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ringtoneType}.
          @attr name android:ringtoneType
        */
        public: static const int RingtonePreference_ringtoneType = 0;
        /**
          <p>
          @attr description
           Whether to show an item for a default sound. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#showDefault}.
          @attr name android:showDefault
        */
        public: static const int RingtonePreference_showDefault = 1;
        /**
          <p>
          @attr description
           Whether to show an item for 'Silent'. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#showSilent}.
          @attr name android:showSilent
        */
        public: static const int RingtonePreference_showSilent = 2;
        /**  Drawable used to show animated touch feedback. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RippleDrawable_color android:color}</code></td><td> The color to use for ripple effects.</td></tr>
           </table>
           @see #RippleDrawable_color
         */
        public: static const int RippleDrawable[1];
        /**
          <p>
          @attr description
           The color to use for ripple effects. This attribute is required. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#color}.
          @attr name android:color
        */
        public: static const int RippleDrawable_color = 0;
        /**  attributes for internal rotary widget used in lock screen and phone app
      @hide 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RotarySelector_orientation android:orientation}</code></td><td> Use "horizontal" or "vertical".</td></tr>
           </table>
           @see #RotarySelector_orientation
         */
        public: static const int RotarySelector[1];
        /**
          <p>
          @attr description
           Use "horizontal" or "vertical".  The default is horizontal. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orientation}.
          @attr name android:orientation
        */
        public: static const int RotarySelector_orientation = 0;
        /** Attributes that can be used with a RotateAnimation.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RotateAnimation_fromDegrees android:fromDegrees}</code></td><td></td></tr>
           <tr><td><code>{@link #RotateAnimation_pivotX android:pivotX}</code></td><td></td></tr>
           <tr><td><code>{@link #RotateAnimation_pivotY android:pivotY}</code></td><td></td></tr>
           <tr><td><code>{@link #RotateAnimation_toDegrees android:toDegrees}</code></td><td></td></tr>
           </table>
           @see #RotateAnimation_fromDegrees
           @see #RotateAnimation_pivotX
           @see #RotateAnimation_pivotY
           @see #RotateAnimation_toDegrees
         */
        public: static const int RotateAnimation[4];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fromDegrees}
          attribute's value can be found in the {@link #RotateAnimation} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:fromDegrees
        */
        public: static const int RotateAnimation_fromDegrees = 0;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#pivotX}
          attribute's value can be found in the {@link #RotateAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pivotX
        */
        public: static const int RotateAnimation_pivotX = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#pivotY}
          attribute's value can be found in the {@link #RotateAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pivotY
        */
        public: static const int RotateAnimation_pivotY = 3;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#toDegrees}
          attribute's value can be found in the {@link #RotateAnimation} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:toDegrees
        */
        public: static const int RotateAnimation_toDegrees = 1;
        /**  Drawable used to rotate another drawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RotateDrawable_drawable android:drawable}</code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
           <tr><td><code>{@link #RotateDrawable_fromDegrees android:fromDegrees}</code></td><td></td></tr>
           <tr><td><code>{@link #RotateDrawable_pivotX android:pivotX}</code></td><td></td></tr>
           <tr><td><code>{@link #RotateDrawable_pivotY android:pivotY}</code></td><td></td></tr>
           <tr><td><code>{@link #RotateDrawable_toDegrees android:toDegrees}</code></td><td></td></tr>
           <tr><td><code>{@link #RotateDrawable_visible android:visible}</code></td><td> Provides initial visibility state of the drawable; the default
             value is false.</td></tr>
           </table>
           @see #RotateDrawable_drawable
           @see #RotateDrawable_fromDegrees
           @see #RotateDrawable_pivotX
           @see #RotateDrawable_pivotY
           @see #RotateDrawable_toDegrees
           @see #RotateDrawable_visible
         */
        public: static const int RotateDrawable[6];
        /**
          <p>
          @attr description
           Reference to a drawable resource to use for the frame.  If not
             given, the drawable must be defined by the first child tag. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int RotateDrawable_drawable = 1;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fromDegrees}
          attribute's value can be found in the {@link #RotateDrawable} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:fromDegrees
        */
        public: static const int RotateDrawable_fromDegrees = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#pivotX}
          attribute's value can be found in the {@link #RotateDrawable} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pivotX
        */
        public: static const int RotateDrawable_pivotX = 4;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#pivotY}
          attribute's value can be found in the {@link #RotateDrawable} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pivotY
        */
        public: static const int RotateDrawable_pivotY = 5;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#toDegrees}
          attribute's value can be found in the {@link #RotateDrawable} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:toDegrees
        */
        public: static const int RotateDrawable_toDegrees = 3;
        /**
          <p>
          @attr description
           Provides initial visibility state of the drawable; the default
             value is false.  See
             {@link android.graphics.drawable.Drawable#setVisible}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int RotateDrawable_visible = 0;
        /** Attributes that can be used with a ScaleAnimation.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ScaleAnimation_fromXScale android:fromXScale}</code></td><td></td></tr>
           <tr><td><code>{@link #ScaleAnimation_fromYScale android:fromYScale}</code></td><td></td></tr>
           <tr><td><code>{@link #ScaleAnimation_pivotX android:pivotX}</code></td><td></td></tr>
           <tr><td><code>{@link #ScaleAnimation_pivotY android:pivotY}</code></td><td></td></tr>
           <tr><td><code>{@link #ScaleAnimation_toXScale android:toXScale}</code></td><td></td></tr>
           <tr><td><code>{@link #ScaleAnimation_toYScale android:toYScale}</code></td><td></td></tr>
           </table>
           @see #ScaleAnimation_fromXScale
           @see #ScaleAnimation_fromYScale
           @see #ScaleAnimation_pivotX
           @see #ScaleAnimation_pivotY
           @see #ScaleAnimation_toXScale
           @see #ScaleAnimation_toYScale
         */
        public: static const int ScaleAnimation[6];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fromXScale}
          attribute's value can be found in the {@link #ScaleAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:fromXScale
        */
        public: static const int ScaleAnimation_fromXScale = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fromYScale}
          attribute's value can be found in the {@link #ScaleAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:fromYScale
        */
        public: static const int ScaleAnimation_fromYScale = 4;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#pivotX}
          attribute's value can be found in the {@link #ScaleAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pivotX
        */
        public: static const int ScaleAnimation_pivotX = 0;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#pivotY}
          attribute's value can be found in the {@link #ScaleAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:pivotY
        */
        public: static const int ScaleAnimation_pivotY = 1;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#toXScale}
          attribute's value can be found in the {@link #ScaleAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:toXScale
        */
        public: static const int ScaleAnimation_toXScale = 3;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#toYScale}
          attribute's value can be found in the {@link #ScaleAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:toYScale
        */
        public: static const int ScaleAnimation_toYScale = 5;
        /** Attributes that can be used with a ScaleDrawable.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ScaleDrawable_drawable android:drawable}</code></td><td> Reference to a drawable resource to draw with the specified scale.</td></tr>
           <tr><td><code>{@link #ScaleDrawable_scaleGravity android:scaleGravity}</code></td><td> Specifies where the drawable is positioned after scaling.</td></tr>
           <tr><td><code>{@link #ScaleDrawable_scaleHeight android:scaleHeight}</code></td><td> Scale height, expressed as a percentage of the drawable's bound.</td></tr>
           <tr><td><code>{@link #ScaleDrawable_scaleWidth android:scaleWidth}</code></td><td> Scale width, expressed as a percentage of the drawable's bound.</td></tr>
           <tr><td><code>{@link #ScaleDrawable_useIntrinsicSizeAsMinimum android:useIntrinsicSizeAsMinimum}</code></td><td> Use the drawable's intrinsic width and height as minimum size values.</td></tr>
           </table>
           @see #ScaleDrawable_drawable
           @see #ScaleDrawable_scaleGravity
           @see #ScaleDrawable_scaleHeight
           @see #ScaleDrawable_scaleWidth
           @see #ScaleDrawable_useIntrinsicSizeAsMinimum
         */
        public: static const int ScaleDrawable[5];
        /**
          <p>
          @attr description
           Reference to a drawable resource to draw with the specified scale. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawable}.
          @attr name android:drawable
        */
        public: static const int ScaleDrawable_drawable = 0;
        /**
          <p>
          @attr description
           Specifies where the drawable is positioned after scaling. The default value is
             left. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the vertical gravity: a top gravity will clip the bottom
                 edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the horizontal gravity: a left gravity will clip the right
                 edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scaleGravity}.
          @attr name android:scaleGravity
        */
        public: static const int ScaleDrawable_scaleGravity = 3;
        /**
          <p>
          @attr description
           Scale height, expressed as a percentage of the drawable's bound. The value's
             format is XX%. For instance: 100%, 12.5%, etc.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scaleHeight}.
          @attr name android:scaleHeight
        */
        public: static const int ScaleDrawable_scaleHeight = 2;
        /**
          <p>
          @attr description
           Scale width, expressed as a percentage of the drawable's bound. The value's
             format is XX%. For instance: 100%, 12.5%, etc.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scaleWidth}.
          @attr name android:scaleWidth
        */
        public: static const int ScaleDrawable_scaleWidth = 1;
        /**
          <p>
          @attr description
           Use the drawable's intrinsic width and height as minimum size values.
             Useful if the target drawable is a 9-patch or otherwise should not be scaled
             down beyond a minimum size. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#useIntrinsicSizeAsMinimum}.
          @attr name android:useIntrinsicSizeAsMinimum
        */
        public: static const int ScaleDrawable_useIntrinsicSizeAsMinimum = 4;
        /** Attributes that can be used with a ScrollView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ScrollView_fillViewport android:fillViewport}</code></td><td> Defines whether the scrollview should stretch its content to fill the viewport.</td></tr>
           </table>
           @see #ScrollView_fillViewport
         */
        public: static const int ScrollView[1];
        /**
          <p>
          @attr description
           Defines whether the scrollview should stretch its content to fill the viewport. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fillViewport}.
          @attr name android:fillViewport
        */
        public: static const int ScrollView_fillViewport = 0;
        /** Attributes that can be used with a SearchView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SearchView_closeIcon android:closeIcon}</code></td><td> Close button icon </td></tr>
           <tr><td><code>{@link #SearchView_commitIcon android:commitIcon}</code></td><td> Commit icon shown in the query suggestion row </td></tr>
           <tr><td><code>{@link #SearchView_focusable android:focusable}</code></td><td> Boolean that controls whether a view can take focus.</td></tr>
           <tr><td><code>{@link #SearchView_goIcon android:goIcon}</code></td><td> Go button icon </td></tr>
           <tr><td><code>{@link #SearchView_iconifiedByDefault android:iconifiedByDefault}</code></td><td> The default state of the SearchView.</td></tr>
           <tr><td><code>{@link #SearchView_imeOptions android:imeOptions}</code></td><td> The IME options to set on the query text field.</td></tr>
           <tr><td><code>{@link #SearchView_inputType android:inputType}</code></td><td> The input type to set on the query text field.</td></tr>
           <tr><td><code>{@link #SearchView_layout android:layout}</code></td><td> The layout to use for the search view.</td></tr>
           <tr><td><code>{@link #SearchView_maxWidth android:maxWidth}</code></td><td> An optional maximum width of the SearchView.</td></tr>
           <tr><td><code>{@link #SearchView_queryBackground android:queryBackground}</code></td><td> Background for the section containing the search query </td></tr>
           <tr><td><code>{@link #SearchView_queryHint android:queryHint}</code></td><td> An optional query hint string to be displayed in the empty query field.</td></tr>
           <tr><td><code>{@link #SearchView_searchIcon android:searchIcon}</code></td><td> Search icon </td></tr>
           <tr><td><code>{@link #SearchView_submitBackground android:submitBackground}</code></td><td> Background for the section containing the action (e.</td></tr>
           <tr><td><code>{@link #SearchView_suggestionRowLayout android:suggestionRowLayout}</code></td><td> Layout for query suggestion rows </td></tr>
           <tr><td><code>{@link #SearchView_voiceIcon android:voiceIcon}</code></td><td> Voice button icon </td></tr>
           </table>
           @see #SearchView_closeIcon
           @see #SearchView_commitIcon
           @see #SearchView_focusable
           @see #SearchView_goIcon
           @see #SearchView_iconifiedByDefault
           @see #SearchView_imeOptions
           @see #SearchView_inputType
           @see #SearchView_layout
           @see #SearchView_maxWidth
           @see #SearchView_queryBackground
           @see #SearchView_queryHint
           @see #SearchView_searchIcon
           @see #SearchView_submitBackground
           @see #SearchView_suggestionRowLayout
           @see #SearchView_voiceIcon
         */
        public: static const int SearchView[15];
        /**
          <p>
          @attr description
           Close button icon 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#closeIcon}.
          @attr name android:closeIcon
        */
        public: static const int SearchView_closeIcon = 7;
        /**
          <p>
          @attr description
           Commit icon shown in the query suggestion row 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#commitIcon}.
          @attr name android:commitIcon
        */
        public: static const int SearchView_commitIcon = 11;
        /**
          <p>
          @attr description
           Boolean that controls whether a view can take focus.  By default the user can not
             move focus to a view; by setting this attribute to true the view is
             allowed to take focus.  This value does not impact the behavior of
             directly calling {@link android.view.View#requestFocus}, which will
             always request focus regardless of this view.  It only impacts where
             focus navigation will try to move focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#focusable}.
          @attr name android:focusable
        */
        public: static const int SearchView_focusable = 0;
        /**
          <p>
          @attr description
           Go button icon 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#goIcon}.
          @attr name android:goIcon
        */
        public: static const int SearchView_goIcon = 8;
        /**
          <p>
          @attr description
           The default state of the SearchView. If true, it will be iconified when not in
             use and expanded when clicked. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#iconifiedByDefault}.
          @attr name android:iconifiedByDefault
        */
        public: static const int SearchView_iconifiedByDefault = 5;
        /**
          <p>
          @attr description
           The IME options to set on the query text field. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0x00000000</td><td> There are no special semantics associated with this editor. </td></tr>
<tr><td><code>actionUnspecified</code></td><td>0x00000000</td><td> There is no specific action associated with this editor, let the
             editor come up with its own if it can.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_NULL}. </td></tr>
<tr><td><code>actionNone</code></td><td>0x00000001</td><td> This editor has no action associated with it.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}. </td></tr>
<tr><td><code>actionGo</code></td><td>0x00000002</td><td> The action key performs a "go"
             operation to take the user to the target of the text they typed.
             Typically used, for example, when entering a URL.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}. </td></tr>
<tr><td><code>actionSearch</code></td><td>0x00000003</td><td> The action key performs a "search"
             operation, taking the user to the results of searching for the text
             the have typed (in whatever context is appropriate).
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}. </td></tr>
<tr><td><code>actionSend</code></td><td>0x00000004</td><td> The action key performs a "send"
             operation, delivering the text to its target.  This is typically used
             when composing a message.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}. </td></tr>
<tr><td><code>actionNext</code></td><td>0x00000005</td><td> The action key performs a "next"
             operation, taking the user to the next field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}. </td></tr>
<tr><td><code>actionDone</code></td><td>0x00000006</td><td> The action key performs a "done"
             operation, closing the soft input method.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}. </td></tr>
<tr><td><code>actionPrevious</code></td><td>0x00000007</td><td> The action key performs a "previous"
             operation, taking the user to the previous field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}. </td></tr>
<tr><td><code>flagNoFullscreen</code></td><td>0x2000000</td><td> Used to request that the IME never go
             into fullscreen mode.  Applications need to be aware that the flag is not
             a guarantee, and not all IMEs will respect it.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. </td></tr>
<tr><td><code>flagNavigatePrevious</code></td><td>0x4000000</td><td> Like flagNavigateNext, but
             specifies there is something interesting that a backward navigation
             can focus on.  If the user selects the IME's facility to backward
             navigate, this will show up in the application as an actionPrevious
             at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. </td></tr>
<tr><td><code>flagNavigateNext</code></td><td>0x8000000</td><td> Used to specify that there is something
             interesting that a forward navigation can focus on. This is like using
             actionNext, except allows the IME to be multiline (with
             an enter key) as well as provide forward navigation.  Note that some
             IMEs may not be able to do this, especially when running on a small
             screen where there is little space.  In that case it does not need to
             present a UI for this option.  Like actionNext, if the
             user selects the IME's facility to forward navigate, this will show up
             in the application at
             {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}. </td></tr>
<tr><td><code>flagNoExtractUi</code></td><td>0x10000000</td><td> Used to specify that the IME does not need
             to show its extracted text UI.  For input methods that may be fullscreen,
             often when in landscape mode, this allows them to be smaller and let part
             of the application be shown behind.  Though there will likely be limited
             access to the application available from the user, it can make the
             experience of a (mostly) fullscreen IME less jarring.  Note that when
             this flag is specified the IME may <em>not</em> be set up to be able
             to display text, so it should only be used in situations where this is
             not needed.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}. </td></tr>
<tr><td><code>flagNoAccessoryAction</code></td><td>0x20000000</td><td> Used in conjunction with a custom action, this indicates that the
             action should not be available as an accessory button when the
             input method is full-screen.
             Note that by setting this flag, there can be cases where the action
             is simply never available to the user.  Setting this generally means
             that you think showing text being edited is more important than the
             action you have supplied.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}. </td></tr>
<tr><td><code>flagNoEnterAction</code></td><td>0x40000000</td><td> Used in conjunction with a custom action,
             this indicates that the action should not be available in-line as
             a replacement for the "enter" key.  Typically this is
             because the action has such a significant impact or is not recoverable
             enough that accidentally hitting it should be avoided, such as sending
             a message.    Note that {@link android.widget.TextView} will
             automatically set this flag for you on multi-line text views.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}. </td></tr>
<tr><td><code>flagForceAscii</code></td><td>0x80000000</td><td> Used to request that the IME should be capable of inputting ASCII
             characters.  The intention of this flag is to ensure that the user
             can type Roman alphabet characters in a {@link android.widget.TextView}
             used for, typically, account ID or password input.  It is expected that IMEs
             normally are able to input ASCII even without being told so (such IMEs
             already respect this flag in a sense), but there could be some cases they
             aren't when, for instance, only non-ASCII input languagaes like Arabic,
             Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
             aware that the flag is not a guarantee, and not all IMEs will respect it.
             However, it is strongly recommended for IME authors to respect this flag
             especially when their IME could end up with a state that has only non-ASCII
             input languages enabled.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeOptions}.
          @attr name android:imeOptions
        */
        public: static const int SearchView_imeOptions = 4;
        /**
          <p>
          @attr description
           The input type to set on the query text field. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> There is no content type.  The text is not editable. </td></tr>
<tr><td><code>text</code></td><td>0x00000001</td><td> Just plain old text.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}. </td></tr>
<tr><td><code>textCapCharacters</code></td><td>0x00001001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of all characters.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}. </td></tr>
<tr><td><code>textCapWords</code></td><td>0x00002001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every word.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}. </td></tr>
<tr><td><code>textCapSentences</code></td><td>0x00004001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every sentence.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}. </td></tr>
<tr><td><code>textAutoCorrect</code></td><td>0x00008001</td><td> Can be combined with <var>text</var> and its variations to
             request auto-correction of text being input.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}. </td></tr>
<tr><td><code>textAutoComplete</code></td><td>0x00010001</td><td> Can be combined with <var>text</var> and its variations to
             specify that this field will be doing its own auto-completion and
             talking with the input method appropriately.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}. </td></tr>
<tr><td><code>textMultiLine</code></td><td>0x00020001</td><td> Can be combined with <var>text</var> and its variations to
             allow multiple lines of text in the field.  If this flag is not set,
             the text field will be constrained to a single line.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}. </td></tr>
<tr><td><code>textImeMultiLine</code></td><td>0x00040001</td><td> Can be combined with <var>text</var> and its variations to
             indicate that though the regular text view should not be multiple
             lines, the IME should provide multiple lines if it can.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}. </td></tr>
<tr><td><code>textNoSuggestions</code></td><td>0x00080001</td><td> Can be combined with <var>text</var> and its variations to
             indicate that the IME should not show any
             dictionary-based word suggestions.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}. </td></tr>
<tr><td><code>textUri</code></td><td>0x00000011</td><td> Text that will be used as a URI.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}. </td></tr>
<tr><td><code>textEmailAddress</code></td><td>0x00000021</td><td> Text that will be used as an e-mail address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}. </td></tr>
<tr><td><code>textEmailSubject</code></td><td>0x00000031</td><td> Text that is being supplied as the subject of an e-mail.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}. </td></tr>
<tr><td><code>textShortMessage</code></td><td>0x00000041</td><td> Text that is the content of a short message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}. </td></tr>
<tr><td><code>textLongMessage</code></td><td>0x00000051</td><td> Text that is the content of a long message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}. </td></tr>
<tr><td><code>textPersonName</code></td><td>0x00000061</td><td> Text that is the name of a person.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}. </td></tr>
<tr><td><code>textPostalAddress</code></td><td>0x00000071</td><td> Text that is being supplied as a postal mailing address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}. </td></tr>
<tr><td><code>textPassword</code></td><td>0x00000081</td><td> Text that is a password.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}. </td></tr>
<tr><td><code>textVisiblePassword</code></td><td>0x00000091</td><td> Text that is a password that should be visible.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}. </td></tr>
<tr><td><code>textWebEditText</code></td><td>0x000000a1</td><td> Text that is being supplied as text in a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}. </td></tr>
<tr><td><code>textFilter</code></td><td>0x000000b1</td><td> Text that is filtering some other data.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}. </td></tr>
<tr><td><code>textPhonetic</code></td><td>0x000000c1</td><td> Text that is for phonetic pronunciation, such as a phonetic name
             field in a contact entry.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}. </td></tr>
<tr><td><code>textWebEmailAddress</code></td><td>0x000000d1</td><td> Text that will be used as an e-mail address on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}. </td></tr>
<tr><td><code>textWebPassword</code></td><td>0x000000e1</td><td> Text that will be used as a password on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}. </td></tr>
<tr><td><code>number</code></td><td>0x00000002</td><td> A numeric only field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}. </td></tr>
<tr><td><code>numberSigned</code></td><td>0x00001002</td><td> Can be combined with <var>number</var> and its other options to
             allow a signed number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}. </td></tr>
<tr><td><code>numberDecimal</code></td><td>0x00002002</td><td> Can be combined with <var>number</var> and its other options to
             allow a decimal (fractional) number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}. </td></tr>
<tr><td><code>numberPassword</code></td><td>0x00000012</td><td> A numeric password field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}. </td></tr>
<tr><td><code>phone</code></td><td>0x00000003</td><td> For entering a phone number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_PHONE}. </td></tr>
<tr><td><code>datetime</code></td><td>0x00000004</td><td> For entering a date and time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}. </td></tr>
<tr><td><code>date</code></td><td>0x00000014</td><td> For entering a date.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}. </td></tr>
<tr><td><code>time</code></td><td>0x00000024</td><td> For entering a time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#inputType}.
          @attr name android:inputType
        */
        public: static const int SearchView_inputType = 3;
        /**
          <p>
          @attr description
           The layout to use for the search view. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout}.
          @attr name android:layout
        */
        public: static const int SearchView_layout = 1;
        /**
          <p>
          @attr description
           An optional maximum width of the SearchView. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxWidth}.
          @attr name android:maxWidth
        */
        public: static const int SearchView_maxWidth = 2;
        /**
          <p>
          @attr description
           Background for the section containing the search query 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#queryBackground}.
          @attr name android:queryBackground
        */
        public: static const int SearchView_queryBackground = 13;
        /**
          <p>
          @attr description
           An optional query hint string to be displayed in the empty query field. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#queryHint}.
          @attr name android:queryHint
        */
        public: static const int SearchView_queryHint = 6;
        /**
          <p>
          @attr description
           Search icon 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchIcon}.
          @attr name android:searchIcon
        */
        public: static const int SearchView_searchIcon = 9;
        /**
          <p>
          @attr description
           Background for the section containing the action (e.g. voice search) 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#submitBackground}.
          @attr name android:submitBackground
        */
        public: static const int SearchView_submitBackground = 14;
        /**
          <p>
          @attr description
           Layout for query suggestion rows 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#suggestionRowLayout}.
          @attr name android:suggestionRowLayout
        */
        public: static const int SearchView_suggestionRowLayout = 12;
        /**
          <p>
          @attr description
           Voice button icon 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#voiceIcon}.
          @attr name android:voiceIcon
        */
        public: static const int SearchView_voiceIcon = 10;
        /**  Searchable activities and applications must provide search configuration information
        in an XML file, typically called searchable.xml.  This file is referenced in your manifest.
        For a more in-depth discussion of search configuration, please refer to
        {@link android.app.SearchManager}. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Searchable_autoUrlDetect android:autoUrlDetect}</code></td><td> If provided and <code>true</code>, URLs entered in the search dialog while searching
             within this activity would be detected and treated as URLs (show a 'go' button in the
             keyboard and invoke the browser directly when user launches the URL instead of passing
             the URL to the activity).</td></tr>
           <tr><td><code>{@link #Searchable_hint android:hint}</code></td><td> If supplied, this string will be displayed as a hint to the user.</td></tr>
           <tr><td><code>{@link #Searchable_icon android:icon}</code></td><td><strong>This is deprecated.</td></tr>
           <tr><td><code>{@link #Searchable_imeOptions android:imeOptions}</code></td><td> Additional features you can enable in an IME associated with an editor
         to improve the integration with your application.</td></tr>
           <tr><td><code>{@link #Searchable_includeInGlobalSearch android:includeInGlobalSearch}</code></td><td> If provided and <code>true</code>, this searchable activity will be
             included in any global lists of search targets.</td></tr>
           <tr><td><code>{@link #Searchable_inputType android:inputType}</code></td><td> The type of data being placed in a text field, used to help an
         input method decide how to let the user enter text.</td></tr>
           <tr><td><code>{@link #Searchable_label android:label}</code></td><td> This is the user-displayed name of the searchable activity.</td></tr>
           <tr><td><code>{@link #Searchable_queryAfterZeroResults android:queryAfterZeroResults}</code></td><td> If provided and <code>true</code>, this searchable activity will be invoked for all
             queries in a particular session.</td></tr>
           <tr><td><code>{@link #Searchable_searchButtonText android:searchButtonText}</code></td><td> If supplied, this string will be displayed as the text of the "Search" button.</td></tr>
           <tr><td><code>{@link #Searchable_searchMode android:searchMode}</code></td><td> Additional features are controlled by mode bits in this field.</td></tr>
           <tr><td><code>{@link #Searchable_searchSettingsDescription android:searchSettingsDescription}</code></td><td> If provided, this string will be used to describe the searchable item in the
             searchable items settings within system search settings.</td></tr>
           <tr><td><code>{@link #Searchable_searchSuggestAuthority android:searchSuggestAuthority}</code></td><td> If provided, this is the trigger indicating that the searchable activity
            provides suggestions as well.</td></tr>
           <tr><td><code>{@link #Searchable_searchSuggestIntentAction android:searchSuggestIntentAction}</code></td><td> If provided, and not overridden by an action in the selected suggestion, this
            string will be placed in the action field of the {@link android.content.Intent Intent}
            when the user clicks a suggestion.</td></tr>
           <tr><td><code>{@link #Searchable_searchSuggestIntentData android:searchSuggestIntentData}</code></td><td> If provided, and not overridden by an action in the selected suggestion, this
            string will be placed in the data field of the {@link android.content.Intent Intent}
            when the user clicks a suggestion.</td></tr>
           <tr><td><code>{@link #Searchable_searchSuggestPath android:searchSuggestPath}</code></td><td> If provided, this will be inserted in the suggestions query Uri, after the authority
            you have provide but before the standard suggestions path.</td></tr>
           <tr><td><code>{@link #Searchable_searchSuggestSelection android:searchSuggestSelection}</code></td><td> If provided, suggestion queries will be passed into your query function
            as the <i>selection</i> parameter.</td></tr>
           <tr><td><code>{@link #Searchable_searchSuggestThreshold android:searchSuggestThreshold}</code></td><td> If provided, this is the minimum number of characters needed to trigger
             search suggestions.</td></tr>
           <tr><td><code>{@link #Searchable_voiceLanguage android:voiceLanguage}</code></td><td> If provided, this specifies the spoken language to be expected, and that it will be
             different than the one set in the {@link java.util.Locale#getDefault()}.</td></tr>
           <tr><td><code>{@link #Searchable_voiceLanguageModel android:voiceLanguageModel}</code></td><td> If provided, this specifies the language model that should be used by the
             voice recognition system.</td></tr>
           <tr><td><code>{@link #Searchable_voiceMaxResults android:voiceMaxResults}</code></td><td> If provided, enforces the maximum number of results to return, including the "best"
             result which will always be provided as the SEARCH intent's primary query.</td></tr>
           <tr><td><code>{@link #Searchable_voicePromptText android:voicePromptText}</code></td><td> If provided, this specifies a prompt that will be displayed during voice input.</td></tr>
           <tr><td><code>{@link #Searchable_voiceSearchMode android:voiceSearchMode}</code></td><td> Voice search features are controlled by mode bits in this field.</td></tr>
           </table>
           @see #Searchable_autoUrlDetect
           @see #Searchable_hint
           @see #Searchable_icon
           @see #Searchable_imeOptions
           @see #Searchable_includeInGlobalSearch
           @see #Searchable_inputType
           @see #Searchable_label
           @see #Searchable_queryAfterZeroResults
           @see #Searchable_searchButtonText
           @see #Searchable_searchMode
           @see #Searchable_searchSettingsDescription
           @see #Searchable_searchSuggestAuthority
           @see #Searchable_searchSuggestIntentAction
           @see #Searchable_searchSuggestIntentData
           @see #Searchable_searchSuggestPath
           @see #Searchable_searchSuggestSelection
           @see #Searchable_searchSuggestThreshold
           @see #Searchable_voiceLanguage
           @see #Searchable_voiceLanguageModel
           @see #Searchable_voiceMaxResults
           @see #Searchable_voicePromptText
           @see #Searchable_voiceSearchMode
         */
        public: static const int Searchable[22];
        /**
          <p>
          @attr description
           If provided and <code>true</code>, URLs entered in the search dialog while searching
             within this activity would be detected and treated as URLs (show a 'go' button in the
             keyboard and invoke the browser directly when user launches the URL instead of passing
             the URL to the activity). If set to <code>false</code> any URLs entered are treated as
             normal query text.
             The default value is <code>false</code>. <i>Optional attribute.</i>. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoUrlDetect}.
          @attr name android:autoUrlDetect
        */
        public: static const int Searchable_autoUrlDetect = 21;
        /**
          <p>
          @attr description
           If supplied, this string will be displayed as a hint to the user.  <i>Optional
            attribute.</i> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#hint}.
          @attr name android:hint
        */
        public: static const int Searchable_hint = 2;
        /**
          <p>
          @attr description
          <strong>This is deprecated.</strong><br/>The default
              application icon is now always used, so this attribute is
              obsolete.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int Searchable_icon = 1;
        /**
          <p>
          @attr description
           Additional features you can enable in an IME associated with an editor
         to improve the integration with your application.  The constants
         here correspond to those defined by
         {@link android.view.inputmethod.EditorInfo#imeOptions}. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0x00000000</td><td> There are no special semantics associated with this editor. </td></tr>
<tr><td><code>actionUnspecified</code></td><td>0x00000000</td><td> There is no specific action associated with this editor, let the
             editor come up with its own if it can.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_NULL}. </td></tr>
<tr><td><code>actionNone</code></td><td>0x00000001</td><td> This editor has no action associated with it.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}. </td></tr>
<tr><td><code>actionGo</code></td><td>0x00000002</td><td> The action key performs a "go"
             operation to take the user to the target of the text they typed.
             Typically used, for example, when entering a URL.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}. </td></tr>
<tr><td><code>actionSearch</code></td><td>0x00000003</td><td> The action key performs a "search"
             operation, taking the user to the results of searching for the text
             the have typed (in whatever context is appropriate).
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}. </td></tr>
<tr><td><code>actionSend</code></td><td>0x00000004</td><td> The action key performs a "send"
             operation, delivering the text to its target.  This is typically used
             when composing a message.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}. </td></tr>
<tr><td><code>actionNext</code></td><td>0x00000005</td><td> The action key performs a "next"
             operation, taking the user to the next field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}. </td></tr>
<tr><td><code>actionDone</code></td><td>0x00000006</td><td> The action key performs a "done"
             operation, closing the soft input method.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}. </td></tr>
<tr><td><code>actionPrevious</code></td><td>0x00000007</td><td> The action key performs a "previous"
             operation, taking the user to the previous field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}. </td></tr>
<tr><td><code>flagNoFullscreen</code></td><td>0x2000000</td><td> Used to request that the IME never go
             into fullscreen mode.  Applications need to be aware that the flag is not
             a guarantee, and not all IMEs will respect it.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. </td></tr>
<tr><td><code>flagNavigatePrevious</code></td><td>0x4000000</td><td> Like flagNavigateNext, but
             specifies there is something interesting that a backward navigation
             can focus on.  If the user selects the IME's facility to backward
             navigate, this will show up in the application as an actionPrevious
             at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. </td></tr>
<tr><td><code>flagNavigateNext</code></td><td>0x8000000</td><td> Used to specify that there is something
             interesting that a forward navigation can focus on. This is like using
             actionNext, except allows the IME to be multiline (with
             an enter key) as well as provide forward navigation.  Note that some
             IMEs may not be able to do this, especially when running on a small
             screen where there is little space.  In that case it does not need to
             present a UI for this option.  Like actionNext, if the
             user selects the IME's facility to forward navigate, this will show up
             in the application at
             {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}. </td></tr>
<tr><td><code>flagNoExtractUi</code></td><td>0x10000000</td><td> Used to specify that the IME does not need
             to show its extracted text UI.  For input methods that may be fullscreen,
             often when in landscape mode, this allows them to be smaller and let part
             of the application be shown behind.  Though there will likely be limited
             access to the application available from the user, it can make the
             experience of a (mostly) fullscreen IME less jarring.  Note that when
             this flag is specified the IME may <em>not</em> be set up to be able
             to display text, so it should only be used in situations where this is
             not needed.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}. </td></tr>
<tr><td><code>flagNoAccessoryAction</code></td><td>0x20000000</td><td> Used in conjunction with a custom action, this indicates that the
             action should not be available as an accessory button when the
             input method is full-screen.
             Note that by setting this flag, there can be cases where the action
             is simply never available to the user.  Setting this generally means
             that you think showing text being edited is more important than the
             action you have supplied.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}. </td></tr>
<tr><td><code>flagNoEnterAction</code></td><td>0x40000000</td><td> Used in conjunction with a custom action,
             this indicates that the action should not be available in-line as
             a replacement for the "enter" key.  Typically this is
             because the action has such a significant impact or is not recoverable
             enough that accidentally hitting it should be avoided, such as sending
             a message.    Note that {@link android.widget.TextView} will
             automatically set this flag for you on multi-line text views.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}. </td></tr>
<tr><td><code>flagForceAscii</code></td><td>0x80000000</td><td> Used to request that the IME should be capable of inputting ASCII
             characters.  The intention of this flag is to ensure that the user
             can type Roman alphabet characters in a {@link android.widget.TextView}
             used for, typically, account ID or password input.  It is expected that IMEs
             normally are able to input ASCII even without being told so (such IMEs
             already respect this flag in a sense), but there could be some cases they
             aren't when, for instance, only non-ASCII input languagaes like Arabic,
             Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
             aware that the flag is not a guarantee, and not all IMEs will respect it.
             However, it is strongly recommended for IME authors to respect this flag
             especially when their IME could end up with a state that has only non-ASCII
             input languages enabled.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeOptions}.
          @attr name android:imeOptions
        */
        public: static const int Searchable_imeOptions = 16;
        /**
          <p>
          @attr description
           If provided and <code>true</code>, this searchable activity will be
             included in any global lists of search targets.
             The default value is <code>false</code>. <i>Optional attribute.</i>. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#includeInGlobalSearch}.
          @attr name android:includeInGlobalSearch
        */
        public: static const int Searchable_includeInGlobalSearch = 18;
        /**
          <p>
          @attr description
           The type of data being placed in a text field, used to help an
         input method decide how to let the user enter text.  The constants
         here correspond to those defined by
         {@link android.text.InputType}.  Generally you can select
         a single value, though some can be combined together as
         indicated.  Setting this attribute to anything besides
         <var>none</var> also implies that the text is editable. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> There is no content type.  The text is not editable. </td></tr>
<tr><td><code>text</code></td><td>0x00000001</td><td> Just plain old text.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}. </td></tr>
<tr><td><code>textCapCharacters</code></td><td>0x00001001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of all characters.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}. </td></tr>
<tr><td><code>textCapWords</code></td><td>0x00002001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every word.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}. </td></tr>
<tr><td><code>textCapSentences</code></td><td>0x00004001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every sentence.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}. </td></tr>
<tr><td><code>textAutoCorrect</code></td><td>0x00008001</td><td> Can be combined with <var>text</var> and its variations to
             request auto-correction of text being input.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}. </td></tr>
<tr><td><code>textAutoComplete</code></td><td>0x00010001</td><td> Can be combined with <var>text</var> and its variations to
             specify that this field will be doing its own auto-completion and
             talking with the input method appropriately.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}. </td></tr>
<tr><td><code>textMultiLine</code></td><td>0x00020001</td><td> Can be combined with <var>text</var> and its variations to
             allow multiple lines of text in the field.  If this flag is not set,
             the text field will be constrained to a single line.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}. </td></tr>
<tr><td><code>textImeMultiLine</code></td><td>0x00040001</td><td> Can be combined with <var>text</var> and its variations to
             indicate that though the regular text view should not be multiple
             lines, the IME should provide multiple lines if it can.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}. </td></tr>
<tr><td><code>textNoSuggestions</code></td><td>0x00080001</td><td> Can be combined with <var>text</var> and its variations to
             indicate that the IME should not show any
             dictionary-based word suggestions.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}. </td></tr>
<tr><td><code>textUri</code></td><td>0x00000011</td><td> Text that will be used as a URI.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}. </td></tr>
<tr><td><code>textEmailAddress</code></td><td>0x00000021</td><td> Text that will be used as an e-mail address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}. </td></tr>
<tr><td><code>textEmailSubject</code></td><td>0x00000031</td><td> Text that is being supplied as the subject of an e-mail.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}. </td></tr>
<tr><td><code>textShortMessage</code></td><td>0x00000041</td><td> Text that is the content of a short message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}. </td></tr>
<tr><td><code>textLongMessage</code></td><td>0x00000051</td><td> Text that is the content of a long message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}. </td></tr>
<tr><td><code>textPersonName</code></td><td>0x00000061</td><td> Text that is the name of a person.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}. </td></tr>
<tr><td><code>textPostalAddress</code></td><td>0x00000071</td><td> Text that is being supplied as a postal mailing address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}. </td></tr>
<tr><td><code>textPassword</code></td><td>0x00000081</td><td> Text that is a password.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}. </td></tr>
<tr><td><code>textVisiblePassword</code></td><td>0x00000091</td><td> Text that is a password that should be visible.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}. </td></tr>
<tr><td><code>textWebEditText</code></td><td>0x000000a1</td><td> Text that is being supplied as text in a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}. </td></tr>
<tr><td><code>textFilter</code></td><td>0x000000b1</td><td> Text that is filtering some other data.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}. </td></tr>
<tr><td><code>textPhonetic</code></td><td>0x000000c1</td><td> Text that is for phonetic pronunciation, such as a phonetic name
             field in a contact entry.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}. </td></tr>
<tr><td><code>textWebEmailAddress</code></td><td>0x000000d1</td><td> Text that will be used as an e-mail address on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}. </td></tr>
<tr><td><code>textWebPassword</code></td><td>0x000000e1</td><td> Text that will be used as a password on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}. </td></tr>
<tr><td><code>number</code></td><td>0x00000002</td><td> A numeric only field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}. </td></tr>
<tr><td><code>numberSigned</code></td><td>0x00001002</td><td> Can be combined with <var>number</var> and its other options to
             allow a signed number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}. </td></tr>
<tr><td><code>numberDecimal</code></td><td>0x00002002</td><td> Can be combined with <var>number</var> and its other options to
             allow a decimal (fractional) number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}. </td></tr>
<tr><td><code>numberPassword</code></td><td>0x00000012</td><td> A numeric password field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}. </td></tr>
<tr><td><code>phone</code></td><td>0x00000003</td><td> For entering a phone number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_PHONE}. </td></tr>
<tr><td><code>datetime</code></td><td>0x00000004</td><td> For entering a date and time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}. </td></tr>
<tr><td><code>date</code></td><td>0x00000014</td><td> For entering a date.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}. </td></tr>
<tr><td><code>time</code></td><td>0x00000024</td><td> For entering a time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#inputType}.
          @attr name android:inputType
        */
        public: static const int Searchable_inputType = 10;
        /**
          <p>
          @attr description
           This is the user-displayed name of the searchable activity.  <i>Required
            attribute.</i> 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int Searchable_label = 0;
        /**
          <p>
          @attr description
           If provided and <code>true</code>, this searchable activity will be invoked for all
             queries in a particular session. If set to <code>false</code> and the activity
             returned zero results for a query, it will not be invoked again in that session for
             supersets of that zero-results query. For example, if the activity returned zero
             results for "bo", it would not be queried again for "bob".
             The default value is <code>false</code>. <i>Optional attribute.</i>. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#queryAfterZeroResults}.
          @attr name android:queryAfterZeroResults
        */
        public: static const int Searchable_queryAfterZeroResults = 19;
        /**
          <p>
          @attr description
           If supplied, this string will be displayed as the text of the "Search" button.
          <i>Optional attribute.</i>
          {@deprecated This will create a non-standard UI appearance, because the search bar UI is
                       changing to use only icons for its buttons.}


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchButtonText}.
          @attr name android:searchButtonText
        */
        public: static const int Searchable_searchButtonText = 9;
        /**
          <p>
          @attr description
           Additional features are controlled by mode bits in this field.  Omitting
            this field, or setting to zero, provides default behavior.  <i>Optional attribute.</i>
        


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>showSearchLabelAsBadge</code></td><td>0x04</td><td> If set, this flag enables the display of the search target (label) within the
               search bar.  If neither bad mode is selected, no badge will be shown. </td></tr>
<tr><td><code>showSearchIconAsBadge</code></td><td>0x08</td><td><strong>This is deprecated.</strong><br/>The default
              application icon is now always used, so this option is
              obsolete.</td></tr>
<tr><td><code>queryRewriteFromData</code></td><td>0x10</td><td> If set, this flag causes the suggestion column SUGGEST_COLUMN_INTENT_DATA to
               be considered as the text for suggestion query rewriting.  This should only
               be used when the values in SUGGEST_COLUMN_INTENT_DATA are suitable for user
               inspection and editing - typically, HTTP/HTTPS Uri's. </td></tr>
<tr><td><code>queryRewriteFromText</code></td><td>0x20</td><td> If set, this flag causes the suggestion column SUGGEST_COLUMN_TEXT_1 to
               be considered as the text for suggestion query rewriting.  This should be used
               for suggestions in which no query text is provided and the SUGGEST_COLUMN_INTENT_DATA
               values are not suitable for user inspection and editing. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchMode}.
          @attr name android:searchMode
        */
        public: static const int Searchable_searchMode = 3;
        /**
          <p>
          @attr description
           If provided, this string will be used to describe the searchable item in the
             searchable items settings within system search settings. <i>Optional
             attribute.</i> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchSettingsDescription}.
          @attr name android:searchSettingsDescription
        */
        public: static const int Searchable_searchSettingsDescription = 20;
        /**
          <p>
          @attr description
           If provided, this is the trigger indicating that the searchable activity
            provides suggestions as well.  The value must be a fully-qualified content provider
            authority (e.g. "com.example.android.apis.SuggestionProvider") and should match the
            "android:authorities" tag in your content provider's manifest entry.  <i>Optional
            attribute.</i> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchSuggestAuthority}.
          @attr name android:searchSuggestAuthority
        */
        public: static const int Searchable_searchSuggestAuthority = 4;
        /**
          <p>
          @attr description
           If provided, and not overridden by an action in the selected suggestion, this
            string will be placed in the action field of the {@link android.content.Intent Intent}
            when the user clicks a suggestion.  <i>Optional attribute.</i> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchSuggestIntentAction}.
          @attr name android:searchSuggestIntentAction
        */
        public: static const int Searchable_searchSuggestIntentAction = 7;
        /**
          <p>
          @attr description
           If provided, and not overridden by an action in the selected suggestion, this
            string will be placed in the data field of the {@link android.content.Intent Intent}
            when the user clicks a suggestion.  <i>Optional attribute.</i> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchSuggestIntentData}.
          @attr name android:searchSuggestIntentData
        */
        public: static const int Searchable_searchSuggestIntentData = 8;
        /**
          <p>
          @attr description
           If provided, this will be inserted in the suggestions query Uri, after the authority
            you have provide but before the standard suggestions path. <i>Optional attribute.</i>
            


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchSuggestPath}.
          @attr name android:searchSuggestPath
        */
        public: static const int Searchable_searchSuggestPath = 5;
        /**
          <p>
          @attr description
           If provided, suggestion queries will be passed into your query function
            as the <i>selection</i> parameter.  Typically this will be a WHERE clause for your
            database, and will contain a single question mark, which represents the actual query
            string that has been typed by the user.  If not provided, then the user query text
            will be appended to the query Uri (after an additional "/".)  <i>Optional
            attribute.</i> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchSuggestSelection}.
          @attr name android:searchSuggestSelection
        */
        public: static const int Searchable_searchSuggestSelection = 6;
        /**
          <p>
          @attr description
           If provided, this is the minimum number of characters needed to trigger
             search suggestions. The default value is 0. <i>Optional attribute.</i> 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchSuggestThreshold}.
          @attr name android:searchSuggestThreshold
        */
        public: static const int Searchable_searchSuggestThreshold = 17;
        /**
          <p>
          @attr description
           If provided, this specifies the spoken language to be expected, and that it will be
             different than the one set in the {@link java.util.Locale#getDefault()}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#voiceLanguage}.
          @attr name android:voiceLanguage
        */
        public: static const int Searchable_voiceLanguage = 14;
        /**
          <p>
          @attr description
           If provided, this specifies the language model that should be used by the
             voice recognition system.  See
             {@link android.speech.RecognizerIntent#EXTRA_LANGUAGE_MODEL } for more information.
             If not provided, the default value
             {@link android.speech.RecognizerIntent#LANGUAGE_MODEL_FREE_FORM } will be used. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#voiceLanguageModel}.
          @attr name android:voiceLanguageModel
        */
        public: static const int Searchable_voiceLanguageModel = 12;
        /**
          <p>
          @attr description
           If provided, enforces the maximum number of results to return, including the "best"
             result which will always be provided as the SEARCH intent's primary query.  Must be one
             or greater.  If not provided, the recognizer will choose how many results to return.
             


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#voiceMaxResults}.
          @attr name android:voiceMaxResults
        */
        public: static const int Searchable_voiceMaxResults = 15;
        /**
          <p>
          @attr description
           If provided, this specifies a prompt that will be displayed during voice input. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#voicePromptText}.
          @attr name android:voicePromptText
        */
        public: static const int Searchable_voicePromptText = 13;
        /**
          <p>
          @attr description
           Voice search features are controlled by mode bits in this field.  Omitting
            this field, or setting to zero, provides default behavior.
            If showVoiceSearchButton is set, then launchWebSearch or launchRecognizer must
            also be set.  <i>Optional attribute.</i>
        


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>showVoiceSearchButton</code></td><td>0x01</td><td> If set, display a voice search button.  This only takes effect if voice search is
               available on the device. </td></tr>
<tr><td><code>launchWebSearch</code></td><td>0x02</td><td> If set, the voice search button will take the user directly to a built-in
               voice web search activity.  Most applications will not use this flag, as it
               will take the user away from the activity in which search was invoked. </td></tr>
<tr><td><code>launchRecognizer</code></td><td>0x04</td><td> If set, the voice search button will take the user directly to a built-in
               voice recording activity.  This activity will prompt the user to speak,
               transcribe the spoken text, and forward the resulting query
               text to the searchable activity, just as if the user had typed it into
               the search UI and clicked the search button. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#voiceSearchMode}.
          @attr name android:voiceSearchMode
        */
        public: static const int Searchable_voiceSearchMode = 11;
        /**  In order to process special action keys during search, you must define them using
            one or more "ActionKey" elements in your Searchable metadata.  For a more in-depth
            discussion of action code handling, please refer to {@link android.app.SearchManager}.
    
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SearchableActionKey_keycode android:keycode}</code></td><td> This attribute denotes the action key you wish to respond to.</td></tr>
           <tr><td><code>{@link #SearchableActionKey_queryActionMsg android:queryActionMsg}</code></td><td> If you wish to handle an action key during normal search query entry, you
            must define an action string here.</td></tr>
           <tr><td><code>{@link #SearchableActionKey_suggestActionMsg android:suggestActionMsg}</code></td><td> If you wish to handle an action key while a suggestion is being displayed <i>and
            selected</i>, there are two ways to handle this.</td></tr>
           <tr><td><code>{@link #SearchableActionKey_suggestActionMsgColumn android:suggestActionMsgColumn}</code></td><td> If you wish to handle an action key while a suggestion is being displayed <i>and
            selected</i>, but you do not wish to enable this action key for every suggestion,
            then you can use this attribute to control it on a suggestion-by-suggestion basis.</td></tr>
           </table>
           @see #SearchableActionKey_keycode
           @see #SearchableActionKey_queryActionMsg
           @see #SearchableActionKey_suggestActionMsg
           @see #SearchableActionKey_suggestActionMsgColumn
         */
        public: static const int SearchableActionKey[4];
        /**
          <p>
          @attr description
           This attribute denotes the action key you wish to respond to.  Note that not
            all action keys are actually supported using this mechanism, as many of them are
            used for typing, navigation, or system functions.  This will be added to the
            {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
            searchable activity.  To examine the key code, use
            {@link android.content.Intent#getIntExtra getIntExtra(SearchManager.ACTION_KEY)}.
            <p>Note, in addition to the keycode, you must also provide one or more of the action
            specifier attributes.  <i>Required attribute.</i> 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>KEYCODE_UNKNOWN</code></td><td>0</td><td></td></tr>
<tr><td><code>KEYCODE_SOFT_LEFT</code></td><td>1</td><td></td></tr>
<tr><td><code>KEYCODE_SOFT_RIGHT</code></td><td>2</td><td></td></tr>
<tr><td><code>KEYCODE_HOME</code></td><td>3</td><td></td></tr>
<tr><td><code>KEYCODE_BACK</code></td><td>4</td><td></td></tr>
<tr><td><code>KEYCODE_CALL</code></td><td>5</td><td></td></tr>
<tr><td><code>KEYCODE_ENDCALL</code></td><td>6</td><td></td></tr>
<tr><td><code>KEYCODE_0</code></td><td>7</td><td></td></tr>
<tr><td><code>KEYCODE_1</code></td><td>8</td><td></td></tr>
<tr><td><code>KEYCODE_2</code></td><td>9</td><td></td></tr>
<tr><td><code>KEYCODE_3</code></td><td>10</td><td></td></tr>
<tr><td><code>KEYCODE_4</code></td><td>11</td><td></td></tr>
<tr><td><code>KEYCODE_5</code></td><td>12</td><td></td></tr>
<tr><td><code>KEYCODE_6</code></td><td>13</td><td></td></tr>
<tr><td><code>KEYCODE_7</code></td><td>14</td><td></td></tr>
<tr><td><code>KEYCODE_8</code></td><td>15</td><td></td></tr>
<tr><td><code>KEYCODE_9</code></td><td>16</td><td></td></tr>
<tr><td><code>KEYCODE_STAR</code></td><td>17</td><td></td></tr>
<tr><td><code>KEYCODE_POUND</code></td><td>18</td><td></td></tr>
<tr><td><code>KEYCODE_DPAD_UP</code></td><td>19</td><td></td></tr>
<tr><td><code>KEYCODE_DPAD_DOWN</code></td><td>20</td><td></td></tr>
<tr><td><code>KEYCODE_DPAD_LEFT</code></td><td>21</td><td></td></tr>
<tr><td><code>KEYCODE_DPAD_RIGHT</code></td><td>22</td><td></td></tr>
<tr><td><code>KEYCODE_DPAD_CENTER</code></td><td>23</td><td></td></tr>
<tr><td><code>KEYCODE_VOLUME_UP</code></td><td>24</td><td></td></tr>
<tr><td><code>KEYCODE_VOLUME_DOWN</code></td><td>25</td><td></td></tr>
<tr><td><code>KEYCODE_POWER</code></td><td>26</td><td></td></tr>
<tr><td><code>KEYCODE_CAMERA</code></td><td>27</td><td></td></tr>
<tr><td><code>KEYCODE_CLEAR</code></td><td>28</td><td></td></tr>
<tr><td><code>KEYCODE_A</code></td><td>29</td><td></td></tr>
<tr><td><code>KEYCODE_B</code></td><td>30</td><td></td></tr>
<tr><td><code>KEYCODE_C</code></td><td>31</td><td></td></tr>
<tr><td><code>KEYCODE_D</code></td><td>32</td><td></td></tr>
<tr><td><code>KEYCODE_E</code></td><td>33</td><td></td></tr>
<tr><td><code>KEYCODE_F</code></td><td>34</td><td></td></tr>
<tr><td><code>KEYCODE_G</code></td><td>35</td><td></td></tr>
<tr><td><code>KEYCODE_H</code></td><td>36</td><td></td></tr>
<tr><td><code>KEYCODE_I</code></td><td>37</td><td></td></tr>
<tr><td><code>KEYCODE_J</code></td><td>38</td><td></td></tr>
<tr><td><code>KEYCODE_K</code></td><td>39</td><td></td></tr>
<tr><td><code>KEYCODE_L</code></td><td>40</td><td></td></tr>
<tr><td><code>KEYCODE_M</code></td><td>41</td><td></td></tr>
<tr><td><code>KEYCODE_N</code></td><td>42</td><td></td></tr>
<tr><td><code>KEYCODE_O</code></td><td>43</td><td></td></tr>
<tr><td><code>KEYCODE_P</code></td><td>44</td><td></td></tr>
<tr><td><code>KEYCODE_Q</code></td><td>45</td><td></td></tr>
<tr><td><code>KEYCODE_R</code></td><td>46</td><td></td></tr>
<tr><td><code>KEYCODE_S</code></td><td>47</td><td></td></tr>
<tr><td><code>KEYCODE_T</code></td><td>48</td><td></td></tr>
<tr><td><code>KEYCODE_U</code></td><td>49</td><td></td></tr>
<tr><td><code>KEYCODE_V</code></td><td>50</td><td></td></tr>
<tr><td><code>KEYCODE_W</code></td><td>51</td><td></td></tr>
<tr><td><code>KEYCODE_X</code></td><td>52</td><td></td></tr>
<tr><td><code>KEYCODE_Y</code></td><td>53</td><td></td></tr>
<tr><td><code>KEYCODE_Z</code></td><td>54</td><td></td></tr>
<tr><td><code>KEYCODE_COMMA</code></td><td>55</td><td></td></tr>
<tr><td><code>KEYCODE_PERIOD</code></td><td>56</td><td></td></tr>
<tr><td><code>KEYCODE_ALT_LEFT</code></td><td>57</td><td></td></tr>
<tr><td><code>KEYCODE_ALT_RIGHT</code></td><td>58</td><td></td></tr>
<tr><td><code>KEYCODE_SHIFT_LEFT</code></td><td>59</td><td></td></tr>
<tr><td><code>KEYCODE_SHIFT_RIGHT</code></td><td>60</td><td></td></tr>
<tr><td><code>KEYCODE_TAB</code></td><td>61</td><td></td></tr>
<tr><td><code>KEYCODE_SPACE</code></td><td>62</td><td></td></tr>
<tr><td><code>KEYCODE_SYM</code></td><td>63</td><td></td></tr>
<tr><td><code>KEYCODE_EXPLORER</code></td><td>64</td><td></td></tr>
<tr><td><code>KEYCODE_ENVELOPE</code></td><td>65</td><td></td></tr>
<tr><td><code>KEYCODE_ENTER</code></td><td>66</td><td></td></tr>
<tr><td><code>KEYCODE_DEL</code></td><td>67</td><td></td></tr>
<tr><td><code>KEYCODE_GRAVE</code></td><td>68</td><td></td></tr>
<tr><td><code>KEYCODE_MINUS</code></td><td>69</td><td></td></tr>
<tr><td><code>KEYCODE_EQUALS</code></td><td>70</td><td></td></tr>
<tr><td><code>KEYCODE_LEFT_BRACKET</code></td><td>71</td><td></td></tr>
<tr><td><code>KEYCODE_RIGHT_BRACKET</code></td><td>72</td><td></td></tr>
<tr><td><code>KEYCODE_BACKSLASH</code></td><td>73</td><td></td></tr>
<tr><td><code>KEYCODE_SEMICOLON</code></td><td>74</td><td></td></tr>
<tr><td><code>KEYCODE_APOSTROPHE</code></td><td>75</td><td></td></tr>
<tr><td><code>KEYCODE_SLASH</code></td><td>76</td><td></td></tr>
<tr><td><code>KEYCODE_AT</code></td><td>77</td><td></td></tr>
<tr><td><code>KEYCODE_NUM</code></td><td>78</td><td></td></tr>
<tr><td><code>KEYCODE_HEADSETHOOK</code></td><td>79</td><td></td></tr>
<tr><td><code>KEYCODE_FOCUS</code></td><td>80</td><td></td></tr>
<tr><td><code>KEYCODE_PLUS</code></td><td>81</td><td></td></tr>
<tr><td><code>KEYCODE_MENU</code></td><td>82</td><td></td></tr>
<tr><td><code>KEYCODE_NOTIFICATION</code></td><td>83</td><td></td></tr>
<tr><td><code>KEYCODE_SEARCH</code></td><td>84</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_PLAY_PAUSE</code></td><td>85</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_STOP</code></td><td>86</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_NEXT</code></td><td>87</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_PREVIOUS</code></td><td>88</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_REWIND</code></td><td>89</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_FAST_FORWARD</code></td><td>90</td><td></td></tr>
<tr><td><code>KEYCODE_MUTE</code></td><td>91</td><td></td></tr>
<tr><td><code>KEYCODE_PAGE_UP</code></td><td>92</td><td></td></tr>
<tr><td><code>KEYCODE_PAGE_DOWN</code></td><td>93</td><td></td></tr>
<tr><td><code>KEYCODE_PICTSYMBOLS</code></td><td>94</td><td></td></tr>
<tr><td><code>KEYCODE_SWITCH_CHARSET</code></td><td>95</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_A</code></td><td>96</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_B</code></td><td>97</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_C</code></td><td>98</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_X</code></td><td>99</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_Y</code></td><td>100</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_Z</code></td><td>101</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_L1</code></td><td>102</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_R1</code></td><td>103</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_L2</code></td><td>104</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_R2</code></td><td>105</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_THUMBL</code></td><td>106</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_THUMBR</code></td><td>107</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_START</code></td><td>108</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_SELECT</code></td><td>109</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_MODE</code></td><td>110</td><td></td></tr>
<tr><td><code>KEYCODE_ESCAPE</code></td><td>111</td><td></td></tr>
<tr><td><code>KEYCODE_FORWARD_DEL</code></td><td>112</td><td></td></tr>
<tr><td><code>KEYCODE_CTRL_LEFT</code></td><td>113</td><td></td></tr>
<tr><td><code>KEYCODE_CTRL_RIGHT</code></td><td>114</td><td></td></tr>
<tr><td><code>KEYCODE_CAPS_LOCK</code></td><td>115</td><td></td></tr>
<tr><td><code>KEYCODE_SCROLL_LOCK</code></td><td>116</td><td></td></tr>
<tr><td><code>KEYCODE_META_LEFT</code></td><td>117</td><td></td></tr>
<tr><td><code>KEYCODE_META_RIGHT</code></td><td>118</td><td></td></tr>
<tr><td><code>KEYCODE_FUNCTION</code></td><td>119</td><td></td></tr>
<tr><td><code>KEYCODE_SYSRQ</code></td><td>120</td><td></td></tr>
<tr><td><code>KEYCODE_BREAK</code></td><td>121</td><td></td></tr>
<tr><td><code>KEYCODE_MOVE_HOME</code></td><td>122</td><td></td></tr>
<tr><td><code>KEYCODE_MOVE_END</code></td><td>123</td><td></td></tr>
<tr><td><code>KEYCODE_INSERT</code></td><td>124</td><td></td></tr>
<tr><td><code>KEYCODE_FORWARD</code></td><td>125</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_PLAY</code></td><td>126</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_PAUSE</code></td><td>127</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_CLOSE</code></td><td>128</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_EJECT</code></td><td>129</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_RECORD</code></td><td>130</td><td></td></tr>
<tr><td><code>KEYCODE_F1</code></td><td>131</td><td></td></tr>
<tr><td><code>KEYCODE_F2</code></td><td>132</td><td></td></tr>
<tr><td><code>KEYCODE_F3</code></td><td>133</td><td></td></tr>
<tr><td><code>KEYCODE_F4</code></td><td>134</td><td></td></tr>
<tr><td><code>KEYCODE_F5</code></td><td>135</td><td></td></tr>
<tr><td><code>KEYCODE_F6</code></td><td>136</td><td></td></tr>
<tr><td><code>KEYCODE_F7</code></td><td>137</td><td></td></tr>
<tr><td><code>KEYCODE_F8</code></td><td>138</td><td></td></tr>
<tr><td><code>KEYCODE_F9</code></td><td>139</td><td></td></tr>
<tr><td><code>KEYCODE_F10</code></td><td>140</td><td></td></tr>
<tr><td><code>KEYCODE_F11</code></td><td>141</td><td></td></tr>
<tr><td><code>KEYCODE_F12</code></td><td>142</td><td></td></tr>
<tr><td><code>KEYCODE_NUM_LOCK</code></td><td>143</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_0</code></td><td>144</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_1</code></td><td>145</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_2</code></td><td>146</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_3</code></td><td>147</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_4</code></td><td>148</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_5</code></td><td>149</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_6</code></td><td>150</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_7</code></td><td>151</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_8</code></td><td>152</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_9</code></td><td>153</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_DIVIDE</code></td><td>154</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_MULTIPLY</code></td><td>155</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_SUBTRACT</code></td><td>156</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_ADD</code></td><td>157</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_DOT</code></td><td>158</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_COMMA</code></td><td>159</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_ENTER</code></td><td>160</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_EQUALS</code></td><td>161</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_LEFT_PAREN</code></td><td>162</td><td></td></tr>
<tr><td><code>KEYCODE_NUMPAD_RIGHT_PAREN</code></td><td>163</td><td></td></tr>
<tr><td><code>KEYCODE_VOLUME_MUTE</code></td><td>164</td><td></td></tr>
<tr><td><code>KEYCODE_INFO</code></td><td>165</td><td></td></tr>
<tr><td><code>KEYCODE_CHANNEL_UP</code></td><td>166</td><td></td></tr>
<tr><td><code>KEYCODE_CHANNEL_DOWN</code></td><td>167</td><td></td></tr>
<tr><td><code>KEYCODE_ZOOM_IN</code></td><td>168</td><td></td></tr>
<tr><td><code>KEYCODE_ZOOM_OUT</code></td><td>169</td><td></td></tr>
<tr><td><code>KEYCODE_TV</code></td><td>170</td><td></td></tr>
<tr><td><code>KEYCODE_WINDOW</code></td><td>171</td><td></td></tr>
<tr><td><code>KEYCODE_GUIDE</code></td><td>172</td><td></td></tr>
<tr><td><code>KEYCODE_DVR</code></td><td>173</td><td></td></tr>
<tr><td><code>KEYCODE_BOOKMARK</code></td><td>174</td><td></td></tr>
<tr><td><code>KEYCODE_CAPTIONS</code></td><td>175</td><td></td></tr>
<tr><td><code>KEYCODE_SETTINGS</code></td><td>176</td><td></td></tr>
<tr><td><code>KEYCODE_TV_POWER</code></td><td>177</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT</code></td><td>178</td><td></td></tr>
<tr><td><code>KEYCODE_STB_POWER</code></td><td>179</td><td></td></tr>
<tr><td><code>KEYCODE_STB_INPUT</code></td><td>180</td><td></td></tr>
<tr><td><code>KEYCODE_AVR_POWER</code></td><td>181</td><td></td></tr>
<tr><td><code>KEYCODE_AVR_INPUT</code></td><td>182</td><td></td></tr>
<tr><td><code>KEYCODE_PROG_GRED</code></td><td>183</td><td></td></tr>
<tr><td><code>KEYCODE_PROG_GREEN</code></td><td>184</td><td></td></tr>
<tr><td><code>KEYCODE_PROG_YELLOW</code></td><td>185</td><td></td></tr>
<tr><td><code>KEYCODE_PROG_BLUE</code></td><td>186</td><td></td></tr>
<tr><td><code>KEYCODE_APP_SWITCH</code></td><td>187</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_1</code></td><td>188</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_2</code></td><td>189</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_3</code></td><td>190</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_4</code></td><td>191</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_5</code></td><td>192</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_6</code></td><td>193</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_7</code></td><td>194</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_8</code></td><td>195</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_9</code></td><td>196</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_10</code></td><td>197</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_11</code></td><td>198</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_12</code></td><td>199</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_13</code></td><td>200</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_14</code></td><td>201</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_15</code></td><td>202</td><td></td></tr>
<tr><td><code>KEYCODE_BUTTON_16</code></td><td>203</td><td></td></tr>
<tr><td><code>KEYCODE_LANGUAGE_SWITCH</code></td><td>204</td><td></td></tr>
<tr><td><code>KEYCODE_MANNER_MODE</code></td><td>205</td><td></td></tr>
<tr><td><code>KEYCODE_3D_MODE</code></td><td>206</td><td></td></tr>
<tr><td><code>KEYCODE_CONTACTS</code></td><td>207</td><td></td></tr>
<tr><td><code>KEYCODE_CALENDAR</code></td><td>208</td><td></td></tr>
<tr><td><code>KEYCODE_MUSIC</code></td><td>209</td><td></td></tr>
<tr><td><code>KEYCODE_CALCULATOR</code></td><td>210</td><td></td></tr>
<tr><td><code>KEYCODE_ZENKAKU_HANKAKU</code></td><td>211</td><td></td></tr>
<tr><td><code>KEYCODE_EISU</code></td><td>212</td><td></td></tr>
<tr><td><code>KEYCODE_MUHENKAN</code></td><td>213</td><td></td></tr>
<tr><td><code>KEYCODE_HENKAN</code></td><td>214</td><td></td></tr>
<tr><td><code>KEYCODE_KATAKANA_HIRAGANA</code></td><td>215</td><td></td></tr>
<tr><td><code>KEYCODE_YEN</code></td><td>216</td><td></td></tr>
<tr><td><code>KEYCODE_RO</code></td><td>217</td><td></td></tr>
<tr><td><code>KEYCODE_KANA</code></td><td>218</td><td></td></tr>
<tr><td><code>KEYCODE_ASSIST</code></td><td>219</td><td></td></tr>
<tr><td><code>KEYCODE_BRIGHTNESS_DOWN</code></td><td>220</td><td></td></tr>
<tr><td><code>KEYCODE_BRIGHTNESS_UP</code></td><td>221</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_AUDIO_TRACK</code></td><td>222</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_SLEEP</code></td><td>223</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_WAKEUP</code></td><td>224</td><td></td></tr>
<tr><td><code>KEYCODE_PAIRING</code></td><td>225</td><td></td></tr>
<tr><td><code>KEYCODE_MEDIA_TOP_MENU</code></td><td>226</td><td></td></tr>
<tr><td><code>KEYCODE_11</code></td><td>227</td><td></td></tr>
<tr><td><code>KEYCODE_12</code></td><td>228</td><td></td></tr>
<tr><td><code>KEYCODE_LAST_CHANNEL</code></td><td>229</td><td></td></tr>
<tr><td><code>KEYCODE_TV_DATA_SERVICE</code></td><td>230</td><td></td></tr>
<tr><td><code>KEYCODE_VOICE_ASSIST</code></td><td>231</td><td></td></tr>
<tr><td><code>KEYCODE_TV_RADIO_SERVICE</code></td><td>232</td><td></td></tr>
<tr><td><code>KEYCODE_TV_TELETEXT</code></td><td>233</td><td></td></tr>
<tr><td><code>KEYCODE_TV_NUMBER_ENTRY</code></td><td>234</td><td></td></tr>
<tr><td><code>KEYCODE_TV_TERRESTRIAL_ANALOG</code></td><td>235</td><td></td></tr>
<tr><td><code>KEYCODE_TV_TERRESTRIAL_DIGITAL</code></td><td>236</td><td></td></tr>
<tr><td><code>KEYCODE_TV_SATELLITE</code></td><td>237</td><td></td></tr>
<tr><td><code>KEYCODE_TV_SATELLITE_BS</code></td><td>238</td><td></td></tr>
<tr><td><code>KEYCODE_TV_SATELLITE_CS</code></td><td>239</td><td></td></tr>
<tr><td><code>KEYCODE_TV_SATELLITE_SERVICE</code></td><td>240</td><td></td></tr>
<tr><td><code>KEYCODE_TV_NETWORK</code></td><td>241</td><td></td></tr>
<tr><td><code>KEYCODE_TV_ANTENNA_CABLE</code></td><td>242</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_HDMI_1</code></td><td>243</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_HDMI_2</code></td><td>244</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_HDMI_3</code></td><td>245</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_HDMI_4</code></td><td>246</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_COMPOSITE_1</code></td><td>247</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_COMPOSITE_2</code></td><td>248</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_COMPONENT_1</code></td><td>249</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_COMPONENT_2</code></td><td>250</td><td></td></tr>
<tr><td><code>KEYCODE_TV_INPUT_VGA_1</code></td><td>251</td><td></td></tr>
<tr><td><code>KEYCODE_TV_AUDIO_DESCRIPTION</code></td><td>252</td><td></td></tr>
<tr><td><code>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP</code></td><td>253</td><td></td></tr>
<tr><td><code>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN</code></td><td>254</td><td></td></tr>
<tr><td><code>KEYCODE_TV_ZOOM_MODE</code></td><td>255</td><td></td></tr>
<tr><td><code>KEYCODE_TV_CONTENTS_MENU</code></td><td>256</td><td></td></tr>
<tr><td><code>KEYCODE_TV_MEDIA_CONTEXT_MENU</code></td><td>257</td><td></td></tr>
<tr><td><code>KEYCODE_TV_TIMER_PROGRAMMING</code></td><td>258</td><td></td></tr>
<tr><td><code>KEYCODE_HELP</code></td><td>259</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keycode}.
          @attr name android:keycode
        */
        public: static const int SearchableActionKey_keycode = 0;
        /**
          <p>
          @attr description
           If you wish to handle an action key during normal search query entry, you
            must define an action string here.  This will be added to the
            {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
            searchable activity.  To examine the string, use
            {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
            <i>Optional attribute.</i> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#queryActionMsg}.
          @attr name android:queryActionMsg
        */
        public: static const int SearchableActionKey_queryActionMsg = 1;
        /**
          <p>
          @attr description
           If you wish to handle an action key while a suggestion is being displayed <i>and
            selected</i>, there are two ways to handle this.  If <i>all</i> of your suggestions
            can handle the action key, you can simply define the action message using this
            attribute.  This will be added to the
            {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
            searchable activity.  To examine the string, use
            {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
            <i>Optional attribute.</i> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#suggestActionMsg}.
          @attr name android:suggestActionMsg
        */
        public: static const int SearchableActionKey_suggestActionMsg = 2;
        /**
          <p>
          @attr description
           If you wish to handle an action key while a suggestion is being displayed <i>and
            selected</i>, but you do not wish to enable this action key for every suggestion,
            then you can use this attribute to control it on a suggestion-by-suggestion basis.
            First, you must define a column (and name it here) where your suggestions will include
            the action string.  Then, in your content provider, you must provide this column, and
            when desired, provide data in this column.
            The search manager will look at your suggestion cursor, using the string
            provided here in order to select a column, and will use that to select a string from
            the cursor.  That string will be added to the
            {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to
            your searchable activity.  To examine the string, use
            {@link android.content.Intent#getStringExtra
            getStringExtra(SearchManager.ACTION_MSG)}.  <i>If the data does not exist for the
            selection suggestion, the action key will be ignored.</i><i>Optional attribute.</i> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#suggestActionMsgColumn}.
          @attr name android:suggestActionMsgColumn
        */
        public: static const int SearchableActionKey_suggestActionMsgColumn = 3;
        /** Attributes that can be used with a SeekBar.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SeekBar_splitTrack android:splitTrack}</code></td><td> Whether to split the track and leave a gap for the thumb drawable.</td></tr>
           <tr><td><code>{@link #SeekBar_thumb android:thumb}</code></td><td> Draws the thumb on a seekbar.</td></tr>
           <tr><td><code>{@link #SeekBar_thumbOffset android:thumbOffset}</code></td><td> An offset for the thumb that allows it to extend out of the range of the track.</td></tr>
           <tr><td><code>{@link #SeekBar_thumbTint android:thumbTint}</code></td><td> Tint to apply to the button graphic.</td></tr>
           <tr><td><code>{@link #SeekBar_thumbTintMode android:thumbTintMode}</code></td><td> Blending mode used to apply the button graphic tint.</td></tr>
           </table>
           @see #SeekBar_splitTrack
           @see #SeekBar_thumb
           @see #SeekBar_thumbOffset
           @see #SeekBar_thumbTint
           @see #SeekBar_thumbTintMode
         */
        public: static const int SeekBar[5];
        /**
          <p>
          @attr description
           Whether to split the track and leave a gap for the thumb drawable. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#splitTrack}.
          @attr name android:splitTrack
        */
        public: static const int SeekBar_splitTrack = 2;
        /**
          <p>
          @attr description
           Draws the thumb on a seekbar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#thumb}.
          @attr name android:thumb
        */
        public: static const int SeekBar_thumb = 0;
        /**
          <p>
          @attr description
           An offset for the thumb that allows it to extend out of the range of the track. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#thumbOffset}.
          @attr name android:thumbOffset
        */
        public: static const int SeekBar_thumbOffset = 1;
        /**
          <p>
          @attr description
           Tint to apply to the button graphic. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#thumbTint}.
          @attr name android:thumbTint
        */
        public: static const int SeekBar_thumbTint = 3;
        /**
          <p>
          @attr description
           Blending mode used to apply the button graphic tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#thumbTintMode}.
          @attr name android:thumbTintMode
        */
        public: static const int SeekBar_thumbTintMode = 4;
        /** Attributes that can be used with a SeekBarPreference.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SeekBarPreference_layout android:layout}</code></td><td> Supply an identifier for the layout resource to inflate when the ViewStub
             becomes visible or when forced to do so.</td></tr>
           </table>
           @see #SeekBarPreference_layout
         */
        public: static const int SeekBarPreference[1];
        /**
          <p>
          @attr description
           Supply an identifier for the layout resource to inflate when the ViewStub
             becomes visible or when forced to do so. The layout resource must be a
             valid reference to a layout. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout}.
          @attr name android:layout
        */
        public: static const int SeekBarPreference_layout = 0;
        /** Attributes that can be used with a SelectionModeDrawables.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SelectionModeDrawables_actionModeCopyDrawable android:actionModeCopyDrawable}</code></td><td> Drawable to use for the Copy action button in Contextual Action Bar </td></tr>
           <tr><td><code>{@link #SelectionModeDrawables_actionModeCutDrawable android:actionModeCutDrawable}</code></td><td> Drawable to use for the Cut action button in Contextual Action Bar </td></tr>
           <tr><td><code>{@link #SelectionModeDrawables_actionModePasteDrawable android:actionModePasteDrawable}</code></td><td> Drawable to use for the Paste action button in Contextual Action Bar </td></tr>
           <tr><td><code>{@link #SelectionModeDrawables_actionModeSelectAllDrawable android:actionModeSelectAllDrawable}</code></td><td> Drawable to use for the Select all action button in Contextual Action Bar </td></tr>
           </table>
           @see #SelectionModeDrawables_actionModeCopyDrawable
           @see #SelectionModeDrawables_actionModeCutDrawable
           @see #SelectionModeDrawables_actionModePasteDrawable
           @see #SelectionModeDrawables_actionModeSelectAllDrawable
         */
        public: static const int SelectionModeDrawables[4];
        /**
          <p>
          @attr description
           Drawable to use for the Copy action button in Contextual Action Bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeCopyDrawable}.
          @attr name android:actionModeCopyDrawable
        */
        public: static const int SelectionModeDrawables_actionModeCopyDrawable = 1;
        /**
          <p>
          @attr description
           Drawable to use for the Cut action button in Contextual Action Bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeCutDrawable}.
          @attr name android:actionModeCutDrawable
        */
        public: static const int SelectionModeDrawables_actionModeCutDrawable = 0;
        /**
          <p>
          @attr description
           Drawable to use for the Paste action button in Contextual Action Bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModePasteDrawable}.
          @attr name android:actionModePasteDrawable
        */
        public: static const int SelectionModeDrawables_actionModePasteDrawable = 2;
        /**
          <p>
          @attr description
           Drawable to use for the Select all action button in Contextual Action Bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeSelectAllDrawable}.
          @attr name android:actionModeSelectAllDrawable
        */
        public: static const int SelectionModeDrawables_actionModeSelectAllDrawable = 3;
        /**  Use <code>injected-location-setting</code> as the root tag of the XML resource that
         describes an injected "Location services" setting. Note that the status value (subtitle)
         for the setting is specified dynamically by a subclass of SettingInjectorService.
     
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SettingInjectorService_icon android:icon}</code></td><td> The icon for the preference, should refer to all apps covered by the setting.</td></tr>
           <tr><td><code>{@link #SettingInjectorService_settingsActivity android:settingsActivity}</code></td><td> The activity to launch when the setting is clicked on.</td></tr>
           <tr><td><code>{@link #SettingInjectorService_title android:title}</code></td><td> The title for the preference.</td></tr>
           </table>
           @see #SettingInjectorService_icon
           @see #SettingInjectorService_settingsActivity
           @see #SettingInjectorService_title
         */
        public: static const int SettingInjectorService[3];
        /**
          <p>
          @attr description
           The icon for the preference, should refer to all apps covered by the setting. Typically
             a generic icon for the developer. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#icon}.
          @attr name android:icon
        */
        public: static const int SettingInjectorService_icon = 0;
        /**
          <p>
          @attr description
           The activity to launch when the setting is clicked on. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int SettingInjectorService_settingsActivity = 2;
        /**
          <p>
          @attr description
           The title for the preference. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public: static const int SettingInjectorService_title = 1;
        /**  Drawable used to draw shapes. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ShapeDrawable_color android:color}</code></td><td> Defines the color of the shape.</td></tr>
           <tr><td><code>{@link #ShapeDrawable_dither android:dither}</code></td><td> Enables or disables dithering.</td></tr>
           <tr><td><code>{@link #ShapeDrawable_height android:height}</code></td><td> Defines the height of the shape.</td></tr>
           <tr><td><code>{@link #ShapeDrawable_tint android:tint}</code></td><td> If set, specifies the color to apply to the drawable as a tint.</td></tr>
           <tr><td><code>{@link #ShapeDrawable_tintMode android:tintMode}</code></td><td> When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
           <tr><td><code>{@link #ShapeDrawable_width android:width}</code></td><td> Defines the width of the shape.</td></tr>
           </table>
           @see #ShapeDrawable_color
           @see #ShapeDrawable_dither
           @see #ShapeDrawable_height
           @see #ShapeDrawable_tint
           @see #ShapeDrawable_tintMode
           @see #ShapeDrawable_width
         */
        public: static const int ShapeDrawable[6];
        /**
          <p>
          @attr description
           Defines the color of the shape. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#color}.
          @attr name android:color
        */
        public: static const int ShapeDrawable_color = 4;
        /**
          <p>
          @attr description
           Enables or disables dithering. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dither}.
          @attr name android:dither
        */
        public: static const int ShapeDrawable_dither = 0;
        /**
          <p>
          @attr description
           Defines the height of the shape. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#height}.
          @attr name android:height
        */
        public: static const int ShapeDrawable_height = 2;
        /**
          <p>
          @attr description
           If set, specifies the color to apply to the drawable as a tint. By default,
             no tint is applied. May be a color state list. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tint}.
          @attr name android:tint
        */
        public: static const int ShapeDrawable_tint = 1;
        /**
          <p>
          @attr description
           When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tintMode}.
          @attr name android:tintMode
        */
        public: static const int ShapeDrawable_tintMode = 5;
        /**
          <p>
          @attr description
           Defines the width of the shape. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#width}.
          @attr name android:width
        */
        public: static const int ShapeDrawable_width = 3;
        /**  Defines the padding of a ShapeDrawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ShapeDrawablePadding_bottom android:bottom}</code></td><td> Bottom padding.</td></tr>
           <tr><td><code>{@link #ShapeDrawablePadding_left android:left}</code></td><td> Left padding.</td></tr>
           <tr><td><code>{@link #ShapeDrawablePadding_right android:right}</code></td><td> Right padding.</td></tr>
           <tr><td><code>{@link #ShapeDrawablePadding_top android:top}</code></td><td> Top padding.</td></tr>
           </table>
           @see #ShapeDrawablePadding_bottom
           @see #ShapeDrawablePadding_left
           @see #ShapeDrawablePadding_right
           @see #ShapeDrawablePadding_top
         */
        public: static const int ShapeDrawablePadding[4];
        /**
          <p>
          @attr description
           Bottom padding. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#bottom}.
          @attr name android:bottom
        */
        public: static const int ShapeDrawablePadding_bottom = 3;
        /**
          <p>
          @attr description
           Left padding. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#left}.
          @attr name android:left
        */
        public: static const int ShapeDrawablePadding_left = 0;
        /**
          <p>
          @attr description
           Right padding. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#right}.
          @attr name android:right
        */
        public: static const int ShapeDrawablePadding_right = 2;
        /**
          <p>
          @attr description
           Top padding. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#top}.
          @attr name android:top
        */
        public: static const int ShapeDrawablePadding_top = 1;
        /** Attributes that can be used with a SizeAdaptiveLayout.
         */
        public: static const int SizeAdaptiveLayout[0];
        /** Attributes that can be used with a SizeAdaptiveLayout_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SizeAdaptiveLayout_Layout_layout_maxHeight android:layout_maxHeight}</code></td><td> The maximum valid height for this item.</td></tr>
           <tr><td><code>{@link #SizeAdaptiveLayout_Layout_layout_minHeight android:layout_minHeight}</code></td><td> The minimum valid height for this item.</td></tr>
           </table>
           @see #SizeAdaptiveLayout_Layout_layout_maxHeight
           @see #SizeAdaptiveLayout_Layout_layout_minHeight
         */
        public: static const int SizeAdaptiveLayout_Layout[2];
        /**
          <p>
          @attr description
           The maximum valid height for this item. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>unbounded</code></td><td>-1</td><td> Indicates that the view may be resized arbitrarily large. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:layout_maxHeight
        */
        public: static const int SizeAdaptiveLayout_Layout_layout_maxHeight = 0;
        /**
          <p>
          @attr description
           The minimum valid height for this item. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:layout_minHeight
        */
        public: static const int SizeAdaptiveLayout_Layout_layout_minHeight = 1;
        /**  Use <code>slide</code>as the root tag of the XML resource that
         describes a {@link android.transition.Slide Slide} transition.
         The attributes of the {@link android.R.styleable#Transition Transition}
         resource are available in addition to the specific attributes of Slide
         described here. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Slide_slideEdge android:slideEdge}</code></td><td></td></tr>
           </table>
           @see #Slide_slideEdge
         */
        public: static const int Slide[1];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#slideEdge}
          attribute's value can be found in the {@link #Slide} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Slide to and from the left edge of the Scene. </td></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Slide to and from the top edge of the Scene. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Slide to and from the right edge of the Scene. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Slide to and from the bottom edge of the Scene. </td></tr>
</table>
          @attr name android:slideEdge
        */
        public: static const int Slide_slideEdge = 0;
        /** Attributes that can be used with a SlidingChallengeLayout_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SlidingChallengeLayout_Layout_layout_childType android:layout_childType}</code></td><td> Some child types have special behavior.</td></tr>
           <tr><td><code>{@link #SlidingChallengeLayout_Layout_layout_maxHeight android:layout_maxHeight}</code></td><td> The maximum valid height for this item.</td></tr>
           </table>
           @see #SlidingChallengeLayout_Layout_layout_childType
           @see #SlidingChallengeLayout_Layout_layout_maxHeight
         */
        public: static const int SlidingChallengeLayout_Layout[2];
        /**
          <p>
          @attr description
           Some child types have special behavior. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> No special behavior. Layout will proceed as normal. </td></tr>
<tr><td><code>widget</code></td><td>1</td><td> Widget container.
             This will be resized in response to certain events. </td></tr>
<tr><td><code>challenge</code></td><td>2</td><td> Security challenge container.
             This will be dismissed/shown in response to certain events,
             possibly obscuring widget elements. </td></tr>
<tr><td><code>userSwitcher</code></td><td>3</td><td> User switcher.
             This will consume space from the total layout area. </td></tr>
<tr><td><code>scrim</code></td><td>4</td><td> Scrim. This will block access to child views that
             come before it in the child list in bouncer mode. </td></tr>
<tr><td><code>widgets</code></td><td>5</td><td> The home for widgets. All widgets will be descendents of this. </td></tr>
<tr><td><code>expandChallengeHandle</code></td><td>6</td><td> This is a handle that is used for expanding the
             security challenge container when it is collapsed. </td></tr>
<tr><td><code>pageDeleteDropTarget</code></td><td>7</td><td> Delete drop target.  This will be the drop target to delete pages. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:layout_childType
        */
        public: static const int SlidingChallengeLayout_Layout_layout_childType = 1;
        /**
          <p>
          @attr description
           The maximum valid height for this item. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>unbounded</code></td><td>-1</td><td> Indicates that the view may be resized arbitrarily large. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:layout_maxHeight
        */
        public: static const int SlidingChallengeLayout_Layout_layout_maxHeight = 0;
        /**  SlidingDrawer specific attributes. These attributes are used to configure
         a SlidingDrawer from XML. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SlidingDrawer_allowSingleTap android:allowSingleTap}</code></td><td> Indicates whether the drawer can be opened/closed by a single tap
             on the handle.</td></tr>
           <tr><td><code>{@link #SlidingDrawer_animateOnClick android:animateOnClick}</code></td><td> Indicates whether the drawer should be opened/closed with an animation
             when the user clicks the handle.</td></tr>
           <tr><td><code>{@link #SlidingDrawer_bottomOffset android:bottomOffset}</code></td><td> Extra offset for the handle at the bottom of the SlidingDrawer.</td></tr>
           <tr><td><code>{@link #SlidingDrawer_content android:content}</code></td><td> Identifier for the child that represents the drawer's content.</td></tr>
           <tr><td><code>{@link #SlidingDrawer_handle android:handle}</code></td><td> Identifier for the child that represents the drawer's handle.</td></tr>
           <tr><td><code>{@link #SlidingDrawer_orientation android:orientation}</code></td><td> Orientation of the SlidingDrawer.</td></tr>
           <tr><td><code>{@link #SlidingDrawer_topOffset android:topOffset}</code></td><td> Extra offset for the handle at the top of the SlidingDrawer.</td></tr>
           </table>
           @see #SlidingDrawer_allowSingleTap
           @see #SlidingDrawer_animateOnClick
           @see #SlidingDrawer_bottomOffset
           @see #SlidingDrawer_content
           @see #SlidingDrawer_handle
           @see #SlidingDrawer_orientation
           @see #SlidingDrawer_topOffset
         */
        public: static const int SlidingDrawer[7];
        /**
          <p>
          @attr description
           Indicates whether the drawer can be opened/closed by a single tap
             on the handle.  (If false, the user must drag or fling, or click
             using the trackball, to open/close the drawer.)  Default is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#allowSingleTap}.
          @attr name android:allowSingleTap
        */
        public: static const int SlidingDrawer_allowSingleTap = 3;
        /**
          <p>
          @attr description
           Indicates whether the drawer should be opened/closed with an animation
             when the user clicks the handle. Default is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animateOnClick}.
          @attr name android:animateOnClick
        */
        public: static const int SlidingDrawer_animateOnClick = 6;
        /**
          <p>
          @attr description
           Extra offset for the handle at the bottom of the SlidingDrawer. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#bottomOffset}.
          @attr name android:bottomOffset
        */
        public: static const int SlidingDrawer_bottomOffset = 1;
        /**
          <p>
          @attr description
           Identifier for the child that represents the drawer's content. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#content}.
          @attr name android:content
        */
        public: static const int SlidingDrawer_content = 5;
        /**
          <p>
          @attr description
           Identifier for the child that represents the drawer's handle. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#handle}.
          @attr name android:handle
        */
        public: static const int SlidingDrawer_handle = 4;
        /**
          <p>
          @attr description
           Orientation of the SlidingDrawer. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orientation}.
          @attr name android:orientation
        */
        public: static const int SlidingDrawer_orientation = 0;
        /**
          <p>
          @attr description
           Extra offset for the handle at the top of the SlidingDrawer. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#topOffset}.
          @attr name android:topOffset
        */
        public: static const int SlidingDrawer_topOffset = 2;
        /** Attributes that can be used with a SlidingTab.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SlidingTab_orientation android:orientation}</code></td><td> Use "horizontal" for a row, "vertical" for a column.</td></tr>
           </table>
           @see #SlidingTab_orientation
         */
        public: static const int SlidingTab[1];
        /**
          <p>
          @attr description
           Use "horizontal" for a row, "vertical" for a column.  The default is horizontal. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#orientation}.
          @attr name android:orientation
        */
        public: static const int SlidingTab_orientation = 0;
        /**  Use <code>spell-checker</code> as the root tag of the XML resource that
         describes an
         {@link android.service.textservice.SpellCheckerService} service, which is
         referenced from its
         {@link android.view.textservice.SpellCheckerSession#SERVICE_META_DATA}
         meta-data entry.  Described here are the attributes that can be
         included in that tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SpellChecker_label android:label}</code></td><td> The name of the spell checker.</td></tr>
           <tr><td><code>{@link #SpellChecker_settingsActivity android:settingsActivity}</code></td><td> Component name of an activity that allows the user to modify
             the settings for this service.</td></tr>
           </table>
           @see #SpellChecker_label
           @see #SpellChecker_settingsActivity
         */
        public: static const int SpellChecker[2];
        /**
          <p>
          @attr description
           The name of the spell checker. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int SpellChecker_label = 0;
        /**
          <p>
          @attr description
           Component name of an activity that allows the user to modify
             the settings for this service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int SpellChecker_settingsActivity = 1;
        /**  This is the subtype of the spell checker. Subtype can describe locales (e.g. en_US, fr_FR...) 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SpellChecker_Subtype_label android:label}</code></td><td> The name of the subtype.</td></tr>
           <tr><td><code>{@link #SpellChecker_Subtype_subtypeExtraValue android:subtypeExtraValue}</code></td><td> The extra value of the subtype.</td></tr>
           <tr><td><code>{@link #SpellChecker_Subtype_subtypeLocale android:subtypeLocale}</code></td><td> The locale of the subtype.</td></tr>
           </table>
           @see #SpellChecker_Subtype_label
           @see #SpellChecker_Subtype_subtypeExtraValue
           @see #SpellChecker_Subtype_subtypeLocale
         */
        public: static const int SpellChecker_Subtype[3];
        /**
          <p>
          @attr description
           The name of the subtype. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#label}.
          @attr name android:label
        */
        public: static const int SpellChecker_Subtype_label = 0;
        /**
          <p>
          @attr description
           The extra value of the subtype. This string can be any string and will be passed to
             the SpellChecker.  


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#subtypeExtraValue}.
          @attr name android:subtypeExtraValue
        */
        public: static const int SpellChecker_Subtype_subtypeExtraValue = 2;
        /**
          <p>
          @attr description
           The locale of the subtype. This string should be a locale (e.g. en_US, fr_FR...)
             This is also used by the framework to know the supported locales
             of the spell checker.  


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#subtypeLocale}.
          @attr name android:subtypeLocale
        */
        public: static const int SpellChecker_Subtype_subtypeLocale = 1;
        /** Attributes that can be used with a Spinner.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Spinner_disableChildrenWhenDisabled android:disableChildrenWhenDisabled}</code></td><td> Whether this spinner should mark child views as enabled/disabled when
             the spinner itself is enabled/disabled.</td></tr>
           <tr><td><code>{@link #Spinner_dropDownSelector android:dropDownSelector}</code></td><td> List selector to use for spinnerMode="dropdown" display.</td></tr>
           <tr><td><code>{@link #Spinner_dropDownWidth android:dropDownWidth}</code></td><td> Width of the dropdown in spinnerMode="dropdown".</td></tr>
           <tr><td><code>{@link #Spinner_gravity android:gravity}</code></td><td> Gravity setting for positioning the currently selected item.</td></tr>
           <tr><td><code>{@link #Spinner_popupBackground android:popupBackground}</code></td><td> Background drawable to use for the dropdown in spinnerMode="dropdown".</td></tr>
           <tr><td><code>{@link #Spinner_popupElevation android:popupElevation}</code></td><td> Window elevation to use for the dropdown in spinnerMode="dropdown".</td></tr>
           <tr><td><code>{@link #Spinner_popupPromptView android:popupPromptView}</code></td><td> Reference to a layout to use for displaying a prompt in the dropdown for
             spinnerMode="dropdown".</td></tr>
           <tr><td><code>{@link #Spinner_prompt android:prompt}</code></td><td> The prompt to display when the spinner's dialog is shown.</td></tr>
           <tr><td><code>{@link #Spinner_spinnerMode android:spinnerMode}</code></td><td> Display mode for spinner options.</td></tr>
           </table>
           @see #Spinner_disableChildrenWhenDisabled
           @see #Spinner_dropDownSelector
           @see #Spinner_dropDownWidth
           @see #Spinner_gravity
           @see #Spinner_popupBackground
           @see #Spinner_popupElevation
           @see #Spinner_popupPromptView
           @see #Spinner_prompt
           @see #Spinner_spinnerMode
         */
        public: static const int Spinner[9];
        /**
          <p>
          @attr description
           Whether this spinner should mark child views as enabled/disabled when
             the spinner itself is enabled/disabled. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:disableChildrenWhenDisabled
        */
        public: static const int Spinner_disableChildrenWhenDisabled = 8;
        /**
          <p>
          @attr description
           List selector to use for spinnerMode="dropdown" display. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownSelector}.
          @attr name android:dropDownSelector
        */
        public: static const int Spinner_dropDownSelector = 1;
        /**
          <p>
          @attr description
           Width of the dropdown in spinnerMode="dropdown". 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The dropdown should fill the width of the screen.
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The dropdown should fit the width of the screen.
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The dropdown should fit the width of its anchor. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownWidth}.
          @attr name android:dropDownWidth
        */
        public: static const int Spinner_dropDownWidth = 4;
        /**
          <p>
          @attr description
           Gravity setting for positioning the currently selected item. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int Spinner_gravity = 0;
        /**
          <p>
          @attr description
           Background drawable to use for the dropdown in spinnerMode="dropdown". 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupBackground}.
          @attr name android:popupBackground
        */
        public: static const int Spinner_popupBackground = 2;
        /**
          <p>
          @attr description
           Window elevation to use for the dropdown in spinnerMode="dropdown". 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupElevation}.
          @attr name android:popupElevation
        */
        public: static const int Spinner_popupElevation = 6;
        /**
          <p>
          @attr description
           Reference to a layout to use for displaying a prompt in the dropdown for
             spinnerMode="dropdown". This layout must contain a TextView with the id
             {@code @android:id/text1} to be populated with the prompt text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:popupPromptView
        */
        public: static const int Spinner_popupPromptView = 7;
        /**
          <p>
          @attr description
           The prompt to display when the spinner's dialog is shown. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#prompt}.
          @attr name android:prompt
        */
        public: static const int Spinner_prompt = 3;
        /**
          <p>
          @attr description
           Display mode for spinner options. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>dialog</code></td><td>0</td><td> Spinner options will be presented to the user as a dialog window. </td></tr>
<tr><td><code>dropdown</code></td><td>1</td><td> Spinner options will be presented to the user as an inline dropdown
                 anchored to the spinner widget itself. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#spinnerMode}.
          @attr name android:spinnerMode
        */
        public: static const int Spinner_spinnerMode = 5;
        /** Attributes that can be used with a StackView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #StackView_clickColor android:clickColor}</code></td><td> Color of the outline of click feedback.</td></tr>
           <tr><td><code>{@link #StackView_resOutColor android:resOutColor}</code></td><td> Color of the res-out outline.</td></tr>
           </table>
           @see #StackView_clickColor
           @see #StackView_resOutColor
         */
        public: static const int StackView[2];
        /**
          <p>
          @attr description
           Color of the outline of click feedback. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:clickColor
        */
        public: static const int StackView_clickColor = 1;
        /**
          <p>
          @attr description
           Color of the res-out outline. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:resOutColor
        */
        public: static const int StackView_resOutColor = 0;
        /**  Attributes that can be assigned to a StateListAnimator item. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #StateListAnimatorItem_animation android:animation}</code></td><td> Animation to use on each child.</td></tr>
           </table>
           @see #StateListAnimatorItem_animation
         */
        public: static const int StateListAnimatorItem[1];
        /**
          <p>
          @attr description
           Animation to use on each child. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animation}.
          @attr name android:animation
        */
        public: static const int StateListAnimatorItem_animation = 0;
        /**  Drawable used to render several states. Each state is represented by
         a child drawable. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #StateListDrawable_autoMirrored android:autoMirrored}</code></td><td> Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left).</td></tr>
           <tr><td><code>{@link #StateListDrawable_constantSize android:constantSize}</code></td><td> If true, the drawable's reported internal size will remain
             constant as the state changes; the size is the maximum of all
             of the states.</td></tr>
           <tr><td><code>{@link #StateListDrawable_dither android:dither}</code></td><td> Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen).</td></tr>
           <tr><td><code>{@link #StateListDrawable_enterFadeDuration android:enterFadeDuration}</code></td><td> Amount of time (in milliseconds) to fade in a new state drawable.</td></tr>
           <tr><td><code>{@link #StateListDrawable_exitFadeDuration android:exitFadeDuration}</code></td><td> Amount of time (in milliseconds) to fade out an old state drawable.</td></tr>
           <tr><td><code>{@link #StateListDrawable_variablePadding android:variablePadding}</code></td><td> If true, allows the drawable's padding to change based on the
             current state that is selected.</td></tr>
           <tr><td><code>{@link #StateListDrawable_visible android:visible}</code></td><td> Indicates whether the drawable should be initially visible.</td></tr>
           </table>
           @see #StateListDrawable_autoMirrored
           @see #StateListDrawable_constantSize
           @see #StateListDrawable_dither
           @see #StateListDrawable_enterFadeDuration
           @see #StateListDrawable_exitFadeDuration
           @see #StateListDrawable_variablePadding
           @see #StateListDrawable_visible
         */
        public: static const int StateListDrawable[7];
        /**
          <p>
          @attr description
           Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoMirrored}.
          @attr name android:autoMirrored
        */
        public: static const int StateListDrawable_autoMirrored = 6;
        /**
          <p>
          @attr description
           If true, the drawable's reported internal size will remain
             constant as the state changes; the size is the maximum of all
             of the states.  If false, the size will vary based on the
             current state. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#constantSize}.
          @attr name android:constantSize
        */
        public: static const int StateListDrawable_constantSize = 3;
        /**
          <p>
          @attr description
           Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dither}.
          @attr name android:dither
        */
        public: static const int StateListDrawable_dither = 0;
        /**
          <p>
          @attr description
           Amount of time (in milliseconds) to fade in a new state drawable. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enterFadeDuration}.
          @attr name android:enterFadeDuration
        */
        public: static const int StateListDrawable_enterFadeDuration = 4;
        /**
          <p>
          @attr description
           Amount of time (in milliseconds) to fade out an old state drawable. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#exitFadeDuration}.
          @attr name android:exitFadeDuration
        */
        public: static const int StateListDrawable_exitFadeDuration = 5;
        /**
          <p>
          @attr description
           If true, allows the drawable's padding to change based on the
             current state that is selected.  If false, the padding will
             stay the same (based on the maximum padding of all the states).
             Enabling this feature requires that the owner of the drawable
             deal with performing layout when the state changes, which is
             often not supported. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#variablePadding}.
          @attr name android:variablePadding
        */
        public: static const int StateListDrawable_variablePadding = 2;
        /**
          <p>
          @attr description
           Indicates whether the drawable should be initially visible. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visible}.
          @attr name android:visible
        */
        public: static const int StateListDrawable_visible = 1;
        /** Attributes that can be used with a Storage.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Storage_allowMassStorage android:allowMassStorage}</code></td><td> true if the storage can be shared via USB mass storage </td></tr>
           <tr><td><code>{@link #Storage_emulated android:emulated}</code></td><td> true if the storage is emulated via the FUSE sdcard daemon </td></tr>
           <tr><td><code>{@link #Storage_maxFileSize android:maxFileSize}</code></td><td> maximum file size for the volume in megabytes, zero or unspecified if it is unbounded </td></tr>
           <tr><td><code>{@link #Storage_mountPoint android:mountPoint}</code></td><td> path to mount point for the storage </td></tr>
           <tr><td><code>{@link #Storage_mtpReserve android:mtpReserve}</code></td><td> number of megabytes of storage MTP should reserve for free storage
             (used for emulated storage that is shared with system's data partition) </td></tr>
           <tr><td><code>{@link #Storage_primary android:primary}</code></td><td> true if the storage is the primary external storage </td></tr>
           <tr><td><code>{@link #Storage_removable android:removable}</code></td><td> true if the storage is removable </td></tr>
           <tr><td><code>{@link #Storage_storageDescription android:storageDescription}</code></td><td> user visible description of the storage </td></tr>
           </table>
           @see #Storage_allowMassStorage
           @see #Storage_emulated
           @see #Storage_maxFileSize
           @see #Storage_mountPoint
           @see #Storage_mtpReserve
           @see #Storage_primary
           @see #Storage_removable
           @see #Storage_storageDescription
         */
        public: static const int Storage[8];
        /**
          <p>
          @attr description
           true if the storage can be shared via USB mass storage 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:allowMassStorage
        */
        public: static const int Storage_allowMassStorage = 6;
        /**
          <p>
          @attr description
           true if the storage is emulated via the FUSE sdcard daemon 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:emulated
        */
        public: static const int Storage_emulated = 4;
        /**
          <p>
          @attr description
           maximum file size for the volume in megabytes, zero or unspecified if it is unbounded 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:maxFileSize
        */
        public: static const int Storage_maxFileSize = 7;
        /**
          <p>
          @attr description
           path to mount point for the storage 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:mountPoint
        */
        public: static const int Storage_mountPoint = 0;
        /**
          <p>
          @attr description
           number of megabytes of storage MTP should reserve for free storage
             (used for emulated storage that is shared with system's data partition) 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:mtpReserve
        */
        public: static const int Storage_mtpReserve = 5;
        /**
          <p>
          @attr description
           true if the storage is the primary external storage 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:primary
        */
        public: static const int Storage_primary = 2;
        /**
          <p>
          @attr description
           true if the storage is removable 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:removable
        */
        public: static const int Storage_removable = 3;
        /**
          <p>
          @attr description
           user visible description of the storage 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:storageDescription
        */
        public: static const int Storage_storageDescription = 1;
        /** Attributes that can be used with a SuggestionSpan.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SuggestionSpan_textUnderlineColor android:textUnderlineColor}</code></td><td>  The underline color </td></tr>
           <tr><td><code>{@link #SuggestionSpan_textUnderlineThickness android:textUnderlineThickness}</code></td><td>  The underline thickness </td></tr>
           </table>
           @see #SuggestionSpan_textUnderlineColor
           @see #SuggestionSpan_textUnderlineThickness
         */
        public: static const int SuggestionSpan[2];
        /**
          <p>
          @attr description
            The underline color 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:textUnderlineColor
        */
        public: static const int SuggestionSpan_textUnderlineColor = 0;
        /**
          <p>
          @attr description
            The underline thickness 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
          <p>This is a private symbol.
          @attr name android:textUnderlineThickness
        */
        public: static const int SuggestionSpan_textUnderlineThickness = 1;
        /** Attributes that can be used with a Switch.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Switch_showText android:showText}</code></td><td> Whether to draw on/off text.</td></tr>
           <tr><td><code>{@link #Switch_splitTrack android:splitTrack}</code></td><td> Whether to split the track and leave a gap for the thumb drawable.</td></tr>
           <tr><td><code>{@link #Switch_switchMinWidth android:switchMinWidth}</code></td><td> Minimum width for the switch component </td></tr>
           <tr><td><code>{@link #Switch_switchPadding android:switchPadding}</code></td><td> Minimum space between the switch and caption text </td></tr>
           <tr><td><code>{@link #Switch_switchTextAppearance android:switchTextAppearance}</code></td><td> TextAppearance style for text displayed on the switch thumb.</td></tr>
           <tr><td><code>{@link #Switch_textOff android:textOff}</code></td><td> Text to use when the switch is in the unchecked/"off" state.</td></tr>
           <tr><td><code>{@link #Switch_textOn android:textOn}</code></td><td> Text to use when the switch is in the checked/"on" state.</td></tr>
           <tr><td><code>{@link #Switch_thumb android:thumb}</code></td><td> Drawable to use as the "thumb" that switches back and forth.</td></tr>
           <tr><td><code>{@link #Switch_thumbTextPadding android:thumbTextPadding}</code></td><td> Amount of padding on either side of text within the switch thumb.</td></tr>
           <tr><td><code>{@link #Switch_track android:track}</code></td><td> Drawable to use as the "track" that the switch thumb slides within.</td></tr>
           </table>
           @see #Switch_showText
           @see #Switch_splitTrack
           @see #Switch_switchMinWidth
           @see #Switch_switchPadding
           @see #Switch_switchTextAppearance
           @see #Switch_textOff
           @see #Switch_textOn
           @see #Switch_thumb
           @see #Switch_thumbTextPadding
           @see #Switch_track
         */
        public: static const int Switch[10];
        /**
          <p>
          @attr description
           Whether to draw on/off text. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#showText}.
          @attr name android:showText
        */
        public: static const int Switch_showText = 9;
        /**
          <p>
          @attr description
           Whether to split the track and leave a gap for the thumb drawable. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#splitTrack}.
          @attr name android:splitTrack
        */
        public: static const int Switch_splitTrack = 8;
        /**
          <p>
          @attr description
           Minimum width for the switch component 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#switchMinWidth}.
          @attr name android:switchMinWidth
        */
        public: static const int Switch_switchMinWidth = 5;
        /**
          <p>
          @attr description
           Minimum space between the switch and caption text 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#switchPadding}.
          @attr name android:switchPadding
        */
        public: static const int Switch_switchPadding = 6;
        /**
          <p>
          @attr description
           TextAppearance style for text displayed on the switch thumb. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#switchTextAppearance}.
          @attr name android:switchTextAppearance
        */
        public: static const int Switch_switchTextAppearance = 3;
        /**
          <p>
          @attr description
           Text to use when the switch is in the unchecked/"off" state. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textOff}.
          @attr name android:textOff
        */
        public: static const int Switch_textOff = 1;
        /**
          <p>
          @attr description
           Text to use when the switch is in the checked/"on" state. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textOn}.
          @attr name android:textOn
        */
        public: static const int Switch_textOn = 0;
        /**
          <p>
          @attr description
           Drawable to use as the "thumb" that switches back and forth. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#thumb}.
          @attr name android:thumb
        */
        public: static const int Switch_thumb = 2;
        /**
          <p>
          @attr description
           Amount of padding on either side of text within the switch thumb. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#thumbTextPadding}.
          @attr name android:thumbTextPadding
        */
        public: static const int Switch_thumbTextPadding = 7;
        /**
          <p>
          @attr description
           Drawable to use as the "track" that the switch thumb slides within. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#track}.
          @attr name android:track
        */
        public: static const int Switch_track = 4;
        /** Attributes that can be used with a SwitchPreference.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SwitchPreference_disableDependentsState android:disableDependentsState}</code></td><td> The state (true for on, or false for off) that causes dependents to be disabled.</td></tr>
           <tr><td><code>{@link #SwitchPreference_summaryOff android:summaryOff}</code></td><td> The summary for the Preference in a PreferenceActivity screen when the
             SwitchPreference is unchecked.</td></tr>
           <tr><td><code>{@link #SwitchPreference_summaryOn android:summaryOn}</code></td><td> The summary for the Preference in a PreferenceActivity screen when the
             SwitchPreference is checked.</td></tr>
           <tr><td><code>{@link #SwitchPreference_switchTextOff android:switchTextOff}</code></td><td> The text used on the switch itself when in the "off" state.</td></tr>
           <tr><td><code>{@link #SwitchPreference_switchTextOn android:switchTextOn}</code></td><td> The text used on the switch itself when in the "on" state.</td></tr>
           </table>
           @see #SwitchPreference_disableDependentsState
           @see #SwitchPreference_summaryOff
           @see #SwitchPreference_summaryOn
           @see #SwitchPreference_switchTextOff
           @see #SwitchPreference_switchTextOn
         */
        public: static const int SwitchPreference[5];
        /**
          <p>
          @attr description
           The state (true for on, or false for off) that causes dependents to be disabled. By default,
             dependents will be disabled when this is unchecked, so the value of this preference is false. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#disableDependentsState}.
          @attr name android:disableDependentsState
        */
        public: static const int SwitchPreference_disableDependentsState = 2;
        /**
          <p>
          @attr description
           The summary for the Preference in a PreferenceActivity screen when the
             SwitchPreference is unchecked. If separate on/off summaries are not
             needed, the summary attribute can be used instead. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#summaryOff}.
          @attr name android:summaryOff
        */
        public: static const int SwitchPreference_summaryOff = 1;
        /**
          <p>
          @attr description
           The summary for the Preference in a PreferenceActivity screen when the
             SwitchPreference is checked. If separate on/off summaries are not
             needed, the summary attribute can be used instead. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#summaryOn}.
          @attr name android:summaryOn
        */
        public: static const int SwitchPreference_summaryOn = 0;
        /**
          <p>
          @attr description
           The text used on the switch itself when in the "off" state.
             This should be a very SHORT string, as it appears in a small space. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#switchTextOff}.
          @attr name android:switchTextOff
        */
        public: static const int SwitchPreference_switchTextOff = 4;
        /**
          <p>
          @attr description
           The text used on the switch itself when in the "on" state.
             This should be a very SHORT string, as it appears in a small space. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#switchTextOn}.
          @attr name android:switchTextOn
        */
        public: static const int SwitchPreference_switchTextOn = 3;
        /**  Use <code>account-authenticator</code> as the root tag of the XML resource that
         describes an account authenticator.
     
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SyncAdapter_accountType android:accountType}</code></td><td> The account type this authenticator handles.</td></tr>
           <tr><td><code>{@link #SyncAdapter_allowParallelSyncs android:allowParallelSyncs}</code></td><td> Set to true to tell the SyncManager that this SyncAdapter supports
             multiple simultaneous syncs for the same account type and authority.</td></tr>
           <tr><td><code>{@link #SyncAdapter_contentAuthority android:contentAuthority}</code></td><td> the authority of a content provider.</td></tr>
           <tr><td><code>{@link #SyncAdapter_isAlwaysSyncable android:isAlwaysSyncable}</code></td><td> Set to true to tell the SyncManager to automatically call setIsSyncable(.</td></tr>
           <tr><td><code>{@link #SyncAdapter_settingsActivity android:settingsActivity}</code></td><td> If provided, specifies the action of the settings
             activity for this SyncAdapter.</td></tr>
           <tr><td><code>{@link #SyncAdapter_supportsUploading android:supportsUploading}</code></td><td></td></tr>
           <tr><td><code>{@link #SyncAdapter_userVisible android:userVisible}</code></td><td></td></tr>
           </table>
           @see #SyncAdapter_accountType
           @see #SyncAdapter_allowParallelSyncs
           @see #SyncAdapter_contentAuthority
           @see #SyncAdapter_isAlwaysSyncable
           @see #SyncAdapter_settingsActivity
           @see #SyncAdapter_supportsUploading
           @see #SyncAdapter_userVisible
         */
        public: static const int SyncAdapter[7];
        /**
          <p>
          @attr description
           The account type this authenticator handles. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#accountType}.
          @attr name android:accountType
        */
        public: static const int SyncAdapter_accountType = 1;
        /**
          <p>
          @attr description
           Set to true to tell the SyncManager that this SyncAdapter supports
             multiple simultaneous syncs for the same account type and authority.
             Otherwise the SyncManager will be sure not to issue a start sync request
             to this SyncAdapter if the SyncAdapter is already syncing another account.
             Defaults to false.
             


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#allowParallelSyncs}.
          @attr name android:allowParallelSyncs
        */
        public: static const int SyncAdapter_allowParallelSyncs = 5;
        /**
          <p>
          @attr description
           the authority of a content provider. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentAuthority}.
          @attr name android:contentAuthority
        */
        public: static const int SyncAdapter_contentAuthority = 2;
        /**
          <p>
          @attr description
           Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
             for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
             Defaults to false.
             


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isAlwaysSyncable}.
          @attr name android:isAlwaysSyncable
        */
        public: static const int SyncAdapter_isAlwaysSyncable = 6;
        /**
          <p>
          @attr description
           If provided, specifies the action of the settings
             activity for this SyncAdapter.
             


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int SyncAdapter_settingsActivity = 0;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#supportsUploading}
          attribute's value can be found in the {@link #SyncAdapter} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:supportsUploading
        */
        public: static const int SyncAdapter_supportsUploading = 4;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#userVisible}
          attribute's value can be found in the {@link #SyncAdapter} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:userVisible
        */
        public: static const int SyncAdapter_userVisible = 3;
        /** Attributes that can be used with a TabWidget.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TabWidget_divider android:divider}</code></td><td> Drawable used to draw the divider between tabs.</td></tr>
           <tr><td><code>{@link #TabWidget_tabLayout android:tabLayout}</code></td><td> Layout used to organize each tab's content.</td></tr>
           <tr><td><code>{@link #TabWidget_tabStripEnabled android:tabStripEnabled}</code></td><td> Determines whether the strip under the tab indicators is drawn or not.</td></tr>
           <tr><td><code>{@link #TabWidget_tabStripLeft android:tabStripLeft}</code></td><td> Drawable used to draw the left part of the strip underneath the tabs.</td></tr>
           <tr><td><code>{@link #TabWidget_tabStripRight android:tabStripRight}</code></td><td> Drawable used to draw the right part of the strip underneath the tabs.</td></tr>
           </table>
           @see #TabWidget_divider
           @see #TabWidget_tabLayout
           @see #TabWidget_tabStripEnabled
           @see #TabWidget_tabStripLeft
           @see #TabWidget_tabStripRight
         */
        public: static const int TabWidget[5];
        /**
          <p>
          @attr description
           Drawable used to draw the divider between tabs. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#divider}.
          @attr name android:divider
        */
        public: static const int TabWidget_divider = 0;
        /**
          <p>
          @attr description
           Layout used to organize each tab's content. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:tabLayout
        */
        public: static const int TabWidget_tabLayout = 4;
        /**
          <p>
          @attr description
           Determines whether the strip under the tab indicators is drawn or not. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tabStripEnabled}.
          @attr name android:tabStripEnabled
        */
        public: static const int TabWidget_tabStripEnabled = 3;
        /**
          <p>
          @attr description
           Drawable used to draw the left part of the strip underneath the tabs. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tabStripLeft}.
          @attr name android:tabStripLeft
        */
        public: static const int TabWidget_tabStripLeft = 1;
        /**
          <p>
          @attr description
           Drawable used to draw the right part of the strip underneath the tabs. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tabStripRight}.
          @attr name android:tabStripRight
        */
        public: static const int TabWidget_tabStripRight = 2;
        /** Attributes that can be used with a TableLayout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TableLayout_collapseColumns android:collapseColumns}</code></td><td> The zero-based index of the columns to collapse.</td></tr>
           <tr><td><code>{@link #TableLayout_shrinkColumns android:shrinkColumns}</code></td><td> The zero-based index of the columns to shrink.</td></tr>
           <tr><td><code>{@link #TableLayout_stretchColumns android:stretchColumns}</code></td><td> The zero-based index of the columns to stretch.</td></tr>
           </table>
           @see #TableLayout_collapseColumns
           @see #TableLayout_shrinkColumns
           @see #TableLayout_stretchColumns
         */
        public: static const int TableLayout[3];
        /**
          <p>
          @attr description
           The zero-based index of the columns to collapse. The column indices
             must be separated by a comma: 1, 2, 5. Illegal and duplicate
             indices are ignored. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#collapseColumns}.
          @attr name android:collapseColumns
        */
        public: static const int TableLayout_collapseColumns = 2;
        /**
          <p>
          @attr description
           The zero-based index of the columns to shrink. The column indices
             must be separated by a comma: 1, 2, 5. Illegal and duplicate
             indices are ignored. You can shrink all columns by using the
             value "*" instead. Note that a column can be marked stretchable
             and shrinkable at the same time. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shrinkColumns}.
          @attr name android:shrinkColumns
        */
        public: static const int TableLayout_shrinkColumns = 1;
        /**
          <p>
          @attr description
           The zero-based index of the columns to stretch. The column indices
             must be separated by a comma: 1, 2, 5. Illegal and duplicate
             indices are ignored. You can stretch all columns by using the
             value "*" instead. Note that a column can be marked stretchable
             and shrinkable at the same time. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#stretchColumns}.
          @attr name android:stretchColumns
        */
        public: static const int TableLayout_stretchColumns = 0;
        /** Attributes that can be used with a TableRow.
         */
        public: static const int TableRow[0];
        /** Attributes that can be used with a TableRow_Cell.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TableRow_Cell_layout_column android:layout_column}</code></td><td> The index of the column in which this child should be.</td></tr>
           <tr><td><code>{@link #TableRow_Cell_layout_span android:layout_span}</code></td><td> Defines how many columns this child should span.</td></tr>
           </table>
           @see #TableRow_Cell_layout_column
           @see #TableRow_Cell_layout_span
         */
        public: static const int TableRow_Cell[2];
        /**
          <p>
          @attr description
           The index of the column in which this child should be. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_column}.
          @attr name android:layout_column
        */
        public: static const int TableRow_Cell_layout_column = 0;
        /**
          <p>
          @attr description
           Defines how many columns this child should span.  Must be >= 1.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_span}.
          @attr name android:layout_span
        */
        public: static const int TableRow_Cell_layout_span = 1;
        /** Attributes that can be used with a TextAppearance.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TextAppearance_elegantTextHeight android:elegantTextHeight}</code></td><td> Elegant text height, especially for less compacted complex script text.</td></tr>
           <tr><td><code>{@link #TextAppearance_fontFamily android:fontFamily}</code></td><td> Font family (named by string) for the text.</td></tr>
           <tr><td><code>{@link #TextAppearance_fontFeatureSettings android:fontFeatureSettings}</code></td><td> Font feature settings.</td></tr>
           <tr><td><code>{@link #TextAppearance_letterSpacing android:letterSpacing}</code></td><td> Text letter-spacing.</td></tr>
           <tr><td><code>{@link #TextAppearance_shadowColor android:shadowColor}</code></td><td> Place a blurred shadow of text underneath the text, drawn with the
             specified color.</td></tr>
           <tr><td><code>{@link #TextAppearance_shadowDx android:shadowDx}</code></td><td> Horizontal offset of the text shadow.</td></tr>
           <tr><td><code>{@link #TextAppearance_shadowDy android:shadowDy}</code></td><td> Vertical offset of the text shadow.</td></tr>
           <tr><td><code>{@link #TextAppearance_shadowRadius android:shadowRadius}</code></td><td> Blur radius of the text shadow.</td></tr>
           <tr><td><code>{@link #TextAppearance_textAllCaps android:textAllCaps}</code></td><td> Present the text in ALL CAPS.</td></tr>
           <tr><td><code>{@link #TextAppearance_textColor android:textColor}</code></td><td> Text color.</td></tr>
           <tr><td><code>{@link #TextAppearance_textColorHighlight android:textColorHighlight}</code></td><td> Color of the text selection highlight.</td></tr>
           <tr><td><code>{@link #TextAppearance_textColorHint android:textColorHint}</code></td><td> Color of the hint text.</td></tr>
           <tr><td><code>{@link #TextAppearance_textColorLink android:textColorLink}</code></td><td> Color of the links.</td></tr>
           <tr><td><code>{@link #TextAppearance_textSize android:textSize}</code></td><td> Size of the text.</td></tr>
           <tr><td><code>{@link #TextAppearance_textStyle android:textStyle}</code></td><td> Style (bold, italic, bolditalic) for the text.</td></tr>
           <tr><td><code>{@link #TextAppearance_typeface android:typeface}</code></td><td> Typeface (normal, sans, serif, monospace) for the text.</td></tr>
           </table>
           @see #TextAppearance_elegantTextHeight
           @see #TextAppearance_fontFamily
           @see #TextAppearance_fontFeatureSettings
           @see #TextAppearance_letterSpacing
           @see #TextAppearance_shadowColor
           @see #TextAppearance_shadowDx
           @see #TextAppearance_shadowDy
           @see #TextAppearance_shadowRadius
           @see #TextAppearance_textAllCaps
           @see #TextAppearance_textColor
           @see #TextAppearance_textColorHighlight
           @see #TextAppearance_textColorHint
           @see #TextAppearance_textColorLink
           @see #TextAppearance_textSize
           @see #TextAppearance_textStyle
           @see #TextAppearance_typeface
         */
        public: static const int TextAppearance[16];
        /**
          <p>
          @attr description
           Elegant text height, especially for less compacted complex script text. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#elegantTextHeight}.
          @attr name android:elegantTextHeight
        */
        public: static const int TextAppearance_elegantTextHeight = 13;
        /**
          <p>
          @attr description
           Font family (named by string) for the text. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fontFamily}.
          @attr name android:fontFamily
        */
        public: static const int TextAppearance_fontFamily = 12;
        /**
          <p>
          @attr description
           Font feature settings. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fontFeatureSettings}.
          @attr name android:fontFeatureSettings
        */
        public: static const int TextAppearance_fontFeatureSettings = 15;
        /**
          <p>
          @attr description
           Text letter-spacing. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#letterSpacing}.
          @attr name android:letterSpacing
        */
        public: static const int TextAppearance_letterSpacing = 14;
        /**
          <p>
          @attr description
           Place a blurred shadow of text underneath the text, drawn with the
             specified color. The text shadow produced does not interact with
             properties on View that are responsible for real time shadows,
             {@link android.R.styleable#View_elevation elevation} and
             {@link android.R.styleable#View_translationZ translationZ}. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shadowColor}.
          @attr name android:shadowColor
        */
        public: static const int TextAppearance_shadowColor = 7;
        /**
          <p>
          @attr description
           Horizontal offset of the text shadow. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shadowDx}.
          @attr name android:shadowDx
        */
        public: static const int TextAppearance_shadowDx = 8;
        /**
          <p>
          @attr description
           Vertical offset of the text shadow. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shadowDy}.
          @attr name android:shadowDy
        */
        public: static const int TextAppearance_shadowDy = 9;
        /**
          <p>
          @attr description
           Blur radius of the text shadow. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shadowRadius}.
          @attr name android:shadowRadius
        */
        public: static const int TextAppearance_shadowRadius = 10;
        /**
          <p>
          @attr description
           Present the text in ALL CAPS. This may use a small-caps form when available. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAllCaps}.
          @attr name android:textAllCaps
        */
        public: static const int TextAppearance_textAllCaps = 11;
        /**
          <p>
          @attr description
           Text color. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColor}.
          @attr name android:textColor
        */
        public: static const int TextAppearance_textColor = 3;
        /**
          <p>
          @attr description
           Color of the text selection highlight. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorHighlight}.
          @attr name android:textColorHighlight
        */
        public: static const int TextAppearance_textColorHighlight = 4;
        /**
          <p>
          @attr description
           Color of the hint text. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorHint}.
          @attr name android:textColorHint
        */
        public: static const int TextAppearance_textColorHint = 5;
        /**
          <p>
          @attr description
           Color of the links. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorLink}.
          @attr name android:textColorLink
        */
        public: static const int TextAppearance_textColorLink = 6;
        /**
          <p>
          @attr description
           Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp). 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSize}.
          @attr name android:textSize
        */
        public: static const int TextAppearance_textSize = 0;
        /**
          <p>
          @attr description
           Style (bold, italic, bolditalic) for the text. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td></td></tr>
<tr><td><code>bold</code></td><td>1</td><td></td></tr>
<tr><td><code>italic</code></td><td>2</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textStyle}.
          @attr name android:textStyle
        */
        public: static const int TextAppearance_textStyle = 2;
        /**
          <p>
          @attr description
           Typeface (normal, sans, serif, monospace) for the text. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td></td></tr>
<tr><td><code>sans</code></td><td>1</td><td></td></tr>
<tr><td><code>serif</code></td><td>2</td><td></td></tr>
<tr><td><code>monospace</code></td><td>3</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#typeface}.
          @attr name android:typeface
        */
        public: static const int TextAppearance_typeface = 1;
        /** Attributes that can be used with a TextClock.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TextClock_format12Hour android:format12Hour}</code></td><td> Specifies the formatting pattern used to show the time and/or date
             in 12-hour mode.</td></tr>
           <tr><td><code>{@link #TextClock_format24Hour android:format24Hour}</code></td><td> Specifies the formatting pattern used to show the time and/or date
             in 24-hour mode.</td></tr>
           <tr><td><code>{@link #TextClock_timeZone android:timeZone}</code></td><td> Specifies the time zone to use.</td></tr>
           </table>
           @see #TextClock_format12Hour
           @see #TextClock_format24Hour
           @see #TextClock_timeZone
         */
        public: static const int TextClock[3];
        /**
          <p>
          @attr description
           Specifies the formatting pattern used to show the time and/or date
             in 12-hour mode. Please refer to {@link android.text.format.DateFormat}
             for a complete description of accepted formatting patterns.
             The default pattern is a locale-appropriate equivalent of "h:mm a". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#format12Hour}.
          @attr name android:format12Hour
        */
        public: static const int TextClock_format12Hour = 0;
        /**
          <p>
          @attr description
           Specifies the formatting pattern used to show the time and/or date
             in 24-hour mode. Please refer to {@link android.text.format.DateFormat}
             for a complete description of accepted formatting patterns.
             The default pattern is a locale-appropriate equivalent of "H:mm". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#format24Hour}.
          @attr name android:format24Hour
        */
        public: static const int TextClock_format24Hour = 1;
        /**
          <p>
          @attr description
           Specifies the time zone to use. When this attribute is specified, the
             TextClock will ignore the time zone of the system. To use the user's
             time zone, do not specify this attribute. The default value is the
             user's time zone. Please refer to {@link java.util.TimeZone} for more
             information about time zone ids. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#timeZone}.
          @attr name android:timeZone
        */
        public: static const int TextClock_timeZone = 2;
        /** Attributes that can be used with a TextSwitcher.
         */
        public: static const int TextSwitcher[0];
        /**  Use <code>tts-engine</code> as the root tag of the XML resource that
         describes a text to speech engine implemented as a subclass of
         {@link android.speech.tts.TextToSpeechService}.

         The XML resource must be referenced from its
         {@link android.speech.tts.TextToSpeech.Engine#SERVICE_META_DATA} meta-data
         entry. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TextToSpeechEngine_settingsActivity android:settingsActivity}</code></td><td> Component name of an activity that allows the user to modify
             the settings for this service.</td></tr>
           </table>
           @see #TextToSpeechEngine_settingsActivity
         */
        public: static const int TextToSpeechEngine[1];
        /**
          <p>
          @attr description
           Component name of an activity that allows the user to modify
             the settings for this service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int TextToSpeechEngine_settingsActivity = 0;
        /** Attributes that can be used with a TextView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TextView_autoLink android:autoLink}</code></td><td> Controls whether links such as urls and email addresses are
         automatically found and converted to clickable links.</td></tr>
           <tr><td><code>{@link #TextView_autoText android:autoText}</code></td><td> If set, specifies that this TextView has a textual input method
             and automatically corrects some common spelling errors.</td></tr>
           <tr><td><code>{@link #TextView_bufferType android:bufferType}</code></td><td> Determines the minimum type that getText() will return.</td></tr>
           <tr><td><code>{@link #TextView_capitalize android:capitalize}</code></td><td> If set, specifies that this TextView has a textual input method
             and should automatically capitalize what the user types.</td></tr>
           <tr><td><code>{@link #TextView_cursorVisible android:cursorVisible}</code></td><td> Makes the cursor visible (the default) or invisible.</td></tr>
           <tr><td><code>{@link #TextView_digits android:digits}</code></td><td> If set, specifies that this TextView has a numeric input method
             and that these specific characters are the ones that it will
             accept.</td></tr>
           <tr><td><code>{@link #TextView_drawableBottom android:drawableBottom}</code></td><td> The drawable to be drawn below the text.</td></tr>
           <tr><td><code>{@link #TextView_drawableEnd android:drawableEnd}</code></td><td> The drawable to be drawn to the end of the text.</td></tr>
           <tr><td><code>{@link #TextView_drawableLeft android:drawableLeft}</code></td><td> The drawable to be drawn to the left of the text.</td></tr>
           <tr><td><code>{@link #TextView_drawablePadding android:drawablePadding}</code></td><td> The padding between the drawables and the text.</td></tr>
           <tr><td><code>{@link #TextView_drawableRight android:drawableRight}</code></td><td> The drawable to be drawn to the right of the text.</td></tr>
           <tr><td><code>{@link #TextView_drawableStart android:drawableStart}</code></td><td> The drawable to be drawn to the start of the text.</td></tr>
           <tr><td><code>{@link #TextView_drawableTop android:drawableTop}</code></td><td> The drawable to be drawn above the text.</td></tr>
           <tr><td><code>{@link #TextView_editable android:editable}</code></td><td> If set, specifies that this TextView has an input method.</td></tr>
           <tr><td><code>{@link #TextView_editorExtras android:editorExtras}</code></td><td> Reference to an
             {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
             XML resource containing additional data to
             supply to an input method, which is private to the implementation
             of the input method.</td></tr>
           <tr><td><code>{@link #TextView_elegantTextHeight android:elegantTextHeight}</code></td><td> Elegant text height, especially for less compacted complex script text.</td></tr>
           <tr><td><code>{@link #TextView_ellipsize android:ellipsize}</code></td><td> If set, causes words that are longer than the view is wide
             to be ellipsized instead of broken in the middle.</td></tr>
           <tr><td><code>{@link #TextView_ems android:ems}</code></td><td> Makes the TextView be exactly this many ems wide.</td></tr>
           <tr><td><code>{@link #TextView_enabled android:enabled}</code></td><td> Specifies whether the widget is enabled.</td></tr>
           <tr><td><code>{@link #TextView_fontFamily android:fontFamily}</code></td><td> Font family (named by string) for the text.</td></tr>
           <tr><td><code>{@link #TextView_fontFeatureSettings android:fontFeatureSettings}</code></td><td> Font feature settings.</td></tr>
           <tr><td><code>{@link #TextView_freezesText android:freezesText}</code></td><td> If set, the text view will include its current complete text
             inside of its frozen icicle in addition to meta-data such as
             the current cursor position.</td></tr>
           <tr><td><code>{@link #TextView_gravity android:gravity}</code></td><td> Specifies how to align the text by the view's x- and/or y-axis
             when the text is smaller than the view.</td></tr>
           <tr><td><code>{@link #TextView_height android:height}</code></td><td> Makes the TextView be exactly this many pixels tall.</td></tr>
           <tr><td><code>{@link #TextView_hint android:hint}</code></td><td> Hint text to display when the text is empty.</td></tr>
           <tr><td><code>{@link #TextView_imeActionId android:imeActionId}</code></td><td> Supply a value for
             {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
             used when an input method is connected to the text view.</td></tr>
           <tr><td><code>{@link #TextView_imeActionLabel android:imeActionLabel}</code></td><td> Supply a value for
             {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
             used when an input method is connected to the text view.</td></tr>
           <tr><td><code>{@link #TextView_imeOptions android:imeOptions}</code></td><td> Additional features you can enable in an IME associated with an editor
         to improve the integration with your application.</td></tr>
           <tr><td><code>{@link #TextView_includeFontPadding android:includeFontPadding}</code></td><td> Leave enough room for ascenders and descenders instead of
             using the font ascent and descent strictly.</td></tr>
           <tr><td><code>{@link #TextView_inputMethod android:inputMethod}</code></td><td> If set, specifies that this TextView should use the specified
             input method (specified by fully-qualified class name).</td></tr>
           <tr><td><code>{@link #TextView_inputType android:inputType}</code></td><td> The type of data being placed in a text field, used to help an
         input method decide how to let the user enter text.</td></tr>
           <tr><td><code>{@link #TextView_letterSpacing android:letterSpacing}</code></td><td> Text letter-spacing.</td></tr>
           <tr><td><code>{@link #TextView_lineSpacingExtra android:lineSpacingExtra}</code></td><td> Extra spacing between lines of text.</td></tr>
           <tr><td><code>{@link #TextView_lineSpacingMultiplier android:lineSpacingMultiplier}</code></td><td> Extra spacing between lines of text, as a multiplier.</td></tr>
           <tr><td><code>{@link #TextView_lines android:lines}</code></td><td> Makes the TextView be exactly this many lines tall.</td></tr>
           <tr><td><code>{@link #TextView_linksClickable android:linksClickable}</code></td><td> If set to false, keeps the movement method from being set
             to the link movement method even if autoLink causes links
             to be found.</td></tr>
           <tr><td><code>{@link #TextView_marqueeRepeatLimit android:marqueeRepeatLimit}</code></td><td> The number of times to repeat the marquee animation.</td></tr>
           <tr><td><code>{@link #TextView_maxEms android:maxEms}</code></td><td> Makes the TextView be at most this many ems wide.</td></tr>
           <tr><td><code>{@link #TextView_maxHeight android:maxHeight}</code></td><td> Makes the TextView be at most this many pixels tall.</td></tr>
           <tr><td><code>{@link #TextView_maxLength android:maxLength}</code></td><td> Set an input filter to constrain the text length to the
             specified number.</td></tr>
           <tr><td><code>{@link #TextView_maxLines android:maxLines}</code></td><td> Makes the TextView be at most this many lines tall.</td></tr>
           <tr><td><code>{@link #TextView_maxWidth android:maxWidth}</code></td><td> Makes the TextView be at most this many pixels wide.</td></tr>
           <tr><td><code>{@link #TextView_minEms android:minEms}</code></td><td> Makes the TextView be at least this many ems wide.</td></tr>
           <tr><td><code>{@link #TextView_minHeight android:minHeight}</code></td><td> Makes the TextView be at least this many pixels tall.</td></tr>
           <tr><td><code>{@link #TextView_minLines android:minLines}</code></td><td> Makes the TextView be at least this many lines tall.</td></tr>
           <tr><td><code>{@link #TextView_minWidth android:minWidth}</code></td><td> Makes the TextView be at least this many pixels wide.</td></tr>
           <tr><td><code>{@link #TextView_numeric android:numeric}</code></td><td> If set, specifies that this TextView has a numeric input method.</td></tr>
           <tr><td><code>{@link #TextView_password android:password}</code></td><td> Whether the characters of the field are displayed as
             password dots instead of themselves.</td></tr>
           <tr><td><code>{@link #TextView_phoneNumber android:phoneNumber}</code></td><td> If set, specifies that this TextView has a phone number input
             method.</td></tr>
           <tr><td><code>{@link #TextView_privateImeOptions android:privateImeOptions}</code></td><td> An addition content type description to supply to the input
             method attached to the text view, which is private to the
             implementation of the input method.</td></tr>
           <tr><td><code>{@link #TextView_scrollHorizontally android:scrollHorizontally}</code></td><td> Whether the text is allowed to be wider than the view (and
             therefore can be scrolled horizontally).</td></tr>
           <tr><td><code>{@link #TextView_selectAllOnFocus android:selectAllOnFocus}</code></td><td> If the text is selectable, select it all when the view takes
             focus.</td></tr>
           <tr><td><code>{@link #TextView_shadowColor android:shadowColor}</code></td><td> Place a blurred shadow of text underneath the text, drawn with the
             specified color.</td></tr>
           <tr><td><code>{@link #TextView_shadowDx android:shadowDx}</code></td><td> Horizontal offset of the text shadow.</td></tr>
           <tr><td><code>{@link #TextView_shadowDy android:shadowDy}</code></td><td> Vertical offset of the text shadow.</td></tr>
           <tr><td><code>{@link #TextView_shadowRadius android:shadowRadius}</code></td><td> Blur radius of the text shadow.</td></tr>
           <tr><td><code>{@link #TextView_singleLine android:singleLine}</code></td><td> Constrains the text to a single horizontally scrolling line
             instead of letting it wrap onto multiple lines, and advances
             focus instead of inserting a newline when you press the
             enter key.</td></tr>
           <tr><td><code>{@link #TextView_text android:text}</code></td><td> Text to display.</td></tr>
           <tr><td><code>{@link #TextView_textAllCaps android:textAllCaps}</code></td><td> Present the text in ALL CAPS.</td></tr>
           <tr><td><code>{@link #TextView_textAppearance android:textAppearance}</code></td><td> Base text color, typeface, size, and style.</td></tr>
           <tr><td><code>{@link #TextView_textColor android:textColor}</code></td><td> Text color.</td></tr>
           <tr><td><code>{@link #TextView_textColorHighlight android:textColorHighlight}</code></td><td> Color of the text selection highlight.</td></tr>
           <tr><td><code>{@link #TextView_textColorHint android:textColorHint}</code></td><td> Color of the hint text.</td></tr>
           <tr><td><code>{@link #TextView_textColorLink android:textColorLink}</code></td><td> Text color for links.</td></tr>
           <tr><td><code>{@link #TextView_textCursorDrawable android:textCursorDrawable}</code></td><td> Reference to a drawable that will be drawn under the insertion cursor.</td></tr>
           <tr><td><code>{@link #TextView_textEditNoPasteWindowLayout android:textEditNoPasteWindowLayout}</code></td><td> Variation of textEditPasteWindowLayout displayed when the clipboard is empty.</td></tr>
           <tr><td><code>{@link #TextView_textEditPasteWindowLayout android:textEditPasteWindowLayout}</code></td><td> The layout of the view that is displayed on top of the cursor to paste inside a
             TextEdit field.</td></tr>
           <tr><td><code>{@link #TextView_textEditSideNoPasteWindowLayout android:textEditSideNoPasteWindowLayout}</code></td><td> Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.</td></tr>
           <tr><td><code>{@link #TextView_textEditSidePasteWindowLayout android:textEditSidePasteWindowLayout}</code></td><td> Used instead of textEditPasteWindowLayout when the window is moved on the side of the
             insertion cursor because it would be clipped if it were positioned on top.</td></tr>
           <tr><td><code>{@link #TextView_textEditSuggestionItemLayout android:textEditSuggestionItemLayout}</code></td><td> Layout of the TextView item that will populate the suggestion popup window.</td></tr>
           <tr><td><code>{@link #TextView_textIsSelectable android:textIsSelectable}</code></td><td> Indicates that the content of a non-editable text can be selected.</td></tr>
           <tr><td><code>{@link #TextView_textScaleX android:textScaleX}</code></td><td> Sets the horizontal scaling factor for the text.</td></tr>
           <tr><td><code>{@link #TextView_textSelectHandle android:textSelectHandle}</code></td><td> Reference to a drawable that will be used to display a text selection
             anchor for positioning the cursor within text.</td></tr>
           <tr><td><code>{@link #TextView_textSelectHandleLeft android:textSelectHandleLeft}</code></td><td> Reference to a drawable that will be used to display a text selection
             anchor on the left side of a selection region.</td></tr>
           <tr><td><code>{@link #TextView_textSelectHandleRight android:textSelectHandleRight}</code></td><td> Reference to a drawable that will be used to display a text selection
             anchor on the right side of a selection region.</td></tr>
           <tr><td><code>{@link #TextView_textSize android:textSize}</code></td><td> Size of the text.</td></tr>
           <tr><td><code>{@link #TextView_textStyle android:textStyle}</code></td><td> Style (bold, italic, bolditalic) for the text.</td></tr>
           <tr><td><code>{@link #TextView_typeface android:typeface}</code></td><td> Typeface (normal, sans, serif, monospace) for the text.</td></tr>
           <tr><td><code>{@link #TextView_width android:width}</code></td><td> Makes the TextView be exactly this many pixels wide.</td></tr>
           </table>
           @see #TextView_autoLink
           @see #TextView_autoText
           @see #TextView_bufferType
           @see #TextView_capitalize
           @see #TextView_cursorVisible
           @see #TextView_digits
           @see #TextView_drawableBottom
           @see #TextView_drawableEnd
           @see #TextView_drawableLeft
           @see #TextView_drawablePadding
           @see #TextView_drawableRight
           @see #TextView_drawableStart
           @see #TextView_drawableTop
           @see #TextView_editable
           @see #TextView_editorExtras
           @see #TextView_elegantTextHeight
           @see #TextView_ellipsize
           @see #TextView_ems
           @see #TextView_enabled
           @see #TextView_fontFamily
           @see #TextView_fontFeatureSettings
           @see #TextView_freezesText
           @see #TextView_gravity
           @see #TextView_height
           @see #TextView_hint
           @see #TextView_imeActionId
           @see #TextView_imeActionLabel
           @see #TextView_imeOptions
           @see #TextView_includeFontPadding
           @see #TextView_inputMethod
           @see #TextView_inputType
           @see #TextView_letterSpacing
           @see #TextView_lineSpacingExtra
           @see #TextView_lineSpacingMultiplier
           @see #TextView_lines
           @see #TextView_linksClickable
           @see #TextView_marqueeRepeatLimit
           @see #TextView_maxEms
           @see #TextView_maxHeight
           @see #TextView_maxLength
           @see #TextView_maxLines
           @see #TextView_maxWidth
           @see #TextView_minEms
           @see #TextView_minHeight
           @see #TextView_minLines
           @see #TextView_minWidth
           @see #TextView_numeric
           @see #TextView_password
           @see #TextView_phoneNumber
           @see #TextView_privateImeOptions
           @see #TextView_scrollHorizontally
           @see #TextView_selectAllOnFocus
           @see #TextView_shadowColor
           @see #TextView_shadowDx
           @see #TextView_shadowDy
           @see #TextView_shadowRadius
           @see #TextView_singleLine
           @see #TextView_text
           @see #TextView_textAllCaps
           @see #TextView_textAppearance
           @see #TextView_textColor
           @see #TextView_textColorHighlight
           @see #TextView_textColorHint
           @see #TextView_textColorLink
           @see #TextView_textCursorDrawable
           @see #TextView_textEditNoPasteWindowLayout
           @see #TextView_textEditPasteWindowLayout
           @see #TextView_textEditSideNoPasteWindowLayout
           @see #TextView_textEditSidePasteWindowLayout
           @see #TextView_textEditSuggestionItemLayout
           @see #TextView_textIsSelectable
           @see #TextView_textScaleX
           @see #TextView_textSelectHandle
           @see #TextView_textSelectHandleLeft
           @see #TextView_textSelectHandleRight
           @see #TextView_textSize
           @see #TextView_textStyle
           @see #TextView_typeface
           @see #TextView_width
         */
        public: static const int TextView[79];
        /**
          <p>
          @attr description
           Controls whether links such as urls and email addresses are
         automatically found and converted to clickable links.  The default
         value is "none", disabling this feature. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00</td><td> Match no patterns (default). </td></tr>
<tr><td><code>web</code></td><td>0x01</td><td> Match Web URLs. </td></tr>
<tr><td><code>email</code></td><td>0x02</td><td> Match email addresses. </td></tr>
<tr><td><code>phone</code></td><td>0x04</td><td> Match phone numbers. </td></tr>
<tr><td><code>map</code></td><td>0x08</td><td> Match map addresses. </td></tr>
<tr><td><code>all</code></td><td>0x0f</td><td> Match all patterns (equivalent to web|email|phone|map). </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoLink}.
          @attr name android:autoLink
        */
        public: static const int TextView_autoLink = 11;
        /**
          <p>
          @attr description
           If set, specifies that this TextView has a textual input method
             and automatically corrects some common spelling errors.
             The default is "false".
             {@deprecated Use inputType instead.} 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoText}.
          @attr name android:autoText
        */
        public: static const int TextView_autoText = 45;
        /**
          <p>
          @attr description
           Determines the minimum type that getText() will return.
             The default is "normal".
             Note that EditText and LogTextBox always return Editable,
             even if you specify something less powerful here. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> Can return any CharSequence, possibly a
             Spanned one if the source text was Spanned. </td></tr>
<tr><td><code>spannable</code></td><td>1</td><td> Can only return Spannable. </td></tr>
<tr><td><code>editable</code></td><td>2</td><td> Can only return Spannable and Editable. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#bufferType}.
          @attr name android:bufferType
        */
        public: static const int TextView_bufferType = 17;
        /**
          <p>
          @attr description
           If set, specifies that this TextView has a textual input method
             and should automatically capitalize what the user types.
             The default is "none".
             {@deprecated Use inputType instead.} 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Don't automatically capitalize anything. </td></tr>
<tr><td><code>sentences</code></td><td>1</td><td> Capitalize the first word of each sentence. </td></tr>
<tr><td><code>words</code></td><td>2</td><td> Capitalize the first letter of every word. </td></tr>
<tr><td><code>characters</code></td><td>3</td><td> Capitalize every character. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#capitalize}.
          @attr name android:capitalize
        */
        public: static const int TextView_capitalize = 44;
        /**
          <p>
          @attr description
           Makes the cursor visible (the default) or invisible. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#cursorVisible}.
          @attr name android:cursorVisible
        */
        public: static const int TextView_cursorVisible = 21;
        /**
          <p>
          @attr description
           If set, specifies that this TextView has a numeric input method
             and that these specific characters are the ones that it will
             accept.
             If this is set, numeric is implied to be true.
             The default is false. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#digits}.
          @attr name android:digits
        */
        public: static const int TextView_digits = 41;
        /**
          <p>
          @attr description
           The drawable to be drawn below the text. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawableBottom}.
          @attr name android:drawableBottom
        */
        public: static const int TextView_drawableBottom = 49;
        /**
          <p>
          @attr description
           The drawable to be drawn to the end of the text. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawableEnd}.
          @attr name android:drawableEnd
        */
        public: static const int TextView_drawableEnd = 74;
        /**
          <p>
          @attr description
           The drawable to be drawn to the left of the text. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawableLeft}.
          @attr name android:drawableLeft
        */
        public: static const int TextView_drawableLeft = 50;
        /**
          <p>
          @attr description
           The padding between the drawables and the text. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawablePadding}.
          @attr name android:drawablePadding
        */
        public: static const int TextView_drawablePadding = 52;
        /**
          <p>
          @attr description
           The drawable to be drawn to the right of the text. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawableRight}.
          @attr name android:drawableRight
        */
        public: static const int TextView_drawableRight = 51;
        /**
          <p>
          @attr description
           The drawable to be drawn to the start of the text. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawableStart}.
          @attr name android:drawableStart
        */
        public: static const int TextView_drawableStart = 73;
        /**
          <p>
          @attr description
           The drawable to be drawn above the text. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawableTop}.
          @attr name android:drawableTop
        */
        public: static const int TextView_drawableTop = 48;
        /**
          <p>
          @attr description
           If set, specifies that this TextView has an input method.
             It will be a textual one unless it has otherwise been specified.
             For TextView, this is false by default.  For EditText, it is
             true by default.
             {@deprecated Use inputType instead.} 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#editable}.
          @attr name android:editable
        */
        public: static const int TextView_editable = 46;
        /**
          <p>
          @attr description
           Reference to an
             {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
             XML resource containing additional data to
             supply to an input method, which is private to the implementation
             of the input method.  This simply fills in
             the {@link android.view.inputmethod.EditorInfo#extras
             EditorInfo.extras} field when the input
             method is connected. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#editorExtras}.
          @attr name android:editorExtras
        */
        public: static const int TextView_editorExtras = 58;
        /**
          <p>
          @attr description
           Elegant text height, especially for less compacted complex script text. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#elegantTextHeight}.
          @attr name android:elegantTextHeight
        */
        public: static const int TextView_elegantTextHeight = 76;
        /**
          <p>
          @attr description
           If set, causes words that are longer than the view is wide
             to be ellipsized instead of broken in the middle.
             You will often also want to set scrollHorizontally or singleLine
             as well so that the text as a whole is also constrained to
             a single line instead of still allowed to be broken onto
             multiple lines. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>start</code></td><td>1</td><td></td></tr>
<tr><td><code>middle</code></td><td>2</td><td></td></tr>
<tr><td><code>end</code></td><td>3</td><td></td></tr>
<tr><td><code>marquee</code></td><td>4</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ellipsize}.
          @attr name android:ellipsize
        */
        public: static const int TextView_ellipsize = 9;
        /**
          <p>
          @attr description
           Makes the TextView be exactly this many ems wide. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ems}.
          @attr name android:ems
        */
        public: static const int TextView_ems = 27;
        /**
          <p>
          @attr description
           Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
             For example, a non-enabled EditText prevents the user from editing the contained text, and
             a non-enabled Button prevents the user from tapping the button.
             The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
             from evaluating state_enabled differ. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#enabled}.
          @attr name android:enabled
        */
        public: static const int TextView_enabled = 0;
        /**
          <p>
          @attr description
           Font family (named by string) for the text. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fontFamily}.
          @attr name android:fontFamily
        */
        public: static const int TextView_fontFamily = 75;
        /**
          <p>
          @attr description
           Font feature settings. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fontFeatureSettings}.
          @attr name android:fontFeatureSettings
        */
        public: static const int TextView_fontFeatureSettings = 78;
        /**
          <p>
          @attr description
           If set, the text view will include its current complete text
             inside of its frozen icicle in addition to meta-data such as
             the current cursor position.  By default this is disabled;
             it can be useful when the contents of a text view is not stored
             in a persistent place such as a content provider. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#freezesText}.
          @attr name android:freezesText
        */
        public: static const int TextView_freezesText = 47;
        /**
          <p>
          @attr description
           Specifies how to align the text by the view's x- and/or y-axis
             when the text is smaller than the view. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int TextView_gravity = 10;
        /**
          <p>
          @attr description
           Makes the TextView be exactly this many pixels tall.
             You could get the same effect by specifying this number in the
             layout parameters. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#height}.
          @attr name android:height
        */
        public: static const int TextView_height = 24;
        /**
          <p>
          @attr description
           Hint text to display when the text is empty. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#hint}.
          @attr name android:hint
        */
        public: static const int TextView_hint = 19;
        /**
          <p>
          @attr description
           Supply a value for
             {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
             used when an input method is connected to the text view. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeActionId}.
          @attr name android:imeActionId
        */
        public: static const int TextView_imeActionId = 61;
        /**
          <p>
          @attr description
           Supply a value for
             {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
             used when an input method is connected to the text view. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeActionLabel}.
          @attr name android:imeActionLabel
        */
        public: static const int TextView_imeActionLabel = 60;
        /**
          <p>
          @attr description
           Additional features you can enable in an IME associated with an editor
         to improve the integration with your application.  The constants
         here correspond to those defined by
         {@link android.view.inputmethod.EditorInfo#imeOptions}. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0x00000000</td><td> There are no special semantics associated with this editor. </td></tr>
<tr><td><code>actionUnspecified</code></td><td>0x00000000</td><td> There is no specific action associated with this editor, let the
             editor come up with its own if it can.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_NULL}. </td></tr>
<tr><td><code>actionNone</code></td><td>0x00000001</td><td> This editor has no action associated with it.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}. </td></tr>
<tr><td><code>actionGo</code></td><td>0x00000002</td><td> The action key performs a "go"
             operation to take the user to the target of the text they typed.
             Typically used, for example, when entering a URL.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}. </td></tr>
<tr><td><code>actionSearch</code></td><td>0x00000003</td><td> The action key performs a "search"
             operation, taking the user to the results of searching for the text
             the have typed (in whatever context is appropriate).
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}. </td></tr>
<tr><td><code>actionSend</code></td><td>0x00000004</td><td> The action key performs a "send"
             operation, delivering the text to its target.  This is typically used
             when composing a message.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}. </td></tr>
<tr><td><code>actionNext</code></td><td>0x00000005</td><td> The action key performs a "next"
             operation, taking the user to the next field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}. </td></tr>
<tr><td><code>actionDone</code></td><td>0x00000006</td><td> The action key performs a "done"
             operation, closing the soft input method.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}. </td></tr>
<tr><td><code>actionPrevious</code></td><td>0x00000007</td><td> The action key performs a "previous"
             operation, taking the user to the previous field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}. </td></tr>
<tr><td><code>flagNoFullscreen</code></td><td>0x2000000</td><td> Used to request that the IME never go
             into fullscreen mode.  Applications need to be aware that the flag is not
             a guarantee, and not all IMEs will respect it.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. </td></tr>
<tr><td><code>flagNavigatePrevious</code></td><td>0x4000000</td><td> Like flagNavigateNext, but
             specifies there is something interesting that a backward navigation
             can focus on.  If the user selects the IME's facility to backward
             navigate, this will show up in the application as an actionPrevious
             at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. </td></tr>
<tr><td><code>flagNavigateNext</code></td><td>0x8000000</td><td> Used to specify that there is something
             interesting that a forward navigation can focus on. This is like using
             actionNext, except allows the IME to be multiline (with
             an enter key) as well as provide forward navigation.  Note that some
             IMEs may not be able to do this, especially when running on a small
             screen where there is little space.  In that case it does not need to
             present a UI for this option.  Like actionNext, if the
             user selects the IME's facility to forward navigate, this will show up
             in the application at
             {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}. </td></tr>
<tr><td><code>flagNoExtractUi</code></td><td>0x10000000</td><td> Used to specify that the IME does not need
             to show its extracted text UI.  For input methods that may be fullscreen,
             often when in landscape mode, this allows them to be smaller and let part
             of the application be shown behind.  Though there will likely be limited
             access to the application available from the user, it can make the
             experience of a (mostly) fullscreen IME less jarring.  Note that when
             this flag is specified the IME may <em>not</em> be set up to be able
             to display text, so it should only be used in situations where this is
             not needed.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}. </td></tr>
<tr><td><code>flagNoAccessoryAction</code></td><td>0x20000000</td><td> Used in conjunction with a custom action, this indicates that the
             action should not be available as an accessory button when the
             input method is full-screen.
             Note that by setting this flag, there can be cases where the action
             is simply never available to the user.  Setting this generally means
             that you think showing text being edited is more important than the
             action you have supplied.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}. </td></tr>
<tr><td><code>flagNoEnterAction</code></td><td>0x40000000</td><td> Used in conjunction with a custom action,
             this indicates that the action should not be available in-line as
             a replacement for the "enter" key.  Typically this is
             because the action has such a significant impact or is not recoverable
             enough that accidentally hitting it should be avoided, such as sending
             a message.    Note that {@link android.widget.TextView} will
             automatically set this flag for you on multi-line text views.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}. </td></tr>
<tr><td><code>flagForceAscii</code></td><td>0x80000000</td><td> Used to request that the IME should be capable of inputting ASCII
             characters.  The intention of this flag is to ensure that the user
             can type Roman alphabet characters in a {@link android.widget.TextView}
             used for, typically, account ID or password input.  It is expected that IMEs
             normally are able to input ASCII even without being told so (such IMEs
             already respect this flag in a sense), but there could be some cases they
             aren't when, for instance, only non-ASCII input languagaes like Arabic,
             Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
             aware that the flag is not a guarantee, and not all IMEs will respect it.
             However, it is strongly recommended for IME authors to respect this flag
             especially when their IME could end up with a state that has only non-ASCII
             input languages enabled.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imeOptions}.
          @attr name android:imeOptions
        */
        public: static const int TextView_imeOptions = 59;
        /**
          <p>
          @attr description
           Leave enough room for ascenders and descenders instead of
             using the font ascent and descent strictly.  (Normally true). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#includeFontPadding}.
          @attr name android:includeFontPadding
        */
        public: static const int TextView_includeFontPadding = 34;
        /**
          <p>
          @attr description
           If set, specifies that this TextView should use the specified
             input method (specified by fully-qualified class name).
             {@deprecated Use inputType instead.} 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#inputMethod}.
          @attr name android:inputMethod
        */
        public: static const int TextView_inputMethod = 43;
        /**
          <p>
          @attr description
           The type of data being placed in a text field, used to help an
         input method decide how to let the user enter text.  The constants
         here correspond to those defined by
         {@link android.text.InputType}.  Generally you can select
         a single value, though some can be combined together as
         indicated.  Setting this attribute to anything besides
         <var>none</var> also implies that the text is editable. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> There is no content type.  The text is not editable. </td></tr>
<tr><td><code>text</code></td><td>0x00000001</td><td> Just plain old text.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}. </td></tr>
<tr><td><code>textCapCharacters</code></td><td>0x00001001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of all characters.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}. </td></tr>
<tr><td><code>textCapWords</code></td><td>0x00002001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every word.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}. </td></tr>
<tr><td><code>textCapSentences</code></td><td>0x00004001</td><td> Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every sentence.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}. </td></tr>
<tr><td><code>textAutoCorrect</code></td><td>0x00008001</td><td> Can be combined with <var>text</var> and its variations to
             request auto-correction of text being input.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}. </td></tr>
<tr><td><code>textAutoComplete</code></td><td>0x00010001</td><td> Can be combined with <var>text</var> and its variations to
             specify that this field will be doing its own auto-completion and
             talking with the input method appropriately.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}. </td></tr>
<tr><td><code>textMultiLine</code></td><td>0x00020001</td><td> Can be combined with <var>text</var> and its variations to
             allow multiple lines of text in the field.  If this flag is not set,
             the text field will be constrained to a single line.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}. </td></tr>
<tr><td><code>textImeMultiLine</code></td><td>0x00040001</td><td> Can be combined with <var>text</var> and its variations to
             indicate that though the regular text view should not be multiple
             lines, the IME should provide multiple lines if it can.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}. </td></tr>
<tr><td><code>textNoSuggestions</code></td><td>0x00080001</td><td> Can be combined with <var>text</var> and its variations to
             indicate that the IME should not show any
             dictionary-based word suggestions.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}. </td></tr>
<tr><td><code>textUri</code></td><td>0x00000011</td><td> Text that will be used as a URI.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}. </td></tr>
<tr><td><code>textEmailAddress</code></td><td>0x00000021</td><td> Text that will be used as an e-mail address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}. </td></tr>
<tr><td><code>textEmailSubject</code></td><td>0x00000031</td><td> Text that is being supplied as the subject of an e-mail.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}. </td></tr>
<tr><td><code>textShortMessage</code></td><td>0x00000041</td><td> Text that is the content of a short message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}. </td></tr>
<tr><td><code>textLongMessage</code></td><td>0x00000051</td><td> Text that is the content of a long message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}. </td></tr>
<tr><td><code>textPersonName</code></td><td>0x00000061</td><td> Text that is the name of a person.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}. </td></tr>
<tr><td><code>textPostalAddress</code></td><td>0x00000071</td><td> Text that is being supplied as a postal mailing address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}. </td></tr>
<tr><td><code>textPassword</code></td><td>0x00000081</td><td> Text that is a password.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}. </td></tr>
<tr><td><code>textVisiblePassword</code></td><td>0x00000091</td><td> Text that is a password that should be visible.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}. </td></tr>
<tr><td><code>textWebEditText</code></td><td>0x000000a1</td><td> Text that is being supplied as text in a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}. </td></tr>
<tr><td><code>textFilter</code></td><td>0x000000b1</td><td> Text that is filtering some other data.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}. </td></tr>
<tr><td><code>textPhonetic</code></td><td>0x000000c1</td><td> Text that is for phonetic pronunciation, such as a phonetic name
             field in a contact entry.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}. </td></tr>
<tr><td><code>textWebEmailAddress</code></td><td>0x000000d1</td><td> Text that will be used as an e-mail address on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}. </td></tr>
<tr><td><code>textWebPassword</code></td><td>0x000000e1</td><td> Text that will be used as a password on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}. </td></tr>
<tr><td><code>number</code></td><td>0x00000002</td><td> A numeric only field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}. </td></tr>
<tr><td><code>numberSigned</code></td><td>0x00001002</td><td> Can be combined with <var>number</var> and its other options to
             allow a signed number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}. </td></tr>
<tr><td><code>numberDecimal</code></td><td>0x00002002</td><td> Can be combined with <var>number</var> and its other options to
             allow a decimal (fractional) number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}. </td></tr>
<tr><td><code>numberPassword</code></td><td>0x00000012</td><td> A numeric password field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}. </td></tr>
<tr><td><code>phone</code></td><td>0x00000003</td><td> For entering a phone number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_PHONE}. </td></tr>
<tr><td><code>datetime</code></td><td>0x00000004</td><td> For entering a date and time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}. </td></tr>
<tr><td><code>date</code></td><td>0x00000014</td><td> For entering a date.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}. </td></tr>
<tr><td><code>time</code></td><td>0x00000024</td><td> For entering a time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#inputType}.
          @attr name android:inputType
        */
        public: static const int TextView_inputType = 56;
        /**
          <p>
          @attr description
           Text letter-spacing. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#letterSpacing}.
          @attr name android:letterSpacing
        */
        public: static const int TextView_letterSpacing = 77;
        /**
          <p>
          @attr description
           Extra spacing between lines of text. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#lineSpacingExtra}.
          @attr name android:lineSpacingExtra
        */
        public: static const int TextView_lineSpacingExtra = 53;
        /**
          <p>
          @attr description
           Extra spacing between lines of text, as a multiplier. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#lineSpacingMultiplier}.
          @attr name android:lineSpacingMultiplier
        */
        public: static const int TextView_lineSpacingMultiplier = 54;
        /**
          <p>
          @attr description
           Makes the TextView be exactly this many lines tall. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#lines}.
          @attr name android:lines
        */
        public: static const int TextView_lines = 23;
        /**
          <p>
          @attr description
           If set to false, keeps the movement method from being set
             to the link movement method even if autoLink causes links
             to be found. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#linksClickable}.
          @attr name android:linksClickable
        */
        public: static const int TextView_linksClickable = 12;
        /**
          <p>
          @attr description
           The number of times to repeat the marquee animation. Only applied if the
             TextView has marquee enabled. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>marquee_forever</code></td><td>-1</td><td> Indicates that marquee should repeat indefinitely. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#marqueeRepeatLimit}.
          @attr name android:marqueeRepeatLimit
        */
        public: static const int TextView_marqueeRepeatLimit = 55;
        /**
          <p>
          @attr description
           Makes the TextView be at most this many ems wide. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxEms}.
          @attr name android:maxEms
        */
        public: static const int TextView_maxEms = 26;
        /**
          <p>
          @attr description
           Makes the TextView be at most this many pixels tall. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxHeight}.
          @attr name android:maxHeight
        */
        public: static const int TextView_maxHeight = 14;
        /**
          <p>
          @attr description
           Set an input filter to constrain the text length to the
             specified number. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxLength}.
          @attr name android:maxLength
        */
        public: static const int TextView_maxLength = 35;
        /**
          <p>
          @attr description
           Makes the TextView be at most this many lines tall.

        When used on an editable text, the <code>inputType</code> attribute's value must be
        combined with the <code>textMultiLine</code> flag for the maxLines attribute to apply. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxLines}.
          @attr name android:maxLines
        */
        public: static const int TextView_maxLines = 22;
        /**
          <p>
          @attr description
           Makes the TextView be at most this many pixels wide. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#maxWidth}.
          @attr name android:maxWidth
        */
        public: static const int TextView_maxWidth = 13;
        /**
          <p>
          @attr description
           Makes the TextView be at least this many ems wide. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minEms}.
          @attr name android:minEms
        */
        public: static const int TextView_minEms = 29;
        /**
          <p>
          @attr description
           Makes the TextView be at least this many pixels tall. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minHeight}.
          @attr name android:minHeight
        */
        public: static const int TextView_minHeight = 16;
        /**
          <p>
          @attr description
           Makes the TextView be at least this many lines tall.

        When used on an editable text, the <code>inputType</code> attribute's value must be
        combined with the <code>textMultiLine</code> flag for the minLines attribute to apply. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minLines}.
          @attr name android:minLines
        */
        public: static const int TextView_minLines = 25;
        /**
          <p>
          @attr description
           Makes the TextView be at least this many pixels wide. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minWidth}.
          @attr name android:minWidth
        */
        public: static const int TextView_minWidth = 15;
        /**
          <p>
          @attr description
           If set, specifies that this TextView has a numeric input method.
             The default is false.
             {@deprecated Use inputType instead.} 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>integer</code></td><td>0x01</td><td> Input is numeric. </td></tr>
<tr><td><code>signed</code></td><td>0x03</td><td> Input is numeric, with sign allowed. </td></tr>
<tr><td><code>decimal</code></td><td>0x05</td><td> Input is numeric, with decimals allowed. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#numeric}.
          @attr name android:numeric
        */
        public: static const int TextView_numeric = 40;
        /**
          <p>
          @attr description
           Whether the characters of the field are displayed as
             password dots instead of themselves.
             {@deprecated Use inputType instead.} 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#password}.
          @attr name android:password
        */
        public: static const int TextView_password = 31;
        /**
          <p>
          @attr description
           If set, specifies that this TextView has a phone number input
             method. The default is false.
             {@deprecated Use inputType instead.} 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#phoneNumber}.
          @attr name android:phoneNumber
        */
        public: static const int TextView_phoneNumber = 42;
        /**
          <p>
          @attr description
           An addition content type description to supply to the input
             method attached to the text view, which is private to the
             implementation of the input method.  This simply fills in
             the {@link android.view.inputmethod.EditorInfo#privateImeOptions
             EditorInfo.privateImeOptions} field when the input
             method is connected. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#privateImeOptions}.
          @attr name android:privateImeOptions
        */
        public: static const int TextView_privateImeOptions = 57;
        /**
          <p>
          @attr description
           Whether the text is allowed to be wider than the view (and
             therefore can be scrolled horizontally). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollHorizontally}.
          @attr name android:scrollHorizontally
        */
        public: static const int TextView_scrollHorizontally = 30;
        /**
          <p>
          @attr description
           If the text is selectable, select it all when the view takes
             focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#selectAllOnFocus}.
          @attr name android:selectAllOnFocus
        */
        public: static const int TextView_selectAllOnFocus = 33;
        /**
          <p>
          @attr description
           Place a blurred shadow of text underneath the text, drawn with the
             specified color. The text shadow produced does not interact with
             properties on View that are responsible for real time shadows,
             {@link android.R.styleable#View_elevation elevation} and
             {@link android.R.styleable#View_translationZ translationZ}. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shadowColor}.
          @attr name android:shadowColor
        */
        public: static const int TextView_shadowColor = 36;
        /**
          <p>
          @attr description
           Horizontal offset of the text shadow. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shadowDx}.
          @attr name android:shadowDx
        */
        public: static const int TextView_shadowDx = 37;
        /**
          <p>
          @attr description
           Vertical offset of the text shadow. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shadowDy}.
          @attr name android:shadowDy
        */
        public: static const int TextView_shadowDy = 38;
        /**
          <p>
          @attr description
           Blur radius of the text shadow. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#shadowRadius}.
          @attr name android:shadowRadius
        */
        public: static const int TextView_shadowRadius = 39;
        /**
          <p>
          @attr description
           Constrains the text to a single horizontally scrolling line
             instead of letting it wrap onto multiple lines, and advances
             focus instead of inserting a newline when you press the
             enter key.

             The default value is false (multi-line wrapped text mode) for non-editable text, but if
             you specify any value for inputType, the default is true (single-line input field mode).

             {@deprecated This attribute is deprecated. Use <code>maxLines</code> instead to change
             the layout of a static text, and use the <code>textMultiLine</code> flag in the
             inputType attribute instead for editable text views (if both singleLine and inputType
             are supplied, the inputType flags will override the value of singleLine). } 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#singleLine}.
          @attr name android:singleLine
        */
        public: static const int TextView_singleLine = 32;
        /**
          <p>
          @attr description
           Text to display. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#text}.
          @attr name android:text
        */
        public: static const int TextView_text = 18;
        /**
          <p>
          @attr description
           Present the text in ALL CAPS. This may use a small-caps form when available. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAllCaps}.
          @attr name android:textAllCaps
        */
        public: static const int TextView_textAllCaps = 72;
        /**
          <p>
          @attr description
           Base text color, typeface, size, and style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearance}.
          @attr name android:textAppearance
        */
        public: static const int TextView_textAppearance = 1;
        /**
          <p>
          @attr description
           Text color. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColor}.
          @attr name android:textColor
        */
        public: static const int TextView_textColor = 5;
        /**
          <p>
          @attr description
           Color of the text selection highlight. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorHighlight}.
          @attr name android:textColorHighlight
        */
        public: static const int TextView_textColorHighlight = 6;
        /**
          <p>
          @attr description
           Color of the hint text. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorHint}.
          @attr name android:textColorHint
        */
        public: static const int TextView_textColorHint = 7;
        /**
          <p>
          @attr description
           Text color for links. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorLink}.
          @attr name android:textColorLink
        */
        public: static const int TextView_textColorLink = 8;
        /**
          <p>
          @attr description
           Reference to a drawable that will be drawn under the insertion cursor. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textCursorDrawable}.
          @attr name android:textCursorDrawable
        */
        public: static const int TextView_textCursorDrawable = 70;
        /**
          <p>
          @attr description
           Variation of textEditPasteWindowLayout displayed when the clipboard is empty. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textEditNoPasteWindowLayout}.
          @attr name android:textEditNoPasteWindowLayout
        */
        public: static const int TextView_textEditNoPasteWindowLayout = 66;
        /**
          <p>
          @attr description
           The layout of the view that is displayed on top of the cursor to paste inside a
             TextEdit field. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textEditPasteWindowLayout}.
          @attr name android:textEditPasteWindowLayout
        */
        public: static const int TextView_textEditPasteWindowLayout = 65;
        /**
          <p>
          @attr description
           Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textEditSideNoPasteWindowLayout}.
          @attr name android:textEditSideNoPasteWindowLayout
        */
        public: static const int TextView_textEditSideNoPasteWindowLayout = 69;
        /**
          <p>
          @attr description
           Used instead of textEditPasteWindowLayout when the window is moved on the side of the
             insertion cursor because it would be clipped if it were positioned on top. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textEditSidePasteWindowLayout}.
          @attr name android:textEditSidePasteWindowLayout
        */
        public: static const int TextView_textEditSidePasteWindowLayout = 68;
        /**
          <p>
          @attr description
           Layout of the TextView item that will populate the suggestion popup window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textEditSuggestionItemLayout}.
          @attr name android:textEditSuggestionItemLayout
        */
        public: static const int TextView_textEditSuggestionItemLayout = 71;
        /**
          <p>
          @attr description
           Indicates that the content of a non-editable text can be selected. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textIsSelectable}.
          @attr name android:textIsSelectable
        */
        public: static const int TextView_textIsSelectable = 67;
        /**
          <p>
          @attr description
           Sets the horizontal scaling factor for the text. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textScaleX}.
          @attr name android:textScaleX
        */
        public: static const int TextView_textScaleX = 20;
        /**
          <p>
          @attr description
           Reference to a drawable that will be used to display a text selection
             anchor for positioning the cursor within text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSelectHandle}.
          @attr name android:textSelectHandle
        */
        public: static const int TextView_textSelectHandle = 64;
        /**
          <p>
          @attr description
           Reference to a drawable that will be used to display a text selection
             anchor on the left side of a selection region. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSelectHandleLeft}.
          @attr name android:textSelectHandleLeft
        */
        public: static const int TextView_textSelectHandleLeft = 62;
        /**
          <p>
          @attr description
           Reference to a drawable that will be used to display a text selection
             anchor on the right side of a selection region. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSelectHandleRight}.
          @attr name android:textSelectHandleRight
        */
        public: static const int TextView_textSelectHandleRight = 63;
        /**
          <p>
          @attr description
           Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp). 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSize}.
          @attr name android:textSize
        */
        public: static const int TextView_textSize = 2;
        /**
          <p>
          @attr description
           Style (bold, italic, bolditalic) for the text. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td></td></tr>
<tr><td><code>bold</code></td><td>1</td><td></td></tr>
<tr><td><code>italic</code></td><td>2</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textStyle}.
          @attr name android:textStyle
        */
        public: static const int TextView_textStyle = 4;
        /**
          <p>
          @attr description
           Typeface (normal, sans, serif, monospace) for the text. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td></td></tr>
<tr><td><code>sans</code></td><td>1</td><td></td></tr>
<tr><td><code>serif</code></td><td>2</td><td></td></tr>
<tr><td><code>monospace</code></td><td>3</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#typeface}.
          @attr name android:typeface
        */
        public: static const int TextView_typeface = 3;
        /**
          <p>
          @attr description
           Makes the TextView be exactly this many pixels wide.
             You could get the same effect by specifying this number in the
             layout parameters. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#width}.
          @attr name android:width
        */
        public: static const int TextView_width = 28;
        /** Attributes that can be used with a TextViewAppearance.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TextViewAppearance_textAppearance android:textAppearance}</code></td><td> Base text color, typeface, size, and style.</td></tr>
           </table>
           @see #TextViewAppearance_textAppearance
         */
        public: static const int TextViewAppearance[1];
        /**
          <p>
          @attr description
           Base text color, typeface, size, and style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearance}.
          @attr name android:textAppearance
        */
        public: static const int TextViewAppearance_textAppearance = 0;
        /** Attributes that can be used with a TextViewMultiLineBackgroundState.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TextViewMultiLineBackgroundState_state_multiline android:state_multiline}</code></td><td> State identifier indicating a TextView has a multi-line layout.</td></tr>
           </table>
           @see #TextViewMultiLineBackgroundState_state_multiline
         */
        public: static const int TextViewMultiLineBackgroundState[1];
        /**
          <p>
          @attr description
           State identifier indicating a TextView has a multi-line layout. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_multiline}.
          @attr name android:state_multiline
        */
        public: static const int TextViewMultiLineBackgroundState_state_multiline = 0;
        /**  These are the standard attributes that make up a complete theme. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Theme_absListViewStyle android:absListViewStyle}</code></td><td> Default AbsListView style.</td></tr>
           <tr><td><code>{@link #Theme_accessibilityFocusedDrawable android:accessibilityFocusedDrawable}</code></td><td> The drawable for accessibility focused views.</td></tr>
           <tr><td><code>{@link #Theme_actionBarDivider android:actionBarDivider}</code></td><td> Custom divider drawable to use for elements in the action bar.</td></tr>
           <tr><td><code>{@link #Theme_actionBarItemBackground android:actionBarItemBackground}</code></td><td> Custom item state list drawable background for action bar items.</td></tr>
           <tr><td><code>{@link #Theme_actionBarPopupTheme android:actionBarPopupTheme}</code></td><td> Reference to a theme that should be used to inflate popups
             shown by widgets in the action bar.</td></tr>
           <tr><td><code>{@link #Theme_actionBarSize android:actionBarSize}</code></td><td> Size of the Action Bar, including the contextual
             bar used to present Action Modes.</td></tr>
           <tr><td><code>{@link #Theme_actionBarSplitStyle android:actionBarSplitStyle}</code></td><td> Reference to a style for the split Action Bar.</td></tr>
           <tr><td><code>{@link #Theme_actionBarStyle android:actionBarStyle}</code></td><td> Reference to a style for the Action Bar </td></tr>
           <tr><td><code>{@link #Theme_actionBarTabBarStyle android:actionBarTabBarStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_actionBarTabStyle android:actionBarTabStyle}</code></td><td> Default style for tabs within an action bar </td></tr>
           <tr><td><code>{@link #Theme_actionBarTabTextStyle android:actionBarTabTextStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_actionBarTheme android:actionBarTheme}</code></td><td> Reference to a theme that should be used to inflate the
             action bar.</td></tr>
           <tr><td><code>{@link #Theme_actionBarWidgetTheme android:actionBarWidgetTheme}</code></td><td> Reference to a theme that should be used to inflate widgets
             and layouts destined for the action bar.</td></tr>
           <tr><td><code>{@link #Theme_actionButtonStyle android:actionButtonStyle}</code></td><td> Default action button style.</td></tr>
           <tr><td><code>{@link #Theme_actionDropDownStyle android:actionDropDownStyle}</code></td><td> Default ActionBar dropdown style.</td></tr>
           <tr><td><code>{@link #Theme_actionMenuTextAppearance android:actionMenuTextAppearance}</code></td><td> TextAppearance style that will be applied to text that
             appears within action menu items.</td></tr>
           <tr><td><code>{@link #Theme_actionMenuTextColor android:actionMenuTextColor}</code></td><td> Color for text that appears within action menu items.</td></tr>
           <tr><td><code>{@link #Theme_actionModeBackground android:actionModeBackground}</code></td><td> Background drawable to use for action mode UI </td></tr>
           <tr><td><code>{@link #Theme_actionModeCloseButtonStyle android:actionModeCloseButtonStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_actionModeCloseDrawable android:actionModeCloseDrawable}</code></td><td> Drawable to use for the close action mode button </td></tr>
           <tr><td><code>{@link #Theme_actionModeCopyDrawable android:actionModeCopyDrawable}</code></td><td> Drawable to use for the Copy action button in Contextual Action Bar </td></tr>
           <tr><td><code>{@link #Theme_actionModeCutDrawable android:actionModeCutDrawable}</code></td><td> Drawable to use for the Cut action button in Contextual Action Bar </td></tr>
           <tr><td><code>{@link #Theme_actionModeFindDrawable android:actionModeFindDrawable}</code></td><td> Drawable to use for the Find action button in WebView selection action modes </td></tr>
           <tr><td><code>{@link #Theme_actionModePasteDrawable android:actionModePasteDrawable}</code></td><td> Drawable to use for the Paste action button in Contextual Action Bar </td></tr>
           <tr><td><code>{@link #Theme_actionModePopupWindowStyle android:actionModePopupWindowStyle}</code></td><td> PopupWindow style to use for action modes when showing as a window overlay.</td></tr>
           <tr><td><code>{@link #Theme_actionModeSelectAllDrawable android:actionModeSelectAllDrawable}</code></td><td> Drawable to use for the Select all action button in Contextual Action Bar </td></tr>
           <tr><td><code>{@link #Theme_actionModeShareDrawable android:actionModeShareDrawable}</code></td><td> Drawable to use for the Share action button in WebView selection action modes </td></tr>
           <tr><td><code>{@link #Theme_actionModeSplitBackground android:actionModeSplitBackground}</code></td><td> Background drawable to use for action mode UI in the lower split bar </td></tr>
           <tr><td><code>{@link #Theme_actionModeStyle android:actionModeStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_actionModeWebSearchDrawable android:actionModeWebSearchDrawable}</code></td><td> Drawable to use for the Web Search action button in WebView selection action modes </td></tr>
           <tr><td><code>{@link #Theme_actionOverflowButtonStyle android:actionOverflowButtonStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_actionOverflowMenuStyle android:actionOverflowMenuStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_activatedBackgroundIndicator android:activatedBackgroundIndicator}</code></td><td> Drawable used as a background for activated items.</td></tr>
           <tr><td><code>{@link #Theme_activityChooserViewStyle android:activityChooserViewStyle}</code></td><td> Default ActivityChooserView style.</td></tr>
           <tr><td><code>{@link #Theme_alertDialogButtonGroupStyle android:alertDialogButtonGroupStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_alertDialogCenterButtons android:alertDialogCenterButtons}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_alertDialogIcon android:alertDialogIcon}</code></td><td> Icon drawable to use for alerts </td></tr>
           <tr><td><code>{@link #Theme_alertDialogStyle android:alertDialogStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_alertDialogTheme android:alertDialogTheme}</code></td><td> Theme to use for alert dialogs spawned from this theme.</td></tr>
           <tr><td><code>{@link #Theme_ambientShadowAlpha android:ambientShadowAlpha}</code></td><td> Alpha value of the ambient shadow projected by elevated views, between 0 and 1.</td></tr>
           <tr><td><code>{@link #Theme_autoCompleteTextViewStyle android:autoCompleteTextViewStyle}</code></td><td> Default AutoCompleteTextView style.</td></tr>
           <tr><td><code>{@link #Theme_backgroundDimAmount android:backgroundDimAmount}</code></td><td> Default background dim amount when a menu, dialog, or something similar pops up.</td></tr>
           <tr><td><code>{@link #Theme_backgroundDimEnabled android:backgroundDimEnabled}</code></td><td> Control whether dimming behind the window is enabled.</td></tr>
           <tr><td><code>{@link #Theme_borderlessButtonStyle android:borderlessButtonStyle}</code></td><td> Style for buttons without an explicit border, often used in groups.</td></tr>
           <tr><td><code>{@link #Theme_buttonBarButtonStyle android:buttonBarButtonStyle}</code></td><td> Style for buttons within button bars </td></tr>
           <tr><td><code>{@link #Theme_buttonBarNegativeButtonStyle android:buttonBarNegativeButtonStyle}</code></td><td> Style for the "negative" buttons within button bars </td></tr>
           <tr><td><code>{@link #Theme_buttonBarNeutralButtonStyle android:buttonBarNeutralButtonStyle}</code></td><td> Style for the "neutral" buttons within button bars </td></tr>
           <tr><td><code>{@link #Theme_buttonBarPositiveButtonStyle android:buttonBarPositiveButtonStyle}</code></td><td> Style for the "positive" buttons within button bars </td></tr>
           <tr><td><code>{@link #Theme_buttonBarStyle android:buttonBarStyle}</code></td><td> Style for button bars </td></tr>
           <tr><td><code>{@link #Theme_buttonStyle android:buttonStyle}</code></td><td> Normal Button style.</td></tr>
           <tr><td><code>{@link #Theme_buttonStyleInset android:buttonStyleInset}</code></td><td> Button style to inset into an EditText.</td></tr>
           <tr><td><code>{@link #Theme_buttonStyleSmall android:buttonStyleSmall}</code></td><td> Small Button style.</td></tr>
           <tr><td><code>{@link #Theme_buttonStyleToggle android:buttonStyleToggle}</code></td><td> ToggleButton style.</td></tr>
           <tr><td><code>{@link #Theme_calendarViewStyle android:calendarViewStyle}</code></td><td> The CalendarView style.</td></tr>
           <tr><td><code>{@link #Theme_candidatesTextStyleSpans android:candidatesTextStyleSpans}</code></td><td> A styled string, specifying the style to be used for showing
             inline candidate text when composing with an input method.</td></tr>
           <tr><td><code>{@link #Theme_checkBoxPreferenceStyle android:checkBoxPreferenceStyle}</code></td><td> Default style for CheckBoxPreference.</td></tr>
           <tr><td><code>{@link #Theme_checkboxStyle android:checkboxStyle}</code></td><td> Default Checkbox style.</td></tr>
           <tr><td><code>{@link #Theme_checkedTextViewStyle android:checkedTextViewStyle}</code></td><td> Default CheckedTextView style.</td></tr>
           <tr><td><code>{@link #Theme_colorAccent android:colorAccent}</code></td><td> Bright complement to the primary branding color.</td></tr>
           <tr><td><code>{@link #Theme_colorActivatedHighlight android:colorActivatedHighlight}</code></td><td> Default highlight color for items that are
             activated.</td></tr>
           <tr><td><code>{@link #Theme_colorBackground android:colorBackground}</code></td><td> Color that matches (as closely as possible) the window background.</td></tr>
           <tr><td><code>{@link #Theme_colorBackgroundCacheHint android:colorBackgroundCacheHint}</code></td><td> This is a hint for a solid color that can be used for caching
             rendered views.</td></tr>
           <tr><td><code>{@link #Theme_colorButtonNormal android:colorButtonNormal}</code></td><td> The color applied to framework buttons in their normal state.</td></tr>
           <tr><td><code>{@link #Theme_colorControlActivated android:colorControlActivated}</code></td><td> The color applied to framework controls in their activated (ex.</td></tr>
           <tr><td><code>{@link #Theme_colorControlHighlight android:colorControlHighlight}</code></td><td> The color applied to framework control highlights (ex.</td></tr>
           <tr><td><code>{@link #Theme_colorControlNormal android:colorControlNormal}</code></td><td> The color applied to framework controls in their normal state.</td></tr>
           <tr><td><code>{@link #Theme_colorEdgeEffect android:colorEdgeEffect}</code></td><td> The color applied to the edge effect on scrolling containers.</td></tr>
           <tr><td><code>{@link #Theme_colorFocusedHighlight android:colorFocusedHighlight}</code></td><td> Default highlight color for items that are
             focused.</td></tr>
           <tr><td><code>{@link #Theme_colorForeground android:colorForeground}</code></td><td> Default color of foreground imagery.</td></tr>
           <tr><td><code>{@link #Theme_colorForegroundInverse android:colorForegroundInverse}</code></td><td> Default color of foreground imagery on an inverted background.</td></tr>
           <tr><td><code>{@link #Theme_colorLongPressedHighlight android:colorLongPressedHighlight}</code></td><td> Default highlight color for items that are long-pressed.</td></tr>
           <tr><td><code>{@link #Theme_colorMultiSelectHighlight android:colorMultiSelectHighlight}</code></td><td> Default highlight color for items in multiple selection
             mode.</td></tr>
           <tr><td><code>{@link #Theme_colorPressedHighlight android:colorPressedHighlight}</code></td><td> Default highlight color for items that are pressed.</td></tr>
           <tr><td><code>{@link #Theme_colorPrimary android:colorPrimary}</code></td><td> The primary branding color for the app.</td></tr>
           <tr><td><code>{@link #Theme_colorPrimaryDark android:colorPrimaryDark}</code></td><td> Dark variant of the primary branding color.</td></tr>
           <tr><td><code>{@link #Theme_colorSwitchThumbNormal android:colorSwitchThumbNormal}</code></td><td> The color applied to framework switch thumbs in their normal state.</td></tr>
           <tr><td><code>{@link #Theme_datePickerDialogTheme android:datePickerDialogTheme}</code></td><td> The DatePicker dialog theme.</td></tr>
           <tr><td><code>{@link #Theme_datePickerStyle android:datePickerStyle}</code></td><td> The DatePicker style.</td></tr>
           <tr><td><code>{@link #Theme_detailsElementBackground android:detailsElementBackground}</code></td><td> Background that can be used behind parts of a UI that provide
             details on data the user is selecting.</td></tr>
           <tr><td><code>{@link #Theme_dialogCustomTitleDecorLayout android:dialogCustomTitleDecorLayout}</code></td><td> Window decor layout to use in dialog mode with custom titles </td></tr>
           <tr><td><code>{@link #Theme_dialogPreferenceStyle android:dialogPreferenceStyle}</code></td><td> Default style for DialogPreference.</td></tr>
           <tr><td><code>{@link #Theme_dialogTheme android:dialogTheme}</code></td><td> Theme to use for dialogs spawned from this theme.</td></tr>
           <tr><td><code>{@link #Theme_dialogTitleDecorLayout android:dialogTitleDecorLayout}</code></td><td> Window decor layout to use in dialog mode with title only </td></tr>
           <tr><td><code>{@link #Theme_dialogTitleIconsDecorLayout android:dialogTitleIconsDecorLayout}</code></td><td> Window decor layout to use in dialog mode with icons </td></tr>
           <tr><td><code>{@link #Theme_disabledAlpha android:disabledAlpha}</code></td><td> Default disabled alpha for widgets that set enabled/disabled alpha programmatically.</td></tr>
           <tr><td><code>{@link #Theme_dividerHorizontal android:dividerHorizontal}</code></td><td> Drawable to use for generic horizontal dividers.</td></tr>
           <tr><td><code>{@link #Theme_dividerVertical android:dividerVertical}</code></td><td> Drawable to use for generic vertical dividers.</td></tr>
           <tr><td><code>{@link #Theme_dropDownHintAppearance android:dropDownHintAppearance}</code></td><td> Default style for drop down hints.</td></tr>
           <tr><td><code>{@link #Theme_dropDownItemStyle android:dropDownItemStyle}</code></td><td> Default style for drop down items.</td></tr>
           <tr><td><code>{@link #Theme_dropDownListViewStyle android:dropDownListViewStyle}</code></td><td> Default ListView style for drop downs.</td></tr>
           <tr><td><code>{@link #Theme_dropDownSpinnerStyle android:dropDownSpinnerStyle}</code></td><td> Default dropdown Spinner style.</td></tr>
           <tr><td><code>{@link #Theme_dropdownListPreferredItemHeight android:dropdownListPreferredItemHeight}</code></td><td> The preferred item height for dropdown lists.</td></tr>
           <tr><td><code>{@link #Theme_editTextBackground android:editTextBackground}</code></td><td> EditText background drawable.</td></tr>
           <tr><td><code>{@link #Theme_editTextColor android:editTextColor}</code></td><td> EditText text foreground color.</td></tr>
           <tr><td><code>{@link #Theme_editTextPreferenceStyle android:editTextPreferenceStyle}</code></td><td> Default style for EditTextPreference.</td></tr>
           <tr><td><code>{@link #Theme_editTextStyle android:editTextStyle}</code></td><td> Default EditText style.</td></tr>
           <tr><td><code>{@link #Theme_errorMessageAboveBackground android:errorMessageAboveBackground}</code></td><td> Background used instead of errorMessageBackground when the popup has to be above.</td></tr>
           <tr><td><code>{@link #Theme_errorMessageBackground android:errorMessageBackground}</code></td><td> Popup text displayed in TextView when setError is used.</td></tr>
           <tr><td><code>{@link #Theme_expandableListPreferredChildIndicatorLeft android:expandableListPreferredChildIndicatorLeft}</code></td><td> The preferred left bound for an expandable list child's indicator.</td></tr>
           <tr><td><code>{@link #Theme_expandableListPreferredChildIndicatorRight android:expandableListPreferredChildIndicatorRight}</code></td><td> The preferred right bound for an expandable list child's indicator.</td></tr>
           <tr><td><code>{@link #Theme_expandableListPreferredChildPaddingLeft android:expandableListPreferredChildPaddingLeft}</code></td><td> The preferred left padding for an expandable list item that is a child.</td></tr>
           <tr><td><code>{@link #Theme_expandableListPreferredItemIndicatorLeft android:expandableListPreferredItemIndicatorLeft}</code></td><td> The preferred left bound for an expandable list item's indicator.</td></tr>
           <tr><td><code>{@link #Theme_expandableListPreferredItemIndicatorRight android:expandableListPreferredItemIndicatorRight}</code></td><td> The preferred right bound for an expandable list item's indicator.</td></tr>
           <tr><td><code>{@link #Theme_expandableListPreferredItemPaddingLeft android:expandableListPreferredItemPaddingLeft}</code></td><td> The preferred left padding for an expandable list item (for child-specific layouts,
             use expandableListPreferredChildPaddingLeft).</td></tr>
           <tr><td><code>{@link #Theme_expandableListViewStyle android:expandableListViewStyle}</code></td><td> Default ExpandableListView style.</td></tr>
           <tr><td><code>{@link #Theme_expandableListViewWhiteStyle android:expandableListViewWhiteStyle}</code></td><td> ExpandableListView with white background.</td></tr>
           <tr><td><code>{@link #Theme_fastScrollOverlayPosition android:fastScrollOverlayPosition}</code></td><td> Position of the fast scroll index overlay window.</td></tr>
           <tr><td><code>{@link #Theme_fastScrollPreviewBackgroundLeft android:fastScrollPreviewBackgroundLeft}</code></td><td> Drawable to use as the fast scroll index preview window background
             when shown on the left.</td></tr>
           <tr><td><code>{@link #Theme_fastScrollPreviewBackgroundRight android:fastScrollPreviewBackgroundRight}</code></td><td> Drawable to use as the fast scroll index preview window background
             when shown on the right.</td></tr>
           <tr><td><code>{@link #Theme_fastScrollTextColor android:fastScrollTextColor}</code></td><td> Text color for the fast scroll index overlay.</td></tr>
           <tr><td><code>{@link #Theme_fastScrollThumbDrawable android:fastScrollThumbDrawable}</code></td><td> Drawable to use as the fast scroll thumb.</td></tr>
           <tr><td><code>{@link #Theme_fastScrollTrackDrawable android:fastScrollTrackDrawable}</code></td><td> Drawable to use as the track for the fast scroll thumb.</td></tr>
           <tr><td><code>{@link #Theme_findOnPageNextDrawable android:findOnPageNextDrawable}</code></td><td> Drawable for WebView find-on-page dialogue's "next" button.</td></tr>
           <tr><td><code>{@link #Theme_findOnPagePreviousDrawable android:findOnPagePreviousDrawable}</code></td><td> Drawable for WebView find-on-page dialogue's "previous" button.</td></tr>
           <tr><td><code>{@link #Theme_fragmentBreadCrumbsStyle android:fragmentBreadCrumbsStyle}</code></td><td> Default style for the FragmentBreadCrumbs widget.</td></tr>
           <tr><td><code>{@link #Theme_galleryItemBackground android:galleryItemBackground}</code></td><td> The preferred background for gallery items.</td></tr>
           <tr><td><code>{@link #Theme_galleryStyle android:galleryStyle}</code></td><td> Default Gallery style.</td></tr>
           <tr><td><code>{@link #Theme_gestureOverlayViewStyle android:gestureOverlayViewStyle}</code></td><td> Default GestureOverlayView style.</td></tr>
           <tr><td><code>{@link #Theme_gridViewStyle android:gridViewStyle}</code></td><td> Default GridView style.</td></tr>
           <tr><td><code>{@link #Theme_homeAsUpIndicator android:homeAsUpIndicator}</code></td><td> Specifies a drawable to use for the 'home as up' indicator.</td></tr>
           <tr><td><code>{@link #Theme_horizontalScrollViewStyle android:horizontalScrollViewStyle}</code></td><td> Default HorizontalScrollView style.</td></tr>
           <tr><td><code>{@link #Theme_imageButtonStyle android:imageButtonStyle}</code></td><td> The style resource to use for an ImageButton.</td></tr>
           <tr><td><code>{@link #Theme_imageWellStyle android:imageWellStyle}</code></td><td> The style resource to use for an ImageButton that is an image well.</td></tr>
           <tr><td><code>{@link #Theme_lightRadius android:lightRadius}</code></td><td> @hide The default radius of the light used to project view shadows.</td></tr>
           <tr><td><code>{@link #Theme_lightY android:lightY}</code></td><td> @hide The default Y position of the light used to project view shadows.</td></tr>
           <tr><td><code>{@link #Theme_lightZ android:lightZ}</code></td><td> @hide The default Z position of the light used to project view shadows.</td></tr>
           <tr><td><code>{@link #Theme_listChoiceBackgroundIndicator android:listChoiceBackgroundIndicator}</code></td><td> Drawable used as a background for selected list items.</td></tr>
           <tr><td><code>{@link #Theme_listChoiceIndicatorMultiple android:listChoiceIndicatorMultiple}</code></td><td> Drawable to use for multiple choice indicators.</td></tr>
           <tr><td><code>{@link #Theme_listChoiceIndicatorSingle android:listChoiceIndicatorSingle}</code></td><td> Drawable to use for single choice indicators.</td></tr>
           <tr><td><code>{@link #Theme_listDivider android:listDivider}</code></td><td> The drawable for the list divider.</td></tr>
           <tr><td><code>{@link #Theme_listDividerAlertDialog android:listDividerAlertDialog}</code></td><td> The list divider used in alert dialogs.</td></tr>
           <tr><td><code>{@link #Theme_listPopupWindowStyle android:listPopupWindowStyle}</code></td><td> Default ListPopupWindow style.</td></tr>
           <tr><td><code>{@link #Theme_listPreferredItemHeight android:listPreferredItemHeight}</code></td><td> The preferred list item height.</td></tr>
           <tr><td><code>{@link #Theme_listPreferredItemHeightLarge android:listPreferredItemHeightLarge}</code></td><td> A larger, more robust list item height.</td></tr>
           <tr><td><code>{@link #Theme_listPreferredItemHeightSmall android:listPreferredItemHeightSmall}</code></td><td> A smaller, sleeker list item height.</td></tr>
           <tr><td><code>{@link #Theme_listPreferredItemPaddingEnd android:listPreferredItemPaddingEnd}</code></td><td> The preferred padding along the end edge of list items.</td></tr>
           <tr><td><code>{@link #Theme_listPreferredItemPaddingLeft android:listPreferredItemPaddingLeft}</code></td><td> The preferred padding along the left edge of list items.</td></tr>
           <tr><td><code>{@link #Theme_listPreferredItemPaddingRight android:listPreferredItemPaddingRight}</code></td><td> The preferred padding along the right edge of list items.</td></tr>
           <tr><td><code>{@link #Theme_listPreferredItemPaddingStart android:listPreferredItemPaddingStart}</code></td><td> The preferred padding along the start edge of list items.</td></tr>
           <tr><td><code>{@link #Theme_listSeparatorTextViewStyle android:listSeparatorTextViewStyle}</code></td><td> TextView style for list separators.</td></tr>
           <tr><td><code>{@link #Theme_listViewStyle android:listViewStyle}</code></td><td> Default ListView style.</td></tr>
           <tr><td><code>{@link #Theme_listViewWhiteStyle android:listViewWhiteStyle}</code></td><td> ListView with white background.</td></tr>
           <tr><td><code>{@link #Theme_mapViewStyle android:mapViewStyle}</code></td><td> Default MapView style.</td></tr>
           <tr><td><code>{@link #Theme_mediaRouteButtonStyle android:mediaRouteButtonStyle}</code></td><td> Default style for the MediaRouteButton widget.</td></tr>
           <tr><td><code>{@link #Theme_numberPickerStyle android:numberPickerStyle}</code></td><td> NumberPicker style.</td></tr>
           <tr><td><code>{@link #Theme_panelBackground android:panelBackground}</code></td><td> The background of a panel when it is inset from the left and right edges of the screen.</td></tr>
           <tr><td><code>{@link #Theme_panelColorBackground android:panelColorBackground}</code></td><td> Color that matches (as closely as possible) the panel background.</td></tr>
           <tr><td><code>{@link #Theme_panelColorForeground android:panelColorForeground}</code></td><td> Default color of foreground panel imagery.</td></tr>
           <tr><td><code>{@link #Theme_panelFullBackground android:panelFullBackground}</code></td><td> The background of a panel when it extends to the left and right edges of the screen.</td></tr>
           <tr><td><code>{@link #Theme_panelMenuIsCompact android:panelMenuIsCompact}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_panelMenuListTheme android:panelMenuListTheme}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_panelMenuListWidth android:panelMenuListWidth}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_panelTextAppearance android:panelTextAppearance}</code></td><td> Default appearance of panel text.</td></tr>
           <tr><td><code>{@link #Theme_pointerStyle android:pointerStyle}</code></td><td> Reference to the Pointer style </td></tr>
           <tr><td><code>{@link #Theme_popupMenuStyle android:popupMenuStyle}</code></td><td> Default PopupMenu style.</td></tr>
           <tr><td><code>{@link #Theme_popupWindowStyle android:popupWindowStyle}</code></td><td> Default PopupWindow style.</td></tr>
           <tr><td><code>{@link #Theme_preferenceActivityStyle android:preferenceActivityStyle}</code></td><td> Default style for the PreferenceActivity.</td></tr>
           <tr><td><code>{@link #Theme_preferenceCategoryStyle android:preferenceCategoryStyle}</code></td><td> Default style for PreferenceCategory.</td></tr>
           <tr><td><code>{@link #Theme_preferenceFragmentListStyle android:preferenceFragmentListStyle}</code></td><td> Preference fragment list style </td></tr>
           <tr><td><code>{@link #Theme_preferenceFragmentPaddingSide android:preferenceFragmentPaddingSide}</code></td><td> Preference fragment padding side </td></tr>
           <tr><td><code>{@link #Theme_preferenceFragmentStyle android:preferenceFragmentStyle}</code></td><td> Default style for Headers pane in PreferenceActivity.</td></tr>
           <tr><td><code>{@link #Theme_preferenceFrameLayoutStyle android:preferenceFrameLayoutStyle}</code></td><td> Preference frame layout styles.</td></tr>
           <tr><td><code>{@link #Theme_preferenceHeaderPanelStyle android:preferenceHeaderPanelStyle}</code></td><td> Preference headers panel style </td></tr>
           <tr><td><code>{@link #Theme_preferenceInformationStyle android:preferenceInformationStyle}</code></td><td> Default style for informational Preference.</td></tr>
           <tr><td><code>{@link #Theme_preferenceLayoutChild android:preferenceLayoutChild}</code></td><td> The preference layout that has the child/tabbed effect.</td></tr>
           <tr><td><code>{@link #Theme_preferenceListStyle android:preferenceListStyle}</code></td><td> Preference list style </td></tr>
           <tr><td><code>{@link #Theme_preferencePanelStyle android:preferencePanelStyle}</code></td><td> Preference panel style </td></tr>
           <tr><td><code>{@link #Theme_preferenceScreenStyle android:preferenceScreenStyle}</code></td><td> Default style for PreferenceScreen.</td></tr>
           <tr><td><code>{@link #Theme_preferenceStyle android:preferenceStyle}</code></td><td> Default style for Preference.</td></tr>
           <tr><td><code>{@link #Theme_presentationTheme android:presentationTheme}</code></td><td> Theme to use for presentations spawned from this theme.</td></tr>
           <tr><td><code>{@link #Theme_progressBarStyle android:progressBarStyle}</code></td><td> Default ProgressBar style.</td></tr>
           <tr><td><code>{@link #Theme_progressBarStyleHorizontal android:progressBarStyleHorizontal}</code></td><td> Horizontal ProgressBar style.</td></tr>
           <tr><td><code>{@link #Theme_progressBarStyleInverse android:progressBarStyleInverse}</code></td><td> Inverse ProgressBar style.</td></tr>
           <tr><td><code>{@link #Theme_progressBarStyleLarge android:progressBarStyleLarge}</code></td><td> Large ProgressBar style.</td></tr>
           <tr><td><code>{@link #Theme_progressBarStyleLargeInverse android:progressBarStyleLargeInverse}</code></td><td> Large inverse ProgressBar style.</td></tr>
           <tr><td><code>{@link #Theme_progressBarStyleSmall android:progressBarStyleSmall}</code></td><td> Small ProgressBar style.</td></tr>
           <tr><td><code>{@link #Theme_progressBarStyleSmallInverse android:progressBarStyleSmallInverse}</code></td><td> Small inverse ProgressBar style.</td></tr>
           <tr><td><code>{@link #Theme_progressBarStyleSmallTitle android:progressBarStyleSmallTitle}</code></td><td> Small ProgressBar in title style.</td></tr>
           <tr><td><code>{@link #Theme_quickContactBadgeOverlay android:quickContactBadgeOverlay}</code></td><td> Drawable used as an overlay on top of quickcontact photos.</td></tr>
           <tr><td><code>{@link #Theme_quickContactBadgeStyleSmallWindowLarge android:quickContactBadgeStyleSmallWindowLarge}</code></td><td> Default quickcontact badge style with large quickcontact window.</td></tr>
           <tr><td><code>{@link #Theme_quickContactBadgeStyleSmallWindowMedium android:quickContactBadgeStyleSmallWindowMedium}</code></td><td> Default quickcontact badge style with medium quickcontact window.</td></tr>
           <tr><td><code>{@link #Theme_quickContactBadgeStyleSmallWindowSmall android:quickContactBadgeStyleSmallWindowSmall}</code></td><td> Default quickcontact badge style with small quickcontact window.</td></tr>
           <tr><td><code>{@link #Theme_quickContactBadgeStyleWindowLarge android:quickContactBadgeStyleWindowLarge}</code></td><td> Default quickcontact badge style with large quickcontact window.</td></tr>
           <tr><td><code>{@link #Theme_quickContactBadgeStyleWindowMedium android:quickContactBadgeStyleWindowMedium}</code></td><td> Default quickcontact badge style with medium quickcontact window.</td></tr>
           <tr><td><code>{@link #Theme_quickContactBadgeStyleWindowSmall android:quickContactBadgeStyleWindowSmall}</code></td><td> Default quickcontact badge style with small quickcontact window.</td></tr>
           <tr><td><code>{@link #Theme_radioButtonStyle android:radioButtonStyle}</code></td><td> Default RadioButton style.</td></tr>
           <tr><td><code>{@link #Theme_ratingBarStyle android:ratingBarStyle}</code></td><td> Default RatingBar style.</td></tr>
           <tr><td><code>{@link #Theme_ratingBarStyleIndicator android:ratingBarStyleIndicator}</code></td><td> Indicator RatingBar style.</td></tr>
           <tr><td><code>{@link #Theme_ratingBarStyleSmall android:ratingBarStyleSmall}</code></td><td> Small indicator RatingBar style.</td></tr>
           <tr><td><code>{@link #Theme_ringtonePreferenceStyle android:ringtonePreferenceStyle}</code></td><td> Default style for RingtonePreference.</td></tr>
           <tr><td><code>{@link #Theme_scrollViewStyle android:scrollViewStyle}</code></td><td> Default ScrollView style.</td></tr>
           <tr><td><code>{@link #Theme_searchDialogTheme android:searchDialogTheme}</code></td><td> Theme to use for Search Dialogs </td></tr>
           <tr><td><code>{@link #Theme_searchResultListItemHeight android:searchResultListItemHeight}</code></td><td> The list item height for search results.</td></tr>
           <tr><td><code>{@link #Theme_searchViewStyle android:searchViewStyle}</code></td><td> Style for the search query widget.</td></tr>
           <tr><td><code>{@link #Theme_searchWidgetCorpusItemBackground android:searchWidgetCorpusItemBackground}</code></td><td> Search widget more corpus result item background.</td></tr>
           <tr><td><code>{@link #Theme_seekBarPreferenceStyle android:seekBarPreferenceStyle}</code></td><td> Default style for seekbar preferences.</td></tr>
           <tr><td><code>{@link #Theme_seekBarStyle android:seekBarStyle}</code></td><td> Default SeekBar style.</td></tr>
           <tr><td><code>{@link #Theme_segmentedButtonStyle android:segmentedButtonStyle}</code></td><td> Style for segmented buttons - a container that houses several buttons
             with the appearance of a singel button broken into segments.</td></tr>
           <tr><td><code>{@link #Theme_selectableItemBackground android:selectableItemBackground}</code></td><td> Background drawable for bordered standalone items that need focus/pressed states.</td></tr>
           <tr><td><code>{@link #Theme_selectableItemBackgroundBorderless android:selectableItemBackgroundBorderless}</code></td><td> Background drawable for borderless standalone items that need focus/pressed states.</td></tr>
           <tr><td><code>{@link #Theme_spinnerDropDownItemStyle android:spinnerDropDownItemStyle}</code></td><td> Default style for spinner drop down items.</td></tr>
           <tr><td><code>{@link #Theme_spinnerItemStyle android:spinnerItemStyle}</code></td><td> Default spinner item style.</td></tr>
           <tr><td><code>{@link #Theme_spinnerStyle android:spinnerStyle}</code></td><td> Default Spinner style.</td></tr>
           <tr><td><code>{@link #Theme_spotShadowAlpha android:spotShadowAlpha}</code></td><td> Alpha value of the spot shadow projected by elevated views, between 0 and 1.</td></tr>
           <tr><td><code>{@link #Theme_stackViewStyle android:stackViewStyle}</code></td><td> Default StackView style.</td></tr>
           <tr><td><code>{@link #Theme_starStyle android:starStyle}</code></td><td> Default Star style.</td></tr>
           <tr><td><code>{@link #Theme_switchPreferenceStyle android:switchPreferenceStyle}</code></td><td> Default style for switch preferences.</td></tr>
           <tr><td><code>{@link #Theme_switchStyle android:switchStyle}</code></td><td> Default style for the Switch widget.</td></tr>
           <tr><td><code>{@link #Theme_tabWidgetStyle android:tabWidgetStyle}</code></td><td> Default TabWidget style.</td></tr>
           <tr><td><code>{@link #Theme_textAppearance android:textAppearance}</code></td><td> Default appearance of text: color, typeface, size, and style.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceAutoCorrectionSuggestion android:textAppearanceAutoCorrectionSuggestion}</code></td><td> The underline color and thickness for auto correction suggestion </td></tr>
           <tr><td><code>{@link #Theme_textAppearanceButton android:textAppearanceButton}</code></td><td> Text color, typeface, size, and style for the text inside of a button.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceEasyCorrectSuggestion android:textAppearanceEasyCorrectSuggestion}</code></td><td> The underline color and thickness for easy correct suggestion </td></tr>
           <tr><td><code>{@link #Theme_textAppearanceInverse android:textAppearanceInverse}</code></td><td> Default appearance of text against an inverted background:
             color, typeface, size, and style.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceLarge android:textAppearanceLarge}</code></td><td> Text color, typeface, size, and style for "large" text.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceLargeInverse android:textAppearanceLargeInverse}</code></td><td> Text color, typeface, size, and style for "large" inverse text.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceLargePopupMenu android:textAppearanceLargePopupMenu}</code></td><td> Text color, typeface, size, and style for the text inside of a popup menu.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceListItem android:textAppearanceListItem}</code></td><td> The preferred TextAppearance for the primary text of list items.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceListItemSecondary android:textAppearanceListItemSecondary}</code></td><td> The preferred TextAppearance for the secondary text of list items.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceListItemSmall android:textAppearanceListItemSmall}</code></td><td> The preferred TextAppearance for the primary text of small list items.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceMedium android:textAppearanceMedium}</code></td><td> Text color, typeface, size, and style for "medium" text.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceMediumInverse android:textAppearanceMediumInverse}</code></td><td> Text color, typeface, size, and style for "medium" inverse text.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceMisspelledSuggestion android:textAppearanceMisspelledSuggestion}</code></td><td> The underline color and thickness for misspelled suggestion </td></tr>
           <tr><td><code>{@link #Theme_textAppearanceSearchResultSubtitle android:textAppearanceSearchResultSubtitle}</code></td><td> Text color, typeface, size, and style for system search result subtitle.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceSearchResultTitle android:textAppearanceSearchResultTitle}</code></td><td> Text color, typeface, size, and style for system search result title.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceSmall android:textAppearanceSmall}</code></td><td> Text color, typeface, size, and style for "small" text.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceSmallInverse android:textAppearanceSmallInverse}</code></td><td> Text color, typeface, size, and style for "small" inverse text.</td></tr>
           <tr><td><code>{@link #Theme_textAppearanceSmallPopupMenu android:textAppearanceSmallPopupMenu}</code></td><td> Text color, typeface, size, and style for small text inside of a popup menu.</td></tr>
           <tr><td><code>{@link #Theme_textCheckMark android:textCheckMark}</code></td><td> Drawable to use for check marks.</td></tr>
           <tr><td><code>{@link #Theme_textCheckMarkInverse android:textCheckMarkInverse}</code></td><td></td></tr>
           <tr><td><code>{@link #Theme_textColorAlertDialogListItem android:textColorAlertDialogListItem}</code></td><td> Color of list item text in alert dialogs.</td></tr>
           <tr><td><code>{@link #Theme_textColorHighlightInverse android:textColorHighlightInverse}</code></td><td> Color of highlighted text, when used in a light theme.</td></tr>
           <tr><td><code>{@link #Theme_textColorHintInverse android:textColorHintInverse}</code></td><td> Inverse hint text color.</td></tr>
           <tr><td><code>{@link #Theme_textColorLinkInverse android:textColorLinkInverse}</code></td><td> Color of link text (URLs), when used in a light theme.</td></tr>
           <tr><td><code>{@link #Theme_textColorPrimary android:textColorPrimary}</code></td><td> The most prominent text color.</td></tr>
           <tr><td><code>{@link #Theme_textColorPrimaryActivated android:textColorPrimaryActivated}</code></td><td> Bright text color for use over activated backgrounds.</td></tr>
           <tr><td><code>{@link #Theme_textColorPrimaryDisableOnly android:textColorPrimaryDisableOnly}</code></td><td> Bright text color.</td></tr>
           <tr><td><code>{@link #Theme_textColorPrimaryInverse android:textColorPrimaryInverse}</code></td><td> Primary inverse text color, useful for inverted backgrounds.</td></tr>
           <tr><td><code>{@link #Theme_textColorPrimaryInverseDisableOnly android:textColorPrimaryInverseDisableOnly}</code></td><td> Bright inverse text color.</td></tr>
           <tr><td><code>{@link #Theme_textColorPrimaryInverseNoDisable android:textColorPrimaryInverseNoDisable}</code></td><td> Bright inverse text color.</td></tr>
           <tr><td><code>{@link #Theme_textColorPrimaryNoDisable android:textColorPrimaryNoDisable}</code></td><td> Bright text color.</td></tr>
           <tr><td><code>{@link #Theme_textColorSearchUrl android:textColorSearchUrl}</code></td><td> Text color for urls in search suggestions, used by things like global search and the browser.</td></tr>
           <tr><td><code>{@link #Theme_textColorSecondary android:textColorSecondary}</code></td><td> Secondary text color.</td></tr>
           <tr><td><code>{@link #Theme_textColorSecondaryActivated android:textColorSecondaryActivated}</code></td><td> Dim text color for use over activated backgrounds.</td></tr>
           <tr><td><code>{@link #Theme_textColorSecondaryInverse android:textColorSecondaryInverse}</code></td><td> Secondary inverse text color, useful for inverted backgrounds.</td></tr>
           <tr><td><code>{@link #Theme_textColorSecondaryInverseNoDisable android:textColorSecondaryInverseNoDisable}</code></td><td> Dim inverse text color.</td></tr>
           <tr><td><code>{@link #Theme_textColorSecondaryNoDisable android:textColorSecondaryNoDisable}</code></td><td> Dim text color.</td></tr>
           <tr><td><code>{@link #Theme_textColorTertiary android:textColorTertiary}</code></td><td> Tertiary text color.</td></tr>
           <tr><td><code>{@link #Theme_textColorTertiaryInverse android:textColorTertiaryInverse}</code></td><td> Tertiary inverse text color, useful for inverted backgrounds.</td></tr>
           <tr><td><code>{@link #Theme_textEditNoPasteWindowLayout android:textEditNoPasteWindowLayout}</code></td><td> Variation of textEditPasteWindowLayout displayed when the clipboard is empty.</td></tr>
           <tr><td><code>{@link #Theme_textEditPasteWindowLayout android:textEditPasteWindowLayout}</code></td><td> The layout of the view that is displayed on top of the cursor to paste inside a
             TextEdit field.</td></tr>
           <tr><td><code>{@link #Theme_textEditSideNoPasteWindowLayout android:textEditSideNoPasteWindowLayout}</code></td><td> Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.</td></tr>
           <tr><td><code>{@link #Theme_textEditSidePasteWindowLayout android:textEditSidePasteWindowLayout}</code></td><td> Used instead of textEditPasteWindowLayout when the window is moved on the side of the
             insertion cursor because it would be clipped if it were positioned on top.</td></tr>
           <tr><td><code>{@link #Theme_textEditSuggestionItemLayout android:textEditSuggestionItemLayout}</code></td><td> Layout of the TextView item that will populate the suggestion popup window.</td></tr>
           <tr><td><code>{@link #Theme_textSelectHandle android:textSelectHandle}</code></td><td> Reference to a drawable that will be used to display a text selection
             anchor for positioning the cursor within text.</td></tr>
           <tr><td><code>{@link #Theme_textSelectHandleLeft android:textSelectHandleLeft}</code></td><td> Reference to a drawable that will be used to display a text selection
             anchor on the left side of a selection region.</td></tr>
           <tr><td><code>{@link #Theme_textSelectHandleRight android:textSelectHandleRight}</code></td><td> Reference to a drawable that will be used to display a text selection
             anchor on the right side of a selection region.</td></tr>
           <tr><td><code>{@link #Theme_textSelectHandleWindowStyle android:textSelectHandleWindowStyle}</code></td><td> Reference to a style that will be used for the window containing a text
             selection anchor.</td></tr>
           <tr><td><code>{@link #Theme_textSuggestionsWindowStyle android:textSuggestionsWindowStyle}</code></td><td> Reference to a style that will be used for the window containing a list of possible
             text suggestions in an EditText.</td></tr>
           <tr><td><code>{@link #Theme_textUnderlineColor android:textUnderlineColor}</code></td><td>  The underline color </td></tr>
           <tr><td><code>{@link #Theme_textUnderlineThickness android:textUnderlineThickness}</code></td><td>  The underline thickness </td></tr>
           <tr><td><code>{@link #Theme_textViewStyle android:textViewStyle}</code></td><td> Default TextView style.</td></tr>
           <tr><td><code>{@link #Theme_timePickerDialogTheme android:timePickerDialogTheme}</code></td><td> The TimePicker dialog theme.</td></tr>
           <tr><td><code>{@link #Theme_timePickerStyle android:timePickerStyle}</code></td><td> The TimePicker style.</td></tr>
           <tr><td><code>{@link #Theme_toastFrameBackground android:toastFrameBackground}</code></td><td> Background to use for toasts </td></tr>
           <tr><td><code>{@link #Theme_toolbarStyle android:toolbarStyle}</code></td><td> Default Toolbar style.</td></tr>
           <tr><td><code>{@link #Theme_webTextViewStyle android:webTextViewStyle}</code></td><td> Default WebTextView style.</td></tr>
           <tr><td><code>{@link #Theme_webViewStyle android:webViewStyle}</code></td><td> Default WebView style.</td></tr>
           <tr><td><code>{@link #Theme_windowActionBar android:windowActionBar}</code></td><td> Flag indicating whether this window should have an Action Bar
             in place of the usual title bar.</td></tr>
           <tr><td><code>{@link #Theme_windowActionBarFullscreenDecorLayout android:windowActionBarFullscreenDecorLayout}</code></td><td> Internal layout used internally for window decor </td></tr>
           <tr><td><code>{@link #Theme_windowActionBarOverlay android:windowActionBarOverlay}</code></td><td> Flag indicating whether this window's Action Bar should overlay
             application content.</td></tr>
           <tr><td><code>{@link #Theme_windowActionModeOverlay android:windowActionModeOverlay}</code></td><td> Flag indicating whether action modes should overlay window content
             when there is not reserved space for their UI (such as an Action Bar).</td></tr>
           <tr><td><code>{@link #Theme_windowActivityTransitions android:windowActivityTransitions}</code></td><td> Flag indicating whether this window allows Activity Transitions.</td></tr>
           <tr><td><code>{@link #Theme_windowAllowEnterTransitionOverlap android:windowAllowEnterTransitionOverlap}</code></td><td> Flag indicating whether this Window's transition should overlap with
             the exiting transition of the calling Activity.</td></tr>
           <tr><td><code>{@link #Theme_windowAllowReturnTransitionOverlap android:windowAllowReturnTransitionOverlap}</code></td><td> Flag indicating whether this Window's transition should overlap with
             the exiting transition of the called Activity when the called Activity
             finishes.</td></tr>
           <tr><td><code>{@link #Theme_windowAnimationStyle android:windowAnimationStyle}</code></td><td> Reference to a style resource holding
             the set of window animations to use, which can be
             any of the attributes defined by
             {@link android.R.styleable#WindowAnimation}.</td></tr>
           <tr><td><code>{@link #Theme_windowBackground android:windowBackground}</code></td><td> Drawable to use as the overall window background.</td></tr>
           <tr><td><code>{@link #Theme_windowBackgroundFallback android:windowBackgroundFallback}</code></td><td> Drawable to draw selectively within the inset areas when the windowBackground
             has been set to null.</td></tr>
           <tr><td><code>{@link #Theme_windowCloseOnTouchOutside android:windowCloseOnTouchOutside}</code></td><td> Control whether a container should automatically close itself if
             the user touches outside of it.</td></tr>
           <tr><td><code>{@link #Theme_windowContentOverlay android:windowContentOverlay}</code></td><td> This Drawable is overlaid over the foreground of the Window's content area, usually
             to place a shadow below the title.</td></tr>
           <tr><td><code>{@link #Theme_windowContentTransitionManager android:windowContentTransitionManager}</code></td><td> Reference to a TransitionManager XML resource defining the desired
             transitions between different window content.</td></tr>
           <tr><td><code>{@link #Theme_windowContentTransitions android:windowContentTransitions}</code></td><td> Flag indicating whether this window requests that content changes be performed
             as scene changes with transitions.</td></tr>
           <tr><td><code>{@link #Theme_windowDisablePreview android:windowDisablePreview}</code></td><td> Flag allowing you to disable the preview animation for a window.</td></tr>
           <tr><td><code>{@link #Theme_windowEnableSplitTouch android:windowEnableSplitTouch}</code></td><td> Flag indicating that this window should allow touches to be split
             across other windows that also support split touch.</td></tr>
           <tr><td><code>{@link #Theme_windowEnterTransition android:windowEnterTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move Views into the initial Window's content Scene.</td></tr>
           <tr><td><code>{@link #Theme_windowExitTransition android:windowExitTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the Window's content Scene when launching a new Activity.</td></tr>
           <tr><td><code>{@link #Theme_windowFrame android:windowFrame}</code></td><td> Drawable to use as a frame around the window.</td></tr>
           <tr><td><code>{@link #Theme_windowFullscreen android:windowFullscreen}</code></td><td> Flag indicating whether this window should fill the entire screen.</td></tr>
           <tr><td><code>{@link #Theme_windowIsFloating android:windowIsFloating}</code></td><td> Flag indicating whether this is a floating window.</td></tr>
           <tr><td><code>{@link #Theme_windowIsTranslucent android:windowIsTranslucent}</code></td><td> Flag indicating whether this is a translucent window.</td></tr>
           <tr><td><code>{@link #Theme_windowNoDisplay android:windowNoDisplay}</code></td><td> Flag indicating that this window should not be displayed at all.</td></tr>
           <tr><td><code>{@link #Theme_windowNoTitle android:windowNoTitle}</code></td><td> Flag indicating whether there should be no title on this window.</td></tr>
           <tr><td><code>{@link #Theme_windowOverscan android:windowOverscan}</code></td><td> Flag indicating whether this window should extend into overscan region.</td></tr>
           <tr><td><code>{@link #Theme_windowReenterTransition android:windowReenterTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move Views in to the scene when returning from a previously-started Activity.</td></tr>
           <tr><td><code>{@link #Theme_windowReturnTransition android:windowReturnTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the scene when the Window is
             preparing to close.</td></tr>
           <tr><td><code>{@link #Theme_windowSharedElementEnterTransition android:windowSharedElementEnterTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred into the Window's initial content Scene.</td></tr>
           <tr><td><code>{@link #Theme_windowSharedElementExitTransition android:windowSharedElementExitTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used when starting a new Activity to move shared elements prior to transferring
             to the called Activity.</td></tr>
           <tr><td><code>{@link #Theme_windowSharedElementReenterTransition android:windowSharedElementReenterTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used for shared elements transferred back to a calling Activity.</td></tr>
           <tr><td><code>{@link #Theme_windowSharedElementReturnTransition android:windowSharedElementReturnTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred back to a calling Activity.</td></tr>
           <tr><td><code>{@link #Theme_windowSharedElementsUseOverlay android:windowSharedElementsUseOverlay}</code></td><td> Indicates whether or not shared elements should use an overlay
             during transitions.</td></tr>
           <tr><td><code>{@link #Theme_windowShowWallpaper android:windowShowWallpaper}</code></td><td> Flag indicating that this window's background should be the
             user's current wallpaper.</td></tr>
           <tr><td><code>{@link #Theme_windowSoftInputMode android:windowSoftInputMode}</code></td><td> Defines the default soft input state that this window would
             like when it is displayed.</td></tr>
           <tr><td><code>{@link #Theme_windowSwipeToDismiss android:windowSwipeToDismiss}</code></td><td> Flag to indicate that a window can be swiped away to be dismissed.</td></tr>
           <tr><td><code>{@link #Theme_windowTitleBackgroundStyle android:windowTitleBackgroundStyle}</code></td><td> The style resource to use for a window's title area.</td></tr>
           <tr><td><code>{@link #Theme_windowTitleSize android:windowTitleSize}</code></td><td> The style resource to use for a window's title bar height.</td></tr>
           <tr><td><code>{@link #Theme_windowTitleStyle android:windowTitleStyle}</code></td><td> The style resource to use for a window's title text.</td></tr>
           <tr><td><code>{@link #Theme_windowTransitionBackgroundFadeDuration android:windowTransitionBackgroundFadeDuration}</code></td><td> The duration, in milliseconds, of the window background fade duration
             when transitioning into or away from an Activity when called with an
             Activity Transition.</td></tr>
           <tr><td><code>{@link #Theme_windowTranslucentNavigation android:windowTranslucentNavigation}</code></td><td> Flag indicating whether this window requests a translucent navigation bar.</td></tr>
           <tr><td><code>{@link #Theme_windowTranslucentStatus android:windowTranslucentStatus}</code></td><td> Flag indicating whether this window requests a translucent status bar.</td></tr>
           <tr><td><code>{@link #Theme_yesNoPreferenceStyle android:yesNoPreferenceStyle}</code></td><td> Default style for YesNoPreference.</td></tr>
           </table>
           @see #Theme_absListViewStyle
           @see #Theme_accessibilityFocusedDrawable
           @see #Theme_actionBarDivider
           @see #Theme_actionBarItemBackground
           @see #Theme_actionBarPopupTheme
           @see #Theme_actionBarSize
           @see #Theme_actionBarSplitStyle
           @see #Theme_actionBarStyle
           @see #Theme_actionBarTabBarStyle
           @see #Theme_actionBarTabStyle
           @see #Theme_actionBarTabTextStyle
           @see #Theme_actionBarTheme
           @see #Theme_actionBarWidgetTheme
           @see #Theme_actionButtonStyle
           @see #Theme_actionDropDownStyle
           @see #Theme_actionMenuTextAppearance
           @see #Theme_actionMenuTextColor
           @see #Theme_actionModeBackground
           @see #Theme_actionModeCloseButtonStyle
           @see #Theme_actionModeCloseDrawable
           @see #Theme_actionModeCopyDrawable
           @see #Theme_actionModeCutDrawable
           @see #Theme_actionModeFindDrawable
           @see #Theme_actionModePasteDrawable
           @see #Theme_actionModePopupWindowStyle
           @see #Theme_actionModeSelectAllDrawable
           @see #Theme_actionModeShareDrawable
           @see #Theme_actionModeSplitBackground
           @see #Theme_actionModeStyle
           @see #Theme_actionModeWebSearchDrawable
           @see #Theme_actionOverflowButtonStyle
           @see #Theme_actionOverflowMenuStyle
           @see #Theme_activatedBackgroundIndicator
           @see #Theme_activityChooserViewStyle
           @see #Theme_alertDialogButtonGroupStyle
           @see #Theme_alertDialogCenterButtons
           @see #Theme_alertDialogIcon
           @see #Theme_alertDialogStyle
           @see #Theme_alertDialogTheme
           @see #Theme_ambientShadowAlpha
           @see #Theme_autoCompleteTextViewStyle
           @see #Theme_backgroundDimAmount
           @see #Theme_backgroundDimEnabled
           @see #Theme_borderlessButtonStyle
           @see #Theme_buttonBarButtonStyle
           @see #Theme_buttonBarNegativeButtonStyle
           @see #Theme_buttonBarNeutralButtonStyle
           @see #Theme_buttonBarPositiveButtonStyle
           @see #Theme_buttonBarStyle
           @see #Theme_buttonStyle
           @see #Theme_buttonStyleInset
           @see #Theme_buttonStyleSmall
           @see #Theme_buttonStyleToggle
           @see #Theme_calendarViewStyle
           @see #Theme_candidatesTextStyleSpans
           @see #Theme_checkBoxPreferenceStyle
           @see #Theme_checkboxStyle
           @see #Theme_checkedTextViewStyle
           @see #Theme_colorAccent
           @see #Theme_colorActivatedHighlight
           @see #Theme_colorBackground
           @see #Theme_colorBackgroundCacheHint
           @see #Theme_colorButtonNormal
           @see #Theme_colorControlActivated
           @see #Theme_colorControlHighlight
           @see #Theme_colorControlNormal
           @see #Theme_colorEdgeEffect
           @see #Theme_colorFocusedHighlight
           @see #Theme_colorForeground
           @see #Theme_colorForegroundInverse
           @see #Theme_colorLongPressedHighlight
           @see #Theme_colorMultiSelectHighlight
           @see #Theme_colorPressedHighlight
           @see #Theme_colorPrimary
           @see #Theme_colorPrimaryDark
           @see #Theme_colorSwitchThumbNormal
           @see #Theme_datePickerDialogTheme
           @see #Theme_datePickerStyle
           @see #Theme_detailsElementBackground
           @see #Theme_dialogCustomTitleDecorLayout
           @see #Theme_dialogPreferenceStyle
           @see #Theme_dialogTheme
           @see #Theme_dialogTitleDecorLayout
           @see #Theme_dialogTitleIconsDecorLayout
           @see #Theme_disabledAlpha
           @see #Theme_dividerHorizontal
           @see #Theme_dividerVertical
           @see #Theme_dropDownHintAppearance
           @see #Theme_dropDownItemStyle
           @see #Theme_dropDownListViewStyle
           @see #Theme_dropDownSpinnerStyle
           @see #Theme_dropdownListPreferredItemHeight
           @see #Theme_editTextBackground
           @see #Theme_editTextColor
           @see #Theme_editTextPreferenceStyle
           @see #Theme_editTextStyle
           @see #Theme_errorMessageAboveBackground
           @see #Theme_errorMessageBackground
           @see #Theme_expandableListPreferredChildIndicatorLeft
           @see #Theme_expandableListPreferredChildIndicatorRight
           @see #Theme_expandableListPreferredChildPaddingLeft
           @see #Theme_expandableListPreferredItemIndicatorLeft
           @see #Theme_expandableListPreferredItemIndicatorRight
           @see #Theme_expandableListPreferredItemPaddingLeft
           @see #Theme_expandableListViewStyle
           @see #Theme_expandableListViewWhiteStyle
           @see #Theme_fastScrollOverlayPosition
           @see #Theme_fastScrollPreviewBackgroundLeft
           @see #Theme_fastScrollPreviewBackgroundRight
           @see #Theme_fastScrollTextColor
           @see #Theme_fastScrollThumbDrawable
           @see #Theme_fastScrollTrackDrawable
           @see #Theme_findOnPageNextDrawable
           @see #Theme_findOnPagePreviousDrawable
           @see #Theme_fragmentBreadCrumbsStyle
           @see #Theme_galleryItemBackground
           @see #Theme_galleryStyle
           @see #Theme_gestureOverlayViewStyle
           @see #Theme_gridViewStyle
           @see #Theme_homeAsUpIndicator
           @see #Theme_horizontalScrollViewStyle
           @see #Theme_imageButtonStyle
           @see #Theme_imageWellStyle
           @see #Theme_lightRadius
           @see #Theme_lightY
           @see #Theme_lightZ
           @see #Theme_listChoiceBackgroundIndicator
           @see #Theme_listChoiceIndicatorMultiple
           @see #Theme_listChoiceIndicatorSingle
           @see #Theme_listDivider
           @see #Theme_listDividerAlertDialog
           @see #Theme_listPopupWindowStyle
           @see #Theme_listPreferredItemHeight
           @see #Theme_listPreferredItemHeightLarge
           @see #Theme_listPreferredItemHeightSmall
           @see #Theme_listPreferredItemPaddingEnd
           @see #Theme_listPreferredItemPaddingLeft
           @see #Theme_listPreferredItemPaddingRight
           @see #Theme_listPreferredItemPaddingStart
           @see #Theme_listSeparatorTextViewStyle
           @see #Theme_listViewStyle
           @see #Theme_listViewWhiteStyle
           @see #Theme_mapViewStyle
           @see #Theme_mediaRouteButtonStyle
           @see #Theme_numberPickerStyle
           @see #Theme_panelBackground
           @see #Theme_panelColorBackground
           @see #Theme_panelColorForeground
           @see #Theme_panelFullBackground
           @see #Theme_panelMenuIsCompact
           @see #Theme_panelMenuListTheme
           @see #Theme_panelMenuListWidth
           @see #Theme_panelTextAppearance
           @see #Theme_pointerStyle
           @see #Theme_popupMenuStyle
           @see #Theme_popupWindowStyle
           @see #Theme_preferenceActivityStyle
           @see #Theme_preferenceCategoryStyle
           @see #Theme_preferenceFragmentListStyle
           @see #Theme_preferenceFragmentPaddingSide
           @see #Theme_preferenceFragmentStyle
           @see #Theme_preferenceFrameLayoutStyle
           @see #Theme_preferenceHeaderPanelStyle
           @see #Theme_preferenceInformationStyle
           @see #Theme_preferenceLayoutChild
           @see #Theme_preferenceListStyle
           @see #Theme_preferencePanelStyle
           @see #Theme_preferenceScreenStyle
           @see #Theme_preferenceStyle
           @see #Theme_presentationTheme
           @see #Theme_progressBarStyle
           @see #Theme_progressBarStyleHorizontal
           @see #Theme_progressBarStyleInverse
           @see #Theme_progressBarStyleLarge
           @see #Theme_progressBarStyleLargeInverse
           @see #Theme_progressBarStyleSmall
           @see #Theme_progressBarStyleSmallInverse
           @see #Theme_progressBarStyleSmallTitle
           @see #Theme_quickContactBadgeOverlay
           @see #Theme_quickContactBadgeStyleSmallWindowLarge
           @see #Theme_quickContactBadgeStyleSmallWindowMedium
           @see #Theme_quickContactBadgeStyleSmallWindowSmall
           @see #Theme_quickContactBadgeStyleWindowLarge
           @see #Theme_quickContactBadgeStyleWindowMedium
           @see #Theme_quickContactBadgeStyleWindowSmall
           @see #Theme_radioButtonStyle
           @see #Theme_ratingBarStyle
           @see #Theme_ratingBarStyleIndicator
           @see #Theme_ratingBarStyleSmall
           @see #Theme_ringtonePreferenceStyle
           @see #Theme_scrollViewStyle
           @see #Theme_searchDialogTheme
           @see #Theme_searchResultListItemHeight
           @see #Theme_searchViewStyle
           @see #Theme_searchWidgetCorpusItemBackground
           @see #Theme_seekBarPreferenceStyle
           @see #Theme_seekBarStyle
           @see #Theme_segmentedButtonStyle
           @see #Theme_selectableItemBackground
           @see #Theme_selectableItemBackgroundBorderless
           @see #Theme_spinnerDropDownItemStyle
           @see #Theme_spinnerItemStyle
           @see #Theme_spinnerStyle
           @see #Theme_spotShadowAlpha
           @see #Theme_stackViewStyle
           @see #Theme_starStyle
           @see #Theme_switchPreferenceStyle
           @see #Theme_switchStyle
           @see #Theme_tabWidgetStyle
           @see #Theme_textAppearance
           @see #Theme_textAppearanceAutoCorrectionSuggestion
           @see #Theme_textAppearanceButton
           @see #Theme_textAppearanceEasyCorrectSuggestion
           @see #Theme_textAppearanceInverse
           @see #Theme_textAppearanceLarge
           @see #Theme_textAppearanceLargeInverse
           @see #Theme_textAppearanceLargePopupMenu
           @see #Theme_textAppearanceListItem
           @see #Theme_textAppearanceListItemSecondary
           @see #Theme_textAppearanceListItemSmall
           @see #Theme_textAppearanceMedium
           @see #Theme_textAppearanceMediumInverse
           @see #Theme_textAppearanceMisspelledSuggestion
           @see #Theme_textAppearanceSearchResultSubtitle
           @see #Theme_textAppearanceSearchResultTitle
           @see #Theme_textAppearanceSmall
           @see #Theme_textAppearanceSmallInverse
           @see #Theme_textAppearanceSmallPopupMenu
           @see #Theme_textCheckMark
           @see #Theme_textCheckMarkInverse
           @see #Theme_textColorAlertDialogListItem
           @see #Theme_textColorHighlightInverse
           @see #Theme_textColorHintInverse
           @see #Theme_textColorLinkInverse
           @see #Theme_textColorPrimary
           @see #Theme_textColorPrimaryActivated
           @see #Theme_textColorPrimaryDisableOnly
           @see #Theme_textColorPrimaryInverse
           @see #Theme_textColorPrimaryInverseDisableOnly
           @see #Theme_textColorPrimaryInverseNoDisable
           @see #Theme_textColorPrimaryNoDisable
           @see #Theme_textColorSearchUrl
           @see #Theme_textColorSecondary
           @see #Theme_textColorSecondaryActivated
           @see #Theme_textColorSecondaryInverse
           @see #Theme_textColorSecondaryInverseNoDisable
           @see #Theme_textColorSecondaryNoDisable
           @see #Theme_textColorTertiary
           @see #Theme_textColorTertiaryInverse
           @see #Theme_textEditNoPasteWindowLayout
           @see #Theme_textEditPasteWindowLayout
           @see #Theme_textEditSideNoPasteWindowLayout
           @see #Theme_textEditSidePasteWindowLayout
           @see #Theme_textEditSuggestionItemLayout
           @see #Theme_textSelectHandle
           @see #Theme_textSelectHandleLeft
           @see #Theme_textSelectHandleRight
           @see #Theme_textSelectHandleWindowStyle
           @see #Theme_textSuggestionsWindowStyle
           @see #Theme_textUnderlineColor
           @see #Theme_textUnderlineThickness
           @see #Theme_textViewStyle
           @see #Theme_timePickerDialogTheme
           @see #Theme_timePickerStyle
           @see #Theme_toastFrameBackground
           @see #Theme_toolbarStyle
           @see #Theme_webTextViewStyle
           @see #Theme_webViewStyle
           @see #Theme_windowActionBar
           @see #Theme_windowActionBarFullscreenDecorLayout
           @see #Theme_windowActionBarOverlay
           @see #Theme_windowActionModeOverlay
           @see #Theme_windowActivityTransitions
           @see #Theme_windowAllowEnterTransitionOverlap
           @see #Theme_windowAllowReturnTransitionOverlap
           @see #Theme_windowAnimationStyle
           @see #Theme_windowBackground
           @see #Theme_windowBackgroundFallback
           @see #Theme_windowCloseOnTouchOutside
           @see #Theme_windowContentOverlay
           @see #Theme_windowContentTransitionManager
           @see #Theme_windowContentTransitions
           @see #Theme_windowDisablePreview
           @see #Theme_windowEnableSplitTouch
           @see #Theme_windowEnterTransition
           @see #Theme_windowExitTransition
           @see #Theme_windowFrame
           @see #Theme_windowFullscreen
           @see #Theme_windowIsFloating
           @see #Theme_windowIsTranslucent
           @see #Theme_windowNoDisplay
           @see #Theme_windowNoTitle
           @see #Theme_windowOverscan
           @see #Theme_windowReenterTransition
           @see #Theme_windowReturnTransition
           @see #Theme_windowSharedElementEnterTransition
           @see #Theme_windowSharedElementExitTransition
           @see #Theme_windowSharedElementReenterTransition
           @see #Theme_windowSharedElementReturnTransition
           @see #Theme_windowSharedElementsUseOverlay
           @see #Theme_windowShowWallpaper
           @see #Theme_windowSoftInputMode
           @see #Theme_windowSwipeToDismiss
           @see #Theme_windowTitleBackgroundStyle
           @see #Theme_windowTitleSize
           @see #Theme_windowTitleStyle
           @see #Theme_windowTransitionBackgroundFadeDuration
           @see #Theme_windowTranslucentNavigation
           @see #Theme_windowTranslucentStatus
           @see #Theme_yesNoPreferenceStyle
         */
        public: static const int Theme[310];
        /**
          <p>
          @attr description
           Default AbsListView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#absListViewStyle}.
          @attr name android:absListViewStyle
        */
        public: static const int Theme_absListViewStyle = 51;
        /**
          <p>
          @attr description
           The drawable for accessibility focused views. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:accessibilityFocusedDrawable
        */
        public: static const int Theme_accessibilityFocusedDrawable = 303;
        /**
          <p>
          @attr description
           Custom divider drawable to use for elements in the action bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionBarDivider}.
          @attr name android:actionBarDivider
        */
        public: static const int Theme_actionBarDivider = 204;
        /**
          <p>
          @attr description
           Custom item state list drawable background for action bar items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionBarItemBackground}.
          @attr name android:actionBarItemBackground
        */
        public: static const int Theme_actionBarItemBackground = 205;
        /**
          <p>
          @attr description
           Reference to a theme that should be used to inflate popups
             shown by widgets in the action bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionBarPopupTheme}.
          @attr name android:actionBarPopupTheme
        */
        public: static const int Theme_actionBarPopupTheme = 278;
        /**
          <p>
          @attr description
           Size of the Action Bar, including the contextual
             bar used to present Action Modes. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>wrap_content</code></td><td>0</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionBarSize}.
          @attr name android:actionBarSize
        */
        public: static const int Theme_actionBarSize = 140;
        /**
          <p>
          @attr description
           Reference to a style for the split Action Bar. This style
             controls the split component that holds the menu/action
             buttons. actionBarStyle is still used for the primary
             bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionBarSplitStyle}.
          @attr name android:actionBarSplitStyle
        */
        public: static const int Theme_actionBarSplitStyle = 196;
        /**
          <p>
          @attr description
           Reference to a style for the Action Bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionBarStyle}.
          @attr name android:actionBarStyle
        */
        public: static const int Theme_actionBarStyle = 132;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#actionBarTabBarStyle}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:actionBarTabBarStyle
        */
        public: static const int Theme_actionBarTabBarStyle = 143;
        /**
          <p>
          @attr description
           Default style for tabs within an action bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionBarTabStyle}.
          @attr name android:actionBarTabStyle
        */
        public: static const int Theme_actionBarTabStyle = 142;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#actionBarTabTextStyle}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:actionBarTabTextStyle
        */
        public: static const int Theme_actionBarTabTextStyle = 144;
        /**
          <p>
          @attr description
           Reference to a theme that should be used to inflate the
             action bar. This will be inherited by any widget inflated
             into the action bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionBarTheme}.
          @attr name android:actionBarTheme
        */
        public: static const int Theme_actionBarTheme = 255;
        /**
          <p>
          @attr description
           Reference to a theme that should be used to inflate widgets
             and layouts destined for the action bar. Most of the time
             this will be a reference to the current theme, but when
             the action bar has a significantly different contrast
             profile than the rest of the activity the difference
             can become important. If this is set to @null the current
             theme will be used.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionBarWidgetTheme}.
          @attr name android:actionBarWidgetTheme
        */
        public: static const int Theme_actionBarWidgetTheme = 203;
        /**
          <p>
          @attr description
           Default action button style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionButtonStyle}.
          @attr name android:actionButtonStyle
        */
        public: static const int Theme_actionButtonStyle = 135;
        /**
          <p>
          @attr description
           Default ActionBar dropdown style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionDropDownStyle}.
          @attr name android:actionDropDownStyle
        */
        public: static const int Theme_actionDropDownStyle = 134;
        /**
          <p>
          @attr description
           TextAppearance style that will be applied to text that
             appears within action menu items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionMenuTextAppearance}.
          @attr name android:actionMenuTextAppearance
        */
        public: static const int Theme_actionMenuTextAppearance = 188;
        /**
          <p>
          @attr description
           Color for text that appears within action menu items. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionMenuTextColor}.
          @attr name android:actionMenuTextColor
        */
        public: static const int Theme_actionMenuTextColor = 189;
        /**
          <p>
          @attr description
           Background drawable to use for action mode UI 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeBackground}.
          @attr name android:actionModeBackground
        */
        public: static const int Theme_actionModeBackground = 136;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#actionModeCloseButtonStyle}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:actionModeCloseButtonStyle
        */
        public: static const int Theme_actionModeCloseButtonStyle = 146;
        /**
          <p>
          @attr description
           Drawable to use for the close action mode button 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeCloseDrawable}.
          @attr name android:actionModeCloseDrawable
        */
        public: static const int Theme_actionModeCloseDrawable = 137;
        /**
          <p>
          @attr description
           Drawable to use for the Copy action button in Contextual Action Bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeCopyDrawable}.
          @attr name android:actionModeCopyDrawable
        */
        public: static const int Theme_actionModeCopyDrawable = 160;
        /**
          <p>
          @attr description
           Drawable to use for the Cut action button in Contextual Action Bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeCutDrawable}.
          @attr name android:actionModeCutDrawable
        */
        public: static const int Theme_actionModeCutDrawable = 159;
        /**
          <p>
          @attr description
           Drawable to use for the Find action button in WebView selection action modes 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeFindDrawable}.
          @attr name android:actionModeFindDrawable
        */
        public: static const int Theme_actionModeFindDrawable = 272;
        /**
          <p>
          @attr description
           Drawable to use for the Paste action button in Contextual Action Bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModePasteDrawable}.
          @attr name android:actionModePasteDrawable
        */
        public: static const int Theme_actionModePasteDrawable = 161;
        /**
          <p>
          @attr description
           PopupWindow style to use for action modes when showing as a window overlay. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:actionModePopupWindowStyle
        */
        public: static const int Theme_actionModePopupWindowStyle = 246;
        /**
          <p>
          @attr description
           Drawable to use for the Select all action button in Contextual Action Bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeSelectAllDrawable}.
          @attr name android:actionModeSelectAllDrawable
        */
        public: static const int Theme_actionModeSelectAllDrawable = 193;
        /**
          <p>
          @attr description
           Drawable to use for the Share action button in WebView selection action modes 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeShareDrawable}.
          @attr name android:actionModeShareDrawable
        */
        public: static const int Theme_actionModeShareDrawable = 271;
        /**
          <p>
          @attr description
           Background drawable to use for action mode UI in the lower split bar 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeSplitBackground}.
          @attr name android:actionModeSplitBackground
        */
        public: static const int Theme_actionModeSplitBackground = 206;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#actionModeStyle}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:actionModeStyle
        */
        public: static const int Theme_actionModeStyle = 202;
        /**
          <p>
          @attr description
           Drawable to use for the Web Search action button in WebView selection action modes 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#actionModeWebSearchDrawable}.
          @attr name android:actionModeWebSearchDrawable
        */
        public: static const int Theme_actionModeWebSearchDrawable = 273;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#actionOverflowButtonStyle}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:actionOverflowButtonStyle
        */
        public: static const int Theme_actionOverflowButtonStyle = 145;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#actionOverflowMenuStyle}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:actionOverflowMenuStyle
        */
        public: static const int Theme_actionOverflowMenuStyle = 268;
        /**
          <p>
          @attr description
           Drawable used as a background for activated items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#activatedBackgroundIndicator}.
          @attr name android:activatedBackgroundIndicator
        */
        public: static const int Theme_activatedBackgroundIndicator = 147;
        /**
          <p>
          @attr description
           Default ActivityChooserView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:activityChooserViewStyle
        */
        public: static const int Theme_activityChooserViewStyle = 245;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#alertDialogButtonGroupStyle}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:alertDialogButtonGroupStyle
        */
        public: static const int Theme_alertDialogButtonGroupStyle = 236;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#alertDialogCenterButtons}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:alertDialogCenterButtons
        */
        public: static const int Theme_alertDialogCenterButtons = 237;
        /**
          <p>
          @attr description
           Icon drawable to use for alerts 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#alertDialogIcon}.
          @attr name android:alertDialogIcon
        */
        public: static const int Theme_alertDialogIcon = 181;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#alertDialogStyle}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:alertDialogStyle
        */
        public: static const int Theme_alertDialogStyle = 45;
        /**
          <p>
          @attr description
           Theme to use for alert dialogs spawned from this theme. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#alertDialogTheme}.
          @attr name android:alertDialogTheme
        */
        public: static const int Theme_alertDialogTheme = 155;
        /**
          <p>
          @attr description
           Alpha value of the ambient shadow projected by elevated views, between 0 and 1. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ambientShadowAlpha}.
          @attr name android:ambientShadowAlpha
        */
        public: static const int Theme_ambientShadowAlpha = 288;
        /**
          <p>
          @attr description
           Default AutoCompleteTextView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoCompleteTextViewStyle}.
          @attr name android:autoCompleteTextViewStyle
        */
        public: static const int Theme_autoCompleteTextViewStyle = 52;
        /**
          <p>
          @attr description
           Default background dim amount when a menu, dialog, or something similar pops up. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundDimAmount}.
          @attr name android:backgroundDimAmount
        */
        public: static const int Theme_backgroundDimAmount = 2;
        /**
          <p>
          @attr description
           Control whether dimming behind the window is enabled.  The default
             theme does not set this value, meaning it is based on whether the
             window is floating. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundDimEnabled}.
          @attr name android:backgroundDimEnabled
        */
        public: static const int Theme_backgroundDimEnabled = 106;
        /**
          <p>
          @attr description
           Style for buttons without an explicit border, often used in groups. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#borderlessButtonStyle}.
          @attr name android:borderlessButtonStyle
        */
        public: static const int Theme_borderlessButtonStyle = 165;
        /**
          <p>
          @attr description
           Style for buttons within button bars 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonBarButtonStyle}.
          @attr name android:buttonBarButtonStyle
        */
        public: static const int Theme_buttonBarButtonStyle = 168;
        /**
          <p>
          @attr description
           Style for the "negative" buttons within button bars 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonBarNegativeButtonStyle}.
          @attr name android:buttonBarNegativeButtonStyle
        */
        public: static const int Theme_buttonBarNegativeButtonStyle = 277;
        /**
          <p>
          @attr description
           Style for the "neutral" buttons within button bars 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonBarNeutralButtonStyle}.
          @attr name android:buttonBarNeutralButtonStyle
        */
        public: static const int Theme_buttonBarNeutralButtonStyle = 276;
        /**
          <p>
          @attr description
           Style for the "positive" buttons within button bars 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonBarPositiveButtonStyle}.
          @attr name android:buttonBarPositiveButtonStyle
        */
        public: static const int Theme_buttonBarPositiveButtonStyle = 275;
        /**
          <p>
          @attr description
           Style for button bars 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonBarStyle}.
          @attr name android:buttonBarStyle
        */
        public: static const int Theme_buttonBarStyle = 167;
        /**
          <p>
          @attr description
           Normal Button style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonStyle}.
          @attr name android:buttonStyle
        */
        public: static const int Theme_buttonStyle = 24;
        /**
          <p>
          @attr description
           Button style to inset into an EditText. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonStyleInset}.
          @attr name android:buttonStyleInset
        */
        public: static const int Theme_buttonStyleInset = 26;
        /**
          <p>
          @attr description
           Small Button style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonStyleSmall}.
          @attr name android:buttonStyleSmall
        */
        public: static const int Theme_buttonStyleSmall = 25;
        /**
          <p>
          @attr description
           ToggleButton style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#buttonStyleToggle}.
          @attr name android:buttonStyleToggle
        */
        public: static const int Theme_buttonStyleToggle = 27;
        /**
          <p>
          @attr description
           The CalendarView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#calendarViewStyle}.
          @attr name android:calendarViewStyle
        */
        public: static const int Theme_calendarViewStyle = 185;
        /**
          <p>
          @attr description
           A styled string, specifying the style to be used for showing
             inline candidate text when composing with an input method.  The
             text itself will be ignored, but the style spans will be applied
             to the candidate text as it is edited. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#candidatesTextStyleSpans}.
          @attr name android:candidatesTextStyleSpans
        */
        public: static const int Theme_candidatesTextStyleSpans = 109;
        /**
          <p>
          @attr description
           Default style for CheckBoxPreference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checkBoxPreferenceStyle}.
          @attr name android:checkBoxPreferenceStyle
        */
        public: static const int Theme_checkBoxPreferenceStyle = 87;
        /**
          <p>
          @attr description
           Default Checkbox style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checkboxStyle}.
          @attr name android:checkboxStyle
        */
        public: static const int Theme_checkboxStyle = 53;
        /**
          <p>
          @attr description
           Default CheckedTextView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#checkedTextViewStyle}.
          @attr name android:checkedTextViewStyle
        */
        public: static const int Theme_checkedTextViewStyle = 217;
        /**
          <p>
          @attr description
           Bright complement to the primary branding color. By default, this is the color applied
             to framework controls (via colorControlActivated). 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorAccent}.
          @attr name android:colorAccent
        */
        public: static const int Theme_colorAccent = 259;
        /**
          <p>
          @attr description
           Default highlight color for items that are
             activated. (Activated meaning persistent selection.) 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorActivatedHighlight}.
          @attr name android:colorActivatedHighlight
        */
        public: static const int Theme_colorActivatedHighlight = 200;
        /**
          <p>
          @attr description
           Color that matches (as closely as possible) the window background. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorBackground}.
          @attr name android:colorBackground
        */
        public: static const int Theme_colorBackground = 1;
        /**
          <p>
          @attr description
           This is a hint for a solid color that can be used for caching
             rendered views.  This should be the color of the background when
             there is a solid background color; it should be null when the
             background is a texture or translucent.  When a device is able
             to use accelerated drawing (thus setting state_accelerated), the
             cache hint is ignored and always assumed to be transparent. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorBackgroundCacheHint}.
          @attr name android:colorBackgroundCacheHint
        */
        public: static const int Theme_colorBackgroundCacheHint = 118;
        /**
          <p>
          @attr description
           The color applied to framework buttons in their normal state. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorButtonNormal}.
          @attr name android:colorButtonNormal
        */
        public: static const int Theme_colorButtonNormal = 253;
        /**
          <p>
          @attr description
           The color applied to framework controls in their activated (ex. checked) state. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorControlActivated}.
          @attr name android:colorControlActivated
        */
        public: static const int Theme_colorControlActivated = 252;
        /**
          <p>
          @attr description
           The color applied to framework control highlights (ex. ripples, list selectors). 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorControlHighlight}.
          @attr name android:colorControlHighlight
        */
        public: static const int Theme_colorControlHighlight = 254;
        /**
          <p>
          @attr description
           The color applied to framework controls in their normal state. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorControlNormal}.
          @attr name android:colorControlNormal
        */
        public: static const int Theme_colorControlNormal = 251;
        /**
          <p>
          @attr description
           The color applied to the edge effect on scrolling containers. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorEdgeEffect}.
          @attr name android:colorEdgeEffect
        */
        public: static const int Theme_colorEdgeEffect = 291;
        /**
          <p>
          @attr description
           Default highlight color for items that are
             focused. (Focused meaning cursor-based selection.) 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorFocusedHighlight}.
          @attr name android:colorFocusedHighlight
        */
        public: static const int Theme_colorFocusedHighlight = 199;
        /**
          <p>
          @attr description
           Default color of foreground imagery. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorForeground}.
          @attr name android:colorForeground
        */
        public: static const int Theme_colorForeground = 0;
        /**
          <p>
          @attr description
           Default color of foreground imagery on an inverted background. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorForegroundInverse}.
          @attr name android:colorForegroundInverse
        */
        public: static const int Theme_colorForegroundInverse = 94;
        /**
          <p>
          @attr description
           Default highlight color for items that are long-pressed. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorLongPressedHighlight}.
          @attr name android:colorLongPressedHighlight
        */
        public: static const int Theme_colorLongPressedHighlight = 198;
        /**
          <p>
          @attr description
           Default highlight color for items in multiple selection
             mode. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorMultiSelectHighlight}.
          @attr name android:colorMultiSelectHighlight
        */
        public: static const int Theme_colorMultiSelectHighlight = 201;
        /**
          <p>
          @attr description
           Default highlight color for items that are pressed. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorPressedHighlight}.
          @attr name android:colorPressedHighlight
        */
        public: static const int Theme_colorPressedHighlight = 197;
        /**
          <p>
          @attr description
           The primary branding color for the app. By default, this is the color applied to the
             action bar background. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorPrimary}.
          @attr name android:colorPrimary
        */
        public: static const int Theme_colorPrimary = 257;
        /**
          <p>
          @attr description
           Dark variant of the primary branding color. By default, this is the color applied to
             the status bar (via statusBarColor) and navigation bar (via navigationBarColor). 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#colorPrimaryDark}.
          @attr name android:colorPrimaryDark
        */
        public: static const int Theme_colorPrimaryDark = 258;
        /**
          <p>
          @attr description
           The color applied to framework switch thumbs in their normal state. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:colorSwitchThumbNormal
        */
        public: static const int Theme_colorSwitchThumbNormal = 306;
        /**
          <p>
          @attr description
           The DatePicker dialog theme. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#datePickerDialogTheme}.
          @attr name android:datePickerDialogTheme
        */
        public: static const int Theme_datePickerDialogTheme = 282;
        /**
          <p>
          @attr description
           The DatePicker style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#datePickerStyle}.
          @attr name android:datePickerStyle
        */
        public: static const int Theme_datePickerStyle = 184;
        /**
          <p>
          @attr description
           Background that can be used behind parts of a UI that provide
             details on data the user is selecting.  For example, this is
             the background element of PreferenceActivity's embedded
             preference fragment. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#detailsElementBackground}.
          @attr name android:detailsElementBackground
        */
        public: static const int Theme_detailsElementBackground = 175;
        /**
          <p>
          @attr description
           Window decor layout to use in dialog mode with custom titles 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:dialogCustomTitleDecorLayout
        */
        public: static const int Theme_dialogCustomTitleDecorLayout = 297;
        /**
          <p>
          @attr description
           Default style for DialogPreference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dialogPreferenceStyle}.
          @attr name android:dialogPreferenceStyle
        */
        public: static const int Theme_dialogPreferenceStyle = 89;
        /**
          <p>
          @attr description
           Theme to use for dialogs spawned from this theme. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dialogTheme}.
          @attr name android:dialogTheme
        */
        public: static const int Theme_dialogTheme = 154;
        /**
          <p>
          @attr description
           Window decor layout to use in dialog mode with title only 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:dialogTitleDecorLayout
        */
        public: static const int Theme_dialogTitleDecorLayout = 298;
        /**
          <p>
          @attr description
           Window decor layout to use in dialog mode with icons 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:dialogTitleIconsDecorLayout
        */
        public: static const int Theme_dialogTitleIconsDecorLayout = 296;
        /**
          <p>
          @attr description
           Default disabled alpha for widgets that set enabled/disabled alpha programmatically. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#disabledAlpha}.
          @attr name android:disabledAlpha
        */
        public: static const int Theme_disabledAlpha = 3;
        /**
          <p>
          @attr description
           Drawable to use for generic horizontal dividers. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dividerHorizontal}.
          @attr name android:dividerHorizontal
        */
        public: static const int Theme_dividerHorizontal = 166;
        /**
          <p>
          @attr description
           Drawable to use for generic vertical dividers. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dividerVertical}.
          @attr name android:dividerVertical
        */
        public: static const int Theme_dividerVertical = 156;
        /**
          <p>
          @attr description
           Default style for drop down hints. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownHintAppearance}.
          @attr name android:dropDownHintAppearance
        */
        public: static const int Theme_dropDownHintAppearance = 80;
        /**
          <p>
          @attr description
           Default style for drop down items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownItemStyle}.
          @attr name android:dropDownItemStyle
        */
        public: static const int Theme_dropDownItemStyle = 78;
        /**
          <p>
          @attr description
           Default ListView style for drop downs. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownListViewStyle}.
          @attr name android:dropDownListViewStyle
        */
        public: static const int Theme_dropDownListViewStyle = 54;
        /**
          <p>
          @attr description
           Default dropdown Spinner style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#dropDownSpinnerStyle}.
          @attr name android:dropDownSpinnerStyle
        */
        public: static const int Theme_dropDownSpinnerStyle = 133;
        /**
          <p>
          @attr description
           The preferred item height for dropdown lists. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:dropdownListPreferredItemHeight
        */
        public: static const int Theme_dropdownListPreferredItemHeight = 233;
        /**
          <p>
          @attr description
           EditText background drawable. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#editTextBackground}.
          @attr name android:editTextBackground
        */
        public: static const int Theme_editTextBackground = 179;
        /**
          <p>
          @attr description
           EditText text foreground color. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#editTextColor}.
          @attr name android:editTextColor
        */
        public: static const int Theme_editTextColor = 178;
        /**
          <p>
          @attr description
           Default style for EditTextPreference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#editTextPreferenceStyle}.
          @attr name android:editTextPreferenceStyle
        */
        public: static const int Theme_editTextPreferenceStyle = 90;
        /**
          <p>
          @attr description
           Default EditText style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#editTextStyle}.
          @attr name android:editTextStyle
        */
        public: static const int Theme_editTextStyle = 55;
        /**
          <p>
          @attr description
           Background used instead of errorMessageBackground when the popup has to be above. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:errorMessageAboveBackground
        */
        public: static const int Theme_errorMessageAboveBackground = 231;
        /**
          <p>
          @attr description
           Popup text displayed in TextView when setError is used. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:errorMessageBackground
        */
        public: static const int Theme_errorMessageBackground = 230;
        /**
          <p>
          @attr description
           The preferred left bound for an expandable list child's indicator. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#expandableListPreferredChildIndicatorLeft}.
          @attr name android:expandableListPreferredChildIndicatorLeft
        */
        public: static const int Theme_expandableListPreferredChildIndicatorLeft = 34;
        /**
          <p>
          @attr description
           The preferred right bound for an expandable list child's indicator. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#expandableListPreferredChildIndicatorRight}.
          @attr name android:expandableListPreferredChildIndicatorRight
        */
        public: static const int Theme_expandableListPreferredChildIndicatorRight = 35;
        /**
          <p>
          @attr description
           The preferred left padding for an expandable list item that is a child.
             If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#expandableListPreferredChildPaddingLeft}.
          @attr name android:expandableListPreferredChildPaddingLeft
        */
        public: static const int Theme_expandableListPreferredChildPaddingLeft = 31;
        /**
          <p>
          @attr description
           The preferred left bound for an expandable list item's indicator. For a child-specific
             indicator, use expandableListPreferredChildIndicatorLeft. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#expandableListPreferredItemIndicatorLeft}.
          @attr name android:expandableListPreferredItemIndicatorLeft
        */
        public: static const int Theme_expandableListPreferredItemIndicatorLeft = 32;
        /**
          <p>
          @attr description
           The preferred right bound for an expandable list item's indicator. For a child-specific
             indicator, use expandableListPreferredChildIndicatorRight. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#expandableListPreferredItemIndicatorRight}.
          @attr name android:expandableListPreferredItemIndicatorRight
        */
        public: static const int Theme_expandableListPreferredItemIndicatorRight = 33;
        /**
          <p>
          @attr description
           The preferred left padding for an expandable list item (for child-specific layouts,
             use expandableListPreferredChildPaddingLeft). This takes into account
             the indicator that will be shown to next to the item. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#expandableListPreferredItemPaddingLeft}.
          @attr name android:expandableListPreferredItemPaddingLeft
        */
        public: static const int Theme_expandableListPreferredItemPaddingLeft = 30;
        /**
          <p>
          @attr description
           Default ExpandableListView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#expandableListViewStyle}.
          @attr name android:expandableListViewStyle
        */
        public: static const int Theme_expandableListViewStyle = 56;
        /**
          <p>
          @attr description
           ExpandableListView with white background. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#expandableListViewWhiteStyle}.
          @attr name android:expandableListViewWhiteStyle
        */
        public: static const int Theme_expandableListViewWhiteStyle = 125;
        /**
          <p>
          @attr description
           Position of the fast scroll index overlay window. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>floating</code></td><td>0</td><td></td></tr>
<tr><td><code>atThumb</code></td><td>1</td><td></td></tr>
<tr><td><code>aboveThumb</code></td><td>2</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fastScrollOverlayPosition}.
          @attr name android:fastScrollOverlayPosition
        */
        public: static const int Theme_fastScrollOverlayPosition = 174;
        /**
          <p>
          @attr description
           Drawable to use as the fast scroll index preview window background
             when shown on the left. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fastScrollPreviewBackgroundLeft}.
          @attr name android:fastScrollPreviewBackgroundLeft
        */
        public: static const int Theme_fastScrollPreviewBackgroundLeft = 171;
        /**
          <p>
          @attr description
           Drawable to use as the fast scroll index preview window background
             when shown on the right. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fastScrollPreviewBackgroundRight}.
          @attr name android:fastScrollPreviewBackgroundRight
        */
        public: static const int Theme_fastScrollPreviewBackgroundRight = 172;
        /**
          <p>
          @attr description
           Text color for the fast scroll index overlay. Make sure it
             plays nicely with fastScrollPreviewBackground[Left|Right]. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fastScrollTextColor}.
          @attr name android:fastScrollTextColor
        */
        public: static const int Theme_fastScrollTextColor = 182;
        /**
          <p>
          @attr description
           Drawable to use as the fast scroll thumb. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fastScrollThumbDrawable}.
          @attr name android:fastScrollThumbDrawable
        */
        public: static const int Theme_fastScrollThumbDrawable = 170;
        /**
          <p>
          @attr description
           Drawable to use as the track for the fast scroll thumb.
             This may be null. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fastScrollTrackDrawable}.
          @attr name android:fastScrollTrackDrawable
        */
        public: static const int Theme_fastScrollTrackDrawable = 173;
        /**
          <p>
          @attr description
           Drawable for WebView find-on-page dialogue's "next" button. @hide 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:findOnPageNextDrawable
        */
        public: static const int Theme_findOnPageNextDrawable = 304;
        /**
          <p>
          @attr description
           Drawable for WebView find-on-page dialogue's "previous" button. @hide 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:findOnPagePreviousDrawable
        */
        public: static const int Theme_findOnPagePreviousDrawable = 305;
        /**
          <p>
          @attr description
           Default style for the FragmentBreadCrumbs widget. This widget is deprecated
             starting in API level 21 ({@link android.os.Build.VERSION_CODES#.L}). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:fragmentBreadCrumbsStyle
        */
        public: static const int Theme_fragmentBreadCrumbsStyle = 243;
        /**
          <p>
          @attr description
           The preferred background for gallery items. This should be set
             as the background of any Views you provide from the Adapter. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#galleryItemBackground}.
          @attr name android:galleryItemBackground
        */
        public: static const int Theme_galleryItemBackground = 28;
        /**
          <p>
          @attr description
           Default Gallery style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#galleryStyle}.
          @attr name android:galleryStyle
        */
        public: static const int Theme_galleryStyle = 57;
        /**
          <p>
          @attr description
           Default GestureOverlayView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:gestureOverlayViewStyle
        */
        public: static const int Theme_gestureOverlayViewStyle = 241;
        /**
          <p>
          @attr description
           Default GridView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gridViewStyle}.
          @attr name android:gridViewStyle
        */
        public: static const int Theme_gridViewStyle = 58;
        /**
          <p>
          @attr description
           Specifies a drawable to use for the 'home as up' indicator. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#homeAsUpIndicator}.
          @attr name android:homeAsUpIndicator
        */
        public: static const int Theme_homeAsUpIndicator = 157;
        /**
          <p>
          @attr description
           Default HorizontalScrollView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#horizontalScrollViewStyle}.
          @attr name android:horizontalScrollViewStyle
        */
        public: static const int Theme_horizontalScrollViewStyle = 180;
        /**
          <p>
          @attr description
           The style resource to use for an ImageButton. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imageButtonStyle}.
          @attr name android:imageButtonStyle
        */
        public: static const int Theme_imageButtonStyle = 59;
        /**
          <p>
          @attr description
           The style resource to use for an ImageButton that is an image well. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#imageWellStyle}.
          @attr name android:imageWellStyle
        */
        public: static const int Theme_imageWellStyle = 60;
        /**
          <p>
          @attr description
           @hide The default radius of the light used to project view shadows. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:lightRadius
        */
        public: static const int Theme_lightRadius = 309;
        /**
          <p>
          @attr description
           @hide The default Y position of the light used to project view shadows. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:lightY
        */
        public: static const int Theme_lightY = 307;
        /**
          <p>
          @attr description
           @hide The default Z position of the light used to project view shadows. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:lightZ
        */
        public: static const int Theme_lightZ = 308;
        /**
          <p>
          @attr description
           Drawable used as a background for selected list items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listChoiceBackgroundIndicator}.
          @attr name android:listChoiceBackgroundIndicator
        */
        public: static const int Theme_listChoiceBackgroundIndicator = 141;
        /**
          <p>
          @attr description
           Drawable to use for multiple choice indicators. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listChoiceIndicatorMultiple}.
          @attr name android:listChoiceIndicatorMultiple
        */
        public: static const int Theme_listChoiceIndicatorMultiple = 104;
        /**
          <p>
          @attr description
           Drawable to use for single choice indicators. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listChoiceIndicatorSingle}.
          @attr name android:listChoiceIndicatorSingle
        */
        public: static const int Theme_listChoiceIndicatorSingle = 103;
        /**
          <p>
          @attr description
           The drawable for the list divider. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listDivider}.
          @attr name android:listDivider
        */
        public: static const int Theme_listDivider = 102;
        /**
          <p>
          @attr description
           The list divider used in alert dialogs. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listDividerAlertDialog}.
          @attr name android:listDividerAlertDialog
        */
        public: static const int Theme_listDividerAlertDialog = 152;
        /**
          <p>
          @attr description
           Default ListPopupWindow style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listPopupWindowStyle}.
          @attr name android:listPopupWindowStyle
        */
        public: static const int Theme_listPopupWindowStyle = 148;
        /**
          <p>
          @attr description
           The preferred list item height. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listPreferredItemHeight}.
          @attr name android:listPreferredItemHeight
        */
        public: static const int Theme_listPreferredItemHeight = 29;
        /**
          <p>
          @attr description
           A larger, more robust list item height. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listPreferredItemHeightLarge}.
          @attr name android:listPreferredItemHeightLarge
        */
        public: static const int Theme_listPreferredItemHeightLarge = 194;
        /**
          <p>
          @attr description
           A smaller, sleeker list item height. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listPreferredItemHeightSmall}.
          @attr name android:listPreferredItemHeightSmall
        */
        public: static const int Theme_listPreferredItemHeightSmall = 195;
        /**
          <p>
          @attr description
           The preferred padding along the end edge of list items. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listPreferredItemPaddingEnd}.
          @attr name android:listPreferredItemPaddingEnd
        */
        public: static const int Theme_listPreferredItemPaddingEnd = 214;
        /**
          <p>
          @attr description
           The preferred padding along the left edge of list items. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listPreferredItemPaddingLeft}.
          @attr name android:listPreferredItemPaddingLeft
        */
        public: static const int Theme_listPreferredItemPaddingLeft = 209;
        /**
          <p>
          @attr description
           The preferred padding along the right edge of list items. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listPreferredItemPaddingRight}.
          @attr name android:listPreferredItemPaddingRight
        */
        public: static const int Theme_listPreferredItemPaddingRight = 210;
        /**
          <p>
          @attr description
           The preferred padding along the start edge of list items. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listPreferredItemPaddingStart}.
          @attr name android:listPreferredItemPaddingStart
        */
        public: static const int Theme_listPreferredItemPaddingStart = 213;
        /**
          <p>
          @attr description
           TextView style for list separators. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listSeparatorTextViewStyle}.
          @attr name android:listSeparatorTextViewStyle
        */
        public: static const int Theme_listSeparatorTextViewStyle = 96;
        /**
          <p>
          @attr description
           Default ListView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listViewStyle}.
          @attr name android:listViewStyle
        */
        public: static const int Theme_listViewStyle = 61;
        /**
          <p>
          @attr description
           ListView with white background. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#listViewWhiteStyle}.
          @attr name android:listViewWhiteStyle
        */
        public: static const int Theme_listViewWhiteStyle = 62;
        /**
          <p>
          @attr description
           Default MapView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#mapViewStyle}.
          @attr name android:mapViewStyle
        */
        public: static const int Theme_mapViewStyle = 82;
        /**
          <p>
          @attr description
           Default style for the MediaRouteButton widget. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#mediaRouteButtonStyle}.
          @attr name android:mediaRouteButtonStyle
        */
        public: static const int Theme_mediaRouteButtonStyle = 212;
        /**
          <p>
          @attr description
           NumberPicker style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:numberPickerStyle
        */
        public: static const int Theme_numberPickerStyle = 244;
        /**
          <p>
          @attr description
           The background of a panel when it is inset from the left and right edges of the screen. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#panelBackground}.
          @attr name android:panelBackground
        */
        public: static const int Theme_panelBackground = 46;
        /**
          <p>
          @attr description
           Color that matches (as closely as possible) the panel background. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#panelColorBackground}.
          @attr name android:panelColorBackground
        */
        public: static const int Theme_panelColorBackground = 49;
        /**
          <p>
          @attr description
           Default color of foreground panel imagery. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#panelColorForeground}.
          @attr name android:panelColorForeground
        */
        public: static const int Theme_panelColorForeground = 48;
        /**
          <p>
          @attr description
           The background of a panel when it extends to the left and right edges of the screen. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#panelFullBackground}.
          @attr name android:panelFullBackground
        */
        public: static const int Theme_panelFullBackground = 47;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#panelMenuIsCompact}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:panelMenuIsCompact
        */
        public: static const int Theme_panelMenuIsCompact = 238;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#panelMenuListTheme}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:panelMenuListTheme
        */
        public: static const int Theme_panelMenuListTheme = 240;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#panelMenuListWidth}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:panelMenuListWidth
        */
        public: static const int Theme_panelMenuListWidth = 239;
        /**
          <p>
          @attr description
           Default appearance of panel text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#panelTextAppearance}.
          @attr name android:panelTextAppearance
        */
        public: static const int Theme_panelTextAppearance = 50;
        /**
          <p>
          @attr description
           Reference to the Pointer style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:pointerStyle
        */
        public: static const int Theme_pointerStyle = 302;
        /**
          <p>
          @attr description
           Default PopupMenu style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupMenuStyle}.
          @attr name android:popupMenuStyle
        */
        public: static const int Theme_popupMenuStyle = 149;
        /**
          <p>
          @attr description
           Default PopupWindow style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupWindowStyle}.
          @attr name android:popupWindowStyle
        */
        public: static const int Theme_popupWindowStyle = 63;
        /**
          <p>
          @attr description
           Default style for the PreferenceActivity. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:preferenceActivityStyle
        */
        public: static const int Theme_preferenceActivityStyle = 247;
        /**
          <p>
          @attr description
           Default style for PreferenceCategory. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#preferenceCategoryStyle}.
          @attr name android:preferenceCategoryStyle
        */
        public: static const int Theme_preferenceCategoryStyle = 84;
        /**
          <p>
          @attr description
           Preference fragment list style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:preferenceFragmentListStyle
        */
        public: static const int Theme_preferenceFragmentListStyle = 293;
        /**
          <p>
          @attr description
           Preference fragment padding side 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:preferenceFragmentPaddingSide
        */
        public: static const int Theme_preferenceFragmentPaddingSide = 294;
        /**
          <p>
          @attr description
           Default style for Headers pane in PreferenceActivity. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:preferenceFragmentStyle
        */
        public: static const int Theme_preferenceFragmentStyle = 248;
        /**
          <p>
          @attr description
           Preference frame layout styles. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:preferenceFrameLayoutStyle
        */
        public: static const int Theme_preferenceFrameLayoutStyle = 301;
        /**
          <p>
          @attr description
           Preference headers panel style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:preferenceHeaderPanelStyle
        */
        public: static const int Theme_preferenceHeaderPanelStyle = 250;
        /**
          <p>
          @attr description
           Default style for informational Preference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#preferenceInformationStyle}.
          @attr name android:preferenceInformationStyle
        */
        public: static const int Theme_preferenceInformationStyle = 85;
        /**
          <p>
          @attr description
           The preference layout that has the child/tabbed effect. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#preferenceLayoutChild}.
          @attr name android:preferenceLayoutChild
        */
        public: static const int Theme_preferenceLayoutChild = 92;
        /**
          <p>
          @attr description
           Preference list style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:preferenceListStyle
        */
        public: static const int Theme_preferenceListStyle = 292;
        /**
          <p>
          @attr description
           Preference panel style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:preferencePanelStyle
        */
        public: static const int Theme_preferencePanelStyle = 249;
        /**
          <p>
          @attr description
           Default style for PreferenceScreen. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#preferenceScreenStyle}.
          @attr name android:preferenceScreenStyle
        */
        public: static const int Theme_preferenceScreenStyle = 83;
        /**
          <p>
          @attr description
           Default style for Preference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#preferenceStyle}.
          @attr name android:preferenceStyle
        */
        public: static const int Theme_preferenceStyle = 86;
        /**
          <p>
          @attr description
           Theme to use for presentations spawned from this theme. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#presentationTheme}.
          @attr name android:presentationTheme
        */
        public: static const int Theme_presentationTheme = 215;
        /**
          <p>
          @attr description
           Default ProgressBar style. This is a medium circular progress bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBarStyle}.
          @attr name android:progressBarStyle
        */
        public: static const int Theme_progressBarStyle = 64;
        /**
          <p>
          @attr description
           Horizontal ProgressBar style. This is a horizontal progress bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBarStyleHorizontal}.
          @attr name android:progressBarStyleHorizontal
        */
        public: static const int Theme_progressBarStyleHorizontal = 65;
        /**
          <p>
          @attr description
           Inverse ProgressBar style. This is a medium circular progress bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBarStyleInverse}.
          @attr name android:progressBarStyleInverse
        */
        public: static const int Theme_progressBarStyleInverse = 111;
        /**
          <p>
          @attr description
           Large ProgressBar style. This is a large circular progress bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBarStyleLarge}.
          @attr name android:progressBarStyleLarge
        */
        public: static const int Theme_progressBarStyleLarge = 67;
        /**
          <p>
          @attr description
           Large inverse ProgressBar style. This is a large circular progress bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBarStyleLargeInverse}.
          @attr name android:progressBarStyleLargeInverse
        */
        public: static const int Theme_progressBarStyleLargeInverse = 113;
        /**
          <p>
          @attr description
           Small ProgressBar style. This is a small circular progress bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBarStyleSmall}.
          @attr name android:progressBarStyleSmall
        */
        public: static const int Theme_progressBarStyleSmall = 66;
        /**
          <p>
          @attr description
           Small inverse ProgressBar style. This is a small circular progress bar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBarStyleSmallInverse}.
          @attr name android:progressBarStyleSmallInverse
        */
        public: static const int Theme_progressBarStyleSmallInverse = 112;
        /**
          <p>
          @attr description
           Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#progressBarStyleSmallTitle}.
          @attr name android:progressBarStyleSmallTitle
        */
        public: static const int Theme_progressBarStyleSmallTitle = 98;
        /**
          <p>
          @attr description
           Drawable used as an overlay on top of quickcontact photos. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:quickContactBadgeOverlay
        */
        public: static const int Theme_quickContactBadgeOverlay = 242;
        /**
          <p>
          @attr description
           Default quickcontact badge style with large quickcontact window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#quickContactBadgeStyleSmallWindowLarge}.
          @attr name android:quickContactBadgeStyleSmallWindowLarge
        */
        public: static const int Theme_quickContactBadgeStyleSmallWindowLarge = 124;
        /**
          <p>
          @attr description
           Default quickcontact badge style with medium quickcontact window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#quickContactBadgeStyleSmallWindowMedium}.
          @attr name android:quickContactBadgeStyleSmallWindowMedium
        */
        public: static const int Theme_quickContactBadgeStyleSmallWindowMedium = 123;
        /**
          <p>
          @attr description
           Default quickcontact badge style with small quickcontact window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#quickContactBadgeStyleSmallWindowSmall}.
          @attr name android:quickContactBadgeStyleSmallWindowSmall
        */
        public: static const int Theme_quickContactBadgeStyleSmallWindowSmall = 122;
        /**
          <p>
          @attr description
           Default quickcontact badge style with large quickcontact window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#quickContactBadgeStyleWindowLarge}.
          @attr name android:quickContactBadgeStyleWindowLarge
        */
        public: static const int Theme_quickContactBadgeStyleWindowLarge = 121;
        /**
          <p>
          @attr description
           Default quickcontact badge style with medium quickcontact window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#quickContactBadgeStyleWindowMedium}.
          @attr name android:quickContactBadgeStyleWindowMedium
        */
        public: static const int Theme_quickContactBadgeStyleWindowMedium = 120;
        /**
          <p>
          @attr description
           Default quickcontact badge style with small quickcontact window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#quickContactBadgeStyleWindowSmall}.
          @attr name android:quickContactBadgeStyleWindowSmall
        */
        public: static const int Theme_quickContactBadgeStyleWindowSmall = 119;
        /**
          <p>
          @attr description
           Default RadioButton style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#radioButtonStyle}.
          @attr name android:radioButtonStyle
        */
        public: static const int Theme_radioButtonStyle = 71;
        /**
          <p>
          @attr description
           Default RatingBar style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ratingBarStyle}.
          @attr name android:ratingBarStyle
        */
        public: static const int Theme_ratingBarStyle = 69;
        /**
          <p>
          @attr description
           Indicator RatingBar style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ratingBarStyleIndicator}.
          @attr name android:ratingBarStyleIndicator
        */
        public: static const int Theme_ratingBarStyleIndicator = 99;
        /**
          <p>
          @attr description
           Small indicator RatingBar style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ratingBarStyleSmall}.
          @attr name android:ratingBarStyleSmall
        */
        public: static const int Theme_ratingBarStyleSmall = 70;
        /**
          <p>
          @attr description
           Default style for RingtonePreference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#ringtonePreferenceStyle}.
          @attr name android:ringtonePreferenceStyle
        */
        public: static const int Theme_ringtonePreferenceStyle = 91;
        /**
          <p>
          @attr description
           Default ScrollView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollViewStyle}.
          @attr name android:scrollViewStyle
        */
        public: static const int Theme_scrollViewStyle = 72;
        /**
          <p>
          @attr description
           Theme to use for Search Dialogs 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:searchDialogTheme
        */
        public: static const int Theme_searchDialogTheme = 300;
        /**
          <p>
          @attr description
           The list item height for search results. @hide 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:searchResultListItemHeight
        */
        public: static const int Theme_searchResultListItemHeight = 232;
        /**
          <p>
          @attr description
           Style for the search query widget. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchViewStyle}.
          @attr name android:searchViewStyle
        */
        public: static const int Theme_searchViewStyle = 274;
        /**
          <p>
          @attr description
           Search widget more corpus result item background. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:searchWidgetCorpusItemBackground
        */
        public: static const int Theme_searchWidgetCorpusItemBackground = 224;
        /**
          <p>
          @attr description
           Default style for seekbar preferences. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:seekBarPreferenceStyle
        */
        public: static const int Theme_seekBarPreferenceStyle = 295;
        /**
          <p>
          @attr description
           Default SeekBar style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#seekBarStyle}.
          @attr name android:seekBarStyle
        */
        public: static const int Theme_seekBarStyle = 68;
        /**
          <p>
          @attr description
           Style for segmented buttons - a container that houses several buttons
             with the appearance of a singel button broken into segments. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#segmentedButtonStyle}.
          @attr name android:segmentedButtonStyle
        */
        public: static const int Theme_segmentedButtonStyle = 169;
        /**
          <p>
          @attr description
           Background drawable for bordered standalone items that need focus/pressed states. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#selectableItemBackground}.
          @attr name android:selectableItemBackground
        */
        public: static const int Theme_selectableItemBackground = 158;
        /**
          <p>
          @attr description
           Background drawable for borderless standalone items that need focus/pressed states. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#selectableItemBackgroundBorderless}.
          @attr name android:selectableItemBackgroundBorderless
        */
        public: static const int Theme_selectableItemBackgroundBorderless = 269;
        /**
          <p>
          @attr description
           Default style for spinner drop down items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#spinnerDropDownItemStyle}.
          @attr name android:spinnerDropDownItemStyle
        */
        public: static const int Theme_spinnerDropDownItemStyle = 79;
        /**
          <p>
          @attr description
           Default spinner item style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#spinnerItemStyle}.
          @attr name android:spinnerItemStyle
        */
        public: static const int Theme_spinnerItemStyle = 81;
        /**
          <p>
          @attr description
           Default Spinner style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#spinnerStyle}.
          @attr name android:spinnerStyle
        */
        public: static const int Theme_spinnerStyle = 73;
        /**
          <p>
          @attr description
           Alpha value of the spot shadow projected by elevated views, between 0 and 1. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#spotShadowAlpha}.
          @attr name android:spotShadowAlpha
        */
        public: static const int Theme_spotShadowAlpha = 289;
        /**
          <p>
          @attr description
           Default StackView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#stackViewStyle}.
          @attr name android:stackViewStyle
        */
        public: static const int Theme_stackViewStyle = 266;
        /**
          <p>
          @attr description
           Default Star style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#starStyle}.
          @attr name android:starStyle
        */
        public: static const int Theme_starStyle = 74;
        /**
          <p>
          @attr description
           Default style for switch preferences. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#switchPreferenceStyle}.
          @attr name android:switchPreferenceStyle
        */
        public: static const int Theme_switchPreferenceStyle = 190;
        /**
          <p>
          @attr description
           Default style for the Switch widget. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#switchStyle}.
          @attr name android:switchStyle
        */
        public: static const int Theme_switchStyle = 267;
        /**
          <p>
          @attr description
           Default TabWidget style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tabWidgetStyle}.
          @attr name android:tabWidgetStyle
        */
        public: static const int Theme_tabWidgetStyle = 75;
        /**
          <p>
          @attr description
           Default appearance of text: color, typeface, size, and style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearance}.
          @attr name android:textAppearance
        */
        public: static const int Theme_textAppearance = 4;
        /**
          <p>
          @attr description
           The underline color and thickness for auto correction suggestion 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:textAppearanceAutoCorrectionSuggestion
        */
        public: static const int Theme_textAppearanceAutoCorrectionSuggestion = 227;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for the text inside of a button. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceButton}.
          @attr name android:textAppearanceButton
        */
        public: static const int Theme_textAppearanceButton = 95;
        /**
          <p>
          @attr description
           The underline color and thickness for easy correct suggestion 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:textAppearanceEasyCorrectSuggestion
        */
        public: static const int Theme_textAppearanceEasyCorrectSuggestion = 225;
        /**
          <p>
          @attr description
           Default appearance of text against an inverted background:
             color, typeface, size, and style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceInverse}.
          @attr name android:textAppearanceInverse
        */
        public: static const int Theme_textAppearanceInverse = 5;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for "large" text. Defaults to primary text color. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceLarge}.
          @attr name android:textAppearanceLarge
        */
        public: static const int Theme_textAppearanceLarge = 16;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceLargeInverse}.
          @attr name android:textAppearanceLargeInverse
        */
        public: static const int Theme_textAppearanceLargeInverse = 19;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for the text inside of a popup menu. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceLargePopupMenu}.
          @attr name android:textAppearanceLargePopupMenu
        */
        public: static const int Theme_textAppearanceLargePopupMenu = 150;
        /**
          <p>
          @attr description
           The preferred TextAppearance for the primary text of list items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceListItem}.
          @attr name android:textAppearanceListItem
        */
        public: static const int Theme_textAppearanceListItem = 207;
        /**
          <p>
          @attr description
           The preferred TextAppearance for the secondary text of list items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceListItemSecondary}.
          @attr name android:textAppearanceListItemSecondary
        */
        public: static const int Theme_textAppearanceListItemSecondary = 256;
        /**
          <p>
          @attr description
           The preferred TextAppearance for the primary text of small list items. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceListItemSmall}.
          @attr name android:textAppearanceListItemSmall
        */
        public: static const int Theme_textAppearanceListItemSmall = 208;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for "medium" text. Defaults to primary text color. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceMedium}.
          @attr name android:textAppearanceMedium
        */
        public: static const int Theme_textAppearanceMedium = 17;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceMediumInverse}.
          @attr name android:textAppearanceMediumInverse
        */
        public: static const int Theme_textAppearanceMediumInverse = 20;
        /**
          <p>
          @attr description
           The underline color and thickness for misspelled suggestion 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:textAppearanceMisspelledSuggestion
        */
        public: static const int Theme_textAppearanceMisspelledSuggestion = 226;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceSearchResultSubtitle}.
          @attr name android:textAppearanceSearchResultSubtitle
        */
        public: static const int Theme_textAppearanceSearchResultSubtitle = 116;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceSearchResultTitle}.
          @attr name android:textAppearanceSearchResultTitle
        */
        public: static const int Theme_textAppearanceSearchResultTitle = 117;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for "small" text. Defaults to secondary text color. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceSmall}.
          @attr name android:textAppearanceSmall
        */
        public: static const int Theme_textAppearanceSmall = 18;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceSmallInverse}.
          @attr name android:textAppearanceSmallInverse
        */
        public: static const int Theme_textAppearanceSmallInverse = 21;
        /**
          <p>
          @attr description
           Text color, typeface, size, and style for small text inside of a popup menu. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAppearanceSmallPopupMenu}.
          @attr name android:textAppearanceSmallPopupMenu
        */
        public: static const int Theme_textAppearanceSmallPopupMenu = 151;
        /**
          <p>
          @attr description
           Drawable to use for check marks. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textCheckMark}.
          @attr name android:textCheckMark
        */
        public: static const int Theme_textCheckMark = 22;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#textCheckMarkInverse}
          attribute's value can be found in the {@link #Theme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:textCheckMarkInverse
        */
        public: static const int Theme_textCheckMarkInverse = 23;
        /**
          <p>
          @attr description
           Color of list item text in alert dialogs. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorAlertDialogListItem}.
          @attr name android:textColorAlertDialogListItem
        */
        public: static const int Theme_textColorAlertDialogListItem = 153;
        /**
          <p>
          @attr description
           Color of highlighted text, when used in a light theme. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorHighlightInverse}.
          @attr name android:textColorHighlightInverse
        */
        public: static const int Theme_textColorHighlightInverse = 176;
        /**
          <p>
          @attr description
           Inverse hint text color. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorHintInverse}.
          @attr name android:textColorHintInverse
        */
        public: static const int Theme_textColorHintInverse = 15;
        /**
          <p>
          @attr description
           Color of link text (URLs), when used in a light theme. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorLinkInverse}.
          @attr name android:textColorLinkInverse
        */
        public: static const int Theme_textColorLinkInverse = 177;
        /**
          <p>
          @attr description
           The most prominent text color.  


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorPrimary}.
          @attr name android:textColorPrimary
        */
        public: static const int Theme_textColorPrimary = 6;
        /**
          <p>
          @attr description
           Bright text color for use over activated backgrounds. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:textColorPrimaryActivated
        */
        public: static const int Theme_textColorPrimaryActivated = 110;
        /**
          <p>
          @attr description
           Bright text color. Only differentiates based on the disabled state. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorPrimaryDisableOnly}.
          @attr name android:textColorPrimaryDisableOnly
        */
        public: static const int Theme_textColorPrimaryDisableOnly = 7;
        /**
          <p>
          @attr description
           Primary inverse text color, useful for inverted backgrounds. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorPrimaryInverse}.
          @attr name android:textColorPrimaryInverse
        */
        public: static const int Theme_textColorPrimaryInverse = 9;
        /**
          <p>
          @attr description
           Bright inverse text color. Only differentiates based on the disabled state. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorPrimaryInverseDisableOnly}.
          @attr name android:textColorPrimaryInverseDisableOnly
        */
        public: static const int Theme_textColorPrimaryInverseDisableOnly = 114;
        /**
          <p>
          @attr description
           Bright inverse text color. This does not differentiate the disabled state. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorPrimaryInverseNoDisable}.
          @attr name android:textColorPrimaryInverseNoDisable
        */
        public: static const int Theme_textColorPrimaryInverseNoDisable = 13;
        /**
          <p>
          @attr description
           Bright text color. This does not differentiate the disabled state. As an example,
             buttons use this since they display the disabled state via the background and not the
             foreground text color. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorPrimaryNoDisable}.
          @attr name android:textColorPrimaryNoDisable
        */
        public: static const int Theme_textColorPrimaryNoDisable = 11;
        /**
          <p>
          @attr description
           Text color for urls in search suggestions, used by things like global search and the browser. @hide 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:textColorSearchUrl
        */
        public: static const int Theme_textColorSearchUrl = 216;
        /**
          <p>
          @attr description
           Secondary text color. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorSecondary}.
          @attr name android:textColorSecondary
        */
        public: static const int Theme_textColorSecondary = 8;
        /**
          <p>
          @attr description
           Dim text color for use over activated backgrounds. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:textColorSecondaryActivated
        */
        public: static const int Theme_textColorSecondaryActivated = 211;
        /**
          <p>
          @attr description
           Secondary inverse text color, useful for inverted backgrounds. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorSecondaryInverse}.
          @attr name android:textColorSecondaryInverse
        */
        public: static const int Theme_textColorSecondaryInverse = 10;
        /**
          <p>
          @attr description
           Dim inverse text color. This does not differentiate the disabled state. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorSecondaryInverseNoDisable}.
          @attr name android:textColorSecondaryInverseNoDisable
        */
        public: static const int Theme_textColorSecondaryInverseNoDisable = 14;
        /**
          <p>
          @attr description
           Dim text color. This does not differentiate the disabled state. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorSecondaryNoDisable}.
          @attr name android:textColorSecondaryNoDisable
        */
        public: static const int Theme_textColorSecondaryNoDisable = 12;
        /**
          <p>
          @attr description
           Tertiary text color. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorTertiary}.
          @attr name android:textColorTertiary
        */
        public: static const int Theme_textColorTertiary = 100;
        /**
          <p>
          @attr description
           Tertiary inverse text color, useful for inverted backgrounds. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColorTertiaryInverse}.
          @attr name android:textColorTertiaryInverse
        */
        public: static const int Theme_textColorTertiaryInverse = 101;
        /**
          <p>
          @attr description
           Variation of textEditPasteWindowLayout displayed when the clipboard is empty. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textEditNoPasteWindowLayout}.
          @attr name android:textEditNoPasteWindowLayout
        */
        public: static const int Theme_textEditNoPasteWindowLayout = 163;
        /**
          <p>
          @attr description
           The layout of the view that is displayed on top of the cursor to paste inside a
             TextEdit field. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textEditPasteWindowLayout}.
          @attr name android:textEditPasteWindowLayout
        */
        public: static const int Theme_textEditPasteWindowLayout = 162;
        /**
          <p>
          @attr description
           Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textEditSideNoPasteWindowLayout}.
          @attr name android:textEditSideNoPasteWindowLayout
        */
        public: static const int Theme_textEditSideNoPasteWindowLayout = 187;
        /**
          <p>
          @attr description
           Used instead of textEditPasteWindowLayout when the window is moved on the side of the
             insertion cursor because it would be clipped if it were positioned on top. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textEditSidePasteWindowLayout}.
          @attr name android:textEditSidePasteWindowLayout
        */
        public: static const int Theme_textEditSidePasteWindowLayout = 186;
        /**
          <p>
          @attr description
           Layout of the TextView item that will populate the suggestion popup window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textEditSuggestionItemLayout}.
          @attr name android:textEditSuggestionItemLayout
        */
        public: static const int Theme_textEditSuggestionItemLayout = 192;
        /**
          <p>
          @attr description
           Reference to a drawable that will be used to display a text selection
             anchor for positioning the cursor within text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSelectHandle}.
          @attr name android:textSelectHandle
        */
        public: static const int Theme_textSelectHandle = 129;
        /**
          <p>
          @attr description
           Reference to a drawable that will be used to display a text selection
             anchor on the left side of a selection region. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSelectHandleLeft}.
          @attr name android:textSelectHandleLeft
        */
        public: static const int Theme_textSelectHandleLeft = 127;
        /**
          <p>
          @attr description
           Reference to a drawable that will be used to display a text selection
             anchor on the right side of a selection region. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSelectHandleRight}.
          @attr name android:textSelectHandleRight
        */
        public: static const int Theme_textSelectHandleRight = 128;
        /**
          <p>
          @attr description
           Reference to a style that will be used for the window containing a text
             selection anchor. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSelectHandleWindowStyle}.
          @attr name android:textSelectHandleWindowStyle
        */
        public: static const int Theme_textSelectHandleWindowStyle = 130;
        /**
          <p>
          @attr description
           Reference to a style that will be used for the window containing a list of possible
             text suggestions in an EditText. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textSuggestionsWindowStyle}.
          @attr name android:textSuggestionsWindowStyle
        */
        public: static const int Theme_textSuggestionsWindowStyle = 191;
        /**
          <p>
          @attr description
            The underline color 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:textUnderlineColor
        */
        public: static const int Theme_textUnderlineColor = 228;
        /**
          <p>
          @attr description
            The underline thickness 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
          <p>This is a private symbol.
          @attr name android:textUnderlineThickness
        */
        public: static const int Theme_textUnderlineThickness = 229;
        /**
          <p>
          @attr description
           Default TextView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textViewStyle}.
          @attr name android:textViewStyle
        */
        public: static const int Theme_textViewStyle = 76;
        /**
          <p>
          @attr description
           The TimePicker dialog theme. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#timePickerDialogTheme}.
          @attr name android:timePickerDialogTheme
        */
        public: static const int Theme_timePickerDialogTheme = 280;
        /**
          <p>
          @attr description
           The TimePicker style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#timePickerStyle}.
          @attr name android:timePickerStyle
        */
        public: static const int Theme_timePickerStyle = 279;
        /**
          <p>
          @attr description
           Background to use for toasts 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:toastFrameBackground
        */
        public: static const int Theme_toastFrameBackground = 299;
        /**
          <p>
          @attr description
           Default Toolbar style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#toolbarStyle}.
          @attr name android:toolbarStyle
        */
        public: static const int Theme_toolbarStyle = 281;
        /**
          <p>
          @attr description
           Default WebTextView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#webTextViewStyle}.
          @attr name android:webTextViewStyle
        */
        public: static const int Theme_webTextViewStyle = 126;
        /**
          <p>
          @attr description
           Default WebView style. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#webViewStyle}.
          @attr name android:webViewStyle
        */
        public: static const int Theme_webViewStyle = 77;
        /**
          <p>
          @attr description
           Flag indicating whether this window should have an Action Bar
             in place of the usual title bar. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowActionBar}.
          @attr name android:windowActionBar
        */
        public: static const int Theme_windowActionBar = 131;
        /**
          <p>
          @attr description
           Internal layout used internally for window decor 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:windowActionBarFullscreenDecorLayout
        */
        public: static const int Theme_windowActionBarFullscreenDecorLayout = 235;
        /**
          <p>
          @attr description
           Flag indicating whether this window's Action Bar should overlay
             application content. Does nothing if the window would not
             have an Action Bar. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowActionBarOverlay}.
          @attr name android:windowActionBarOverlay
        */
        public: static const int Theme_windowActionBarOverlay = 139;
        /**
          <p>
          @attr description
           Flag indicating whether action modes should overlay window content
             when there is not reserved space for their UI (such as an Action Bar). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowActionModeOverlay}.
          @attr name android:windowActionModeOverlay
        */
        public: static const int Theme_windowActionModeOverlay = 138;
        /**
          <p>
          @attr description
           Flag indicating whether this window allows Activity Transitions.
             Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowActivityTransitions}.
          @attr name android:windowActivityTransitions
        */
        public: static const int Theme_windowActivityTransitions = 290;
        /**
          <p>
          @attr description
           Flag indicating whether this Window's transition should overlap with
             the exiting transition of the calling Activity. Corresponds to
             {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowAllowEnterTransitionOverlap}.
          @attr name android:windowAllowEnterTransitionOverlap
        */
        public: static const int Theme_windowAllowEnterTransitionOverlap = 265;
        /**
          <p>
          @attr description
           Flag indicating whether this Window's transition should overlap with
             the exiting transition of the called Activity when the called Activity
             finishes. Corresponds to
             {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowAllowReturnTransitionOverlap}.
          @attr name android:windowAllowReturnTransitionOverlap
        */
        public: static const int Theme_windowAllowReturnTransitionOverlap = 264;
        /**
          <p>
          @attr description
           Reference to a style resource holding
             the set of window animations to use, which can be
             any of the attributes defined by
             {@link android.R.styleable#WindowAnimation}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowAnimationStyle}.
          @attr name android:windowAnimationStyle
        */
        public: static const int Theme_windowAnimationStyle = 93;
        /**
          <p>
          @attr description
           Drawable to use as the overall window background.  As of
             {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
             be a selector that uses state_accelerated to pick a non-solid
             color when running on devices that can draw such a bitmap
             with complex compositing on top at 60fps.

             <p>There are a few special considerations to use when setting this
             drawable:
             <ul>
             <li> This information will be used to infer the pixel format
                  for your window's surface.  If the drawable has any
                  non-opaque pixels, your window will be translucent
                  (32 bpp).
             <li> If you want to draw the entire background
                  yourself, you should set this drawable to some solid
                  color that closely matches that background (so the
                  system's preview of your window will match), and
                  then in code manually set your window's background to
                  null so it will not be drawn.
             </ul> 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowBackground}.
          @attr name android:windowBackground
        */
        public: static const int Theme_windowBackground = 36;
        /**
          <p>
          @attr description
           Drawable to draw selectively within the inset areas when the windowBackground
             has been set to null. This protects against seeing visual garbage in the
             surface when the app has not drawn any content into this area. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:windowBackgroundFallback
        */
        public: static const int Theme_windowBackgroundFallback = 234;
        /**
          <p>
          @attr description
           Control whether a container should automatically close itself if
             the user touches outside of it.  This only applies to activities
             and dialogs.

             <p>Note: this attribute will only be respected for applications
             that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
             or later. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowCloseOnTouchOutside}.
          @attr name android:windowCloseOnTouchOutside
        */
        public: static const int Theme_windowCloseOnTouchOutside = 183;
        /**
          <p>
          @attr description
           This Drawable is overlaid over the foreground of the Window's content area, usually
             to place a shadow below the title.  


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowContentOverlay}.
          @attr name android:windowContentOverlay
        */
        public: static const int Theme_windowContentOverlay = 41;
        /**
          <p>
          @attr description
           Reference to a TransitionManager XML resource defining the desired
             transitions between different window content. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowContentTransitionManager}.
          @attr name android:windowContentTransitionManager
        */
        public: static const int Theme_windowContentTransitionManager = 223;
        /**
          <p>
          @attr description
           Flag indicating whether this window requests that content changes be performed
             as scene changes with transitions. Corresponds to
             {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowContentTransitions}.
          @attr name android:windowContentTransitions
        */
        public: static const int Theme_windowContentTransitions = 222;
        /**
          <p>
          @attr description
           Flag allowing you to disable the preview animation for a window.
             The default value is false; if set to true, the system can never
             use the window's theme to show a preview of it before your
             actual instance is shown to the user. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowDisablePreview}.
          @attr name android:windowDisablePreview
        */
        public: static const int Theme_windowDisablePreview = 107;
        /**
          <p>
          @attr description
           Flag indicating that this window should allow touches to be split
             across other windows that also support split touch.
             The default value is true for applications with a targetSdkVersion
             of Honeycomb or newer; false otherwise.
             When this flag is false, the first pointer that goes down determines
             the window to which all subsequent touches go until all pointers go up.
             When this flag is true, each pointer (not necessarily the first) that
             goes down determines the window to which all subsequent touches of that
             pointer will go until that pointers go up thereby enabling touches
             with multiple pointers to be split across multiple windows. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowEnableSplitTouch}.
          @attr name android:windowEnableSplitTouch
        */
        public: static const int Theme_windowEnableSplitTouch = 164;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move Views into the initial Window's content Scene. Corresponds to
             {@link android.view.Window#setEnterTransition(android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowEnterTransition}.
          @attr name android:windowEnterTransition
        */
        public: static const int Theme_windowEnterTransition = 260;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the Window's content Scene when launching a new Activity.
             Corresponds to
             {@link android.view.Window#setExitTransition(android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowExitTransition}.
          @attr name android:windowExitTransition
        */
        public: static const int Theme_windowExitTransition = 261;
        /**
          <p>
          @attr description
           Drawable to use as a frame around the window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowFrame}.
          @attr name android:windowFrame
        */
        public: static const int Theme_windowFrame = 37;
        /**
          <p>
          @attr description
           Flag indicating whether this window should fill the entire screen.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowFullscreen}.
          @attr name android:windowFullscreen
        */
        public: static const int Theme_windowFullscreen = 97;
        /**
          <p>
          @attr description
           Flag indicating whether this is a floating window. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowIsFloating}.
          @attr name android:windowIsFloating
        */
        public: static const int Theme_windowIsFloating = 39;
        /**
          <p>
          @attr description
           Flag indicating whether this is a translucent window. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowIsTranslucent}.
          @attr name android:windowIsTranslucent
        */
        public: static const int Theme_windowIsTranslucent = 40;
        /**
          <p>
          @attr description
           Flag indicating that this window should not be displayed at all.
             The default value is false; if set to true, and this window is
             the main window of an Activity, then it will never actually
             be added to the window manager.  This means that your activity
             must immediately quit without waiting for user interaction,
             because there will be no such interaction coming. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowNoDisplay}.
          @attr name android:windowNoDisplay
        */
        public: static const int Theme_windowNoDisplay = 105;
        /**
          <p>
          @attr description
           Flag indicating whether there should be no title on this window. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowNoTitle}.
          @attr name android:windowNoTitle
        */
        public: static const int Theme_windowNoTitle = 38;
        /**
          <p>
          @attr description
           Flag indicating whether this window should extend into overscan region.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowOverscan}.
          @attr name android:windowOverscan
        */
        public: static const int Theme_windowOverscan = 218;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move Views in to the scene when returning from a previously-started Activity.
             Corresponds to
             {@link android.view.Window#setReenterTransition(android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowReenterTransition}.
          @attr name android:windowReenterTransition
        */
        public: static const int Theme_windowReenterTransition = 284;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the scene when the Window is
             preparing to close. Corresponds to
             {@link android.view.Window#setReturnTransition(android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowReturnTransition}.
          @attr name android:windowReturnTransition
        */
        public: static const int Theme_windowReturnTransition = 283;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred into the Window's initial content Scene.
             Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
             android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSharedElementEnterTransition}.
          @attr name android:windowSharedElementEnterTransition
        */
        public: static const int Theme_windowSharedElementEnterTransition = 262;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used when starting a new Activity to move shared elements prior to transferring
             to the called Activity.
             Corresponds to {@link android.view.Window#setSharedElementExitTransition(
             android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSharedElementExitTransition}.
          @attr name android:windowSharedElementExitTransition
        */
        public: static const int Theme_windowSharedElementExitTransition = 263;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used for shared elements transferred back to a calling Activity.
             Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
             android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSharedElementReenterTransition}.
          @attr name android:windowSharedElementReenterTransition
        */
        public: static const int Theme_windowSharedElementReenterTransition = 286;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred back to a calling Activity.
             Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
             android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSharedElementReturnTransition}.
          @attr name android:windowSharedElementReturnTransition
        */
        public: static const int Theme_windowSharedElementReturnTransition = 285;
        /**
          <p>
          @attr description
           Indicates whether or not shared elements should use an overlay
             during transitions. The default value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSharedElementsUseOverlay}.
          @attr name android:windowSharedElementsUseOverlay
        */
        public: static const int Theme_windowSharedElementsUseOverlay = 287;
        /**
          <p>
          @attr description
           Flag indicating that this window's background should be the
             user's current wallpaper.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowShowWallpaper}.
          @attr name android:windowShowWallpaper
        */
        public: static const int Theme_windowShowWallpaper = 115;
        /**
          <p>
          @attr description
           Defines the default soft input state that this window would
             like when it is displayed.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#softInputMode}. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>stateUnspecified</code></td><td>0</td><td> Not specified, use what the system thinks is best.  This
                 is the default. </td></tr>
<tr><td><code>stateUnchanged</code></td><td>1</td><td> Leave the soft input window as-is, in whatever state it
                 last was. </td></tr>
<tr><td><code>stateHidden</code></td><td>2</td><td> Make the soft input area hidden when normally appropriate
                 (when the user is navigating forward to your window). </td></tr>
<tr><td><code>stateAlwaysHidden</code></td><td>3</td><td> Always make the soft input area hidden when this window
                 has input focus. </td></tr>
<tr><td><code>stateVisible</code></td><td>4</td><td> Make the soft input area visible when normally appropriate
                 (when the user is navigating forward to your window). </td></tr>
<tr><td><code>stateAlwaysVisible</code></td><td>5</td><td> Always make the soft input area visible when this window
                 has input focus. </td></tr>
<tr><td><code>adjustUnspecified</code></td><td>0x00</td><td> The window resize/pan adjustment has not been specified,
                 the system will automatically select between resize and pan
                 modes, depending
                 on whether the content of the window has any layout views
                 that can scroll their contents.  If there is such a view,
                 then the window will be resized, with the assumption being
                 that the resizeable area can be reduced to make room for
                 the input UI. </td></tr>
<tr><td><code>adjustResize</code></td><td>0x10</td><td> Always resize the window: the content area of the window is
                 reduced to make room for the soft input area. </td></tr>
<tr><td><code>adjustPan</code></td><td>0x20</td><td> Don't resize the window to make room for the soft input area;
                 instead pan the contents of the window as focus moves inside
                 of it so that the user can see what they are typing.  This is
                 generally less desireable than panning because the user may
                 need to close the input area to get at and interact with
                 parts of the window. </td></tr>
<tr><td><code>adjustNothing</code></td><td>0x30</td><td> Don't resize <em>or</em> pan the window to make room for the
                 soft input area; the window is never adjusted for it. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSoftInputMode}.
          @attr name android:windowSoftInputMode
        */
        public: static const int Theme_windowSoftInputMode = 108;
        /**
          <p>
          @attr description
           Flag to indicate that a window can be swiped away to be dismissed.
             Corresponds to {@link android.view.Window#FEATURE_SWIPE_TO_DISMISS} 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSwipeToDismiss}.
          @attr name android:windowSwipeToDismiss
        */
        public: static const int Theme_windowSwipeToDismiss = 221;
        /**
          <p>
          @attr description
           The style resource to use for a window's title area. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowTitleBackgroundStyle}.
          @attr name android:windowTitleBackgroundStyle
        */
        public: static const int Theme_windowTitleBackgroundStyle = 44;
        /**
          <p>
          @attr description
           The style resource to use for a window's title bar height. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowTitleSize}.
          @attr name android:windowTitleSize
        */
        public: static const int Theme_windowTitleSize = 42;
        /**
          <p>
          @attr description
           The style resource to use for a window's title text. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowTitleStyle}.
          @attr name android:windowTitleStyle
        */
        public: static const int Theme_windowTitleStyle = 43;
        /**
          <p>
          @attr description
           The duration, in milliseconds, of the window background fade duration
             when transitioning into or away from an Activity when called with an
             Activity Transition. Corresponds to
             {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowTransitionBackgroundFadeDuration}.
          @attr name android:windowTransitionBackgroundFadeDuration
        */
        public: static const int Theme_windowTransitionBackgroundFadeDuration = 270;
        /**
          <p>
          @attr description
           Flag indicating whether this window requests a translucent navigation bar.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowTranslucentNavigation}.
          @attr name android:windowTranslucentNavigation
        */
        public: static const int Theme_windowTranslucentNavigation = 220;
        /**
          <p>
          @attr description
           Flag indicating whether this window requests a translucent status bar.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowTranslucentStatus}.
          @attr name android:windowTranslucentStatus
        */
        public: static const int Theme_windowTranslucentStatus = 219;
        /**
          <p>
          @attr description
           Default style for YesNoPreference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#yesNoPreferenceStyle}.
          @attr name android:yesNoPreferenceStyle
        */
        public: static const int Theme_yesNoPreferenceStyle = 88;
        /** Attributes that can be used with a TimePicker.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TimePicker_amPmBackgroundColor android:amPmBackgroundColor}</code></td><td> The background color state list for the AM/PM selectors.</td></tr>
           <tr><td><code>{@link #TimePicker_amPmSelectedBackgroundColor android:amPmSelectedBackgroundColor}</code></td><td> @hide The background color for the AM/PM selectors of the
             TimePicker when selected.</td></tr>
           <tr><td><code>{@link #TimePicker_amPmTextColor android:amPmTextColor}</code></td><td> The color for the AM/PM selectors.</td></tr>
           <tr><td><code>{@link #TimePicker_headerAmPmTextAppearance android:headerAmPmTextAppearance}</code></td><td> The text appearance for the AM/PM header.</td></tr>
           <tr><td><code>{@link #TimePicker_headerBackground android:headerBackground}</code></td><td> The background for the header containing the currently selected time.</td></tr>
           <tr><td><code>{@link #TimePicker_headerSelectedTextColor android:headerSelectedTextColor}</code></td><td> @hide The text color for selected time header of the TimePicker.</td></tr>
           <tr><td><code>{@link #TimePicker_headerTimeTextAppearance android:headerTimeTextAppearance}</code></td><td> The text appearance for the time header.</td></tr>
           <tr><td><code>{@link #TimePicker_internalLayout android:internalLayout}</code></td><td> @hide The layout of the time picker.</td></tr>
           <tr><td><code>{@link #TimePicker_legacyLayout android:legacyLayout}</code></td><td> @hide The layout of the legacy time picker.</td></tr>
           <tr><td><code>{@link #TimePicker_numbersBackgroundColor android:numbersBackgroundColor}</code></td><td> The background color for the hours/minutes numbers.</td></tr>
           <tr><td><code>{@link #TimePicker_numbersSelectorColor android:numbersSelectorColor}</code></td><td> The color for the hours/minutes selector.</td></tr>
           <tr><td><code>{@link #TimePicker_numbersTextColor android:numbersTextColor}</code></td><td> The color for the hours/minutes numbers.</td></tr>
           <tr><td><code>{@link #TimePicker_timePickerMode android:timePickerMode}</code></td><td> Defines the look of the widget.</td></tr>
           </table>
           @see #TimePicker_amPmBackgroundColor
           @see #TimePicker_amPmSelectedBackgroundColor
           @see #TimePicker_amPmTextColor
           @see #TimePicker_headerAmPmTextAppearance
           @see #TimePicker_headerBackground
           @see #TimePicker_headerSelectedTextColor
           @see #TimePicker_headerTimeTextAppearance
           @see #TimePicker_internalLayout
           @see #TimePicker_legacyLayout
           @see #TimePicker_numbersBackgroundColor
           @see #TimePicker_numbersSelectorColor
           @see #TimePicker_numbersTextColor
           @see #TimePicker_timePickerMode
         */
        public: static const int TimePicker[13];
        /**
          <p>
          @attr description
           The background color state list for the AM/PM selectors. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#amPmBackgroundColor}.
          @attr name android:amPmBackgroundColor
        */
        public: static const int TimePicker_amPmBackgroundColor = 7;
        /**
          <p>
          @attr description
           @hide The background color for the AM/PM selectors of the
             TimePicker when selected. Used if the background color does not
             explicitly have a color set for the selected state. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:amPmSelectedBackgroundColor
        */
        public: static const int TimePicker_amPmSelectedBackgroundColor = 12;
        /**
          <p>
          @attr description
           The color for the AM/PM selectors. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#amPmTextColor}.
          @attr name android:amPmTextColor
        */
        public: static const int TimePicker_amPmTextColor = 6;
        /**
          <p>
          @attr description
           The text appearance for the AM/PM header. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#headerAmPmTextAppearance}.
          @attr name android:headerAmPmTextAppearance
        */
        public: static const int TimePicker_headerAmPmTextAppearance = 2;
        /**
          <p>
          @attr description
           The background for the header containing the currently selected time. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#headerBackground}.
          @attr name android:headerBackground
        */
        public: static const int TimePicker_headerBackground = 0;
        /**
          <p>
          @attr description
           @hide The text color for selected time header of the TimePicker.
             This will override the value from the text appearance if it does
             not explicitly have a color set for the selected state. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:headerSelectedTextColor
        */
        public: static const int TimePicker_headerSelectedTextColor = 11;
        /**
          <p>
          @attr description
           The text appearance for the time header. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#headerTimeTextAppearance}.
          @attr name android:headerTimeTextAppearance
        */
        public: static const int TimePicker_headerTimeTextAppearance = 1;
        /**
          <p>
          @attr description
           @hide The layout of the time picker. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:internalLayout
        */
        public: static const int TimePicker_internalLayout = 9;
        /**
          <p>
          @attr description
           @hide The layout of the legacy time picker. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:legacyLayout
        */
        public: static const int TimePicker_legacyLayout = 10;
        /**
          <p>
          @attr description
           The background color for the hours/minutes numbers. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#numbersBackgroundColor}.
          @attr name android:numbersBackgroundColor
        */
        public: static const int TimePicker_numbersBackgroundColor = 4;
        /**
          <p>
          @attr description
           The color for the hours/minutes selector. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#numbersSelectorColor}.
          @attr name android:numbersSelectorColor
        */
        public: static const int TimePicker_numbersSelectorColor = 5;
        /**
          <p>
          @attr description
           The color for the hours/minutes numbers. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#numbersTextColor}.
          @attr name android:numbersTextColor
        */
        public: static const int TimePicker_numbersTextColor = 3;
        /**
          <p>
          @attr description
           Defines the look of the widget. Prior to the L release, the only choice was
             spinner. As of L, with the Material theme selected, the default layout is clock,
             but this attribute can be used to force spinner to be used instead. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>spinner</code></td><td>1</td><td> Time picker with spinner controls to select the time. </td></tr>
<tr><td><code>clock</code></td><td>2</td><td> Time picker with clock face to select the time. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#timePickerMode}.
          @attr name android:timePickerMode
        */
        public: static const int TimePicker_timePickerMode = 8;
        /** Attributes that can be used with a ToggleButton.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ToggleButton_disabledAlpha android:disabledAlpha}</code></td><td> The alpha to apply to the indicator when disabled.</td></tr>
           <tr><td><code>{@link #ToggleButton_textOff android:textOff}</code></td><td> The text for the button when it is not checked.</td></tr>
           <tr><td><code>{@link #ToggleButton_textOn android:textOn}</code></td><td> The text for the button when it is checked.</td></tr>
           </table>
           @see #ToggleButton_disabledAlpha
           @see #ToggleButton_textOff
           @see #ToggleButton_textOn
         */
        public: static const int ToggleButton[3];
        /**
          <p>
          @attr description
           The alpha to apply to the indicator when disabled. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#disabledAlpha}.
          @attr name android:disabledAlpha
        */
        public: static const int ToggleButton_disabledAlpha = 0;
        /**
          <p>
          @attr description
           The text for the button when it is not checked. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textOff}.
          @attr name android:textOff
        */
        public: static const int ToggleButton_textOff = 2;
        /**
          <p>
          @attr description
           The text for the button when it is checked. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textOn}.
          @attr name android:textOn
        */
        public: static const int ToggleButton_textOn = 1;
        /** Attributes that can be used with a Toolbar.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Toolbar_buttonGravity android:buttonGravity}</code></td><td></td></tr>
           <tr><td><code>{@link #Toolbar_collapseIcon android:collapseIcon}</code></td><td></td></tr>
           <tr><td><code>{@link #Toolbar_contentInsetEnd android:contentInsetEnd}</code></td><td> Minimum inset for content views within a bar.</td></tr>
           <tr><td><code>{@link #Toolbar_contentInsetLeft android:contentInsetLeft}</code></td><td> Minimum inset for content views within a bar.</td></tr>
           <tr><td><code>{@link #Toolbar_contentInsetRight android:contentInsetRight}</code></td><td> Minimum inset for content views within a bar.</td></tr>
           <tr><td><code>{@link #Toolbar_contentInsetStart android:contentInsetStart}</code></td><td> Minimum inset for content views within a bar.</td></tr>
           <tr><td><code>{@link #Toolbar_gravity android:gravity}</code></td><td> Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.</td></tr>
           <tr><td><code>{@link #Toolbar_maxButtonHeight android:maxButtonHeight}</code></td><td></td></tr>
           <tr><td><code>{@link #Toolbar_navigationButtonStyle android:navigationButtonStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #Toolbar_navigationContentDescription android:navigationContentDescription}</code></td><td> Text to set as the content description for the navigation button
             located at the start of the toolbar.</td></tr>
           <tr><td><code>{@link #Toolbar_navigationIcon android:navigationIcon}</code></td><td> Icon drawable to use for the navigation button located at
             the start of the toolbar.</td></tr>
           <tr><td><code>{@link #Toolbar_popupTheme android:popupTheme}</code></td><td> Reference to a theme that should be used to inflate popups
             shown by widgets in the toolbar.</td></tr>
           <tr><td><code>{@link #Toolbar_subtitle android:subtitle}</code></td><td> Specifies subtitle text used for navigationMode="normal" </td></tr>
           <tr><td><code>{@link #Toolbar_subtitleTextAppearance android:subtitleTextAppearance}</code></td><td></td></tr>
           <tr><td><code>{@link #Toolbar_title android:title}</code></td><td> The title associated with the item.</td></tr>
           <tr><td><code>{@link #Toolbar_titleMarginBottom android:titleMarginBottom}</code></td><td></td></tr>
           <tr><td><code>{@link #Toolbar_titleMarginEnd android:titleMarginEnd}</code></td><td></td></tr>
           <tr><td><code>{@link #Toolbar_titleMarginStart android:titleMarginStart}</code></td><td></td></tr>
           <tr><td><code>{@link #Toolbar_titleMarginTop android:titleMarginTop}</code></td><td></td></tr>
           <tr><td><code>{@link #Toolbar_titleMargins android:titleMargins}</code></td><td></td></tr>
           <tr><td><code>{@link #Toolbar_titleTextAppearance android:titleTextAppearance}</code></td><td></td></tr>
           </table>
           @see #Toolbar_buttonGravity
           @see #Toolbar_collapseIcon
           @see #Toolbar_contentInsetEnd
           @see #Toolbar_contentInsetLeft
           @see #Toolbar_contentInsetRight
           @see #Toolbar_contentInsetStart
           @see #Toolbar_gravity
           @see #Toolbar_maxButtonHeight
           @see #Toolbar_navigationButtonStyle
           @see #Toolbar_navigationContentDescription
           @see #Toolbar_navigationIcon
           @see #Toolbar_popupTheme
           @see #Toolbar_subtitle
           @see #Toolbar_subtitleTextAppearance
           @see #Toolbar_title
           @see #Toolbar_titleMarginBottom
           @see #Toolbar_titleMarginEnd
           @see #Toolbar_titleMarginStart
           @see #Toolbar_titleMarginTop
           @see #Toolbar_titleMargins
           @see #Toolbar_titleTextAppearance
         */
        public: static const int Toolbar[21];
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#buttonGravity}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
</table>
          @attr name android:buttonGravity
        */
        public: static const int Toolbar_buttonGravity = 19;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#collapseIcon}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:collapseIcon
        */
        public: static const int Toolbar_collapseIcon = 20;
        /**
          <p>
          @attr description
           Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentInsetEnd}.
          @attr name android:contentInsetEnd
        */
        public: static const int Toolbar_contentInsetEnd = 6;
        /**
          <p>
          @attr description
           Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentInsetLeft}.
          @attr name android:contentInsetLeft
        */
        public: static const int Toolbar_contentInsetLeft = 7;
        /**
          <p>
          @attr description
           Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentInsetRight}.
          @attr name android:contentInsetRight
        */
        public: static const int Toolbar_contentInsetRight = 8;
        /**
          <p>
          @attr description
           Minimum inset for content views within a bar. Navigation buttons and
             menu views are excepted. Only valid for some themes and configurations. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentInsetStart}.
          @attr name android:contentInsetStart
        */
        public: static const int Toolbar_contentInsetStart = 5;
        /**
          <p>
          @attr description
           Specifies how an object should position its content, on both the X and Y axes,
         within its own bounds.  


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#gravity}.
          @attr name android:gravity
        */
        public: static const int Toolbar_gravity = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#maxButtonHeight}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:maxButtonHeight
        */
        public: static const int Toolbar_maxButtonHeight = 17;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#navigationButtonStyle}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:navigationButtonStyle
        */
        public: static const int Toolbar_navigationButtonStyle = 18;
        /**
          <p>
          @attr description
           Text to set as the content description for the navigation button
             located at the start of the toolbar. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#navigationContentDescription}.
          @attr name android:navigationContentDescription
        */
        public: static const int Toolbar_navigationContentDescription = 11;
        /**
          <p>
          @attr description
           Icon drawable to use for the navigation button located at
             the start of the toolbar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#navigationIcon}.
          @attr name android:navigationIcon
        */
        public: static const int Toolbar_navigationIcon = 10;
        /**
          <p>
          @attr description
           Reference to a theme that should be used to inflate popups
             shown by widgets in the toolbar. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#popupTheme}.
          @attr name android:popupTheme
        */
        public: static const int Toolbar_popupTheme = 9;
        /**
          <p>
          @attr description
           Specifies subtitle text used for navigationMode="normal" 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#subtitle}.
          @attr name android:subtitle
        */
        public: static const int Toolbar_subtitle = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#subtitleTextAppearance}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:subtitleTextAppearance
        */
        public: static const int Toolbar_subtitleTextAppearance = 4;
        /**
          <p>
          @attr description
           The title associated with the item. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public: static const int Toolbar_title = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#titleMarginBottom}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:titleMarginBottom
        */
        public: static const int Toolbar_titleMarginBottom = 16;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#titleMarginEnd}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:titleMarginEnd
        */
        public: static const int Toolbar_titleMarginEnd = 14;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#titleMarginStart}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:titleMarginStart
        */
        public: static const int Toolbar_titleMarginStart = 13;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#titleMarginTop}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:titleMarginTop
        */
        public: static const int Toolbar_titleMarginTop = 15;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#titleMargins}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:titleMargins
        */
        public: static const int Toolbar_titleMargins = 12;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#titleTextAppearance}
          attribute's value can be found in the {@link #Toolbar} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:titleTextAppearance
        */
        public: static const int Toolbar_titleTextAppearance = 3;
        /** Attributes that can be used with a Toolbar_LayoutParams.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Toolbar_LayoutParams_layout_gravity android:layout_gravity}</code></td><td> Standard gravity constant that a child supplies to its parent.</td></tr>
           </table>
           @see #Toolbar_LayoutParams_layout_gravity
         */
        public: static const int Toolbar_LayoutParams[1];
        /**
          <p>
          @attr description
           Standard gravity constant that a child supplies to its parent.
         Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_gravity}.
          @attr name android:layout_gravity
        */
        public: static const int Toolbar_LayoutParams_layout_gravity = 0;
        /**  Use specific transition subclass names as the root tag of the XML resource that
         describes a {@link android.transition.Transition Transition},
         such as <code>changeBounds</code>, <code>fade</code>, and <code>transitionSet</code>. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Transition_duration android:duration}</code></td><td> Amount of time (in milliseconds) that the transition should run.</td></tr>
           <tr><td><code>{@link #Transition_interpolator android:interpolator}</code></td><td> Interpolator to be used in the animations spawned by this transition.</td></tr>
           <tr><td><code>{@link #Transition_matchOrder android:matchOrder}</code></td><td> The match order to use for the transition.</td></tr>
           <tr><td><code>{@link #Transition_startDelay android:startDelay}</code></td><td> Delay in milliseconds before the transition starts.</td></tr>
           </table>
           @see #Transition_duration
           @see #Transition_interpolator
           @see #Transition_matchOrder
           @see #Transition_startDelay
         */
        public: static const int Transition[4];
        /**
          <p>
          @attr description
           Amount of time (in milliseconds) that the transition should run. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#duration}.
          @attr name android:duration
        */
        public: static const int Transition_duration = 1;
        /**
          <p>
          @attr description
           Interpolator to be used in the animations spawned by this transition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#interpolator}.
          @attr name android:interpolator
        */
        public: static const int Transition_interpolator = 0;
        /**
          <p>
          @attr description
           The match order to use for the transition. This is a comma-separated
             list of values, containing one or more of the following:
             id, itemId, name, instance. These correspond to
             {@link android.transition.Transition#MATCH_ID},
             {@link android.transition.Transition#MATCH_ITEM_ID},
             {@link android.transition.Transition#MATCH_NAME}, and
             {@link android.transition.Transition#MATCH_INSTANCE}, respectively.
             This corresponds to {@link android.transition.Transition#setMatchOrder(int...)}. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#matchOrder}.
          @attr name android:matchOrder
        */
        public: static const int Transition_matchOrder = 3;
        /**
          <p>
          @attr description
           Delay in milliseconds before the transition starts. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#startDelay}.
          @attr name android:startDelay
        */
        public: static const int Transition_startDelay = 2;
        /**  Use <code>transitionManager</code> as the root tag of the XML resource that
         describes a {@link android.transition.TransitionManager
         TransitionManager}. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TransitionManager_fromScene android:fromScene}</code></td><td> The originating scene in this scene change.</td></tr>
           <tr><td><code>{@link #TransitionManager_toScene android:toScene}</code></td><td> The destination scene in this scene change.</td></tr>
           <tr><td><code>{@link #TransitionManager_transition android:transition}</code></td><td> The id of a transition to be used in a particular scene change.</td></tr>
           </table>
           @see #TransitionManager_fromScene
           @see #TransitionManager_toScene
           @see #TransitionManager_transition
         */
        public: static const int TransitionManager[3];
        /**
          <p>
          @attr description
           The originating scene in this scene change. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fromScene}.
          @attr name android:fromScene
        */
        public: static const int TransitionManager_fromScene = 0;
        /**
          <p>
          @attr description
           The destination scene in this scene change. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#toScene}.
          @attr name android:toScene
        */
        public: static const int TransitionManager_toScene = 1;
        /**
          <p>
          @attr description
           The id of a transition to be used in a particular scene change. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#transition}.
          @attr name android:transition
        */
        public: static const int TransitionManager_transition = 2;
        /**  Use <code>set</code> as the root tag of the XML resource that
         describes a {@link android.transition.TransitionSet
         TransitionSet} transition. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TransitionSet_transitionOrdering android:transitionOrdering}</code></td><td></td></tr>
           </table>
           @see #TransitionSet_transitionOrdering
         */
        public: static const int TransitionSet[1];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#transitionOrdering}
          attribute's value can be found in the {@link #TransitionSet} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>together</code></td><td>0</td><td> child transitions should be played together. </td></tr>
<tr><td><code>sequential</code></td><td>1</td><td> child transitions should be played sequentially, in the same order
            as the xml. </td></tr>
</table>
          @attr name android:transitionOrdering
        */
        public: static const int TransitionSet_transitionOrdering = 0;
        /**  Use <code>target</code> as the root tag of the XML resource that
     describes a {@link android.transition.Transition#addTarget(int)
     targetId} of a transition. There can be one or more targets inside
     a <code>targets</code> tag, which is itself inside an appropriate
     {@link android.R.styleable#Transition Transition} tag.
     
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TransitionTarget_excludeClass android:excludeClass}</code></td><td> The fully-qualified name of the Class to exclude from this transition.</td></tr>
           <tr><td><code>{@link #TransitionTarget_excludeId android:excludeId}</code></td><td> The id of a target to exclude from this transition.</td></tr>
           <tr><td><code>{@link #TransitionTarget_excludeName android:excludeName}</code></td><td> The transitionName of the target to exclude from this transition.</td></tr>
           <tr><td><code>{@link #TransitionTarget_targetClass android:targetClass}</code></td><td> The fully-qualified name of the Class to include in this transition.</td></tr>
           <tr><td><code>{@link #TransitionTarget_targetId android:targetId}</code></td><td> The id of a target on which this transition will animate changes.</td></tr>
           <tr><td><code>{@link #TransitionTarget_targetName android:targetName}</code></td><td> The transitionName of the target on which this transition will animation changes.</td></tr>
           </table>
           @see #TransitionTarget_excludeClass
           @see #TransitionTarget_excludeId
           @see #TransitionTarget_excludeName
           @see #TransitionTarget_targetClass
           @see #TransitionTarget_targetId
           @see #TransitionTarget_targetName
         */
        public: static const int TransitionTarget[6];
        /**
          <p>
          @attr description
           The fully-qualified name of the Class to exclude from this transition. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#excludeClass}.
          @attr name android:excludeClass
        */
        public: static const int TransitionTarget_excludeClass = 3;
        /**
          <p>
          @attr description
           The id of a target to exclude from this transition. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#excludeId}.
          @attr name android:excludeId
        */
        public: static const int TransitionTarget_excludeId = 2;
        /**
          <p>
          @attr description
           The transitionName of the target to exclude from this transition. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#excludeName}.
          @attr name android:excludeName
        */
        public: static const int TransitionTarget_excludeName = 5;
        /**
          <p>
          @attr description
           The fully-qualified name of the Class to include in this transition. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#targetClass}.
          @attr name android:targetClass
        */
        public: static const int TransitionTarget_targetClass = 0;
        /**
          <p>
          @attr description
           The id of a target on which this transition will animate changes. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#targetId}.
          @attr name android:targetId
        */
        public: static const int TransitionTarget_targetId = 1;
        /**
          <p>
          @attr description
           The transitionName of the target on which this transition will animation changes. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#targetName}.
          @attr name android:targetName
        */
        public: static const int TransitionTarget_targetName = 4;
        /** Attributes that can be used with a TranslateAnimation.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TranslateAnimation_fromXDelta android:fromXDelta}</code></td><td></td></tr>
           <tr><td><code>{@link #TranslateAnimation_fromYDelta android:fromYDelta}</code></td><td></td></tr>
           <tr><td><code>{@link #TranslateAnimation_toXDelta android:toXDelta}</code></td><td></td></tr>
           <tr><td><code>{@link #TranslateAnimation_toYDelta android:toYDelta}</code></td><td></td></tr>
           </table>
           @see #TranslateAnimation_fromXDelta
           @see #TranslateAnimation_fromYDelta
           @see #TranslateAnimation_toXDelta
           @see #TranslateAnimation_toYDelta
         */
        public: static const int TranslateAnimation[4];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fromXDelta}
          attribute's value can be found in the {@link #TranslateAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:fromXDelta
        */
        public: static const int TranslateAnimation_fromXDelta = 0;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#fromYDelta}
          attribute's value can be found in the {@link #TranslateAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:fromYDelta
        */
        public: static const int TranslateAnimation_fromYDelta = 2;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#toXDelta}
          attribute's value can be found in the {@link #TranslateAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:toXDelta
        */
        public: static const int TranslateAnimation_toXDelta = 1;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#toYDelta}
          attribute's value can be found in the {@link #TranslateAnimation} array.


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:toYDelta
        */
        public: static const int TranslateAnimation_toYDelta = 3;
        /**  @SystemApi Use <code>trust-agent</code> as the root tag of the XML resource that
         describes an {@link android.service.trust.TrustAgentService}, which is
         referenced from its {@link android.service.trust.TrustAgentService#TRUST_AGENT_META_DATA}
         meta-data entry.  Described here are the attributes that can be included in that tag.
         @hide 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TrustAgent_settingsActivity android:settingsActivity}</code></td><td> @SystemApi Component name of an activity that allows the user to modify
             the settings for this trust agent.</td></tr>
           <tr><td><code>{@link #TrustAgent_summary android:summary}</code></td><td> @SystemApi Summary for the same preference as the title.</td></tr>
           <tr><td><code>{@link #TrustAgent_title android:title}</code></td><td> @SystemApi Title for a preference that allows that user to launch the
             activity to modify trust agent settings.</td></tr>
           </table>
           @see #TrustAgent_settingsActivity
           @see #TrustAgent_summary
           @see #TrustAgent_title
         */
        public: static const int TrustAgent[3];
        /**
          <p>
          @attr description
           @SystemApi Component name of an activity that allows the user to modify
             the settings for this trust agent. @hide 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int TrustAgent_settingsActivity = 2;
        /**
          <p>
          @attr description
           @SystemApi Summary for the same preference as the title. @hide 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#summary}.
          @attr name android:summary
        */
        public: static const int TrustAgent_summary = 1;
        /**
          <p>
          @attr description
           @SystemApi Title for a preference that allows that user to launch the
             activity to modify trust agent settings. @hide 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#title}.
          @attr name android:title
        */
        public: static const int TrustAgent_title = 0;
        /**  Use <code>tv-input</code> as the root tag of the XML resource that describes a
         {@link android.media.tv.TvInputService}, which is referenced from its
         {@link android.media.tv.TvInputService#SERVICE_META_DATA} meta-data entry.
         Described here are the attributes that can be included in that tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TvInputService_settingsActivity android:settingsActivity}</code></td><td> Component name of an activity that allows the user to modify
             the settings for this service.</td></tr>
           <tr><td><code>{@link #TvInputService_setupActivity android:setupActivity}</code></td><td> Component name of an activity for setup of this service.</td></tr>
           </table>
           @see #TvInputService_settingsActivity
           @see #TvInputService_setupActivity
         */
        public: static const int TvInputService[2];
        /**
          <p>
          @attr description
           Component name of an activity that allows the user to modify
             the settings for this service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int TvInputService_settingsActivity = 0;
        /**
          <p>
          @attr description
           Component name of an activity for setup of this service.
             The setup includes scanning channels and registering EPG data. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#setupActivity}.
          @attr name android:setupActivity
        */
        public: static const int TvInputService_setupActivity = 1;
        /** Attributes that can be used with a TwoLineListItem.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TwoLineListItem_mode android:mode}</code></td><td></td></tr>
           </table>
           @see #TwoLineListItem_mode
         */
        public: static const int TwoLineListItem[1];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#mode}
          attribute's value can be found in the {@link #TwoLineListItem} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>oneLine</code></td><td>1</td><td> Always show only the first line. </td></tr>
<tr><td><code>collapsing</code></td><td>2</td><td> When selected show both lines, otherwise show only the first line.
                 This is the default mode. </td></tr>
<tr><td><code>twoLine</code></td><td>3</td><td> Always show both lines. </td></tr>
</table>
          @attr name android:mode
        */
        public: static const int TwoLineListItem_mode = 0;
        /**  Drawable used to draw vector paths. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #VectorDrawable_alpha android:alpha}</code></td><td> The opacity of the whole vector drawable, as a value between 0
             (completely transparent) and 1 (completely opaque).</td></tr>
           <tr><td><code>{@link #VectorDrawable_autoMirrored android:autoMirrored}</code></td><td> Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left).</td></tr>
           <tr><td><code>{@link #VectorDrawable_height android:height}</code></td><td> The intrinsic height of the Vector Drawable.</td></tr>
           <tr><td><code>{@link #VectorDrawable_name android:name}</code></td><td> The name of this vector drawable </td></tr>
           <tr><td><code>{@link #VectorDrawable_tint android:tint}</code></td><td> If set, specifies the color to apply to the drawable as a tint.</td></tr>
           <tr><td><code>{@link #VectorDrawable_tintMode android:tintMode}</code></td><td> When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
           <tr><td><code>{@link #VectorDrawable_viewportHeight android:viewportHeight}</code></td><td> The height of the canvas the drawing is on.</td></tr>
           <tr><td><code>{@link #VectorDrawable_viewportWidth android:viewportWidth}</code></td><td> The width of the canvas the drawing is on.</td></tr>
           <tr><td><code>{@link #VectorDrawable_width android:width}</code></td><td> The intrinsic width of the Vector Drawable.</td></tr>
           </table>
           @see #VectorDrawable_alpha
           @see #VectorDrawable_autoMirrored
           @see #VectorDrawable_height
           @see #VectorDrawable_name
           @see #VectorDrawable_tint
           @see #VectorDrawable_tintMode
           @see #VectorDrawable_viewportHeight
           @see #VectorDrawable_viewportWidth
           @see #VectorDrawable_width
         */
        public: static const int VectorDrawable[9];
        /**
          <p>
          @attr description
           The opacity of the whole vector drawable, as a value between 0
             (completely transparent) and 1 (completely opaque). 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#alpha}.
          @attr name android:alpha
        */
        public: static const int VectorDrawable_alpha = 4;
        /**
          <p>
          @attr description
           Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoMirrored}.
          @attr name android:autoMirrored
        */
        public: static const int VectorDrawable_autoMirrored = 5;
        /**
          <p>
          @attr description
           The intrinsic height of the Vector Drawable. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#height}.
          @attr name android:height
        */
        public: static const int VectorDrawable_height = 2;
        /**
          <p>
          @attr description
           The name of this vector drawable 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int VectorDrawable_name = 0;
        /**
          <p>
          @attr description
           If set, specifies the color to apply to the drawable as a tint. By default,
             no tint is applied. May be a color state list. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tint}.
          @attr name android:tint
        */
        public: static const int VectorDrawable_tint = 1;
        /**
          <p>
          @attr description
           When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tintMode}.
          @attr name android:tintMode
        */
        public: static const int VectorDrawable_tintMode = 6;
        /**
          <p>
          @attr description
           The height of the canvas the drawing is on. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#viewportHeight}.
          @attr name android:viewportHeight
        */
        public: static const int VectorDrawable_viewportHeight = 8;
        /**
          <p>
          @attr description
           The width of the canvas the drawing is on. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#viewportWidth}.
          @attr name android:viewportWidth
        */
        public: static const int VectorDrawable_viewportWidth = 7;
        /**
          <p>
          @attr description
           The intrinsic width of the Vector Drawable. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#width}.
          @attr name android:width
        */
        public: static const int VectorDrawable_width = 3;
        /**  Defines the clip path used in VectorDrawables. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #VectorDrawableClipPath_name android:name}</code></td><td> The Name of this path </td></tr>
           <tr><td><code>{@link #VectorDrawableClipPath_pathData android:pathData}</code></td><td> The specification of the operations that define the path  </td></tr>
           </table>
           @see #VectorDrawableClipPath_name
           @see #VectorDrawableClipPath_pathData
         */
        public: static const int VectorDrawableClipPath[2];
        /**
          <p>
          @attr description
           The Name of this path 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int VectorDrawableClipPath_name = 0;
        /**
          <p>
          @attr description
           The specification of the operations that define the path  


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pathData}.
          @attr name android:pathData
        */
        public: static const int VectorDrawableClipPath_pathData = 1;
        /**  Defines the group used in VectorDrawables. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #VectorDrawableGroup_name android:name}</code></td><td> The name of this group </td></tr>
           <tr><td><code>{@link #VectorDrawableGroup_pivotX android:pivotX}</code></td><td> The X coordinate of the center of rotation of a group </td></tr>
           <tr><td><code>{@link #VectorDrawableGroup_pivotY android:pivotY}</code></td><td> The Y coordinate of the center of rotation of a group </td></tr>
           <tr><td><code>{@link #VectorDrawableGroup_rotation android:rotation}</code></td><td> The amount to rotate the group </td></tr>
           <tr><td><code>{@link #VectorDrawableGroup_scaleX android:scaleX}</code></td><td> The amount to scale the group on X coordinate </td></tr>
           <tr><td><code>{@link #VectorDrawableGroup_scaleY android:scaleY}</code></td><td> The amount to scale the group on X coordinate </td></tr>
           <tr><td><code>{@link #VectorDrawableGroup_translateX android:translateX}</code></td><td> The amount to translate the group on X coordinate </td></tr>
           <tr><td><code>{@link #VectorDrawableGroup_translateY android:translateY}</code></td><td> The amount to translate the group on Y coordinate </td></tr>
           </table>
           @see #VectorDrawableGroup_name
           @see #VectorDrawableGroup_pivotX
           @see #VectorDrawableGroup_pivotY
           @see #VectorDrawableGroup_rotation
           @see #VectorDrawableGroup_scaleX
           @see #VectorDrawableGroup_scaleY
           @see #VectorDrawableGroup_translateX
           @see #VectorDrawableGroup_translateY
         */
        public: static const int VectorDrawableGroup[8];
        /**
          <p>
          @attr description
           The name of this group 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int VectorDrawableGroup_name = 0;
        /**
          <p>
          @attr description
           The X coordinate of the center of rotation of a group 


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pivotX}.
          @attr name android:pivotX
        */
        public: static const int VectorDrawableGroup_pivotX = 1;
        /**
          <p>
          @attr description
           The Y coordinate of the center of rotation of a group 


          <p>May be a floating point value, such as "<code>1.2</code>".
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pivotY}.
          @attr name android:pivotY
        */
        public: static const int VectorDrawableGroup_pivotY = 2;
        /**
          <p>
          @attr description
           The amount to rotate the group 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#rotation}.
          @attr name android:rotation
        */
        public: static const int VectorDrawableGroup_rotation = 5;
        /**
          <p>
          @attr description
           The amount to scale the group on X coordinate 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scaleX}.
          @attr name android:scaleX
        */
        public: static const int VectorDrawableGroup_scaleX = 3;
        /**
          <p>
          @attr description
           The amount to scale the group on X coordinate 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scaleY}.
          @attr name android:scaleY
        */
        public: static const int VectorDrawableGroup_scaleY = 4;
        /**
          <p>
          @attr description
           The amount to translate the group on X coordinate 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#translateX}.
          @attr name android:translateX
        */
        public: static const int VectorDrawableGroup_translateX = 6;
        /**
          <p>
          @attr description
           The amount to translate the group on Y coordinate 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#translateY}.
          @attr name android:translateY
        */
        public: static const int VectorDrawableGroup_translateY = 7;
        /**  Defines the path used in VectorDrawables. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #VectorDrawablePath_fillAlpha android:fillAlpha}</code></td><td> The alpha of the path fill, as a value between 0 (completely transparent)
             and 1 (completely opaque)</td></tr>
           <tr><td><code>{@link #VectorDrawablePath_fillColor android:fillColor}</code></td><td> The color to fill the path if not defined implies no fill</td></tr>
           <tr><td><code>{@link #VectorDrawablePath_name android:name}</code></td><td> The name of this path </td></tr>
           <tr><td><code>{@link #VectorDrawablePath_pathData android:pathData}</code></td><td> The specification of the operations that define the path  </td></tr>
           <tr><td><code>{@link #VectorDrawablePath_strokeAlpha android:strokeAlpha}</code></td><td> The opacity of a path stroke, as a value between 0 (completely transparent)
             and 1 (completely opaque) </td></tr>
           <tr><td><code>{@link #VectorDrawablePath_strokeColor android:strokeColor}</code></td><td> The color to stroke the path if not defined implies no stroke</td></tr>
           <tr><td><code>{@link #VectorDrawablePath_strokeLineCap android:strokeLineCap}</code></td><td> sets the linecap for a stroked path </td></tr>
           <tr><td><code>{@link #VectorDrawablePath_strokeLineJoin android:strokeLineJoin}</code></td><td> sets the lineJoin for a stroked path </td></tr>
           <tr><td><code>{@link #VectorDrawablePath_strokeMiterLimit android:strokeMiterLimit}</code></td><td> sets the Miter limit for a stroked path </td></tr>
           <tr><td><code>{@link #VectorDrawablePath_strokeWidth android:strokeWidth}</code></td><td> The width a path stroke </td></tr>
           <tr><td><code>{@link #VectorDrawablePath_trimPathEnd android:trimPathEnd}</code></td><td> The fraction of the path to trim from the end from 0 to 1  </td></tr>
           <tr><td><code>{@link #VectorDrawablePath_trimPathOffset android:trimPathOffset}</code></td><td> Shift trim region (allows visible region to include the start and end) from 0 to 1  </td></tr>
           <tr><td><code>{@link #VectorDrawablePath_trimPathStart android:trimPathStart}</code></td><td> The fraction of the path to trim from the start from 0 to 1 </td></tr>
           </table>
           @see #VectorDrawablePath_fillAlpha
           @see #VectorDrawablePath_fillColor
           @see #VectorDrawablePath_name
           @see #VectorDrawablePath_pathData
           @see #VectorDrawablePath_strokeAlpha
           @see #VectorDrawablePath_strokeColor
           @see #VectorDrawablePath_strokeLineCap
           @see #VectorDrawablePath_strokeLineJoin
           @see #VectorDrawablePath_strokeMiterLimit
           @see #VectorDrawablePath_strokeWidth
           @see #VectorDrawablePath_trimPathEnd
           @see #VectorDrawablePath_trimPathOffset
           @see #VectorDrawablePath_trimPathStart
         */
        public: static const int VectorDrawablePath[13];
        /**
          <p>
          @attr description
           The alpha of the path fill, as a value between 0 (completely transparent)
             and 1 (completely opaque)


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fillAlpha}.
          @attr name android:fillAlpha
        */
        public: static const int VectorDrawablePath_fillAlpha = 12;
        /**
          <p>
          @attr description
           The color to fill the path if not defined implies no fill


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fillColor}.
          @attr name android:fillColor
        */
        public: static const int VectorDrawablePath_fillColor = 1;
        /**
          <p>
          @attr description
           The name of this path 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#name}.
          @attr name android:name
        */
        public: static const int VectorDrawablePath_name = 0;
        /**
          <p>
          @attr description
           The specification of the operations that define the path  


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#pathData}.
          @attr name android:pathData
        */
        public: static const int VectorDrawablePath_pathData = 2;
        /**
          <p>
          @attr description
           The opacity of a path stroke, as a value between 0 (completely transparent)
             and 1 (completely opaque) 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#strokeAlpha}.
          @attr name android:strokeAlpha
        */
        public: static const int VectorDrawablePath_strokeAlpha = 11;
        /**
          <p>
          @attr description
           The color to stroke the path if not defined implies no stroke


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#strokeColor}.
          @attr name android:strokeColor
        */
        public: static const int VectorDrawablePath_strokeColor = 3;
        /**
          <p>
          @attr description
           sets the linecap for a stroked path 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>butt</code></td><td>0</td><td></td></tr>
<tr><td><code>round</code></td><td>1</td><td></td></tr>
<tr><td><code>square</code></td><td>2</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#strokeLineCap}.
          @attr name android:strokeLineCap
        */
        public: static const int VectorDrawablePath_strokeLineCap = 8;
        /**
          <p>
          @attr description
           sets the lineJoin for a stroked path 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>miter</code></td><td>0</td><td></td></tr>
<tr><td><code>round</code></td><td>1</td><td></td></tr>
<tr><td><code>bevel</code></td><td>2</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#strokeLineJoin}.
          @attr name android:strokeLineJoin
        */
        public: static const int VectorDrawablePath_strokeLineJoin = 9;
        /**
          <p>
          @attr description
           sets the Miter limit for a stroked path 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#strokeMiterLimit}.
          @attr name android:strokeMiterLimit
        */
        public: static const int VectorDrawablePath_strokeMiterLimit = 10;
        /**
          <p>
          @attr description
           The width a path stroke 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#strokeWidth}.
          @attr name android:strokeWidth
        */
        public: static const int VectorDrawablePath_strokeWidth = 4;
        /**
          <p>
          @attr description
           The fraction of the path to trim from the end from 0 to 1  


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#trimPathEnd}.
          @attr name android:trimPathEnd
        */
        public: static const int VectorDrawablePath_trimPathEnd = 6;
        /**
          <p>
          @attr description
           Shift trim region (allows visible region to include the start and end) from 0 to 1  


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#trimPathOffset}.
          @attr name android:trimPathOffset
        */
        public: static const int VectorDrawablePath_trimPathOffset = 7;
        /**
          <p>
          @attr description
           The fraction of the path to trim from the start from 0 to 1 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#trimPathStart}.
          @attr name android:trimPathStart
        */
        public: static const int VectorDrawablePath_trimPathStart = 5;
        /** Attributes that can be used with a VerticalSlider_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #VerticalSlider_Layout_layout_scale android:layout_scale}</code></td><td></td></tr>
           </table>
           @see #VerticalSlider_Layout_layout_scale
         */
        public: static const int VerticalSlider_Layout[1];
        /**
          <p>This symbol is the offset where the {@link android.R.attr#layout_scale}
          attribute's value can be found in the {@link #VerticalSlider_Layout} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:layout_scale
        */
        public: static const int VerticalSlider_Layout_layout_scale = 0;
        /**  Attributes that can be used with {@link android.view.View} or
         any of its subclasses.  Also see {@link #ViewGroup_Layout} for
         attributes that are processed by the view's parent. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #View_accessibilityLiveRegion android:accessibilityLiveRegion}</code></td><td> Indicates to accessibility services whether the user should be notified when
             this view changes.</td></tr>
           <tr><td><code>{@link #View_alpha android:alpha}</code></td><td> alpha property of the view, as a value between 0 (completely transparent) and 1
             (completely opaque).</td></tr>
           <tr><td><code>{@link #View_background android:background}</code></td><td> A drawable to use as the background.</td></tr>
           <tr><td><code>{@link #View_backgroundTint android:backgroundTint}</code></td><td> Tint to apply to the background.</td></tr>
           <tr><td><code>{@link #View_backgroundTintMode android:backgroundTintMode}</code></td><td> Blending mode used to apply the background tint.</td></tr>
           <tr><td><code>{@link #View_clickable android:clickable}</code></td><td> Defines whether this view reacts to click events.</td></tr>
           <tr><td><code>{@link #View_contentDescription android:contentDescription}</code></td><td> Defines text that briefly describes content of the view.</td></tr>
           <tr><td><code>{@link #View_drawingCacheQuality android:drawingCacheQuality}</code></td><td> Defines the quality of translucent drawing caches.</td></tr>
           <tr><td><code>{@link #View_duplicateParentState android:duplicateParentState}</code></td><td> When this attribute is set to true, the view gets its drawable state
             (focused, pressed, etc.</td></tr>
           <tr><td><code>{@link #View_elevation android:elevation}</code></td><td> base z depth of the view </td></tr>
           <tr><td><code>{@link #View_fadeScrollbars android:fadeScrollbars}</code></td><td> Defines whether to fade out scrollbars when they are not in use.</td></tr>
           <tr><td><code>{@link #View_fadingEdge android:fadingEdge}</code></td><td> This attribute is deprecated and will be ignored as of
             API level 14 ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}).</td></tr>
           <tr><td><code>{@link #View_fadingEdgeLength android:fadingEdgeLength}</code></td><td> Defines the length of the fading edges.</td></tr>
           <tr><td><code>{@link #View_filterTouchesWhenObscured android:filterTouchesWhenObscured}</code></td><td> Specifies whether to filter touches when the view's window is obscured by
             another visible window.</td></tr>
           <tr><td><code>{@link #View_fitsSystemWindows android:fitsSystemWindows}</code></td><td> Boolean internal attribute to adjust view layout based on
             system windows such as the status bar.</td></tr>
           <tr><td><code>{@link #View_focusable android:focusable}</code></td><td> Boolean that controls whether a view can take focus.</td></tr>
           <tr><td><code>{@link #View_focusableInTouchMode android:focusableInTouchMode}</code></td><td> Boolean that controls whether a view can take focus while in touch mode.</td></tr>
           <tr><td><code>{@link #View_hapticFeedbackEnabled android:hapticFeedbackEnabled}</code></td><td> Boolean that controls whether a view should have haptic feedback
             enabled for events such as long presses.</td></tr>
           <tr><td><code>{@link #View_id android:id}</code></td><td> Supply an identifier name for this view, to later retrieve it
             with {@link android.view.View#findViewById View.findViewById()} or
             {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
           <tr><td><code>{@link #View_importantForAccessibility android:importantForAccessibility}</code></td><td> Controls how this View is important for accessibility which is if it fires
             accessibility events and if it is reported to accessibility services that
             query the screen.</td></tr>
           <tr><td><code>{@link #View_isScrollContainer android:isScrollContainer}</code></td><td> Set this if the view will serve as a scrolling container, meaing
             that it can be resized to shrink its overall window so that there
             will be space for an input method.</td></tr>
           <tr><td><code>{@link #View_keepScreenOn android:keepScreenOn}</code></td><td> Controls whether the view's window should keep the screen on
             while visible.</td></tr>
           <tr><td><code>{@link #View_labelFor android:labelFor}</code></td><td> Specifies the id of a view for which this view serves as a label for
             accessibility purposes.</td></tr>
           <tr><td><code>{@link #View_layerType android:layerType}</code></td><td> Specifies the type of layer backing this view.</td></tr>
           <tr><td><code>{@link #View_layoutDirection android:layoutDirection}</code></td><td> Defines the direction of layout drawing.</td></tr>
           <tr><td><code>{@link #View_longClickable android:longClickable}</code></td><td> Defines whether this view reacts to long click events.</td></tr>
           <tr><td><code>{@link #View_minHeight android:minHeight}</code></td><td> Defines the minimum height of the view.</td></tr>
           <tr><td><code>{@link #View_minWidth android:minWidth}</code></td><td> Defines the minimum width of the view.</td></tr>
           <tr><td><code>{@link #View_nestedScrollingEnabled android:nestedScrollingEnabled}</code></td><td> Specifies that this view should permit nested scrolling within a compatible
             ancestor view.</td></tr>
           <tr><td><code>{@link #View_nextFocusDown android:nextFocusDown}</code></td><td> Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_DOWN}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.</td></tr>
           <tr><td><code>{@link #View_nextFocusForward android:nextFocusForward}</code></td><td> Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_FORWARD}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.</td></tr>
           <tr><td><code>{@link #View_nextFocusLeft android:nextFocusLeft}</code></td><td> Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_LEFT}.</td></tr>
           <tr><td><code>{@link #View_nextFocusRight android:nextFocusRight}</code></td><td> Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_RIGHT}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.</td></tr>
           <tr><td><code>{@link #View_nextFocusUp android:nextFocusUp}</code></td><td> Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_UP}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.</td></tr>
           <tr><td><code>{@link #View_onClick android:onClick}</code></td><td> Name of the method in this View's context to invoke when the view is
             clicked.</td></tr>
           <tr><td><code>{@link #View_outlineProvider android:outlineProvider}</code></td><td> ViewOutlineProvider used to determine the View's Outline.</td></tr>
           <tr><td><code>{@link #View_overScrollMode android:overScrollMode}</code></td><td> Defines over-scrolling behavior.</td></tr>
           <tr><td><code>{@link #View_padding android:padding}</code></td><td> Sets the padding, in pixels, of all four edges.</td></tr>
           <tr><td><code>{@link #View_paddingBottom android:paddingBottom}</code></td><td> Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}.</td></tr>
           <tr><td><code>{@link #View_paddingEnd android:paddingEnd}</code></td><td> Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.</td></tr>
           <tr><td><code>{@link #View_paddingLeft android:paddingLeft}</code></td><td> Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}.</td></tr>
           <tr><td><code>{@link #View_paddingRight android:paddingRight}</code></td><td> Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}.</td></tr>
           <tr><td><code>{@link #View_paddingStart android:paddingStart}</code></td><td> Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.</td></tr>
           <tr><td><code>{@link #View_paddingTop android:paddingTop}</code></td><td> Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}.</td></tr>
           <tr><td><code>{@link #View_requiresFadingEdge android:requiresFadingEdge}</code></td><td> Defines which edges should be faded on scrolling.</td></tr>
           <tr><td><code>{@link #View_rotation android:rotation}</code></td><td> rotation of the view, in degrees.</td></tr>
           <tr><td><code>{@link #View_rotationX android:rotationX}</code></td><td> rotation of the view around the x axis, in degrees.</td></tr>
           <tr><td><code>{@link #View_rotationY android:rotationY}</code></td><td> rotation of the view around the y axis, in degrees.</td></tr>
           <tr><td><code>{@link #View_saveEnabled android:saveEnabled}</code></td><td> If unset, no state will be saved for this view when it is being
             frozen.</td></tr>
           <tr><td><code>{@link #View_scaleX android:scaleX}</code></td><td> scale of the view in the x direction.</td></tr>
           <tr><td><code>{@link #View_scaleY android:scaleY}</code></td><td> scale of the view in the y direction.</td></tr>
           <tr><td><code>{@link #View_scrollX android:scrollX}</code></td><td> The initial horizontal scroll offset, in pixels.</td></tr>
           <tr><td><code>{@link #View_scrollY android:scrollY}</code></td><td> The initial vertical scroll offset, in pixels.</td></tr>
           <tr><td><code>{@link #View_scrollbarAlwaysDrawHorizontalTrack android:scrollbarAlwaysDrawHorizontalTrack}</code></td><td> Defines whether the horizontal scrollbar track should always be drawn.</td></tr>
           <tr><td><code>{@link #View_scrollbarAlwaysDrawVerticalTrack android:scrollbarAlwaysDrawVerticalTrack}</code></td><td> Defines whether the vertical scrollbar track should always be drawn.</td></tr>
           <tr><td><code>{@link #View_scrollbarDefaultDelayBeforeFade android:scrollbarDefaultDelayBeforeFade}</code></td><td> Defines the delay in milliseconds that a scrollbar waits before fade out.</td></tr>
           <tr><td><code>{@link #View_scrollbarFadeDuration android:scrollbarFadeDuration}</code></td><td> Defines the delay in milliseconds that a scrollbar takes to fade out.</td></tr>
           <tr><td><code>{@link #View_scrollbarSize android:scrollbarSize}</code></td><td> Sets the width of vertical scrollbars and height of horizontal scrollbars.</td></tr>
           <tr><td><code>{@link #View_scrollbarStyle android:scrollbarStyle}</code></td><td> Controls the scrollbar style and position.</td></tr>
           <tr><td><code>{@link #View_scrollbarThumbHorizontal android:scrollbarThumbHorizontal}</code></td><td> Defines the horizontal scrollbar thumb drawable.</td></tr>
           <tr><td><code>{@link #View_scrollbarThumbVertical android:scrollbarThumbVertical}</code></td><td> Defines the vertical scrollbar thumb drawable.</td></tr>
           <tr><td><code>{@link #View_scrollbarTrackHorizontal android:scrollbarTrackHorizontal}</code></td><td> Defines the horizontal scrollbar track drawable.</td></tr>
           <tr><td><code>{@link #View_scrollbarTrackVertical android:scrollbarTrackVertical}</code></td><td> Defines the vertical scrollbar track drawable.</td></tr>
           <tr><td><code>{@link #View_scrollbars android:scrollbars}</code></td><td> Defines which scrollbars should be displayed on scrolling or not.</td></tr>
           <tr><td><code>{@link #View_soundEffectsEnabled android:soundEffectsEnabled}</code></td><td> Boolean that controls whether a view should have sound effects
             enabled for events such as clicking and touching.</td></tr>
           <tr><td><code>{@link #View_stateListAnimator android:stateListAnimator}</code></td><td> Sets the state-based animator for the View.</td></tr>
           <tr><td><code>{@link #View_tag android:tag}</code></td><td> Supply a tag for this view containing a String, to be retrieved
             later with {@link android.view.View#getTag View.getTag()} or
             searched for with {@link android.view.View#findViewWithTag
             View.findViewWithTag()}.</td></tr>
           <tr><td><code>{@link #View_textAlignment android:textAlignment}</code></td><td> Defines the alignment of the text.</td></tr>
           <tr><td><code>{@link #View_textDirection android:textDirection}</code></td><td> Defines the direction of the text.</td></tr>
           <tr><td><code>{@link #View_theme android:theme}</code></td><td> Specifies a theme override for a view.</td></tr>
           <tr><td><code>{@link #View_transformPivotX android:transformPivotX}</code></td><td> x location of the pivot point around which the view will rotate and scale.</td></tr>
           <tr><td><code>{@link #View_transformPivotY android:transformPivotY}</code></td><td> y location of the pivot point around which the view will rotate and scale.</td></tr>
           <tr><td><code>{@link #View_transitionName android:transitionName}</code></td><td> Names a View such that it can be identified for Transitions.</td></tr>
           <tr><td><code>{@link #View_translationX android:translationX}</code></td><td> translation in x of the view.</td></tr>
           <tr><td><code>{@link #View_translationY android:translationY}</code></td><td> translation in y of the view.</td></tr>
           <tr><td><code>{@link #View_translationZ android:translationZ}</code></td><td> translation in z of the view.</td></tr>
           <tr><td><code>{@link #View_verticalScrollbarPosition android:verticalScrollbarPosition}</code></td><td> Determines which side the vertical scroll bar should be placed on.</td></tr>
           <tr><td><code>{@link #View_visibility android:visibility}</code></td><td> Controls the initial visibility of the view.</td></tr>
           </table>
           @see #View_accessibilityLiveRegion
           @see #View_alpha
           @see #View_background
           @see #View_backgroundTint
           @see #View_backgroundTintMode
           @see #View_clickable
           @see #View_contentDescription
           @see #View_drawingCacheQuality
           @see #View_duplicateParentState
           @see #View_elevation
           @see #View_fadeScrollbars
           @see #View_fadingEdge
           @see #View_fadingEdgeLength
           @see #View_filterTouchesWhenObscured
           @see #View_fitsSystemWindows
           @see #View_focusable
           @see #View_focusableInTouchMode
           @see #View_hapticFeedbackEnabled
           @see #View_id
           @see #View_importantForAccessibility
           @see #View_isScrollContainer
           @see #View_keepScreenOn
           @see #View_labelFor
           @see #View_layerType
           @see #View_layoutDirection
           @see #View_longClickable
           @see #View_minHeight
           @see #View_minWidth
           @see #View_nestedScrollingEnabled
           @see #View_nextFocusDown
           @see #View_nextFocusForward
           @see #View_nextFocusLeft
           @see #View_nextFocusRight
           @see #View_nextFocusUp
           @see #View_onClick
           @see #View_outlineProvider
           @see #View_overScrollMode
           @see #View_padding
           @see #View_paddingBottom
           @see #View_paddingEnd
           @see #View_paddingLeft
           @see #View_paddingRight
           @see #View_paddingStart
           @see #View_paddingTop
           @see #View_requiresFadingEdge
           @see #View_rotation
           @see #View_rotationX
           @see #View_rotationY
           @see #View_saveEnabled
           @see #View_scaleX
           @see #View_scaleY
           @see #View_scrollX
           @see #View_scrollY
           @see #View_scrollbarAlwaysDrawHorizontalTrack
           @see #View_scrollbarAlwaysDrawVerticalTrack
           @see #View_scrollbarDefaultDelayBeforeFade
           @see #View_scrollbarFadeDuration
           @see #View_scrollbarSize
           @see #View_scrollbarStyle
           @see #View_scrollbarThumbHorizontal
           @see #View_scrollbarThumbVertical
           @see #View_scrollbarTrackHorizontal
           @see #View_scrollbarTrackVertical
           @see #View_scrollbars
           @see #View_soundEffectsEnabled
           @see #View_stateListAnimator
           @see #View_tag
           @see #View_textAlignment
           @see #View_textDirection
           @see #View_theme
           @see #View_transformPivotX
           @see #View_transformPivotY
           @see #View_transitionName
           @see #View_translationX
           @see #View_translationY
           @see #View_translationZ
           @see #View_verticalScrollbarPosition
           @see #View_visibility
         */
        public: static const int View[78];
        /**
          <p>
          @attr description
           Indicates to accessibility services whether the user should be notified when
             this view changes. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Accessibility services should not announce changes to this view. </td></tr>
<tr><td><code>polite</code></td><td>1</td><td> Accessibility services should announce changes to this view. </td></tr>
<tr><td><code>assertive</code></td><td>2</td><td> Accessibility services should interrupt ongoing speech to immediately
                 announce changes to this view. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#accessibilityLiveRegion}.
          @attr name android:accessibilityLiveRegion
        */
        public: static const int View_accessibilityLiveRegion = 69;
        /**
          <p>
          @attr description
           alpha property of the view, as a value between 0 (completely transparent) and 1
             (completely opaque). 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#alpha}.
          @attr name android:alpha
        */
        public: static const int View_alpha = 48;
        /**
          <p>
          @attr description
           A drawable to use as the background.  This can be either a reference
             to a full drawable resource (such as a PNG image, 9-patch,
             XML state list description, etc), or a solid color such as "#ff000000"
            (black). 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#background}.
          @attr name android:background
        */
        public: static const int View_background = 13;
        /**
          <p>
          @attr description
           Tint to apply to the background. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundTint}.
          @attr name android:backgroundTint
        */
        public: static const int View_backgroundTint = 75;
        /**
          <p>
          @attr description
           Blending mode used to apply the background tint. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>src_over</code></td><td>3</td><td> The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] </td></tr>
<tr><td><code>src_in</code></td><td>5</td><td> The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] </td></tr>
<tr><td><code>src_atop</code></td><td>9</td><td> The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] </td></tr>
<tr><td><code>multiply</code></td><td>14</td><td> Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] </td></tr>
<tr><td><code>screen</code></td><td>15</td><td> [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] </td></tr>
<tr><td><code>add</code></td><td>16</td><td> Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundTintMode}.
          @attr name android:backgroundTintMode
        */
        public: static const int View_backgroundTintMode = 76;
        /**
          <p>
          @attr description
           Defines whether this view reacts to click events. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#clickable}.
          @attr name android:clickable
        */
        public: static const int View_clickable = 30;
        /**
          <p>
          @attr description
           Defines text that briefly describes content of the view. This property is used
             primarily for accessibility. Since some views do not have textual
             representation this attribute can be used for providing such. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#contentDescription}.
          @attr name android:contentDescription
        */
        public: static const int View_contentDescription = 42;
        /**
          <p>
          @attr description
           Defines the quality of translucent drawing caches. This property is used
             only when the drawing cache is enabled and translucent. The default value is auto. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto</code></td><td>0</td><td> Lets the framework decide what quality level should be used
                 for the drawing cache. </td></tr>
<tr><td><code>low</code></td><td>1</td><td> Low quality. When set to low quality, the drawing cache uses a lower color
                 depth, thus losing precision in rendering gradients, but uses less memory. </td></tr>
<tr><td><code>high</code></td><td>2</td><td> High quality. When set to high quality, the drawing cache uses a higher
                 color depth but uses more memory. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#drawingCacheQuality}.
          @attr name android:drawingCacheQuality
        */
        public: static const int View_drawingCacheQuality = 33;
        /**
          <p>
          @attr description
           When this attribute is set to true, the view gets its drawable state
             (focused, pressed, etc.) from its direct parent rather than from itself. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#duplicateParentState}.
          @attr name android:duplicateParentState
        */
        public: static const int View_duplicateParentState = 34;
        /**
          <p>
          @attr description
           base z depth of the view 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#elevation}.
          @attr name android:elevation
        */
        public: static const int View_elevation = 73;
        /**
          <p>
          @attr description
           Defines whether to fade out scrollbars when they are not in use. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fadeScrollbars}.
          @attr name android:fadeScrollbars
        */
        public: static const int View_fadeScrollbars = 45;
        /**
          <p>
          @attr description
           This attribute is deprecated and will be ignored as of
             API level 14 ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}).
             Using fading edges may introduce noticeable performance
             degradations and should be used only when required by the application's
             visual design. To request fading edges with API level 14 and above,
             use the <code>android:requiresFadingEdge</code> attribute instead. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> No edge is faded. </td></tr>
<tr><td><code>horizontal</code></td><td>0x00001000</td><td> Fades horizontal edges only. </td></tr>
<tr><td><code>vertical</code></td><td>0x00002000</td><td> Fades vertical edges only. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fadingEdge}.
          @attr name android:fadingEdge
        */
        public: static const int View_fadingEdge = 24;
        /**
          <p>
          @attr description
           Defines the length of the fading edges. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fadingEdgeLength}.
          @attr name android:fadingEdgeLength
        */
        public: static const int View_fadingEdgeLength = 25;
        /**
          <p>
          @attr description
           Specifies whether to filter touches when the view's window is obscured by
             another visible window.  When set to true, the view will not receive touches
             whenever a toast, dialog or other window appears above the view's window.
             Refer to the {@link android.view.View} security documentation for more details. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#filterTouchesWhenObscured}.
          @attr name android:filterTouchesWhenObscured
        */
        public: static const int View_filterTouchesWhenObscured = 47;
        /**
          <p>
          @attr description
           Boolean internal attribute to adjust view layout based on
             system windows such as the status bar.
             If true, adjusts the padding of this view to leave space for the system windows.
             Will only take effect if this view is in a non-embedded activity. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#fitsSystemWindows}.
          @attr name android:fitsSystemWindows
        */
        public: static const int View_fitsSystemWindows = 22;
        /**
          <p>
          @attr description
           Boolean that controls whether a view can take focus.  By default the user can not
             move focus to a view; by setting this attribute to true the view is
             allowed to take focus.  This value does not impact the behavior of
             directly calling {@link android.view.View#requestFocus}, which will
             always request focus regardless of this view.  It only impacts where
             focus navigation will try to move focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#focusable}.
          @attr name android:focusable
        */
        public: static const int View_focusable = 19;
        /**
          <p>
          @attr description
           Boolean that controls whether a view can take focus while in touch mode.
             If this is true for a view, that view can gain focus when clicked on, and can keep
             focus if another view is clicked on that doesn't have this attribute set to true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#focusableInTouchMode}.
          @attr name android:focusableInTouchMode
        */
        public: static const int View_focusableInTouchMode = 20;
        /**
          <p>
          @attr description
           Boolean that controls whether a view should have haptic feedback
             enabled for events such as long presses. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#hapticFeedbackEnabled}.
          @attr name android:hapticFeedbackEnabled
        */
        public: static const int View_hapticFeedbackEnabled = 40;
        /**
          <p>
          @attr description
           Supply an identifier name for this view, to later retrieve it
             with {@link android.view.View#findViewById View.findViewById()} or
             {@link android.app.Activity#findViewById Activity.findViewById()}.
             This must be a
             resource reference; typically you set this using the
             <code>@+</code> syntax to create a new ID resources.
             For example: <code>android:id="@+id/my_id"</code> which
             allows you to later retrieve the view
             with <code>findViewById(R.id.my_id)</code>. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#id}.
          @attr name android:id
        */
        public: static const int View_id = 9;
        /**
          <p>
          @attr description
           Controls how this View is important for accessibility which is if it fires
             accessibility events and if it is reported to accessibility services that
             query the screen. Note: While not recommended, an accessibility service may
             decide to ignore this attribute and operate on all views in the view tree. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto</code></td><td>0</td><td> The system determines whether the view is important for accessibility - default
                 (recommended). </td></tr>
<tr><td><code>yes</code></td><td>1</td><td> The view is important for accessibility. </td></tr>
<tr><td><code>no</code></td><td>2</td><td> The view is not important for accessibility. </td></tr>
<tr><td><code>noHideDescendants</code></td><td>4</td><td> The view is not important for accessibility, nor are any of its descendant
                 views. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#importantForAccessibility}.
          @attr name android:importantForAccessibility
        */
        public: static const int View_importantForAccessibility = 62;
        /**
          <p>
          @attr description
           Set this if the view will serve as a scrolling container, meaing
             that it can be resized to shrink its overall window so that there
             will be space for an input method.  If not set, the default
             value will be true if "scrollbars" has the vertical scrollbar
             set, else it will be false. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#isScrollContainer}.
          @attr name android:isScrollContainer
        */
        public: static const int View_isScrollContainer = 39;
        /**
          <p>
          @attr description
           Controls whether the view's window should keep the screen on
             while visible. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#keepScreenOn}.
          @attr name android:keepScreenOn
        */
        public: static const int View_keepScreenOn = 38;
        /**
          <p>
          @attr description
           Specifies the id of a view for which this view serves as a label for
             accessibility purposes. For example, a TextView before an EditText in
             the UI usually specifies what infomation is contained in the EditText.
             Hence, the TextView is a label for the EditText. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#labelFor}.
          @attr name android:labelFor
        */
        public: static const int View_labelFor = 68;
        /**
          <p>
          @attr description
           Specifies the type of layer backing this view. The default value is none.
             Refer to {@link android.view.View#setLayerType(int, android.graphics.Paint)}
             for more information.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td> Don't use a layer. </td></tr>
<tr><td><code>software</code></td><td>1</td><td> Use a software layer. Refer to
                 {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
                 more information. </td></tr>
<tr><td><code>hardware</code></td><td>2</td><td> Use a hardware layer. Refer to
                 {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
                 more information. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layerType}.
          @attr name android:layerType
        */
        public: static const int View_layerType = 60;
        /**
          <p>
          @attr description
           Defines the direction of layout drawing. This typically is associated with writing
             direction of the language script used. The possible values are "ltr" for Left-to-Right,
             "rtl" for Right-to-Left, "locale" and "inherit" from parent view. If there is nothing
             to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
             used in "en-US". The default for this attribute is "inherit". 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>ltr</code></td><td>0</td><td> Left-to-Right </td></tr>
<tr><td><code>rtl</code></td><td>1</td><td> Right-to-Left </td></tr>
<tr><td><code>inherit</code></td><td>2</td><td> Inherit from parent </td></tr>
<tr><td><code>locale</code></td><td>3</td><td> Locale </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layoutDirection}.
          @attr name android:layoutDirection
        */
        public: static const int View_layoutDirection = 65;
        /**
          <p>
          @attr description
           Defines whether this view reacts to long click events. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#longClickable}.
          @attr name android:longClickable
        */
        public: static const int View_longClickable = 31;
        /**
          <p>
          @attr description
           Defines the minimum height of the view. It is not guaranteed
             the view will be able to achieve this minimum height (for example,
             if its parent layout constrains it with less available height). 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minHeight}.
          @attr name android:minHeight
        */
        public: static const int View_minHeight = 36;
        /**
          <p>
          @attr description
           Defines the minimum width of the view. It is not guaranteed
             the view will be able to achieve this minimum width (for example,
             if its parent layout constrains it with less available width). 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#minWidth}.
          @attr name android:minWidth
        */
        public: static const int View_minWidth = 35;
        /**
          <p>
          @attr description
           Specifies that this view should permit nested scrolling within a compatible
             ancestor view. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#nestedScrollingEnabled}.
          @attr name android:nestedScrollingEnabled
        */
        public: static const int View_nestedScrollingEnabled = 72;
        /**
          <p>
          @attr description
           Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_DOWN}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#nextFocusDown}.
          @attr name android:nextFocusDown
        */
        public: static const int View_nextFocusDown = 29;
        /**
          <p>
          @attr description
           Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_FORWARD}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#nextFocusForward}.
          @attr name android:nextFocusForward
        */
        public: static const int View_nextFocusForward = 59;
        /**
          <p>
          @attr description
           Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_LEFT}.

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#nextFocusLeft}.
          @attr name android:nextFocusLeft
        */
        public: static const int View_nextFocusLeft = 26;
        /**
          <p>
          @attr description
           Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_RIGHT}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#nextFocusRight}.
          @attr name android:nextFocusRight
        */
        public: static const int View_nextFocusRight = 27;
        /**
          <p>
          @attr description
           Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_UP}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#nextFocusUp}.
          @attr name android:nextFocusUp
        */
        public: static const int View_nextFocusUp = 28;
        /**
          <p>
          @attr description
           Name of the method in this View's context to invoke when the view is
             clicked. This name must correspond to a public method that takes
             exactly one parameter of type View. For instance, if you specify
             <code>android:onClick="sayHello"</code>, you must declare a
             <code>public void sayHello(View v)</code> method of your context
             (typically, your Activity). 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#onClick}.
          @attr name android:onClick
        */
        public: static const int View_onClick = 41;
        /**
          <p>
          @attr description
           ViewOutlineProvider used to determine the View's Outline. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>background</code></td><td>0</td><td> Default, background drawable-driven outline. </td></tr>
<tr><td><code>none</code></td><td>1</td><td> No outline provider. </td></tr>
<tr><td><code>bounds</code></td><td>2</td><td> Generates an opaque outline for the bounds of the view. </td></tr>
<tr><td><code>paddedBounds</code></td><td>3</td><td> Generates an opaque outline for the padded bounds of the view. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#outlineProvider}.
          @attr name android:outlineProvider
        */
        public: static const int View_outlineProvider = 77;
        /**
          <p>
          @attr description
           Defines over-scrolling behavior. This property is used only if the
             View is scrollable. Over-scrolling is the ability for the user to
             receive feedback when attempting to scroll beyond meaningful content. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>always</code></td><td>0</td><td> Always show over-scroll effects, even if the content fits entirely
                 within the available space. </td></tr>
<tr><td><code>ifContentScrolls</code></td><td>1</td><td> Only show over-scroll effects if the content is large
                 enough to meaningfully scroll. </td></tr>
<tr><td><code>never</code></td><td>2</td><td> Never show over-scroll effects. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#overScrollMode}.
          @attr name android:overScrollMode
        */
        public: static const int View_overScrollMode = 46;
        /**
          <p>
          @attr description
           Sets the padding, in pixels, of all four edges.  Padding is defined as
             space between the edges of the view and the view's content. A views size
             will include it's padding.  If a {@link android.R.attr#background}
             is provided, the padding will initially be set to that (0 if the
             drawable does not have padding).  Explicitly setting a padding value
             will override the corresponding padding found in the background. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#padding}.
          @attr name android:padding
        */
        public: static const int View_padding = 14;
        /**
          <p>
          @attr description
           Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#paddingBottom}.
          @attr name android:paddingBottom
        */
        public: static const int View_paddingBottom = 18;
        /**
          <p>
          @attr description
           Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#paddingEnd}.
          @attr name android:paddingEnd
        */
        public: static const int View_paddingEnd = 67;
        /**
          <p>
          @attr description
           Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#paddingLeft}.
          @attr name android:paddingLeft
        */
        public: static const int View_paddingLeft = 15;
        /**
          <p>
          @attr description
           Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#paddingRight}.
          @attr name android:paddingRight
        */
        public: static const int View_paddingRight = 17;
        /**
          <p>
          @attr description
           Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#paddingStart}.
          @attr name android:paddingStart
        */
        public: static const int View_paddingStart = 66;
        /**
          <p>
          @attr description
           Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#paddingTop}.
          @attr name android:paddingTop
        */
        public: static const int View_paddingTop = 16;
        /**
          <p>
          @attr description
           Defines which edges should be faded on scrolling. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> No edge is faded. </td></tr>
<tr><td><code>horizontal</code></td><td>0x00001000</td><td> Fades horizontal edges only. </td></tr>
<tr><td><code>vertical</code></td><td>0x00002000</td><td> Fades vertical edges only. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#requiresFadingEdge}.
          @attr name android:requiresFadingEdge
        */
        public: static const int View_requiresFadingEdge = 61;
        /**
          <p>
          @attr description
           rotation of the view, in degrees. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#rotation}.
          @attr name android:rotation
        */
        public: static const int View_rotation = 55;
        /**
          <p>
          @attr description
           rotation of the view around the x axis, in degrees. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#rotationX}.
          @attr name android:rotationX
        */
        public: static const int View_rotationX = 56;
        /**
          <p>
          @attr description
           rotation of the view around the y axis, in degrees. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#rotationY}.
          @attr name android:rotationY
        */
        public: static const int View_rotationY = 57;
        /**
          <p>
          @attr description
           If unset, no state will be saved for this view when it is being
             frozen. The default is true, allowing the view to be saved
             (however it also must have an ID assigned to it for its
             state to be saved).  Setting this to false only disables the
             state for this view, not for its children which may still
             be saved. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#saveEnabled}.
          @attr name android:saveEnabled
        */
        public: static const int View_saveEnabled = 32;
        /**
          <p>
          @attr description
           scale of the view in the x direction. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scaleX}.
          @attr name android:scaleX
        */
        public: static const int View_scaleX = 53;
        /**
          <p>
          @attr description
           scale of the view in the y direction. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scaleY}.
          @attr name android:scaleY
        */
        public: static const int View_scaleY = 54;
        /**
          <p>
          @attr description
           The initial horizontal scroll offset, in pixels.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollX}.
          @attr name android:scrollX
        */
        public: static const int View_scrollX = 11;
        /**
          <p>
          @attr description
           The initial vertical scroll offset, in pixels. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollY}.
          @attr name android:scrollY
        */
        public: static const int View_scrollY = 12;
        /**
          <p>
          @attr description
           Defines whether the horizontal scrollbar track should always be drawn. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbarAlwaysDrawHorizontalTrack}.
          @attr name android:scrollbarAlwaysDrawHorizontalTrack
        */
        public: static const int View_scrollbarAlwaysDrawHorizontalTrack = 6;
        /**
          <p>
          @attr description
           Defines whether the vertical scrollbar track should always be drawn. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbarAlwaysDrawVerticalTrack}.
          @attr name android:scrollbarAlwaysDrawVerticalTrack
        */
        public: static const int View_scrollbarAlwaysDrawVerticalTrack = 7;
        /**
          <p>
          @attr description
           Defines the delay in milliseconds that a scrollbar waits before fade out. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbarDefaultDelayBeforeFade}.
          @attr name android:scrollbarDefaultDelayBeforeFade
        */
        public: static const int View_scrollbarDefaultDelayBeforeFade = 44;
        /**
          <p>
          @attr description
           Defines the delay in milliseconds that a scrollbar takes to fade out. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbarFadeDuration}.
          @attr name android:scrollbarFadeDuration
        */
        public: static const int View_scrollbarFadeDuration = 43;
        /**
          <p>
          @attr description
           Sets the width of vertical scrollbars and height of horizontal scrollbars. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbarSize}.
          @attr name android:scrollbarSize
        */
        public: static const int View_scrollbarSize = 1;
        /**
          <p>
          @attr description
           Controls the scrollbar style and position. The scrollbars can be overlaid or
             inset. When inset, they add to the padding of the view. And the
             scrollbars can be drawn inside the padding area or on the edge of
             the view. For example, if a view has a background drawable and you
             want to draw the scrollbars inside the padding specified by the
             drawable, you can use insideOverlay or insideInset. If you want them
             to appear at the edge of the view, ignoring the padding, then you can
             use outsideOverlay or outsideInset.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>insideOverlay</code></td><td>0x0</td><td> Inside the padding and overlaid </td></tr>
<tr><td><code>insideInset</code></td><td>0x01000000</td><td> Inside the padding and inset </td></tr>
<tr><td><code>outsideOverlay</code></td><td>0x02000000</td><td> Edge of the view and overlaid </td></tr>
<tr><td><code>outsideInset</code></td><td>0x03000000</td><td> Edge of the view and inset </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbarStyle}.
          @attr name android:scrollbarStyle
        */
        public: static const int View_scrollbarStyle = 8;
        /**
          <p>
          @attr description
           Defines the horizontal scrollbar thumb drawable. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbarThumbHorizontal}.
          @attr name android:scrollbarThumbHorizontal
        */
        public: static const int View_scrollbarThumbHorizontal = 2;
        /**
          <p>
          @attr description
           Defines the vertical scrollbar thumb drawable. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbarThumbVertical}.
          @attr name android:scrollbarThumbVertical
        */
        public: static const int View_scrollbarThumbVertical = 3;
        /**
          <p>
          @attr description
           Defines the horizontal scrollbar track drawable. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbarTrackHorizontal}.
          @attr name android:scrollbarTrackHorizontal
        */
        public: static const int View_scrollbarTrackHorizontal = 4;
        /**
          <p>
          @attr description
           Defines the vertical scrollbar track drawable. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbarTrackVertical}.
          @attr name android:scrollbarTrackVertical
        */
        public: static const int View_scrollbarTrackVertical = 5;
        /**
          <p>
          @attr description
           Defines which scrollbars should be displayed on scrolling or not. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x00000000</td><td> No scrollbar is displayed. </td></tr>
<tr><td><code>horizontal</code></td><td>0x00000100</td><td> Displays horizontal scrollbar only. </td></tr>
<tr><td><code>vertical</code></td><td>0x00000200</td><td> Displays vertical scrollbar only. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#scrollbars}.
          @attr name android:scrollbars
        */
        public: static const int View_scrollbars = 23;
        /**
          <p>
          @attr description
           Boolean that controls whether a view should have sound effects
             enabled for events such as clicking and touching. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#soundEffectsEnabled}.
          @attr name android:soundEffectsEnabled
        */
        public: static const int View_soundEffectsEnabled = 37;
        /**
          <p>
          @attr description
           Sets the state-based animator for the View. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#stateListAnimator}.
          @attr name android:stateListAnimator
        */
        public: static const int View_stateListAnimator = 74;
        /**
          <p>
          @attr description
           Supply a tag for this view containing a String, to be retrieved
             later with {@link android.view.View#getTag View.getTag()} or
             searched for with {@link android.view.View#findViewWithTag
             View.findViewWithTag()}.  It is generally preferable to use
             IDs (through the android:id attribute) instead of tags because
             they are faster and allow for compile-time type checking. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#tag}.
          @attr name android:tag
        */
        public: static const int View_tag = 10;
        /**
          <p>
          @attr description
           Defines the alignment of the text. A heuristic is used to determine the resolved
            text alignment. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>inherit</code></td><td>0</td><td> Default </td></tr>
<tr><td><code>gravity</code></td><td>1</td><td> Default for the root view. The gravity determines the alignment, ALIGN_NORMAL,
                ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph’s
                text direction </td></tr>
<tr><td><code>textStart</code></td><td>2</td><td> Align to the start of the paragraph, e.g. ALIGN_NORMAL. </td></tr>
<tr><td><code>textEnd</code></td><td>3</td><td> Align to the end of the paragraph, e.g. ALIGN_OPPOSITE. </td></tr>
<tr><td><code>center</code></td><td>4</td><td> Center the paragraph, e.g. ALIGN_CENTER. </td></tr>
<tr><td><code>viewStart</code></td><td>5</td><td> Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
                layoutDirection is LTR, and ALIGN_RIGHT otherwise. </td></tr>
<tr><td><code>viewEnd</code></td><td>6</td><td> Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
                layoutDirection is LTR, and ALIGN_LEFT otherwise </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textAlignment}.
          @attr name android:textAlignment
        */
        public: static const int View_textAlignment = 64;
        /**
          <p>
          @attr description
           Defines the direction of the text. A heuristic is used to determine the resolved text
              direction of paragraphs. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>inherit</code></td><td>0</td><td> Default </td></tr>
<tr><td><code>firstStrong</code></td><td>1</td><td> Default for the root view. The first strong directional character determines the
                 paragraph direction.  If there is no strong directional character, the paragraph
                 direction is the view’s resolved layout direction. </td></tr>
<tr><td><code>anyRtl</code></td><td>2</td><td> The paragraph direction is RTL if it contains any strong RTL character, otherwise
                 it is LTR if it contains any strong LTR characters.  If there are neither, the
                 paragraph direction is the view’s resolved layout direction. </td></tr>
<tr><td><code>ltr</code></td><td>3</td><td> The paragraph direction is left to right. </td></tr>
<tr><td><code>rtl</code></td><td>4</td><td> The paragraph direction is right to left. </td></tr>
<tr><td><code>locale</code></td><td>5</td><td> The paragraph direction is coming from the system Locale. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textDirection}.
          @attr name android:textDirection
        */
        public: static const int View_textDirection = 63;
        /**
          <p>
          @attr description
           Specifies a theme override for a view. When a theme override is set, the
             view will be inflated using a {@link android.content.Context} themed with
             the specified resource. During XML inflation, any child views under the
             view with a theme override will inherit the themed context. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#theme}.
          @attr name android:theme
        */
        public: static const int View_theme = 0;
        /**
          <p>
          @attr description
           x location of the pivot point around which the view will rotate and scale.
             This xml attribute sets the pivotX property of the View. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#transformPivotX}.
          @attr name android:transformPivotX
        */
        public: static const int View_transformPivotX = 49;
        /**
          <p>
          @attr description
           y location of the pivot point around which the view will rotate and scale.
             This xml attribute sets the pivotY property of the View. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#transformPivotY}.
          @attr name android:transformPivotY
        */
        public: static const int View_transformPivotY = 50;
        /**
          <p>
          @attr description
           Names a View such that it can be identified for Transitions. Names should be
             unique in the View hierarchy. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#transitionName}.
          @attr name android:transitionName
        */
        public: static const int View_transitionName = 71;
        /**
          <p>
          @attr description
           translation in x of the view. This value is added post-layout to the left
             property of the view, which is set by its layout. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#translationX}.
          @attr name android:translationX
        */
        public: static const int View_translationX = 51;
        /**
          <p>
          @attr description
           translation in y of the view. This value is added post-layout to the top
             property of the view, which is set by its layout. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#translationY}.
          @attr name android:translationY
        */
        public: static const int View_translationY = 52;
        /**
          <p>
          @attr description
           translation in z of the view. This value is added to its elevation. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#translationZ}.
          @attr name android:translationZ
        */
        public: static const int View_translationZ = 70;
        /**
          <p>
          @attr description
           Determines which side the vertical scroll bar should be placed on. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>defaultPosition</code></td><td>0</td><td> Place the scroll bar wherever the system default determines. </td></tr>
<tr><td><code>left</code></td><td>1</td><td> Place the scroll bar on the left. </td></tr>
<tr><td><code>right</code></td><td>2</td><td> Place the scroll bar on the right. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#verticalScrollbarPosition}.
          @attr name android:verticalScrollbarPosition
        */
        public: static const int View_verticalScrollbarPosition = 58;
        /**
          <p>
          @attr description
           Controls the initial visibility of the view.  


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>visible</code></td><td>0</td><td> Visible on screen; the default value. </td></tr>
<tr><td><code>invisible</code></td><td>1</td><td> Not displayed, but taken into account during layout (space is left for it). </td></tr>
<tr><td><code>gone</code></td><td>2</td><td> Completely hidden, as if the view had not been added. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#visibility}.
          @attr name android:visibility
        */
        public: static const int View_visibility = 21;
        /** Attributes that can be used with a ViewAnimator.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ViewAnimator_animateFirstView android:animateFirstView}</code></td><td> Defines whether to animate the current View when the ViewAnimation
             is first displayed.</td></tr>
           <tr><td><code>{@link #ViewAnimator_inAnimation android:inAnimation}</code></td><td> Identifier for the animation to use when a view is shown.</td></tr>
           <tr><td><code>{@link #ViewAnimator_outAnimation android:outAnimation}</code></td><td> Identifier for the animation to use when a view is hidden.</td></tr>
           </table>
           @see #ViewAnimator_animateFirstView
           @see #ViewAnimator_inAnimation
           @see #ViewAnimator_outAnimation
         */
        public: static const int ViewAnimator[3];
        /**
          <p>
          @attr description
           Defines whether to animate the current View when the ViewAnimation
             is first displayed. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animateFirstView}.
          @attr name android:animateFirstView
        */
        public: static const int ViewAnimator_animateFirstView = 2;
        /**
          <p>
          @attr description
           Identifier for the animation to use when a view is shown. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#inAnimation}.
          @attr name android:inAnimation
        */
        public: static const int ViewAnimator_inAnimation = 0;
        /**
          <p>
          @attr description
           Identifier for the animation to use when a view is hidden. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#outAnimation}.
          @attr name android:outAnimation
        */
        public: static const int ViewAnimator_outAnimation = 1;
        /** Attributes that can be used with a ViewDrawableStates.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ViewDrawableStates_state_accelerated android:state_accelerated}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             indicating that the Drawable is in a view that is hardware accelerated.</td></tr>
           <tr><td><code>{@link #ViewDrawableStates_state_activated android:state_activated}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or its parent has been "activated" meaning the user has currently
             marked it as being of interest.</td></tr>
           <tr><td><code>{@link #ViewDrawableStates_state_drag_can_accept android:state_drag_can_accept}</code></td><td> State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that the Drawable is in a view that is capable of accepting a drop of
             the content currently being manipulated in a drag-and-drop operation.</td></tr>
           <tr><td><code>{@link #ViewDrawableStates_state_drag_hovered android:state_drag_hovered}</code></td><td> State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a drag operation (for which the Drawable's view is a valid recipient)
             is currently positioned over the Drawable.</td></tr>
           <tr><td><code>{@link #ViewDrawableStates_state_enabled android:state_enabled}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view is enabled.</td></tr>
           <tr><td><code>{@link #ViewDrawableStates_state_focused android:state_focused}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus.</td></tr>
           <tr><td><code>{@link #ViewDrawableStates_state_hovered android:state_hovered}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a pointer is hovering over the view.</td></tr>
           <tr><td><code>{@link #ViewDrawableStates_state_pressed android:state_pressed}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when the user is pressing down in a view.</td></tr>
           <tr><td><code>{@link #ViewDrawableStates_state_selected android:state_selected}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view (or one of its parents) is currently selected.</td></tr>
           <tr><td><code>{@link #ViewDrawableStates_state_window_focused android:state_window_focused}</code></td><td> State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view's window has input focus.</td></tr>
           </table>
           @see #ViewDrawableStates_state_accelerated
           @see #ViewDrawableStates_state_activated
           @see #ViewDrawableStates_state_drag_can_accept
           @see #ViewDrawableStates_state_drag_hovered
           @see #ViewDrawableStates_state_enabled
           @see #ViewDrawableStates_state_focused
           @see #ViewDrawableStates_state_hovered
           @see #ViewDrawableStates_state_pressed
           @see #ViewDrawableStates_state_selected
           @see #ViewDrawableStates_state_window_focused
         */
        public: static const int ViewDrawableStates[10];
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             indicating that the Drawable is in a view that is hardware accelerated.
             This means that the device can at least render a full-screen scaled
             bitmap with one layer of text and bitmaps composited on top of it
             at 60fps.  When this is set, the colorBackgroundCacheHint will be
             ignored even if it specifies a solid color, since that optimization
             is not needed. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_accelerated}.
          @attr name android:state_accelerated
        */
        public: static const int ViewDrawableStates_state_accelerated = 6;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or its parent has been "activated" meaning the user has currently
             marked it as being of interest.  This is an alternative representation of
             state_checked for when the state should be propagated down the view hierarchy. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_activated}.
          @attr name android:state_activated
        */
        public: static const int ViewDrawableStates_state_activated = 5;
        /**
          <p>
          @attr description
           State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that the Drawable is in a view that is capable of accepting a drop of
             the content currently being manipulated in a drag-and-drop operation. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_drag_can_accept}.
          @attr name android:state_drag_can_accept
        */
        public: static const int ViewDrawableStates_state_drag_can_accept = 8;
        /**
          <p>
          @attr description
           State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a drag operation (for which the Drawable's view is a valid recipient)
             is currently positioned over the Drawable. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_drag_hovered}.
          @attr name android:state_drag_hovered
        */
        public: static const int ViewDrawableStates_state_drag_hovered = 9;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view is enabled. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_enabled}.
          @attr name android:state_enabled
        */
        public: static const int ViewDrawableStates_state_enabled = 2;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_focused}.
          @attr name android:state_focused
        */
        public: static const int ViewDrawableStates_state_focused = 0;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a pointer is hovering over the view. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_hovered}.
          @attr name android:state_hovered
        */
        public: static const int ViewDrawableStates_state_hovered = 7;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when the user is pressing down in a view. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_pressed}.
          @attr name android:state_pressed
        */
        public: static const int ViewDrawableStates_state_pressed = 4;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view (or one of its parents) is currently selected. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_selected}.
          @attr name android:state_selected
        */
        public: static const int ViewDrawableStates_state_selected = 3;
        /**
          <p>
          @attr description
           State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view's window has input focus. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#state_window_focused}.
          @attr name android:state_window_focused
        */
        public: static const int ViewDrawableStates_state_window_focused = 1;
        /** Attributes that can be used with a ViewFlipper.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ViewFlipper_autoStart android:autoStart}</code></td><td> When true, automatically start animating </td></tr>
           <tr><td><code>{@link #ViewFlipper_flipInterval android:flipInterval}</code></td><td></td></tr>
           </table>
           @see #ViewFlipper_autoStart
           @see #ViewFlipper_flipInterval
         */
        public: static const int ViewFlipper[2];
        /**
          <p>
          @attr description
           When true, automatically start animating 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#autoStart}.
          @attr name android:autoStart
        */
        public: static const int ViewFlipper_autoStart = 1;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#flipInterval}
          attribute's value can be found in the {@link #ViewFlipper} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:flipInterval
        */
        public: static const int ViewFlipper_flipInterval = 0;
        /**  Attributes that can be used with a {@link android.view.ViewGroup} or any
         of its subclasses.  Also see {@link #ViewGroup_Layout} for
         attributes that this class processes in its children. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ViewGroup_addStatesFromChildren android:addStatesFromChildren}</code></td><td> Sets whether this ViewGroup's drawable states also include
             its children's drawable states.</td></tr>
           <tr><td><code>{@link #ViewGroup_alwaysDrawnWithCache android:alwaysDrawnWithCache}</code></td><td> Defines whether the ViewGroup should always draw its children using their
             drawing cache or not.</td></tr>
           <tr><td><code>{@link #ViewGroup_animateLayoutChanges android:animateLayoutChanges}</code></td><td> Defines whether changes in layout (caused by adding and removing items) should
             cause a LayoutTransition to run.</td></tr>
           <tr><td><code>{@link #ViewGroup_animationCache android:animationCache}</code></td><td> Defines whether layout animations should create a drawing cache for their
             children.</td></tr>
           <tr><td><code>{@link #ViewGroup_clipChildren android:clipChildren}</code></td><td> Defines whether a child is limited to draw inside of its bounds or not.</td></tr>
           <tr><td><code>{@link #ViewGroup_clipToPadding android:clipToPadding}</code></td><td> Defines whether the ViewGroup will clip its drawing surface so as to exclude
             the padding area.</td></tr>
           <tr><td><code>{@link #ViewGroup_descendantFocusability android:descendantFocusability}</code></td><td> Defines the relationship between the ViewGroup and its descendants
             when looking for a View to take focus.</td></tr>
           <tr><td><code>{@link #ViewGroup_layoutAnimation android:layoutAnimation}</code></td><td> Defines the layout animation to use the first time the ViewGroup is laid out.</td></tr>
           <tr><td><code>{@link #ViewGroup_layoutMode android:layoutMode}</code></td><td> Defines the layout mode of this ViewGroup.</td></tr>
           <tr><td><code>{@link #ViewGroup_persistentDrawingCache android:persistentDrawingCache}</code></td><td> Defines the persistence of the drawing cache.</td></tr>
           <tr><td><code>{@link #ViewGroup_splitMotionEvents android:splitMotionEvents}</code></td><td> Sets whether this ViewGroup should split MotionEvents
             to separate child views during touch event dispatch.</td></tr>
           <tr><td><code>{@link #ViewGroup_touchscreenBlocksFocus android:touchscreenBlocksFocus}</code></td><td> Set to true if this ViewGroup blocks focus in the presence of a touchscreen.</td></tr>
           <tr><td><code>{@link #ViewGroup_transitionGroup android:transitionGroup}</code></td><td> Sets whether or not this ViewGroup should be treated as a single entity
             when doing an Activity transition.</td></tr>
           </table>
           @see #ViewGroup_addStatesFromChildren
           @see #ViewGroup_alwaysDrawnWithCache
           @see #ViewGroup_animateLayoutChanges
           @see #ViewGroup_animationCache
           @see #ViewGroup_clipChildren
           @see #ViewGroup_clipToPadding
           @see #ViewGroup_descendantFocusability
           @see #ViewGroup_layoutAnimation
           @see #ViewGroup_layoutMode
           @see #ViewGroup_persistentDrawingCache
           @see #ViewGroup_splitMotionEvents
           @see #ViewGroup_touchscreenBlocksFocus
           @see #ViewGroup_transitionGroup
         */
        public: static const int ViewGroup[13];
        /**
          <p>
          @attr description
           Sets whether this ViewGroup's drawable states also include
             its children's drawable states.  This is used, for example, to
             make a group appear to be focused when its child EditText or button
             is focused. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#addStatesFromChildren}.
          @attr name android:addStatesFromChildren
        */
        public: static const int ViewGroup_addStatesFromChildren = 6;
        /**
          <p>
          @attr description
           Defines whether the ViewGroup should always draw its children using their
             drawing cache or not. The default value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#alwaysDrawnWithCache}.
          @attr name android:alwaysDrawnWithCache
        */
        public: static const int ViewGroup_alwaysDrawnWithCache = 5;
        /**
          <p>
          @attr description
           Defines whether changes in layout (caused by adding and removing items) should
             cause a LayoutTransition to run. When this flag is set to true, a default
             LayoutTransition object will be set on the ViewGroup container and default
             animations will run when these layout changes occur.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animateLayoutChanges}.
          @attr name android:animateLayoutChanges
        */
        public: static const int ViewGroup_animateLayoutChanges = 9;
        /**
          <p>
          @attr description
           Defines whether layout animations should create a drawing cache for their
             children. Enabling the animation cache consumes more memory and requires
             a longer initialization but provides better performance. The animation
             cache is enabled by default. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#animationCache}.
          @attr name android:animationCache
        */
        public: static const int ViewGroup_animationCache = 3;
        /**
          <p>
          @attr description
           Defines whether a child is limited to draw inside of its bounds or not.
             This is useful with animations that scale the size of the children to more
             than 100% for instance. In such a case, this property should be set to false
             to allow the children to draw outside of their bounds. The default value of
             this property is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#clipChildren}.
          @attr name android:clipChildren
        */
        public: static const int ViewGroup_clipChildren = 0;
        /**
          <p>
          @attr description
           Defines whether the ViewGroup will clip its drawing surface so as to exclude
             the padding area. This property is set to true by default. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#clipToPadding}.
          @attr name android:clipToPadding
        */
        public: static const int ViewGroup_clipToPadding = 1;
        /**
          <p>
          @attr description
           Defines the relationship between the ViewGroup and its descendants
             when looking for a View to take focus. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>beforeDescendants</code></td><td>0</td><td> The ViewGroup will get focus before any of its descendants. </td></tr>
<tr><td><code>afterDescendants</code></td><td>1</td><td> The ViewGroup will get focus only if none of its descendants want it. </td></tr>
<tr><td><code>blocksDescendants</code></td><td>2</td><td> The ViewGroup will block its descendants from receiving focus. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#descendantFocusability}.
          @attr name android:descendantFocusability
        */
        public: static const int ViewGroup_descendantFocusability = 7;
        /**
          <p>
          @attr description
           Defines the layout animation to use the first time the ViewGroup is laid out.
             Layout animations can also be started manually after the first layout. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layoutAnimation}.
          @attr name android:layoutAnimation
        */
        public: static const int ViewGroup_layoutAnimation = 2;
        /**
          <p>
          @attr description
           Defines the layout mode of this ViewGroup. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>clipBounds</code></td><td>0</td><td> Use the children's clip bounds when laying out this container. </td></tr>
<tr><td><code>opticalBounds</code></td><td>1</td><td> Use the children's optical bounds when laying out this container. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layoutMode}.
          @attr name android:layoutMode
        */
        public: static const int ViewGroup_layoutMode = 10;
        /**
          <p>
          @attr description
           Defines the persistence of the drawing cache. The drawing cache might be
             enabled by a ViewGroup for all its children in specific situations (for
             instance during a scrolling.) This property lets you persist the cache
             in memory after its initial usage. Persisting the cache consumes more
             memory but may prevent frequent garbage collection is the cache is created
             over and over again. By default the persistence is set to scrolling. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0x0</td><td> The drawing cache is not persisted after use. </td></tr>
<tr><td><code>animation</code></td><td>0x1</td><td> The drawing cache is persisted after a layout animation. </td></tr>
<tr><td><code>scrolling</code></td><td>0x2</td><td> The drawing cache is persisted after a scroll. </td></tr>
<tr><td><code>all</code></td><td>0x3</td><td> The drawing cache is always persisted. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#persistentDrawingCache}.
          @attr name android:persistentDrawingCache
        */
        public: static const int ViewGroup_persistentDrawingCache = 4;
        /**
          <p>
          @attr description
           Sets whether this ViewGroup should split MotionEvents
             to separate child views during touch event dispatch.
             If false (default), touch events will be dispatched to
             the child view where the first pointer went down until
             the last pointer goes up.
             If true, touch events may be dispatched to multiple children.
             MotionEvents for each pointer will be dispatched to the child
             view where the initial ACTION_DOWN event happened.
             See {@link android.view.ViewGroup#setMotionEventSplittingEnabled(boolean)}
             for more information. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#splitMotionEvents}.
          @attr name android:splitMotionEvents
        */
        public: static const int ViewGroup_splitMotionEvents = 8;
        /**
          <p>
          @attr description
           Set to true if this ViewGroup blocks focus in the presence of a touchscreen. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#touchscreenBlocksFocus}.
          @attr name android:touchscreenBlocksFocus
        */
        public: static const int ViewGroup_touchscreenBlocksFocus = 12;
        /**
          <p>
          @attr description
           Sets whether or not this ViewGroup should be treated as a single entity
             when doing an Activity transition. Typically, the elements inside a
             ViewGroup are each transitioned from the scene individually. The default
             for a ViewGroup is false unless it has a background. See
             {@link android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity,
             android.view.View, String)} for more information. Corresponds to
             {@link android.view.ViewGroup#setTransitionGroup(boolean)}.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#transitionGroup}.
          @attr name android:transitionGroup
        */
        public: static const int ViewGroup_transitionGroup = 11;
        /**  This is the basic set of layout attributes that are common to all
         layout managers.  These attributes are specified with the rest of
         a view's normal attributes (such as {@link android.R.attr#background},
         but will be parsed by the view's parent and ignored by the child.
        <p>The values defined here correspond to the base layout attribute
        class {@link android.view.ViewGroup.LayoutParams}. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ViewGroup_Layout_layout_height android:layout_height}</code></td><td> Specifies the basic height of the view.</td></tr>
           <tr><td><code>{@link #ViewGroup_Layout_layout_width android:layout_width}</code></td><td> Specifies the basic width of the view.</td></tr>
           </table>
           @see #ViewGroup_Layout_layout_height
           @see #ViewGroup_Layout_layout_width
         */
        public: static const int ViewGroup_Layout[2];
        /**
          <p>
          @attr description
           Specifies the basic height of the view.  This is a required attribute
             for any view inside of a containing layout manager.  Its value may
             be a dimension (such as "12dip") for a constant height or one of
             the special constants. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_height}.
          @attr name android:layout_height
        */
        public: static const int ViewGroup_Layout_layout_height = 1;
        /**
          <p>
          @attr description
           Specifies the basic width of the view.  This is a required attribute
             for any view inside of a containing layout manager.  Its value may
             be a dimension (such as "12dip") for a constant width or one of
             the special constants. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_width}.
          @attr name android:layout_width
        */
        public: static const int ViewGroup_Layout_layout_width = 0;
        /**  This is the basic set of layout attributes for layout managers that
         wish to place margins around their child views.
         These attributes are specified with the rest of
         a view's normal attributes (such as {@link android.R.attr#background},
         but will be parsed by the view's parent and ignored by the child.
        <p>The values defined here correspond to the base layout attribute
        class {@link android.view.ViewGroup.MarginLayoutParams}. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ViewGroup_MarginLayout_layout_height android:layout_height}</code></td><td> Specifies the basic height of the view.</td></tr>
           <tr><td><code>{@link #ViewGroup_MarginLayout_layout_margin android:layout_margin}</code></td><td>  Specifies extra space on the left, top, right and bottom
              sides of this view.</td></tr>
           <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginBottom android:layout_marginBottom}</code></td><td>  Specifies extra space on the bottom side of this view.</td></tr>
           <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginEnd android:layout_marginEnd}</code></td><td>  Specifies extra space on the end side of this view.</td></tr>
           <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginLeft android:layout_marginLeft}</code></td><td>  Specifies extra space on the left side of this view.</td></tr>
           <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginRight android:layout_marginRight}</code></td><td>  Specifies extra space on the right side of this view.</td></tr>
           <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginStart android:layout_marginStart}</code></td><td>  Specifies extra space on the start side of this view.</td></tr>
           <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginTop android:layout_marginTop}</code></td><td>  Specifies extra space on the top side of this view.</td></tr>
           <tr><td><code>{@link #ViewGroup_MarginLayout_layout_width android:layout_width}</code></td><td> Specifies the basic width of the view.</td></tr>
           </table>
           @see #ViewGroup_MarginLayout_layout_height
           @see #ViewGroup_MarginLayout_layout_margin
           @see #ViewGroup_MarginLayout_layout_marginBottom
           @see #ViewGroup_MarginLayout_layout_marginEnd
           @see #ViewGroup_MarginLayout_layout_marginLeft
           @see #ViewGroup_MarginLayout_layout_marginRight
           @see #ViewGroup_MarginLayout_layout_marginStart
           @see #ViewGroup_MarginLayout_layout_marginTop
           @see #ViewGroup_MarginLayout_layout_width
         */
        public: static const int ViewGroup_MarginLayout[9];
        /**
          <p>
          @attr description
           Specifies the basic height of the view.  This is a required attribute
             for any view inside of a containing layout manager.  Its value may
             be a dimension (such as "12dip") for a constant height or one of
             the special constants. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_height}.
          @attr name android:layout_height
        */
        public: static const int ViewGroup_MarginLayout_layout_height = 1;
        /**
          <p>
          @attr description
            Specifies extra space on the left, top, right and bottom
              sides of this view. This space is outside this view's bounds. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_margin}.
          @attr name android:layout_margin
        */
        public: static const int ViewGroup_MarginLayout_layout_margin = 2;
        /**
          <p>
          @attr description
            Specifies extra space on the bottom side of this view.
              This space is outside this view's bounds. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_marginBottom}.
          @attr name android:layout_marginBottom
        */
        public: static const int ViewGroup_MarginLayout_layout_marginBottom = 6;
        /**
          <p>
          @attr description
            Specifies extra space on the end side of this view.
              This space is outside this view's bounds. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_marginEnd}.
          @attr name android:layout_marginEnd
        */
        public: static const int ViewGroup_MarginLayout_layout_marginEnd = 8;
        /**
          <p>
          @attr description
            Specifies extra space on the left side of this view.
              This space is outside this view's bounds. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_marginLeft}.
          @attr name android:layout_marginLeft
        */
        public: static const int ViewGroup_MarginLayout_layout_marginLeft = 3;
        /**
          <p>
          @attr description
            Specifies extra space on the right side of this view.
              This space is outside this view's bounds. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_marginRight}.
          @attr name android:layout_marginRight
        */
        public: static const int ViewGroup_MarginLayout_layout_marginRight = 5;
        /**
          <p>
          @attr description
            Specifies extra space on the start side of this view.
              This space is outside this view's bounds. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_marginStart}.
          @attr name android:layout_marginStart
        */
        public: static const int ViewGroup_MarginLayout_layout_marginStart = 7;
        /**
          <p>
          @attr description
            Specifies extra space on the top side of this view.
              This space is outside this view's bounds. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_marginTop}.
          @attr name android:layout_marginTop
        */
        public: static const int ViewGroup_MarginLayout_layout_marginTop = 4;
        /**
          <p>
          @attr description
           Specifies the basic width of the view.  This is a required attribute
             for any view inside of a containing layout manager.  Its value may
             be a dimension (such as "12dip") for a constant width or one of
             the special constants. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. </td></tr>
<tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
                 Introduced in API Level 8. </td></tr>
<tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout_width}.
          @attr name android:layout_width
        */
        public: static const int ViewGroup_MarginLayout_layout_width = 0;
        /**  A {@link android.view.ViewStub} lets you lazily include other XML layouts
         inside your application at runtime. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ViewStub_inflatedId android:inflatedId}</code></td><td> Overrides the id of the inflated View with this value.</td></tr>
           <tr><td><code>{@link #ViewStub_layout android:layout}</code></td><td> Supply an identifier for the layout resource to inflate when the ViewStub
             becomes visible or when forced to do so.</td></tr>
           </table>
           @see #ViewStub_inflatedId
           @see #ViewStub_layout
         */
        public: static const int ViewStub[2];
        /**
          <p>
          @attr description
           Overrides the id of the inflated View with this value. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#inflatedId}.
          @attr name android:inflatedId
        */
        public: static const int ViewStub_inflatedId = 1;
        /**
          <p>
          @attr description
           Supply an identifier for the layout resource to inflate when the ViewStub
             becomes visible or when forced to do so. The layout resource must be a
             valid reference to a layout. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#layout}.
          @attr name android:layout
        */
        public: static const int ViewStub_layout = 0;
        /** Attributes that can be used with a ViewSwitcher.
         */
        public: static const int ViewSwitcher[0];
        /**  Attributes that can be assigned to a tag for a particular View. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ViewTag_id android:id}</code></td><td> Specifies the key identifying a tag.</td></tr>
           <tr><td><code>{@link #ViewTag_value android:value}</code></td><td> Specifies the value with which to tag the view.</td></tr>
           </table>
           @see #ViewTag_id
           @see #ViewTag_value
         */
        public: static const int ViewTag[2];
        /**
          <p>
          @attr description
           Specifies the key identifying a tag. This must be a resource reference. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#id}.
          @attr name android:id
        */
        public: static const int ViewTag_id = 1;
        /**
          <p>
          @attr description
           Specifies the value with which to tag the view. 


          <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>May be an integer value, such as "<code>100</code>".
<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>May be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#value}.
          @attr name android:value
        */
        public: static const int ViewTag_value = 0;
        /**  Use with {@link android.transition.Visibility} transitions, such as
         <code>slide</code>, <code>explode</code>, and <code>fade</code> to mark which
         views are supported. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #VisibilityTransition_transitionVisibilityMode android:transitionVisibilityMode}</code></td><td> Changes whether the transition supports appearing and/or disappearing Views.</td></tr>
           </table>
           @see #VisibilityTransition_transitionVisibilityMode
         */
        public: static const int VisibilityTransition[1];
        /**
          <p>
          @attr description
           Changes whether the transition supports appearing and/or disappearing Views.
             Corresponds to {@link android.transition.Visibility#setMode(int)}. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>mode_in</code></td><td>1</td><td> Only appearing Views will be supported. </td></tr>
<tr><td><code>mode_out</code></td><td>2</td><td> Only disappearing Views will be supported. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#transitionVisibilityMode}.
          @attr name android:transitionVisibilityMode
        */
        public: static const int VisibilityTransition_transitionVisibilityMode = 0;
        /**  Use <code>voice-enrollment-application</code>
         as the root tag of the XML resource that escribes the supported keyphrases (hotwords)
         by the enrollment application.
         Described here are the attributes that can be included in that tag.
         @hide
         @SystemApi 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #VoiceEnrollmentApplication_searchKeyphrase android:searchKeyphrase}</code></td><td> The actual keyphrase/hint text, or empty if not keyphrase dependent.</td></tr>
           <tr><td><code>{@link #VoiceEnrollmentApplication_searchKeyphraseId android:searchKeyphraseId}</code></td><td> A globally unique ID for the keyphrase.</td></tr>
           <tr><td><code>{@link #VoiceEnrollmentApplication_searchKeyphraseRecognitionFlags android:searchKeyphraseRecognitionFlags}</code></td><td> Flags for supported recognition modes.</td></tr>
           <tr><td><code>{@link #VoiceEnrollmentApplication_searchKeyphraseSupportedLocales android:searchKeyphraseSupportedLocales}</code></td><td> A comma separated list of BCP-47 language tag for locales that are supported
             for this keyphrase, or empty if not locale dependent.</td></tr>
           </table>
           @see #VoiceEnrollmentApplication_searchKeyphrase
           @see #VoiceEnrollmentApplication_searchKeyphraseId
           @see #VoiceEnrollmentApplication_searchKeyphraseRecognitionFlags
           @see #VoiceEnrollmentApplication_searchKeyphraseSupportedLocales
         */
        public: static const int VoiceEnrollmentApplication[4];
        /**
          <p>
          @attr description
           The actual keyphrase/hint text, or empty if not keyphrase dependent. @hide @SystemApi 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchKeyphrase}.
          @attr name android:searchKeyphrase
        */
        public: static const int VoiceEnrollmentApplication_searchKeyphrase = 1;
        /**
          <p>
          @attr description
           A globally unique ID for the keyphrase. @hide @SystemApi 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchKeyphraseId}.
          @attr name android:searchKeyphraseId
        */
        public: static const int VoiceEnrollmentApplication_searchKeyphraseId = 0;
        /**
          <p>
          @attr description
           Flags for supported recognition modes. @hide @SystemApi 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>voiceTrigger</code></td><td>0x1</td><td></td></tr>
<tr><td><code>userIdentification</code></td><td>0x2</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchKeyphraseRecognitionFlags}.
          @attr name android:searchKeyphraseRecognitionFlags
        */
        public: static const int VoiceEnrollmentApplication_searchKeyphraseRecognitionFlags = 3;
        /**
          <p>
          @attr description
           A comma separated list of BCP-47 language tag for locales that are supported
             for this keyphrase, or empty if not locale dependent. @hide @SystemApi 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#searchKeyphraseSupportedLocales}.
          @attr name android:searchKeyphraseSupportedLocales
        */
        public: static const int VoiceEnrollmentApplication_searchKeyphraseSupportedLocales = 2;
        /**  Use <code>voice-interaction-service</code> as the root tag of the XML resource that
         describes a {@link android.service.voice.VoiceInteractionService}, which is referenced from
         its {@link android.service.voice.VoiceInteractionService#SERVICE_META_DATA} meta-data entry.
         Described here are the attributes that can be included in that tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #VoiceInteractionService_recognitionService android:recognitionService}</code></td><td> The service that provides voice recognition.</td></tr>
           <tr><td><code>{@link #VoiceInteractionService_sessionService android:sessionService}</code></td><td> The service that hosts active voice interaction sessions.</td></tr>
           <tr><td><code>{@link #VoiceInteractionService_settingsActivity android:settingsActivity}</code></td><td> Component name of an activity that allows the user to modify
             the settings for this service.</td></tr>
           </table>
           @see #VoiceInteractionService_recognitionService
           @see #VoiceInteractionService_sessionService
           @see #VoiceInteractionService_settingsActivity
         */
        public: static const int VoiceInteractionService[3];
        /**
          <p>
          @attr description
           The service that provides voice recognition.  This is required.  When the user
             selects this voice interaction service, they will also be implicitly selecting
             the component here for their recognition service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#recognitionService}.
          @attr name android:recognitionService
        */
        public: static const int VoiceInteractionService_recognitionService = 2;
        /**
          <p>
          @attr description
           The service that hosts active voice interaction sessions.  This is required. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#sessionService}.
          @attr name android:sessionService
        */
        public: static const int VoiceInteractionService_sessionService = 1;
        /**
          <p>
          @attr description
           Component name of an activity that allows the user to modify
             the settings for this service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int VoiceInteractionService_settingsActivity = 0;
        /** Attributes that can be used with a VoiceInteractionSession.
         */
        public: static const int VoiceInteractionSession[0];
        /**  Base attributes available to VolumePreference. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #VolumePreference_streamType android:streamType}</code></td><td> Different audio stream types.</td></tr>
           </table>
           @see #VolumePreference_streamType
         */
        public: static const int VolumePreference[1];
        /**
          <p>
          @attr description
           Different audio stream types. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>voice</code></td><td>0</td><td></td></tr>
<tr><td><code>system</code></td><td>1</td><td></td></tr>
<tr><td><code>ring</code></td><td>2</td><td></td></tr>
<tr><td><code>music</code></td><td>3</td><td></td></tr>
<tr><td><code>alarm</code></td><td>4</td><td></td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#streamType}.
          @attr name android:streamType
        */
        public: static const int VolumePreference_streamType = 0;
        /**  Use <code>wallpaper</code> as the root tag of the XML resource that
         describes an
         {@link android.service.wallpaper.WallpaperService}, which is
         referenced from its
         {@link android.service.wallpaper.WallpaperService#SERVICE_META_DATA}
         meta-data entry.  Described here are the attributes that can be
         included in that tag. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Wallpaper_author android:author}</code></td><td> Name of the author of this component, e.</td></tr>
           <tr><td><code>{@link #Wallpaper_description android:description}</code></td><td> Short description of the component's purpose or behavior.</td></tr>
           <tr><td><code>{@link #Wallpaper_settingsActivity android:settingsActivity}</code></td><td> Component name of an activity that allows the user to modify
             the settings for this service.</td></tr>
           <tr><td><code>{@link #Wallpaper_thumbnail android:thumbnail}</code></td><td> Reference to a the wallpaper's thumbnail bitmap.</td></tr>
           </table>
           @see #Wallpaper_author
           @see #Wallpaper_description
           @see #Wallpaper_settingsActivity
           @see #Wallpaper_thumbnail
         */
        public: static const int Wallpaper[4];
        /**
          <p>
          @attr description
           Name of the author of this component, e.g. Google. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#author}.
          @attr name android:author
        */
        public: static const int Wallpaper_author = 3;
        /**
          <p>
          @attr description
           Short description of the component's purpose or behavior. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#description}.
          @attr name android:description
        */
        public: static const int Wallpaper_description = 0;
        /**
          <p>
          @attr description
           Component name of an activity that allows the user to modify
             the settings for this service. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#settingsActivity}.
          @attr name android:settingsActivity
        */
        public: static const int Wallpaper_settingsActivity = 1;
        /**
          <p>
          @attr description
           Reference to a the wallpaper's thumbnail bitmap. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#thumbnail}.
          @attr name android:thumbnail
        */
        public: static const int Wallpaper_thumbnail = 2;
        /**  Use <code>wallpaper-preview</code> as the root tag of the XML resource that
         describes a wallpaper preview. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #WallpaperPreviewInfo_staticWallpaperPreview android:staticWallpaperPreview}</code></td><td> A resource id of a static drawable.</td></tr>
           </table>
           @see #WallpaperPreviewInfo_staticWallpaperPreview
         */
        public: static const int WallpaperPreviewInfo[1];
        /**
          <p>
          @attr description
           A resource id of a static drawable. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#staticWallpaperPreview}.
          @attr name android:staticWallpaperPreview
        */
        public: static const int WallpaperPreviewInfo_staticWallpaperPreview = 0;
        /**  @hide 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #WeightedLinearLayout_majorWeightMax android:majorWeightMax}</code></td><td></td></tr>
           <tr><td><code>{@link #WeightedLinearLayout_majorWeightMin android:majorWeightMin}</code></td><td></td></tr>
           <tr><td><code>{@link #WeightedLinearLayout_minorWeightMax android:minorWeightMax}</code></td><td></td></tr>
           <tr><td><code>{@link #WeightedLinearLayout_minorWeightMin android:minorWeightMin}</code></td><td></td></tr>
           </table>
           @see #WeightedLinearLayout_majorWeightMax
           @see #WeightedLinearLayout_majorWeightMin
           @see #WeightedLinearLayout_minorWeightMax
           @see #WeightedLinearLayout_minorWeightMin
         */
        public: static const int WeightedLinearLayout[4];
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#majorWeightMax}
          attribute's value can be found in the {@link #WeightedLinearLayout} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:majorWeightMax
        */
        public: static const int WeightedLinearLayout_majorWeightMax = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#majorWeightMin}
          attribute's value can be found in the {@link #WeightedLinearLayout} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:majorWeightMin
        */
        public: static const int WeightedLinearLayout_majorWeightMin = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#minorWeightMax}
          attribute's value can be found in the {@link #WeightedLinearLayout} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:minorWeightMax
        */
        public: static const int WeightedLinearLayout_minorWeightMax = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#minorWeightMin}
          attribute's value can be found in the {@link #WeightedLinearLayout} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:minorWeightMin
        */
        public: static const int WeightedLinearLayout_minorWeightMin = 1;
        /**  The set of attributes that describe a Windows's theme. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Window_backgroundDimAmount android:backgroundDimAmount}</code></td><td> Default background dim amount when a menu, dialog, or something similar pops up.</td></tr>
           <tr><td><code>{@link #Window_backgroundDimEnabled android:backgroundDimEnabled}</code></td><td> Control whether dimming behind the window is enabled.</td></tr>
           <tr><td><code>{@link #Window_navigationBarColor android:navigationBarColor}</code></td><td> The color for the navigation bar.</td></tr>
           <tr><td><code>{@link #Window_statusBarColor android:statusBarColor}</code></td><td> The color for the status bar.</td></tr>
           <tr><td><code>{@link #Window_textColor android:textColor}</code></td><td> Color of text (usually same as colorForeground).</td></tr>
           <tr><td><code>{@link #Window_windowActionBar android:windowActionBar}</code></td><td> Flag indicating whether this window should have an Action Bar
             in place of the usual title bar.</td></tr>
           <tr><td><code>{@link #Window_windowActionBarFullscreenDecorLayout android:windowActionBarFullscreenDecorLayout}</code></td><td> Internal layout used internally for window decor </td></tr>
           <tr><td><code>{@link #Window_windowActionBarOverlay android:windowActionBarOverlay}</code></td><td> Flag indicating whether this window's Action Bar should overlay
             application content.</td></tr>
           <tr><td><code>{@link #Window_windowActionModeOverlay android:windowActionModeOverlay}</code></td><td> Flag indicating whether action modes should overlay window content
             when there is not reserved space for their UI (such as an Action Bar).</td></tr>
           <tr><td><code>{@link #Window_windowActivityTransitions android:windowActivityTransitions}</code></td><td> Flag indicating whether this window allows Activity Transitions.</td></tr>
           <tr><td><code>{@link #Window_windowAllowEnterTransitionOverlap android:windowAllowEnterTransitionOverlap}</code></td><td> Flag indicating whether this Window's transition should overlap with
             the exiting transition of the calling Activity.</td></tr>
           <tr><td><code>{@link #Window_windowAllowReturnTransitionOverlap android:windowAllowReturnTransitionOverlap}</code></td><td> Flag indicating whether this Window's transition should overlap with
             the exiting transition of the called Activity when the called Activity
             finishes.</td></tr>
           <tr><td><code>{@link #Window_windowAnimationStyle android:windowAnimationStyle}</code></td><td> Reference to a style resource holding
             the set of window animations to use, which can be
             any of the attributes defined by
             {@link android.R.styleable#WindowAnimation}.</td></tr>
           <tr><td><code>{@link #Window_windowBackground android:windowBackground}</code></td><td> Drawable to use as the overall window background.</td></tr>
           <tr><td><code>{@link #Window_windowBackgroundFallback android:windowBackgroundFallback}</code></td><td> Drawable to draw selectively within the inset areas when the windowBackground
             has been set to null.</td></tr>
           <tr><td><code>{@link #Window_windowClipToOutline android:windowClipToOutline}</code></td><td> Whether to clip window content to the outline of the window background.</td></tr>
           <tr><td><code>{@link #Window_windowCloseOnTouchOutside android:windowCloseOnTouchOutside}</code></td><td> Control whether a container should automatically close itself if
             the user touches outside of it.</td></tr>
           <tr><td><code>{@link #Window_windowContentOverlay android:windowContentOverlay}</code></td><td> This Drawable is overlaid over the foreground of the Window's content area, usually
             to place a shadow below the title.</td></tr>
           <tr><td><code>{@link #Window_windowContentTransitionManager android:windowContentTransitionManager}</code></td><td> Reference to a TransitionManager XML resource defining the desired
             transitions between different window content.</td></tr>
           <tr><td><code>{@link #Window_windowContentTransitions android:windowContentTransitions}</code></td><td> Flag indicating whether this window requests that content changes be performed
             as scene changes with transitions.</td></tr>
           <tr><td><code>{@link #Window_windowDisablePreview android:windowDisablePreview}</code></td><td> Flag allowing you to disable the preview animation for a window.</td></tr>
           <tr><td><code>{@link #Window_windowDrawsSystemBarBackgrounds android:windowDrawsSystemBarBackgrounds}</code></td><td> Flag indicating whether this Window is responsible for drawing the background for the
             system bars.</td></tr>
           <tr><td><code>{@link #Window_windowElevation android:windowElevation}</code></td><td> Elevation to use for the window.</td></tr>
           <tr><td><code>{@link #Window_windowEnableSplitTouch android:windowEnableSplitTouch}</code></td><td> Flag indicating that this window should allow touches to be split
             across other windows that also support split touch.</td></tr>
           <tr><td><code>{@link #Window_windowEnterTransition android:windowEnterTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move Views into the initial Window's content Scene.</td></tr>
           <tr><td><code>{@link #Window_windowExitTransition android:windowExitTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the Window's content Scene when launching a new Activity.</td></tr>
           <tr><td><code>{@link #Window_windowFixedHeightMajor android:windowFixedHeightMajor}</code></td><td> A fixed height for the window along the major axis of the screen,
             that is, when in portrait.</td></tr>
           <tr><td><code>{@link #Window_windowFixedHeightMinor android:windowFixedHeightMinor}</code></td><td> A fixed height for the window along the minor axis of the screen,
             that is, when in landscape.</td></tr>
           <tr><td><code>{@link #Window_windowFixedWidthMajor android:windowFixedWidthMajor}</code></td><td> A fixed width for the window along the major axis of the screen,
             that is, when in landscape.</td></tr>
           <tr><td><code>{@link #Window_windowFixedWidthMinor android:windowFixedWidthMinor}</code></td><td> A fixed width for the window along the minor axis of the screen,
             that is, when in portrait.</td></tr>
           <tr><td><code>{@link #Window_windowFrame android:windowFrame}</code></td><td> Drawable to use as a frame around the window.</td></tr>
           <tr><td><code>{@link #Window_windowFullscreen android:windowFullscreen}</code></td><td> Flag indicating whether this window should fill the entire screen.</td></tr>
           <tr><td><code>{@link #Window_windowIsFloating android:windowIsFloating}</code></td><td> Flag indicating whether this is a floating window.</td></tr>
           <tr><td><code>{@link #Window_windowIsTranslucent android:windowIsTranslucent}</code></td><td> Flag indicating whether this is a translucent window.</td></tr>
           <tr><td><code>{@link #Window_windowMinWidthMajor android:windowMinWidthMajor}</code></td><td> The minimum width the window is allowed to be, along the major
             axis of the screen.</td></tr>
           <tr><td><code>{@link #Window_windowMinWidthMinor android:windowMinWidthMinor}</code></td><td> The minimum width the window is allowed to be, along the minor
             axis of the screen.</td></tr>
           <tr><td><code>{@link #Window_windowNoDisplay android:windowNoDisplay}</code></td><td> Flag indicating that this window should not be displayed at all.</td></tr>
           <tr><td><code>{@link #Window_windowNoTitle android:windowNoTitle}</code></td><td> Flag indicating whether there should be no title on this window.</td></tr>
           <tr><td><code>{@link #Window_windowOutsetBottom android:windowOutsetBottom}</code></td><td></td></tr>
           <tr><td><code>{@link #Window_windowOverscan android:windowOverscan}</code></td><td> Flag indicating whether this window should extend into overscan region.</td></tr>
           <tr><td><code>{@link #Window_windowReenterTransition android:windowReenterTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move Views in to the scene when returning from a previously-started Activity.</td></tr>
           <tr><td><code>{@link #Window_windowReturnTransition android:windowReturnTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the scene when the Window is
             preparing to close.</td></tr>
           <tr><td><code>{@link #Window_windowSharedElementEnterTransition android:windowSharedElementEnterTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred into the Window's initial content Scene.</td></tr>
           <tr><td><code>{@link #Window_windowSharedElementExitTransition android:windowSharedElementExitTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used when starting a new Activity to move shared elements prior to transferring
             to the called Activity.</td></tr>
           <tr><td><code>{@link #Window_windowSharedElementReenterTransition android:windowSharedElementReenterTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used for shared elements transferred back to a calling Activity.</td></tr>
           <tr><td><code>{@link #Window_windowSharedElementReturnTransition android:windowSharedElementReturnTransition}</code></td><td> Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred back to a calling Activity.</td></tr>
           <tr><td><code>{@link #Window_windowSharedElementsUseOverlay android:windowSharedElementsUseOverlay}</code></td><td> Indicates whether or not shared elements should use an overlay
             during transitions.</td></tr>
           <tr><td><code>{@link #Window_windowShowWallpaper android:windowShowWallpaper}</code></td><td> Flag indicating that this window's background should be the
             user's current wallpaper.</td></tr>
           <tr><td><code>{@link #Window_windowSoftInputMode android:windowSoftInputMode}</code></td><td> Defines the default soft input state that this window would
             like when it is displayed.</td></tr>
           <tr><td><code>{@link #Window_windowSwipeToDismiss android:windowSwipeToDismiss}</code></td><td> Flag to indicate that a window can be swiped away to be dismissed.</td></tr>
           <tr><td><code>{@link #Window_windowTransitionBackgroundFadeDuration android:windowTransitionBackgroundFadeDuration}</code></td><td> The duration, in milliseconds, of the window background fade duration
             when transitioning into or away from an Activity when called with an
             Activity Transition.</td></tr>
           <tr><td><code>{@link #Window_windowTranslucentNavigation android:windowTranslucentNavigation}</code></td><td> Flag indicating whether this window requests a translucent navigation bar.</td></tr>
           <tr><td><code>{@link #Window_windowTranslucentStatus android:windowTranslucentStatus}</code></td><td> Flag indicating whether this window requests a translucent status bar.</td></tr>
           </table>
           @see #Window_backgroundDimAmount
           @see #Window_backgroundDimEnabled
           @see #Window_navigationBarColor
           @see #Window_statusBarColor
           @see #Window_textColor
           @see #Window_windowActionBar
           @see #Window_windowActionBarFullscreenDecorLayout
           @see #Window_windowActionBarOverlay
           @see #Window_windowActionModeOverlay
           @see #Window_windowActivityTransitions
           @see #Window_windowAllowEnterTransitionOverlap
           @see #Window_windowAllowReturnTransitionOverlap
           @see #Window_windowAnimationStyle
           @see #Window_windowBackground
           @see #Window_windowBackgroundFallback
           @see #Window_windowClipToOutline
           @see #Window_windowCloseOnTouchOutside
           @see #Window_windowContentOverlay
           @see #Window_windowContentTransitionManager
           @see #Window_windowContentTransitions
           @see #Window_windowDisablePreview
           @see #Window_windowDrawsSystemBarBackgrounds
           @see #Window_windowElevation
           @see #Window_windowEnableSplitTouch
           @see #Window_windowEnterTransition
           @see #Window_windowExitTransition
           @see #Window_windowFixedHeightMajor
           @see #Window_windowFixedHeightMinor
           @see #Window_windowFixedWidthMajor
           @see #Window_windowFixedWidthMinor
           @see #Window_windowFrame
           @see #Window_windowFullscreen
           @see #Window_windowIsFloating
           @see #Window_windowIsTranslucent
           @see #Window_windowMinWidthMajor
           @see #Window_windowMinWidthMinor
           @see #Window_windowNoDisplay
           @see #Window_windowNoTitle
           @see #Window_windowOutsetBottom
           @see #Window_windowOverscan
           @see #Window_windowReenterTransition
           @see #Window_windowReturnTransition
           @see #Window_windowSharedElementEnterTransition
           @see #Window_windowSharedElementExitTransition
           @see #Window_windowSharedElementReenterTransition
           @see #Window_windowSharedElementReturnTransition
           @see #Window_windowSharedElementsUseOverlay
           @see #Window_windowShowWallpaper
           @see #Window_windowSoftInputMode
           @see #Window_windowSwipeToDismiss
           @see #Window_windowTransitionBackgroundFadeDuration
           @see #Window_windowTranslucentNavigation
           @see #Window_windowTranslucentStatus
         */
        public: static const int Window[53];
        /**
          <p>
          @attr description
           Default background dim amount when a menu, dialog, or something similar pops up. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundDimAmount}.
          @attr name android:backgroundDimAmount
        */
        public: static const int Window_backgroundDimAmount = 0;
        /**
          <p>
          @attr description
           Control whether dimming behind the window is enabled.  The default
             theme does not set this value, meaning it is based on whether the
             window is floating. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#backgroundDimEnabled}.
          @attr name android:backgroundDimEnabled
        */
        public: static const int Window_backgroundDimEnabled = 11;
        /**
          <p>
          @attr description
           The color for the navigation bar. If the color is not opaque, consider setting
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.
             For this to take effect, the window must be drawing the system bar backgrounds with
             {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
             have been requested to be translucent with
             {@link android.R.attr#windowTranslucentNavigation}.
             Corresponds to {@link android.view.Window#setNavigationBarColor(int)}. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#navigationBarColor}.
          @attr name android:navigationBarColor
        */
        public: static const int Window_navigationBarColor = 38;
        /**
          <p>
          @attr description
           The color for the status bar. If the color is not opaque, consider setting
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.
             For this to take effect, the window must be drawing the system bar backgrounds with
             {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
             have been requested to be translucent with
             {@link android.R.attr#windowTranslucentStatus}.
             Corresponds to {@link android.view.Window#setStatusBarColor(int)}. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#statusBarColor}.
          @attr name android:statusBarColor
        */
        public: static const int Window_statusBarColor = 37;
        /**
          <p>
          @attr description
           Color of text (usually same as colorForeground). 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#textColor}.
          @attr name android:textColor
        */
        public: static const int Window_textColor = 7;
        /**
          <p>
          @attr description
           Flag indicating whether this window should have an Action Bar
             in place of the usual title bar. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowActionBar}.
          @attr name android:windowActionBar
        */
        public: static const int Window_windowActionBar = 15;
        /**
          <p>
          @attr description
           Internal layout used internally for window decor 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:windowActionBarFullscreenDecorLayout
        */
        public: static const int Window_windowActionBarFullscreenDecorLayout = 29;
        /**
          <p>
          @attr description
           Flag indicating whether this window's Action Bar should overlay
             application content. Does nothing if the window would not
             have an Action Bar. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowActionBarOverlay}.
          @attr name android:windowActionBarOverlay
        */
        public: static const int Window_windowActionBarOverlay = 17;
        /**
          <p>
          @attr description
           Flag indicating whether action modes should overlay window content
             when there is not reserved space for their UI (such as an Action Bar). 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowActionModeOverlay}.
          @attr name android:windowActionModeOverlay
        */
        public: static const int Window_windowActionModeOverlay = 16;
        /**
          <p>
          @attr description
           Flag indicating whether this window allows Activity Transitions.
             Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowActivityTransitions}.
          @attr name android:windowActivityTransitions
        */
        public: static const int Window_windowActivityTransitions = 47;
        /**
          <p>
          @attr description
           Flag indicating whether this Window's transition should overlap with
             the exiting transition of the calling Activity. Corresponds to
             {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowAllowEnterTransitionOverlap}.
          @attr name android:windowAllowEnterTransitionOverlap
        */
        public: static const int Window_windowAllowEnterTransitionOverlap = 35;
        /**
          <p>
          @attr description
           Flag indicating whether this Window's transition should overlap with
             the exiting transition of the called Activity when the called Activity
             finishes. Corresponds to
             {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowAllowReturnTransitionOverlap}.
          @attr name android:windowAllowReturnTransitionOverlap
        */
        public: static const int Window_windowAllowReturnTransitionOverlap = 34;
        /**
          <p>
          @attr description
           Reference to a style resource holding
             the set of window animations to use, which can be
             any of the attributes defined by
             {@link android.R.styleable#WindowAnimation}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowAnimationStyle}.
          @attr name android:windowAnimationStyle
        */
        public: static const int Window_windowAnimationStyle = 8;
        /**
          <p>
          @attr description
           Drawable to use as the overall window background.  As of
             {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
             be a selector that uses state_accelerated to pick a non-solid
             color when running on devices that can draw such a bitmap
             with complex compositing on top at 60fps.

             <p>There are a few special considerations to use when setting this
             drawable:
             <ul>
             <li> This information will be used to infer the pixel format
                  for your window's surface.  If the drawable has any
                  non-opaque pixels, your window will be translucent
                  (32 bpp).
             <li> If you want to draw the entire background
                  yourself, you should set this drawable to some solid
                  color that closely matches that background (so the
                  system's preview of your window will match), and
                  then in code manually set your window's background to
                  null so it will not be drawn.
             </ul> 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowBackground}.
          @attr name android:windowBackground
        */
        public: static const int Window_windowBackground = 1;
        /**
          <p>
          @attr description
           Drawable to draw selectively within the inset areas when the windowBackground
             has been set to null. This protects against seeing visual garbage in the
             surface when the app has not drawn any content into this area. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:windowBackgroundFallback
        */
        public: static const int Window_windowBackgroundFallback = 28;
        /**
          <p>
          @attr description
           Whether to clip window content to the outline of the window background. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowClipToOutline}.
          @attr name android:windowClipToOutline
        */
        public: static const int Window_windowClipToOutline = 41;
        /**
          <p>
          @attr description
           Control whether a container should automatically close itself if
             the user touches outside of it.  This only applies to activities
             and dialogs.

             <p>Note: this attribute will only be respected for applications
             that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
             or later. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowCloseOnTouchOutside}.
          @attr name android:windowCloseOnTouchOutside
        */
        public: static const int Window_windowCloseOnTouchOutside = 21;
        /**
          <p>
          @attr description
           This Drawable is overlaid over the foreground of the Window's content area, usually
             to place a shadow below the title.  


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowContentOverlay}.
          @attr name android:windowContentOverlay
        */
        public: static const int Window_windowContentOverlay = 6;
        /**
          <p>
          @attr description
           Reference to a TransitionManager XML resource defining the desired
             transitions between different window content. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowContentTransitionManager}.
          @attr name android:windowContentTransitionManager
        */
        public: static const int Window_windowContentTransitionManager = 27;
        /**
          <p>
          @attr description
           Flag indicating whether this window requests that content changes be performed
             as scene changes with transitions. Corresponds to
             {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowContentTransitions}.
          @attr name android:windowContentTransitions
        */
        public: static const int Window_windowContentTransitions = 26;
        /**
          <p>
          @attr description
           Flag allowing you to disable the preview animation for a window.
             The default value is false; if set to true, the system can never
             use the window's theme to show a preview of it before your
             actual instance is shown to the user. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowDisablePreview}.
          @attr name android:windowDisablePreview
        */
        public: static const int Window_windowDisablePreview = 12;
        /**
          <p>
          @attr description
           Flag indicating whether this Window is responsible for drawing the background for the
             system bars. If true and the window is not floating, the system bars are drawn with a
             transparent background and the corresponding areas in this window are filled with the
             colors specified in {@link android.R.attr#statusBarColor} and
             {@link android.R.attr#navigationBarColor}. Corresponds to
             {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowDrawsSystemBarBackgrounds}.
          @attr name android:windowDrawsSystemBarBackgrounds
        */
        public: static const int Window_windowDrawsSystemBarBackgrounds = 36;
        /**
          <p>
          @attr description
           Elevation to use for the window. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowElevation}.
          @attr name android:windowElevation
        */
        public: static const int Window_windowElevation = 40;
        /**
          <p>
          @attr description
           Flag indicating that this window should allow touches to be split
             across other windows that also support split touch.
             The default value is true for applications with a targetSdkVersion
             of Honeycomb or newer; false otherwise.
             When this flag is false, the first pointer that goes down determines
             the window to which all subsequent touches go until all pointers go up.
             When this flag is true, each pointer (not necessarily the first) that
             goes down determines the window to which all subsequent touches of that
             pointer will go until that pointers go up thereby enabling touches
             with multiple pointers to be split across multiple windows. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowEnableSplitTouch}.
          @attr name android:windowEnableSplitTouch
        */
        public: static const int Window_windowEnableSplitTouch = 18;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move Views into the initial Window's content Scene. Corresponds to
             {@link android.view.Window#setEnterTransition(android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowEnterTransition}.
          @attr name android:windowEnterTransition
        */
        public: static const int Window_windowEnterTransition = 30;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the Window's content Scene when launching a new Activity.
             Corresponds to
             {@link android.view.Window#setExitTransition(android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowExitTransition}.
          @attr name android:windowExitTransition
        */
        public: static const int Window_windowExitTransition = 31;
        /**
          <p>
          @attr description
           A fixed height for the window along the major axis of the screen,
             that is, when in portrait. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:windowFixedHeightMajor
        */
        public: static const int Window_windowFixedHeightMajor = 51;
        /**
          <p>
          @attr description
           A fixed height for the window along the minor axis of the screen,
             that is, when in landscape. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:windowFixedHeightMinor
        */
        public: static const int Window_windowFixedHeightMinor = 49;
        /**
          <p>
          @attr description
           A fixed width for the window along the major axis of the screen,
             that is, when in landscape. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:windowFixedWidthMajor
        */
        public: static const int Window_windowFixedWidthMajor = 48;
        /**
          <p>
          @attr description
           A fixed width for the window along the minor axis of the screen,
             that is, when in portrait. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:windowFixedWidthMinor
        */
        public: static const int Window_windowFixedWidthMinor = 50;
        /**
          <p>
          @attr description
           Drawable to use as a frame around the window. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowFrame}.
          @attr name android:windowFrame
        */
        public: static const int Window_windowFrame = 2;
        /**
          <p>
          @attr description
           Flag indicating whether this window should fill the entire screen.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowFullscreen}.
          @attr name android:windowFullscreen
        */
        public: static const int Window_windowFullscreen = 9;
        /**
          <p>
          @attr description
           Flag indicating whether this is a floating window. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowIsFloating}.
          @attr name android:windowIsFloating
        */
        public: static const int Window_windowIsFloating = 4;
        /**
          <p>
          @attr description
           Flag indicating whether this is a translucent window. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowIsTranslucent}.
          @attr name android:windowIsTranslucent
        */
        public: static const int Window_windowIsTranslucent = 5;
        /**
          <p>
          @attr description
           The minimum width the window is allowed to be, along the major
             axis of the screen.  That is, when in landscape.  Can be either
             an absolute dimension or a fraction of the screen size in that
             dimension. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowMinWidthMajor}.
          @attr name android:windowMinWidthMajor
        */
        public: static const int Window_windowMinWidthMajor = 19;
        /**
          <p>
          @attr description
           The minimum width the window is allowed to be, along the minor
             axis of the screen.  That is, when in portrait.  Can be either
             an absolute dimension or a fraction of the screen size in that
             dimension. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowMinWidthMinor}.
          @attr name android:windowMinWidthMinor
        */
        public: static const int Window_windowMinWidthMinor = 20;
        /**
          <p>
          @attr description
           Flag indicating that this window should not be displayed at all.
             The default value is false; if set to true, and this window is
             the main window of an Activity, then it will never actually
             be added to the window manager.  This means that your activity
             must immediately quit without waiting for user interaction,
             because there will be no such interaction coming. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowNoDisplay}.
          @attr name android:windowNoDisplay
        */
        public: static const int Window_windowNoDisplay = 10;
        /**
          <p>
          @attr description
           Flag indicating whether there should be no title on this window. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowNoTitle}.
          @attr name android:windowNoTitle
        */
        public: static const int Window_windowNoTitle = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.internal.R.attr#windowOutsetBottom}
          attribute's value can be found in the {@link #Window} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:windowOutsetBottom
        */
        public: static const int Window_windowOutsetBottom = 52;
        /**
          <p>
          @attr description
           Flag indicating whether this window should extend into overscan region.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowOverscan}.
          @attr name android:windowOverscan
        */
        public: static const int Window_windowOverscan = 22;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move Views in to the scene when returning from a previously-started Activity.
             Corresponds to
             {@link android.view.Window#setReenterTransition(android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowReenterTransition}.
          @attr name android:windowReenterTransition
        */
        public: static const int Window_windowReenterTransition = 43;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the scene when the Window is
             preparing to close. Corresponds to
             {@link android.view.Window#setReturnTransition(android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowReturnTransition}.
          @attr name android:windowReturnTransition
        */
        public: static const int Window_windowReturnTransition = 42;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred into the Window's initial content Scene.
             Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
             android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSharedElementEnterTransition}.
          @attr name android:windowSharedElementEnterTransition
        */
        public: static const int Window_windowSharedElementEnterTransition = 32;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used when starting a new Activity to move shared elements prior to transferring
             to the called Activity.
             Corresponds to {@link android.view.Window#setSharedElementExitTransition(
             android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSharedElementExitTransition}.
          @attr name android:windowSharedElementExitTransition
        */
        public: static const int Window_windowSharedElementExitTransition = 33;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used for shared elements transferred back to a calling Activity.
             Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
             android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSharedElementReenterTransition}.
          @attr name android:windowSharedElementReenterTransition
        */
        public: static const int Window_windowSharedElementReenterTransition = 45;
        /**
          <p>
          @attr description
           Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred back to a calling Activity.
             Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
             android.transition.Transition)}. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSharedElementReturnTransition}.
          @attr name android:windowSharedElementReturnTransition
        */
        public: static const int Window_windowSharedElementReturnTransition = 44;
        /**
          <p>
          @attr description
           Indicates whether or not shared elements should use an overlay
             during transitions. The default value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSharedElementsUseOverlay}.
          @attr name android:windowSharedElementsUseOverlay
        */
        public: static const int Window_windowSharedElementsUseOverlay = 46;
        /**
          <p>
          @attr description
           Flag indicating that this window's background should be the
             user's current wallpaper.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowShowWallpaper}.
          @attr name android:windowShowWallpaper
        */
        public: static const int Window_windowShowWallpaper = 14;
        /**
          <p>
          @attr description
           Defines the default soft input state that this window would
             like when it is displayed.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#softInputMode}. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>stateUnspecified</code></td><td>0</td><td> Not specified, use what the system thinks is best.  This
                 is the default. </td></tr>
<tr><td><code>stateUnchanged</code></td><td>1</td><td> Leave the soft input window as-is, in whatever state it
                 last was. </td></tr>
<tr><td><code>stateHidden</code></td><td>2</td><td> Make the soft input area hidden when normally appropriate
                 (when the user is navigating forward to your window). </td></tr>
<tr><td><code>stateAlwaysHidden</code></td><td>3</td><td> Always make the soft input area hidden when this window
                 has input focus. </td></tr>
<tr><td><code>stateVisible</code></td><td>4</td><td> Make the soft input area visible when normally appropriate
                 (when the user is navigating forward to your window). </td></tr>
<tr><td><code>stateAlwaysVisible</code></td><td>5</td><td> Always make the soft input area visible when this window
                 has input focus. </td></tr>
<tr><td><code>adjustUnspecified</code></td><td>0x00</td><td> The window resize/pan adjustment has not been specified,
                 the system will automatically select between resize and pan
                 modes, depending
                 on whether the content of the window has any layout views
                 that can scroll their contents.  If there is such a view,
                 then the window will be resized, with the assumption being
                 that the resizeable area can be reduced to make room for
                 the input UI. </td></tr>
<tr><td><code>adjustResize</code></td><td>0x10</td><td> Always resize the window: the content area of the window is
                 reduced to make room for the soft input area. </td></tr>
<tr><td><code>adjustPan</code></td><td>0x20</td><td> Don't resize the window to make room for the soft input area;
                 instead pan the contents of the window as focus moves inside
                 of it so that the user can see what they are typing.  This is
                 generally less desireable than panning because the user may
                 need to close the input area to get at and interact with
                 parts of the window. </td></tr>
<tr><td><code>adjustNothing</code></td><td>0x30</td><td> Don't resize <em>or</em> pan the window to make room for the
                 soft input area; the window is never adjusted for it. </td></tr>
</table>
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSoftInputMode}.
          @attr name android:windowSoftInputMode
        */
        public: static const int Window_windowSoftInputMode = 13;
        /**
          <p>
          @attr description
           Flag to indicate that a window can be swiped away to be dismissed.
             Corresponds to {@link android.view.Window#FEATURE_SWIPE_TO_DISMISS} 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowSwipeToDismiss}.
          @attr name android:windowSwipeToDismiss
        */
        public: static const int Window_windowSwipeToDismiss = 25;
        /**
          <p>
          @attr description
           The duration, in milliseconds, of the window background fade duration
             when transitioning into or away from an Activity when called with an
             Activity Transition. Corresponds to
             {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowTransitionBackgroundFadeDuration}.
          @attr name android:windowTransitionBackgroundFadeDuration
        */
        public: static const int Window_windowTransitionBackgroundFadeDuration = 39;
        /**
          <p>
          @attr description
           Flag indicating whether this window requests a translucent navigation bar.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowTranslucentNavigation}.
          @attr name android:windowTranslucentNavigation
        */
        public: static const int Window_windowTranslucentNavigation = 24;
        /**
          <p>
          @attr description
           Flag indicating whether this window requests a translucent status bar.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowTranslucentStatus}.
          @attr name android:windowTranslucentStatus
        */
        public: static const int Window_windowTranslucentStatus = 23;
        /**  Window animation class attributes. 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #WindowAnimation_activityCloseEnterAnimation android:activityCloseEnterAnimation}</code></td><td>  When closing the current activity, this is the animation that is
              run on the next activity (which is entering the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_activityCloseExitAnimation android:activityCloseExitAnimation}</code></td><td>  When closing the current activity, this is the animation that is
              run on the current activity (which is exiting the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_activityOpenEnterAnimation android:activityOpenEnterAnimation}</code></td><td>  When opening a new activity, this is the animation that is
              run on the next activity (which is entering the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_activityOpenExitAnimation android:activityOpenExitAnimation}</code></td><td>  When opening a new activity, this is the animation that is
              run on the previous activity (which is exiting the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_launchTaskBehindSourceAnimation android:launchTaskBehindSourceAnimation}</code></td><td>  When opening an activity in a new task using Intent.</td></tr>
           <tr><td><code>{@link #WindowAnimation_launchTaskBehindTargetAnimation android:launchTaskBehindTargetAnimation}</code></td><td>  When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
              this is the animation that is run on the activity of the new task (which is
              entering the screen and then leaving).</td></tr>
           <tr><td><code>{@link #WindowAnimation_taskCloseEnterAnimation android:taskCloseEnterAnimation}</code></td><td>  When closing the last activity of a task, this is the animation that is
              run on the activity of the next task (which is entering the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_taskCloseExitAnimation android:taskCloseExitAnimation}</code></td><td>  When opening an activity in a new task, this is the animation that is
              run on the activity of the old task (which is exiting the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_taskOpenEnterAnimation android:taskOpenEnterAnimation}</code></td><td>  When opening an activity in a new task, this is the animation that is
              run on the activity of the new task (which is entering the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_taskOpenExitAnimation android:taskOpenExitAnimation}</code></td><td>  When opening an activity in a new task, this is the animation that is
              run on the activity of the old task (which is exiting the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_taskToBackEnterAnimation android:taskToBackEnterAnimation}</code></td><td>  When sending the current task to the background, this is the
              animation that is run on the top activity of the task behind
              it (which is entering the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_taskToBackExitAnimation android:taskToBackExitAnimation}</code></td><td>  When sending the current task to the background, this is the
              animation that is run on the top activity of the current task
              (which is exiting the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_taskToFrontEnterAnimation android:taskToFrontEnterAnimation}</code></td><td>  When bringing an existing task to the foreground, this is the
              animation that is run on the top activity of the task being brought
              to the foreground (which is entering the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_taskToFrontExitAnimation android:taskToFrontExitAnimation}</code></td><td>  When bringing an existing task to the foreground, this is the
              animation that is run on the current foreground activity
              (which is exiting the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_wallpaperCloseEnterAnimation android:wallpaperCloseEnterAnimation}</code></td><td>  When opening a new activity that hides the wallpaper, while
              currently showing the wallpaper, this is the animation that
              is run on the new activity (which is entering the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_wallpaperCloseExitAnimation android:wallpaperCloseExitAnimation}</code></td><td>  When opening a new activity that hides the wallpaper, while
              currently showing the wallpaper, this is the animation that
              is run on the old wallpaper activity (which is exiting the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_wallpaperIntraCloseEnterAnimation android:wallpaperIntraCloseEnterAnimation}</code></td><td>  When closing a foreround activity that is on top of the wallpaper
              when the previous activity is also on top of the wallpaper,
              this is the animation that is run on the previous activity
              (which is entering the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_wallpaperIntraCloseExitAnimation android:wallpaperIntraCloseExitAnimation}</code></td><td>  When closing a foreround activity that is on top of the wallpaper
              when the previous activity is also on top of the wallpaper,
              this is the animation that is run on the current activity
              (which is exiting the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_wallpaperIntraOpenEnterAnimation android:wallpaperIntraOpenEnterAnimation}</code></td><td>  When opening a new activity that is on top of the wallpaper
              when the current activity is also on top of the wallpaper,
              this is the animation that is run on the new activity
              (which is entering the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_wallpaperIntraOpenExitAnimation android:wallpaperIntraOpenExitAnimation}</code></td><td>  When opening a new activity that is on top of the wallpaper
              when the current activity is also on top of the wallpaper,
              this is the animation that is run on the current activity
              (which is exiting the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_wallpaperOpenEnterAnimation android:wallpaperOpenEnterAnimation}</code></td><td>  When opening a new activity that shows the wallpaper, while
              currently not showing the wallpaper, this is the animation that
              is run on the new wallpaper activity (which is entering the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_wallpaperOpenExitAnimation android:wallpaperOpenExitAnimation}</code></td><td>  When opening a new activity that shows the wallpaper, while
              currently not showing the wallpaper, this is the animation that
              is run on the current activity (which is exiting the screen).</td></tr>
           <tr><td><code>{@link #WindowAnimation_windowEnterAnimation android:windowEnterAnimation}</code></td><td> The animation used when a window is being added.</td></tr>
           <tr><td><code>{@link #WindowAnimation_windowExitAnimation android:windowExitAnimation}</code></td><td> The animation used when a window is being removed.</td></tr>
           <tr><td><code>{@link #WindowAnimation_windowHideAnimation android:windowHideAnimation}</code></td><td> The animation used when a window is going from VISIBLE to INVISIBLE.</td></tr>
           <tr><td><code>{@link #WindowAnimation_windowShowAnimation android:windowShowAnimation}</code></td><td> The animation used when a window is going from INVISIBLE to VISIBLE.</td></tr>
           </table>
           @see #WindowAnimation_activityCloseEnterAnimation
           @see #WindowAnimation_activityCloseExitAnimation
           @see #WindowAnimation_activityOpenEnterAnimation
           @see #WindowAnimation_activityOpenExitAnimation
           @see #WindowAnimation_launchTaskBehindSourceAnimation
           @see #WindowAnimation_launchTaskBehindTargetAnimation
           @see #WindowAnimation_taskCloseEnterAnimation
           @see #WindowAnimation_taskCloseExitAnimation
           @see #WindowAnimation_taskOpenEnterAnimation
           @see #WindowAnimation_taskOpenExitAnimation
           @see #WindowAnimation_taskToBackEnterAnimation
           @see #WindowAnimation_taskToBackExitAnimation
           @see #WindowAnimation_taskToFrontEnterAnimation
           @see #WindowAnimation_taskToFrontExitAnimation
           @see #WindowAnimation_wallpaperCloseEnterAnimation
           @see #WindowAnimation_wallpaperCloseExitAnimation
           @see #WindowAnimation_wallpaperIntraCloseEnterAnimation
           @see #WindowAnimation_wallpaperIntraCloseExitAnimation
           @see #WindowAnimation_wallpaperIntraOpenEnterAnimation
           @see #WindowAnimation_wallpaperIntraOpenExitAnimation
           @see #WindowAnimation_wallpaperOpenEnterAnimation
           @see #WindowAnimation_wallpaperOpenExitAnimation
           @see #WindowAnimation_windowEnterAnimation
           @see #WindowAnimation_windowExitAnimation
           @see #WindowAnimation_windowHideAnimation
           @see #WindowAnimation_windowShowAnimation
         */
        public: static const int WindowAnimation[26];
        /**
          <p>
          @attr description
            When closing the current activity, this is the animation that is
              run on the next activity (which is entering the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#activityCloseEnterAnimation}.
          @attr name android:activityCloseEnterAnimation
        */
        public: static const int WindowAnimation_activityCloseEnterAnimation = 6;
        /**
          <p>
          @attr description
            When closing the current activity, this is the animation that is
              run on the current activity (which is exiting the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#activityCloseExitAnimation}.
          @attr name android:activityCloseExitAnimation
        */
        public: static const int WindowAnimation_activityCloseExitAnimation = 7;
        /**
          <p>
          @attr description
            When opening a new activity, this is the animation that is
              run on the next activity (which is entering the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#activityOpenEnterAnimation}.
          @attr name android:activityOpenEnterAnimation
        */
        public: static const int WindowAnimation_activityOpenEnterAnimation = 4;
        /**
          <p>
          @attr description
            When opening a new activity, this is the animation that is
              run on the previous activity (which is exiting the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#activityOpenExitAnimation}.
          @attr name android:activityOpenExitAnimation
        */
        public: static const int WindowAnimation_activityOpenExitAnimation = 5;
        /**
          <p>
          @attr description
            When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
              this is the animation that is run on the activity of the old task (which is
              already on the screen and then stays on). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#launchTaskBehindSourceAnimation}.
          @attr name android:launchTaskBehindSourceAnimation
        */
        public: static const int WindowAnimation_launchTaskBehindSourceAnimation = 25;
        /**
          <p>
          @attr description
            When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
              this is the animation that is run on the activity of the new task (which is
              entering the screen and then leaving). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#launchTaskBehindTargetAnimation}.
          @attr name android:launchTaskBehindTargetAnimation
        */
        public: static const int WindowAnimation_launchTaskBehindTargetAnimation = 24;
        /**
          <p>
          @attr description
            When closing the last activity of a task, this is the animation that is
              run on the activity of the next task (which is entering the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#taskCloseEnterAnimation}.
          @attr name android:taskCloseEnterAnimation
        */
        public: static const int WindowAnimation_taskCloseEnterAnimation = 10;
        /**
          <p>
          @attr description
            When opening an activity in a new task, this is the animation that is
              run on the activity of the old task (which is exiting the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#taskCloseExitAnimation}.
          @attr name android:taskCloseExitAnimation
        */
        public: static const int WindowAnimation_taskCloseExitAnimation = 11;
        /**
          <p>
          @attr description
            When opening an activity in a new task, this is the animation that is
              run on the activity of the new task (which is entering the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#taskOpenEnterAnimation}.
          @attr name android:taskOpenEnterAnimation
        */
        public: static const int WindowAnimation_taskOpenEnterAnimation = 8;
        /**
          <p>
          @attr description
            When opening an activity in a new task, this is the animation that is
              run on the activity of the old task (which is exiting the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#taskOpenExitAnimation}.
          @attr name android:taskOpenExitAnimation
        */
        public: static const int WindowAnimation_taskOpenExitAnimation = 9;
        /**
          <p>
          @attr description
            When sending the current task to the background, this is the
              animation that is run on the top activity of the task behind
              it (which is entering the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#taskToBackEnterAnimation}.
          @attr name android:taskToBackEnterAnimation
        */
        public: static const int WindowAnimation_taskToBackEnterAnimation = 14;
        /**
          <p>
          @attr description
            When sending the current task to the background, this is the
              animation that is run on the top activity of the current task
              (which is exiting the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#taskToBackExitAnimation}.
          @attr name android:taskToBackExitAnimation
        */
        public: static const int WindowAnimation_taskToBackExitAnimation = 15;
        /**
          <p>
          @attr description
            When bringing an existing task to the foreground, this is the
              animation that is run on the top activity of the task being brought
              to the foreground (which is entering the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#taskToFrontEnterAnimation}.
          @attr name android:taskToFrontEnterAnimation
        */
        public: static const int WindowAnimation_taskToFrontEnterAnimation = 12;
        /**
          <p>
          @attr description
            When bringing an existing task to the foreground, this is the
              animation that is run on the current foreground activity
              (which is exiting the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#taskToFrontExitAnimation}.
          @attr name android:taskToFrontExitAnimation
        */
        public: static const int WindowAnimation_taskToFrontExitAnimation = 13;
        /**
          <p>
          @attr description
            When opening a new activity that hides the wallpaper, while
              currently showing the wallpaper, this is the animation that
              is run on the new activity (which is entering the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#wallpaperCloseEnterAnimation}.
          @attr name android:wallpaperCloseEnterAnimation
        */
        public: static const int WindowAnimation_wallpaperCloseEnterAnimation = 18;
        /**
          <p>
          @attr description
            When opening a new activity that hides the wallpaper, while
              currently showing the wallpaper, this is the animation that
              is run on the old wallpaper activity (which is exiting the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#wallpaperCloseExitAnimation}.
          @attr name android:wallpaperCloseExitAnimation
        */
        public: static const int WindowAnimation_wallpaperCloseExitAnimation = 19;
        /**
          <p>
          @attr description
            When closing a foreround activity that is on top of the wallpaper
              when the previous activity is also on top of the wallpaper,
              this is the animation that is run on the previous activity
              (which is entering the screen).  The wallpaper remains
              static behind the animation. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#wallpaperIntraCloseEnterAnimation}.
          @attr name android:wallpaperIntraCloseEnterAnimation
        */
        public: static const int WindowAnimation_wallpaperIntraCloseEnterAnimation = 22;
        /**
          <p>
          @attr description
            When closing a foreround activity that is on top of the wallpaper
              when the previous activity is also on top of the wallpaper,
              this is the animation that is run on the current activity
              (which is exiting the screen).  The wallpaper remains
              static behind the animation. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#wallpaperIntraCloseExitAnimation}.
          @attr name android:wallpaperIntraCloseExitAnimation
        */
        public: static const int WindowAnimation_wallpaperIntraCloseExitAnimation = 23;
        /**
          <p>
          @attr description
            When opening a new activity that is on top of the wallpaper
              when the current activity is also on top of the wallpaper,
              this is the animation that is run on the new activity
              (which is entering the screen).  The wallpaper remains
              static behind the animation. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#wallpaperIntraOpenEnterAnimation}.
          @attr name android:wallpaperIntraOpenEnterAnimation
        */
        public: static const int WindowAnimation_wallpaperIntraOpenEnterAnimation = 20;
        /**
          <p>
          @attr description
            When opening a new activity that is on top of the wallpaper
              when the current activity is also on top of the wallpaper,
              this is the animation that is run on the current activity
              (which is exiting the screen).  The wallpaper remains
              static behind the animation. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#wallpaperIntraOpenExitAnimation}.
          @attr name android:wallpaperIntraOpenExitAnimation
        */
        public: static const int WindowAnimation_wallpaperIntraOpenExitAnimation = 21;
        /**
          <p>
          @attr description
            When opening a new activity that shows the wallpaper, while
              currently not showing the wallpaper, this is the animation that
              is run on the new wallpaper activity (which is entering the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#wallpaperOpenEnterAnimation}.
          @attr name android:wallpaperOpenEnterAnimation
        */
        public: static const int WindowAnimation_wallpaperOpenEnterAnimation = 16;
        /**
          <p>
          @attr description
            When opening a new activity that shows the wallpaper, while
              currently not showing the wallpaper, this is the animation that
              is run on the current activity (which is exiting the screen). 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#wallpaperOpenExitAnimation}.
          @attr name android:wallpaperOpenExitAnimation
        */
        public: static const int WindowAnimation_wallpaperOpenExitAnimation = 17;
        /**
          <p>
          @attr description
           The animation used when a window is being added. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowEnterAnimation}.
          @attr name android:windowEnterAnimation
        */
        public: static const int WindowAnimation_windowEnterAnimation = 0;
        /**
          <p>
          @attr description
           The animation used when a window is being removed. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowExitAnimation}.
          @attr name android:windowExitAnimation
        */
        public: static const int WindowAnimation_windowExitAnimation = 1;
        /**
          <p>
          @attr description
           The animation used when a window is going from VISIBLE to INVISIBLE. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowHideAnimation}.
          @attr name android:windowHideAnimation
        */
        public: static const int WindowAnimation_windowHideAnimation = 3;
        /**
          <p>
          @attr description
           The animation used when a window is going from INVISIBLE to VISIBLE. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This corresponds to the global attribute          resource symbol {@link android.R.attr#windowShowAnimation}.
          @attr name android:windowShowAnimation
        */
        public: static const int WindowAnimation_windowShowAnimation = 2;
    };
};
};
};

#endif // __Elastos_Droid_R_H__
