//This file is autogenerated for
//    SurfaceTexturePlatformWrapper.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_SURFACETEXTUREPLATFORMWRAPPER_CALLBACK_DEC_HH
#define ELASTOS_SURFACETEXTUREPLATFORMWRAPPER_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_SurfaceTexturePlatformWrapper_InitCallback(Handle32 cb);
#ifdef __cplusplus
}
#endif

namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Ui {
namespace Gl {

struct ElaSurfaceTexturePlatformWrapperCallback
{
    AutoPtr<IInterface> (*elastos_SurfaceTexturePlatformWrapper_create)(Int32 textureId);
    AutoPtr<IInterface> (*elastos_SurfaceTexturePlatformWrapper_createSingleBuffered)(Int32 textureId);
    void (*elastos_SurfaceTexturePlatformWrapper_destroy)(IInterface* surfaceTexture);
    void (*elastos_SurfaceTexturePlatformWrapper_setFrameAvailableCallback)(IInterface* surfaceTexture, Int64 nativeSurfaceTextureListener);
    void (*elastos_SurfaceTexturePlatformWrapper_updateTexImage)(IInterface* surfaceTexture);
    void (*elastos_SurfaceTexturePlatformWrapper_releaseTexImage)(IInterface* surfaceTexture);
    void (*elastos_SurfaceTexturePlatformWrapper_setDefaultBufferSize)(IInterface* surfaceTexture, Int32 width, Int32 height);
    void (*elastos_SurfaceTexturePlatformWrapper_getTransformMatrix)(IInterface* surfaceTexture, ArrayOf<Float>* matrix);
    void (*elastos_SurfaceTexturePlatformWrapper_attachToGLContext)(IInterface* surfaceTexture, Int32 texName);
    void (*elastos_SurfaceTexturePlatformWrapper_detachFromGLContext)(IInterface* surfaceTexture);
};

void* SurfaceTexturePlatformWrapper::ElaSurfaceTexturePlatformWrapperCallback_Init()
{
    static ElaSurfaceTexturePlatformWrapperCallback sElaSurfaceTexturePlatformWrapperCallback;

    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_create = &SurfaceTexturePlatformWrapper::Create;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_createSingleBuffered = &SurfaceTexturePlatformWrapper::CreateSingleBuffered;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_destroy = &SurfaceTexturePlatformWrapper::Destroy;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_setFrameAvailableCallback = &SurfaceTexturePlatformWrapper::SetFrameAvailableCallback;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_updateTexImage = &SurfaceTexturePlatformWrapper::UpdateTexImage;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_releaseTexImage = &SurfaceTexturePlatformWrapper::ReleaseTexImage;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_setDefaultBufferSize = &SurfaceTexturePlatformWrapper::SetDefaultBufferSize;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_getTransformMatrix = &SurfaceTexturePlatformWrapper::GetTransformMatrix;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_attachToGLContext = &SurfaceTexturePlatformWrapper::AttachToGLContext;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_detachFromGLContext = &SurfaceTexturePlatformWrapper::DetachFromGLContext;

    Elastos_SurfaceTexturePlatformWrapper_InitCallback((Handle32)&sElaSurfaceTexturePlatformWrapperCallback);
    return &sElaSurfaceTexturePlatformWrapperCallback;
}

static void* sPElaSurfaceTexturePlatformWrapperCallback = SurfaceTexturePlatformWrapper::ElaSurfaceTexturePlatformWrapperCallback_Init();

} // namespace Gl
} // namespace Ui
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_SURFACETEXTUREPLATFORMWRAPPER_CALLBACK_DEC_HH
