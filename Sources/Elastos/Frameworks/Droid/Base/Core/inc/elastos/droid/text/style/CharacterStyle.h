#ifndef __ELASTOS_DROID_TEXT_STYLE_CHARACTERSTYLE_H__
#define __ELASTOS_DROID_TEXT_STYLE_CHARACTERSTYLE_H__

#include "Elastos/droid/ext/frameworkext.h"
#include <elastos/core/Object.h>

namespace Elastos {
namespace Droid {
namespace Text {
namespace Style {

/**
 * The classes that affect character-level text formatting extend this
 * class.  Most extend its subclass {@link MetricAffectingSpan}, but simple
 * ones may just implement {@link UpdateAppearance}.
 */
//public abstract
class CharacterStyle
    : public Object
    , public ICharacterStyle
{
public:
    CharacterStyle() {}

    virtual ~CharacterStyle() {}

    virtual CARAPI UpdateDrawState(
        /* [in] */ ITextPaint* tp) = 0;

    /**
     * A given CharacterStyle can only applied to a single region of a given
     * Spanned.  If you need to attach the same CharacterStyle to multiple
     * regions, you can use this method to wrap it with a new object that
     * will have the same effect but be a distinct object so that it can
     * also be attached without conflict.
     */
    static CARAPI_(AutoPtr<ICharacterStyle>) Wrap(
        /* [in] */ ICharacterStyle* cs);

    /**
     * Returns "this" for most CharacterStyles, but for CharacterStyles
     * that were generated by {@link #wrap}, returns the underlying
     * CharacterStyle.
     */
    CARAPI GetUnderlying(
        /* [out] */ ICharacterStyle** style);
};

/**
 * A Passthrough CharacterStyle is one that
 * passes {@link #updateDrawState} calls through to the
 * specified CharacterStyle while still being a distinct object,
 * and is therefore able to be attached to the same Spannable
 * to which the specified CharacterStyle is already attached.
 */
//static
class Passthrough
    :  CharacterStyle
{
public:
    /**
     * Creates a new Passthrough of the specfied CharacterStyle.
     */
    Passthrough(
        /* [in] */ ICharacterStyle* cs);

    /**
     * Passes updateDrawState through to the underlying CharacterStyle.
     */
    //@Override
    CARAPI UpdateDrawState(
        /* [in] */ ITextPaint* tp);

    /**
     * Returns the CharacterStyle underlying this one, or the one
     * underlying it if it too is a Passthrough.
     */
    //@Override
    CARAPI GetUnderlying(
        /* [out] */ ICharacterStyle** result);

private:
    AutoPtr<ICharacterStyle> mStyle;

};


} // namespace Style
} // namespace Text
} // namepsace Droid
} // namespace Elastos

#endif // __ELASTOS_DROID_TEXT_STYLE_CHARACTERSTYLE_H__
