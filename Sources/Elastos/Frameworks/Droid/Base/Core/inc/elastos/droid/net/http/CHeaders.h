
#ifndef __ELASTOS_DROID_NET_HTTP_CHEADERS_H__
#define __ELASTOS_DROID_NET_HTTP_CHEADERS_H__

#include "_Elastos_Droid_Net_Http_CHeaders.h"
#include "elastos/droid/ext/frameworkext.h"
#include <elastos/utility/etl/List.h>

using namespace Elastos::Core;
using namespace Elastos::Utility;

namespace Elastos {
namespace Droid {
namespace Net {
namespace Http {

/**
 * Manages received headers
 *
 * {@hide}
 */
CarClass(CHeaders)
{
public:
    CHeaders();

    ~CHeaders();

    CARAPI constructor();

    CARAPI ParseHeader(
        /* [in] */ Org::Apache::Http::Util::ICharArrayBuffer* buffer);

    CARAPI GetTransferEncoding(
        /* [out] */ Int64* encoding);

    CARAPI GetContentLength(
        /* [out] */ Int64* length);

    CARAPI GetConnectionType(
        /* [out] */ Int32* type);

    CARAPI GetContentType(
        /* [out] */ String* type);

    CARAPI GetContentEncoding(
        /* [out] */ String* encoding);

    CARAPI GetLocation(
        /* [out] */ String* location);

    CARAPI GetWwwAuthenticate(
        /* [out] */ String* authenticate);

    CARAPI GetProxyAuthenticate(
        /* [out] */ String* authenticate);

    CARAPI GetContentDisposition(
        /* [out] */ String* disposition);

    CARAPI GetAcceptRanges(
        /* [out] */ String* ranges);

    CARAPI GetExpires(
        /* [out] */ String* expires);

    CARAPI GetCacheControl(
        /* [out] */ String* control);

    CARAPI GetLastModified(
        /* [out] */ String* modified);

    CARAPI GetEtag(
        /* [out] */ String* etag);

    CARAPI GetSetCookie(
        /* [out] */ IObjectContainer** cookie);

    CARAPI GetPragma(
        /* [out] */ String* sPragma);

    CARAPI GetRefresh(
        /* [out] */ String* refresh);

    CARAPI GetXPermittedCrossDomainPolicies(
        /* [out] */ String* policies);

    CARAPI SetContentLength(
        /* [in] */ Int64 length);

    CARAPI SetContentType(
        /* [in] */ const String& type);

    CARAPI SetContentEncoding(
        /* [in] */ const String& encoding);

    CARAPI SetLocation(
        /* [in] */ const String& location);

    CARAPI SetWwwAuthenticate(
        /* [in] */ const String& authenticate);

    CARAPI SetProxyAuthenticate(
        /* [in] */ const String& authenticate);

    CARAPI SetContentDisposition(
        /* [in] */ const String& disposition);

    CARAPI SetAcceptRanges(
        /* [in] */ const String& ranges);

    CARAPI SetExpires(
        /* [in] */ const String& expires);

    CARAPI SetCacheControl(
        /* [in] */ const String& control);

    CARAPI SetLastModified(
        /* [in] */ const String& modified);

    CARAPI SetEtag(
        /* [in] */ const String& etage);

    CARAPI SetXPermittedCrossDomainPolicies(
        /* [in] */ const String& policies);

    /**
     * Reports all non-null headers to the callback
     */
    CARAPI GetHeaders(
        /* [out] */ IHeaderCallback** hcb);

private:
    static AutoPtr<ArrayOf<String> > InitHeaderNames();

    CARAPI SetConnectionType(
        /* [in] */ Org::Apache::Http::Util::ICharArrayBuffer* buffer,
        /* [in] */ Int32 pos);

private:
    static const String LOGTAG;

    // following hash are generated by String.hashCode()
    static const Int32 HASH_TRANSFER_ENCODING;
    static const Int32 HASH_CONTENT_LEN;
    static const Int32 HASH_CONTENT_TYPE;
    static const Int32 HASH_CONTENT_ENCODING;
    static const Int32 HASH_CONN_DIRECTIVE;
    static const Int32 HASH_LOCATION;
    static const Int32 HASH_PROXY_CONNECTION;
    static const Int32 HASH_WWW_AUTHENTICATE;
    static const Int32 HASH_PROXY_AUTHENTICATE;
    static const Int32 HASH_CONTENT_DISPOSITION;
    static const Int32 HASH_ACCEPT_RANGES;
    static const Int32 HASH_EXPIRES;
    static const Int32 HASH_CACHE_CONTROL;
    static const Int32 HASH_LAST_MODIFIED;
    static const Int32 HASH_ETAG;
    static const Int32 HASH_SET_COOKIE;
    static const Int32 HASH_PRAGMA;
    static const Int32 HASH_REFRESH;
    static const Int32 HASH_X_PERMITTED_CROSS_DOMAIN_POLICIES;

    // keep any headers that require direct access in a presized
    // string array
    static const Int32 IDX_TRANSFER_ENCODING;
    static const Int32 IDX_CONTENT_LEN;
    static const Int32 IDX_CONTENT_TYPE;
    static const Int32 IDX_CONTENT_ENCODING;
    static const Int32 IDX_CONN_DIRECTIVE;
    static const Int32 IDX_LOCATION;
    static const Int32 IDX_PROXY_CONNECTION;
    static const Int32 IDX_WWW_AUTHENTICATE;
    static const Int32 IDX_PROXY_AUTHENTICATE;
    static const Int32 IDX_CONTENT_DISPOSITION;
    static const Int32 IDX_ACCEPT_RANGES;
    static const Int32 IDX_EXPIRES;
    static const Int32 IDX_CACHE_CONTROL;
    static const Int32 IDX_LAST_MODIFIED;
    static const Int32 IDX_ETAG;
    static const Int32 IDX_SET_COOKIE;
    static const Int32 IDX_PRAGMA;
    static const Int32 IDX_REFRESH;
    static const Int32 IDX_X_PERMITTED_CROSS_DOMAIN_POLICIES;

    static const Int32 HEADER_COUNT;

    /* parsed values */
    Int64 mTransferEncoding;

    Int64 mContentLength; // Content length of the incoming data

    Int32 mConnectionType;

    List<String> mCookies;

    AutoPtr<ArrayOf<String> > mHeaders;

    static const AutoPtr<ArrayOf<String> > mHeaderNames;

    // Catch-all for headers not explicitly handled
    List<String> mExtraHeaderNames;

    List<String> mExtraHeaderValues;
};

}
}
}
}

#endif // __ELASTOS_DROID_NET_HTTP_CHEADERS_H__
