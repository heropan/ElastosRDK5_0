//This file is autogenerated for
//    ChildProcessLauncher.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_CHILDPROCESSLAUNCHER_CALLBACK_DEC_HH
#define ELASTOS_CHILDPROCESSLAUNCHER_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_ChildProcessLauncher_nativeOnChildProcessStarted(Int64 clientContext,Int32 pid);
    extern void Elastos_ChildProcessLauncher_nativeEstablishSurfacePeer(Int32 pid,IInterface* surface,Int32 primaryID,Int32 secondaryID);
    extern Boolean Elastos_ChildProcessLauncher_nativeIsSingleProcess();
    extern void Elastos_ChildProcessLauncher_InitCallback(Handle32 cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace Content {
namespace Browser {

struct ElaChildProcessLauncherCallback
{
    Boolean (*elastos_ChildProcessLauncher_isOomProtected)(Int32 pid);
    void (*elastos_ChildProcessLauncher_registerViewSurface)(Int32 surfaceId, IInterface* surface);
    void (*elastos_ChildProcessLauncher_unregisterViewSurface)(Int32 surfaceId);
    void (*elastos_ChildProcessLauncher_registerSurfaceTexture)(Int32 surfaceTextureId, Int32 childProcessId, IInterface* surfaceTexture);
    void (*elastos_ChildProcessLauncher_unregisterSurfaceTexture)(Int32 surfaceTextureId, Int32 childProcessId);
    void (*elastos_ChildProcessLauncher_setInForeground)(Int32 pid, Boolean inForeground);
    void (*elastos_ChildProcessLauncher_start)(IInterface* context, ArrayOf<String>* commandLine, Int32 childProcessId, ArrayOf<Int32>* fileIds, ArrayOf<Int32>* fileFds, ArrayOf<Boolean>* fileAutoClose, Int64 clientContext);
    void (*elastos_ChildProcessLauncher_stop)(Int32 pid);
};

void* ChildProcessLauncher::ElaChildProcessLauncherCallback_Init()
{
    static ElaChildProcessLauncherCallback sElaChildProcessLauncherCallback;

    sElaChildProcessLauncherCallback.elastos_ChildProcessLauncher_isOomProtected = &ChildProcessLauncher::IsOomProtected;
    sElaChildProcessLauncherCallback.elastos_ChildProcessLauncher_registerViewSurface = &ChildProcessLauncher::RegisterViewSurface;
    sElaChildProcessLauncherCallback.elastos_ChildProcessLauncher_unregisterViewSurface = &ChildProcessLauncher::UnregisterViewSurface;
    sElaChildProcessLauncherCallback.elastos_ChildProcessLauncher_registerSurfaceTexture = &ChildProcessLauncher::RegisterSurfaceTexture;
    sElaChildProcessLauncherCallback.elastos_ChildProcessLauncher_unregisterSurfaceTexture = &ChildProcessLauncher::UnregisterSurfaceTexture;
    sElaChildProcessLauncherCallback.elastos_ChildProcessLauncher_setInForeground = &ChildProcessLauncher::SetInForeground;
    sElaChildProcessLauncherCallback.elastos_ChildProcessLauncher_start = &ChildProcessLauncher::Start;
    sElaChildProcessLauncherCallback.elastos_ChildProcessLauncher_stop = &ChildProcessLauncher::Stop;

    Elastos_ChildProcessLauncher_InitCallback((Handle32)&sElaChildProcessLauncherCallback);
    return &sElaChildProcessLauncherCallback;
}

static void* sPElaChildProcessLauncherCallback = ChildProcessLauncher::ElaChildProcessLauncherCallback_Init();

} // namespace Browser
} // namespace Content
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_CHILDPROCESSLAUNCHER_CALLBACK_DEC_HH
