//This file is autogenerated for
//    BrowserAccessibilityManager.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_BROWSERACCESSIBILITYMANAGER_CALLBACK_DEC_HH
#define ELASTOS_BROWSERACCESSIBILITYMANAGER_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern Int32 Elastos_BrowserAccessibilityManager_nativeGetRootId(IInterface* caller,Handle64 nativeBrowserAccessibilityManagerAndroid);
    extern Boolean Elastos_BrowserAccessibilityManager_nativeIsNodeValid(IInterface* caller,Handle64 nativeBrowserAccessibilityManagerAndroid,Int32 id);
    extern void Elastos_BrowserAccessibilityManager_nativeHitTest(IInterface* caller,Handle64 nativeBrowserAccessibilityManagerAndroid,Int32 x,Int32 y);
    extern Boolean Elastos_BrowserAccessibilityManager_nativePopulateAccessibilityNodeInfo(IInterface* caller,Handle64 nativeBrowserAccessibilityManagerAndroid,IInterface* info,Int32 id);
    extern Boolean Elastos_BrowserAccessibilityManager_nativePopulateAccessibilityEvent(IInterface* caller,Handle64 nativeBrowserAccessibilityManagerAndroid,IInterface* event,Int32 id,Int32 eventType);
    extern void Elastos_BrowserAccessibilityManager_nativeClick(IInterface* caller,Handle64 nativeBrowserAccessibilityManagerAndroid,Int32 id);
    extern void Elastos_BrowserAccessibilityManager_nativeFocus(IInterface* caller,Handle64 nativeBrowserAccessibilityManagerAndroid,Int32 id);
    extern void Elastos_BrowserAccessibilityManager_nativeBlur(IInterface* caller,Handle64 nativeBrowserAccessibilityManagerAndroid);
    extern void Elastos_BrowserAccessibilityManager_nativeScrollToMakeNodeVisible(IInterface* caller,Handle64 nativeBrowserAccessibilityManagerAndroid,Int32 id);
    extern Int32 Elastos_BrowserAccessibilityManager_nativeFindElementType(IInterface* caller,Handle64 nativeBrowserAccessibilityManagerAndroid,Int32 startId,const String& elementType,Boolean forwards);
    extern void Elastos_BrowserAccessibilityManager_InitCallback(Handle64 cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace Content {
namespace Browser {
namespace Accessibility {

struct ElaBrowserAccessibilityManagerCallback
{
    AutoPtr<IInterface> (*elastos_BrowserAccessibilityManager_create)(Handle64 nativeBrowserAccessibilityManagerAndroid, IInterface* contentViewCore);
    void (*elastos_BrowserAccessibilityManager_onNativeObjectDestroyed)(IInterface* obj);
    void (*elastos_BrowserAccessibilityManager_handlePageLoaded)(IInterface* obj, Int32 id);
    void (*elastos_BrowserAccessibilityManager_handleFocusChanged)(IInterface* obj, Int32 id);
    void (*elastos_BrowserAccessibilityManager_handleCheckStateChanged)(IInterface* obj, Int32 id);
    void (*elastos_BrowserAccessibilityManager_handleTextSelectionChanged)(IInterface* obj, Int32 id);
    void (*elastos_BrowserAccessibilityManager_handleEditableTextChanged)(IInterface* obj, Int32 id);
    void (*elastos_BrowserAccessibilityManager_handleContentChanged)(IInterface* obj, Int32 id);
    void (*elastos_BrowserAccessibilityManager_handleNavigate)(IInterface* obj);
    void (*elastos_BrowserAccessibilityManager_handleScrollPositionChanged)(IInterface* obj, Int32 id);
    void (*elastos_BrowserAccessibilityManager_handleScrolledToAnchor)(IInterface* obj, Int32 id);
    void (*elastos_BrowserAccessibilityManager_handleHover)(IInterface* obj, Int32 id);
    void (*elastos_BrowserAccessibilityManager_announceLiveRegionText)(IInterface* obj, const String& text);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoParent)(IInterface* obj, IInterface* node, Int32 parentId);
    void (*elastos_BrowserAccessibilityManager_addAccessibilityNodeInfoChild)(IInterface* obj, IInterface* node, Int32 childId);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoBooleanAttributes)(IInterface* obj, IInterface* node, Int32 virtualViewId, Boolean checkable, Boolean checked, Boolean clickable, Boolean enabled, Boolean focusable, Boolean focused, Boolean password, Boolean scrollable, Boolean selected, Boolean visibleToUser);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoClassName)(IInterface* obj, IInterface* node, const String& className);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoContentDescription)(IInterface* obj, IInterface* node, const String& contentDescription, Boolean annotateAsLink);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoLocation)(IInterface* obj, IInterface* node, Int32 absoluteLeft, Int32 absoluteTop, Int32 parentRelativeLeft, Int32 parentRelativeTop, Int32 width, Int32 height, Boolean isRootNode);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoKitKatAttributes)(IInterface* obj, IInterface* node, Boolean canOpenPopup, Boolean contentInvalid, Boolean dismissable, Boolean multiLine, Int32 inputType, Int32 liveRegion);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionInfo)(IInterface* obj, IInterface* node, Int32 rowCount, Int32 columnCount, Boolean hierarchical);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionItemInfo)(IInterface* obj, IInterface* node, Int32 rowIndex, Int32 rowSpan, Int32 columnIndex, Int32 columnSpan, Boolean heading);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoRangeInfo)(IInterface* obj, IInterface* node, Int32 rangeType, Float min, Float max, Float current);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventBooleanAttributes)(IInterface* obj, IInterface* event, Boolean checked, Boolean enabled, Boolean password, Boolean scrollable);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventClassName)(IInterface* obj, IInterface* event, const String& className);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventListAttributes)(IInterface* obj, IInterface* event, Int32 currentItemIndex, Int32 itemCount);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventScrollAttributes)(IInterface* obj, IInterface* event, Int32 scrollX, Int32 scrollY, Int32 maxScrollX, Int32 maxScrollY);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventTextChangedAttrs)(IInterface* obj, IInterface* event, Int32 fromIndex, Int32 addedCount, Int32 removedCount, const String& beforeText, const String& text);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventSelectionAttrs)(IInterface* obj, IInterface* event, Int32 fromIndex, Int32 addedCount, Int32 itemCount, const String& text);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventKitKatAttributes)(IInterface* obj, IInterface* event, Boolean canOpenPopup, Boolean contentInvalid, Boolean dismissable, Boolean multiLine, Int32 inputType, Int32 liveRegion);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventCollectionInfo)(IInterface* obj, IInterface* event, Int32 rowCount, Int32 columnCount, Boolean hierarchical);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventHeadingFlag)(IInterface* obj, IInterface* event, Boolean heading);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventCollectionItemInfo)(IInterface* obj, IInterface* event, Int32 rowIndex, Int32 rowSpan, Int32 columnIndex, Int32 columnSpan);
    void (*elastos_BrowserAccessibilityManager_setAccessibilityEventRangeInfo)(IInterface* obj, IInterface* event, Int32 rangeType, Float min, Float max, Float current);
};

void* BrowserAccessibilityManager::ElaBrowserAccessibilityManagerCallback_Init()
{
    static ElaBrowserAccessibilityManagerCallback sElaBrowserAccessibilityManagerCallback;

    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_create = &BrowserAccessibilityManager::Create;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_onNativeObjectDestroyed = &BrowserAccessibilityManager::OnNativeObjectDestroyed;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_handlePageLoaded = &BrowserAccessibilityManager::HandlePageLoaded;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_handleFocusChanged = &BrowserAccessibilityManager::HandleFocusChanged;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_handleCheckStateChanged = &BrowserAccessibilityManager::HandleCheckStateChanged;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_handleTextSelectionChanged = &BrowserAccessibilityManager::HandleTextSelectionChanged;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_handleEditableTextChanged = &BrowserAccessibilityManager::HandleEditableTextChanged;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_handleContentChanged = &BrowserAccessibilityManager::HandleContentChanged;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_handleNavigate = &BrowserAccessibilityManager::HandleNavigate;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_handleScrollPositionChanged = &BrowserAccessibilityManager::HandleScrollPositionChanged;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_handleScrolledToAnchor = &BrowserAccessibilityManager::HandleScrolledToAnchor;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_handleHover = &BrowserAccessibilityManager::HandleHover;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_announceLiveRegionText = &BrowserAccessibilityManager::AnnounceLiveRegionText;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoParent = &BrowserAccessibilityManager::SetAccessibilityNodeInfoParent;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_addAccessibilityNodeInfoChild = &BrowserAccessibilityManager::AddAccessibilityNodeInfoChild;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoBooleanAttributes = &BrowserAccessibilityManager::SetAccessibilityNodeInfoBooleanAttributes;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoClassName = &BrowserAccessibilityManager::SetAccessibilityNodeInfoClassName;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoContentDescription = &BrowserAccessibilityManager::SetAccessibilityNodeInfoContentDescription;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoLocation = &BrowserAccessibilityManager::SetAccessibilityNodeInfoLocation;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoKitKatAttributes = &BrowserAccessibilityManager::SetAccessibilityNodeInfoKitKatAttributes;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionInfo = &BrowserAccessibilityManager::SetAccessibilityNodeInfoCollectionInfo;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionItemInfo = &BrowserAccessibilityManager::SetAccessibilityNodeInfoCollectionItemInfo;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityNodeInfoRangeInfo = &BrowserAccessibilityManager::SetAccessibilityNodeInfoRangeInfo;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventBooleanAttributes = &BrowserAccessibilityManager::SetAccessibilityEventBooleanAttributes;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventClassName = &BrowserAccessibilityManager::SetAccessibilityEventClassName;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventListAttributes = &BrowserAccessibilityManager::SetAccessibilityEventListAttributes;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventScrollAttributes = &BrowserAccessibilityManager::SetAccessibilityEventScrollAttributes;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventTextChangedAttrs = &BrowserAccessibilityManager::SetAccessibilityEventTextChangedAttrs;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventSelectionAttrs = &BrowserAccessibilityManager::SetAccessibilityEventSelectionAttrs;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventKitKatAttributes = &BrowserAccessibilityManager::SetAccessibilityEventKitKatAttributes;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventCollectionInfo = &BrowserAccessibilityManager::SetAccessibilityEventCollectionInfo;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventHeadingFlag = &BrowserAccessibilityManager::SetAccessibilityEventHeadingFlag;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventCollectionItemInfo = &BrowserAccessibilityManager::SetAccessibilityEventCollectionItemInfo;
    sElaBrowserAccessibilityManagerCallback.elastos_BrowserAccessibilityManager_setAccessibilityEventRangeInfo = &BrowserAccessibilityManager::SetAccessibilityEventRangeInfo;

    Elastos_BrowserAccessibilityManager_InitCallback((Handle64)&sElaBrowserAccessibilityManagerCallback);
    return &sElaBrowserAccessibilityManagerCallback;
}

static void* sPElaBrowserAccessibilityManagerCallback = BrowserAccessibilityManager::ElaBrowserAccessibilityManagerCallback_Init();

} // namespace Accessibility
} // namespace Browser
} // namespace Content
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_BROWSERACCESSIBILITYMANAGER_CALLBACK_DEC_HH
