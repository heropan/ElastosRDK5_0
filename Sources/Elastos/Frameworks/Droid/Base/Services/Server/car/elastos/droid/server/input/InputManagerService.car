module
{
    using interface Elastos.Droid.View.IInputChannel;
    using interface Elastos.Droid.View.IInputEvent;
    using interface Elastos.Droid.View.IInputDevice;
    using interface Elastos.Droid.Text.IInputFilter;
    using interface Elastos.Droid.Hardware.Input.IKeyboardLayout;
    using interface Elastos.Droid.Hardware.Input.ITouchCalibration;
    using interface Elastos.Droid.Hardware.Input.IInputDevicesChangedListener;
    using interface Elastos.Droid.Hardware.Input.IInputDeviceIdentifier;
    using interface Elastos.Droid.Os.IBinder;
    using interface Elastos.IO.IFileDescriptor;
    using interface Elastos.IO.IPrintWriter;
    using interface Elastos.Droid.View.IKeyEvent;

    interface Elastos.Droid.Content.Res.IResources;
    interface Elastos.Droid.Server.Input.IWindowManagerCallbacks;
    interface Elastos.Droid.Server.Input.IWiredAccessoryCallbacks;
    interface Elastos.Droid.Server.Input.IKeyboardLayoutVisitor;
    interface Elastos.Droid.Server.Input.IInputWindowHandle;
    interface Elastos.Droid.Server.Input.IInputApplicationHandle;

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Input {

    /*
     * Wraps the C++ InputManager and provides its callbacks.
     */
    [local, deprecated]
    interface IInputManagerService {
        // Key states (may be returned by queries about the current state of a
        // particular key code, scan code or switch).

        /** The key state is unknown or the requested key itself is not supported. */
        const Int32 KEY_STATE_UNKNOWN = -1;

        /** The key is up. /*/
        const Int32 KEY_STATE_UP = 0;

        /** The key is down. */
        const Int32 KEY_STATE_DOWN = 1;

        /** The key is down but is a virtual key press that is being emulated by the system. */
        const Int32 KEY_STATE_VIRTUAL = 2;

        /** Scan code: Mouse / trackball button. */
        const Int32 BTN_MOUSE = 0x110;

        // Switch code values must match bionic/libc/kernel/common/linux/input.h
        /** Switch code: Lid switch.  When set, lid is shut. */
        const Int32 SW_LID = 0x00;

        /** Switch code: Keypad slide.  When set, keyboard is exposed. */
        const Int32 SW_KEYPAD_SLIDE = 0x0a;

        /** Switch code: Headphone.  When set, headphone is inserted. */
        const Int32 SW_HEADPHONE_INSERT = 0x02;

        /** Switch code: Microphone.  When set, microphone is inserted. */
        const Int32 SW_MICROPHONE_INSERT = 0x04;

        /** Switch code: Line out.  When set, Line out (hi-Z) is inserted. */
        const Int32 SW_LINEOUT_INSERT = 0x06;

        /** Switch code: Headphone/Microphone Jack.  When set, something is inserted. */
        const Int32 SW_JACK_PHYSICAL_INSERT = 0x07;

        /** Switch code: Camera lens cover. When set the lens is covered. */
        const Int32 SW_CAMERA_LENS_COVER = 0x09;

        const Int32 SW_LID_BIT = 1 << SW_LID;
        const Int32 SW_KEYPAD_SLIDE_BIT = 1 << SW_KEYPAD_SLIDE;
        const Int32 SW_HEADPHONE_INSERT_BIT = 1 << SW_HEADPHONE_INSERT;
        const Int32 SW_MICROPHONE_INSERT_BIT = 1 << SW_MICROPHONE_INSERT;
        const Int32 SW_LINEOUT_INSERT_BIT = 1 << SW_LINEOUT_INSERT;
        const Int32 SW_JACK_PHYSICAL_INSERT_BIT = 1 << SW_JACK_PHYSICAL_INSERT;
        const Int32 SW_JACK_BITS =
                SW_HEADPHONE_INSERT_BIT | SW_MICROPHONE_INSERT_BIT | SW_JACK_PHYSICAL_INSERT_BIT | SW_LINEOUT_INSERT_BIT;
        const Int32 SW_CAMERA_LENS_COVER_BIT = 1 << SW_CAMERA_LENS_COVER;
    }

    /**
     * Callback interface implemented by the Window Manager.
     */
    [local, deprecated]
    interface IWindowManagerCallbacks {
        NotifyConfigurationChanged();

        NotifyLidSwitchChanged(
            [in] Int64 whenNanos,
            [in] Boolean lidOpen);

        NotifyCameraLensCoverSwitchChanged(
            [in] Int64 whenNanos,
            [in] Boolean lensCovered);

        NotifyInputChannelBroken(
            [in] IInputWindowHandle* inputWindowHandle);

        NotifyANR(
            [in] IInputApplicationHandle* inputApplicationHandle,
            [in] IInputWindowHandle* inputWindowHandle,
            [in] String reason,
            [out] Int64 *ret);

        InterceptKeyBeforeQueueing(
            [in] IKeyEvent* event,
            [in] Int32 policyFlags,
            [out] Int32 *ret);

        InterceptMotionBeforeQueueingNonInteractive(
            [in] Int64 whenNanos,
            [in] Int32 policyFlags,
            [out] Int32 *ret);

        InterceptKeyBeforeDispatching(
            [in] IInputWindowHandle* focus,
            [in] IKeyEvent* event,
            [in] Int64 policyFlags,
            [out] Int64 *ret);

        DispatchUnhandledKey(
            [in] IInputWindowHandle* focus,
            [in] IKeyEvent* event,
            [in] Int32 policyFlags,
            [out] IKeyEvent** keyEvent);

        GetPointerLayer(
            [out] Int32 *ret);
    }

    /**
     * Callback interface implemented by WiredAccessoryObserver.
     */
    interface IWiredAccessoryCallbacks {
        NotifyWiredAccessoryChanged(
            [in] Int64 whenNanos,
            [in] Int32 switchValues,
            [in] Int32 switchMask);

        SystemReady();
    }

    [local, deprecated]
    interface IKeyboardLayoutVisitor {
        VisitKeyboardLayout(
            [in] IResources* resources,
            [in] String descriptor,
            [in] String label,
            [in] String collection,
            [in] Int32 keyboardLayoutResId,
            [in] Int32 priority);
    }

    } // Input
    } // Server
    } // Droid
    } // Elastos
}
