/** @addtogroup ReflectionRef
  *   @{
  */

//==========================================================================
// Copyright (c) 2000-2009,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

library
{
    interface IModuleInfo;
    interface IClassInfo;
    interface IConstantInfo;
    interface ITypeAliasInfo;
    interface IEnumItemInfo;
    interface IFieldInfo;
    interface IFunctionInfo;
    interface IMethodInfo;
    interface IParamInfo;
    interface IArgumentList;
    interface IConstructorInfo;
    interface ICallbackMethodInfo;
    interface IDelegateProxy;
    interface ICallbackInvocation;
    interface ICallbackArgumentList;

    interface IVariable;
    interface IVariableOfCarArray;
    interface IVariableOfStruct;
    interface ICarArraySetter;
    interface ICarArrayGetter;
    interface IStructSetter;
    interface IStructGetter;
    interface ICppVectorSetter;
    interface ICppVectorGetter;

    typedef [dummytype] PVoid PCarQuintet;
    typedef [dummytype] PVoid PRegime;
    typedef PVoid LocalPtr;

    enum CarDataType {
        CarDataType_Int16       = 1,
        CarDataType_Int32       = 2,
        CarDataType_Int64       = 3,
        CarDataType_Byte        = 4,
        CarDataType_Float       = 5,
        CarDataType_Double      = 6,
        CarDataType_Char32      = 7,
        CarDataType_String      = 8,
        CarDataType_Boolean     = 9,
        CarDataType_EMuid       = 10,
        CarDataType_EGuid       = 11,
        CarDataType_ECode       = 12,
        CarDataType_LocalPtr    = 13,
        CarDataType_LocalType   = 14,
        CarDataType_Enum        = 15,
        CarDataType_ArrayOf     = 16,
        CarDataType_CppVector   = 17,
        CarDataType_Struct      = 18,
        CarDataType_Interface   = 19
    }

    enum ParamIOAttribute {
        ParamIOAttribute_In             = 0,
        ParamIOAttribute_CalleeAllocOut = 1,
        ParamIOAttribute_CallerAllocOut = 2
    }

    enum ThreadingModel {
        ThreadingModel_Sequenced     = 1,
        ThreadingModel_Synchronized  = 2,
        ThreadingModel_ThreadSafe    = 3,
        ThreadingModel_Naked         = 4
    }

    [local]
    interface IDataTypeInfo {
        GetName(
            [out] String* name);

        GetSize(
            [out] MemorySize* size);

        GetDataType(
            [out] CarDataType* dataType);
    }

    [local]
    interface ILocalPtrInfo extends IDataTypeInfo {
        GetTargetTypeInfo(
            [out] IDataTypeInfo** dateTypeInfo);

        GetPtrLevel(
            [out] Int32* level);
    }

    [local]
    interface IEnumInfo extends IDataTypeInfo {
        GetNamespace(
            [out] String* ns);

        GetModuleInfo(
            [out] IModuleInfo** moduleInfo);

        GetItemCount(
            [out] Int32* count);

        GetAllItemInfos(
            [out] ArrayOf<IEnumItemInfo*> itemInfos);

        GetItemInfo(
            [in] String name,
            [out] IEnumItemInfo** enumItemInfo);
    }

    [local]
    interface IEnumItemInfo {
        GetName(
            [out] String* name);

        GetEnumInfo(
            [out] IEnumInfo** enumInfo);

        GetValue(
            [out] Int32* value);
    }

    [local]
    interface ICarArrayInfo extends IDataTypeInfo {
        GetElementTypeInfo(
            [out] IDataTypeInfo** elementTypeInfo);

        CreateVariable(
            [in] Int32 capacity,
            [out] IVariableOfCarArray** variableBox);

        CreateVariableBox(
            [in] PCarQuintet variableDescriptor,
            [out] IVariableOfCarArray** variableBox);
    }

    [local]
    interface ICppVectorInfo extends IDataTypeInfo {
        GetElementTypeInfo(
            [out] IDataTypeInfo** elementTypeInfo);

        GetLength(
            [out] Int32* length);
    }

    [local]
    interface IStructInfo extends IDataTypeInfo {
        GetModuleInfo(
            [out] IModuleInfo** moduleInfo);

        GetFieldCount(
            [out] Int32* count);

        GetAllFieldInfos(
            [out] ArrayOf<IFieldInfo*> fieldInfos);

        GetFieldInfo(
            [in] String name,
            [out] IFieldInfo** fieldInfo);

        CreateVariable(
            [out] IVariableOfStruct** variableBox);

        CreateVariableBox(
            [in] PVoid variableDescriptor,
            [out] IVariableOfStruct** variableBox);
    }

    [local]
    interface IFieldInfo {
        GetName(
            [out] String* name);

        GetTypeInfo(
            [out] IDataTypeInfo** typeInfo);
    }

    [local]
    interface IInterfaceInfo extends IDataTypeInfo {
        GetNamespace(
            [out] String* ns);

        GetId(
            [out] InterfaceID* iid);

        GetModuleInfo(
            [out] IModuleInfo** moduleInfo);

        IsLocal(
            [out] Boolean* isLocal);

        HasBase(
            [out] Boolean* hasBase);

        GetBaseInfo(
            [out] IInterfaceInfo** baseInfo);

        GetMethodCount(
            [out] Int32* count);

        GetAllMethodInfos(
            [out] ArrayOf<IMethodInfo*> methodInfos);

        GetMethodInfo(
            [in] String name,
            [in] String signature,
            [out] IMethodInfo** methodInfo);
    }

    [local]
    interface IFunctionInfo {
        GetName(
            [out] String* name);

        GetParamCount(
            [out] Int32* count);

        GetAllParamInfos(
            [out] ArrayOf<IParamInfo*> paramInfos);

        GetParamInfoByIndex(
            [in] Int32 index,
            [out] IParamInfo** paramInfo);

        GetParamInfoByName(
            [in] String name,
            [out] IParamInfo** paramInfo);
    }

    [local]
    interface IMethodInfo extends IFunctionInfo {
        GetAnnotation(
            [out] String* annotation);

        CreateArgumentList(
            [out] IArgumentList** argumentList);

        Invoke(
            [in] PInterface target,
            [in] IArgumentList* argumentList);
    }

    [local]
    interface IParamInfo {
        GetMethodInfo(
            [out] IMethodInfo** methodInfo);

        GetName(
            [out] String* name);

        GetIndex(
            [out] Int32* index);

        GetIOAttribute(
            [out] ParamIOAttribute* ioAttrib);

        IsReturnValue(
            [out] Boolean* returnValue);

        GetTypeInfo(
            [out] IDataTypeInfo** typeInfo);

        GetAdvisedCapacity(
            [out] Int32* advisedCapacity);

        IsUsingTypeAlias(
            [out] Boolean* usingTypeAlias);

        GetUsedTypeAliasInfo(
            [out] ITypeAliasInfo** usedTypeAliasInfo);
    }

    [local]
    interface ITypeAliasInfo {
        GetName(
            [out] String* name);

        GetTypeInfo(
            [out] IDataTypeInfo** typeInfo);

        GetModuleInfo(
            [out] IModuleInfo** moduleInfo);

        IsDummy(
            [out] Boolean* isDummy);

        GetPtrLevel(
            [out] Int32* level);
    }

    [local, deprecated]
    interface IArgumentList {
        GetFunctionInfo(
            [out] IFunctionInfo** functionInfo);

        SetInputArgumentOfInt16(
            [in] Int32 index,
            [in] Int16 value);

        SetInputArgumentOfInt32(
            [in] Int32 index,
            [in] Int32 value);

        SetInputArgumentOfInt64(
            [in] Int32 index,
            [in] Int64 value);

        SetInputArgumentOfByte(
            [in] Int32 index,
            [in] Byte value);

        SetInputArgumentOfFloat(
            [in] Int32 index,
            [in] Float value);

        SetInputArgumentOfDouble(
            [in] Int32 index,
            [in] Double value);

        SetInputArgumentOfChar(
            [in] Int32 index,
            [in] Char32 value);

        SetInputArgumentOfString(
            [in] Int32 index,
            [in] String value);

        SetInputArgumentOfBoolean(
            [in] Int32 index,
            [in] Boolean value);

        SetInputArgumentOfEMuid(
            [in] Int32 index,
            [in] EMuid* value);

        SetInputArgumentOfEGuid(
            [in] Int32 index,
            [in] EGuid* value);

        SetInputArgumentOfECode(
            [in] Int32 index,
            [in] ECode value);

        SetInputArgumentOfLocalPtr(
            [in] Int32 index,
            [in] LocalPtr value);

        SetInputArgumentOfLocalType(
            [in] Int32 index,
            [in] PVoid value);

        SetInputArgumentOfEnum(
            [in] Int32 index,
            [in] Int32 value);

        SetInputArgumentOfCarArray(
            [in] Int32 index,
            [in] PCarQuintet value);

        SetInputArgumentOfStructPtr(
            [in] Int32 index,
            [in] PVoid value);

        SetInputArgumentOfObjectPtr(
            [in] Int32 index,
            [in] PInterface value);

        SetOutputArgumentOfInt16Ptr(
            [in] Int32 index,
            [out] Int16* value);

        SetOutputArgumentOfInt32Ptr(
            [in] Int32 index,
            [out] Int32* value);

        SetOutputArgumentOfInt64Ptr(
            [in] Int32 index,
            [out] Int64* value);

        SetOutputArgumentOfBytePtr(
            [in] Int32 index,
            [out] Byte* value);

        SetOutputArgumentOfFloatPtr(
            [in] Int32 index,
            [out] Float* value);

        SetOutputArgumentOfDoublePtr(
            [in] Int32 index,
            [out] Double* value);

        SetOutputArgumentOfCharPtr(
            [in] Int32 index,
            [out] Char32* value);

        SetOutputArgumentOfStringPtr(
            [in] Int32 index,
            [out] String* value);

        SetOutputArgumentOfBooleanPtr(
            [in] Int32 index,
            [out] Boolean* value);

        SetOutputArgumentOfEMuidPtr(
            [in] Int32 index,
            [out] EMuid* value);

        SetOutputArgumentOfEGuidPtr(
            [in] Int32 index,
            [out] EGuid* value);

        SetOutputArgumentOfECodePtr(
            [in] Int32 index,
            [out] ECode* value);

        SetOutputArgumentOfLocalPtrPtr(
            [in] Int32 index,
            [out] LocalPtr* value);

        SetOutputArgumentOfLocalTypePtr(
            [in] Int32 index,
            [out] PVoid value);

        SetOutputArgumentOfEnumPtr(
            [in] Int32 index,
            [out] Int32* value);

        // Caller allocated
        SetOutputArgumentOfCarArrayPtr(
            [in] Int32 index,
            [out] PCarQuintet value);

        // Callee allocated
        SetOutputArgumentOfCarArrayPtrPtr(
            [in] Int32 index,
            [out] PCarQuintet* value);

        // Caller allocated
        SetOutputArgumentOfStructPtr(
            [in] Int32 index,
            [out] PVoid value);

        // Callee allocated
        SetOutputArgumentOfStructPtrPtr(
            [in] Int32 index,
            [out] PVoid* value);

        SetOutputArgumentOfObjectPtrPtr(
            [in] Int32 index,
            [out] PInterface* value);
    }

    [local]
    interface IVariable {
        GetTypeInfo(
            [out] IDataTypeInfo** typeInfo);

        GetPayload(
            [out] PVoid* payload);

        Rebox(
            [in] PVoid localVariablePtr);
    }

    [local]
    interface IVariableOfCarArray extends IVariable {
        GetSetter(
            [out] ICarArraySetter** setter);

        GetGetter(
            [out] ICarArrayGetter** getter);
    }

    [local]
    interface IVariableOfStruct extends IVariable {
        GetSetter(
            [out] IStructSetter** setter);

        GetGetter(
            [out] IStructGetter** getter);
    }

    [local, deprecated]
    interface ICarArraySetter {
        SetUsed(
            [in] Int32 used);

        SetInt16Element(
            [in] Int32 index,
            [in] Int16 value);

        SetInt32Element(
            [in] Int32 index,
            [in] Int32 value);

        SetInt64Element(
            [in] Int32 index,
            [in] Int64 value);

        SetByteElement(
            [in] Int32 index,
            [in] Byte value);

        SetFloatElement(
            [in] Int32 index,
            [in] Float value);

        SetDoubleElement(
            [in] Int32 index,
            [in] Double value);

        SetEnumElement(
            [in] Int32 index,
            [in] Int32 value);

        SetCharElement(
            [in] Int32 index,
            [in] Char32 value);

        SetStringElement(
            [in] Int32 index,
            [in] String value);

        SetBooleanElement(
            [in] Int32 index,
            [in] Boolean value);

        SetEMuidElement(
            [in] Int32 index,
            [in] EMuid* value);

        SetEGuidElement(
            [in] Int32 index,
            [in] EGuid* value);

        SetECodeElement(
            [in] Int32 index,
            [in] ECode value);

        SetLocalTypeElement(
            [in] Int32 index,
            [in] PVoid value);

        SetObjectPtrElement(
            [in] Int32 index,
            [in] PInterface value);

        GetStructElementSetter(
            [in] Int32 index,
            [out] IStructSetter** setter);
    }

    [local]
    interface ICarArrayGetter {
        GetCapacity(
            [out] Int32* capacity);

        GetUsed(
            [out] Int32* used);

        GetInt16Element(
            [in] Int32 index,
            [out] Int16* value);

        GetInt32Element(
            [in] Int32 index,
            [out] Int32* value);

        GetInt64Element(
            [in] Int32 index,
            [out] Int64* value);

        GetByteElement(
            [in] Int32 index,
            [out] Byte* value);

        GetFloatElement(
            [in] Int32 index,
            [out] Float* value);

        GetDoubleElement(
            [in] Int32 index,
            [out] Double* value);

        GetEnumElement(
            [in] Int32 index,
            [out] Int32* value);

        GetCharElement(
            [in] Int32 index,
            [out] Char32* value);

        GetStringElement(
            [in] Int32 index,
            [out] String* value);

        GetBooleanElement(
            [in] Int32 index,
            [out] Boolean* value);

        GetEMuidElement(
            [in] Int32 index,
            [out] EMuid* value);

        GetEGuidElement(
            [in] Int32 index,
            [out] EGuid* value);

        GetECodeElement(
            [in] Int32 index,
            [out] ECode* value);

        GetLocalTypeElement(
            [in] Int32 index,
            [out] PVoid value);

        GetObjectPtrElement(
            [in] Int32 index,
            [out] PInterface* value);

        GetStructElementGetter(
            [in] Int32 index,
            [out] IStructGetter** getter);
    }

    [local, deprecated]
    interface IStructSetter {
        ZeroAllFields();

        SetInt16Field(
            [in] String name,
            [in] Int16 value);

        SetInt32Field(
            [in] String name,
            [in] Int32 value);

        SetInt64Field(
            [in] String name,
            [in] Int64 value);

        SetByteField(
            [in] String name,
            [in] Byte value);

        SetFloatField(
            [in] String name,
            [in] Float value);

        SetDoubleField(
            [in] String name,
            [in] Double value);

        SetCharField(
            [in] String name,
            [in] Char32 value);

        SetBooleanField(
            [in] String name,
            [in] Boolean value);

        SetEMuidField(
            [in] String name,
            [in] EMuid* value);

        SetEGuidField(
            [in] String name,
            [in] EGuid* value);

        SetECodeField(
            [in] String name,
            [in] ECode value);

        SetLocalPtrField(
            [in] String name,
            [in] LocalPtr value);

        SetLocalTypeField(
            [in] String name,
            [in] PVoid value);

        SetEnumField(
            [in] String name,
            [in] Int32 value);

        GetStructFieldSetter(
            [in] String name,
            [out] IStructSetter** setter);

        GetCppVectorFieldSetter(
            [in] String name,
            [out] ICppVectorSetter** setter);
    }

    [local]
    interface IStructGetter {
        GetInt16Field(
            [in] String name,
            [out] Int16* value);

        GetInt32Field(
            [in] String name,
            [out] Int32* value);

        GetInt64Field(
            [in] String name,
            [out] Int64* value);

        GetByteField(
            [in] String name,
            [out] Byte* value);

        GetFloatField(
            [in] String name,
            [out] Float* value);

        GetDoubleField(
            [in] String name,
            [out] Double* value);

        GetCharField(
            [in] String name,
            [out] Char32* value);

        GetBooleanField(
            [in] String name,
            [out] Boolean* value);

        GetEMuidField(
            [in] String name,
            [out] EMuid* value);

        GetEGuidField(
            [in] String name,
            [out] EGuid* value);

        GetECodeField(
            [in] String name,
            [out] ECode* value);

        GetLocalPtrField(
            [in] String name,
            [out] LocalPtr* value);

        GetLocalTypeField(
            [in] String name,
            [out] PVoid value);

        GetEnumField(
            [in] String name,
            [out] Int32* value);

        GetStructFieldGetter(
            [in] String name,
            [out] IStructGetter** getter);

        GetCppVectorFieldGetter(
            [in] String name,
            [out] ICppVectorGetter** getter);
    }

    [local, deprecated]
    interface ICppVectorSetter {
        ZeroAllElements();

        SetAllElements(
            [in] PVoid value,
            [in] MemorySize size);

        SetInt16Element(
            [in] Int32 index,
            [in] Int16 value);

        SetInt32Element(
            [in] Int32 index,
            [in] Int32 value);

        SetInt64Element(
            [in] Int32 index,
            [in] Int64 value);

        SetByteElement(
            [in] Int32 index,
            [in] Byte value);

        SetFloatElement(
            [in] Int32 index,
            [in] Float value);

        SetDoubleElement(
            [in] Int32 index,
            [in] Double value);

        SetCharElement(
            [in] Int32 index,
            [in] Char32 value);

        SetBooleanElement(
            [in] Int32 index,
            [in] Boolean value);

        SetEMuidElement(
            [in] Int32 index,
            [in] EMuid* value);

        SetEGuidElement(
            [in] Int32 index,
            [in] EGuid* value);

        SetECodeElement(
            [in] Int32 index,
            [in] ECode value);

        SetLocalPtrElement(
            [in] Int32 index,
            [in] LocalPtr value);

        SetLocalTypeElement(
            [in] Int32 index,
            [in] PVoid value);

        SetEnumElement(
            [in] Int32 index,
            [in] Int32 value);

        GetStructElementSetter(
            [in] Int32 index,
            [out] IStructSetter** setter);

        GetCppVectorElementSetter(
            [in] Int32 index,
            [out] ICppVectorSetter** setter);
    }

    [local]
    interface ICppVectorGetter {
        GetLength(
            [out] Int32* length);

        GetRank(
            [out] Int32* rank);

        GetInt16Element(
            [in] Int32 index,
            [out] Int16* value);

        GetInt32Element(
            [in] Int32 index,
            [out] Int32* value);

        GetInt64Element(
            [in] Int32 index,
            [out] Int64* value);

        GetByteElement(
            [in] Int32 index,
            [out] Byte* value);

        GetFloatElement(
            [in] Int32 index,
            [out] Float* value);

        GetDoubleElement(
            [in] Int32 index,
            [out] Double* value);

        GetCharElement(
            [in] Int32 index,
            [out] Char32* value);

        GetBooleanElement(
            [in] Int32 index,
            [out] Boolean* value);

        GetEMuidElement(
            [in] Int32 index,
            [out] EMuid* value);

        GetEGuidElement(
            [in] Int32 index,
            [out] EGuid* value);

        GetECodeElement(
            [in] Int32 index,
            [out] ECode* value);

        GetLocalPtrElement(
            [in] Int32 index,
            [out] LocalPtr* value);

        GetLocalTypeElement(
            [in] Int32 index,
            [out] PVoid value);

        GetEnumElement(
            [in] Int32 index,
            [out] Int32* value);

        GetStructElementGetter(
            [in] Int32 index,
            [out] IStructGetter** getter);

        GetCppVectorElementGetter(
            [in] Int32 index,
            [out] ICppVectorGetter** getter);
    }

    [local]
    interface IModuleInfo {
        GetPath(
            [out] String* path);

        GetVersion(
            [out] Int32* major,
            [out] Int32* minor,
            [out] Int32* build,
            [out] Int32* revision);

        GetClassCount(
            [out] Int32* count);

        GetAllClassInfos(
            [out] ArrayOf<IClassInfo*> classInfos);

        GetClassInfo(
            [in] String fullName,
            [out] IClassInfo** classInfo);

        GetInterfaceCount(
            [out] Int32* count);

        GetAllInterfaceInfos(
            [out] ArrayOf<IInterfaceInfo*> interfaceInfos);

        GetInterfaceInfo(
            [in] String fullName,
            [out] IInterfaceInfo** interfaceInfo);

        GetStructCount(
            [out] Int32* count);

        GetAllStructInfos(
            [out] ArrayOf<IStructInfo*> structInfos);

        GetStructInfo(
            [in] String name,
            [out] IStructInfo** structInfo);

        GetEnumCount(
            [out] Int32* count);

        GetAllEnumInfos(
            [out] ArrayOf<IEnumInfo*> enumInfos);

        GetEnumInfo(
            [in] String fullName,
            [out] IEnumInfo** enumInfo);

        GetTypeAliasCount(
            [out] Int32* count);

        GetAllTypeAliasInfos(
            [out] ArrayOf<ITypeAliasInfo*> typeAliasInfos);

        GetTypeAliasInfo(
            [in] String name,
            [out] ITypeAliasInfo** typeAliasInfo);

        GetConstantCount(
            [out] Int32* count);

        GetAllConstantInfos(
            [out] ArrayOf<IConstantInfo*> constantInfos);

        GetConstantInfo(
            [in] String name,
            [out] IConstantInfo** constantInfo);

        GetImportModuleInfoCount(
            [out] Int32* count);

        GetAllImportModuleInfos(
            [out] ArrayOf<IModuleInfo*> moduleInfos);
    }

    [local]
    interface IConstantInfo {
        GetName(
            [out] String* name);

        GetValue(
            [out] Int32* value);

        GetModuleInfo(
            [out] IModuleInfo** moduleInfo);
    }

    [local]
    interface IClassInfo {
        GetName(
            [out] String* name);

        GetNamespace(
            [out] String* ns);

        GetId(
            [out] ClassID* clsid);

        GetModuleInfo(
            [out] IModuleInfo** moduleInfo);

        GetClassLoader(
            [out] IInterface** loader);

        SetClassLoader(
            [in] IInterface* loader);

        IsSingleton(
            [out] Boolean* isSingleton);

        GetThreadingModel(
            [out] ThreadingModel* threadingModel);

        IsPrivate(
            [out] Boolean* isPrivate);

        IsReturnValue(
            [out] Boolean* returnValue);

        IsBaseClass(
            [out] Boolean* isBaseClass);

        HasBaseClass(
            [out] Boolean* hasBaseClass);

        GetBaseClassInfo(
            [out] IClassInfo** baseClassInfo);

        IsGeneric(
            [out] Boolean* isGeneric);

        HasGeneric(
            [out] Boolean* hasGeneric);

        GetGenericInfo(
            [out] IClassInfo** genericInfo);

        IsRegime(
            [out] Boolean* isRegime);

        GetAspectCount(
            [out] Int32* count);

        GetAllAspectInfos(
            [out] ArrayOf<IClassInfo*> aspectInfos);

        GetAspectInfo(
            [in] String name,
            [out] IClassInfo** aspectInfo);

        IsAspect(
            [out] Boolean* isAspect);

        GetAggregateeCount(
            [out] Int32* count);

        GetAllAggregateeInfos(
            [out] ArrayOf<IClassInfo*> aggregateeInfos);

        GetAggregateeInfo(
            [in] String name,
            [out] IClassInfo** aggregateeInfo);

        GetConstructorCount(
            [out] Int32* count);

        GetAllConstructorInfos(
            [out] ArrayOf<IConstructorInfo*> constructorInfos);

        GetConstructorInfoByParamNames(
            [in] String name,
            [out] IConstructorInfo** constructorInfo);

        GetConstructorInfoByParamCount(
            [in] Int32 count,
            [out] IConstructorInfo** constructorInfo);

        GetInterfaceCount(
            [out] Int32* count);

        GetAllInterfaceInfos(
            [out] ArrayOf<IInterfaceInfo*> interfaceInfos);

        GetInterfaceInfo(
            [in] String fullName,
            [out] IInterfaceInfo** interfaceInfo);

        HasInterfaceInfo(
            [in] IInterfaceInfo* interfaceInfo,
            [out] Boolean* result);

        GetCallbackInterfaceCount(
            [out] Int32* count);

        GetAllCallbackInterfaceInfos(
            [out] ArrayOf<IInterfaceInfo*> callbackInterfaceInfos);

        GetCallbackInterfaceInfo(
            [in] String name,
            [out] IInterfaceInfo** callbackInterfaceInfo);

        GetMethodCount(
            [out] Int32* count);

        GetAllMethodInfos(
            [out] ArrayOf<IMethodInfo*> methodInfos);

        GetMethodInfo(
            [in] String name,
            [in] String signature,
            [out] IMethodInfo** methodInfo);

        GetCallbackMethodCount(
            [out] Int32* count);

        GetAllCallbackMethodInfos(
            [out] ArrayOf<ICallbackMethodInfo*> callbackMethodInfos);

        GetCallbackMethodInfo(
            [in] String name,
            [out] ICallbackMethodInfo** callbackMethodInfo);

        RemoveAllCallbackHandlers(
            [in] PInterface server);

        CreateObject(
            [out] PInterface* object);

        CreateObjectInRegime(
            [in] PRegime rgm,
            [out] PInterface* object);
    }

    [local]
    interface IConstructorInfo extends IFunctionInfo {
        GetAnnotation(
            [out] String* annotation);

        CreateArgumentList(
            [out] IArgumentList** argumentList);

        CreateObject(
            [in] IArgumentList* argumentList,
            [out] PInterface* object);

        CreateObjectInRegime(
            [in] PRegime rgm,
            [in] IArgumentList* argumentList,
            [out] PInterface* object);
    }

    [local]
    interface ICallbackMethodInfo extends IFunctionInfo {
        AddCallback(
            [in] PInterface server,
            [in] EventHandler handler);

        RemoveCallback(
            [in] PInterface server,
            [in] EventHandler handler);

        CreateDelegateProxy(
            [in] PVoid targetObject,
            [in] PVoid targetMethod,
            [in] ICallbackInvocation* callbackInvocation,
            [out] IDelegateProxy** delegateProxy);
    }

    [local]
    interface IDelegateProxy {
        GetCallbackMethodInfo(
            [out] ICallbackMethodInfo** callbackMethodInfo);

        GetTargetObject(
            [out] PVoid* targetObject);

        GetTargetMethod(
            [out] PVoid* targetMethod);

        GetCallbackInvocation(
            [out] ICallbackInvocation** callbackInvocation);

        GetDelegate(
            [out] EventHandler* handler);
    }

    [local]
    interface ICallbackInvocation {
        Invoke(
            [in] PVoid targetObject,
            [in] PVoid targetMethod,
            [in] ICallbackArgumentList* callbackArgumentList);
    }

    [local, deprecated]
    interface ICallbackArgumentList {
        GetCallbackMethodInfo(
            [out] ICallbackMethodInfo** callbackMethodInfo);

        GetServerPtrArgument(
            [out] PInterface* server);

        GetInt16Argument(
            [in] Int32 index,
            [out] Int16* value);

        GetInt32Argument(
            [in] Int32 index,
            [out] Int32* value);

        GetInt64Argument(
            [in] Int32 index,
            [out] Int64* value);

        GetByteArgument(
            [in] Int32 index,
            [out] Byte* value);

        GetFloatArgument(
            [in] Int32 index,
            [out] Float* value);

        GetDoubleArgument(
            [in] Int32 index,
            [out] Double* value);

        GetCharArgument(
            [in] Int32 index,
            [out] Char32* value);

        GetStringArgument(
            [in] Int32 index,
            [out] String* value);

        GetBooleanArgument(
            [in] Int32 index,
            [out] Boolean* value);

        GetEMuidArgument(
            [in] Int32 index,
            [out] EMuid** value);

        GetEGuidArgument(
            [in] Int32 index,
            [out] EGuid** value);

        GetECodeArgument(
            [in] Int32 index,
            [out] ECode* value);

        // Need it?
        GetLocalPtrArgument(
            [in] Int32 index,
            [out] LocalPtr* value);

        GetEnumArgument(
            [in] Int32 index,
            [out] Int32* value);

        GetCarArrayArgument(
            [in] Int32 index,
            [out] PCarQuintet* value);

        GetStructPtrArgument(
            [in] Int32 index,
            [out] PVoid* value);

        GetObjectPtrArgument(
            [in] Int32 index,
            [out] PInterface* value);
    }
}

/** @} */

