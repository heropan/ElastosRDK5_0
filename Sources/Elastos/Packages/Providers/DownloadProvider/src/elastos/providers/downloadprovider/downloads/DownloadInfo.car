
module
{
    using interface Elastos.Droid.Content.IContentResolver;
    using interface Elastos.Droid.Content.IContext;
    using interface Elastos.Droid.Net.IUri;
    using interface Elastos.Droid.Internal.Utility.IIndentingPrintWriter;
    using interface Elastos.Utility.Concurrent.IExecutorService;
    using interface Elastos.Utility.ICollection;
    interface Elastos.Providers.DownloadProvider.Downloads.IDownloadScanner;
    interface Elastos.Providers.DownloadProvider.Downloads.IDownloadNotifier;

    namespace Elastos {
    namespace Providers {
    namespace DownloadProvider {
    namespace Downloads {

    /**
     * Constants used to indicate network state for a specific download, after
     * applying any requested constraints.
     */
    enum NetworkState {
        /**
         * The network is usable for the given download.
         */
        OK,

        /**
         * There is no network connectivity.
         */
        NO_CONNECTION,

        /**
         * The download exceeds the maximum size for this network.
         */
        UNUSABLE_DUE_TO_SIZE,

        /**
         * The download exceeds the recommended maximum size for this network,
         * the user must confirm for this download to proceed without WiFi.
         */
        RECOMMENDED_UNUSABLE_DUE_TO_SIZE,

        /**
         * The current connection is roaming, and the download can't proceed
         * over a roaming connection.
         */
        CANNOT_USE_ROAMING,

        /**
         * The app requesting the download specific that it can't use the
         * current network connection.
         */
        TYPE_DISALLOWED_BY_REQUESTOR,

        /**
         * Current network is blocked for requesting application.
         */
        BLOCKED
    }

    interface IDownloadInfo;

    interface IDownloadInfoReader
    {
        NewDownloadInfo(
            [in] IContext* context,
            [in] ISystemFacade* systemFacade,
            [in] IDownloadNotifier* notifier,
            [out] IDownloadInfo** Result);

        UpdateFromDatabase(
            [in] IDownloadInfo* info);
    }

    /**
     * Details about a specific download. Fields should only be mutated by updating
     * from database query.
     */
    interface IDownloadInfo
    {
        GetHeaders(
            [out] ICollection** result);

        GetUserAgent(
            [out] String* result);

        SendIntentIfRequested();

        /**
         * Returns the time when a download should be restarted.
         */
        RestartTime(
            [in] Int64 now,
            [out] Int64* result);

        /**
         * Returns whether this download has a visible notification after
         * completion.
         */
        HasCompletionNotification(
            [out] Boolean* result);

        /**
         * Returns whether this download is allowed to use the network.
         */
        CheckCanUseNetwork(
            [in] Int64 totalBytes,
            [out] NetworkState* result);

        /**
         * If download is ready to start, and isn't already pending or executing,
         * create a {@link DownloadThread} and enqueue it into given
         * {@link Executor}.
         *
         * @return If actively downloading.
         */
        StartDownloadIfReady(
            [in] IExecutorService* executor,
            [out] Boolean* result);

        /**
         * If download is ready to be scanned, enqueue it into the given
         * {@link DownloadScanner}.
         *
         * @return If actively scanning.
         */
        StartScanIfReady(
            [in] IDownloadScanner* scanner,
            [out] Boolean* result);

        IsOnCache(
            [out] Boolean* result);

        GetMyDownloadsUri(
            [out] IUri** result);

        GetAllDownloadsUri(
            [out] IUri** result);

        ToString(
            [out] String* res);

        // Dump(
        //    [in] IIndentingPrintWriter* pw);

        /**
         * Return time when this download will be ready for its next action, in
         * milliseconds after given time.
         *
         * @return If {@code 0}, download is ready to proceed immediately. If
         *         {@link Long#MAX_VALUE}, then download has no future actions.
         */
        NextActionMillis(
            [in] Int64 now,
            [out] Int64* result);

        /**
         * Returns whether a file should be scanned
         */
        ShouldScanFile(
            [out] Boolean* result);

        NotifyPauseDueToSize(
            [in] Boolean isWifiRequired);
    }

    interface IDownloadInfoHelper {
        /**
         * Query and return status of requested download.
         */
        QueryDownloadStatus(
            [in] IContentResolver* resolver,
            [in] Int64 id,
            [out] Int32* result);
    }

    } // namespace Downloads
    } // namespace DownloadProvider
    } // namespace Providers
    } // namespace Elastos
}
